<Type Name="DirectoryInfo" FullName="System.IO.DirectoryInfo">
  <TypeSignature Language="C#" Value="public sealed class DirectoryInfo : System.IO.FileSystemInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DirectoryInfo extends System.IO.FileSystemInfo" />
  <TypeSignature Language="DocId" Value="T:System.IO.DirectoryInfo" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.FileSystemInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ディレクトリとサブディレクトリを作成、削除、および列挙するためのインスタンス メソッドを公開します。 このクラスは継承できません。  
  
 この型の .NET Framework ソース コードを参照するには、[参照ソース](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e)をご覧ください。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e). You can browse through the source code online, download the reference for offline viewing, and step through the sources \(including patches and updates\) during debugging; see [instructions](http://referencesource.microsoft.com/).  
  
 Use the <xref:System.IO.DirectoryInfo> class for typical operations such as copying, moving, renaming, creating, and deleting directories.  
  
 If you are going to reuse an object several times, consider using the instance method of <xref:System.IO.DirectoryInfo> instead of the corresponding static methods of the <xref:System.IO.Directory> class, because a security check will not always be necessary.  
  
> [!NOTE]
>  In members that accept a path as an input string, that path must be well\-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, "c:\\temp c:\\windows" also raises an exception in most cases. Ensure that your paths are well\-formed when using methods that accept a path string.  
  
 In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention \(UNC\) path for a server and share name. For example, all the following are acceptable paths:  
  
-   "c:\\\\MyDir\\\\MyFile.txt" in C\#, or "c:\\MyDir\\MyFile.txt" in Visual Basic.  
  
-   "c:\\\\MyDir" in C\#, or "c:\\MyDir" in Visual Basic.  
  
-   "MyDir\\\\MySubdir" in C\#, or "MyDir\\MySubDir" in Visual Basic.  
  
-   "\\\\\\\\MyServer\\\\MyShare" in C\#, or "\\\\MyServer\\MyShare" in Visual Basic.  
  
 By default, full read\/write access to new directories is granted to all users.  
  
 For a list of common I\/O tasks, see [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc).  
  
   
  
## 例  
 The following example demonstrates some of the main members of the **languageKeyword tag is not supported!!!!**  
 class.  
  
 [!code-cpp[DirInfo Class Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR/DirInfo Class Example/CPP/dirinfo class example.cpp#1)]
 [!code-csharp[DirInfo Class Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirInfo Class Example/CS/dirinfo class example.cs#1)]
 [!code-vb[DirInfo Class Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirInfo Class Example/VB/dirinfo class example.vb#1)]  
  
 The following example demonstrates how to copy a directory and its contents.  
  
 [!code-csharp[IO.DirectoryInfo\-CopyDir\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DirectoryInfo-CopyDir/cs/copydir.cs#1)]
 [!code-vb[IO.DirectoryInfo\-CopyDir\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DirectoryInfo-CopyDir/vb/CopyDir.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.File" />
    <altmember cref="P:System.IO.FileSystemInfo.Attributes" />
    <altmember cref="T:System.IO.FileSystemWatcher" />
    <altmember cref="T:System.IO.Directory" />
    <altmember cref="T:System.IO.Path" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectoryInfo (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <see langword="DirectoryInfo" /> を作成する対象のパスを指定する文字列。</param>
        <summary>指定したパスに対する、<see cref="T:System.IO.DirectoryInfo" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターでは、ディレクトリが存在するかどうかはチェックされません。 このコンス トラクターとは、後続の操作でディスクへのアクセスに使用される文字列のプレース ホルダーです。  
  
 `path` パラメーターは、汎用名前付け規則 \(UNC\) 共有上のファイルを含む、ファイル名を指定できます。  
  
> [!CAUTION]
>  特定のカルチャ設定を使用して文字のセットをコンパイルし、別のカルチャ設定で、同じ文字を取得するときに、文字は、解釈されないことしがスローされる例外が発生する可能性があります。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、このコンス トラクターを使用して、指定したディレクトリとサブディレクトリを作成し、サブディレクトリを格納するディレクトリを削除できないことを示します。  
  
 [!code-cpp[DirInfo Ctor\#1](~/samples/snippets/cpp/VS_Snippets_CLR/DirInfo Ctor/CPP/dirinfo ctor.cpp#1)]
 [!code-csharp[DirInfo Ctor\#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirInfo Ctor/CS/dirinfo ctor.cs#1)]
 [!code-vb[DirInfo Ctor\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirInfo Ctor/VB/dirinfo ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> に、", &lt;, &gt;, または | などの正しくない文字が含まれています。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大文字数を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。 指定されたパスかファイル名、またはその両方が長すぎます。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from files and directories. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
        <altmember cref="T:System.IO.DriveInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public void Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.Create" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ディレクトリを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the directory already exists, this method does nothing.  
  
 For a list of common I\/O tasks, see [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc).  
  
   
  
## 例  
 The following example checks whether a specified directory exists, creates the directory if it does not exist, and deletes the directory.  
  
 [!code-cpp[DirInfo Create\#1](~/samples/snippets/cpp/VS_Snippets_CLR/DirInfo Create/CPP/dirinfo create.cpp#1)]
 [!code-csharp[DirInfo Create\#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirInfo Create/CS/dirinfo create.cs#1)]
 [!code-vb[DirInfo Create\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirInfo Create/VB/dirinfo create.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ディレクトリを作成できません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing files. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public void Create (System.Security.AccessControl.DirectorySecurity directorySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Create(class System.Security.AccessControl.DirectorySecurity directorySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directorySecurity" Type="System.Security.AccessControl.DirectorySecurity" />
      </Parameters>
      <Docs>
        <param name="directorySecurity">ディレクトリに適用するアクセス制御。</param>
        <summary>
          <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトを使用してディレクトリを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドのオーバー ロードを使用すると、セキュリティが適用される前に、ディレクトリにアクセスできる可能性はありませんので、アクセス制御\] で、ディレクトリを作成します。  
  
 ディレクトリが既に存在する場合は、このメソッドは何も行われません。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <paramref name="path" /> で指定されたディレクトリは読み取り専用であるか、空ではありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は長さ 0 の文字列であるか、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義される 1 つ以上の使用できない文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">マップされていないドライブにあるなど、指定されたパスが正しくありません。</exception>
        <exception cref="T:System.NotSupportedException">コロン \(:\) 文字だけで、ディレクトリを作成しようとしました。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to create a directory. Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Associated enumeration: <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateSubdirectory">
      <MemberSignature Language="C#" Value="public System.IO.DirectoryInfo CreateSubdirectory (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.DirectoryInfo CreateSubdirectory(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">指定するパス。 異なるディスク ボリュームまたは UNC \(Universal Naming Convention\) 名は指定できません。</param>
        <summary>指定したパスに 1 つ以上のサブディレクトリを作成します。 パスは、この <see cref="T:System.IO.DirectoryInfo" /> クラスのインスタンスに対する相対パスで指定できます。</summary>
        <returns>
          <paramref name="path" /> に指定された最後のディレクトリ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されたすべてのディレクトリ `path` しない限り、作成の一部 `path` が無効です。`path` ファイル パスではなく、ディレクトリ パスを指定します。 サブディレクトリが既に存在する場合は、このメソッドは何も行われません。  
  
> [!NOTE]
>  パス名は 248 文字に制限されます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、サブディレクトリの作成を示します。 この例では、作成されると、作成されたディレクトリが削除されます。 そのため、このサンプルをテストするコードで削除する行をコメントします。  
  
 [!code-cpp[directoryinfocreatesub\#1](~/samples/snippets/cpp/VS_Snippets_CLR/directoryinfocreatesub/CPP/directoryinfocreatesub.cpp#1)]
 [!code-csharp[directoryinfocreatesub\#1](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfocreatesub/CS/directoryinfocreatesub.cs#1)]
 [!code-vb[directoryinfocreatesub\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfocreatesub/VB/directoryinfocreatesub.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は有効なファイル パスを指定していないか、または無効な <see langword="DirectoryInfo" /> 文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">マップされていないドライブにあるなど、指定されたパスが無効です。</exception>
        <exception cref="T:System.IO.IOException">サブディレクトリを作成できません。  
  
 または  
  
 <paramref name="path" /> で指定された名前がファイルまたはディレクトリに既にあります。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大文字数を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。 指定されたパスかファイル名、またはその両方が長すぎます。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元には、ディレクトリを作成するためのコード アクセス許可がありません。  
  
 または  
  
 呼び出し元には、返された <see cref="T:System.IO.DirectoryInfo" /> オブジェクトで記述されているディレクトリを読み取るためのコード アクセス許可がありません。<paramref name="path" /> パラメーターが既存のディレクトリを記述する場合、これが発生する可能性があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> に、ドライブ ラベル \(「C:\\」\) の一部ではないコロン文字 \(:\) が含まれています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateSubdirectory">
      <MemberSignature Language="C#" Value="public System.IO.DirectoryInfo CreateSubdirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.DirectoryInfo CreateSubdirectory(string path, class System.Security.AccessControl.DirectorySecurity directorySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="directorySecurity" Type="System.Security.AccessControl.DirectorySecurity" />
      </Parameters>
      <Docs>
        <param name="path">指定するパス。 異なるディスク ボリュームまたは UNC \(Universal Naming Convention\) 名は指定できません。</param>
        <param name="directorySecurity">適用するセキュリティ。</param>
        <summary>適用するセキュリティを指定して、指定したパスに 1 つ以上のサブディレクトリを作成します。 パスは、この <see cref="T:System.IO.DirectoryInfo" /> クラスのインスタンスに対する相対パスで指定できます。</summary>
        <returns>
          <paramref name="path" /> に指定された最後のディレクトリ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Any and all directories specified in **parameterReference tag is not supported!!!!**  
 are created, unless some part of **parameterReference tag is not supported!!!!**  
 is invalid. The **parameterReference tag is not supported!!!!**  
 parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing.  
  
> [!NOTE]
>  Path names are limited to 248 characters.  
  
 For a list of common I\/O tasks, see [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc).  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> は有効なファイル パスを指定していないか、または無効な <see langword="DirectoryInfo" /> 文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">マップされていないドライブにあるなど、指定されたパスが無効です。</exception>
        <exception cref="T:System.IO.IOException">サブディレクトリを作成できません。  
  
 または  
  
 <paramref name="path" /> で指定された名前がファイルまたはディレクトリに既にあります。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大文字数を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。 指定されたパスかファイル名、またはその両方が長すぎます。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元には、ディレクトリを作成するためのコード アクセス許可がありません。  
  
 または  
  
 呼び出し元には、返された <see cref="T:System.IO.DirectoryInfo" /> オブジェクトで記述されているディレクトリを読み取るためのコード アクセス許可がありません。<paramref name="path" /> パラメーターが既存のディレクトリを記述する場合、これが発生する可能性があります。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> に、ドライブ ラベル \(「C:\\」\) の一部ではないコロン文字 \(:\) が含まれています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading and writing files. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public override void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.Delete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.IO.DirectoryInfo" /> が空の場合、それを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For a list of common I\/O tasks, see [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc).  
  
   
  
## 例  
 The following example throws an exception if you attempt to delete a directory that is not empty.  
  
 [!code-cpp[DirInfo Delete1\#1](~/samples/snippets/cpp/VS_Snippets_CLR/DirInfo Delete1/CPP/dirinfo delete1.cpp#1)]
 [!code-csharp[DirInfo Delete1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirInfo Delete1/CS/dirinfo delete1.cs#1)]
 [!code-vb[DirInfo Delete1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirInfo Delete1/VB/dirinfo delete1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">ディレクトリに読み取り専用のファイルが含まれています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">この <see cref="T:System.IO.DirectoryInfo" /> オブジェクトによって記述されるディレクトリは存在しないか、または見つかりませんでした。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリが空ではありません。  
  
 \-または\-  
  
 ディレクトリはアプリケーションの現在の作業ディレクトリです。  
  
 \-または\-  
  
 ディレクトリに開いているハンドルがあり、オペレーティング システムが Windows XP かそれ以前のバージョンです。 このハンドルが開いている原因は、ディレクトリを列挙したことにある可能性があります。 詳細については、「[How to: Enumerate Directories and Files](http://msdn.microsoft.com/ja-jp/86b69a08-3bfa-4e5f-b4e1-3b7cb8478215)」を参照してください。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing directories. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete (bool recursive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Delete(bool recursive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.Delete(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="recursive">このディレクトリ、そのサブディレクトリ、およびすべてのファイルを削除する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>中に含まれているサブディレクトリとファイルを削除するかどうかを指定して、<see cref="T:System.IO.DirectoryInfo" /> のインスタンスを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the **languageKeyword tag is not supported!!!!**  
 has no files or subdirectories, this method deletes the **languageKeyword tag is not supported!!!!**  
 even if **parameterReference tag is not supported!!!!**  
 is **languageKeyword tag is not supported!!!!**  
. Attempting to delete a **languageKeyword tag is not supported!!!!**  
 that is not empty when **parameterReference tag is not supported!!!!**  
 is **languageKeyword tag is not supported!!!!**  
 throws an <xref:System.IO.IOException>.  
  
 For a list of common I\/O tasks, see [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc).  
  
   
  
## 例  
 The following example demonstrates deleting a directory. Because the directory is removed, first comment out the **languageKeyword tag is not supported!!!!**  
 line to test that the directory exists. Then uncomment the same line of code to test that the directory was removed successfully.  
  
 [!code-cpp[directoryinfodelete\#1](~/samples/snippets/cpp/VS_Snippets_CLR/directoryinfodelete/CPP/directoryinfodelete.cpp#1)]
 [!code-csharp[directoryinfodelete\#1](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfodelete/CS/directoryinfodelete.cs#1)]
 [!code-vb[directoryinfodelete\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfodelete/VB/directoryinfodelete.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">ディレクトリに読み取り専用のファイルが含まれています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">この <see cref="T:System.IO.DirectoryInfo" /> オブジェクトによって記述されるディレクトリは存在しないか、または見つかりませんでした。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリが読み取り専用です。  
  
 \-または\-  
  
 ディレクトリに 1 つ以上のファイルまたはサブディレクトリが含まれており、かつ <paramref name="recursive" /> が <see langword="false" /> です。  
  
 \-または\-  
  
 ディレクトリはアプリケーションの現在の作業ディレクトリです。  
  
 \-または\-  
  
 ディレクトリまたはそのファイルのうちの 1 つについて開かれているハンドルがあり、かつオペレーティング システムが Windows XP 以前です。 このハンドルが開いている原因は、ディレクトリおよびファイルを列挙したことにある可能性があります。 詳細については、「[How to: Enumerate Directories and Files](http://msdn.microsoft.com/ja-jp/86b69a08-3bfa-4e5f-b4e1-3b7cb8478215)」を参照してください。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess">Write flag required for write permission to the **languageKeyword tag is not supported!!!!**  
 and subdirectories to be deleted.</permission>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.DirectoryInfo&gt; EnumerateDirectories ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.DirectoryInfo&gt; EnumerateDirectories() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.EnumerateDirectories" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.DirectoryInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のディレクトリの列挙可能なディレクトリ情報のコレクションを返します。</summary>
        <returns>現在のディレクトリ内の列挙可能なディレクトリのコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  
  
-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  
  
-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  
  
 Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  
  
 This method pre\-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.  
  
   
  
## 例  
 The following example enumerates the subdirectories under the C:\\Program Files directory and uses a LINQ query to return the names of all directories that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  
  
 If you only need the names of the subdirectories, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateDirectories%28System.String%29> method.  
  
 [!code-csharp[System.IO.DirectoryInfo.EnumDirs\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directoryinfo.enumdirs/cs/program.cs#1)]
 [!code-vb[System.IO.DirectoryInfo.EnumDirs\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directoryinfo.enumdirs/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <see cref="T:System.IO.DirectoryInfo" /> オブジェクト内のカプセル化されたパスが有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.DirectoryInfo&gt; EnumerateDirectories (string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.DirectoryInfo&gt; EnumerateDirectories(string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.EnumerateDirectories(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.DirectoryInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="searchPattern">ディレクトリの名前と照合する検索文字列。  このパラメーターには、正確なリテラル パスとワイルドカード \(\* と ?\)  文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。 既定のパターンは "\*" で、すべてのファイルが返されます。</param>
        <summary>指定された検索パターンに一致する列挙可能なディレクトリ情報のコレクションを返します。</summary>
        <returns>
          <paramref name="searchPattern" /> に一致する列挙可能なディレクトリのコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  
  
|Wildcard specifier|Matches|  
|------------------------|-------------|  
|\* \(asterisk\)|Zero or more characters in that position.|  
|? \(question mark\)|Zero or one character in that position.|  
  
 Characters other than the wildcard are literal characters. For example, the  string "\*t" searches for all names in  ending with the letter "t". ". The **parameterReference tag is not supported!!!!**  
 string "s\*" searches for all names in **parameterReference tag is not supported!!!!**  
 beginning with the letter "s".  
  
 The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  
  
-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  
  
-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  
  
 Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  
  
 This method pre\-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <see cref="T:System.IO.DirectoryInfo" /> オブジェクト内のカプセル化されたパスが有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.DirectoryInfo&gt; EnumerateDirectories (string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.DirectoryInfo&gt; EnumerateDirectories(string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.DirectoryInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchPattern" Type="System.String" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="searchPattern">ディレクトリの名前と照合する検索文字列。  このパラメーターには、正確なリテラル パスとワイルドカード \(\* と ?\)  文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。 既定のパターンは "\*" で、すべてのファイルが返されます。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるのか、またはすべてのサブディレクトリを含めるのかを指定する列挙値の 1 つ。 既定値は <see cref="F:System.IO.SearchOption.TopDirectoryOnly" /> です。</param>
        <summary>指定された検索パターンと、サブディレクトリを検索するかどうかを指定するオプションの設定に一致する列挙可能なディレクトリ情報のコレクションを返します。</summary>
        <returns>
          <paramref name="searchPattern" /> と <paramref name="searchOption" /> に一致する列挙可能なディレクトリのコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  
  
|Wildcard specifier|Matches|  
|------------------------|-------------|  
|\* \(asterisk\)|Zero or more characters in that position.|  
|? \(question mark\)|Zero or one character in that position.|  
  
 Characters other than the wildcard are literal characters. For example, the  string "\*t" searches for all names in  ending with the letter "t". ". The **parameterReference tag is not supported!!!!**  
 string "s\*" searches for all names in **parameterReference tag is not supported!!!!**  
 beginning with the letter "s".  
  
 The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  
  
-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  
  
-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  
  
 Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  
  
 This method pre\-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration.  
  
   
  
## 例  
 The following example, starting from a specified directory, uses this method and the <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> method to enumerate the files and directories within the start directory and display details of any files over 10 MB in size.  
  
 [!code-csharp[System.IO.DirectoryInfo.EnumerateDirectories\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directoryinfo.enumeratedirectories/cs/program.cs#1)]
 [!code-vb[System.IO.DirectoryInfo.EnumerateDirectories\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directoryinfo.enumeratedirectories/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="searchOption" /> は正しい <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <see cref="T:System.IO.DirectoryInfo" /> オブジェクト内のカプセル化されたパスが有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.FileInfo&gt; EnumerateFiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.FileInfo&gt; EnumerateFiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.EnumerateFiles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.FileInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のディレクトリに存在するファイル情報の列挙可能なコレクションを返します。</summary>
        <returns>現在のディレクトリ内の列挙可能なファイルのコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  
  
-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  
  
-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  
  
 Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  
  
 This method pre\-populates the values of the following <xref:System.IO.FileInfo> properties:  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
-   <xref:System.IO.FileInfo.Length%2A>  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.  
  
   
  
## 例  
 The following example enumerates the files under a specified directory and uses a LINQ query to return the names of all files that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  
  
 If you only need the names of the files, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateFiles%28System.String%29?displayProperty=fullName> method.  
  
 [!code-csharp[System.IO.DirectoryInfo.EnumFiles\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/cs/program.cs#1)]
 [!code-vb[System.IO.DirectoryInfo.EnumFiles\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/vb/module1.vb#1)]  
  
 The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  
  
 [!code-csharp[System.IO.DirectoryInfo.EnumFiles\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/cs/program2.cs#2)]
 [!code-vb[System.IO.DirectoryInfo.EnumFiles\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/vb/module2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <see cref="T:System.IO.DirectoryInfo" /> オブジェクト内のカプセル化されたパスが有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.FileInfo&gt; EnumerateFiles (string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.FileInfo&gt; EnumerateFiles(string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.EnumerateFiles(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.FileInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="searchPattern">ファイル名と照合する検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\) の組み合わせを使用できます。 文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。 既定のパターンは "\*" で、すべてのファイルが返されます。</param>
        <summary>検索パターンに一致する列挙可能なファイル情報のコレクションを返します。</summary>
        <returns>
          <paramref name="searchPattern" /> に一致する列挙可能なファイルのコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  
  
|Wildcard specifier|Matches|  
|------------------------|-------------|  
|\* \(asterisk\)|Zero or more characters in that position.|  
|? \(question mark\)|Zero or one character in that position.|  
  
 Characters other than the wildcard are literal characters. For example, the  string "\*t" searches for all names in  ending with the letter "t". ". The **parameterReference tag is not supported!!!!**  
 string "s\*" searches for all names in **parameterReference tag is not supported!!!!**  
 beginning with the letter "s".  
  
 The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  
  
-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  
  
-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  
  
 Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  
  
 This method pre\-populates the values of the following <xref:System.IO.FileInfo> properties:  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
-   <xref:System.IO.FileInfo.Length%2A>  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.  
  
   
  
## 例  
 The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  
  
 [!code-csharp[System.IO.DirectoryInfo.EnumFiles\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/cs/program2.cs#2)]
 [!code-vb[System.IO.DirectoryInfo.EnumFiles\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/vb/module2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <see cref="T:System.IO.DirectoryInfo" /> オブジェクト内のカプセル化されたパスが有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.FileInfo&gt; EnumerateFiles (string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.FileInfo&gt; EnumerateFiles(string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.FileInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchPattern" Type="System.String" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="searchPattern">ファイル名と照合する検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\) の組み合わせを使用できます。 文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。 既定のパターンは "\*" で、すべてのファイルが返されます。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるのか、またはすべてのサブディレクトリを含めるのかを指定する列挙値の 1 つ。 既定値は <see cref="F:System.IO.SearchOption.TopDirectoryOnly" /> です。</param>
        <summary>指定された検索パターンと、サブディレクトリを検索するかどうかを指定するオプションの設定に一致する列挙可能なファイル情報のコレクションを返します。</summary>
        <returns>
          <paramref name="searchPattern" /> と <paramref name="searchOption" /> に一致する列挙可能なファイルのコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  
  
|Wildcard specifier|Matches|  
|------------------------|-------------|  
|\* \(asterisk\)|Zero or more characters in that position.|  
|? \(question mark\)|Zero or one character in that position.|  
  
 Characters other than the wildcard are literal characters. For example, the  string "\*t" searches for all names in  ending with the letter "t". ". The **parameterReference tag is not supported!!!!**  
 string "s\*" searches for all names in **parameterReference tag is not supported!!!!**  
 beginning with the letter "s".  
  
 The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  
  
-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  
  
-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  
  
 Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  
  
 This method pre\-populates the values of the following <xref:System.IO.FileInfo> properties:  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
-   <xref:System.IO.FileInfo.Length%2A>  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.  
  
   
  
## 例  
 The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  
  
 [!code-csharp[System.IO.DirectoryInfo.EnumFiles\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/cs/program2.cs#2)]
 [!code-vb[System.IO.DirectoryInfo.EnumFiles\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.directoryinfo.enumfiles/vb/module2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="searchOption" /> は正しい <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <see cref="T:System.IO.DirectoryInfo" /> オブジェクト内のカプセル化されたパスが有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemInfos">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.FileSystemInfo&gt; EnumerateFileSystemInfos ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.FileSystemInfo&gt; EnumerateFileSystemInfos() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.FileSystemInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のディレクトリ内の列挙可能なファイル システム情報のコレクションを返します。</summary>
        <returns>現在のディレクトリ内の列挙可能なファイル システム情報のコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  
  
-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  
  
-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  
  
 Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  
  
 This method pre\-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <see cref="T:System.IO.DirectoryInfo" /> オブジェクト内のカプセル化されたパスが有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemInfos">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.FileSystemInfo&gt; EnumerateFileSystemInfos (string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.FileSystemInfo&gt; EnumerateFileSystemInfos(string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.FileSystemInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="searchPattern">ディレクトリの名前と照合する検索文字列。  このパラメーターには、正確なリテラル パスとワイルドカード \(\* と ?\)  文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。 既定のパターンは "\*" で、すべてのファイルが返されます。</param>
        <summary>指定された検索パターンに一致する列挙可能なファイル システム情報のコレクションを返します。</summary>
        <returns>
          <paramref name="searchPattern" /> に一致する列挙可能なファイル システム情報オブジェクトのコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  
  
|Wildcard specifier|Matches|  
|------------------------|-------------|  
|\* \(asterisk\)|Zero or more characters in that position.|  
|? \(question mark\)|Zero or one character in that position.|  
  
 Characters other than the wildcard are literal characters. For example, the  string "\*t" searches for all names in  ending with the letter "t". ". The **parameterReference tag is not supported!!!!**  
 string "s\*" searches for all names in **parameterReference tag is not supported!!!!**  
 beginning with the letter "s".  
  
 The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  
  
-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  
  
-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  
  
 Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  
  
 This method pre\-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <see cref="T:System.IO.DirectoryInfo" /> オブジェクト内のカプセル化されたパスが有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="EnumerateFileSystemInfos">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.IO.FileSystemInfo&gt; EnumerateFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.IO.FileSystemInfo&gt; EnumerateFileSystemInfos(string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IO.FileSystemInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchPattern" Type="System.String" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="searchPattern">ディレクトリの名前と照合する検索文字列。  このパラメーターには、正確なリテラル パスとワイルドカード \(\* と ?\)  文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。 既定のパターンは "\*" で、すべてのファイルが返されます。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるのか、またはすべてのサブディレクトリを含めるのかを指定する列挙値の 1 つ。 既定値は <see cref="F:System.IO.SearchOption.TopDirectoryOnly" /> です。</param>
        <summary>指定された検索パターンと、サブディレクトリを検索するかどうかを指定するオプションの設定に一致する列挙可能なファイル システム情報のコレクションを返します。</summary>
        <returns>
          <paramref name="searchPattern" /> および <paramref name="searchOption" /> に一致する列挙可能なファイル システム情報オブジェクトのコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  
  
|Wildcard specifier|Matches|  
|------------------------|-------------|  
|\* \(asterisk\)|Zero or more characters in that position.|  
|? \(question mark\)|Zero or one character in that position.|  
  
 Characters other than the wildcard are literal characters. For example, the  string "\*t" searches for all names in  ending with the letter "t". ". The **parameterReference tag is not supported!!!!**  
 string "s\*" searches for all names in **parameterReference tag is not supported!!!!**  
 beginning with the letter "s".  
  
 The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  
  
-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  
  
-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  
  
 Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  
  
 This method pre\-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
 The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="searchOption" /> は正しい <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <see cref="T:System.IO.DirectoryInfo" /> オブジェクト内のカプセル化されたパスが有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public override bool Exists { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Exists" />
      <MemberSignature Language="DocId" Value="P:System.IO.DirectoryInfo.Exists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ディレクトリが存在するかどうかを示す値を取得します。</summary>
        <value>ディレクトリが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.IO.DirectoryInfo.Exists%2A> property returns **languageKeyword tag is not supported!!!!**  
 if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.  
  
   
  
## 例  
 The following example demonstrates a use of the **languageKeyword tag is not supported!!!!**  
 property in the context of copying a source directory to a target directory.  
  
 [!code-cpp[DirectoryInfo Usage Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR/DirectoryInfo Usage Example/CPP/copydirectory.cpp#1)]
 [!code-csharp[DirectoryInfo Usage Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirectoryInfo Usage Example/CS/copydirectory.cs#1)]
 [!code-vb[DirectoryInfo Usage Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirectoryInfo Usage Example/VB/copydirectory.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public override string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.IO.DirectoryInfo.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ディレクトリの絶対パスを取得します。</summary>
        <value>絶対パスを含んでいる文字列。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAccessControl">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のディレクトリのアクセス制御リスト \(ACL: Access Control List\) エントリを取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用 <xref:System.IO.DirectoryInfo.GetAccessControl%2A> アクセス権を取得する方法は、現在のファイルのリスト \(ACL\) エントリを制御します。  
  
 詳細については、「[How To: Add or Remove an Access Control List Entry](http://msdn.microsoft.com/ja-jp/53758b39-bd9b-4640-bb04-cad5ed8d0abf)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.DirectorySecurity GetAccessControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.DirectorySecurity GetAccessControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.GetAccessControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.DirectorySecurity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.IO.DirectoryInfo" /> オブジェクトで記述されるディレクトリのアクセス制御リスト \(ACL\) エントリをカプセル化する <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトを取得します。</summary>
        <returns>ディレクトリのアクセス制御規則をカプセル化する <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドのオーバー ロードを呼び出すことは、呼び出すことと同じ、 <xref:System.IO.Directory.GetAccessControl%2A> メソッドのオーバー ロードは、アクセスを指定してコントロールのセクションでは <xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=fullName> &#124; <xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=fullName> \(<xref:System.Security.AccessControl.AccessControlSections.Access?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections.Owner?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections.Group?displayProperty=fullName> Visual Basic で\)。  
  
 使用して、 <xref:System.IO.DirectoryInfo.GetAccessControl%2A> 、現在のファイルのアクセス制御リスト \(ACL\) エントリを取得します。  
  
 ACL は、個人やグループがある、または権限がない、特定のアクションに指定したファイルまたはディレクトリにユーザーを示します。 詳細については、「[How to: Add or Remove an Access Control List Entry](http://msdn.microsoft.com/ja-jp/53758b39-bd9b-4640-bb04-cad5ed8d0abf)」を参照してください。  
  
   
  
## 例  
 次の例では、 <xref:System.IO.DirectoryInfo.GetAccessControl%2A> と <xref:System.IO.DirectoryInfo.SetAccessControl%2A> メソッドを追加し、削除、アクセス制御リスト \(ACL\) エントリをディレクトリからです。  
  
 [!code-cpp[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">ディレクトリが見つからないか、または変更されています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ディレクトリが読み取り専用です。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Microsoft Windows 2000 以降ではありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to enumerate an access control list \(ACL\) for a directory. Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />, <see cref="F:System.Security.AccessControl.AccessControlActions.View" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.DirectorySecurity GetAccessControl (System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.DirectorySecurity GetAccessControl(valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.DirectorySecurity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="includeSections">取得するアクセス制御リスト \(ACL\) の情報の型を指定する <see cref="T:System.Security.AccessControl.AccessControlSections" /> 値のいずれか。</param>
        <summary>現在の <see cref="T:System.IO.DirectoryInfo" /> オブジェクトによって記述されるディレクトリに関する指定された型のアクセス制御リスト \(ACL\) エントリをカプセル化する <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトを取得します。</summary>
        <returns>
          <paramref name="path" /> パラメーターによって記述されるファイルのアクセス制御規則をカプセル化する <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクト。  
  
 例外  
  
 <list type="table">  
<listheader>  
<term> 例外の種類  
  
 </term>  
<description> 条件  
  
 </description>  
</listheader>  
<item>  
<term> <see cref="T:System.SystemException" />  
  
 </term>  
<description> ディレクトリが見つからないか、または変更されています。  
  
 </description>  
</item>  
<item>  
<term> <see cref="T:System.UnauthorizedAccessException" />  
  
 </term>  
<description> 現在のプロセスには、ディレクトリを開くために必要なアクセス権がありません。  
  
 </description>  
</item>  
<item>  
<term> <see cref="T:System.IO.IOException" />  
  
 </term>  
<description> ディレクトリを開くときに、I\/O エラーが発生しました。  
  
 </description>  
</item>  
<item>  
<term> <see cref="T:System.PlatformNotSupportedException" />  
  
 </term>  
<description> 現在のオペレーティング システムは Microsoft Windows 2000 以降ではありません。  
  
 </description>  
</item>  
<item>  
<term> <see cref="T:System.UnauthorizedAccessException" />  
  
 </term>  
<description> ディレクトリが読み取り専用です。  
  
 \-または\-  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.IO.DirectoryInfo.GetAccessControl%2A> 、現在のファイルのアクセス制御リスト \(ACL\) エントリを取得します。  
  
 ACL は、個人やグループがある、または権限がない、特定のアクションに指定したファイルまたはディレクトリにユーザーを示します。 詳細については、「[How to: Add or Remove an Access Control List Entry](http://msdn.microsoft.com/ja-jp/53758b39-bd9b-4640-bb04-cad5ed8d0abf)」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to enumerate an access control list \(ACL\) for a directory. Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />, <see cref="F:System.Security.AccessControl.AccessControlActions.View" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.IO.DirectoryInfo[] GetDirectories ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.DirectoryInfo[] GetDirectories() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.GetDirectories" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のディレクトリのサブディレクトリを返します。</summary>
        <returns>
          <see cref="T:System.IO.DirectoryInfo" /> オブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サブディレクトリが存在しない場合、このメソッドは、空の配列を返します。 このメソッドは、再帰的ではありません。  
  
 このメソッドは、次の値を事前設定 <xref:System.IO.DirectoryInfo> プロパティ。  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
   
  
## 例  
 次の例では、ルート ディレクトリ内のすべてのディレクトリを取得し、ディレクトリ名が表示されます。  
  
 [!code-cpp[directoryinfogetdirectories\#1](~/samples/snippets/cpp/VS_Snippets_CLR/directoryinfogetdirectories/CPP/directoryinfogetdirectories.cpp#1)]
 [!code-csharp[directoryinfogetdirectories\#1](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfogetdirectories/CS/directoryinfogetdirectories.cs#1)]
 [!code-vb[directoryinfogetdirectories\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfogetdirectories/VB/directoryinfogetdirectories.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <see cref="T:System.IO.DirectoryInfo" /> オブジェクト内のカプセル化されたパスが有効ではありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading directories. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.IO.DirectoryInfo[] GetDirectories (string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.DirectoryInfo[] GetDirectories(string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.GetDirectories(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="searchPattern">ディレクトリの名前と照合する検索文字列。  このパラメーターには、正確なリテラル パスとワイルドカード \(\* と ?\)  文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。 既定のパターンは "\*" で、すべてのファイルが返されます。</param>
        <summary>現在の <see cref="T:System.IO.DirectoryInfo" /> 内にあり、指定した検索基準に一致するディレクトリの配列を返します。</summary>
        <returns>
          <paramref name="searchPattern" /> に一致する <see langword="DirectoryInfo" /> 型の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` リテラルのパスとワイルドカードの組み合わせは、文字が、正規表現をサポートしていないを指定できます。 次のワイルドカード文字は使用 `searchPattern`します。  
  
|ワイルドカードの指定子|一致する文字列|  
|-----------------|-------------|  
|\* \(アスタリスク\)|その位置に 0 個以上の文字。|  
|? \(疑問符 \(\)\)|その位置に 0 個または 1 文字。|  
  
 ワイルドカード以外の文字は、リテラル文字です。 たとえば、文字列"\* t"文字"t"で終わるすべての名前を検索します。 ".`searchPattern` 文字列内のすべての名前を「s \*"検索 `path` "s"の文字で始まります。  
  
 このメソッドは、次の値を事前設定 <xref:System.IO.DirectoryInfo> プロパティ。  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
   
  
## 例  
 次の例では、指定した文字を含むパス内のディレクトリをカウントします。  
  
 [!code-cpp[DirInfo GetDirs2\#1](~/samples/snippets/cpp/VS_Snippets_CLR/DirInfo GetDirs2/CPP/dirinfo getdirs2.cpp#1)]
 [!code-csharp[DirInfo GetDirs2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirInfo GetDirs2/CS/dirinfo getdirs2.cs#1)]
 [!code-vb[DirInfo GetDirs2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirInfo GetDirs2/VB/dirinfo getdirs2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="searchPattern " /> に、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドによって定義された 1 つ以上の使用できない文字が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <see langword="DirectoryInfo" /> オブジェクト内のカプセル化されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from files and directories and for access to the path. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public System.IO.DirectoryInfo[] GetDirectories (string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.DirectoryInfo[] GetDirectories(string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchPattern" Type="System.String" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="searchPattern">ディレクトリの名前と照合する検索文字列。  このパラメーターには、正確なリテラル パスとワイルドカード \(\* と ?\)  文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。 既定のパターンは "\*" で、すべてのファイルが返されます。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるのか、すべてのサブディレクトリを含めるのかを指定する列挙値の 1 つ。</param>
        <summary>指定した検索条件に一致し、サブディレクトリを検索するかどうかを決定する値を持つ、現在の <see cref="T:System.IO.DirectoryInfo" /> 内のディレクトリの配列を返します。</summary>
        <returns>
          <paramref name="searchPattern" /> に一致する <see langword="DirectoryInfo" /> 型の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` リテラルのパスとワイルドカードの組み合わせは、文字が、正規表現をサポートしていないを指定できます。 次のワイルドカード文字は使用 `searchPattern`します。  
  
|ワイルドカードの指定子|一致する文字列|  
|-----------------|-------------|  
|\* \(アスタリスク\)|その位置に 0 個以上の文字。|  
|? \(疑問符 \(\)\)|その位置に 0 個または 1 文字。|  
  
 ワイルドカード以外の文字は、リテラル文字です。 たとえば、文字列"\* t"文字"t"で終わるすべての名前を検索します。 ".`searchPattern` 文字列内のすべての名前を「s \*"検索 `path` "s"の文字で始まります。  
  
 サブディレクトリがないかに一致するサブディレクトリのかどうか、 `searchPattern` パラメーター、このメソッドは、空の配列を返します。  
  
 このメソッドは、次の値を事前設定 <xref:System.IO.DirectoryInfo> プロパティ。  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
   
  
## 例  
 次の例には、すべてのディレクトリと"c:\\"で文字"c"で始まるファイルが一覧表示します。  
  
 [!code-cpp[System.IO.DirectoryInfo\_SearchOptions\#00](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.DirectoryInfo_SearchOptions/cpp/searchoption.cpp#00)]
 [!code-csharp[System.IO.DirectoryInfo\_SearchOptions\#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.DirectoryInfo_SearchOptions/cs/searchoption.cs#00)]
 [!code-vb[System.IO.DirectoryInfo\_SearchOptions\#00](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.DirectoryInfo_SearchOptions/vb/searchoption.vb#00)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="searchPattern " /> に、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドによって定義された 1 つ以上の使用できない文字が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="searchPattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="searchOption" /> は正しい <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <see langword="DirectoryInfo" /> オブジェクト内のカプセル化されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.UnauthorizedAccessException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from files and directories and for access to the path. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.IO.FileInfo[] GetFiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.FileInfo[] GetFiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.GetFiles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のディレクトリからファイル一覧を返します。</summary>
        <returns>
          <see cref="T:System.IO.FileInfo" /> 型の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> と <xref:System.IO.DirectoryInfo.GetFiles%2A> メソッドは次のように異なります。  
  
-   使用すると <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, のコレクションを列挙することができます <xref:System.IO.FileInfo> オブジェクトのコレクション全体が返される前にします。  
  
-   使用すると <xref:System.IO.DirectoryInfo.GetFiles%2A>, の配列全体を待つ必要がある <xref:System.IO.FileInfo> 配列にアクセスする前に返されるオブジェクト。  
  
 そのため、ときに使用する多数のファイルとディレクトリ、 <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> 効率的であることができます。  
  
 ファイルがない場合、 <xref:System.IO.DirectoryInfo>, 、このメソッドは、空の配列を返します。  
  
 返されるファイル名の順序は保証されません。使用して、 <xref:System.Array.Sort%2A> メソッドの特定の並べ替え順序が必要な場合です。  
  
 このメソッドは、次の値を事前設定 <xref:System.IO.FileInfo> プロパティ。  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
-   <xref:System.IO.FileInfo.Length%2A>  
  
   
  
## 例  
 次の例では、別の検索オプションを使用してディレクトリからファイルの一覧を取得する方法を示します。 この例では、log1.txt、log2.txt、test1.txt、test2.txt、test3.txt、およびを SubFile.txt という名前のファイルを持つサブディレクトリをという名前のファイルがあるディレクトリと仮定します。  
  
 [!code-csharp[directoryinfogetfiles\#2](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfogetfiles/CS/directoryinfogetfiles2.cs#2)]
 [!code-vb[directoryinfogetfiles\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfogetfiles/VB/directoryinfogetfiles2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">マップされていないドライブにあるなど、パスが正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading directories. Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.IO.FileInfo[] GetFiles (string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.FileInfo[] GetFiles(string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.GetFiles(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="searchPattern">ファイル名と照合する検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\) の組み合わせを使用できます。 文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。 既定のパターンは "\*" で、すべてのファイルが返されます。</param>
        <summary>現在のディレクトリから、指定した検索パターンに一致するファイル一覧を返します。</summary>
        <returns>
          <see cref="T:System.IO.FileInfo" /> 型の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` リテラルのパスとワイルドカードの組み合わせは、文字が、正規表現をサポートしていないを指定できます。 次のワイルドカード文字は使用 `searchPattern`します。  
  
|ワイルドカードの指定子|一致する文字列|  
|-----------------|-------------|  
|\* \(アスタリスク\)|その位置に 0 個以上の文字。|  
|? \(疑問符 \(\)\)|その位置に 0 個または 1 文字。|  
  
 ワイルドカード以外の文字は、リテラル文字です。 たとえば、文字列"\* t"文字"t"で終わるすべての名前を検索します。`searchPattern` 文字列内のすべての名前を「s \*"検索 `path` "s"の文字で始まります。  
  
 <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> と <xref:System.IO.DirectoryInfo.GetFiles%2A> メソッドは次のように異なります。  
  
-   使用すると <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, のコレクションを列挙することができます <xref:System.IO.FileInfo> オブジェクトのコレクション全体が返される前にします。  
  
-   使用すると <xref:System.IO.DirectoryInfo.GetFiles%2A>, の配列全体を待つ必要がある <xref:System.IO.FileInfo> 配列にアクセスする前に返されるオブジェクト。  
  
 そのため、ときに使用する多数のファイルとディレクトリ、 <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> 効率的であることができます。  
  
 ファイルがない場合、 <xref:System.IO.DirectoryInfo>, 、このメソッドは、空の配列を返します。  
  
 次のワイルドカードの指定子が許可されている、 `searchPattern` パラメーター。  
  
|ワイルドカード文字|説明|  
|---------------|--------|  
|\*|0 個以上の文字。|  
|?|正確に 0 個または 1 文字です。|  
  
 返されるファイル名の順序は保証されません。使用して、 <xref:System.Array.Sort%2A> メソッドの特定の並べ替え順序が必要な場合です。  
  
 ワイルドカードを使用します。 たとえば、 `searchPattern` すべてのファイル名は"txt"の拡張機能を持つ文字列"\*.txt"を検索します。`searchPattern` すべてのファイル名が"s"の文字で始まる文字列「s \*」を検索します。 ファイルがありません\] または \[いいえがある場合のファイルと一致する、 `searchPattern` の文字列、 <xref:System.IO.DirectoryInfo>, 、このメソッドは、空の配列を返します。  
  
> [!NOTE]
>  アスタリスクのワイルドカード文字を使用する場合、 `searchPattern` \(たとえば、"\*.txt"\)、一致の動作が指定されたファイル拡張子の長さによって異なります。 A `searchPattern` ちょうど 3 文字の拡張機能が最初の 3 つの文字で指定されたファイル拡張子が一致する 3 つ以上の文字の拡張子を持つファイルを返すファイルを使用して、 `searchPattern`です。 A `searchPattern` 1、2、または 4 文字以上の拡張機能が正確にその長さで指定されたファイル拡張子に一致する拡張子を持つファイルのみを返すファイルを使用して、 `searchPattern`です。 疑問符 \(\) のワイルドカード文字を使用する場合、このメソッドは、指定されたファイル拡張子に一致するファイルのみを返します。 たとえば、2 つのファイル ディレクトリ、"file1.txt"および"file1.txtother"での検索パターンに指定された"ファイル? です。txt"では、最初のファイルのみを返しますが、"file\*.txt"の検索パターンが両方のファイルを返します。  
  
> [!NOTE]
>  検索パターンに似ていますので、このメソッドは、8.3 形式のファイル名の形式と長いファイル名の形式の両方でのファイル名をチェックして、"\* \*1\*.txt"予期しないファイル名を返す可能性があります。 検索パターンの使用例を"\* \*1\*.txt"と同等の 8.3 形式のファイル名の形式が"longf~1.txt"になるので、"longfilename.txt"に戻ります。  
  
 このメソッドは、次の値を事前設定 <xref:System.IO.FileInfo> プロパティ。  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
-   <xref:System.IO.FileInfo.Length%2A>  
  
   
  
## 例  
 次の例では、別の検索オプションを使用してディレクトリからファイルの一覧を取得する方法を示します。 この例では、log1.txt、log2.txt、test1.txt、test2.txt、test3.txt、およびを SubFile.txt という名前のファイルを持つサブディレクトリをという名前のファイルがあるディレクトリと仮定します。  
  
 [!code-csharp[directoryinfogetfiles\#2](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfogetfiles/CS/directoryinfogetfiles2.cs#2)]
 [!code-vb[directoryinfogetfiles\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfogetfiles/VB/directoryinfogetfiles2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="searchPattern " /> に、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドによって定義された 1 つ以上の使用できない文字が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">パスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to the path and for reading from files and directories. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public System.IO.FileInfo[] GetFiles (string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.FileInfo[] GetFiles(string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchPattern" Type="System.String" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="searchPattern">ファイル名と照合する検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\) の組み合わせを使用できます。 文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。 既定のパターンは "\*" で、すべてのファイルが返されます。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるか、すべてのサブディレクトリを含めるかを指定する列挙値の 1 つ。</param>
        <summary>現在のディレクトリから、指定した検索パターンに一致し、サブディレクトリを検索するかどうかを決定する値を持つファイル一覧を返します。</summary>
        <returns>
          <see cref="T:System.IO.FileInfo" /> 型の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> と <xref:System.IO.DirectoryInfo.GetFiles%2A> メソッドは次のように異なります。  
  
-   使用すると <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, のコレクションを列挙することができます <xref:System.IO.FileInfo> オブジェクトのコレクション全体が返される前にします。  
  
-   使用すると <xref:System.IO.DirectoryInfo.GetFiles%2A>, の配列全体を待つ必要がある <xref:System.IO.FileInfo> 配列にアクセスする前に返されるオブジェクト。  
  
 そのため、ときに使用する多数のファイルとディレクトリ、 <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> 効率的であることができます。  
  
 ファイルがない場合、 <xref:System.IO.DirectoryInfo>, 、このメソッドは、空の配列を返します。  
  
 次のワイルドカード文字は使用 `searchPattern`します。  
  
|ワイルドカード文字|説明|  
|---------------|--------|  
|\* \(アスタリスク\)|0 個以上の文字。|  
|? \(疑問符 \(\)\)|正確に 0 個または 1 文字です。|  
  
 返されるファイル名の順序は保証されません。使用して、 <xref:System.Array.Sort%2A> メソッドの特定の並べ替え順序が必要な場合です。  
  
 ワイルドカードを使用します。 たとえば、 `searchPattern` すべてのファイル名は"txt"の拡張機能を持つ文字列"\*.txt"を検索します。`searchPattern` すべてのファイル名が"s"の文字で始まる文字列「s \*」を検索します。 ファイルがありません\] または \[いいえがある場合のファイルと一致する、 `searchPattern` の文字列、 <xref:System.IO.DirectoryInfo>, 、このメソッドは、空の配列を返します。  
  
> [!NOTE]
>  アスタリスクのワイルドカード文字を使用する場合、 `searchPattern` \(たとえば、"\*.txt"\)、一致の動作が指定されたファイル拡張子の長さによって異なります。 A `searchPattern` ちょうど 3 文字の拡張機能が最初の 3 つの文字で指定されたファイル拡張子が一致する 3 つ以上の文字の拡張子を持つファイルを返すファイルを使用して、 `searchPattern`です。 A `searchPattern` 1、2、または 4 文字以上の拡張機能が正確にその長さで指定されたファイル拡張子に一致する拡張子を持つファイルのみを返すファイルを使用して、 `searchPattern`です。 疑問符 \(\) のワイルドカード文字を使用する場合、このメソッドは、指定されたファイル拡張子に一致するファイルのみを返します。 たとえば、2 つのファイル ディレクトリ、"file1.txt"および"file1.txtother"での検索パターンに指定された"ファイル? です。txt"では、最初のファイルのみを返しますが、"file\*.txt"の検索パターンが両方のファイルを返します。  
  
 次の一覧の長さが異なる動作を示しています、 `searchPattern` パラメーター。  
  
-   "\* .abc"、拡張子 of.abc,.abcd,.abcde,.abcdef のファイルにします。  
  
-   "\*.abcd"では、拡張子 of.abcd を持つファイルのみを返します。  
  
-   "\*.abcde"では、拡張子 of.abcde を持つファイルのみを返します。  
  
-   "\*.abcdef"では、拡張子 of.abcdef を持つファイルのみを返します。  
  
> [!NOTE]
>  検索パターンに似ていますので、このメソッドは、8.3 形式のファイル名の形式と長いファイル名の形式の両方でのファイル名をチェックして、"\* \*1\*.txt"予期しないファイル名を返す可能性があります。 検索パターンの使用例を"\* \*1\*.txt"と同等の 8.3 形式のファイル名の形式が"longf~1.txt"になるので、"longfilename.txt"に戻ります。  
  
 このメソッドは、次の値を事前設定 <xref:System.IO.FileInfo> プロパティ。  
  
1.  <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
2.  <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
3.  <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
4.  <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
5.  <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
6.  <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
7.  <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
8.  <xref:System.IO.FileInfo.Length%2A>  
  
   
  
## 例  
 次の例では、別の検索オプションを使用してディレクトリからファイルの一覧を取得する方法を示します。 この例では、log1.txt、log2.txt、test1.txt、test2.txt、test3.txt、およびを SubFile.txt という名前のファイルを持つサブディレクトリをという名前のファイルがあるディレクトリと仮定します。  
  
 [!code-csharp[directoryinfogetfiles\#2](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfogetfiles/CS/directoryinfogetfiles2.cs#2)]
 [!code-vb[directoryinfogetfiles\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfogetfiles/VB/directoryinfogetfiles2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="searchPattern " /> に、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドによって定義された 1 つ以上の使用できない文字が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="searchPattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="searchOption" /> は正しい <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">パスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to the path and for reading from files and directories. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemInfos">
      <MemberSignature Language="C#" Value="public System.IO.FileSystemInfo[] GetFileSystemInfos ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.FileSystemInfo[] GetFileSystemInfos() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.GetFileSystemInfos" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ディレクトリ内のすべてのファイルとサブディレクトリを表す、厳密に型指定された <see cref="T:System.IO.FileSystemInfo" /> エントリの配列を返します。</summary>
        <returns>厳密に型指定された <see cref="T:System.IO.FileSystemInfo" /> エントリの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ファイルまたはディレクトリがない場合、 <xref:System.IO.DirectoryInfo>, 、このメソッドは、空の配列を返します。 このメソッドは、再帰的ではありません。  
  
 サブディレクトリの <xref:System.IO.FileSystemInfo> このメソッドによって返されるオブジェクトは、派生クラスにキャストできる <xref:System.IO.DirectoryInfo>です。 使用して、 <xref:System.IO.FileAttributes> によって返される値、 <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> を確認するにするかどうか、 <xref:System.IO.FileSystemInfo> ファイルまたはディレクトリを表します。  
  
 このメソッドは、次の値を事前設定 <xref:System.IO.FileSystemInfo> プロパティ。  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
   
  
## 例  
 次の例では、ファイルと、指定したディレクトリのディレクトリをカウントします。  
  
 [!code-csharp[FSizeSort\#1](~/samples/snippets/csharp/VS_Snippets_CLR/FSizeSort/CS/fsizesort.cs#1)]
 [!code-vb[FSizeSort\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FSizeSort/VB/fsizesort.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">パスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <altmember cref="T:System.IO.FileSystemInfo" />
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemInfos">
      <MemberSignature Language="C#" Value="public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.FileSystemInfo[] GetFileSystemInfos(string searchPattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchPattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="searchPattern">ディレクトリおよびファイルの名前と照合する検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\)  文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。 既定のパターンは "\*" で、すべてのファイルが返されます。</param>
        <summary>指定した検索条件に一致するファイルおよびサブディレクトリを表す、厳密に型指定された <see cref="T:System.IO.FileSystemInfo" /> オブジェクトの配列を取得します。</summary>
        <returns>検索基準に一致する、厳密に型指定された <see langword="FileSystemInfo" /> オブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` リテラルのパスとワイルドカードの組み合わせは、文字が、正規表現をサポートしていないを指定できます。 次のワイルドカード文字は使用 `searchPattern`します。  
  
|ワイルドカードの指定子|一致する文字列|  
|-----------------|-------------|  
|\* \(アスタリスク\)|その位置に 0 個以上の文字。|  
|? \(疑問符 \(\)\)|その位置に 0 個または 1 文字。|  
  
 ワイルドカード以外の文字は、リテラル文字です。 たとえば、文字列"\* t"文字"t"で終わるすべての名前を検索します。 ".`searchPattern` 文字列内のすべての名前を「s \*"検索 `path` "s"の文字で始まります。  
  
 このメソッドは、再帰的ではありません。  
  
 サブディレクトリの <xref:System.IO.FileSystemInfo> このメソッドによって返されるオブジェクトは、派生クラスにキャストできる <xref:System.IO.DirectoryInfo>です。 使用して、 <xref:System.IO.FileAttributes> によって返される値、 <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> を確認するにするかどうか、 <xref:System.IO.FileSystemInfo> ファイルまたはディレクトリを表します。  
  
 ワイルドカードを使用します。 たとえば、 `searchPattern` 文字列"\* t"内のすべてのディレクトリ名を検索 `path` 文字"t"で終了します。`searchPattern` 文字列内のすべてのディレクトリ名の検索「s \*」 `path` "s"の文字で始まります。  
  
 文字列".." のみ使用できる `searchPattern` 指定されている場合、有効なディレクトリ名の一部としてなど、ディレクトリ名に"、。 します。b"です。 ディレクトリ階層を上へ移動使用することはできません。 ファイルまたはディレクトリ、またはファイルやに一致するディレクトリがある場合、 `searchPattern` の文字列、 <xref:System.IO.DirectoryInfo>, 、このメソッドは、空の配列を返します。  
  
 このメソッドは、次の値を事前設定 <xref:System.IO.FileSystemInfo> プロパティ。  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
   
  
## 例  
 次の例では、ファイルと指定した検索パターンに一致するディレクトリをカウントします。  
  
 [!code-csharp[DirInfo GetFileSysInfos2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/DirInfo GetFileSysInfos2/CS/dirinfo getfilesysinfos2.cs#1)]
 [!code-vb[DirInfo GetFileSysInfos2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DirInfo GetFileSysInfos2/VB/dirinfo getfilesysinfos2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="searchPattern " /> に、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドによって定義された 1 つ以上の正しくない文字が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="searchPattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from files and directories and for access to the path. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></permission>
        <altmember cref="T:System.IO.FileSystemInfo" />
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="GetFileSystemInfos">
      <MemberSignature Language="C#" Value="public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.FileSystemInfo[] GetFileSystemInfos(string searchPattern, valuetype System.IO.SearchOption searchOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileSystemInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchPattern" Type="System.String" />
        <Parameter Name="searchOption" Type="System.IO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="searchPattern">ディレクトリおよびファイルの名前と照合する検索文字列。  このパラメーターには、有効なリテラル パスとワイルドカード \(\* および ?\)  文字 \(「解説」を参照\) の組み合わせを使用できますが、正規表現はサポートしていません。 既定のパターンは "\*" で、すべてのファイルが返されます。</param>
        <param name="searchOption">検索操作に現在のディレクトリのみを含めるのか、またはすべてのサブディレクトリを含めるのかを指定する列挙値の 1 つ。 既定値は <see cref="F:System.IO.SearchOption.TopDirectoryOnly" /> です。</param>
        <summary>指定した検索条件に一致するファイルおよびサブディレクトリを表す <see cref="T:System.IO.FileSystemInfo" /> オブジェクトの配列を取得します。</summary>
        <returns>検索条件に一致するファイル システム エントリの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `searchPattern` リテラルのパスとワイルドカードの組み合わせは、文字が、正規表現をサポートしていないを指定できます。 次のワイルドカード文字は使用 `searchPattern`します。  
  
|ワイルドカードの指定子|一致する文字列|  
|-----------------|-------------|  
|\* \(アスタリスク\)|その位置に 0 個以上の文字。|  
|? \(疑問符 \(\)\)|その位置に 0 個または 1 文字。|  
  
 ワイルドカード以外の文字は、リテラル文字です。 たとえば、文字列"\* t"文字"t"で終わるすべての名前を検索します。 ".`searchPattern` 文字列内のすべての名前を「s \*"検索 `path` "s"の文字で始まります。  
  
 サブディレクトリの <xref:System.IO.FileSystemInfo> このメソッドによって返されるオブジェクトは、派生クラスにキャストできる <xref:System.IO.DirectoryInfo>です。 使用して、 <xref:System.IO.FileAttributes> によって返される値、 <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> を確認するにするかどうか、 <xref:System.IO.FileSystemInfo> ファイルまたはディレクトリを表します。  
  
 このメソッドは、次の値を事前設定 <xref:System.IO.FileSystemInfo> プロパティ。  
  
-   <xref:System.IO.FileSystemInfo.Attributes%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  
  
-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="searchPattern " /> に、<see cref="M:System.IO.Path.GetInvalidPathChars" /> メソッドによって定義された 1 つ以上の無効な文字が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="searchPattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="searchOption" /> は有効な <see cref="T:System.IO.SearchOption" /> 値ではありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが無効です \(たとえば、マップされていないドライブにあるなど\)。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <altmember cref="T:System.IO.FileSystemWatcher" />
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (string destDirName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(string destDirName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.MoveTo(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destDirName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="destDirName">このディレクトリの移動先の名前とパス。 別のディスク ボリュームまたは同じ名前のディレクトリは移動先として指定できません。 このディレクトリをサブディレクトリとして追加する場合は、既存のディレクトリを指定できます。</param>
        <summary>
          <see cref="T:System.IO.DirectoryInfo" /> のインスタンスとその内容を新しいパスに移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.IO.IOException> 場合、たとえば、c:\\mydir を c:\\public に移動しようとして、c:\\public が既に存在します。 として"c:\\\\public\\\\mydir"を指定する必要があります、 `destDirName` パラメーター、または"c:\\\\newdir"などの新しいディレクトリ名を指定します。  
  
 このメソッドは、読み取り専用のディレクトリにディレクトリを移動できます。 いずれのディレクトリの読み取り\/書き込み属性が影響を受けます。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、ディレクトリの移動を示します。  
  
 [!code-cpp[directoryinfomoveto\#1](~/samples/snippets/cpp/VS_Snippets_CLR/directoryinfomoveto/CPP/directoryinfomoveto.cpp#1)]
 [!code-csharp[directoryinfomoveto\#1](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfomoveto/CS/directoryinfomoveto.cs#1)]
 [!code-vb[directoryinfomoveto\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfomoveto/VB/directoryinfomoveto.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destDirName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="destDirName" /> が空の文字列 \(''"\) です。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリを別のボリュームに移動しようとしました。  
  
 または  
  
 <paramref name="destDirName" /> が既に存在します。  
  
 または  
  
 このパスへのアクセスが許可されていません。  
  
 または  
  
 移動するディレクトリと対象のディレクトリの名前が同じです。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">対象のディレクトリが見つかりません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading and writing files and directories and for access to the destination directory. Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.IO.DirectoryInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.IO.DirectoryInfo" /> の現在のインスタンスの名前を取得します。</summary>
        <value>ディレクトリ名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、 <xref:System.IO.DirectoryInfo.Name%2A> プロパティは、"Bin"などのディレクトリの名前のみを返します。 "C:\\public\\Bin"などの完全パスを取得する、 <xref:System.IO.FileSystemInfo.FullName%2A> プロパティです。  
  
 <xref:System.IO.DirectoryInfo.Name%2A> のプロパティ、 <xref:System.IO.DirectoryInfo> アクセス許可は必要ありません \(を構築するために必要なディレクトリに読み取りアクセス許可を超えて、 <xref:System.IO.DirectoryInfo.Exists%2A>\) ディレクトリの名前を与えることができますが、します。 渡す必要がある場合は、out、 <xref:System.IO.DirectoryInfo> 暗号化に使用するセキュリティで保護された名前の保護されたディレクトリする、信頼されていないコードの使用するためのダミー ディレクトリを作成します。  
  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例には、現在の名前が表示されます。 `DirectoryInfo` だけをインスタンス化します。  
  
 [!code-cpp[Classic DirectoryInfo.Name Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DirectoryInfo.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DirectoryInfo.Name Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DirectoryInfo.Name Example/CS/source.cs#1)]
 [!code-vb[Classic DirectoryInfo.Name Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DirectoryInfo.Name Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.FileSystemInfo.FullName" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.IO.DirectoryInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.DirectoryInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.IO.DirectoryInfo.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定されたサブディレクトリの親ディレクトリを取得します。</summary>
        <value>親ディレクトリ。または、パスが null であるか、ファイル パスがルート \("\\"、"C:"、\* "\\\\server\\share" など\) を示している場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 共通 I\/O タスクの一覧は、次を参照してください。 [Common I\/O Tasks](http://msdn.microsoft.com/ja-jp/bf00c380-706a-4e38-b829-454a480629fc)します。  
  
   
  
## 例  
 次の例では、指定したディレクトリの親ディレクトリへの参照を示します。  
  
 [!code-cpp[directoryinfoparent\#1](~/samples/snippets/cpp/VS_Snippets_CLR/directoryinfoparent/CPP/directoryinfoparent.cpp#1)]
 [!code-csharp[directoryinfoparent\#1](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinfoparent/CS/directoryinfoparent.cs#1)]
 [!code-vb[directoryinfoparent\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinfoparent/VB/directoryinfoparent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from files and directories and for access to the path. Associated enumerations: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />, <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public System.IO.DirectoryInfo Root { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.DirectoryInfo Root" />
      <MemberSignature Language="DocId" Value="P:System.IO.DirectoryInfo.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ディレクトリのルート部分を取得します。</summary>
        <value>ディレクトリのルートを表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、指定したディレクトリのルートの場所を表示します。  
  
 [!code-csharp[directoryinforoot\#2](~/samples/snippets/csharp/VS_Snippets_CLR/directoryinforoot/CS/directoryinforoot2.cs#2)]
 [!code-vb[directoryinforoot\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/directoryinforoot/VB/directoryinforoot2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading from files and directories and for access to the path. Associated enumerations: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />, <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControl">
      <MemberSignature Language="C#" Value="public void SetAccessControl (System.Security.AccessControl.DirectorySecurity directorySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessControl(class System.Security.AccessControl.DirectorySecurity directorySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directorySecurity" Type="System.Security.AccessControl.DirectorySecurity" />
      </Parameters>
      <Docs>
        <param name="directorySecurity">
          <c>path</c> パラメーターが示すディレクトリに適用する ACL エントリを表すオブジェクト。</param>
        <summary>
          <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトが示すアクセス制御リスト \(ACL\) エントリを、現在の<see cref="T:System.IO.DirectoryInfo" /> オブジェクトが示すディレクトリに適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アクセス制御リスト \(ACL\) は、個人やグループがある、または権限がない、特定のファイルまたはディレクトリの特定のアクションをについて説明します。 詳細については、「[How to: Add or Remove an Access Control List Entry](http://msdn.microsoft.com/ja-jp/53758b39-bd9b-4640-bb04-cad5ed8d0abf)」を参照してください。  
  
 <xref:System.IO.DirectoryInfo.SetAccessControl%2A> メソッドが継承されない ACL リストを表すファイルに ACL エントリを適用します。  
  
> [!CAUTION]
>  ACL に指定された `directorySecurity` ディレクトリの既存の ACL を置き換えます。 新しいユーザーのアクセス許可を追加するには、使用、 <xref:System.IO.DirectoryInfo.GetAccessControl%2A> メソッドを既存の ACL を取得し、それを変更します。  
  
 <xref:System.IO.DirectoryInfo.SetAccessControl%2A> メソッドにのみが引き続き発生する <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトの作成後に変更されたオブジェクト。  場合、 <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトが変更されていない、ファイルに保持されません。  したがって、取得することはありません、 <xref:System.Security.AccessControl.DirectorySecurity> 1 つのファイルからオブジェクトし、別のファイルを同じオブジェクトを再適用します。  
  
 ACL の情報を別の 1 つのファイルにコピーします。 する  
  
1.  使用して、 <xref:System.IO.DirectoryInfo.GetAccessControl%2A> を取得するメソッド、 <xref:System.Security.AccessControl.DirectorySecurity> ソース ファイルからのオブジェクト。  
  
2.  新しい <xref:System.Security.AccessControl.DirectorySecurity> 先のファイル オブジェクトです。  
  
3.  使用して、 <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A> または <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> メソッドのソースの <xref:System.Security.AccessControl.DirectorySecurity> ACL 情報を取得するオブジェクト。  
  
4.  使用して、 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A> または <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> に情報をコピーする方法が先に手順 3 で取得した <xref:System.Security.AccessControl.DirectorySecurity> オブジェクトです。  
  
5.  リンク先を設定 <xref:System.Security.AccessControl.DirectorySecurity> 変換先のファイルを使用するオブジェクト、 <xref:System.IO.DirectoryInfo.SetAccessControl%2A> メソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.IO.DirectoryInfo.GetAccessControl%2A> と <xref:System.IO.DirectoryInfo.SetAccessControl%2A> メソッドを追加し、削除、アクセス制御リスト \(ACL\) エントリをディレクトリからです。  
  
 [!code-cpp[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directorySecurity" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.SystemException">ファイルを検出または変更できませんでした。</exception>
        <exception cref="T:System.UnauthorizedAccessException">現在のプロセスには、ファイルを開くために必要なアクセス権がありません。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Microsoft Windows 2000 以降ではありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to enumerate access control list \(ACL\) for a directory. Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />, <see cref="F:System.Security.AccessControl.AccessControlActions.View" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.DirectoryInfo.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ユーザーから渡された元のパスを返します。</summary>
        <returns>ユーザーから渡された元のパスを返します。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateDirectories">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のディレクトリの列挙可能なディレクトリ情報のコレクションを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="EnumerateFileSystemInfos">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のディレクトリ内の列挙可能なファイル システム情報のコレクションを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetDirectories">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のディレクトリのサブディレクトリを返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CreateSubdirectory">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したパスに 1 つ以上のサブディレクトリを作成します。 パスは、この <see cref="T:System.IO.DirectoryInfo" /> クラスのインスタンスに対する相対パスで指定できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="EnumerateFiles">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のディレクトリに存在するファイル情報の列挙可能なコレクションを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のディレクトリからファイル一覧を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Delete">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>パスから <see cref="T:System.IO.DirectoryInfo" /> とその内容を削除します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetFileSystemInfos">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のディレクトリのファイルおよびサブディレクトリを表す、厳密に型指定された <see cref="T:System.IO.FileSystemInfo" /> オブジェクトの配列を取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>