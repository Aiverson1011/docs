<Type Name="OleDbDataAdapter" FullName="System.Data.OleDb.OleDbDataAdapter">
  <TypeSignature Language="C#" Value="public sealed class OleDbDataAdapter : System.Data.Common.DbDataAdapter, ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OleDbDataAdapter extends System.Data.Common.DbDataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OleDb.OleDbDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbDataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("RowUpdated")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterToolboxItem, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.Data.DataSet" /> へのデータの格納およびデータ ソースの更新に使用される、一連のデータ コマンドおよびデータベース接続を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OleDb.OleDbDataAdapter> 間の仲介役として機能する <xref:System.Data.DataSet> とデータ ソースを取得して、データを保存します。<xref:System.Data.OleDb.OleDbDataAdapter> を使用してこのブリッジは、 <xref:System.Data.Common.DbDataAdapter.Fill%2A> にデータ ソースからデータを読み込み、 <xref:System.Data.DataSet>, を使用して、 <xref:System.Data.Common.DbDataAdapter.Update%2A> で行われた変更を送信する、 <xref:System.Data.DataSet> データ ソースにします。  
  
 ときに、 <xref:System.Data.OleDb.OleDbDataAdapter> 塗りつぶします、 <xref:System.Data.DataSet>, 、まだ存在しない場合、適切なテーブルと返されたデータの列に作成されます。 ただし、主キー情報は含まれません暗黙的に作成されたスキーマにしない限り、 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> にプロパティが設定されている <xref:System.Data.MissingSchemaAction.AddWithKey>します。 こともできます、 <xref:System.Data.OleDb.OleDbDataAdapter> のスキーマを作成、 <xref:System.Data.DataSet>, を使用してデータを入力する前に、主キーの情報を含む <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>します。 詳細については、「[Adding Existing Constraints to a DataSet](http://msdn.microsoft.com/ja-jp/307d2809-208b-4cf8-b6a9-5d16f15fc16c)」を参照してください。  
  
 ベース テーブルまたは主キー情報は返されませんこと MSDataShape プロバイダーを含む、一部の OLE DB プロバイダーに注意してください。 したがって、 <xref:System.Data.OleDb.OleDbDataAdapter> ことはできませんが正しく設定、 <xref:System.Data.DataTable.PrimaryKey%2A> プロパティで作成された <xref:System.Data.DataTable>します。 このような場合は、主キーのテーブルで明示的に指定する必要があります、 <xref:System.Data.DataSet>です。  
  
 <xref:System.Data.OleDb.OleDbDataAdapter> も含まれています、 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>, 、<xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>, 、<xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A>, 、<xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A>, 、および <xref:System.Data.Common.DataAdapter.TableMappings%2A> を読み込み、データの更新を容易にするプロパティです。  
  
 インスタンスを作成する場合 <xref:System.Data.OleDb.OleDbDataAdapter>, 、プロパティは、初期値に設定されます。 これらの値の一覧は、次を参照してください。、 <xref:System.Data.OleDb.OleDbDataAdapter> コンス トラクターです。  
  
   
  
## 例  
 次の例で、 <xref:System.Data.OleDb.OleDbCommand>, 、<xref:System.Data.OleDb.OleDbDataAdapter> と <xref:System.Data.OleDb.OleDbConnection>, を Access データ ソースからレコードを選択し、設定、 <xref:System.Data.DataSet> 、選択した行にします。 塗りつぶされた、 <xref:System.Data.DataSet> 返されます。 これを実現する、メソッドは渡される初期化された <xref:System.Data.DataSet>, 、接続文字列の場合、およびクエリ文字列では、SQL SELECT ステートメントです。  
  
 [!code-csharp[Classic WebData OleDbDataAdapter Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンスを作成する場合 <xref:System.Data.OleDb.OleDbDataAdapter>, 、次の読み取り\/書き込みプロパティは、次の初期値に設定されます。  
  
|プロパティ|初期値|  
|-----------|---------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 プロパティに別個の呼び出しでこれらのプロパティのいずれかの値を変更することができます。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbDataAdapter> し、一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbDataAdapter (System.Data.OleDb.OleDbCommand selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.OleDb.OleDbCommand selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selectCommand" Type="System.Data.OleDb.OleDbCommand" />
      </Parameters>
      <Docs>
        <param name="selectCommand">
          <see cref="T:System.Data.OleDb.OleDbCommand" /> は SELECT ステートメントまたはストアド プロシージャととして設定されている、 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> のプロパティ、 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> 、指定したクラス <see cref="T:System.Data.OleDb.OleDbCommand" /> として、 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装の <xref:System.Data.OleDb.OleDbDataAdapter> コンス トラクターのセット、 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> プロパティで指定された値を `selectCommand` パラメーター。  
  
 インスタンスを作成する場合 <xref:System.Data.OleDb.OleDbDataAdapter>, 、次の読み取り\/書き込みプロパティは、次の初期値に設定されます。  
  
|プロパティ|初期値|  
|-----------|---------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 プロパティに別個の呼び出しでこれらのプロパティのいずれかの値を変更することができます。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbDataAdapter> し、一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbDataAdapter (string selectCommandText, System.Data.OleDb.OleDbConnection selectConnection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string selectCommandText, class System.Data.OleDb.OleDbConnection selectConnection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selectCommandText" Type="System.String" />
        <Parameter Name="selectConnection" Type="System.Data.OleDb.OleDbConnection" />
      </Parameters>
      <Docs>
        <param name="selectCommandText">文字列は SQL SELECT ステートメントまたはストアド プロシージャで使用される、 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> のプロパティ、 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />です。</param>
        <param name="selectConnection">
          <see cref="T:System.Data.OleDb.OleDbConnection" /> 接続を表します。</param>
        <summary>
          <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> を使用して、<see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装の <xref:System.Data.OleDb.OleDbDataAdapter> を開いたり閉じたり、 <xref:System.Data.OleDb.OleDbConnection> が開いていない場合。 これ呼び出す必要のあるアプリケーションで役に立ちます、 <xref:System.Data.Common.DbDataAdapter.Fill%2A> メソッドの 2 つまたは複数 <xref:System.Data.OleDb.OleDbDataAdapter> オブジェクトです。 場合、 <xref:System.Data.OleDb.OleDbConnection> は既に開かれている、明示的に呼び出す必要があります <xref:System.Data.OleDb.OleDbConnection.Close%2A> または **Dispose** を閉じます。  
  
 インスタンスを作成する場合 <xref:System.Data.OleDb.OleDbDataAdapter>, 、次の読み取り\/書き込みプロパティは、次の初期値に設定されます。  
  
|プロパティ|初期値|  
|-----------|---------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 プロパティに別個の呼び出しでこれらのプロパティのいずれかの値を変更することができます。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbDataAdapter> し、一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbDataAdapter (string selectCommandText, string selectConnectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string selectCommandText, string selectConnectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selectCommandText" Type="System.String" />
        <Parameter Name="selectConnectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="selectCommandText">文字列は SQL SELECT ステートメントまたはストアド プロシージャで使用される、 <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> のプロパティ、 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />です。</param>
        <param name="selectConnectionString">接続文字列。</param>
        <summary>
          <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> を使用して、<see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロード、 <xref:System.Data.OleDb.OleDbDataAdapter> コンス トラクターを使用して、 `selectConnectionString` を設定するパラメーター、 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> プロパティです。 ただし、接続は開かれません。 開く必要があります明示的に接続します。  
  
 インスタンスを作成する場合 <xref:System.Data.OleDb.OleDbDataAdapter>, 、次の読み取り\/書き込みプロパティは、次の初期値に設定されます。  
  
|プロパティ|初期値|  
|-----------|---------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 プロパティに別個の呼び出しでこれらのプロパティのいずれかの値を変更することができます。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbDataAdapter> し、一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">To be added.</param>
        <param name="command">To be added.</param>
        <param name="statementType">To be added.</param>
        <param name="tableMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">To be added.</param>
        <param name="command">To be added.</param>
        <param name="statementType">To be added.</param>
        <param name="tableMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OleDb.OleDbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または SQL ステートメントまたはデータ セットからレコードを削除するストアド プロシージャを設定します。</summary>
        <value>
          <see cref="T:System.Data.OleDb.OleDbCommand" /> 時に使用される <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> に対応するデータ ソースのレコードを削除するには、内の行を削除、 <see cref="T:System.Data.DataSet" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 中に <xref:System.Data.Common.DbDataAdapter.Update%2A>, このプロパティを設定しないと、主キー情報が内に存在する場合は、 <xref:System.Data.DataSet>, 、 <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> を設定する場合は、自動的に生成できる、 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> プロパティと使用、 <xref:System.Data.OleDb.OleDbCommandBuilder>です。 次に、追加のコマンドを設定しないはによって生成される、 <xref:System.Data.OleDb.OleDbCommandBuilder>です。 この生成ロジックではキー列の情報に含まれる、 <xref:System.Data.DataSet>です。 詳細については、「[Automatically Generated Commands](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91)」を参照してください。  
  
 <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> が割り当てられている以前に作成した <xref:System.Data.OleDb.OleDbCommand>, 、 <xref:System.Data.OleDb.OleDbCommand> 複製されません。<xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> 以前に作成したへの参照を保持 <xref:System.Data.OleDb.OleDbCommand> オブジェクトです。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbDataAdapter> し、設定、 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> と <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> プロパティです。 既に作成するいると想定して、 <xref:System.Data.OleDb.OleDbConnection> オブジェクトです。  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable, object ADODBRecordSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable, object ADODBRecordSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="ADODBRecordSet" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataTable">A <see cref="T:System.Data.DataTable" /> なレコードを格納して、必要な場合のスキーマです。</param>
        <param name="ADODBRecordSet">ADO <see langword="Recordset" /> または <see langword="Record" /> オブジェクトです。</param>
        <summary>内の行の更新を追加するか、 <see cref="T:System.Data.DataTable" /> 一致するように ADO <see langword="Recordset" /> または <see langword="Record" /> オブジェクトの指定を使用して <see cref="T:System.Data.DataTable" /> と ADO オブジェクトです。</summary>
        <returns>行の数が正常に更新する、 <see cref="T:System.Data.DataTable" />です。 これは、行を返さないステートメントの影響を受ける行には含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ADO からデータをコピーすることで、ActiveX データ オブジェクト \(ADO\) と ADO.NET の間のリンクが一方向の操作、 <xref:System.Data.DataSet>, がデータに加えた変更は、ADO.NET で処理する必要があります。  
  
 このオーバー ロード、 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> メソッドには、入力が閉じない `Recordset` の完了時に、 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 操作します。  
  
 この実装の複数の結果を返すバッチの SQL ステートメントを処理するときに <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> と <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> の OLE DB.NET Framework データ プロバイダーは、最初の結果だけのスキーマ情報を取得します。  
  
 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 操作では、指定したコピー先に行を追加 <xref:System.Data.DataTable> 内のオブジェクト、 <xref:System.Data.DataSet>, 、作成、 <xref:System.Data.DataTable> オブジェクトにはまだ存在しないかどうか。 作成するときに、 <xref:System.Data.DataTable> オブジェクト、 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 操作は、通常は列名のメタデータのみを作成します。 ただし場合、 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> にプロパティが設定されている `AddWithKey`, 、適切な主キーおよび制約も作成します。  
  
 使用することができます、 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> メソッドで複数回同じ <xref:System.Data.DataTable>します。 主キーが存在する場合は、受信した行が既に存在する一致する行にマージされます。 受信した行が追加された主キーが存在しない場合、 <xref:System.Data.DataTable>です。 重複する行が調整が行われ、に 1 回にのみ表示されます主キー情報が存在する場合、 <xref:System.Data.DataTable> に対応する、 <xref:System.Data.DataSet>です。 主キー情報を設定する使用するか <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, を指定して、 <xref:System.Data.DataTable.PrimaryKey%2A> のプロパティ、 <xref:System.Data.DataTable>, を設定したり、 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> プロパティを `AddWithKey`します。  
  
 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> が OUTER JOIN の結果を返す場合、`DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable> 値を設定しません。 重複する行が正しく解決されるかどうかを確認する主キーを明示的に定義する必要があります。 詳細については、「[Defining a Primary Key for a Table](http://msdn.microsoft.com/ja-jp/2ea85959-e763-4669-8bd9-46a9dab894bd)」を参照してください。  
  
 OLE DB の .NET Framework データ プロバイダーで正しく機能する `AddWithKey` ではネイティブ OLE DB プロバイダーが DBPROP\_UNIQUEROWS プロパティを設定して必要な主キー情報を取得し、それは、主にどの列が決定で DBCOLUMN\_KEYCOLUMN を確認するにはキー列、 `IColumnsRowset`です。 別の方法として、ユーザー可能性があります、primary key 制約ごとに明示的に設定 <xref:System.Data.DataTable>します。 これによりの代わりに既存のレコードに一致する受信したレコードが更新されることを確認して追加します。  
  
 場合、 <xref:System.Data.OleDb.OleDbDataAdapter> 重複する列を設定中に検出すると、 <xref:System.Data.DataTable>, 、パターンを使用して、それ以降の列に名前が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。 空の列名を追加、 <xref:System.Data.DataTable>, 、空の文字列を使用して、最初の列の「1」、「2」、「3」、およびそれ以降の空の列のように続きます。  
  
 ADO では値 `Recordset` または `Record` オブジェクトが共通に変換された言語の記憶域のランタイム型、 <xref:System.Data.DataSet>です。  
  
> [!CAUTION]
>  このオーバー ロード、 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> メソッドが暗黙的に呼び出されません `Close` 格納操作が完了すると、ADO オブジェクトにします。 したがって、常に呼び出す `Close` ADO の使用が終了したときに `Recordset` または `Record` オブジェクトです。 これにより、データ ソースを基になる接続が適切なタイミングでリリースされ、アンマネージ ADO オブジェクトが既存の参照が存在する場合は、ガベージ コレクションによって解放されるため、アクセス違反をしなくなります。  
  
 呼び出すと、 `TableMappings.Add` メソッドを `DataAdapter` ソース テーブルのパラメーターを空の文字列に明示的にマップし、ソース テーブルを使用してデータセットが正常に設定が、データセットは何も設定されます。 たとえば、次の例で `rDataSet` が何も表示されます。  
  
```  
rAdapter.TableMappings.Add("source table", "");  
rAdapter.Fill(rDataSet, "source table");     
```  
  
 この例では、複数の結果を処理する場合、結果をスキップする方法を示します。  
  
 次の例では、 <xref:System.Data.OleDb.OleDbDataAdapter> 塗りつぶす、 <xref:System.Data.DataTable> 、ADO を使用して `Recordset`します。 この例では、ADO を作成した `Recordset`します。  
  
```vb  
Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()  
     Dim custDS As DataSet = New DataSet  
     Dim custTable As DataTable = New DataTable("Customers")  
     custTable.Columns.Add("CustomerID", Type.GetType("System.String"))  
     custTable.Columns.Add("CompanyName", Type.GetType("System.String"))  
     custDS.Tables.Add(custTable)  
     'Use ADO objects from ADO library (msado15.dll) imported  
     ' as.NET library ADODB.dll using TlbImp.exe  
     Dim adoConn As ADODB.Connection = New ADODB.Connection()  
     Dim adoRS As ADODB.Recordset = New ADODB.Recordset()  
     adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1)  
     adoRS.Open("SELECT CustomerID, CompanyName FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)  
     custDA.Fill(custTable, adoRS)  
     adoRS.Close()  
     adoConn.Close()  
```  
  
```csharp  
OleDbDataAdapter custDA = new OleDbDataAdapter();  
     DataSet custDS = new DataSet();  
     DataTable custTable = new DataTable("Customers");  
     custTable.Columns.Add("CustomerID", typeof(String));  
     custTable.Columns.Add("CompanyName", typeof(String));  
     custDS.Tables.Add(custTable);  
     //Use ADO objects from ADO library (msado15.dll) imported  
     //  as.NET library ADODB.dll using TlbImp.exe  
     ADODB.Connection adoConn = new ADODB.Connection();  
     ADODB.Recordset adoRS = new ADODB.Recordset();  
     adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1);  
     adoRS.Open("SELECT CustomerID, CompanyName FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);  
     custDA.Fill(custTable, adoRS);  
     adoRS.Close();  
     adoConn.Close();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, object ADODBRecordSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, object ADODBRecordSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="ADODBRecordSet" Type="System.Object" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> なレコードを格納して、必要な場合のスキーマです。</param>
        <param name="ADODBRecordSet">ADO <see langword="Recordset" /> または <see langword="Record" /> オブジェクトです。</param>
        <param name="srcTable">テーブル マップに使用するソース テーブルです。</param>
        <summary>内の行の更新を追加するか、 <see cref="T:System.Data.DataSet" /> 一致するように ADO <see langword="Recordset" /> または <see langword="Record" /> オブジェクトの指定を使用して <see cref="T:System.Data.DataSet" />, 、ADO オブジェクトとソース テーブル名。</summary>
        <returns>行の数が正常に追加または内で更新、 <see cref="T:System.Data.DataSet" />です。 これは、行を返さないステートメントの影響を受ける行には含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ADO からデータをコピーすることで、ActiveX データ オブジェクト \(ADO\) と ADO.NET の間のリンクが一方向の操作、 <xref:System.Data.DataSet>, がデータに加えた変更は、ADO.NET で処理する必要があります。  
  
 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> メソッドは、呼び出すことによって、複数の結果を反復処理、 `NextRecordset` メソッドを `Recordset`, 、入力を閉じる `Recordset` の完了時に、 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 操作します。  
  
 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 操作では、指定したコピー先に行を追加 <xref:System.Data.DataTable> 内のオブジェクト、 <xref:System.Data.DataSet>, 、作成、 <xref:System.Data.DataTable> オブジェクトにはまだ存在しないかどうか。 作成するときに、 <xref:System.Data.DataTable> オブジェクト、 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 操作は、通常は列名のメタデータのみを作成します。 ただし場合、 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> にプロパティが設定されている `AddWithKey`, 、適切な主キーおよび制約も作成します。  
  
 重複する行が調整が行われ、に 1 回にのみ表示されます主キー情報が存在する場合、 <xref:System.Data.DataTable> に対応する、 <xref:System.Data.DataSet>です。 主キー情報を設定する使用するか <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, を指定して、 <xref:System.Data.DataTable.PrimaryKey%2A> のプロパティ、 <xref:System.Data.DataTable>, を設定したり、 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> プロパティを `AddWithKey`します。  
  
 .NET Framework Data Provider for OLE DB は正しく機能する `AddWithKey` を DBPROP\_UNIQUEROWS プロパティを設定して必要な主キー情報を取得し、列を決定する主なネイティブ OLE DB プロバイダーが必要で DBCOLUMN\_KEYCOLUMN を確認するにはキー列、 **IColumnsRowset**します。 別の方法として、ユーザー可能性があります、primary key 制約ごとに明示的に設定 <xref:System.Data.DataTable>します。 これによりの代わりに既存のレコードに一致する受信したレコードが更新される追加されます。  
  
 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> が OUTER JOIN の結果を返す場合、`DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable> 値を設定しません。 重複する行が正しく解決されるかどうかを確認する主キーを明示的に定義する必要があります。 詳細については、「[Defining a Primary Key for a Table](http://msdn.microsoft.com/ja-jp/2ea85959-e763-4669-8bd9-46a9dab894bd)」を参照してください。  
  
 場合、 `Recordset` の開始する前に閉じて、 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 操作、エラーは発生しません。 これは、行を返さないクエリが示されているため、複数の結果の処理に必要な閉じられたによって `Recordset`します。<xref:System.Data.OleDb.OleDbDataAdapter> 呼び出すだけ `NextRecordset` 閉じたに `Recordset` は処理を続行します。  
  
 エラーの発生前に追加された行が残りますデータ セットの設定中にエラーが発生した場合、 <xref:System.Data.DataSet>です。 残りの操作は中止されます。  
  
 場合、 <xref:System.Data.Common.DbDataAdapter> オブジェクトの作成中に重複する列を検出した、 <xref:System.Data.DataTable>, 、パターンを使用して、それ以降の列に名前が生成されます"*columnname*1"、"*columnname*2「,」*columnname*3"のようにします。 受信データに名前のない列が含まれている場合に置かれて、 <xref:System.Data.DataSet> に従ってパターン"Column1"、"Column2"などです。 複数の結果セットが追加されたとき、 <xref:System.Data.DataSet> 各結果セットが別のテーブルに配置されます。 追加の結果セットは整数値名を追加して、指定されたテーブル \(たとえば、"Table"、"Table1"、"Table2"およびなどです。\) という名前です。 列とテーブルの名前を使用するアプリケーションは、これらの名前付けパターンとの競合が発生しないようにすることを確認してください。  
  
 ADO では値 `Recordset` または `Record` オブジェクトが共通に変換された言語の記憶域のランタイム型、 <xref:System.Data.DataSet>です。  
  
> [!NOTE]
>  このオーバー ロード、 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> メソッドを暗黙的に呼び出す `Close` 格納操作が完了すると、ADO オブジェクトにします。  
  
 次の例では、 <xref:System.Data.OleDb.OleDbDataAdapter> 入力、 <xref:System.Data.DataSet> 、ADO を使用して `Recordset` ADO は `Record` オブジェクトです。 この例では、ADO を作成した `RecordSet` と `Record` オブジェクトです。  
  
```vb  
Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()  
     Dim custDS As DataSet = New DataSet  
     'Use ADO objects from ADO library (msado15.dll) imported  
     ' as.NET library ADODB.dll using TlbImp.exe  
     Dim adoConn As ADODB.Connection = New ADODB.Connection()  
     Dim adoRS As ADODB.Recordset = New ADODB.Recordset()  
     adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1)  
     adoRS.Open("SELECT * FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)  
     custDA.Fill(custDS, adoRS, "Customers")  
     adoConn.Close()  
```  
  
```csharp  
OleDbDataAdapter custDA = new OleDbDataAdapter();  
     DataSet custDS = new DataSet();  
     //Use ADO objects from ADO library (msado15.dll) imported  
     // as.NET library ADODB.dll using TlbImp.exe  
     ADODB.Connection adoConn = new ADODB.Connection();  
     ADODB.Recordset adoRS = new ADODB.Recordset();  
     adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1);  
     adoRS.Open("SELECT * FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);  
     custDA.Fill(custDS, adoRS, "Customers");  
     adoConn.Close();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">ソース テーブルが正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OleDb.OleDbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースに新しいレコードを挿入するために使用する SQL ステートメントまたはストアド プロシージャを取得または設定します。</summary>
        <value>
          <see cref="T:System.Data.OleDb.OleDbCommand" />中に使用される<see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />で新しい行に対応するデータ ソースのレコードを挿入する、<see cref="T:System.Data.DataSet" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 中に<xref:System.Data.Common.DbDataAdapter.Update%2A>このプロパティを設定しないと、主キー情報が内に存在する場合は、 <xref:System.Data.DataSet>、<xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>設定した場合は、自動的に生成できます、<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>プロパティと使用、<xref:System.Data.OleDb.OleDbCommandBuilder>です。 次に、追加のコマンドを設定しないことがによって生成される、<xref:System.Data.OleDb.OleDbCommandBuilder>です。 この生成ロジックで内に存在するキー列について、<xref:System.Data.DataSet>です。 詳細については、「[Automatically Generated Commands](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91)」を参照してください。  
  
 ときに<xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>が割り当てられている、以前に作成した<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbCommand>は複製されません。<xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>以前に作成の参照を保持<xref:System.Data.OleDb.OleDbCommand>オブジェクト。  
  
> [!NOTE]
>  これらの行に追加できますこのコマンドの実行には、行が返された場合、<xref:System.Data.DataSet>を設定する方法に応じて、<xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A>のプロパティ、<xref:System.Data.OleDb.OleDbCommand>オブジェクト。  
  
   
  
## 例  
 次の例を作成、<xref:System.Data.OleDb.OleDbDataAdapter>設定と、<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>と<xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>プロパティです。 既に作成したことを前提としています、<xref:System.Data.OleDb.OleDbConnection>オブジェクト。  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected override void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected override void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowUpdated">
      <MemberSignature Language="C#" Value="public event System.Data.OleDb.OleDbRowUpdatedEventHandler RowUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.OleDb.OleDbRowUpdatedEventHandler RowUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Data.OleDb.OleDbDataAdapter.RowUpdated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbRowUpdatedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>中に発生した <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> データ ソースに対してコマンドが実行された後です。 更新の試行が行われたとします。 そのため、イベントが発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用すると <xref:System.Data.Common.DbDataAdapter.Update%2A>, 、更新されたデータ行ごとに発生する 2 つのイベントがあります。 実行の順序は次のとおりです。  
  
1.  値、 <xref:System.Data.DataRow> パラメーターの値に移動します。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドを実行します。  
  
4.  コマンドに設定されている場合は、 `FirstReturnedRecord`, 、最初に返された結果に格納、 <xref:System.Data.DataRow>です。  
  
5.  出力パラメーターがある場合に置かれて、 <xref:System.Data.DataRow>です。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。  
  
   
  
## 例  
 例を次に、 <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> と <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdated> イベントが使用されています。  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.RowUpdated Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.RowUpdated Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.RowUpdated Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowUpdating">
      <MemberSignature Language="C#" Value="public event System.Data.OleDb.OleDbRowUpdatingEventHandler RowUpdating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.OleDb.OleDbRowUpdatingEventHandler RowUpdating" />
      <MemberSignature Language="DocId" Value="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbRowUpdatingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>中に発生した <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 、データ ソースに対してコマンドが実行される前にします。 更新の試行が行われたとします。 そのため、イベントが発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用すると <xref:System.Data.Common.DbDataAdapter.Update%2A>, 、更新されたデータ行ごとに発生する 2 つのイベントがあります。 実行の順序は次のとおりです。  
  
1.  値、 <xref:System.Data.DataRow> パラメーターの値に移動します。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドを実行します。  
  
4.  コマンドに設定されている場合は、 `FirstReturnedRecord`, 、最初に返された結果に格納、 <xref:System.Data.DataRow>です。  
  
5.  出力パラメーターがある場合に置かれて、 <xref:System.Data.DataRow>です。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。  
  
   
  
## 例  
 例を次に、 <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> と <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdated> イベントが使用されています。  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.RowUpdated Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.RowUpdated Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.RowUpdated Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OleDb.OleDbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または SQL ステートメントまたはストアド プロシージャをデータ ソース内のレコードを選択するために使用を設定します。</summary>
        <value>
          <see cref="T:System.Data.OleDb.OleDbCommand" /> 中に使用される <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> に配置するデータ ソースからレコードを選択、 <see cref="T:System.Data.DataSet" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> が割り当てられている以前に作成した <xref:System.Data.OleDb.OleDbCommand>, 、 <xref:System.Data.OleDb.OleDbCommand> 複製されません。<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 以前に作成したへの参照を保持 <xref:System.Data.OleDb.OleDbCommand> オブジェクトです。  
  
 場合、 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 、行を返しませんにテーブルが追加されない、 <xref:System.Data.DataSet>, 、例外が発生しなかったとします。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbDataAdapter> し、設定、 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> と <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> プロパティです。 既に作成するいると想定して、 <xref:System.Data.OleDb.OleDbConnection> オブジェクトです。  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Data.IDbDataAdapter.DeleteCommand" />」を参照してください。</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> 更新中に、データ セットの削除された行のデータ ソースのレコードを削除するために使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.OleDb.OleDbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Data.IDbDataAdapter.InsertCommand" />」を参照してください。</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> データ セットに配置するデータ ソースからレコードを挿入する、更新中に使用されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.OleDb.OleDbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Data.IDbDataAdapter.SelectCommand" />」を参照してください。</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> 更新中に使用されるデータ セットに配置するデータ ソースからレコードを選択します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.OleDb.OleDbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Data.IDbDataAdapter.UpdateCommand" />」を参照してください。</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> データ セットで変更された行のデータ ソースのレコードを更新プログラムを更新中に使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.OleDb.OleDbDataAdapter> のインスタンスが <xref:System.Data.IDbDataAdapter> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.ICloneable.Clone" />」を参照してください。</summary>
        <returns>このインスタンスのコピーである新しい <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.OleDb.OleDbDataAdapter> のインスタンスが <xref:System.ICloneable> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OleDb.OleDbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースのレコードを更新するために使用する SQL ステートメントまたはストアド プロシージャを取得または設定します。</summary>
        <value>
          <see cref="T:System.Data.DataSet" /> で変更された行に対応するデータ ソースのレコードを更新する <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> 中に使用される <see cref="T:System.Data.OleDb.OleDbCommand" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 During <xref:System.Data.Common.DbDataAdapter.Update%2A>, if this property is not set and primary key information is present in the <xref:System.Data.DataSet>, the <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> can be generated automatically if you set the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> property and use the <xref:System.Data.OleDb.OleDbCommandBuilder>. Then, any additional commands that you do not set are generated by the <xref:System.Data.OleDb.OleDbCommandBuilder>. This generation logic requires key column information to be present in the <xref:System.Data.DataSet>. For more information, see [Automatically Generated Commands](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91).  
  
 When <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> is assigned to a previously created <xref:System.Data.OleDb.OleDbCommand>, the <xref:System.Data.OleDb.OleDbCommand> is not cloned. The <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> maintains a reference to the previously created <xref:System.Data.OleDb.OleDbCommand> object.  
  
> [!NOTE]
>  If execution of this command returns rows, these rows may be merged with the <xref:System.Data.DataSet> depending on how you set the <xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> property of the <xref:System.Data.OleDb.OleDbCommand> object.  
  
   
  
## 例  
 The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.UpdateCommand Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.UpdateCommand Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>内の行の更新を追加するか、 <see cref="T:System.Data.DataSet" /> 一致するように ADO <see langword="Recordset" /> または <see langword="Record" /> オブジェクトです。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>