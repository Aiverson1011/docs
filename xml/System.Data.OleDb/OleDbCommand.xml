<Type Name="OleDbCommand" FullName="System.Data.OleDb.OleDbCommand">
  <TypeSignature Language="C#" Value="public sealed class OleDbCommand : System.Data.Common.DbCommand, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OleDbCommand extends System.Data.Common.DbCommand implements class System.Data.IDbCommand, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OleDb.OleDbCommand" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbCommand</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("RecordsAffected")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.OleDbCommandDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データ ソースに対して実行する SQL ステートメントまたはストアド プロシージャを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンス <xref:System.Data.OleDb.OleDbCommand> が作成、読み取り\/書き込みプロパティは、初期値に設定されます。 これらの値の一覧は、次を参照してください。、 <xref:System.Data.OleDb.OleDbCommand> コンス トラクターです。  
  
 <xref:System.Data.OleDb.OleDbCommand> データ ソースでコマンドを実行する次のメソッドを機能します。  
  
|アイテム|説明|  
|----------|--------|  
|<xref:System.Data.OleDb.OleDbCommand.ExecuteReader%2A>|行を返すコマンドを実行します。<xref:System.Data.OleDb.OleDbCommand.ExecuteReader%2A> 使用されている場合を希望する効果がない SQL 設定ステートメントなどのコマンドを実行します。|  
|<xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A>|SQL INSERT、DELETE、UPDATE、および一連のステートメントなどのコマンドを実行します。|  
|<xref:System.Data.OleDb.OleDbCommand.ExecuteScalar%2A>|単一の値、たとえば、データベースから集計値を取得します。|  
  
 リセットすることができます、 <xref:System.Data.OleDb.OleDbCommand.CommandText%2A> プロパティと再利用、 <xref:System.Data.OleDb.OleDbCommand> オブジェクトです。 ただし、閉じる必要があります、 <xref:System.Data.OleDb.OleDbDataReader> 新しいまたは前のコマンドを実行する前にします。  
  
 致命的なエラーの場合 <xref:System.Data.OleDb.OleDbException> \(たとえば、SQL Server 重要度レベルが 20 以上\) メソッドの実行によって生成される、 <xref:System.Data.OleDb.OleDbCommand>, 、 <xref:System.Data.OleDb.OleDbConnection>, 、接続を閉じることがあります。 ただし、ユーザーは接続を再び開き、続行できます。  
  
   
  
## 例  
 次の例では、 <xref:System.Data.OleDb.OleDbCommand>, と共に、 <xref:System.Data.OleDb.OleDbDataAdapter> と <xref:System.Data.OleDb.OleDbConnection>, 、Access データベースから行を選択します。 塗りつぶされた、 <xref:System.Data.DataSet> 返されます。 例が渡される初期化された <xref:System.Data.DataSet>, 、接続文字列、クエリ文字列では、SQL SELECT ステートメント、およびソース データベースのテーブルの名前を表す文字列。  
  
 [!code-csharp[Classic WebData OleDbCommand Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbCommand Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Data.OleDb.OleDbDataAdapter" />
    <altmember cref="T:System.Data.OleDb.OleDbConnection" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.OleDb.OleDbCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The base constructor initializes all fields to their default values. The following table shows initial property values for an instance of <xref:System.Data.OleDb.OleDbCommand>.  
  
|Properties|Initial Value|  
|----------------|-------------------|  
|<xref:System.Data.OleDb.OleDbCommand.CommandText%2A>|empty string \(""\)|  
|<xref:System.Data.OleDb.OleDbCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.OleDb.OleDbCommand.CommandType%2A>|`Text`|  
|<xref:System.Data.OleDb.OleDbCommand.Connection%2A>|null|  
  
   
  
## 例  
 The following example creates an <xref:System.Data.OleDb.OleDbCommand> and sets some of its properties.  
  
 [!code-csharp[Classic WebData OleDbCommand.OleDbCommand Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.OleDbCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.OleDbCommand Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.OleDbCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbCommand (string cmdText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cmdText">クエリのテキスト。</param>
        <summary>クエリ テキストを指定して、<see cref="T:System.Data.OleDb.OleDbCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The following table shows initial property values for an instance of <xref:System.Data.OleDb.OleDbCommand>.  
  
|Properties|Initial Value|  
|----------------|-------------------|  
|<xref:System.Data.OleDb.OleDbCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.OleDb.OleDbCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.IDbCommand.CommandType%2A>|`Text`|  
|<xref:System.Data.OleDb.OleDbCommand.Connection%2A>|null|  
  
   
  
## 例  
 The following example creates an <xref:System.Data.OleDb.OleDbCommand> and sets some of its properties.  
  
 [!code-csharp[Classic WebData OleDbCommand.OleDbCommand1 Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.OleDbCommand1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.OleDbCommand1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.OleDbCommand1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbCommand (string cmdText, System.Data.OleDb.OleDbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.OleDb.OleDbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.#ctor(System.String,System.Data.OleDb.OleDbConnection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.OleDb.OleDbConnection" />
      </Parameters>
      <Docs>
        <param name="cmdText">クエリのテキスト。</param>
        <param name="connection">データ ソースへの接続を表す <see cref="T:System.Data.OleDb.OleDbConnection" />。</param>
        <summary>クエリ テキストと <see cref="T:System.Data.OleDb.OleDbConnection" /> を指定して、<see cref="T:System.Data.OleDb.OleDbCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The following table shows initial property values for an instance of <xref:System.Data.OleDb.OleDbCommand>.  
  
|Properties|Initial Value|  
|----------------|-------------------|  
|<xref:System.Data.OleDb.OleDbCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.OleDb.OleDbCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.IDbCommand.CommandType%2A>|`Text`|  
|<xref:System.Data.OleDb.OleDbCommand.Connection%2A>|A new <xref:System.Data.OleDb.OleDbConnection> that is the value for the **parameterReference tag is not supported!!!!**<br /> parameter.|  
  
 You can change the value for any of these parameters by setting the related property.  
  
   
  
## 例  
 The following example creates an <xref:System.Data.OleDb.OleDbCommand> and sets some of its properties.  
  
 [!code-csharp[Classic WebData OleDbCommand.OleDbCommand2 Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.OleDbCommand2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.OleDbCommand2 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.OleDbCommand2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbCommand (string cmdText, System.Data.OleDb.OleDbConnection connection, System.Data.OleDb.OleDbTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.OleDb.OleDbConnection connection, class System.Data.OleDb.OleDbTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.#ctor(System.String,System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.OleDb.OleDbConnection" />
        <Parameter Name="transaction" Type="System.Data.OleDb.OleDbTransaction" />
      </Parameters>
      <Docs>
        <param name="cmdText">クエリのテキスト。</param>
        <param name="connection">データ ソースへの接続を表す <see cref="T:System.Data.OleDb.OleDbConnection" />。</param>
        <param name="transaction">
          <see cref="T:System.Data.OleDb.OleDbCommand" /> が実行するトランザクション。</param>
        <summary>クエリのテキスト、<see cref="T:System.Data.OleDb.OleDbConnection" />、および <see cref="P:System.Data.OleDb.OleDbCommand.Transaction" /> を指定して、<see cref="T:System.Data.OleDb.OleDbCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The following table shows initial property values for an instance of <xref:System.Data.OleDb.OleDbCommand>.  
  
|Properties|Initial Value|  
|----------------|-------------------|  
|<xref:System.Data.OleDb.OleDbCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.OleDb.OleDbCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.IDbCommand.CommandType%2A>|`Text`|  
|<xref:System.Data.OleDb.OleDbCommand.Connection%2A>|A new <xref:System.Data.OleDb.OleDbConnection> that is the value for the **parameterReference tag is not supported!!!!**<br /> parameter.|  
  
 You can change the value for any of these parameters by setting the related property.  
  
   
  
## 例  
 The following example creates an <xref:System.Data.OleDb.OleDbCommand> and sets some of its properties.  
  
 [!code-csharp[Classic WebData OleDbCommand.OleDbCommand3\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.OleDbCommand3/CS/mysample.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.OleDbCommand3\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.OleDbCommand3/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public override void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.Cancel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>実行をキャンセルしようとする、 <see cref="T:System.Data.OleDb.OleDbCommand" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 キャンセルする対象がない場合は、何も行われません。 ただし、処理中のコマンドが存在し、キャンセルの試行が失敗した場合でも、例外は生成されません。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbCommand>, を実行して、実行をキャンセルします。 これは、SQL の SELECT ステートメントを表す文字列およびデータ ソースに接続するために使用する文字列をメソッドに渡します。  
  
 [!code-csharp[Classic WebData OleDbCommand.Cancel Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.Cancel Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.Cancel Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.Cancel Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OleDb.OleDbCommand Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新たに作成 <see cref="T:System.Data.OleDb.OleDbCommand" /> 現在のインスタンスのコピーであるオブジェクト。</summary>
        <returns>新しい <see cref="T:System.Data.OleDb.OleDbCommand" /> このインスタンスのコピーであるオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandText">
      <MemberSignature Language="C#" Value="public override string CommandText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandText" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbCommand.CommandText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.ADO.Design.OleDbCommandTextEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または SQL ステートメントまたはデータ ソースで実行するストアド プロシージャを設定します。</summary>
        <value>SQL ステートメントまたはストアド プロシージャを実行します。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Data.OleDb.OleDbCommand.CommandType%2A> にプロパティが設定されている `StoredProcedure`, 、 <xref:System.Data.OleDb.OleDbCommand.CommandType%2A> プロパティは、ストアド プロシージャの名前に設定する必要があります。 ユーザー、ストアド プロシージャ名に特殊文字が含まれている場合は、エスケープ文字構文を使用する必要があります。 コマンドのいずれかを呼び出すときにこのストアド プロシージャが実行される、 `Execute` メソッドです。  
  
 <xref:System.Data.OleDb.OleDbCommand.CommandType%2A> に設定されている `TableDirect`, 、 <xref:System.Data.OleDb.OleDbCommand.CommandType%2A> プロパティは、アクセスするテーブルまたはテーブルの名前に設定する必要があります。 ユーザーは、テーブル名に特殊文字が含まれている場合は、エスケープ文字構文を使用する必要があります。 すべての行と列の名前のテーブルまたはテーブルが返されますのいずれかを呼び出すときに、 `Execute` メソッドです。  
  
 設定することはできません、 <xref:System.Data.OleDb.OleDbCommand.Connection%2A>, 、<xref:System.Data.OleDb.OleDbCommand.CommandType%2A>, 、および <xref:System.Data.OleDb.OleDbCommand.CommandText%2A> プロパティの場合は、現在の接続で実行またはフェッチ操作が実行されます。  
  
 OLE DB.NET プロバイダーでは、SQL ステートメントやによって呼び出されるストアド プロシージャにパラメーターを渡す場合は、名前付きパラメーターはできません、 <xref:System.Data.OleDb.OleDbCommand> と <xref:System.Data.OleDb.OleDbCommand.CommandType%2A> に設定されている `Text`します。 この場合、疑問符 \(?\) プレース ホルダーを使用する必要があります。 例:  
  
 `SELECT * FROM Customers WHERE CustomerID = ?`  
  
 そのため、順序を <xref:System.Data.OleDb.OleDbParameter> にオブジェクトを追加、 <xref:System.Data.OleDb.OleDbParameterCollection> パラメーターの疑問符 \(\) プレース ホルダーの位置に直接対応する必要があります。  
  
 詳細については、「[Using Stored Procedures with a Command](http://msdn.microsoft.com/ja-jp/537d8a2c-d40b-4000-83eb-bc1fcc93f707)」を参照してください。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbCommand> し、一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData OleDbCommand.CommandText Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.CommandText Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.CommandText Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.CommandText Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public override int CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CommandTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbCommand.CommandTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコマンドを実行する試行を終了して、エラーを生成するまでの待機時間を設定します。</summary>
        <value>時間 \(秒単位\)、コマンドの実行を待機します。 既定値は 30 秒です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値が 0 の制限がないことを示します。 およびでは避ける必要があります、 <xref:System.Data.OleDb.OleDbCommand.CommandTimeout%2A> ため、コマンドを実行するとは無期限に待機します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandType">
      <MemberSignature Language="C#" Value="public override System.Data.CommandType CommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandType CommandType" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbCommand.CommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.CommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値が、どのように <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" /> プロパティを解釈します。</summary>
        <value>
          <see cref="P:System.Data.OleDb.OleDbCommand.CommandType" /> 値のいずれか。 既定値は Text です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定すると、 <xref:System.Data.OleDb.OleDbCommand.CommandType%2A> プロパティを `StoredProcedure`, 、設定する必要があります、 <xref:System.Data.OleDb.OleDbCommand.CommandText%2A> プロパティをストアド プロシージャの名前にします。 コマンドは、Execute メソッドのいずれかを呼び出すときに、このストアド プロシージャを実行します。  
  
 <xref:System.Data.OleDb.OleDbCommand.Connection%2A>, 、<xref:System.Data.OleDb.OleDbCommand.CommandType%2A> と <xref:System.Data.OleDb.OleDbCommand.CommandText%2A> 、現在の接続には、実行または fetch 操作を実行する場合は、プロパティを設定することはできません。  
  
 OLE DB .NET プロバイダーでは、SQL ステートメントやによって呼び出されるストアド プロシージャにパラメーターを渡す場合は、名前付きパラメーターはできません、 <xref:System.Data.OleDb.OleDbCommand> と <xref:System.Data.OleDb.OleDbCommand.CommandType%2A> Text に設定されています。 この場合、疑問符 \(?\) プレース ホルダーを使用する必要があります。 例:  
  
 `SELECT * FROM Customers WHERE CustomerID = ?`  
  
 そのため、順序を <xref:System.Data.OleDb.OleDbParameter> にオブジェクトを追加、 <xref:System.Data.OleDb.OleDbParameterCollection> パラメーターの疑問符 \(\) プレース ホルダーの位置に直接対応する必要があります。 詳細については、「[Using Stored Procedures with a Command](http://msdn.microsoft.com/ja-jp/537d8a2c-d40b-4000-83eb-bc1fcc93f707)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">値が有効ないなかった <see cref="P:System.Data.OleDb.OleDbCommand.CommandType" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbConnection Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OleDb.OleDbConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbCommand.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Data.OleDb.OleDbConnection" /> のこのインスタンスで使用される、 <see cref="T:System.Data.OleDb.OleDbCommand" />です。</summary>
        <value>データ ソースへの接続。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定することはできません、 <xref:System.Data.OleDb.OleDbCommand.Connection%2A>, 、<xref:System.Data.OleDb.OleDbCommand.CommandType%2A> と <xref:System.Data.OleDb.OleDbCommand.CommandText%2A> プロパティの場合は、現在の接続で実行またはフェッチ操作が実行されます。  
  
 トランザクションの進行中に <xref:System.Data.OleDb.OleDbCommand.Connection%2A> を設定した場合、<xref:System.Data.OleDb.OleDbCommand.Transaction%2A> プロパティが NULL でなければ、<xref:System.InvalidOperationException> が生成されます。<xref:System.Data.OleDb.OleDbCommand.Transaction%2A> プロパティが NULL でない場合、トランザクションが既にコミット済みまたはロールバック済みであれば、<xref:System.Data.OleDb.OleDbCommand.Transaction%2A> は NULL に設定されます。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbCommand> し、一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData OleDbCommand.Connection Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.Connection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.Connection Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.Connection Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">トランザクションの進行中に <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> プロパティが変更されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDbParameter">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameter CreateDbParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbParameter CreateDbParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.CreateDbParameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParameter">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbParameter CreateParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OleDb.OleDbParameter CreateParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.CreateParameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを作成、 <see cref="T:System.Data.OleDb.OleDbParameter" /> オブジェクトです。</summary>
        <returns>
          <see cref="T:System.Data.OleDb.OleDbParameter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OleDb.OleDbCommand.CreateParameter%2A> メソッドは、厳密に型指定のバージョンの <xref:System.Data.IDbCommand.CreateParameter%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbConnection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbConnection DbConnection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection DbConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbCommand.DbConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbParameterCollection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameterCollection DbParameterCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbParameterCollection DbParameterCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbCommand.DbParameterCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction DbTransaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbTransaction DbTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbCommand.DbTransaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DesignTimeVisible">
      <MemberSignature Language="C#" Value="public override bool DesignTimeVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DesignTimeVisible" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbCommand.DesignTimeVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または、コマンド オブジェクトをカスタマイズした Windows フォーム デザイナー コントロールに表示するかどうかを示す値を設定します。</summary>
        <value>コントロールにコマンド オブジェクトを表示するかどうかを示す値。 既定値は、<see langword="true" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReader">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbDataReader ExecuteDbDataReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbDataReader ExecuteDbDataReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQuery">
      <MemberSignature Language="C#" Value="public override int ExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ExecuteNonQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.ExecuteNonQuery" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>に対して SQL ステートメントを実行、 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> 影響を受けた行の数を返します。</summary>
        <returns>影響を受けた行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A> カタログ操作を次に例を実行する、データベースの構造をクエリまたはテーブルなどのデータベース オブジェクトを作成またはを使用せずに、データベース内のデータを変更する、 <xref:System.Data.DataSet> UPDATE、INSERT、または DELETE ステートメントを実行しています。  
  
 ただし、 <xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A> 返します。 行はありませんが、出力パラメーターまたはパラメーターにマッピングされた値には、データが入っていたを取得します。  
  
 UPDATE、INSERT、および DELETE のステートメントでは、戻り値は、コマンドは、影響を受ける行の数です。 その他のすべての種類のステートメントは、戻り値は\-1 です。 ロールバックが発生した場合、戻り値も\-1 にです。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbCommand> を使用してそれを実行して <xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A>します。 この例は、UPDATE、INSERT、または削除などの SQL ステートメントを表す文字列およびデータ ソースに接続するために使用する文字列に渡されます。  
  
 [!code-csharp[Classic WebData OleDbCommand.ExecuteNonQuery Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.ExecuteNonQuery Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.ExecuteNonQuery Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.ExecuteNonQuery Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が存在しません。  
  
 または  
  
 接続が開かれていません。  
  
 または  
  
 接続が参加した元のコンテキストからは異なるトランザクション コンテキスト内でコマンドを実行することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbDataReader ExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OleDb.OleDbDataReader ExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.ExecuteReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>送信、 <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" /> に、 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> をビルドし、 <see cref="T:System.Data.OleDb.OleDbDataReader" />です。</summary>
        <returns>
          <see cref="T:System.Data.OleDb.OleDbDataReader" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Data.OleDb.OleDbCommand.CommandType%2A> にプロパティが設定されている `StoredProcedure`, 、 <xref:System.Data.OleDb.OleDbCommand.CommandText%2A> プロパティは、ストアド プロシージャの名前に設定する必要があります。 コマンドを呼び出したときにこのストアド プロシージャが実行される <xref:System.Data.OleDb.OleDbCommand.ExecuteReader%2A>します。  
  
 終了する前に、 <xref:System.Data.OleDb.OleDbConnection>, 、ソリューションを閉じる、 <xref:System.Data.OleDb.OleDbDataReader> オブジェクトです。 閉じる必要があります、 <xref:System.Data.OleDb.OleDbDataReader> オブジェクトの再利用する場合、 <xref:System.Data.OleDb.OleDbCommand> オブジェクトです。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbCommand>, 、文字列では、SQL SELECT ステートメント、およびデータ ソースに接続するために使用する文字列を渡すことによって実行されます。  
  
 [!code-csharp[Classic WebData OleDbCommand.ExecuteReader1 Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.ExecuteReader1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.ExecuteReader1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.ExecuteReader1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が参加した元のコンテキストからは異なるトランザクション コンテキスト内でコマンドを実行することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbDataReader ExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OleDb.OleDbDataReader ExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.ExecuteReader(System.Data.CommandBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">
          <see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
        <summary>送信、 <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" /> に、 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />, 、およびビルド、 <see cref="T:System.Data.OleDb.OleDbDataReader" /> のいずれかを使用して、 <see cref="T:System.Data.CommandBehavior" /> 値。</summary>
        <returns>
          <see cref="T:System.Data.OleDb.OleDbDataReader" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定すると <xref:System.Data.CommandBehavior.SingleRow> で、 <xref:System.Data.OleDb.OleDbCommand.ExecuteReader%2A> のメソッド、 <xref:System.Data.OleDb.OleDbCommand> オブジェクトを .NET Framework Data Provider for OLE DB、OLE DB を使用してバインディングを実行する **IRow** インターフェイスの使用可能になる場合。 それ以外の場合、それを使用して、 **IRowset** インターフェイスです。 SQL ステートメントが 1 つの行のみを返すと予想される場合を指定する <xref:System.Data.CommandBehavior.SingleRow> によりアプリケーションのパフォーマンスも向上します。  
  
 ときに、 <xref:System.Data.OleDb.OleDbCommand.CommandType%2A> にプロパティが設定されている `StoredProcedure`, 、 <xref:System.Data.OleDb.OleDbCommand.CommandText%2A> プロパティは、ストアド プロシージャの名前に設定する必要があります。 コマンドを呼び出したときにこのストアド プロシージャが実行される <xref:System.Data.OleDb.OleDbCommand.ExecuteReader%2A>します。  
  
 <xref:System.Data.OleDb.OleDbDataReader> 大きなバイナリ値を効率的に読み取ることができる特殊なモードをサポートしています。 詳細については、次を参照してください。、 `SequentialAccess` 準 <xref:System.Data.CommandBehavior>します。  
  
 終了する前に、 <xref:System.Data.OleDb.OleDbConnection>, 、ソリューションを閉じる、 <xref:System.Data.OleDb.OleDbDataReader> オブジェクトです。 閉じる必要があります、 <xref:System.Data.OleDb.OleDbDataReader> オブジェクトの再利用する場合、 <xref:System.Data.OleDb.OleDbCommand> オブジェクトです。 場合、 <xref:System.Data.OleDb.OleDbDataReader> で作成された <xref:System.Data.CommandBehavior> に設定 `CloseConnection`, 、終了、 <xref:System.Data.OleDb.OleDbDataReader> の接続を自動的に閉じます。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbCommand>, は、TRANSACT\-SQL SELECT ステートメントでは、文字列と、データ ソースに接続するために使用する文字列を渡すことによって実行されます。<xref:System.Data.CommandBehavior> が <xref:System.Data.CommandBehavior.CloseConnection> に設定されます。  
  
 [!code-csharp[Classic WebData OleDbCommand.ExecuteReader2\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.ExecuteReader2/CS/mysample.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.ExecuteReader2\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.ExecuteReader2/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が参加した元のコンテキストからは異なるトランザクション コンテキスト内でコマンドを実行することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalar">
      <MemberSignature Language="C#" Value="public override object ExecuteScalar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ExecuteScalar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.ExecuteScalar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クエリを実行し、そのクエリが返す結果セットの最初の行にある最初の列を返します。 以降の列または行は無視されます。</summary>
        <returns>結果の最初の行の最初の列は、次の設定、または null 参照場合、結果セットは空にします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Data.OleDb.OleDbCommand.ExecuteScalar%2A> など、単一の値を取得するメソッドをデータ ソースからの集計値です。 使用するよりも少ないコードが必要です、 <xref:System.Data.OleDb.OleDbCommand.ExecuteReader%2A> メソッド、およびによって返されるデータを使用して単一の値を生成するために必要な操作を実行し、 <xref:System.Data.OleDb.OleDbDataReader>です。  
  
 標準的な <xref:System.Data.OleDb.OleDbCommand.ExecuteScalar%2A> クエリは、次の c\# の例のようにフォーマットされていることができます。  
  
```  
CommandText = "SELECT COUNT(*) FROM region";  
Int32 count = (int32) ExecuteScalar();  
```  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbCommand> を使用してそれを実行して <xref:System.Data.OleDb.OleDbCommand.ExecuteScalar%2A>します。 この例は、集計の結果を返す SQL ステートメントを表す文字列およびデータ ソースに接続するために使用する文字列に渡されます。  
  
 [!code-csharp[Classic WebData OleDbCommand.ExecuteScalar\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.ExecuteScalar/CS/mysample.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.ExecuteScalar\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.ExecuteScalar/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が参加した元のコンテキストからは異なるトランザクション コンテキスト内でコマンドを実行することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbParameterCollection Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OleDb.OleDbParameterCollection Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbCommand.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.OleDb.OleDbParameterCollection" /> を取得します。</summary>
        <value>SQL ステートメントまたはストアド プロシージャのパラメーターです。 既定値は空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 OLE DB .NET プロバイダーでは、SQL ステートメントやによって呼び出されるストアド プロシージャにパラメーターを渡す場合は、名前付きパラメーターはできません、 <xref:System.Data.OleDb.OleDbCommand> と <xref:System.Data.OleDb.OleDbCommand.CommandType%2A> に設定されている `Text`します。 この場合、疑問符 \(?\) プレース ホルダーを使用する必要があります。 例:  
  
 `SELECT * FROM Customers WHERE CustomerID = ?`  
  
 そのため、順序を <xref:System.Data.OleDb.OleDbParameter> にオブジェクトを追加、 <xref:System.Data.OleDb.OleDbParameterCollection> コマンド テキスト内のパラメーターの疑問符 \(\) プレース ホルダーの位置に直接対応する必要があります。  
  
> [!NOTE]
>  コレクション内のパラメーターで実行されるクエリの要件が一致しない場合、エラーが表示される場合があります。  
  
 詳細については、「[Using Stored Procedures with a Command](http://msdn.microsoft.com/ja-jp/537d8a2c-d40b-4000-83eb-bc1fcc93f707)」を参照してください。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbCommand> し、そのパラメーターを表示します。 これを実現する、メソッドに渡されますが、 <xref:System.Data.OleDb.OleDbConnection>, 、SQL SELECT ステートメント、およびの配列であるクエリ文字列 <xref:System.Data.OleDb.OleDbParameter> オブジェクトです。  
  
 [!code-csharp[Classic WebData OleDbCommand.Parameters Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.Parameters Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.Parameters Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.Parameters Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public override void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Prepare() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.Prepare" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データ ソースにコマンドの準備 \(またはコンパイル済み\) のバージョンを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Data.OleDb.OleDbCommand.CommandType%2A> にプロパティが設定されている `TableDirect`, 、<xref:System.Data.OleDb.OleDbCommand.Prepare%2A> 何も行われません。 場合 <xref:System.Data.OleDb.OleDbCommand.CommandType%2A> に設定されている `StoredProcedure`, への呼び出し <xref:System.Data.OleDb.OleDbCommand.Prepare%2A> no\-op をしまう可能性がありますが、成功する必要があります。  
  
 呼び出す前に <xref:System.Data.OleDb.OleDbCommand.Prepare%2A>, 、準備されたステートメントで各パラメーターのデータ型を指定します。 可変長データ型を持つパラメーターごとに設定する必要があります、 **サイズ** プロパティを必要な最大サイズ。<xref:System.Data.OleDb.OleDbCommand.Prepare%2A> これらの条件が満たされない場合は、エラーを返します。  
  
 呼び出した場合、 `Execute` メソッドを呼び出した後 <xref:System.Data.OleDb.OleDbCommand.Prepare%2A>, 、すべてのパラメーター値を指定する値を超える、 **サイズ** プロパティは、パラメーターの指定した元のサイズを自動的に切り捨てられ、切り捨てエラーは返されません。  
  
 出力パラメーターを \(か準備したもの\) かどうか、ユーザー指定のデータ型が必要です。 可変長データ型を指定する場合は、最大値も指定する必要があります **サイズ**します。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbCommand> 接続が開かれたとします。 例は、SQL SELECT ステートメントを表す文字列およびデータ ソースに接続するために使用する文字列を渡すことによって、データ ソース上のストアド プロシージャを準備します。  
  
 [!code-csharp[Classic WebData OleDbCommand.Prepare Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.Prepare Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbCommand.Prepare Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbCommand.Prepare Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> が設定されていません。  
  
 または  
  
 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> が開かれていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetCommandTimeout">
      <MemberSignature Language="C#" Value="public void ResetCommandTimeout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetCommandTimeout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.ResetCommandTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リセット、 <see cref="P:System.Data.OleDb.OleDbCommand.CommandTimeout" /> プロパティを既定値にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値、 <xref:System.Data.OleDb.OleDbCommand.CommandTimeout%2A> は 30 秒です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.IDbCommand.ExecuteReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Data.OleDb.OleDbCommand.System.Data.IDbCommand.ExecuteReader" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.OleDb.OleDbCommand> のインスタンスが <xref:System.Data.IDbCommand> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.IDbCommand.ExecuteReader">
      <MemberSignature Language="C#" Value="System.Data.IDataReader IDbCommand.ExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.IDataReader System.Data.IDbCommand.ExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.System#Data#IDbCommand#ExecuteReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Data.IDbCommand.ExecuteReader" />」を参照してください。</summary>
        <returns>
          <see cref="T:System.Data.IDataReader" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.OleDb.OleDbCommand> のインスタンスが <xref:System.Data.IDbCommand> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbCommand.ExecuteReader">
      <MemberSignature Language="C#" Value="System.Data.IDataReader IDbCommand.ExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.IDataReader System.Data.IDbCommand.ExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">
          <see cref="T:System.Data.CommandBehavior" /> 値のいずれか 1 つ。</param>
        <summary>実行、 <see cref="P:System.Data.IDbCommand.CommandText" /> に対して、 <see cref="P:System.Data.IDbCommand.Connection" />, 、およびビルド、 <see cref="T:System.Data.IDataReader" /> のいずれかを使用して、 <see cref="T:System.Data.CommandBehavior" /> 値。</summary>
        <returns>
          <see cref="T:System.Data.IDataReader" /> のいずれかを使用して構築された、 <see cref="T:System.Data.CommandBehavior" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.OleDb.OleDbCommand> のインスタンスが <xref:System.Data.IDbCommand> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 このメンバーの詳細については、「<xref:System.Data.IDbCommand.ExecuteReader%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbCommand.System#ICloneable#Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.ICloneable.Clone" />」を参照してください。</summary>
        <returns>このインスタンスのコピーである新しい <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.OleDb.OleDbCommand> のインスタンスが <xref:System.ICloneable> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transaction">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbTransaction Transaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OleDb.OleDbTransaction Transaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbCommand.Transaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.OleDb.OleDbTransaction" /> が実行される <see cref="T:System.Data.OleDb.OleDbCommand" /> を取得または設定します。</summary>
        <value>
          <see cref="T:System.Data.OleDb.OleDbTransaction" />。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定することはできません、 <xref:System.Data.OleDb.OleDbCommand.Transaction%2A> プロパティの場合は、特定の値に既に設定されているし、コマンドが実行する処理を行っています。 トランザクションのプロパティを設定する場合、 <xref:System.Data.OleDb.OleDbTransaction> に同じ接続されていないオブジェクト <xref:System.Data.OleDb.OleDbConnection> として、 <xref:System.Data.OleDb.OleDbCommand> オブジェクト、例外が、次回のステートメントを実行しようとします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatedRowSource">
      <MemberSignature Language="C#" Value="public override System.Data.UpdateRowSource UpdatedRowSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.UpdateRowSource UpdatedRowSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbCommand.UpdatedRowSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.UpdateRowSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定をコマンドの結果を適用する方法、 <see cref="T:System.Data.DataRow" /> によって使用される場合、 <see langword="Update" /> のメソッド、 <see cref="T:System.Data.OleDb.OleDbDataAdapter" />です。</summary>
        <value>
          <see cref="T:System.Data.UpdateRowSource" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値 <xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> コマンドが自動的に生成される場合を除き、両方の値です \(と同様、 <xref:System.Data.OleDb.OleDbCommandBuilder>\) の場合、既定値は None です。  
  
 使用する方法の詳細についての <xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> プロパティを参照してください [Using Parameters with a DataAdapter](http://msdn.microsoft.com/ja-jp/f21e6aba-b76d-46ad-a83e-2ad8e0af1e12)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">入力された値は、のいずれかでがない、 <see cref="T:System.Data.UpdateRowSource" /> 値。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.OleDb.OleDbCommand" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ExecuteReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>送信、 <see cref="P:System.Data.OleDb.OleDbCommand.CommandText" /> に、 <see cref="P:System.Data.OleDb.OleDbCommand.Connection" /> をビルドし、 <see cref="T:System.Data.OleDb.OleDbDataReader" />です。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>