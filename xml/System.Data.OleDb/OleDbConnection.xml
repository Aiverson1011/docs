<Type Name="OleDbConnection" FullName="System.Data.OleDb.OleDbConnection">
  <TypeSignature Language="C#" Value="public sealed class OleDbConnection : System.Data.Common.DbConnection, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OleDbConnection extends System.Data.Common.DbConnection implements class System.Data.IDbConnection, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OleDb.OleDbConnection" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("InfoMessage")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データ ソースへの接続を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OleDb.OleDbConnection> オブジェクトはデータ ソースへの一意の接続を表します。 クライアント\/サーバー データベース システムでは、サーバーへのネットワーク接続と同じです。 ネイティブの OLE DB プロバイダー、いくつかのメソッドまたはプロパティがサポートする機能に応じて、 <xref:System.Data.OleDb.OleDbConnection> オブジェクトを使用できない場合があります。  
  
 インスタンスを作成する場合 <xref:System.Data.OleDb.OleDbConnection>, 、すべてのプロパティは初期値に設定します。 これらの値の一覧は、次を参照してください。、 <xref:System.Data.OleDb.OleDbConnection> コンス トラクターです。  
  
 1 つの 1 つ以上の DataReader を開くことができます <xref:System.Data.OleDb.OleDbConnection>します。 使用する OLE DB プロバイダーが単一の接続で 1 つ以上の DataReader をサポートしない場合、プロバイダーは暗黙的にごとに、追加の接続を開きます。  
  
 場合、 <xref:System.Data.OleDb.OleDbConnection> の移動の範囲、終了していません。 そのため、明示的に閉じる必要があります、接続を呼び出して <xref:System.Data.OleDb.OleDbConnection.Close%2A> または **Dispose**, 、またはを使用して、 <xref:System.Data.OleDb.OleDbConnection> オブジェクト内の `Using` ステートメントです。  
  
> [!NOTE]
>  高パフォーマンス アプリケーションを展開するには、接続プールを使用する必要があります。 .NET Framework Data Provider for OLE DB を使用する場合は、プロバイダーは、これを自動的に管理するために接続がプールを有効にする必要はありません。 接続を使用する方法の詳細については「with .NET Framework Data Provider for OLE DB はプール [Understanding Connection Pooling](http://msdn.microsoft.com/ja-jp/2bd83b1e-3ea9-43c4-bade-d9cdb9bbbb04)します。  
  
 致命的なエラーの場合 <xref:System.Data.OleDb.OleDbException> \(たとえば、SQL Server 重要度レベルが 20 以上\) メソッドの実行によって生成される、 <xref:System.Data.OleDb.OleDbCommand>, 、 <xref:System.Data.OleDb.OleDbConnection> が閉じられています。 ただし、ユーザーは接続を再び開き、続行できます。  
  
 インスタンスを作成するアプリケーション、 <xref:System.Data.OleDb.OleDbConnection> オブジェクトには、宣言的または命令型のセキュリティ確認要求を設定して、コードに十分なアクセス許可を有効にしてすべての直接的および間接的な呼び出し元が必要とすることができます。<xref:System.Data.OleDb.OleDbConnection> 使用してセキュリティ要求は、 <xref:System.Data.OleDb.OleDbPermission> オブジェクトです。 ユーザーが、コードでは、十分なアクセス許可を持ちを使用して確認できる、 <xref:System.Data.OleDb.OleDbPermissionAttribute> オブジェクトです。 ユーザーおよび管理者が使用しても、 [Code Access Security Policy Tool \(Caspol.exe\)](http://msdn.microsoft.com/ja-jp/d2bf6123-7b0c-4e60-87ad-a39a1c3eb2e0) コンピューター、ユーザー、およびエンタープライズ レベルのセキュリティ ポリシーを変更します。 詳細については、「[Code Access Security and ADO.NET](http://msdn.microsoft.com/ja-jp/93e099eb-daa1-4f1e-b031-c1e10a996f88)」を参照してください。  
  
 データのサーバーからの警告および情報メッセージを処理の詳細については、次を参照してください。 [Working with Connection Events](http://msdn.microsoft.com/ja-jp/5a29de74-acfc-4134-8616-829dd7ce0710)します。  
  
> [!NOTE]
>  <xref:System.Data.OleDb.OleDbConnection> オブジェクトが設定または OLE DB プロバイダーに固有の動的プロパティの取得をサポートしていません。 OLE DB プロバイダーに接続文字列で渡すことができるプロパティだけがサポートされています。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbCommand> と <xref:System.Data.OleDb.OleDbConnection>です。<xref:System.Data.OleDb.OleDbConnection> を開き、として設定は、 <xref:System.Data.OleDb.OleDbCommand.Connection%2A> の <xref:System.Data.OleDb.OleDbCommand>です。 例では、 <xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A> し、接続を閉じます。 このため、 <xref:System.Data.OleDb.OleDbCommand.ExecuteNonQuery%2A> 接続文字列とは、クエリ文字列が渡されます。  
  
 [!code-csharp[Classic WebData OleDbConnection Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.OleDb.OleDbConnection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときの新しいインスタンス <xref:System.Data.OleDb.OleDbConnection> が作成、読み取り\/書き込みで、関連付けられているキーワードを使用して具体的に設定されている場合を除き、次の初期値にプロパティが設定されて、 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> プロパティです。  
  
|プロパティ|初期値|  
|-----------|---------|  
|<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>|空の文字列 \(""\)|  
|<xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A>|15|  
|<xref:System.Data.OleDb.OleDbConnection.Database%2A>|空の文字列 \(""\)|  
|<xref:System.Data.OleDb.OleDbConnection.DataSource%2A>|空の文字列 \(""\)|  
  
 これらのプロパティの値を変更するにを使用してのみ、 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> プロパティです。  
  
   
  
## 例  
 次の例を作成し、開きます、 <xref:System.Data.OleDb.OleDbConnection>です。  
  
 [!code-csharp[Classic WebData OleDbConnection.OleDbConnection Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.OleDbConnection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.OleDbConnection Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.OleDbConnection Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">データベースを開くために使用される接続。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Data.OleDb.OleDbConnection" /> クラスを指定した接続文字列を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときの新しいインスタンス <xref:System.Data.OleDb.OleDbConnection> が作成、読み取り\/書き込みで、関連付けられているキーワードを使用して具体的に設定されている場合を除き、次の初期値にプロパティが設定されて、 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> プロパティです。  
  
|プロパティ|初期値|  
|-----------|---------|  
|<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>|`connectionString`|  
|<xref:System.Data.OleDb.OleDbConnection.ConnectionTimeout%2A>|15|  
|<xref:System.Data.OleDb.OleDbConnection.Database%2A>|空の文字列 \(""\)|  
|<xref:System.Data.OleDb.OleDbConnection.DataSource%2A>|空の文字列 \(""\)|  
  
 これらのプロパティの値を変更するにを使用してのみ、 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> プロパティです。  
  
   
  
## 例  
 次の例を作成し、開きます、 <xref:System.Data.OleDb.OleDbConnection>です。  
  
 [!code-csharp[Classic WebData OleDbConnection.OleDbConnection1 Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.OleDbConnection1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.OleDbConnection1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.OleDbConnection1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OleDb.OleDbTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.BeginTransaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のデータベース トランザクションを開始 <see cref="T:System.Data.IsolationLevel" /> 値。</summary>
        <returns>新しいトランザクションを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 明示的にコミットしたりを使用してトランザクションをロールバックする必要があります、 <xref:System.Data.OleDb.OleDbTransaction.Commit%2A> または <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> メソッドです。 .NET Framework Data Provider for OLE DB のトランザクション管理モデルが正常に実行することを確認するには、データ ソースによって提供されるものなど、他のモデルのトランザクション管理の使用をしないでください。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbConnection> と <xref:System.Data.OleDb.OleDbTransaction>です。 使用する方法も示します、 <xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>, 、<xref:System.Data.OleDb.OleDbTransaction.Commit%2A>, 、および <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> メソッドです。  
  
 [!code-csharp[Classic WebData OleDbConnection.BeginTransaction Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.BeginTransaction Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">並列トランザクションはサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OleDb.OleDbTransaction BeginTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">トランザクションを実行する分離レベル。</param>
        <summary>分離レベルを指定して、データベース トランザクションを開始します。</summary>
        <returns>新しいトランザクションを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 明示的にコミットしたりを使用してトランザクションをロールバックする必要があります、 <xref:System.Data.OleDb.OleDbTransaction.Commit%2A> または <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> メソッドです。 .NET Framework Data Provider for OLE DB のトランザクション管理モデルが正常に実行することを確認するには、データ ソースによって提供されるものなど、他のモデルのトランザクション管理の使用をしないでください。  
  
> [!NOTE]
>  分離レベルを指定しない場合は、基になるプロバイダーの既定の分離レベルが使用されます。 分離レベルを指定する、 <xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A> メソッドを使用するオーバー ロードを使用して、 `isolationLevel` パラメーター。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbConnection> と <xref:System.Data.OleDb.OleDbTransaction>です。 使用する方法も示します、 <xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>, 、 <xref:System.Data.OleDb.OleDbTransaction.Commit%2A>, 、および <xref:System.Data.OleDb.OleDbTransaction.Rollback%2A> メソッドです。  
  
 [!code-csharp[Classic WebData OleDbConnection.BeginTransaction1 Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.BeginTransaction1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.BeginTransaction1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.BeginTransaction1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">並列トランザクションはサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.ChangeDatabase(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">データベース名。</param>
        <summary>開いている <see cref="T:System.Data.OleDb.OleDbConnection" /> の現在のデータベースを変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The value supplied in the **parameterReference tag is not supported!!!!**  
 parameter must be a valid database name. The **parameterReference tag is not supported!!!!**  
 parameter cannot contain a null value, an empty string, or a string with only blank characters.  
  
   
  
## 例  
 The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read\-only properties.  
  
 [!code-csharp[Classic WebData OleDbConnection.Database Example\#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.Database Example/CS/source.cs#2)]
 [!code-vb[Classic WebData OleDbConnection.Database Example\#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.Database Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">データベース名が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">接続が開かれていません。</exception>
        <exception cref="T:System.Data.OleDb.OleDbException">データベースを変更できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データ ソースへの接続を閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OleDb.OleDbConnection.Close%2A> メソッドが保留中のトランザクションをロールバックします。 接続プールに接続を解放し、または接続プールが無効になっている場合、接続を閉じます。 場合 <xref:System.Data.OleDb.OleDbConnection.Close%2A> 処理中に呼び出されますが、 <xref:System.Data.Common.DbConnection.StateChange> イベント、これ以上の <xref:System.Data.Common.DbConnection.StateChange> イベントが発生します。  
  
 アプリケーションが呼び出すことができます <xref:System.Data.OleDb.OleDbConnection.Close%2A> 2 回以上。 例外は生成されません。  
  
> [!CAUTION]
>  呼び出す必要はありません <xref:System.Data.OleDb.OleDbConnection.Close%2A> または **Dispose** で、 <xref:System.Data.OleDb.OleDbConnection>, 、 <xref:System.Data.OleDb.OleDbDataReader>, 、またはその他のマネージ オブジェクトで、 `Finalize` クラスのメソッドです。 ファイナライザーでのみ、クラスが直接所有されているアンマネージ リソースを解放する必要があります。 クラスがアンマネージ リソースを所有していない場合は、クラス定義に `Finalize` メソッドを含めないでください。 詳細については、「[Garbage Collection](http://msdn.microsoft.com/ja-jp/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.ADO.Design.OleDbConnectionStringEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データベースを開くために使用する文字列を取得または設定します。</summary>
        <value>データ ソース名と、最初の接続を確立するために必要なその他のパラメーターを含む OLE DB プロバイダー接続文字列。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> 、OLE DB 接続文字列の形式を次の例外とできるだけ一致するように設計されています。  
  
-   "プロバイダー \= `value` "句は必須です。 ただし、使用することはできません"プロバイダー MSDASQL \="、.NET Framework Data Provider for OLE DB サポートしていないため、OLE DB Provider for ODBC \(MSDASQL\)。 ODBC データ ソースにアクセスするには、使用、 <xref:System.Data.Odbc.OdbcConnection> になっているオブジェクト、 <xref:System.Data.Odbc> 名前空間。  
  
-   返される接続文字列では ODBC や ADO とは異なり、ユーザー設定と同じ <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>, 、セキュリティ情報引いた場合 `Persist Security Info` に設定されている `false` \(既定値\)。 .NET Framework Data Provider for OLE DB が永続化または設定しない限り、接続文字列にパスワードを返すしていない、 `Persist Security Info` キーワードを `true` \(推奨されません\)。 高レベルのセキュリティを維持するために強くお勧めを使用すること、 `Integrated Security` キーワード `Persist Security Info` 設定 `false`します。  
  
 使用することができます、 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> さまざまなデータ ソースに接続するプロパティです。 次の例では、いくつかの可能な接続文字列を示します。  
  
```  
"Provider=MSDAORA; Data Source=ORACLE8i7;Persist Security Info=False;Integrated Security=Yes"  
  
"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=c:\bin\LocalAccess40.mdb"  
  
"Provider=SQLOLEDB;Data Source=(local);Integrated Security=SSPI"  
```  
  
 場合、 `Data Source` キーワードが接続文字列で指定されていない、プロバイダーは使用できない場合に、ローカル サーバーに接続しようとしています。  
  
 接続文字列の詳細については、次を参照してください。 [Using Connection String Keywords with SQL Server Native Client](http://go.microsoft.com/fwlink/?LinkId=126696)します。  
  
 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> 接続が閉じられたときにのみ、プロパティを設定することができます。 多くの接続文字列の値はある対応する読み取り専用プロパティです。 接続文字列を設定すると、エラーが検出された場合を除いて、これらのプロパティが更新されます。 この場合、プロパティのいずれも更新されません。<xref:System.Data.OleDb.OleDbConnection> プロパティに含まれている設定のみを返す、 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>です。  
  
 リセット、 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> 閉じた接続に対してすべての接続文字列の値と関連するプロパティをリセットします。 これには、パスワードが含まれます。 含む接続文字列を設定する場合など"Initial Catalog \= AdventureWorks"への接続文字列をリセットして"プロバイダー \= SQLOLEDB; データ ソース \= MySQLServer; IntegratedSecurity SSPI \="、 <xref:System.Data.OleDb.OleDbConnection.Database%2A> プロパティが不要になった AdventureWorks に設定されています。 \(接続文字列の初期カタログ値に対応、 `Database` プロパティです\)。  
  
 プロパティが設定されて、接続文字列の予備検証が実行されます。 場合の値、 `Provider`, 、`Connect Timeout`, 、`Persist Security Info`, 、または `OLE DB Services` が含まれる文字列で、これらの値がチェックされます。 アプリケーションを呼び出すと、 <xref:System.Data.OleDb.OleDbConnection.Open%2A> メソッド、接続文字列が完全に検証します。 など、接続文字列に無効なまたはサポートされていないプロパティで、実行時に例外が含まれている場合 <xref:System.ArgumentException>, が生成されます。  
  
> [!CAUTION]
>  接続情報を指定することは、 <xref:System.Data.OleDb.OleDbConnection> Universal Data Link \(UDL\) ファイルです。 ただし、避ける必要がありますそうです。 UDL ファイルは暗号化されませんし、クリア テキストで接続文字列情報を公開します。 UDL ファイルは、アプリケーションにとって外部ファイルをベースにしたリソースであるため、.NET Framework でセキュリティ保護できません。  
  
 接続文字列の基本形式には、一連セミコロンで区切ってキーワード\/値ペアにはが含まれています。 それぞれのキーワードと値の関連付けには、等号 \(\=\) が使用されます。 セミコロン、単一引用符または二重引用符文字が含まれる値を含めるには、値を二重引用符で囲む必要があります。 値は、セミコロンと二重引用符の両方を含む、値が単一引用符で囲むことができます。 単一引用符も、値が二重引用符文字で始まる場合に役立ちます。 逆に、値が単一引用符で始まる場合は、二重引用符を使用できます。 値に単一引用符と二重引用符の両方が含まれている場合は、値以内に発生するたびに値を囲むために使用する引用符文字が倍する必要があります。  
  
 文字列値の先頭または末尾のスペースを含めるには、単一引用符または二重引用符のいずれかの値を囲む必要があります。 引用符で囲んだ場合でも、整数、ブール型、列挙値の先頭または末尾の空白は無視されます。 ただし、文字列リテラルのキーワードや値内の空白文字は保持されます。 区切り記号を使用せず、接続文字列内一重引用符または二重引用符を使用ことがあります \(たとえば、 `Data Source= my'Server` または `Data Source= my"Server`\) 引用符の文字が値の先頭または末尾の文字でない限りです。  
  
 キーワードまたは値には等号 \(\=\) を含める、もう 1 つの等号 \(\=\) によって前する必要があります。 たとえば、仮想的な接続文字列で  
  
```  
"key==word=value"  
```  
  
 キーワードは"キーの単語を \="、値は"value"です。  
  
 場合は、キーワードで特定のキーワード \= 値のペアから最後の出現が設定されている値で使用される接続文字列に複数回が発生します。  
  
 キーワードは、大文字小文字が区別されません。  
  
> [!CAUTION]
>  接続文字列に追加\] ダイアログ ボックスからユーザーの ID とパスワードの情報を取得するときに、ユーザー入力に基づいて接続文字列を構築するときに、警告を使用してください。 アプリケーションがユーザー埋め込むことでこれらの値、たとえば、追加の接続文字列パラメーターとしてパスワードを入力することを確認してください"なデータベース \= somedb"を別のデータベースに接続するためにします。 OLE DB 接続のプロパティの拡張接続文字列パラメーターを使用する場合は、ユーザー Id と、可能な場合、クリア テキストでパスワードを保存しないでされために、ユーザー Id とパスワードを渡すことを避けるの既定の設定 `Persist Security Info= false` には影響しません、 `Extended Properties` パラメーター。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbConnection> し、接続文字列の一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData OleDbConnection.DataSource Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.DataSource Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無効な接続文字列引数が指定されて、または必要な接続文字列の引数が指定されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.ConnectionTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>試行を中断してエラーを生成する前に、接続の確立時に待機する時間を取得します。</summary>
        <value>接続を開くを待機する秒数時間。 既定値は 15 秒です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値が 0 の制限がないことを示します。 およびでは避ける必要があります、 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> 接続の試行が無制限に待機があるためです。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbConnection> し、接続文字列の一部のプロパティを設定します。  
  
 [!code-csharp[Classic WebData OleDbConnection.ConnectionTimeout Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.ConnectionTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.ConnectionTimeout Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.ConnectionTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">0 より小さい値が設定されました。</exception>
        <altmember cref="P:System.Data.OleDb.OleDbConnection.Database" />
        <altmember cref="P:System.Data.OleDb.OleDbConnection.DataSource" />
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.OleDb.OleDbCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.CreateCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作成して返します、 <see cref="T:System.Data.OleDb.OleDbCommand" /> オブジェクトに関連付けられている、 <see cref="T:System.Data.OleDb.OleDbConnection" />です。</summary>
        <returns>
          <see cref="T:System.Data.OleDb.OleDbCommand" /> オブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.CreateDbCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.Database" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のデータベース、または接続が開いてから使用するデータベースの名前を取得します。</summary>
        <value>現在のデータベース、または接続が開いてから使用するデータベースの名前。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Data.OleDb.OleDbConnection.Database%2A> property updates dynamically. If you change the current database using a SQL statement or the <xref:System.Data.OleDb.OleDbConnection.ChangeDatabase%2A> method, an informational message is sent and the property is updated automatically.  
  
   
  
## 例  
 The following example creates an <xref:System.Data.OleDb.OleDbConnection> and displays some of its read\-only properties.  
  
 [!code-csharp[Classic WebData OleDbConnection.Database Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.Database Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.Database Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.Database Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" />
        <altmember cref="P:System.Data.OleDb.OleDbConnection.ConnectionTimeout" />
        <altmember cref="P:System.Data.OleDb.OleDbConnection.DataSource" />
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバー名またはデータ ソースのファイル名を取得します。</summary>
        <value>サーバー名またはデータ ソースのファイル名。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データベースへの接続が閉じている場合、 `DataSource` いるプロパティを返します `ConnectionString` for データ ソースのキーワードです。 接続が開いている場合、 `ConnectionString` データ ソースのキーワードの値で始まる"&#124; datadirectory &#124;"に含まれる内容を返します `ConnectionString` のデータ ソースのキーワードのみです。 データベースへの接続が開いている場合は、プロパティを返しますどのようなネイティブ プロバイダーの `DBPROP_INIT_DATASOURCE,` いる空の場合とネイティブ プロバイダーの `DBPROP_DATASOURCENAME` が返されます。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbConnection> し、一部の読み取り専用プロパティを表示します。  
  
 [!code-csharp[Classic WebData OleDbConnection.DataSource Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.DataSource Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.OleDb.OleDbConnection.ConnectionTimeout" />
        <altmember cref="P:System.Data.OleDb.OleDbConnection.Database" />
        <altmember cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistDistributedTransaction">
      <MemberSignature Language="C#" Value="public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnlistDistributedTransaction(class System.EnterpriseServices.ITransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.EnterpriseServices.ITransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">登録先の既存の <see cref="T:System.EnterpriseServices.ITransaction" /> への参照。</param>
        <summary>分散トランザクションとして指定したトランザクションに参加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しい ADO.NET 2.0 ではサポートを使用するため、 <xref:System.Data.Common.DbConnection.EnlistTransaction%2A> 分散トランザクションに参加するためのメソッドです。 これにより、接続するため、 <xref:System.Transactions.Transaction> インスタンス、 **EnlistTransaction** で利用できる機能を利用、 <xref:System.Transactions> 名前空間を管理するため、分散トランザクションの方になります **なって** この目的のためです。 詳細については、「[Performing a Distributed Transaction](http://msdn.microsoft.com/ja-jp/718b257c-bcb2-408e-b004-a7b0adb1c176)」を参照してください。  
  
 既存の分散トランザクションを使用して、参加を行う、 <xref:System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction%2A> メソッドへの自動参加が無効になっている場合。 既存の分散トランザクションに参加により、トランザクションがコミットまたはロールバックの場合、データ ソース側のコードで行われた変更もコミットまたはロールバックされます。 分散トランザクションの詳細については、次を参照してください。 [Performing a Distributed Transaction](http://msdn.microsoft.com/ja-jp/718b257c-bcb2-408e-b004-a7b0adb1c176)します。  
  
 <xref:System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction%2A> 場合に例外を返し、 <xref:System.Data.OleDb.OleDbConnection> がトランザクションを使用して、既に開始 <xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>します。 ただし、トランザクションは、データ ソースで開始されたローカル トランザクション \(たとえば、明示的に実行することによって、BEGIN TRANSACTION ステートメントを使用して、 <xref:System.Data.OleDbClient.OleDbCommand> オブジェクト\)、 <xref:System.Data.OleDb.OleDbConnection.EnlistDistributedTransaction%2A> ローカル トランザクションをロールバックし、要求されたとおりに、既存の分散トランザクションに参加します。 ローカルのトランザクションがロールバックしはないローカル トランザクションの管理を担当開始ことを使用して通知を受信しません<xref:System.Data.OleDb.OleDbConnection.BeginTransaction%2A>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">登録先の既存の <see cref="T:System.Transactions.Transaction" /> への参照。</param>
        <summary>分散トランザクションとして指定したトランザクションに参加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 New in ADO.NET 2.0 is support for using the <xref:System.Data.Common.DbConnection.EnlistTransaction%2A> method to enlist in a distributed transaction. Because it enlists a connection in a <xref:System.Transactions.Transaction> instance, **legacyBold tag is not supported!!!!**  
 takes advantage of functionality available in the <xref:System.Transactions> namespace for managing distributed transactions, making it preferable to **legacyBold tag is not supported!!!!**  
, which uses a <xref:System.EnterpriseServices.ITransaction> object. It also has slightly different semantics: once a connection is explicitly enlisted on a transaction, it cannot be unenlisted or enlisted in another transaction until the first transaction finishes. For more information about distributed transactions, see [Performing a Distributed Transaction](http://msdn.microsoft.com/ja-jp/718b257c-bcb2-408e-b004-a7b0adb1c176).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOleDbSchemaTable">
      <MemberSignature Language="C#" Value="public System.Data.DataTable GetOleDbSchemaTable (Guid schema, object[] restrictions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable GetOleDbSchemaTable(valuetype System.Guid schema, object[] restrictions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.GetOleDbSchemaTable(System.Guid,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Guid" />
        <Parameter Name="restrictions" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="schema">いずれか、 <see cref="T:System.Data.OleDb.OleDbSchemaGuid" /> を返すスキーマ テーブルを指定する値。</param>
        <param name="restrictions">
          <see cref="T:System.Object" /> 制限値の配列。 これらの制限列の順序で適用されます。 つまり、最初の制限値は、最初の制限列に適用される、2 つ目の制限値と 2 つ目の制限列に適用されます。</param>
        <summary>指定された制限を適用した後、GUID によって示されると、データ ソースからスキーマ情報を返します。</summary>
        <returns>A <see cref="T:System.Data.DataTable" /> 要求されたスキーマ情報を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スキーマ テーブルは、 <xref:System.Data.DataTable> で指定された OLE DB スキーマ行セットと同じ形式を持つ、 `schema` パラメーター。 使用して、 `restrictions` パラメーターで返される行をフィルター選択、 <xref:System.Data.DataTable> \(たとえば、テーブル名、型、所有者、またはスキーマの制限の指定\) をします。 配列内の値を渡す場合に、空の文字列または null 値が含まれない配列の要素が含まれます。 空の配列を渡した場合 `restrictions`, 、すべての行 \(テーブルごとに 1 つ\) が既定の順序で返されます。 ソース テーブルの列順序配列内の値に対応し、 <xref:System.Data.DataTable>です。 制限の配列内の各要素は、スキーマ行セットに対応する列の内容と比較されます。 たとえば、制限の配列の最初の要素、行セット内の最初の列が比較されます。 スキーマ行セットから制限の値と正確に一致する行だけが、その結果に追加されます制限要素が null でない場合 <xref:System.Data.DataTable>します。  
  
 <xref:System.Data.OleDb.OleDbConnection> メソッドを呼び出す、基になる OLE DB **idbschemarowset::getrowset** 標準的な共通言語ランタイムの変換規則を使用するメソッドです。 詳細については、次を参照してください。 [COM のデータ型](http://msdn.microsoft.com/ja-jp/f93ae35d-a416-4218-8700-c8218cc90061)します。  
  
 リテラルの概要情報を取得するにを使用して <xref:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals>します。 これにより、情報、OLE DB の呼び出しに相当 **IDBInfo::GetLiteralInfo** インターフェイス、または ADO **Connection.OpenSchema** メソッドを `adSchemaDBInfoLiterals` 定数です。  
  
   
  
## 例  
 次の例では、データベースのテーブルの一覧を返します。  
  
 [!code-csharp[Classic WebData OleDbConnection.GetOleDbSchemaTable Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.GetOleDbSchemaTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.GetOleDbSchemaTable Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.GetOleDbSchemaTable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OleDb.OleDbException">指定した制限のセットが正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Data.OleDb.OleDbConnection" /> が閉じています。</exception>
        <exception cref="T:System.ArgumentException">指定されたスキーマ行セットは、OLE DB プロバイダーによってサポートされていません。  
  
 または  
  
 <paramref name="schema" /> パラメーターの値が含まれる <see cref="F:System.Data.OleDb.OleDbSchemaGuid.DbInfoLiterals" /> と <paramref name="restrictions" /> パラメーターには、1 つまたは複数の制限が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.GetSchema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このデータ ソースのスキーマ情報を返す <see cref="T:System.Data.OleDb.OleDbConnection" />します。</summary>
        <returns>スキーマ情報を格納する <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.GetSchema(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="collectionName">返すスキーマの名前を指定します。</param>
        <summary>このデータ ソースのスキーマ情報を返す <see cref="T:System.Data.OleDb.OleDbConnection" /> スキーマ名として指定した文字列を使用します。</summary>
        <returns>スキーマ情報を格納する <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `collectionName` Null として指定された、 <xref:System.Data.DataTable> 、利用可能なすべてのメタデータとその制御に関する情報が含まれます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName, string[] restrictionValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.GetSchema(System.String,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
        <Parameter Name="restrictionValues" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="collectionName">返すスキーマの名前を指定します。</param>
        <param name="restrictionValues">要求したスキーマの制限値のセットを指定します。</param>
        <summary>このデータ ソースのスキーマ情報を返す <see cref="T:System.Data.OleDb.OleDbConnection" /> スキーマ名と制限値に指定した文字列の配列として指定した文字列を使用します。</summary>
        <returns>スキーマ情報を格納する <see cref="T:System.Data.DataTable" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `collectionName` Null として指定された、 <xref:System.Data.DataTable> 、利用可能なすべてのメタデータとその制御に関する情報が含まれます。  
  
 `restrictionValues` パラメーターを指定できます *n* 、特定のコレクションの制限のコレクションによって指定される値の深さ。 指定された制限の値を設定して、他の制限値を設定しない、するためには、null に設定し、値を指定するには制限の適切な値を格納する、前述の制限を設定する必要があります。  
  
 この例は、"Tables"コレクションです。 "Tables"コレクションに 3 つの制限 \(データベース、所有者、およびテーブル名\) があり、ユーザーが"Carl"の所有者に関連付けられているテーブルのみを取得する必要は場合、は、\(少なくとも\) 次の値で渡す必要があります: null,"Carl"です。 制限値が渡されない場合に、既定値はその制限に使用します。 これは、null を渡すことと同じマッピングとは別のパラメーター値に空の文字列を渡すことができます。 その場合、空の文字列 \(""\) が指定されたパラメーターの値であると見なされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InfoMessage">
      <MemberSignature Language="C#" Value="public event System.Data.OleDb.OleDbInfoMessageEventHandler InfoMessage;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.OleDb.OleDbInfoMessageEventHandler InfoMessage" />
      <MemberSignature Language="DocId" Value="E:System.Data.OleDb.OleDbConnection.InfoMessage" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbInfoMessageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プロバイダーが警告または情報メッセージを送信したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 警告またはサーバーによって送信される情報のメッセージを処理するクライアントを作成する必要があります、 <xref:System.Data.OleDb.OleDbInfoMessageEventHandler> このイベントを待機するデリゲート。  
  
 <xref:System.Data.OleDb.OleDbConnection.InfoMessage> イベント データ ソースから重要度が低いとメッセージが返されるときに発生します。 重要度が低いメッセージは、例外が発生しません。 この Microsoft SQL Server の重大度レベルが 10 以下のエラー メッセージが含まれています  
  
 使用例を含む詳細については、「[Working with Connection Events](http://msdn.microsoft.com/ja-jp/5a29de74-acfc-4134-8616-829dd7ce0710)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.Open" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指定されたプロパティの設定で、データベース接続を開き、 <see cref="P:System.Data.OleDb.OleDbConnection.ConnectionString" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OleDb.OleDbConnection> がある場合、接続プールから開かれた接続を描画します。 それ以外の場合、データ ソースへの新しい接続を確立します。 1 つの 1 つ以上の DataReader を開くことができます <xref:System.Data.OleDb.OleDbConnection>します。 使用する ole DB プロバイダーは、単一の接続で 1 つ以上のアクティブな DataReader をサポートしていません、OLEDB プロバイダーはごとに、追加の接続を暗黙的に開きます。  
  
> [!NOTE]
>  場合、 <xref:System.Data.OleDb.OleDbConnection> の移動の範囲、終了していません。 そのため、明示的に閉じる必要があります、接続を呼び出して <xref:System.Data.OleDb.OleDbConnection.Close%2A> または **Dispose**, 、または内で接続を使用して、 `Using` ステートメントです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続は既に開かれています。</exception>
        <exception cref="T:System.Data.OleDb.OleDbException">接続を開くときに発生した接続レベルのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public string Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定された OLE DB プロバイダーの名前を取得、"プロバイダー \="接続文字列の句。</summary>
        <value>指定されているプロバイダーの名前、"プロバイダー \="接続文字列の句。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbConnection> し、一部の読み取り専用プロパティを表示します。  
  
 [!code-csharp[Classic WebData OleDbConnection.Provider Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.Provider Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.Provider Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.Provider Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseObjectPool">
      <MemberSignature Language="C#" Value="public static void ReleaseObjectPool ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReleaseObjectPool() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.ReleaseObjectPool" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示して、 <see cref="T:System.Data.OleDb.OleDbConnection" /> オブジェクト プールは、最後の基になる接続がリリースされたときに解放することができます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `ReleaseObjectPool` 予約されているプールのリソースを解放を呼び出すことができる <xref:System.Data.OleDb.OleDbConnection> オブジェクトです。 OLE DB サービスは通常維持プールされた接続のアクティブな時間に対してもう一度はたとえば、する接続オブジェクトが使用しない場合は、このメソッドを呼び出す可能性があります。 メソッドを呼び出すだけでは解放されないこと実際には、プール内にあるアクティブな接続を確認します。  
  
 プールが最後に破棄される前に、次の処理を発生する必要があります。  
  
1.  呼び出す <xref:System.Data.OleDb.OleDbConnection.Close%2A> をプールに接続オブジェクトを返します。  
  
2.  各接続オブジェクトをプールのタイムアウトを許可します。  
  
3.  <xref:System.Data.OleDb.OleDbConnection.ReleaseObjectPool%2A> を呼び出す。  
  
4.  ガベージ コレクションを起動します。  
  
 逆を呼び出す場合 <xref:System.Data.OleDb.OleDbConnection.Close%2A> すべてのアクティブな接続のガベージ コレクションを呼び出すが、呼び出す必要はありませんし、 <xref:System.Data.OleDb.OleDbConnection.ReleaseObjectPool%2A>, 、プール内のオブジェクトは引き続きご利用いただけます用に予約されたリソース。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbConnection>, 、表示、いくつかのプロパティの表示、接続を閉じますおよびリソースを節約するために、オブジェクト プールを解放します。  
  
 [!code-csharp[Classic WebData OleDbConnection.ReleaseObjectPool Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.ReleaseObjectPool Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.ReleaseObjectPool Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.ReleaseObjectPool Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetState">
      <MemberSignature Language="C#" Value="public void ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.ResetState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>更新プログラム、 <see cref="P:System.Data.OleDb.OleDbConnection.State" /> のプロパティ、 <see cref="T:System.Data.OleDb.OleDbConnection" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 OLE DB プロバイダーによっては、接続の現在の状態を確認できます。 たとえば、以降、データベース サーバーが再利用を開いた場合、 <xref:System.Data.OleDb.OleDbConnection>, 、 <xref:System.Data.OleDb.OleDbConnection.State%2A> プロパティが返す引き続き `Open`です。 OLE DB プロバイダーにライブ接続では、この情報のポーリングをサポートする場合を呼び出す、 <xref:System.Data.OleDb.OleDbConnection.ResetState%2A> メソッドとの確認、 <xref:System.Data.OleDb.OleDbConnection.State%2A> プロパティは、接続が不要になったかをします。<xref:System.Data.OleDb.OleDbConnection.ResetState%2A> メソッドは、接続の現在の状態を確認する OLE DB プロバイダーの機能に依存しています。 OLE DB プロバイダーがこの機能をサポートしているかを判断するには、DBPROP\_CONNECTIONSTATUS について、プロバイダーのマニュアルを確認します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.ServerVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントが接続されているサーバーのバージョンを表す文字列を取得します。</summary>
        <value>接続されているサーバーのバージョン。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.OleDb.OleDbConnection.ServerVersion%2A> プロパティが OLE DB dbprop\_dbmsver とプロパティにマップします。 場合 <xref:System.Data.OleDb.OleDbConnection.ServerVersion%2A> はサポートされていません、基になる OLE DB プロバイダーで、空の文字列が返されます。  
  
 形式は、バージョン *\#\#. \#\#. \#\#\#*, 、ここで最初の 2 つの数字、メジャー バージョンとは、次の 2 つの数字とマイナー バージョンは、最後の 4 桁は、リリース バージョン。 プロバイダーは、このフォームで製品のバージョンを表示する必要がありますが、製品に固有のバージョンを追加することも、たとえば、"04.01.0000 Rdb 4.1"です。 文字列の形式は、 *major.minor.build*, がある場合は、メジャー、ビルドが 4 桁の数字とマイナーは正確に 2 桁の数字です。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Data.OleDb.OleDbConnection> し、一部の読み取り専用プロパティを表示します。  
  
 [!code-csharp[Classic WebData OleDbConnection.ServerVersion Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.ServerVersion Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbConnection.ServerVersion Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbConnection.ServerVersion Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbConnection.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続の現在の状態を取得します。</summary>
        <value>
          <see cref="T:System.Data.ConnectionState" /> 値のビットごとの組み合わせ。 既定値は閉じられます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の状態の変更を許可します。  
  
-   `Closed` に `Open`, を使用して、 <xref:System.Data.OleDb.OleDbConnection.Open%2A> のメソッド、 <xref:System.Data.OleDb.OleDbConnection> オブジェクトです。  
  
-   `Open` に `Closed`, 、いずれかを使用して、 <xref:System.Data.OleDb.OleDbConnection.Close%2A> メソッドまたは **Dispose** のメソッド、 <xref:System.Data.OleDb.OleDbConnection> オブジェクトです。  
  
> [!NOTE]
>  .NET Framework の以前のバージョンで呼び出して、 <xref:System.Data.OleDb.OleDbConnection.State%2A> プロパティが各呼び出しには、開いている接続を OLE DB DBPROP\_CONNECTIONSTATUS プロパティへの呼び出しが発生したため、アプリケーションのオーバーヘッドを増加します。 .NET Framework 2.0 のリリースにより、これは不要になった問題です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbConnection.System#ICloneable#Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.ICloneable.Clone" />」を参照してください。</summary>
        <returns>このインスタンスのコピーである新しい <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.OleDb.OleDbConnection> のインスタンスが <xref:System.ICloneable> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このデータ ソースのスキーマ情報を返す <see cref="T:System.Data.OleDb.OleDbConnection" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.OleDb.OleDbConnection" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データベース トランザクションを開始します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>