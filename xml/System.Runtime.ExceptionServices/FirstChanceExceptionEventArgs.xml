<Type Name="FirstChanceExceptionEventArgs" FullName="System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs">
  <TypeSignature Language="C#" Value="public class FirstChanceExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FirstChanceExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>マネージ例外最初に発生すると、共通言語ランタイムは、イベント ハンドラーの検索を開始する前に発生する通知イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスの例外ハンドラーを提供する、 <xref:System.AppDomain.FirstChanceException?displayProperty=fullName> 例外へのアクセス権を持つイベントです。  
  
   
  
## 例  
 次の例では、一連のという名前のアプリケーション ドメイン `Child_0` を通じて `Child_3`, で、 `Worker` 各アプリケーション ドメイン内のオブジェクト。 各 `Worker` オブジェクトへの参照には、 `Worker` を除き、次のアプリケーション ドメイン内のオブジェクト、 `Worker` の最後のアプリケーション ドメイン。<xref:System.AppDomain.FirstChanceException> を除くすべてのアプリケーション ドメインでイベントを処理 `Child_1`します。  
  
 アプリケーション ドメインが作成されると、既定のアプリケーション ドメインを呼び出す、 `TestException` メソッドの最初の子アプリケーション ドメイン。 各 `Worker` オブジェクトの呼び出し、 `TestException` 最後まで、次のメソッド `Worker` が処理または未処理の例外がスローされます。 現在のスレッドがすべてのアプリケーション ドメインを通過するため、および `TestException` がアプリケーション ドメインごとにスタックに追加します。  
  
 ときに最後に `Worker` オブジェクトは、例外を処理、 <xref:System.AppDomain.FirstChanceException> イベントは、最後のアプリケーション ドメインでのみ発生します。 他のアプリケーション ドメインでは、例外を処理するため、イベントは発生せずにされなくなります。  
  
 ときに最後に `Worker` オブジェクトが例外を処理していない、 <xref:System.AppDomain.FirstChanceException> をイベント ハンドラーを持つアプリケーション ドメインごとにイベントが発生します。 各イベント ハンドラーが完了したら、既定のアプリケーション ドメインが、例外をキャッチするまでをアンワインドするスタックが続行されます。  
  
> [!NOTE]
>  変更するようにイベントは近くの履歴の表示の拡大と既定のアプリケーション ドメインに近い表示する、 `e.Exception.Message` に `e.Exception` で、 `FirstChanceHandler` イベント ハンドラーです。 ことに注意してください `TestException` 2 回表示されるアプリケーション ドメインの境界を越えて呼び出される: プロキシでスタブに 1 回です。  
  
 [!code-csharp[System.AppDomain.FirstChanceException\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.firstchanceexception/cs/example.cs#1)]
 [!code-vb[System.AppDomain.FirstChanceException\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.firstchanceexception/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.AppDomain.FirstChanceException" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FirstChanceExceptionEventArgs (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.#ctor(System.Exception)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">例外がマネージ コードによってスローされただけをされが検査されます、 <see cref="E:System.AppDomain.UnhandledException" /> イベントです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs" /> クラスが指定の例外を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、アプリケーション コードではなく、共通言語ランタイムによって呼び出されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マネージ コードでスローされた例外に対応するマネージ例外オブジェクト。</summary>
        <value>新しくスローされた例外。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理するメソッド、 <xref:System.AppDomain.UnhandledException?displayProperty=fullName> イベントが例外を確認し、適切なログやその他の通知サービスを実行できます。  
  
 コード例については、「<xref:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>