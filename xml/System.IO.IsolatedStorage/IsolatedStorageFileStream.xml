<Type Name="IsolatedStorageFileStream" FullName="System.IO.IsolatedStorage.IsolatedStorageFileStream">
  <TypeSignature Language="C#" Value="public class IsolatedStorageFileStream : System.IO.FileStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IsolatedStorageFileStream extends System.IO.FileStream" />
  <TypeSignature Language="DocId" Value="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.FileStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>分離ストレージ内のファイルを公開します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use this class to read, write and create files in isolated storage.  
  
 Since this class extends <xref:System.IO.FileStream>, you can use an instance of <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> in most situations where a <xref:System.IO.FileStream> might otherwise be used, such as to construct a <xref:System.IO.StreamReader> or <xref:System.IO.StreamWriter>.  
  
 This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a **languageKeyword tag is not supported!!!!**  
\/**languageKeyword tag is not supported!!!!**  
 block. To dispose of it indirectly, use a language construct such as **languageKeyword tag is not supported!!!!**  
 \(in C\#\) or **languageKeyword tag is not supported!!!!**  
 \(in Visual Basic\). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  
  
> [!IMPORTANT]
>  Isolated storage is not available for [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] apps. Instead, use the application data classes in the **languageKeyword tag is not supported!!!!**  
>  namespaces included in the [!INCLUDE[wrt](~/includes/wrt-md.md)] API to store local data and files. For more information, see [Application data](http://go.microsoft.com/fwlink/?LinkId=229175) in the Windows Dev Center.  
  
   
  
## 例  
 The following console application demonstrates how you can use <xref:System.IO.IsolatedStorage.IsolatedStorageFile> and <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> to write data to an Isolated Storage file. The user is requested to log in. If the user is a new user, a News URL and a Sports URL are recorded as personal preferences in Isolated Storage. If the user is a returning user, the user's current preferences are displayed. The code examples used throughout this namespace are presented in the context of this sample application. You can use the [&#91;\<topic:\/\/cpgrfisolatedstorageutilitystoreadmexe\>&#93;](http://msdn.microsoft.com/ja-jp/b81202b8-d91d-4b23-9c53-4a112f74a44a) utility to list and remove the Isolated Storage files that are created with this console application.  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#1)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#1)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IsolatedStorageFileStream (string path, System.IO.FileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path">分離ストレージ内でのファイルの相対パス。</param>
        <param name="mode">
          <see cref="T:System.IO.FileMode" /> 値の 1 つ。</param>
        <summary>指定した <paramref name="mode" /> で、<paramref name="path" /> によって指定されたファイルへのアクセスを与える <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する分離ストアは、現在実行されているアセンブリの id とそれが実行されているアプリケーション ドメインによって制限されます。 このストアは開いたままの有効期間中にのみ、 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> オブジェクトです。 別の分離ストレージのスコープを指定するか、開いたままにしておくストアを許可するように \(ので、複数 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> からオブジェクトを開くことができます\) を受け取るコンス トラクターのフォームを使用して、 <xref:System.IO.IsolatedStorage.IsolatedStorageFile> オブジェクトです。  
  
 `mode` パラメーターの新しいファイルを作成するか、このオプションを使用すると、既存のものとなどを示します。  
  
> [!CAUTION]
>  特定のカルチャ設定を使用して文字のセットをコンパイルし、別のカルチャ設定で、同じ文字を取得するときに、文字は解釈されないことしがスローされる例外が発生することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="path" /> にディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりませんでした。<paramref name="mode" /> は <see cref="F:System.IO.FileMode.Open" /> に設定されます。</exception>
        <permission cref="T:System.Security.Permissions.IsolatedStorageFilePermission">for isolated storage access</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path">分離ストレージ内でのファイルの相対パス。</param>
        <param name="mode">
          <see cref="T:System.IO.FileMode" /> の値の 1 つ。</param>
        <param name="access">
          <see cref="T:System.IO.FileAccess" /> 値のビットごとの組み合わせ。</param>
        <summary>
          <paramref name="mode" /> に指定したモードで、<paramref name="path" /> で指定したファイルへの、<paramref name="access" /> に指定した種類のアクセスを提供する、<see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する分離ストアは、現在実行されているアセンブリの id とそれが実行されているアプリケーション ドメインによって制限されます。 このストアは開いたままの有効期間中にのみ、 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> オブジェクトです。 別の分離ストレージのスコープを指定するか、開いたままにしておくストアを許可するように \(ので、複数 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> からオブジェクトを開くことができます\) を受け取るコンス トラクターのフォームを使用して、 <xref:System.IO.IsolatedStorage.IsolatedStorageFile> オブジェクトです。  
  
 `mode` パラメーターは、新しいファイルを作成するかまたは使用される既存のものを示します。`access` パラメーターは、読み取り専用、読み取り\/書き込みおよび書き込み専用です。  
  
> [!CAUTION]
>  特定のカルチャ設定を使用して文字のセットをコンパイルし、別のカルチャ設定で、同じ文字を取得するときに、文字は、解釈されないことしがスローされる例外が発生することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。<paramref name="mode" /> が <see cref="F:System.IO.FileMode.Open" /> に設定されています。</exception>
        <permission cref="T:System.Security.Permissions.IsolatedStorageFilePermission">for isolated storage access</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.IsolatedStorage.IsolatedStorageFile isf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, class System.IO.IsolatedStorage.IsolatedStorageFile isf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="isf" Type="System.IO.IsolatedStorage.IsolatedStorageFile" />
      </Parameters>
      <Docs>
        <param name="path">分離ストレージ内でのファイルの相対パス。</param>
        <param name="mode">
          <see cref="T:System.IO.FileMode" /> の値の 1 つ。</param>
        <param name="isf">
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> を開くために使用する <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />。</param>
        <summary>指定の <paramref name="mode" /> 内で、<paramref name="isf" /> で指定した <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> のコンテキスト内の、<paramref name="path" /> で指定したファイルへのアクセスを提供する <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter indicates whether a new file should be created, an existing one used, and so on.  
  
> [!CAUTION]
>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.  
  
   
  
## 例  
 The following code example demonstrates the use of this constructor. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#11)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#11)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。<paramref name="mode" /> は <see cref="F:System.IO.FileMode.Open" /> に設定されます。</exception>
        <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
          <paramref name="isf" /> にクォータがありません。</exception>
        <permission cref="T:System.Security.Permissions.IsolatedStorageFilePermission">for isolated storage access</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path">分離ストレージ内でのファイルの相対パス。</param>
        <param name="mode">
          <see cref="T:System.IO.FileMode" /> の値の 1 つ。</param>
        <param name="access">
          <see cref="T:System.IO.FileAccess" /> 値のビットごとの組み合わせ。</param>
        <param name="share">
          <see cref="T:System.IO.FileShare" /> 値のビットごとの組み合わせ。</param>
        <summary>
          <paramref name="mode" /> で指定したモード、<paramref name="share" /> で指定した共有モードを使用して、<paramref name="path" /> で指定したファイルへの、<paramref name="access" /> で指定した種類のアクセスを提供する <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する分離ストアは、現在実行されているアセンブリの id とそれが実行されているアプリケーション ドメインによって制限されます。 このストアは開いたままの有効期間中にのみ、 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> オブジェクトです。 別の分離ストレージのスコープを指定するか、開いたままにしておくストアを許可するように \(ので、複数 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> からオブジェクトを開くことができます\) を受け取るコンス トラクターのフォームを使用して、 <xref:System.IO.IsolatedStorage.IsolatedStorageFile> オブジェクトです。  
  
> [!CAUTION]
>  特定のカルチャ設定を使用して文字のセットをコンパイルし、別のカルチャ設定で、同じ文字を取得するときに、文字は解釈されないことしがスローされる例外が発生することができます。  
  
   
  
## 例  
 次のコード例では、このコンス トラクターの使用を示します。 この例の完全なコンテキストを参照してください、 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> の概要です。  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#15)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#15)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。<paramref name="mode" /> が <see cref="F:System.IO.FileMode.Open" /> に設定されています。</exception>
        <permission cref="T:System.Security.Permissions.IsolatedStorageFilePermission">for isolated storage access</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.IsolatedStorage.IsolatedStorageFile isf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, class System.IO.IsolatedStorage.IsolatedStorageFile isf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="isf" Type="System.IO.IsolatedStorage.IsolatedStorageFile" />
      </Parameters>
      <Docs>
        <param name="path">分離ストレージ内でのファイルの相対パス。</param>
        <param name="mode">
          <see cref="T:System.IO.FileMode" /> の値の 1 つ。</param>
        <param name="access">
          <see cref="T:System.IO.FileAccess" /> 値のビットごとの組み合わせ。</param>
        <param name="isf">
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> を開くために使用する <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />。</param>
        <summary>指定されたファイル <paramref name="access" /> により、また <paramref name="isf" /> によって指定された <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> のコンテキストの中で、指定された <paramref name="mode" /> の中で <paramref name="path" /> によって指定されるファイルへのアクセスを提供して、<see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter indicates whether a new file should be created or an existing one used. The **parameterReference tag is not supported!!!!**  
 parameter includes read\-only, read\/write, and write\-only.  
  
> [!CAUTION]
>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.  
  
   
  
## 例  
 The following code example demonstrates the use of this constructor. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#10)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#10)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">分離ストアは閉じています。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。<paramref name="mode" /> が <see cref="F:System.IO.FileMode.Open" /> に設定されています。</exception>
        <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
          <paramref name="isf" /> にクォータがありません。</exception>
        <permission cref="T:System.Security.Permissions.IsolatedStorageFilePermission">for isolated storage access</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="path">分離ストレージ内でのファイルの相対パス。</param>
        <param name="mode">
          <see cref="T:System.IO.FileMode" /> の値の 1 つ。</param>
        <param name="access">
          <see cref="T:System.IO.FileAccess" /> 値のビットごとの組み合わせ。</param>
        <param name="share">
          <see cref="T:System.IO.FileShare" /> 値のビットごとの組み合わせ。</param>
        <param name="bufferSize">
          <see cref="T:System.IO.FileStream" /> のバッファー サイズ。</param>
        <summary>指定された <paramref name="mode" /> の中で、指定されたファイル <paramref name="access" />、<paramref name="share" /> で指定されたファイル共有モードを使用し、<paramref name="buffersize" /> を指定し、<paramref name="path" /> で指定されたファイルへのアクセスを付与して、<see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する分離ストアは、現在実行されているアセンブリの id とが実行されているアプリケーション ドメインによって制限されます。 このストアは開いたままの有効期間中にのみ、 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> オブジェクトです。 別の分離ストレージのスコープを指定するか、開いたままにしておくストアを許可するように \(ので、複数 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> からオブジェクトを開くことができます\) を受け取るコンス トラクターのフォームを使用して、 <xref:System.IO.IsolatedStorage.IsolatedStorageFile> オブジェクトです。  
  
 `mode` パラメーターは、新しいファイルを作成するかまたは使用される既存のものを示します。`access` パラメーターは、読み取り専用、読み取り\/書き込みおよび書き込み専用です。  
  
> [!CAUTION]
>  特定のカルチャ設定を使用して文字のセットをコンパイルし、別のカルチャ設定で、同じ文字を取得するときに、文字は、解釈されないことしがスローされる例外が発生することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。<paramref name="mode" /> が <see cref="F:System.IO.FileMode.Open" /> に設定されています。</exception>
        <permission cref="T:System.Security.Permissions.IsolatedStorageFilePermission">for isolated storage access</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.IsolatedStorage.IsolatedStorageFile isf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, class System.IO.IsolatedStorage.IsolatedStorageFile isf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="isf" Type="System.IO.IsolatedStorage.IsolatedStorageFile" />
      </Parameters>
      <Docs>
        <param name="path">分離ストレージ内でのファイルの相対パス。</param>
        <param name="mode">
          <see cref="T:System.IO.FileMode" /> の値の 1 つ。</param>
        <param name="access">
          <see cref="T:System.IO.FileAccess" /> 値のビットごとの組み合わせ。</param>
        <param name="share">
          <see cref="T:System.IO.FileShare" /> 値のビットごとの組み合わせ。</param>
        <param name="isf">
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> を開くために使用する <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />。</param>
        <summary>指定した <paramref name="mode" /> で指定したファイル <paramref name="access" /> を使用して、<paramref name="path" /> で指定したファイルへのアクセスを提供する <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> クラスの新しいインスタンスを初期化します。<paramref name="share" /> で指定したファイル共有モードおよび <paramref name="isf" /> で指定した <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> のコンテキストを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter indicates whether a new file should be created or an existing one used. The **parameterReference tag is not supported!!!!**  
 parameter includes read\-only, read\/write, and write\-only.  
  
> [!CAUTION]
>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.  
  
   
  
## 例  
 The following code example demonstrates the use of this constructor. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#11)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#11)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。<paramref name="mode" /> は <see cref="F:System.IO.FileMode.Open" /> に設定されます。</exception>
        <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
          <paramref name="isf" /> にクォータがありません。</exception>
        <permission cref="T:System.Security.Permissions.IsolatedStorageFilePermission">for isolated storage access</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.IsolatedStorage.IsolatedStorageFile isf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access, valuetype System.IO.FileShare share, int32 bufferSize, class System.IO.IsolatedStorage.IsolatedStorageFile isf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.IsolatedStorage.IsolatedStorageFile)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="share" Type="System.IO.FileShare" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="isf" Type="System.IO.IsolatedStorage.IsolatedStorageFile" />
      </Parameters>
      <Docs>
        <param name="path">分離ストレージ内でのファイルの相対パス。</param>
        <param name="mode">
          <see cref="T:System.IO.FileMode" /> の値の 1 つ。</param>
        <param name="access">
          <see cref="T:System.IO.FileAccess" /> 値のビットごとの組み合わせ。</param>
        <param name="share">
          <see cref="T:System.IO.FileShare" /> 値のビットごとの組み合わせ。</param>
        <param name="bufferSize">
          <see cref="T:System.IO.FileStream" /> のバッファー サイズ。</param>
        <param name="isf">
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> を開くために使用する <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />。</param>
        <summary>
          <paramref name="mode" /> で指定したモード、<paramref name="share" /> で指定したファイル共有モード、<paramref name="buffersize" /> で指定したバッファー サイズ、<paramref name="isf" /> で指定した <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> のコンテキストを使用して、<paramref name="path" /> で指定したファイルへの、<paramref name="access" /> で指定した種類のアクセスを提供する <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `mode` パラメーターは、新しいファイルを作成するかまたは使用される既存のものを示します。`access` パラメーターは、読み取り専用、読み取り\/書き込みおよび書き込み専用です。  
  
> [!CAUTION]
>  特定のカルチャ設定を使用して文字のセットをコンパイルし、別のカルチャ設定で、同じ文字を取得するときに、文字は、解釈されないことしがスローされる例外が発生することができます。  
  
   
  
## 例  
 次のコード例では、このコンス トラクターの使用を示します。 この例の完全なコンテキストを参照してください、 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> の概要です。  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#12)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#12)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> の形式が正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。<paramref name="mode" /> は <see cref="F:System.IO.FileMode.Open" /> に設定されます。</exception>
        <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
          <paramref name="isf" /> にクォータがありません。</exception>
        <permission cref="T:System.Security.Permissions.IsolatedStorageFilePermission">for isolated storage access</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int numBytes, AsyncCallback userCallback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 numBytes, class System.AsyncCallback userCallback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numBytes" Type="System.Int32" />
        <Parameter Name="userCallback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">データを読み取るバッファー。</param>
        <param name="offset">読み取りの開始位置を示す <c>buffer</c> 内のバイト オフセット。</param>
        <param name="numBytes">読み取る最大バイト数。</param>
        <param name="userCallback">非同期の読み取り操作が完了したときに呼び出すメソッド。 このパラメーターは省略できます。</param>
        <param name="stateObject">非同期の読み取りの状態。</param>
        <summary>非同期の読み取りを開始します。</summary>
        <returns>非同期の読み取りを表す <see cref="T:System.IAsyncResult" /> オブジェクト。まだ保留状態の場合もあります。 読み取ったバイト数を確認するには、<see cref="T:System.IAsyncResult" /> をこのストリームの <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)" /> メソッドに渡す必要があります。 この操作は、<see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> を呼び出した同じコードを使用するか、または <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> に渡されたコールバックで行うことができます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 I\/O 操作の完了時ではなく、非同期の読み取りや書き込みを発行したときに、ストリームの現在位置が更新されます。  
  
 呼び出す必要があります [BeginRead メソッド \(Byte\<xref:System.IO.Stream.EndRead%2A> この [BeginRead メソッド \(Byte\<xref:System.IAsyncResult> 読み取られたバイト数を確認します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">非同期の読み取りがファイルの終わりを超えて試行されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int numBytes, AsyncCallback userCallback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 numBytes, class System.AsyncCallback userCallback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numBytes" Type="System.Int32" />
        <Parameter Name="userCallback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">データを書き込むバッファー。</param>
        <param name="offset">書き込みの開始位置を示す <c>buffer</c> 内のバイト オフセット。</param>
        <param name="numBytes">書き込む最大バイト数。</param>
        <param name="userCallback">非同期の書き込み操作が完了したときに呼び出すメソッド。 このパラメーターは省略できます。</param>
        <param name="stateObject">非同期の書き込みの状態。</param>
        <summary>非同期の書き込みを開始します。</summary>
        <returns>非同期の書き込みを表す <see cref="T:System.IAsyncResult" />。まだ保留状態の場合もあります。 書き込みが完了したことを確認してから、リソースを適切に解放するには、このストリームの <see cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)" /> メソッドに <see cref="T:System.IAsyncResult" /> を渡す必要があります。 この操作は、<see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> を呼び出した同じコードを使用するか、または <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> に渡されたコールバックで行うことができます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 [BeginWrite メソッド \(Byte\<xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> オブジェクトが書き込み可能なストリームの末尾に書き込み、ストリームが拡張されます。  
  
 I\/O 操作の完了時ではなく、非同期の読み取りや書き込みを発行したときに、ストリームの現在位置が更新されます。  
  
 呼び出す必要があります [BeginWrite メソッド \(Byte\<xref:System.IO.Stream.EndWrite%2A> で、 [BeginWrite メソッド \(Byte\<xref:System.IAsyncResult> 書き込まれたバイト数を確認するこのメソッドを表すオブジェクト。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">非同期の書き込みがファイルの終わりを超えて試行されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイルを読み取ることができるかどうかを示すブール値を取得します。</summary>
        <value>
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトを読み取ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use this property to determine whether the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object can be read.  
  
   
  
## 例  
 The following code example demonstrates how you could use the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead%2A> property, as a check to see whether a stream can be read before calling the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read%2A> or <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead%2A> methods. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#11)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#11)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>シーク操作をサポートしているかどうかを示す ブール値を取得します。</summary>
        <value>
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトがシーク操作をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use this property to determine whether the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object supports seek operations.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイルに書き込むことができるかどうかを示す ブール値を取得します。</summary>
        <value>
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトに書き込むことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use this property to determine whether the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object can be written.  
  
   
  
## 例  
 The following code example demonstrates how you could use the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite%2A> property, as a check to see whether a stream can be read before calling the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Write%2A> or <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite%2A> methods. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#13)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#13)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by the public <xref:System.IDisposable.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.IDisposable.Dispose%2A> invokes the protected <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose%2A> method with the **parameterReference tag is not supported!!!!**  
 parameter set to true. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose%2A> with **parameterReference tag is not supported!!!!**  
 set to false.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is true, this method releases all resources held by any managed objects that this <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> references. This method invokes the <xref:System.IDisposable.Dispose%2A> method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IDisposable.Dispose" /> can be called multiple times by other objects. When overriding <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see cref="M:System.IDisposable.Dispose" />. For more information about how to implement <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see cref="M:System.IDisposable.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">保留中の非同期の要求。</param>
        <summary>非同期読み込み要求の保留状態を終了します。</summary>
        <returns>ストリームから読み取ったバイト数 \(0 ～要求したバイト数の間の数値\)。 ストリームは、末尾に達した場合にだけ 0 を返します。 それ以外の場合、ストリームは少なくとも 1 バイトが読み取られるまでブロックします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead%2A> must be called exactly once on every <xref:System.IAsyncResult> object from <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead%2A>, and calling <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead%2A> is the only way to know how many bytes were read from the <xref:System.IO.Stream>. <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead%2A> will block until the I\/O operation has completed.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">保留中の非同期 I\/O 終了要求。</param>
        <summary>非同期の書き込みを終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite%2A>.  
  
 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite%2A> will block until the I\/O operation has completed.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このストリームのバッファーをクリアして、バッファー内のデータがファイルに書き込まれるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Because a buffer can be used for either reading or writing, but not both simultaneously, <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush%2A> performs two functions. First, any data previously written to the buffer is copied to the file and the buffer is cleared. Second, if <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek%2A> is **languageKeyword tag is not supported!!!!**  
 and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer. The buffer is then cleared.  
  
 Use the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush%28System.Boolean%29> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush (bool flushToDisk);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush(bool flushToDisk) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flushToDisk" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="flushToDisk">すべての中間ファイル バッファーをフラッシュする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>このストリームのバッファーをクリアして、バッファー内のデータがファイルに書き込まれるようにし、すべての中間ファイル バッファーもクリアします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バッファリングされたすべてのデータの中間ファイル バッファーのことを確認する場合は、このオーバー ロードの記述を使用してディスクにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public override IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use SafeFileHandle - once available")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトによってカプセル化されるファイルのファイル ハンドルを取得します。<see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトではこのプロパティへのアクセスは許可されておらず、<see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> がスローされます。</summary>
        <value>現在の <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトによってカプセル化されるファイルのファイル ハンドル。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 詳細については、「<xref:System.IO.FileStream.Handle%2A>」を参照してください。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle%2A> プロパティです。  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#4)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#4)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
          <see cref="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle" /> プロパティには、常にこの例外が生成されます。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="public override bool IsAsync { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberSignature Language="DocId" Value="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.IsAsync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトが非同期的に開かれたか、同期的に開かれたかを示すブール値を取得します。</summary>
        <value>
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトが非同期アクセスをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 非同期 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> オブジェクトを作成できないとは異なり、 <xref:System.IO.FileStream>です。 ただし、 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite%2A>, 、<xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead%2A>, 、<xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite%2A>, 、および <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead%2A> メソッドは、いくつかのパフォーマンスの低下との同期のインスタンスでサポートされています。  
  
   
  
## 例  
 次のコード例では、使用する方法を示しています、 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.IsAsync%2A> ことを確認するプロパティ、 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> は同期的です。 この例の完全なコンテキストを参照してください、 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> の概要です。  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#7)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#7)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.FileStream" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトの長さを取得します。</summary>
        <value>バイト単位の <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトの長さ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Length%2A> represents the number of bytes currently in the file. It is not affected by isolated storage quota.  
  
   
  
## 例  
 The following code example demonstrates the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Length%2A> property.  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#14)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#14)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public override void Lock (long position, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Lock(int64 position, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Lock(System.Int64,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="position">ロックする範囲の開始位置。 このパラメーターの値は、0 \(ゼロ\) 以上にする必要があります。</param>
        <param name="length">ロックするバイト数。</param>
        <summary>ストリームに対する他のプロセスの読み取りまたは書き込みを禁止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ファイル ストリームの範囲をロックすると、ファイル ストリームの範囲にロックのプロセスの排他アクセスのスレッドが与えられます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="position" /> または <paramref name="length" /> が負の値です。</exception>
        <exception cref="T:System.ObjectDisposedException">ファイルは閉じられています。</exception>
        <exception cref="T:System.IO.IOException">別のプロセスがファイルの一部をロックしているため、プロセスはこのファイルにアクセスできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトの現在位置を取得または設定します。</summary>
        <value>
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトの現在位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Setting this property works when the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek%2A> property is **languageKeyword tag is not supported!!!!**  
.  
  
   
  
## 例  
 The following code example uses the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Position%2A> property to write data to a file.  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#14)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#14)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">位置は、負の値に設定することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">読み取るバッファー。</param>
        <param name="offset">書き込みの開始位置を示すバッファー内のオフセット。</param>
        <param name="count">読み取る最大バイト数。</param>
        <summary>現在のバッファー内の <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトから配列にバイトをコピーします。</summary>
        <returns>
          <paramref name="buffer" /> に読み取る合計バイト数。 要求しただけのバイト数を読み取ることができなかった場合、この値は要求したバイト数より小さくなります。ストリームの末尾に到達した場合は 0 になることがあります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter can be an instance of the [Read メソッド \(Byte\<xref:System.Buffer> class, or an array of one of the following types: [Read メソッド \(Byte\<xref:System.Byte>, [Read メソッド \(Byte\<xref:System.SByte>, [Read メソッド \(Byte\<xref:System.Char>, [Read メソッド \(Byte\<xref:System.Int16>, [Read メソッド \(Byte\<xref:System.Int32>, [Read メソッド \(Byte\<xref:System.Int64>, [Read メソッド \(Byte\<xref:System.UInt16>, [Read メソッド \(Byte\<xref:System.UInt32>, [Read メソッド \(Byte\<xref:System.UInt64>, [Read メソッド \(Byte\<xref:System.Single>, or [Read メソッド \(Byte\<xref:System.Double>. The **parameterReference tag is not supported!!!!**  
 parameter gives the offset of the byte in buffer at which to begin writing \(index in the buffer\), and the **parameterReference tag is not supported!!!!**  
 parameter gives the maximum number of bytes that will be read from this stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached. If the read operation is successful, the current position of the stream is advanced by the number of bytes read. If an exception occurs, the current position of the stream is unchanged.  
  
 The [Read メソッド \(Byte\<xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read%2A> method treats the **parameterReference tag is not supported!!!!**  
 parameter as a block of bytes, regardless of its actual type. Likewise, the **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters are always specified in bytes. For **parameterReference tag is not supported!!!!**  
 parameters other than byte arrays, this means that an element index must be multiplied by the element size in bytes to form a correct value for **parameterReference tag is not supported!!!!**  
 or **parameterReference tag is not supported!!!!**  
.  
  
 The [Read メソッド \(Byte\<xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read%2A> method will return zero only if the end of the stream is reached. In all other cases, [Read メソッド \(Byte\<xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read%2A> always reads at least one byte from the stream before returning. If no data is available from the [Read メソッド \(Byte\<xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object upon a call to [Read メソッド \(Byte\<xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read%2A>, the method will block until at least one byte of data can be returned.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public override int ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>分離ストレージで <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトから 1 バイトを読み取ります。</summary>
        <returns>分離ストレージ ファイルから読み取られた 8 ビット符号なし整数値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example demonstrates how the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte%2A> method can be used to read data from an <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#14)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#14)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SafeFileHandle">
      <MemberSignature Language="C#" Value="public override Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle" />
      <MemberSignature Language="DocId" Value="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeFileHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトによってカプセル化されるファイルのオペレーティング システム ファイル ハンドルを表す <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> オブジェクトを取得します。</summary>
        <value>現在の <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトによってカプセル化されるファイルのオペレーティング システム ファイル ハンドルを表す <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle%2A> プロパティがサポートされておらず、常に生成、 <xref:System.IO.IsolatedStorage.IsolatedStorageException> 例外です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
          <see cref="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.SafeFileHandle" /> プロパティには、常にこの例外が生成されます。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the ability to access unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトの新しい位置。</param>
        <param name="origin">
          <see cref="T:System.IO.SeekOrigin" /> 値の 1 つ。</param>
        <summary>この <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトの現在位置を特定の値に設定します。</summary>
        <returns>
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトの新しい位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Some <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> objects support positioning beyond the length of the stream, others will throw an exception in this case.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="origin" /> は <see cref="T:System.IO.SeekOrigin" /> 値のいずれかである必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">新しい <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトの長さ。</param>
        <summary>
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトの長さを指定した <paramref name="value" /> に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the specified **parameterReference tag is not supported!!!!**  
 is less than the current length of the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object, the stream is truncated. If the specified **parameterReference tag is not supported!!!!**  
 is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new length are undefined. In order to use this method, an <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object must support both writing and seeking.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> は負の値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public override void Unlock (long position, long length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Unlock(int64 position, int64 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Unlock(System.Int64,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="position">ロックを解除する範囲の開始位置。 このパラメーターの値は、0 \(ゼロ\) 以上にする必要があります。</param>
        <param name="length">ロックを解除するバイト数。</param>
        <summary>以前にロックされたファイルの全部または一部への他のプロセスによるアクセスを許可します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="position" /> または <paramref name="length" /> が負の値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">書き込むバッファー。</param>
        <param name="offset">開始位置を示すバッファー内のバイト オフセット。</param>
        <param name="count">書き込む最大バイト数。</param>
        <summary>バイト配列から読み取ったデータを使用して、<see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトにバイトのブロックを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter gives the offset of the byte in the **parameterReference tag is not supported!!!!**  
 at which to begin reading, and the **parameterReference tag is not supported!!!!**  
 parameter gives the number of bytes that will be written to this [Write メソッド \(Byte\<xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object. If the write operation is successful, the current position of the [Write メソッド \(Byte\<xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object is advanced by the number of bytes written. If an exception occurs, the current position of the [Write メソッド \(Byte\<xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object is unchanged.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトのクォータを超える書き込みが試行されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.IsolatedStorage</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">分離ストレージ ファイルに書き込むバイト値。</param>
        <summary>
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトに 1 バイトを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following code example demonstrates how the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte%2A> method can be used to read data from an <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> object. For the complete context of this example, see the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream> overview.  
  
 [!code-cpp[System.IO.IsolatedStorage.IsolatedStorage\#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CPP/source.cpp#14)]
 [!code-csharp[System.IO.IsolatedStorage.IsolatedStorage\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/CS/source.cs#14)]
 [!code-vb[System.IO.IsolatedStorage.IsolatedStorage\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.IsolatedStorage.IsolatedStorage/VB/source.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> オブジェクトのクォータを超える書き込みが試行されています。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このストリームのバッファーをクリアして、バッファー内のデータがファイルに書き込まれるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> クラスの新しいインスタンスを初期化します。<see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> を開く唯一の方法は、そのコンストラクターの 1 つを使用することです。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>