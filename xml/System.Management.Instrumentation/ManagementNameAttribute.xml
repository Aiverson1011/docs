<Type Name="ManagementNameAttribute" FullName="System.Management.Instrumentation.ManagementNameAttribute">
  <TypeSignature Language="C#" Value="public sealed class ManagementNameAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementNameAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementNameAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Parameter, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ManagementName 属性を使用して、WMI クラスを通じて公開される名前をオーバーライドします。  
  
 注: WMI .NET ライブラリは最終的な状態と見なされます。これらのライブラリに影響を与えるセキュリティ以外に関連する問題については、さらなる開発、機能拡張、または更新は利用できません。[MI API](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) は新しい開発すべてに使用する必要があります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 It might be inconvenient to rename method parameters to present WMI clients with more user\-friendly names. This attribute lets you assign user\-friendly WMI names while retaining your existing internal naming conventions.  
  
   
  
## 例  
 In the following example, the integer parameter remains i internally, but will be exposed as "The Value" to WMI clients.  
  
```  
[ManagementTask]  
static public int PrintValue([ManagementName("The Value")]int i)  
{  
   Console.WriteLine("The Value is {0:x}", i);  
   return i;  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementNameAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementNameAttribute.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">オブジェクトのユーザー フレンドリ名。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Management.ManagementNameAttribute" /> の値を指定するクラス、 <see cref="P:System.Management.ManagementNameAttribute.Name" /> クラスのプロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementNameAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはオブジェクトのわかりやすい名前を設定します。 オブジェクトは、メソッド パラメーターまたはプロパティでは、属性を ManagementProbe、ManagementKey、または ManagementConfiguration にマークします。</summary>
        <value>A <see cref="T:System.String" /> オブジェクトのユーザー フレンドリ名を示す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>