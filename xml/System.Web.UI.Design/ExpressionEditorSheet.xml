<Type Name="ExpressionEditorSheet" FullName="System.Web.UI.Design.ExpressionEditorSheet">
  <TypeSignature Language="C#" Value="public abstract class ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditorSheet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditorSheet" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>カスタム式のデザイン時にエディター シートを表します。 このクラスは継承する必要があります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 カスタム式エディター シートにより、開発者はデザイン時にカスタム式のプロパティを設定できます。 式の文字列を使用してコントロール プロパティの値を設定することができます。式の文字列には、式エディターで式ビルダーによって実行時に、デザイン時に評価されます。  
  
 参照すると、 <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> コントロール プロパティをデザイン時プロパティ グリッドで、ビジュアル デザイナーは、コントロールのプロパティの値を指定する式を設定するダイアログ ボックスを表示します。 式のプレフィックスのリストに基づく式の型を選択できます。 ビジュアル デザイナーを使用して、関連付けられている、一覧から式のプレフィックスを選択すると <xref:System.Web.UI.Design.ExpressionEditor> と <xref:System.Web.UI.Design.ExpressionEditorSheet> その式の構文に基づくオブジェクトを評価し、式の文字列を変換します。 ビジュアル デザイナーでは、カスタム式の文字列に結合する 1 つまたは複数の文字列の入力を求める式エディター シートのプロパティを使用します。  
  
 通常、デザイン時に、新しい式の型を指定するに固有の式のプレフィックスを定義し、提供するカスタム、 <xref:System.Web.Compilation.ExpressionBuilder> と <xref:System.Web.UI.Design.ExpressionEditor> 実装します。 カスタムを指定する必要に応じて、 <xref:System.Web.UI.Design.ExpressionEditorSheet> 条件式に使用されるプロパティを定義して実装します。 式ビルダーと式エディターには、式のプレフィックスを関連付ける、適用、 <xref:System.Web.Compilation.ExpressionEditorAttribute> 属性と <xref:System.Web.Compilation.ExpressionPrefixAttribute> 属性をカスタム <xref:System.Web.Configuration.ExpressionBuilder> クラスし、式ビルダーでの式のプレフィックスを構成、 `expressionBuilders` Web 構成ファイル内の要素。  
  
 既定の実装、 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> メソッドは、式に 1 つの入力文字列を使用する基本的なエディター シートを返します。 派生したカスタム式エディター、 <xref:System.Web.UI.Design.ExpressionEditor> オーバーライドできる、 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> カスタム エディター シートの実装を返すメソッド。 通常、カスタム エディター シートには、式の文字列の構築に使用される複数のプロパティが含まれています。<xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> メソッドは、現在の式のプロパティに基づく結果として得られる式の文字列を返します。  
  
 たとえば、 <xref:System.Web.UI.Design.ResourceExpressionEditor> クラスから派生する、 <xref:System.Web.UI.Design.ExpressionEditor> クラスし、評価を行い、デザイン時にコントロール プロパティを持つリソース文字列の参照を関連付けることの実装を提供します。<xref:System.Web.Compilation.ResourceExpressionBuilder> クラスは、式のプレフィックスに関連付けられた `Resources` と <xref:System.Web.UI.Design.ResourceExpressionEditor> 実装します。<xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> メソッドが返される、 <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, 、リソース参照式を形成する個々 のプロパティを定義します。  
  
 継承する場合、 <xref:System.Web.UI.Design.ExpressionEditorSheet> クラス、メンバーをオーバーライドする必要があります。  
  
-   <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> カスタム エディター シートの実装を返すメソッド。  
  
-   <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> 式エディター シート実装用のカスタムの初期化のアクションを実装するコンス トラクターです。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Derive a custom expression editor sheet from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, if you are defining a new expression type for control property values and you want to build the expression string based on multiple expression property values. A derived class implementation should contain the following:  
  
-   A public property for each distinct value in the expression string that can be set at design time.  
  
-   An implementation of the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method that forms the custom expression string from the editor sheet property values.  
  
-   Optionally, a constructor implementation that sets the initial values of the editor sheet properties.  
  
 The associated custom expression editor class creates an instance of the derived editor sheet in the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method, initializes that instance with the current expression string set for the control property, and returns the instance to the visual designer. The visual designer allows you to set the expression sheet properties, and then calls the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method to form the expression string from the input expression sheet property values.</para>
    </block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
    <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
    <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditorSheet (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">その他のデザイン時サービスを取得するために使用、デザイナー ホストによって提供されるサービス プロバイダーの実装です。</param>
        <summary>
          <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.Design.ExpressionEditorSheet> が抽象クラスのインスタンスを作成することはできません、 <xref:System.Web.UI.Design.ExpressionEditorSheet> を使用して直接、 <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> コンス トラクターです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When deriving from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, override the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor to implement custom initialization actions for your expression editor sheet implementation.  
  
 For example, a custom expression editor sheet class that implements additional expression properties can define the default values for the expression properties in the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor. A custom expression editor sheet class can define additional public constructor overloads that use input parameter values to set the initial values for the expression properties.</para>
        </block>
        <altmember cref="Overload:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、式エディターのシートのプロパティ値によって形成される式の文字列を返します。</summary>
        <returns>現在のプロパティ値のカスタム式文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 カスタム式エディターのシートには、デザイン時の設定が式の文字列に組み合わされた複数の式プロパティが含まれています。 式の文字列を使用してコントロール プロパティの値を設定することができます。式文字列は、式ビルダーによって、実行時に評価されます。  
  
 <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> メソッドは、現在の式のプロパティから組み込まれている式の文字列を返します。 ビジュアル デザイナーがシートのプロパティ式を設定することができを呼び出して、 <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> メソッドを式の文字列を取得およびコントロールのプロパティ値を設定します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Derive a custom expression editor sheet from the <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> class, if you are defining a new expression type for control property values and you want to build the expression string based on multiple expression property values. A derived class implementation should contain the following:  
  
-   A public property for each distinct value in the expression string that can be set at design time.  
  
-   An implementation of the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method that forms the custom expression string from the editor sheet property values.  
  
-   Optionally, a constructor implementation that sets the initial values of the editor sheet properties.  
  
 The associated custom expression editor class creates an instance of the derived editor sheet in the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method, initializes that instance with the current expression string set for the control property, and then returns the instance to the visual designer. The visual designer allows you to set the expression sheet properties, and then calls the <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> method to form the expression string from the input expression sheet property values.</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>式の文字列が有効かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" />, 、式の文字列が無効である場合それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この基本実装を常に `true`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>式エディター シートで使用されるサービス プロバイダーの実装を取得します。</summary>
        <value>
          <see cref="T:System.IServiceProvider" />, 、通常、その他のデザイン時サービスの取得に使用できるデザイン ホストで提供されています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> を設定するコンス トラクター、 <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> カスタム式エディター シートの実装です。  
  
 <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> デザイナー ホストによって提供されるサービスにアクセスするプロパティを使用できます。 たとえばを呼び出して、 <xref:System.IServiceProvider.GetService%2A> メソッドを <xref:System.Web.UI.Design.IWebApplication> プロジェクト項目にアクセスする、ドキュメント、またはビジュアル デザイナーによって提供される構成ファイルの詳細情報へのインターフェイスです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>