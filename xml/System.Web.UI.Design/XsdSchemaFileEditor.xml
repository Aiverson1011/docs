<Type Name="XsdSchemaFileEditor" FullName="System.Web.UI.Design.XsdSchemaFileEditor">
  <TypeSignature Language="C#" Value="public class XsdSchemaFileEditor : System.Web.UI.Design.UrlEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XsdSchemaFileEditor extends System.Web.UI.Design.UrlEditor" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.XsdSchemaFileEditor" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Design.UrlEditor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>XML スキーマ定義ファイルを選択するためには、デザイン時のユーザー インターフェイスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.Design.XsdSchemaFileEditor> を選択して、XML スキーマ定義ファイル \(.xsd\) の URL を編集し、URL をコントロール プロパティに割り当てるオブジェクトがデザイン時に使用します。  
  
 使用して、 <xref:System.ComponentModel.EditorAttribute> 属性に関連付けるには、 <xref:System.Web.UI.Design.XsdSchemaFileEditor> プロパティを使用します。 デザイナーのホストを呼び出して、デザイン サーフェイスに関連付けられたプロパティを編集すると、ときに、 <xref:System.Web.UI.Design.UrlEditor.EditValue%2A> メソッドです。<xref:System.Web.UI.Design.UrlEditor.EditValue%2A> メソッドの使用方法、 <xref:System.Web.UI.Design.UrlBuilder.BuildUrl%2A> メソッドでは、さらに、URL を選択するためのユーザー インターフェイスを表示し、ユーザーが選択されている URL を返します。<xref:System.Web.UI.Design.UrlEditor.GetEditStyle%2A> メソッドは、ユーザー インターフェイスの表示スタイルを示します。  
  
 クラスを派生、 <xref:System.Web.UI.Design.XsdSchemaFileEditor> を XML スキーマの URL プロパティのカスタム エディターを定義します。 たとえば、派生クラスをオーバーライドできます、 <xref:System.Web.UI.Design.UrlEditor.EditValue%2A> メソッド、および、呼び出し、 <xref:System.Web.UI.Design.UrlBuilder.BuildUrl%2A> メソッドをカスタム <xref:System.Web.UI.Design.XsdSchemaFileEditor.Filter%2A> または <xref:System.Web.UI.Design.XsdSchemaFileEditor.Caption%2A> 値。  
  
   
  
## 例  
 次のコード例では、インスタンスに関連付ける、 <xref:System.Web.UI.Design.XsdSchemaFileEditor> カスタム コントロール内に含まれるプロパティを持つクラス。 デザイン サーフェイスにコントロールのプロパティを編集する際に、 <xref:System.Web.UI.Design.XsdSchemaFileEditor> クラスには、選択し、プロパティ値の XML スキーマ定義ファイルの名前を編集するには、ユーザー インターフェイスが用意されています。  
  
 [!code-csharp[WebDesigner.XsdSchemaFileEditor\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebDesigner.XsdSchemaFileEditor/cs/simplecontrolwithfilename.cs#1)]
 [!code-vb[WebDesigner.XsdSchemaFileEditor\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebDesigner.XsdSchemaFileEditor/vb/simplecontrolwithfilename.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Design.UrlEditor" />
    <altmember cref="T:System.ComponentModel.EditorAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdSchemaFileEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.XsdSchemaFileEditor.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.Design.XsdSchemaFileEditor" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Design.UrlEditor.Filter" />
        <altmember cref="Overload:System.Web.UI.Design.UrlBuilder.BuildUrl" />
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="protected override string Caption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.XsdSchemaFileEditor.Caption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>\[選択\] ダイアログ ボックスを表示するキャプションを取得します。</summary>
        <value>\[選択\] ダイアログ ボックスを表示するキャプション テキストです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.Design.XsdSchemaFileEditor.Caption%2A> プロパティを使って、 <xref:System.Web.UI.Design.UrlEditor.EditValue%2A> メソッドを呼び出すときに、 <xref:System.Web.UI.Design.UrlBuilder.BuildUrl%2A> メソッドで、デザイン時にユーザーに URL の選択\] ダイアログ ボックスが表示されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.Design.UrlBuilder.BuildUrl" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="protected override string Filter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.XsdSchemaFileEditor.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>URL フィルター オプションを取得、エディターの URL の選択\] ダイアログ ボックスに表示される項目をフィルター処理するために使用します。</summary>
        <value>1 つまたは複数の URL を表す文字列は、ダイアログ ボックスのオプションをフィルター処理します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.Design.XsdSchemaFileEditor.Filter%2A> プロパティを使って、 <xref:System.Web.UI.Design.UrlEditor.EditValue%2A> メソッドを呼び出すときに、 <xref:System.Web.UI.Design.UrlBuilder.BuildUrl%2A> メソッドで、デザイン時にユーザーに URL の選択\] ダイアログ ボックスが表示されます。  
  
 <xref:System.Web.UI.Design.XsdSchemaFileEditor.Filter%2A> プロパティの既定値は、ダイアログ ボックスの 2 つの URL のフィルターを示します。 1 つは XML スキーマ定義ファイル \(\*.xsd\)、すべてのファイル用に別の \(\*。 \*\)。  
  
 カスタム フィルター文字列を指定するには、派生クラスを <xref:System.Web.UI.Design.XsdSchemaFileEditor> クラスをその後、オーバーライド、 <xref:System.Web.UI.Design.XsdSchemaFileEditor.Filter%2A> カスタム フィルター文字列を返すプロパティ。  
  
 フィルター文字列には、1 つまたは複数のフィルター オプションが含まれています。 各フィルター オプションには、縦線で後に、フィルターの説明が含まれています \(&#124;\) とフィルター パターンです。 異なるフィルター オプションの文字列は、縦棒で区切ります。  
  
 2 つのフィルター オプションを含むフィルター文字列の例を次に示します。  
  
 "`XML Schema Files (*.xsd)|*.xsd|All Files (*.*)|*.*`".  
  
 フィルター パターンをセミコロン \(;\) で区切ってフィルター オプションで複数のフィルター パターンを指定できます。 最初のフィルター オプションが 2 つのフィルター パターンが指定されたフィルター文字列の例を次に示します。  
  
 "`Custom Schema Files (*.xs1; *.xs2)|*.xs1;*.xs2|All Files (*.*)|*.*`".  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Design.UrlEditor.Filter" />
        <altmember cref="Overload:System.Web.UI.Design.UrlBuilder.BuildUrl" />
      </Docs>
    </Member>
  </Members>
</Type>