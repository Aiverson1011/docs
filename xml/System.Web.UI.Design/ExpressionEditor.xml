<Type Name="ExpressionEditor" FullName="System.Web.UI.Design.ExpressionEditor">
  <TypeSignature Language="C#" Value="public abstract class ExpressionEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditor" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>デザイン時と式エディター\] ダイアログ ボックスで使用するためのビジュアル デ ザイン ホストに式エディター シートを提供するコントロール プロパティに関連付けられている式の評価のプロパティとメソッドのセットを定義します。 このクラスは抽象クラスです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ビジュアル デザイナー ホストなど [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], を使用して、 <xref:System.Web.UI.Design.ExpressionEditor> クラスのカスタム式エディターのシートをユーザーを表示して、デザイン時の表示の選択した式を評価します。  
  
 参照すると、 <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> コントロール プロパティをデザイン時プロパティ グリッドで、ビジュアル デザイナーでコントロール プロパティの式を設定するダイアログ ボックスが表示されます。 式のプレフィックスのリストに基づく式の型を選択できます。 ビジュアル デザイナーを使用して、関連付けられている、一覧から式のプレフィックスを選択すると <xref:System.Web.UI.Design.ExpressionEditor> と <xref:System.Web.UI.Design.ExpressionEditorSheet> オブジェクトを設定するには、評価、および、その式の構文に基づく式の文字列に変換します。 ビジュアル デザイナーでは、関連付けられたコントロール プロパティの式を設定し、評価された式の結果を使用して、コントロールがデザイン サーフェイスにレンダリング プロパティの値を割り当てます。  
  
 静的な <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> メソッドは、特定の式のプレフィックスまたは式に関連付けられている式エディターを取得します。<xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> プロパティを <xref:System.Web.UI.Design.ExpressionEditor> オブジェクトが構成されている式のプリフィックスを返します。<xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> メソッドは、入力式の文字列を評価します。<xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> メソッドが返される、 <xref:System.Web.UI.Design.ExpressionEditorSheet> 式\] ダイアログ ボックスでカスタム式のプロパティの使用を要求する実装。  
  
 通常、デザイン時に新しい式の型をサポートするために独自の式のプレフィックスを定義し、ユーザー設定を提供 <xref:System.Web.Compilation.ExpressionBuilder> と <xref:System.Web.UI.Design.ExpressionEditor> 実装します。 カスタムを指定する必要に応じて、 <xref:System.Web.UI.Design.ExpressionEditorSheet> 式\] ダイアログ ボックスで式の形成に使用されるプロパティを定義して実装します。  
  
 式のプレフィックスは、カスタム式の型を識別し、式ビルダーと式エディターを使用して式を関連付けます。 関連付けられているインスタンスを作成する式のプレフィックスが使用されるページでは、ユーザー定義の式が解析されるとき、 <xref:System.Web.Compilation.ExpressionBuilder> と <xref:System.Web.UI.Design.ExpressionEditor> クラスです。 式ビルダーと式エディターを使用して式のプレフィックスを関連付けるには、適用、 <xref:System.Web.Compilation.ExpressionEditorAttribute> と <xref:System.Web.Compilation.ExpressionPrefixAttribute> 属性をカスタム <xref:System.Web.Compilation.ExpressionBuilder> クラスし、式ビルダーでの式のプレフィックスを構成、 `expressionBuilders` Web 構成ファイル内の要素。 プレフィックスは必須ではありませんが、強くお勧めします。  
  
   
  
## 例  
 派生する次のコード例には、 <xref:System.Web.UI.Design.ExpressionEditor> カスタム式エディターを定義するクラス。  
  
 [!code-csharp[CustomExpressionEditor\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/customexpressioneditor/cs/CustomAppSettingsExpression.cs#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>The following steps are required in deriving a custom <see cref="T:System.Web.UI.Design.ExpressionEditor" /> class:  
  
-   Override the <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> method to evaluate the custom expression type at design time.  
  
-   Optionally, override the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method to return a custom class that defines properties that are combined to form the custom expression.  
  
-   Apply the <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> attribute on the <see cref="T:System.Web.Compilation.ExpressionBuilder" /> class declaration to associate the custom expression builder with the derived expression editor class.  
  
 For example, the <see cref="T:System.Web.UI.Design.ResourceExpressionEditor" /> class derives from the <see cref="T:System.Web.UI.Design.ExpressionEditor" /> class and provides an implementation for evaluating and associating a resource string reference with a control property at design time. The <see cref="T:System.Web.Compilation.ResourceExpressionBuilder" /> class is associated with the expression prefix <see langword="Resources" /> and the <see cref="T:System.Web.UI.Design.ResourceExpressionEditor" /> implementation. The <see cref="M:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method returns a <see cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />, which defines the individual properties that form a resource reference expression.</para>
    </block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
    <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
    <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
    <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.Design.ExpressionEditor" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Because the <xref:System.Web.UI.Design.ExpressionEditor> class is abstract, you cannot create an instance of the  <xref:System.Web.UI.Design.ExpressionEditor> class directly using the <xref:System.Web.UI.Design.ExpressionEditor.%23ctor%2A> constructor.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When deriving from the <see cref="T:System.Web.UI.Design.ExpressionEditor" /> class, override the <see cref="M:System.Web.UI.Design.ExpressionEditor.#ctor" /> constructor to implement custom initialization actions for your expression editor implementation.</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public abstract object EvaluateExpression (string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(string expression, object parseTimeData, class System.Type propertyType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="parseTimeData" Type="System.Object" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">評価する式の文字列です。 式では、式のプレフィックスは含まれません。</param>
        <param name="parseTimeData">評価するための追加の解析情報を格納するオブジェクト <c>expression</c>します。 これは通常、式ビルダーによって提供されます。</param>
        <param name="propertyType">コントロール プロパティの型 <c>expression</c> がバインドされています。</param>
        <param name="serviceProvider">その他のデザイン時サービスを取得するために使用、デザイナー ホストによって提供されるサービス プロバイダーの実装です。</param>
        <summary>式の文字列を評価し、コントロールのプロパティのデザイン時の値を提供します。</summary>
        <returns>式の評価が成功した場合、式の評価結果の文字列によって参照されるオブジェクトそれ以外の場合、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ビジュアル デザイナー ホストを使用して、 <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> 式を評価し、関連するコントロール プロパティのデザイン時の値を指定します。  
  
 ビジュアル デザイナーを使用して、 <xref:System.Web.Compilation.ExpressionBuilder.ParseExpression%2A?displayProperty=fullName> をデザイン時とし、呼び出し式の文字列を解析、 <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> 解析された式のデータを持つメソッドです。 ビジュアル デザイナーでは、評価された式の結果を使用して、コントロールがデザイン サーフェイスにレンダリング プロパティの値を割り当てます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Classes deriving from the <see cref="T:System.Web.UI.Design.ExpressionEditor" /> class must override the <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> method to evaluate the custom expression type at design time.  
  
 At a minimum, an <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> implementation must use the following steps:  
  
1.  Evaluate the expression string and determine the object that is referenced by the expression.  
  
2.  Return <see langword="null" />, if the expression string cannot be evaluated.  
  
3.  Use the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> method on <paramref name="propertyType" /> to determine whether the referenced object can be assigned directly to the control property type, and then, depending on the result, complete one of the following actions:  
  
    -   If the referenced object can be assigned directly to the control property, return the referenced object for the expression.  
  
    -   If the referenced object is a simple type, such as a string, return the referenced object.  
  
    -   Otherwise, determine whether the referenced object can be assigned to or converted to the property type.  
  
4.  Use the <see cref="Overload:System.ComponentModel.TypeConverter.CanConvertFrom" /> method on the <see cref="T:System.ComponentModel.TypeConverter" /> object for <paramref name="propertyType" /> to determine whether the referenced object can be converted to the control property type, and then, depending on the result, complete one of the following actions:  
  
    -   If the object can be converted to the control property type, return the converted object using the <see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" /> method.  
  
    -   If the referenced object cannot be assigned or converted to <paramref name="propertyType" />, return the referenced object.  
  
 Optionally, the <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> implementation can use the <paramref name="parseTimeData" /> object that is supplied by the <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> implementation to optimize or help in the evaluation of the input expression string.</para>
        </block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionPrefix">
      <MemberSignature Language="C#" Value="public string ExpressionPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>式エディターの実装でサポートされている式の文字列を識別する式のプレフィックスを取得します。</summary>
        <value>派生したクラスでサポートされている式のプレフィックスを表す文字列、 <see cref="T:System.Web.UI.Design.ExpressionEditor" />。 そうしないと、空の文字列 \(""\) 式エディターに関連付けられている式プレフィックスがない場合、します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 式のプレフィックスは、カスタム式の型を識別し、式ビルダーと式エディターを使用して式を関連付けます。 関連付けられているインスタンスを作成する式のプレフィックスが使用されるページでは、ユーザー定義の式が解析されるとき、 <xref:System.Web.Compilation.ExpressionBuilder> と <xref:System.Web.UI.Design.ExpressionEditor> クラスです。 式ビルダーと式エディターを使用して式のプレフィックスを関連付けるには、適用、 <xref:System.Web.Compilation.ExpressionEditorAttribute> と <xref:System.Web.Compilation.ExpressionPrefixAttribute> 属性をカスタム <xref:System.Web.Compilation.ExpressionBuilder> クラスし、式ビルダーでの式のプレフィックスを構成、 `expressionBuilders` Web 構成ファイル内の要素。  
  
 通常、派生クラスは無効、 <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> プロパティです。 基本 <xref:System.Web.UI.Design.ExpressionEditor> クラスのセット、 <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> 値に基づいて、 <xref:System.Web.Compilation.ExpressionPrefixAttribute> 関連付けられた属性 <xref:System.Web.Compilation.ExpressionBuilder> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (string expressionPrefix, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(string expressionPrefix, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrefix" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionPrefix">エディターに関連付けられている式を検索するために使用する式のプレフィックス。</param>
        <param name="serviceProvider">その他のデザイン時サービスを取得するために使用、デザイナー ホストによって提供されるサービス プロバイダーの実装です。</param>
        <summary>返します。、 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 指定された式のプレフィックスに関連付けられている実装します。</summary>
        <returns>
          <see cref="T:System.Web.UI.Design.ExpressionEditor" /> に関連付けられた実装 <paramref name="expressionPrefix" />。 そうしないと、 <see langword="null" />, 場合は、 <paramref name="expressionPrefix" /> が定義されていないか、関連付けられていない、 <see cref="T:System.Web.UI.Design.ExpressionEditor" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 静的なを使用して <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> を検索するメソッドのオーバー ロード、 <xref:System.Web.UI.Design.ExpressionEditor> 式ビルダーの型、または特定の式のプレフィックスに関連付けられているオブジェクト。  
  
 各カスタム式の型の式のプレフィックスは、関連付けられている式ビルダーと式エディターを識別します。 関連付けられているインスタンスを作成する式のプレフィックスが使用されるページでは、ユーザー定義の式が解析されるとき、 <xref:System.Web.Compilation.ExpressionBuilder> と <xref:System.Web.UI.Design.ExpressionEditor> クラスです。  
  
 式ビルダーと式エディターを使用して式のプレフィックスを関連付けるには、適用、 <xref:System.Web.Compilation.ExpressionEditorAttribute> と <xref:System.Web.Compilation.ExpressionPrefixAttribute> 属性をカスタム <xref:System.Web.Compilation.ExpressionBuilder> クラスし、式ビルダーでの式のプレフィックスを構成、 `expressionBuilders` Web 構成ファイル内の要素。  
  
 式のプレフィックスに関連付けられている式エディターを検索する、 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> メソッドは、使用可能な列挙 <xref:System.Web.Compilation.ExpressionBuilder> 一致するプリフィックスの実装です。<xref:System.Web.Compilation.ExpressionBuilder> の実装を構成する、 `expressionBuilders` Web 構成ファイルのセクションです。 使用可能な場合 <xref:System.Web.Compilation.ExpressionBuilder> 実装で式のプレフィックスを定義、 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> メソッドで指定されている型を返す、 <xref:System.Web.Compilation.ExpressionEditorAttribute> の属性、 <xref:System.Web.Compilation.ExpressionBuilder> メタデータ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceProvider" /> は <see langword="null" /> です。</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (Type expressionBuilderType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(class System.Type expressionBuilderType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionBuilderType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionBuilderType">関連付けられている式エディターを検索するため、派生した式ビルダー クラスの型。</param>
        <param name="serviceProvider">その他のデザイン時サービスを取得するために使用、デザイナー ホストによって提供されるサービス プロバイダーの実装です。</param>
        <summary>返します。、 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 指定された式ビルダーの型に関連付けられている実装します。</summary>
        <returns>
          <see cref="T:System.Web.UI.Design.ExpressionEditor" /> に関連付けられた実装 <paramref name="expressionBuilderType" />。 そうしないと、 <see langword="null" />, 場合は、 <paramref name="expressionBuilderType" /> が見つからないかがに関連しない <see cref="T:System.Web.UI.Design.ExpressionEditor" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 静的なを使用して <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> を見つけるためのオーバー ロード、 <xref:System.Web.UI.Design.ExpressionEditor> 式ビルダーの型、または特定の式のプレフィックスに関連付けられているオブジェクト。  
  
 各カスタム式の型の式のプレフィックスは、関連付けられている式ビルダーと式エディターを識別します。 関連付けられているインスタンスを作成する式のプレフィックスが使用されるページでは、ユーザー定義の式が解析されるとき、 <xref:System.Web.Compilation.ExpressionBuilder> と <xref:System.Web.UI.Design.ExpressionEditor> クラスです。  
  
 式ビルダーと式エディターを使用して式のプレフィックスを関連付けるには、適用、 <xref:System.Web.Compilation.ExpressionEditorAttribute> と <xref:System.Web.Compilation.ExpressionPrefixAttribute> 属性をカスタム <xref:System.Web.Compilation.ExpressionBuilder> クラスし、式ビルダーでの式のプレフィックスを構成、 `expressionBuilders` Web 構成ファイル内の要素。  
  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> メソッドは、使用可能な列挙 <xref:System.Web.Compilation.ExpressionBuilder> を検索する実装 `expressionBuilderType`します。<xref:System.Web.Compilation.ExpressionBuilder> の実装を構成する、 `expressionBuilders` Web 構成ファイルのセクションです。 場合 `expressionBuilderType` 使用可能なのセット内にある <xref:System.Web.Compilation.ExpressionBuilder> 実装では、 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> メソッドで指定されている型を返す、 <xref:System.Web.Compilation.ExpressionEditorAttribute> の属性、 <xref:System.Web.Compilation.ExpressionBuilder> メタデータ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expressionBuilderType" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="serviceProvider" /> は <see langword="null" /> です。</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditorSheet">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet (string expression, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet(string expression, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditorSheet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">式の文字列が式エディター シートの初期化に使用される、コントロール プロパティを設定します。</param>
        <param name="serviceProvider">その他のデザイン時サービスを取得するために使用、デザイナー ホストによって提供されるサービス プロバイダーの実装です。</param>
        <summary>現在の式エディターに関連付けられている式エディター シートを返します。</summary>
        <returns>
          <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> カスタム式のプロパティを定義します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> メソッドが返される、 <xref:System.Web.UI.Design.ExpressionEditorSheet> を組み合わせて、カスタム式を作成する文字列が定義されて実装されます。 ビジュアル デザイナーでは、カスタム式を組み合わせて 1 つまたは複数の文字列の入力を求める式エディター シートを使用します。 基本クラスのメソッドでは、条件式を 1 つの入力文字列を使用して、既定の式のエディター シートを返します。 式エディター シートでは、式のプロパティ グリッドを定義します。 そのため、プロパティ式エディターを公開するには、ダイアログ ボックスでその式に対して定義されているプロパティになります。  
  
 派生するクラス、 <xref:System.Web.UI.Design.ExpressionEditor> クラスでオーバーライド オプションで、 <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> カスタム式エディターのシートを提供するメソッドです。 カスタム式エディターのシートには、式の文字列形式を組み合わせて、複数のプロパティのデザイン時に入力を許可できます。  
  
 たとえば、 <xref:System.Web.UI.Design.ResourceExpressionEditor> クラスから派生する、 <xref:System.Web.UI.Design.ExpressionEditor> クラスし、評価を行い、デザイン時にコントロール プロパティを持つリソース文字列の参照を関連付けることの実装を提供します。<xref:System.Web.Compilation.ResourceExpressionBuilder> クラスは、式のプレフィックスに関連付けられた `Resources` と <xref:System.Web.UI.Design.ResourceExpressionEditor> 実装します。<xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A?displayProperty=fullName> メソッドが返される、 <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, 、リソース参照式を形成する個々 のプロパティを定義します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Typically, to supply a new expression type at design time, you define a unique expression prefix and provide custom <see cref="T:System.Web.Compilation.ExpressionBuilder" /> and <see cref="T:System.Web.UI.Design.ExpressionEditor" /> implementations. Optionally, you can provide a custom <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> implementation that defines properties that are used to form the expression. Even though the configuration file defines the prefix, you should also apply an <see cref="T:System.Web.Compilation.ExpressionPrefixAttribute" /> object and an <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> object.  
  
 Override the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method to return an expression editor sheet that defines design-time input for multiple properties in a custom expression. When you select a control property and the expression editor type, the visual designer calls the <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> method, and then supplies the current expression string that is set for the control property. Use <paramref name="expression" /> to set the initial values for the expression properties. Use <paramref name="serviceProvider" /> to initialize a custom expression sheet constructor and to access services that are provided by the designer host. For example, call the <see cref="M:System.IServiceProvider.GetService(System.Type)" /> method with the <see cref="T:System.Web.UI.Design.IWebApplication" /> type to access project items, documents, or configuration file details that are provided through the visual designer.</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExpressionEditor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返します。、 <see cref="T:System.Web.UI.Design.ExpressionEditor" /> 式ビルダー、式のプレフィックスに関連付けられている実装します。</summary>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </MemberGroup>
  </Members>
</Type>