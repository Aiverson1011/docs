<Type Name="XmlSchemaSet" FullName="System.Xml.Schema.XmlSchemaSet">
  <TypeSignature Language="C#" Value="public class XmlSchemaSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaSet" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>XML スキーマ定義言語 \(XSD: XML Schema Definition Language\) スキーマのキャッシュを格納します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  -   場所や不明または信頼できないソースからスキーマを使用しないでください。 これは、コードのセキュリティが低下します。  
> -   XML スキーマ \(インライン スキーマを含む\) がサービス拒否攻撃; に対して本質的に脆弱であります。信頼されていないシナリオでに同意しません。  
> -   スキーマ検証エラー メッセージと例外は、コンテンツ モデルやスキーマ ファイルへの URI のパスに関する機密情報を公開できます。 信頼されていない呼び出し元にこの情報を公開しないように注意します。  
> -   追加のセキュリティに関する考慮事項については、「セキュリティの考慮事項」セクションで説明します。  
  
 <xref:System.Xml.Schema.XmlSchemaSet> キャッシュまたはライブラリの XML スキーマ定義言語 \(XSD\) スキーマを格納することができます。<xref:System.Xml.Schema.XmlSchemaSet> は、ファイルまたは URL のスキーマにアクセスするのではなく、スキーマをメモリにキャッシュして、パフォーマンスを向上させます。 各スキーマは名前空間 URI で識別され、スキーマ セットに追加されたされた位置を指定します。 使用する、 <xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=fullName> 割り当てるプロパティを <xref:System.Xml.Schema.XmlSchemaSet> オブジェクトの XML リーダーがデータ検証に使用する必要があります。  
  
## セキュリティの考慮事項  
  
-   不明または信頼できないソースからスキーマを使用しません。 これは、コードのセキュリティが低下します。 外部の名前空間または場所で参照されている含めるには、インポート、およびスキーマの再定義要素が基準にして解決インクルードまたはインポートするスキーマのベース URI。 たとえば、ベース URI を含むまたはスキーマをインポートするは、空または `null`, 、外部の場所は、現在のディレクトリを基準に解決します。<xref:System.Xml.XmlUrlResolver> クラスは、外部スキーマを解決するのには既定で使用します。 インクルード、インポートの解像度を無効にして、スキーマの要素を再定義、設定、 <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=fullName> プロパティを `null`します。  
  
-   <xref:System.Xml.Schema.XmlSchemaSet> クラスは、 <xref:System.Text.RegularExpressions.Regex?displayProperty=fullName> クラスを解析および XML スキーマの正規表現に一致します。 XML スキーマの正規表現によるパターン ファセットの検証は、CPU 使用量の増加を伴う場合があり、高可用性のシナリオでは避ける必要があります。  
  
-   使用した結果として発生した例外、 <xref:System.Xml.Schema.XmlSchemaSet> クラスなど、 <xref:System.Xml.Schema.XmlSchemaException> クラスは、信頼されていないシナリオで公開してはなりません機密情報を含めることができます。 たとえば、 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> のプロパティ、 <xref:System.Xml.Schema.XmlSchemaException> 例外が発生したスキーマ ファイルへの URI のパスを返します。<xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> 信頼されていないシナリオでプロパティを公開する必要があります。 例外は、この機密情報は、信頼されていないシナリオでは公開されませんように正しく処理する必要があります。  
  
   
  
## 例  
 <xref:System.Xml.Schema.XmlSchemaSet> に格納されているスキーマを使用して XML ファイルを検証する例を次に示します。 XML ファイル内の名前空間 `urn:bookstore-schema` は、検証に使用する <xref:System.Xml.Schema.XmlSchemaSet> 内のスキーマを特定します。  
  
 [!code-cpp[XmlReader\_Validate\_SchemaSet\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader\_Validate\_SchemaSet\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader\_Validate\_SchemaSet\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
## 入力  
 このサンプルは、次の 2 つの入力ファイルを使用します。  
  
 **booksSchemaFail.xml:**  
  
 [!code-xml[XmlReader\_Validate\_SchemaSet\#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 **books.xsd:**  
  
 [!code-xml[XmlReader\_Validate\_SchemaSet\#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
## 出力  
 検証エラー : 名前空間 'urn:bookstore\-schema' 内の要素 'book' に、名前空間 'urn:bookstore\-schema' 内で無効な子要素 'author' があります。 名前空間 'urn:bookstore\-schema' の 'title' が期待されています。  
  
 検証エラー : 名前空間 'urn:bookstore\-schema' 内の要素 'author' に、名前空間 'urn:bookstore\-schema' 内で無効な子要素 'name' があります。 名前空間 'urn:bookstore\-schema' の 'first\-name' が期待されています。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet (System.Xml.XmlNameTable nameTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nameTable">使用する <see cref="T:System.Xml.XmlNameTable" /> オブジェクト。</param>
        <summary>指定した <see cref="T:System.Xml.Schema.XmlSchemaSet" /> を使用して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.XmlNameTable" /> パラメーターとして渡されたオブジェクト <see langword="null" />します。</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">
          <see cref="T:System.Xml.Schema.XmlSchema" /> に追加するオブジェクト、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</param>
        <summary>追加、指定された <see cref="T:System.Xml.Schema.XmlSchema" /> に、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトのかどうかは、スキーマが無効です。 スキーマが有効でない場合、 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されると、 <see langword="null" /> が返され、該当する検証イベントが発生します。 それ以外の場合、 <see cref="T:System.Xml.Schema.XmlSchemaException" /> がスローされます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Xml.Schema.XmlSchema> オブジェクトは既に、 <xref:System.Xml.Schema.XmlSchemaSet>, 、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドは何です。  
  
 このメソッドの機能のと同じですが、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">スキーマが正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> パラメーターとして渡されたオブジェクト <see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</param>
        <summary>追加のすべての XML スキーマ定義言語 \(XSD\) スキーマで、指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スキーマに追加する前に、 <xref:System.Xml.Schema.XmlSchemaSet>, 、前処理が正常があります。 前処理は、次の基本的なタスクを実行します。  
  
1.  W3C XML スキーマの規則に従って構造上の有効性がチェック、スキーマが、スキーマは完全に検証されません。  
  
2.  内部および外部のスキーマ コンポーネントへの参照は解決されます。 正常に取得されるインポートまたはインクルード対象のスキーマが追加も、 <xref:System.Xml.Schema.XmlSchemaSet>です。 インポートされたスキーマは、個別として追加 <xref:System.Xml.Schema.XmlSchema> オブジェクト、および含まれているスキーマなどの一部となる <xref:System.Xml.Schema.XmlSchema>します。  
  
 場合、 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> のプロパティ、 <xref:System.Xml.Schema.XmlSchemaSet> を追加する、 `true`, 、すべてのスキーマ、 <xref:System.Xml.Schema.XmlSchemaSet> を追加するに追加、 <xref:System.Xml.Schema.XmlSchemaSet>です。 場合、 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> のプロパティ、 <xref:System.Xml.Schema.XmlSchemaSet> を追加する、 `false`, 、追加される前に追加された各スキーマを前処理します。 場合は、新しく追加したスキーマのいずれかの <xref:System.Xml.Schema.XmlSchemaSet> 、前処理が必要に失敗したスキーマは追加されません。 代わりに、 <xref:System.Xml.Schema.XmlSchemaException> がスローされます。 その結果、次の 2 つのコード例は同じではありません。  
  
```vb  
' First example  
schemaSet.Add(schemaSet1)  
  
' Second example  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    schemaSet.Add(schema)  
  
Next  
```  
  
```csharp  
// First example  
schemaSet.Add(schemaSet1);  
  
// Second example  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    schemaSet.Add(schema);  
}  
```  
  
 前の 2 つのコード例は同じではありません。 無効なスキーマが存在する場合、最初の例では `schemaSet1` とその <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> にプロパティが設定されている `false`, にスキーマが追加されない `schemaSet`します。 2 番目の例では、多くのスキーマを追加してに `schemaSet` 前に、無効なスキーマが検出され、例外がスローされます。  
  
   
  
## 例  
 次のコード例へのスキーマの追加を示しています、 <xref:System.Xml.Schema.XmlSchemaSet>, 、追加し、 <xref:System.Xml.Schema.XmlSchemaSet> を新しい <xref:System.Xml.Schema.XmlSchemaSet> を使用して、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドです。  
  
```vb  
Dim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  
schemaSet2.Add(schemaSet1)  
```  
  
```csharp  
XmlSchemaSet schemaSet1 = new XmlSchemaSet();  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchemaSet schemaSet2 = new XmlSchemaSet();  
schemaSet2.Add(schemaSet1);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">内のスキーマ、 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> が無効です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> パラメーターとして渡されたオブジェクト <see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, string schemaUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">スキーマ <c>targetNamespace</c> プロパティ、または <see langword="null" /> を使用する、 <c>targetNamespace</c> スキーマで指定します。</param>
        <param name="schemaUri">読み込むスキーマを指定する URL。</param>
        <summary>指定した URL に XML スキーマ定義言語 \(XSD\) スキーマを追加、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトのかどうかは、スキーマが無効です。 スキーマが有効でない場合、 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されると、 <see langword="null" /> が返され、該当する検証イベントが発生します。 それ以外の場合、 <see cref="T:System.Xml.Schema.XmlSchemaException" /> がスローされます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スキーマに追加する前に、 <xref:System.Xml.Schema.XmlSchemaSet>, 、前処理が正常があります。 前処理は、次の基本的なタスクを実行します。  
  
1.  W3C XML スキーマの規則に従って構造上の有効性がチェック、スキーマが、スキーマは完全に検証されません。  
  
2.  内部および外部のスキーマ コンポーネントへの参照は解決されます。 正常に取得されるインポートまたはインクルード対象のスキーマが追加も、 <xref:System.Xml.Schema.XmlSchemaSet>です。 インポートされたスキーマは、個別として追加 <xref:System.Xml.Schema.XmlSchema> オブジェクト、および含まれているスキーマなどの一部となる <xref:System.Xml.Schema.XmlSchema>します。  
  
 次に、重要な注意事項を使用する場合、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドです。  
  
-   スキーマの追加、 <xref:System.Xml.Schema.XmlSchemaSet> では、同じ名前空間とスキーマの場所の URL をターゲットに既に含まれているスキーマとして、 <xref:System.Xml.Schema.XmlSchemaSet> は元のスキーマ オブジェクトを返します。  
  
-   新しいスキーマが正常に追加された場合に、 <xref:System.Xml.Schema.XmlSchemaSet>, 、 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> のプロパティ、 <xref:System.Xml.Schema.XmlSchemaSet> に設定されている `false`します。  
  
-   XML スキーマ内でインクルードまたはインポートの要素は解決する場合、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドが呼び出されます。 エラーを解決するのを含めるし、スキーマ検証の警告でインポート要素いない場合、 <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> が指定されている、 <xref:System.Xml.Schema.XmlSchemaSet> オブジェクトは、この警告は報告されません。  
  
-   既に存在するスキーマと同じ対象名前空間を持つスキーマ、 <xref:System.Xml.Schema.XmlSchemaSet> に追加、 <xref:System.Xml.Schema.XmlSchemaSet>, 、両方のスキーマを追加します。  
  
    > [!NOTE]
    >  この動作は、廃止された <xref:System.Xml.Schema.XmlSchemaCollection> オブジェクトです。  
  
-   <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> のメソッド、 <xref:System.Xml.Schema.XmlSchemaSet> をパラメーターとして指定するターゲットの名前空間を必要とするのではなく、スキーマで定義されているターゲットの名前空間を使用する機能を持つ場合、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドが呼び出されます。 指定する `null` で、 `targetNamespace` のパラメーター、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドに指示、 <xref:System.Xml.Schema.XmlSchemaSet> 次のコード例に示すように、スキーマで定義されているターゲットの名前空間を使用します。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "books.xsd")  
  
Dim schema As XmlSchema  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
    schema.Write(Console.Out)  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "books.xsd");  
  
foreach(XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 上記のコード例で `null` として指定された、 `targetNamespace` パラメーターを <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドです。 結果として、 `targetNamespace` 定義、books.xml ファイルを使用します。 この場合、呼び出しの結果、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドは http:\/\/www.contoso.com\/books として指定した場合と同じになる、 `targetNamespace` パラメーター。  
  
-   W3C XML スキーマでは、ターゲット名前空間が定義されているスキーマに含まれるターゲット名前空間を持たないスキーマを使用します。 この場合は、定義されているターゲット名前空間を持たないスキーマは、インクルードするスキーマのターゲット名前空間に強制変換されます。 インクルードされるスキーマは、定義されているそのターゲット名前空間に存在していたように扱われます。 ターゲット名前空間を持たないスキーマを追加してを同様に、 <xref:System.Xml.Schema.XmlSchemaSet> で指定されたターゲット名前空間に資格情報を持つと、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドを次の例に示すようにします。  
  
```  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="A" type="xs:string" />  
</xs:schema>  
```  
  
 上記のスキーマに追加された場合、 <xref:System.Xml.Schema.XmlSchemaSet> \(として次のコードを参照\) のターゲット名前空間 http:\/\/www.contoso.com\/new\/targetnamespace、扱われますがのターゲットの名前空間がスキーマで宣言されている場合と `http://www.contoso.com/new/targetnamespace`です。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    Console.WriteLine(schema.TargetNamespace)     
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd");  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    Console.WriteLine(schema.TargetNamespace);  
}  
```  
  
   
  
## 例  
 次のコード例に http:\/\/www.contoso.com\/books のターゲット名前空間を持つ http:\/\/www.contoso.com\/books.xsd スキーマを追加、 <xref:System.Xml.Schema.XmlSchemaSet>です。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
```  
  
 この例は、`books.xsd` ファイルを入力として使用します。  
  
 [!code-xml[XmlSchemaSetOverall Example\#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">スキーマが正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">パラメーターとして渡す URL は <see langword="null" /> または <see cref="F:System.String.Empty" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, class System.Xml.XmlReader schemaDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">スキーマ <c>targetNamespace</c> プロパティ、または <see langword="null" /> を使用する、 <c>targetNamespace</c> スキーマで指定します。</param>
        <param name="schemaDocument">
          <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
        <summary>含まれている XML スキーマ定義言語 \(XSD\) スキーマを追加、 <see cref="T:System.Xml.XmlReader" /> に、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトのかどうかは、スキーマが無効です。 スキーマが有効でない場合、 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されると、 <see langword="null" /> が返され、該当する検証イベントが発生します。 それ以外の場合、 <see cref="T:System.Xml.Schema.XmlSchemaException" /> がスローされます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スキーマに追加する前に、 <xref:System.Xml.Schema.XmlSchemaSet>, 、前処理が正常があります。 前処理は、次の基本的なタスクを実行します。  
  
1.  W3C XML スキーマの規則に従って構造上の有効性がチェック、スキーマが、スキーマは完全に検証されません。  
  
2.  内部および外部のスキーマ コンポーネントへの参照は解決されます。 正常に取得されるインポートまたはインクルード対象のスキーマが追加も、 <xref:System.Xml.Schema.XmlSchemaSet>です。 インポートされたスキーマは、個別として追加 <xref:System.Xml.Schema.XmlSchema> オブジェクト、および含まれているスキーマなどの一部となる <xref:System.Xml.Schema.XmlSchema>します。  
  
 次に、重要な注意事項を使用する場合、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドです。  
  
-   スキーマに含まれるスキーマによってインポートまたはインクルードを正常に取得、 <xref:System.Xml.XmlReader> にも追加されて、 <xref:System.Xml.Schema.XmlSchemaSet>です。  
  
-   場合、 <xref:System.Xml.XmlReader> ルート要素に配置されていない、 <xref:System.Xml.Schema.XmlSchemaException> 、現在のアイテムが要素でない限りがスローされます。 現在の項目がある場合、 `xs:schema` 要素にスキーマ ドキュメントが読み込ま、 <xref:System.Xml.Schema.XmlSchemaSet>。 そうしないと、、 <xref:System.Xml.Schema.XmlSchemaException> スキーマが無効であるためにスローされます。  
  
-   場合、 <xref:System.Xml.XmlReader> が配置されている XML ノードのシーケンス、シーケンス内の最初のノードのみを追加します。  
  
-   スキーマが作成された場合、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> メソッドの呼び出し、値の <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> W3C XML スキーマ ドキュメントのインライン スキーマの処理が適用されないため、プロパティは無視されます。  
  
-   <xref:System.Xml.XmlResolver> のプロパティ、 <xref:System.Xml.XmlReader> で名前空間またはスキーマの場所への参照を含める要素およびインポートを解決するのには使用されません。 代わりに、 <xref:System.Xml.XmlResolver> のプロパティ、 <xref:System.Xml.Schema.XmlSchemaSet> を使用します。  
  
-   <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> のメソッド、 <xref:System.Xml.Schema.XmlSchemaSet> をパラメーターとして指定するターゲットの名前空間を必要とするのではなく、スキーマで定義されているターゲットの名前空間を使用する機能を持つ場合、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドが呼び出されます。 指定する `null` または <xref:System.String.Empty?displayProperty=fullName> に、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドに指示、 <xref:System.Xml.Schema.XmlSchemaSet> スキーマで定義されているターゲットの名前空間を使用します。 この動作の例は、次を参照してください。、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドです。  
  
 このメソッドの他の機能のと同じですが、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドです。  
  
   
  
## 例  
 次のコード例に含まれる books.xsd スキーマの追加、 <xref:System.Xml.XmlTextReader> に http:\/\/www.contoso.com\/books のターゲット名前空間を持つ、 <xref:System.Xml.Schema.XmlSchemaSet>です。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", New XmlTextReader("books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", new XmlTextReader("books.xsd");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">スキーマが正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.XmlReader" /> パラメーターとして渡されたオブジェクト <see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="CompilationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCompilationSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> の <see cref="T:System.Xml.Schema.XmlSchemaSet" /> を取得または設定します。</summary>
        <value>
          <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> の <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 既定値は、 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> インスタンス、 <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> プロパティに設定 <see langword="true" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.Schema.XmlSchemaCompilationSettings> クラス用の一意のパーティクル属性 \(UPA\) 検証オプションの指定、 <xref:System.Xml.Schema.XmlSchemaSet>です。 UPA 検証チェックを有効にする方法の詳細については、次を参照してください。、 <xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A> プロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public void Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Compile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>追加する XML スキーマ定義言語 \(XSD\) スキーマのコンパイル、 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 1 つの論理スキーマにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、検証が必要なときに自動的に呼び出されます。 および <xref:System.Xml.Schema.XmlSchemaSet> 以前コンパイルされていない — たとえばときに、、 <xref:System.Xml.Schema.XmlSchemaSet> を作成する入力として使用、 <xref:System.Xml.XmlReader> 内のオブジェクト、 <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> のプロパティ、 <xref:System.Xml.XmlReaderSettings> オブジェクトです。 場合、 <xref:System.Xml.Schema.XmlSchemaSet> が既にコンパイル済みの状態でこのメソッドは再コンパイルのスキーマです。 このメソッドが正常に実行する場合、 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> にプロパティが設定されている `true`します。  
  
 コンパイル済みスキーマ、 <xref:System.Xml.Schema.XmlSchemaSet> は再コンパイルされません。 ただし、スキーマを使用してコンパイルした、 <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> のメソッド、 <xref:System.Xml.Schema.XmlSchema> に再コンパイルされます。  
  
> [!NOTE]
>  呼び出す必要がある、 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> メソッドに追加した後、スキーマ \(またはそれが含まれています\/インポートのいずれか\) を変更した場合、 <xref:System.Xml.Schema.XmlSchemaSet>です。<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> メソッドは、スキーマの W3C XML スキーマの規則に従って構造上の有効性を確認します。 ただし、完全な検証チェックは実行しません。 内部および外部のスキーマ コンポーネントへの参照も解決されます。 正常に取得されるインポートまたはインクルード対象のスキーマが追加も、 <xref:System.Xml.Schema.XmlSchemaSet>です。 インポートされたスキーマは、個別として追加 <xref:System.Xml.Schema.XmlSchema> オブジェクトに含まれているなどの一部となるスキーマ <xref:System.Xml.Schema.XmlSchema>します。 再処理する呼び出しが成功した場合、 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> プロパティが false に設定します。  
  
   
  
## 例  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">検証および内のスキーマをコンパイルするときにエラーが発生しました、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">スキーマ <c>targetNamespace</c> プロパティです。</param>
        <summary>指定されたターゲット名前空間 URI を持つ XML スキーマ定義言語 \(XSD\) スキーマがかどうかを示す、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <returns>
          <see langword="true" /> かどうかに指定されたターゲット名前空間 URI を持つスキーマが、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スキーマに直接追加された、 <xref:System.Xml.Schema.XmlSchemaSet> により検出されますが、 <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> メソッド。 たとえば、インポートされたスキーマです。 その結果、http:\/\/www.contoso.com\/retail 名前空間のスキーマ http:\/\/www.contoso.com\/books 名前空間のスキーマをインポートするに追加、 <xref:System.Xml.Schema.XmlSchemaSet>, 、呼び出し元 <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> と `http://www.contoso.com/books` をパラメーターとして返します `true`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">
          <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。</param>
        <summary>示すかどうか指定した XML スキーマ定義言語 \(XSD\) <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトは、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトは、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> パラメーターとして渡された <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Xml.Schema.XmlSchema[] schemas, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchema[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemas">オブジェクトのコピー先の配列。</param>
        <param name="index">配列内のコピー開始位置を示すインデックス。</param>
        <summary>すべてをコピー、 <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトから、 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 指定したインデックスから始まる、指定した配列にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、すべてをコピー、 [CopyTo メソッド \(XmlSchema\<xref:System.Xml.Schema.XmlSchema> 内のオブジェクト、 [CopyTo メソッド \(XmlSchema\<xref:System.Xml.Schema.XmlSchemaSet> 型の配列を [CopyTo メソッド \(XmlSchema\<xref:System.Xml.Schema.XmlSchema> オブジェクトです。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemas(schemaSet.Count) As XmlSchema  
schemaSet.CopyTo(schemas, 0)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchema[] schemas = new XmlSchema[schemaSet.Count];  
schemaSet.CopyTo(schemas, 0);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数を取得します論理の XML スキーマ定義言語 \(XSD\) スキーマ、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <value>論理スキーマの数、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 名前空間の 2 つのスキーマがある場合 `http://www.contoso.com` で、 <xref:System.Xml.Schema.XmlSchemaSet>, 、 <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> プロパティは、スキーマが検証の目的で 1 つの論理スキーマとして扱われるために、1 は返します。 ただし、名前空間のスキーマ `http://www.contoso.com/retail` のスキーマをインポート、 `http://www.contoso.com/books` の値の名前空間、 <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> プロパティは 2 になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内のすべてのグローバル属性内のすべての XML スキーマ定義言語 \(XSD\) スキーマを取得、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <value>グローバル属性のコレクション。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalElements">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内のすべてのグローバル要素内のすべての XML スキーマ定義言語 \(XSD\) スキーマを取得、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <value>グローバル要素のコレクション。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalTypes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内のすべての XML スキーマ定義言語 \(XSD\) スキーマを取得すべてのグローバル単純および複雑な型、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <value>グローバル単純型とグローバル複合型のコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.Schema.XmlSchemaSet.GlobalTypes%2A> プロパティは常に型を表すを返す、 `xs:anyType` 複合型です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかの XML スキーマ定義言語 \(XSD\) スキーマ、 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> がコンパイルされています。</summary>
        <value>
          <see langword="true" /> 場合にスキーマ、 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 最後に、スキーマが追加または削除からコンパイルされている、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> プロパティは、スキーマが <xref:System.Xml.Schema.XmlSchemaSet> 内にあるときに編集されても、影響を受けません。<xref:System.Xml.Schema.XmlSchemaSet> 内の個別のスキーマの更新は追跡されません。 その結果、<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> プロパティは、`true` のスキーマが追加または削除されない限り、<xref:System.Xml.Schema.XmlSchemaSet> に含まれるスキーマの 1 つが変更されていても、<xref:System.Xml.Schema.XmlSchemaSet> になる可能性があります。  
  
   
  
## 例  
 例については、 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> プロパティを参照してください、 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Compile" />
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既定値を取得 <see cref="T:System.Xml.XmlNameTable" /> で使用される、 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 新しい XML スキーマ定義言語 \(XSD\) スキーマを読み込むときにします。</summary>
        <value>最小単位に分割された文字列オブジェクトのテーブル。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Remove(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">
          <see cref="T:System.Xml.Schema.XmlSchema" /> から削除するオブジェクト、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</param>
        <summary>指定した XML スキーマ定義言語 \(XSD\) スキーマからの削除、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchema" /> から削除されたオブジェクト、 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> または <see langword="null" /> にスキーマが見つからなかった場合、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スキーマを削除する、 <xref:System.Xml.Schema.XmlSchemaSet> 設定、 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> プロパティを `false`します。  
  
   
  
## 例  
 次の例を複数のスキーマを追加する、 <xref:System.Xml.Schema.XmlSchemaSet>, を使用してスキーマの 1 つを削除し、 <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> メソッドです。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.Remove(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.Remove(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">スキーマは、有効なスキーマではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> パラメーターとして渡された <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRecursive">
      <MemberSignature Language="C#" Value="public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveRecursive(class System.Xml.Schema.XmlSchema schemaToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaToRemove" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schemaToRemove">
          <see cref="T:System.Xml.Schema.XmlSchema" /> から削除するオブジェクト、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</param>
        <summary>指定した XML スキーマ定義言語 \(XSD\) スキーマとそれがインポートされたすべてのスキーマを削除、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトとすべてのインポートが正常に削除された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> メソッドは、指定されたスキーマとそれがインポートされたすべてのスキーマを削除、 <xref:System.Xml.Schema.XmlSchemaSet>, 、スキーマや、インポートされたスキーマに依存関係がない限り、します。 スキーマで、インポートされたスキーマに依存関係があるかどうか、 <xref:System.Xml.Schema.XmlSchemaSet>, 、何が削除されると <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> を返します `false`します。 場合 `false` が返されますと <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> が定義されている場合、警告が依存関係を記述するイベント ハンドラーに送信します。  
  
 指定したスキーマは、その他のスキーマをインポートし、指定されたスキーマが以前に削除されなかった場合、 <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> メソッド、 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> メソッドがインポートされたスキーマは削除されませんし、戻ります `false`します。 たとえば場合、 `parentSchema` インポート `childSchema1` と `childSchema2` 次のコードはのみを削除 `parentSchema`, がインポートされていない、 `childSchema1` と `childSchema2` スキーマ。  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.Remove(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 次のコードが削除されます、 `parentSchema` とスキーマをインポートします。  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> メソッドの状態に影響がない、 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> プロパティです。  
  
   
  
## 例  
 複数のスキーマを追加する次のコード例を示しています、 <xref:System.Xml.Schema.XmlSchemaSet>, 、スキーマのいずれかと、インポートを使用してすべてのスキーマを削除し、 <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> メソッドです。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.RemoveRecursive(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.RemoveRecursive(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> パラメーターとして渡された <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Reprocess">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Reprocess(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">再処理するスキーマ。</param>
        <summary>既に存在する XML スキーマ定義言語 \(XSD\) スキーマを再処理、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトのかどうか、スキーマは、有効なスキーマです。 スキーマが有効でない場合、 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されている <see langword="null" /> が返され、該当する検証イベントが発生します。 それ以外の場合、 <see cref="T:System.Xml.Schema.XmlSchemaException" /> がスローされます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スキーマに対して実行されるすべての前処理手順を実行するスキーマの再処理時に、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドが呼び出されます。 場合への呼び出し <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> が成功すると、 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> にプロパティが設定されている `false`します。  
  
 内のスキーマの後に再処理メソッドを使用する必要があります、 <xref:System.Xml.Schema.XmlSchemaSet> が変更された後、 <xref:System.Xml.Schema.XmlSchemaSet> コンパイルを実行します。  
  
> [!NOTE]
>  呼び出す必要がある、 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> メソッドに追加した後、スキーマ \(またはそれが含まれています\/インポートのいずれか\) を変更した場合、 <xref:System.Xml.Schema.XmlSchemaSet>です。<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> メソッドは、スキーマの W3C XML スキーマの規則に従って構造上の有効性を確認します。 ただし、完全な検証チェックは実行しません。 内部および外部のスキーマ コンポーネントへの参照も解決されます。 正常に取得されるインポートまたはインクルード対象のスキーマが追加も、 <xref:System.Xml.Schema.XmlSchemaSet>です。 インポートされたスキーマは、個別として追加 <xref:System.Xml.Schema.XmlSchema> オブジェクトに含まれているなどの一部となるスキーマ <xref:System.Xml.Schema.XmlSchema>します。 再処理する呼び出しが成功した場合、 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> プロパティが false に設定します。  
  
   
  
## 例  
 次の例に追加されたスキーマを再処理、 <xref:System.Xml.Schema.XmlSchemaSet>です。 後に、 <xref:System.Xml.Schema.XmlSchemaSet> を使用してコンパイルされて、 <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> メソッド、およびに追加されたスキーマ、 <xref:System.Xml.Schema.XmlSchemaSet> を変更すると、 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> プロパティに設定されます `true`, 内のスキーマ場合でも、 <xref:System.Xml.Schema.XmlSchemaSet> が変更されました。 呼び出す、 <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> メソッドはすべての前処理を実行して、実行、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> メソッドとセット、 <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> プロパティを `false`します。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
Dim schema As XmlSchema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
  
Dim element As XmlSchemaElement = New XmlSchemaElement()  
schema.Items.Add(element)  
element.Name = "book"  
element.SchemaTypeName = New XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema")  
  
schemaSet.Reprocess(schema)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
XmlSchema schema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
  
XmlSchemaElement element = new XmlSchemaElement();  
schema.Items.Add(element);  
element.Name = "book";  
element.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");  
  
schemaSet.Reprocess(schema);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">スキーマが正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> パラメーターとして渡されたオブジェクト <see langword="null" />します。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Xml.Schema.XmlSchema" /> でパラメーターが既に存在しないために、オブジェクトが渡される、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>内の言語 \(XSD\) スキーマのすべての XML スキーマ定義のコレクションを返す、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" /> オブジェクトに追加されているすべてのスキーマを含む、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。 スキーマが追加されていない場合、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />, 、空 <see cref="T:System.Collections.ICollection" /> オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを間接的に追加されたスキーマを返します、 <xref:System.Xml.Schema.XmlSchemaSet> インポートしたためです。  
  
> [!NOTE]
>  <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> メソッドと同等は、 <xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A> メソッドの廃止された <xref:System.Xml.Schema.XmlSchemaCollection>します。  
  
   
  
## 例  
 次の例では、すべてのスキーマを反復処理する方法、 <xref:System.Xml.Schema.XmlSchemaSet>です。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">スキーマ <c>targetNamespace</c> プロパティです。</param>
        <summary>内の言語 \(XSD\) スキーマのすべての XML スキーマ定義のコレクションを返す、 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 指定した名前空間に属しています。</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" /> オブジェクトに追加されているすべてのスキーマを含む、 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 指定した名前空間に属しています。 スキーマが追加されていない場合、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />, 、空 <see cref="T:System.Collections.ICollection" /> オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `targetNamespace` パラメーターは `null` または <xref:System.String.Empty>, 、名前空間を持たないすべてのスキーマが返されます。  
  
 このメソッドを間接的に追加されたスキーマを返します、 <xref:System.Xml.Schema.XmlSchemaSet> インポートしたためです。  
  
> [!NOTE]
>  <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> メソッドと同等は、 <xref:System.Xml.Schema.XmlSchemaCollection.Item%2A> メソッドの廃止された <xref:System.Xml.Schema.XmlSchemaCollection>します。  
  
   
  
## 例  
 次の例で http:\/\/www.contoso.com\/books 名前空間内のすべてのスキーマを反復処理する方法を示しています、 <xref:System.Xml.Schema.XmlSchemaSet>です。  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML スキーマ定義言語 \(XSD\) スキーマ検証エラーに関する情報を受信するためのイベント ハンドラーを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スキーマ検証エラーに関する情報を受け取るイベント ハンドラーを設定時に、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> または <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> のメソッド、 <xref:System.Xml.Schema.XmlSchemaSet> と呼ばれます。  
  
 イベント ハンドラーが定義されていない場合、 <xref:System.Xml.Schema.XmlSchemaException> 検証エラーがスローされます場所、 <xref:System.Xml.Schema.XmlSeverityType> は <xref:System.Xml.Schema.XmlSeverityType.Error>です。 検証エラーの例外はスローしません、 <xref:System.Xml.Schema.XmlSeverityType> の <xref:System.Xml.Schema.XmlSeverityType.Warning>です。  
  
   
  
## 例  
 次のコード例では、追加を示しています、 <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> スキーマに対して XML ドキュメントを検証するときに、エラーと警告をキャプチャします。  
  
 [!code-cpp[XmlSchemaSetOverall Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 この例では、入力として books.xml ファイルを使用します。  
  
 [!code-xml[XmlSchemaSetOverall Example\#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 この例では、入力として books.xsd ファイルを使用します。  
  
 [!code-xml[XmlSchemaSetOverall Example\#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セット、 <see cref="T:System.Xml.XmlResolver" /> 名前空間または場所で参照されるインクルード要素およびインポート、スキーマの解決に使用します。</summary>
        <value>
          <see cref="T:System.Xml.XmlResolver" /> 名前空間または場所で参照されるインクルード要素およびインポート、スキーマの解決に使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.XmlResolver> の <xref:System.Xml.Schema.XmlSchemaSet> 名前空間または場所で参照を含めるし、スキーマの要素をインポートするには、いつでもを使用してスキーマを追加の解決に使用される、 <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> または <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> メソッドです。  
  
> [!IMPORTANT]
>  外部の名前空間または場所で参照されている含めるには、インポート、およびスキーマの再定義要素が基準にして解決インクルードまたはインポートするスキーマのベース URI。 たとえば、ベース URI を含むまたはスキーマをインポートするは、空または `null`, 、外部の場所は、現在のディレクトリを基準に解決します。<xref:System.Xml.XmlUrlResolver> クラスは、外部スキーマを解決するのには既定で使用します。 インクルード、インポートの解像度を無効にして、スキーマの要素を再定義、設定、 <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A> プロパティを `null`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された XML スキーマ定義言語 \(XSD\) スキーマを追加、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XML スキーマ定義言語 \(XSD\) スキーマがかどうかを示す、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Schemas">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XML スキーマ定義のコレクション内の言語 \(XSD\) スキーマを返す、 <see cref="T:System.Xml.Schema.XmlSchemaSet" />です。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>