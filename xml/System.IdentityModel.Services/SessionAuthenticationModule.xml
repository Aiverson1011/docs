<Type Name="SessionAuthenticationModule" FullName="System.IdentityModel.Services.SessionAuthenticationModule">
  <TypeSignature Language="C#" Value="public class SessionAuthenticationModule : System.IdentityModel.Services.HttpModuleBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SessionAuthenticationModule extends System.IdentityModel.Services.HttpModuleBase" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.SessionAuthenticationModule" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.Services.HttpModuleBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>WS フェデレーション シナリオでのセッションの cookie を処理する ASP.NET モジュールを実装します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET パイプラインに存在する場合、 <xref:System.IdentityModel.Services.SessionAuthenticationModule> \(SAM\) は、WS フェデレーション シナリオでのセッションの cookie を処理します。 指定されたクッキー ハンドラーを使用して、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> プロパティを HTTP 要求から生のセッションの cookie を読み取って、HTTP 応答に書き込みます。 使用して、 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> に生のセッションの cookie を逆シリアル化するアプリケーション用に構成された <xref:System.IdentityModel.Tokens.SessionSecurityToken> オブジェクトです。 セッションのセキュリティ トークンにクレームが含まれています \(<xref:System.Security.Claims.Claim>\) とプリンシパル \(<xref:System.Security.Claims.ClaimsPrincipal>\) 要求が処理中のエンティティに関連付けられています。  
  
 SAM の追加、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> イベント ハンドラーを <xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName> ASP.NET パイプライン内のイベントです。 このハンドラー サインイン要求をインターセプトし、セッションの cookie がある場合、セッション トークンに逆シリアル化して設定、 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> と <xref:System.Web.HttpContext.User%2A?displayProperty=fullName> セッション トークンに含まれる要求のプリンシパルのプロパティです。 このプロセス中、SAM によって公開される他のメソッドのいくつかを呼び出します。  
  
 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> \(たとえば、SignOut.aspx.cs の分離コード ファイル\) 内のセッションからユーザーをサインアウトするメソッドを呼び出すことができます。  
  
 SAM は、その処理パイプラインへのアクセスを提供するいくつかのイベントを公開します。<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> と <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> イベントを使用すると、cookie からの読み取りまたは処理中に作成されたセッションのトークンを変更します。 通常、これは追加、削除、または、トークンのクレームを変換するか、有効期限を調整する行います。<xref:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut>, 、<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut>, 、および <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError> イベントは、サインアウト要求の処理にフックを提供します。 Global.asax.cs ファイルに多くの場合、これらのイベントのハンドラーを追加するだけのほとんどの場合は十分でいます。  
  
 複雑なシナリオから派生できます <xref:System.IdentityModel.Services.SessionAuthenticationModule> カスタム SAM を実装します。 中に呼び出されるメソッドの多くは、この目的を <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> と <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> セッション処理ライフ サイクルの特定の段階でカスタム動作を提供できるように公開されます。  
  
 SAM を構成ファイルで ASP.NET パイプラインに追加するにはどちらかの HTTP モジュールに追加して、 `<system.webServer>` IIS 7 以降のバージョンまたは下にある要素、 `<system.web>` IIS 7 以前のバージョン用の要素。 SAM で使用されるクッキー ハンドラーを構成することができます、 [\<cookieHandler\>](http://msdn.microsoft.com/ja-jp/bfdc127f-8d94-4566-8bef-f583c6ae7398) 要素。  
  
   
  
## 例  
 [!code-csharp[WifSAM\#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#1)]  
  
 次の XML では、ASP.NET パイプラインでの SAM を構成する方法を示します。 簡潔にするための一般的な構成に存在するその他の多くの要素のここでは省略します。  
  
```xml  
<configuration>  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="SessionAuthenticationModule" type="System.IdentityModel.Services.SessionAuthenticationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
      <add name="WsFederationAuthenticationModule" type="System.IdentityModel.Services.WSFederationAuthenticationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionAuthenticationModule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.IdentityModel.Services.SessionAuthenticationModule" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A> にプロパティが設定されている `false` と <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> プロパティは、既定のインスタンスを初期化、 <xref:System.IdentityModel.Services.CookieHandlerElement.ChunkedCookieHandler%2A> クラスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateSessionSecurityToken">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateSessionSecurityToken (System.IdentityModel.Tokens.SessionSecurityToken sessionToken, bool writeCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateSessionSecurityToken(class System.IdentityModel.Tokens.SessionSecurityToken sessionToken, bool writeCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionToken" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
        <Parameter Name="writeCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sessionToken">受信 HTTP 要求を認証に使用するセッション セキュリティ トークンです。</param>
        <param name="writeCookie">
          <see langword="true" /> セッションの cookie を記述するにはそれ以外の場合 <see langword="false" />します。</param>
        <summary>受信セッションのトークンを検証することによって、受信要求を認証します。 検証の成功時に、現在の HTTP コンテキストと更新スレッドがプリンシパルに、指定した  <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A> からメソッドを呼び出した、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> メソッドです。 呼び出す、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken%2A> 、入力方向のトークンと更新を検証する方法、 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> と <xref:System.Web.HttpContext.User%2A?displayProperty=fullName> プロパティです。 場合、 `writeCookie` パラメーターは `true`, 、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie%2A> メソッドを呼び出して、セッションのトークンを cookie に書き込みをします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsSessionTokenCookie">
      <MemberSignature Language="C#" Value="public bool ContainsSessionTokenCookie (System.Web.HttpCookieCollection httpCookieCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsSessionTokenCookie(class System.Web.HttpCookieCollection httpCookieCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie(System.Web.HttpCookieCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpCookieCollection" Type="System.Web.HttpCookieCollection" />
      </Parameters>
      <Docs>
        <param name="httpCookieCollection">検索対象のクッキーのコレクション。</param>
        <summary>セッションの cookie が指定されたクッキー コレクションかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> セッションの cookie が見つかった場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="httpCookieCollection" /> null</exception>
      </Docs>
    </Member>
    <Member MemberName="ContextSessionSecurityToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SessionSecurityToken ContextSessionSecurityToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SessionSecurityToken ContextSessionSecurityToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SessionSecurityToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アクティブな取得 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 現在の <see cref="T:System.Web.HttpContext" />です。</summary>
        <value>アクティブなセッション セキュリティ トークンです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieHandler">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Services.CookieHandler CookieHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Services.CookieHandler CookieHandler" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Services.CookieHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>読み取り、書き込み、およびセッションの cookie を削除に使用されるクッキー ハンドラーを取得します。</summary>
        <value>クッキー ハンドラー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> プロパティは初期化、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration%2A> メソッドです。 このメソッドで指定されたクッキー ハンドラーに基づいたプロパティの初期化、 <xref:System.IdentityModel.Services.Configuration.FederationConfiguration> に設定されているオブジェクト、 <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName> プロパティです。 クッキー ハンドラーを設定するには構成ファイルで、 [\<cookieHandler\>](http://msdn.microsoft.com/ja-jp/bfdc127f-8d94-4566-8bef-f583c6ae7398) 要素。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie" />
        <altmember cref="M:System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(System.IdentityModel.Tokens.SessionSecurityToken@)" />
        <altmember cref="M:System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(System.IdentityModel.Tokens.SessionSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="CreateSessionSecurityToken">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SessionSecurityToken CreateSessionSecurityToken (System.Security.Claims.ClaimsPrincipal principal, string context, DateTime validFrom, DateTime validTo, bool isPersistent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IdentityModel.Tokens.SessionSecurityToken CreateSessionSecurityToken(class System.Security.Claims.ClaimsPrincipal principal, string context, valuetype System.DateTime validFrom, valuetype System.DateTime validTo, bool isPersistent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.DateTime,System.DateTime,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SessionSecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="validFrom" Type="System.DateTime" />
        <Parameter Name="validTo" Type="System.DateTime" />
        <Parameter Name="isPersistent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="principal">トークンでキャプチャされるプリンシパル。</param>
        <param name="context">アプリケーション定義のコンテキストは、文字列。</param>
        <param name="validFrom">このトークンの有効開始時点です。</param>
        <param name="validTo">このトークンの有効な最後の開始時点です。</param>
        <param name="isPersistent">
          <see langword="true" /> 値は、ユーザー エージェントによって永続化する場合それ以外の場合、 <see langword="false" />です。</param>
        <summary>作成、 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 構成されているセッション トークン ハンドラーを使用して、指定されたパラメーターから。</summary>
        <returns>セッション トークンです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">有効なセッションのトークン ハンドラーが構成されていることができません。 \(がない <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> で構成されている、 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> プロパティです\)。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteSessionTokenCookie">
      <MemberSignature Language="C#" Value="public void DeleteSessionTokenCookie ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteSessionTokenCookie() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>セッションの cookie を削除し、キャッシュから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されたクッキー ハンドラーを使用して、セッションの cookie を削除、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> プロパティです。 中にこのメソッドは、サインアウト、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeModule">
      <MemberSignature Language="C#" Value="protected override void InitializeModule (System.Web.HttpApplication context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InitializeModule(class System.Web.HttpApplication context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule(System.Web.HttpApplication)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpApplication" />
      </Parameters>
      <Docs>
        <param name="context">このモジュールを含む HTTP アプリケーションのオブジェクト。</param>
        <summary>モジュールを初期化し、モジュールからイベントを処理できるように準備 ASP.NET アプリケーション オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 追加、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> と <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest%2A> ハンドラーを <xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName> と <xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=fullName> で指定されたアプリケーション オブジェクトのイベント、 `context` パラメーター。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializePropertiesFromConfiguration">
      <MemberSignature Language="C#" Value="protected override void InitializePropertiesFromConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InitializePropertiesFromConfiguration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>構成ファイル内の定義に基づくモジュールのプロパティを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 初期化、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> プロパティを別の構成で指定されたハンドラーから、 <xref:System.IdentityModel.Services.Configuration.FederationConfiguration?displayProperty=fullName> に設定されているオブジェクト、 <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName> プロパティです。 クッキー ハンドラーをから構成ファイルで指定することができます、 [\<cookieHandler\>](http://msdn.microsoft.com/ja-jp/bfdc127f-8d94-4566-8bef-f583c6ae7398) 要素。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReferenceMode">
      <MemberSignature Language="C#" Value="public bool IsReferenceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReferenceMode" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を指定する値かどうか、セッション情報 \(クレーム値など\) セッションの cookie や参照だけを保存する cookie を使用して、サーバー側でセッションの内容を格納するかどうかに格納する必要があります。</summary>
        <value>
          <see langword="true" /> 発行された cookie が参照モードにある場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="false" />, 、cookie を発行したにない参照モードを指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 参照モードで、 <xref:System.IdentityModel.Tokens.SessionSecurityToken> サーバー側のキャッシュに格納されます \(から派生したオブジェクト <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>\)。 発行された cookie には、キャッシュからトークンの取得に使用されるコンテキスト識別子にはのみが含まれます。  
  
> [!IMPORTANT]
>  ハンドラーを提供することをお勧め参照モードで動作するように、 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated?displayProperty=fullName> global.asax.cs ファイルと設定のイベント、 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName> 渡されたトークンのプロパティによって、 <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=fullName> プロパティです。 セッション トークンが要求ごとに参照モードで実行され、単なる設定が優先ようになります、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A?displayProperty=fullName> セッションの認証モジュールのプロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAuthenticateRequest">
      <MemberSignature Language="C#" Value="protected virtual void OnAuthenticateRequest (object sender, EventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAuthenticateRequest(object sender, class System.EventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="eventArgs" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">イベントのソースです。 これを <see cref="T:System.Web.HttpApplication" /> オブジェクトです。</param>
        <param name="eventArgs">イベントのデータ。</param>
        <summary>処理、 <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> からイベントを ASP.NET パイプラインです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、次を処理します。  
  
1.  呼び出す、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie%2A> を読み取る方法、 <xref:System.IdentityModel.Tokens.SessionSecurityToken> が存在する場合、セッション クッキーからです。  
  
2.  場合、セッション セキュリティ トークンにすることはできません \(ほとんどの場合、セッションが確立されていないため、読み取りを返します。  
  
3.  呼び出す、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived%2A> メソッドを <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> イベントです。 変更する cookie から読み取られたトークンまたはの要求が取り消されるまで、機会を提供します。 ハンドラーは、トークンが再発行を設定しても指定できます、 <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.ReissueCookie%2A?displayProperty=fullName> プロパティです。  
  
4.  トークンを再発行する場合は、キャッシュから削除し、呼び出します、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated%2A> メソッドを <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> イベントです。 これは、トークンが再度変更するために機会を提供します。 設定して、再発行動作を変更することも、 <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=fullName> イベント ハンドラーのプロパティです。  
  
5.  呼び出す、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A> ユーザーを認証する方法です。 成功するが設定の効果、 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> プロパティに含まれているプリンシパルを <xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A?displayProperty=fullName> 受信トークンのプロパティです。  
  
6.  セッションの有効期限が切れて場合を呼び出して、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> メソッドです。  
  
 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> メソッドに対応するハンドラーを追加、 <xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName> 内のイベント、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">有効なセッションのトークン ハンドラーが構成されていることができません。 \(がない <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> で構成されている、 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> プロパティです\)。</exception>
      </Docs>
    </Member>
    <Member MemberName="OnPostAuthenticateRequest">
      <MemberSignature Language="C#" Value="protected virtual void OnPostAuthenticateRequest (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPostAuthenticateRequest(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">イベントのソースです。 これを <see cref="T:System.Web.HttpApplication" /> オブジェクトです。</param>
        <param name="e">イベントのデータ。</param>
        <summary>処理、 <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> からイベントを ASP.NET パイプラインです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装は、空です。  
  
 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest%2A> のハンドラーにハンドラーを追加、 <xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=fullName> 内のイベント、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSessionSecurityTokenCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionSecurityTokenCreated (System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionSecurityTokenCreated(class System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">イベントのデータ。</param>
        <summary>
          <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出される、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSessionSecurityTokenReceived">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionSecurityTokenReceived (System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionSecurityTokenReceived(class System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived(System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">イベントのデータ。</param>
        <summary>
          <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出される、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSignedOut">
      <MemberSignature Language="C#" Value="protected virtual void OnSignedOut (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSignedOut(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>
          <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが呼び出されて、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> 、サインアウトを実行し、セッションの cookie が削除された後にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSigningOut">
      <MemberSignature Language="C#" Value="protected virtual void OnSigningOut (System.IdentityModel.Services.SigningOutEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSigningOut(class System.IdentityModel.Services.SigningOutEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IdentityModel.Services.SigningOutEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>
          <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが呼び出されて、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> サインアウトを実行するメソッドです。 セッションの cookie が削除される前に呼び出されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSignOutError">
      <MemberSignature Language="C#" Value="protected virtual void OnSignOutError (System.IdentityModel.Services.ErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSignOutError(class System.IdentityModel.Services.ErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IdentityModel.Services.ErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>
          <see cref="E:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが呼び出されて、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> メソッド サインアウト中にエラーが発生した場合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadSessionTokenFromCookie">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SessionSecurityToken ReadSessionTokenFromCookie (byte[] sessionCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IdentityModel.Tokens.SessionSecurityToken ReadSessionTokenFromCookie(unsigned int8[] sessionCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SessionSecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionCookie" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="sessionCookie">セッション トークンを含む、生の形式でのクッキー。</param>
        <summary>読み取り、 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> 指定したセッション クッキーから生成します。</summary>
        <returns>Cookie から読み取られたセッション トークンです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">有効なセッションのトークン ハンドラーが構成されていることができません。 \(がない <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> で構成されている、 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> プロパティです\)。</exception>
      </Docs>
    </Member>
    <Member MemberName="SessionSecurityTokenCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs&gt; SessionSecurityTokenCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs&gt; SessionSecurityTokenCreated" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッションのセキュリティ トークンの作成時に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントを使用して、cookie に書き込まれる前に、セッションのセキュリティ トークンを変更することができます。  
  
 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> 内からイベントは、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> セッション トークンの後のメソッド \(<xref:System.IdentityModel.Tokens.SessionSecurityToken>\) が作成されました。 これは、たとえば場合に、イベント ハンドラーを <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> イベントは、トークンを変更します。  
  
 このイベントを使用して、パイプラインに渡されるして、エンティティ \(ユーザー\) の要求の認証に使用する前に、セッションのトークンのプロパティを変更することができます。  
  
 使ってトークンをアクセスするイベント ハンドラーで、 <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=fullName> プロパティです。 トークンを変更した後おくと、ライトバックされること、cookie を設定して、 <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=fullName> プロパティを `true`します。 異なり、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> イベント、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> キャンセル可能なイベントではありません。  
  
   
  
## 例  
 次のコードは、ハンドラーを <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> イベントは、ASP.NET web アプリケーションの global.asax.cs ファイルに実装されています。 イベントにハンドラーを追加することも必要があります。 より完全な例が示すように、 <xref:System.IdentityModel.Services.SessionAuthenticationModule> 概要トピックです。  
  
 [!code-csharp[WifSAM\#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionSecurityTokenReceived">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs&gt; SessionSecurityTokenReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs&gt; SessionSecurityTokenReceived" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッションのセキュリティ トークンは cookie から読み取られたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> 内からイベントは、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> セッション トークンの後のメソッド \(<xref:System.IdentityModel.Tokens.SessionSecurityToken>\) セッション cookie から正常に読み取られています。  
  
 このイベントを使用して、パイプラインに渡されるして、エンティティ \(ユーザー\) の要求の認証に使用する前に、セッションのトークンのプロパティを変更することができます。 セッションの有効期限の変更を伴う最も一般的なシナリオの 1 つ \(からアクセスできる、 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A?displayProperty=fullName> プロパティ\) をセッションの有効期限で設定された時間を使用した構成を上書きする、 `lifetime` の属性、 [\<sessionTokenRequirement\>](http://msdn.microsoft.com/ja-jp/496a1735-cbb7-49d5-a6aa-dd5550462073) 要素。 要求ごとにこのプロパティを変更すると、スライディング セッションを実装することができます。つまりで有効期間は延長各セッションは、サイト ユーザーのアクセス時間です。  
  
 使ってトークンをアクセスするイベント ハンドラーで、 <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.SessionToken%2A?displayProperty=fullName> プロパティです。 トークンを変更した後おくと、ライトバックされること、cookie を設定して、 <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.ReissueCookie%2A?displayProperty=fullName> に `true`します。 最後に、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> イベントは、キャンセル可能なイベントと、設定する、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> のプロパティ、 <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs> をさらに、要求の処理を中止します。  
  
   
  
## 例  
 次のコードは、ハンドラーを <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> イベントは、ASP.NET web アプリケーションの global.asax.cs ファイルに実装されています。 イベントにハンドラーを追加することも必要があります。 より完全な例が示すように、 <xref:System.IdentityModel.Services.SessionAuthenticationModule> 概要トピックです。  
  
 [!code-csharp[WifSAM\#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPrincipalFromSessionToken">
      <MemberSignature Language="C#" Value="protected virtual void SetPrincipalFromSessionToken (System.IdentityModel.Tokens.SessionSecurityToken sessionSecurityToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetPrincipalFromSessionToken(class System.IdentityModel.Tokens.SessionSecurityToken sessionSecurityToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionSecurityToken" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
      </Parameters>
      <Docs>
        <param name="sessionSecurityToken">元のプリンシパルを設定するセッション トークンです。</param>
        <summary>プリンシパルを設定、 <see cref="T:System.Web.HttpContext" /> と <see cref="T:System.Threading.Thread" /> 、指定したセッションのトークンに含まれているプリンシパルにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken%2A> メソッドとセット、 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> プロパティと <xref:System.Web.HttpContext.User%2A?displayProperty=fullName> プロパティを <xref:System.Web.HttpContext.Current%2A?displayProperty=fullName> 返される id を使用しています。  
  
 このメソッドは、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignedOut">
      <MemberSignature Language="C#" Value="public event EventHandler SignedOut;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SignedOut" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがサインアウトした後に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 発生した、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> メソッド直後に、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A> メソッドが呼び出されます。  
  
 このイベントは、すべてのセッションに対して呼び出されるようには保証されません。 クライアント側で cookie を削除がなどの場合は、このは決してイベント セッションを削除するためのサーバー側のイベントがないためです。  
  
   
  
## 例  
 次のコードは、ハンドラーを <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut> イベントは、ASP.NET web アプリケーションの global.asax.cs ファイルに実装されています。 イベントにハンドラーを追加することも必要があります。 より完全な例が示すように、 <xref:System.IdentityModel.Services.SessionAuthenticationModule> 概要トピックです。  
  
 [!code-csharp[WifSAM\#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningOut">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.SigningOutEventArgs&gt; SigningOut;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.SigningOutEventArgs&gt; SigningOut" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.SigningOutEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サインインしているセッションを削除する前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 発生した、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> メソッド直前に、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A> メソッドが呼び出されます。  
  
 このイベントは、すべてのセッションに対して呼び出されるようには保証されません。 クライアント側で cookie を削除がなどの場合は、このは決してイベント セッションを削除するためのサーバー側のイベントがないためです。  
  
   
  
## 例  
 次のコードは、ハンドラーを <xref:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut> イベントは、ASP.NET web アプリケーションの global.asax.cs ファイルに実装されています。 イベントにハンドラーを追加することも必要があります。 より完全な例が示すように、 <xref:System.IdentityModel.Services.SessionAuthenticationModule> 概要トピックです。  
  
 [!code-csharp[WifSAM\#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignOut">
      <MemberSignature Language="C#" Value="public virtual void SignOut ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignOut() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.SignOut" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のユーザーがサインアウトし、関連するイベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut%2A>, 、<xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A>, 、および <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut%2A> サインアウトを実行するメソッドです。 例外が発生する場合、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError%2A> させるメソッドが呼び出される、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError> イベントです。 設定することができます、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> のプロパティ、 <xref:System.IdentityModel.Services.ErrorEventArgs> 、サインアウトをキャンセルし、例外がクライアントに反映されないようにするには、このイベントのイベント ハンドラーに渡されるオブジェクト。  
  
 アプリケーション固有の動作を追加するには、このメソッドをオーバーライドできます。  
  
   
  
## 例  
 次のコードを呼び出すコードを示しています、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> SignOut.aspx ページ \(SignOut.aspx.cs\) ASP.NET web アプリケーションからのメソッドです。 より完全な例が示すように、 <xref:System.IdentityModel.Services.SessionAuthenticationModule> 概要トピックです。  
  
 [!code-csharp[WifSAM\#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignOutError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt; SignOutError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.ErrorEventArgs&gt; SignOutError" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サインアウト中にエラーがあると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 発生した、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> サインアウト中にエラーが発生した場合は、メソッドです。  
  
 イベント ハンドラー内から発生したイベントの原因となった例外を取得できます、 <xref:System.IdentityModel.Services.ErrorEventArgs.Exception%2A?displayProperty=fullName> プロパティです。 さらに設定して、クライアントに例外が伝達されませんの結果を持つが例外の処理を取り消すことができます、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> のプロパティ、 <xref:System.IdentityModel.Services.ErrorEventArgs> に `true`します。  
  
 このイベントは、すべてのセッションに対して呼び出されるようには保証されません。 クライアント側で cookie を削除がなどの場合は、このは決してイベント セッションを削除するためのサーバー側のイベントがないためです。  
  
   
  
## 例  
 次のコードは、ハンドラーを <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError> イベントは、ASP.NET web アプリケーションの global.asax.cs ファイルに実装されています。 イベントにハンドラーを追加することも必要があります。 より完全な例が示すように、 <xref:System.IdentityModel.Services.SessionAuthenticationModule> 概要トピックです。  
  
 [!code-csharp[WifSAM\#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifsam/cs/webapplication1/global.asax.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadSessionTokenFromCookie">
      <MemberSignature Language="C#" Value="public bool TryReadSessionTokenFromCookie (out System.IdentityModel.Tokens.SessionSecurityToken sessionToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadSessionTokenFromCookie(class System.IdentityModel.Tokens.SessionSecurityToken sessionToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(System.IdentityModel.Tokens.SessionSecurityToken@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionToken" Type="System.IdentityModel.Tokens.SessionSecurityToken&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="sessionToken">このメソッドが戻るときに、セッション クッキーから読み取られたセッションのセキュリティ トークンが含まれています。</param>
        <summary>読み取ろうとすると、 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> セッション クッキーからセッションの cookie が正常に読み取られたかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> セッションの cookie が要求から正常に読み取られた場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 構成されているクッキー ハンドラーを使用して cookie を読み取って、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> プロパティが呼び出され、および、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie%2A> メソッドが、cookie からトークンを読み取る。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateSessionToken">
      <MemberSignature Language="C#" Value="protected System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt; ValidateSessionToken (System.IdentityModel.Tokens.SessionSecurityToken sessionSecurityToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.Claims.ClaimsIdentity&gt; ValidateSessionToken(class System.IdentityModel.Tokens.SessionSecurityToken sessionSecurityToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionSecurityToken" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
      </Parameters>
      <Docs>
        <param name="sessionSecurityToken">検証するトークンです。</param>
        <summary>指定した検証 <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> し、その id を返します。</summary>
        <returns>トークンに含まれている id のコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A> メソッドです。 呼び出す、 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A?displayProperty=fullName> をその id を抽出し、トークンを検証し、構成済みセッション トークン ハンドラーのメソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IdentityModel.Services.FederatedSessionExpiredException">トークンの有効期限が切れています。</exception>
        <exception cref="T:System.IdentityModel.Services.FederationException">トークンの開始時刻はまだ有効ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">有効なセッションのトークン ハンドラーが構成されていることができません。 \(がない <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> で構成されている、 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> プロパティです\)。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSessionTokenToCookie">
      <MemberSignature Language="C#" Value="public void WriteSessionTokenToCookie (System.IdentityModel.Tokens.SessionSecurityToken sessionToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteSessionTokenToCookie(class System.IdentityModel.Tokens.SessionSecurityToken sessionToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(System.IdentityModel.Tokens.SessionSecurityToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionToken" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
      </Parameters>
      <Docs>
        <param name="sessionToken">書き込むセッション セキュリティ トークンです。</param>
        <summary>指定した書き込み <see cref="T:System.IdentityModel.Tokens.SessionSecurityToken" /> セッション cookie にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 構成されているクッキー ハンドラーを使用して cookie を書き込み、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sessionToken" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">有効なセッションのトークン ハンドラーが構成されていることができません。 \(がない <see cref="T:System.IdentityModel.Tokens.SessionSecurityTokenHandler" /> で構成されている、 <see cref="P:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers" /> プロパティです\)。</exception>
      </Docs>
    </Member>
  </Members>
</Type>