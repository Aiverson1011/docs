<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>使用するアクセス許可を表す、 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> リソースへのアクセスをアクティブなプリンシパルに付与する必要があるかどうかを判断する実装。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> クラスを使用して、強制アクセス チェックを実行する機能を提供する、 <xref:System.Security.Claims.ClaimsAuthorizationManager> アプリケーションに対して構成されています。 呼び出して、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> メソッドまたは静的 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> メソッド、要求、認証マネージャーで定義された承認ポリシーに従って、コードの実行パス内のリソースへの保護を提供できます。 宣言的なアクセスの確認を使用して実行できる、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> クラスです。  
  
> [!IMPORTANT]
>  <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> クラスで構成されている要求の承認マネージャーを使用して、 <xref:System.IdentityModel.Configuration.IdentityConfiguration> で設定されている、 <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName> プロパティです。 これは、Ws\-federation では使用されません。 シナリオにおいても、すべてのケースの場合は true です。たとえば、アクティブな \(WCF\) Web アプリケーションやコンソール アプリケーションです。 構成で、またはプログラムを使用して、要求の承認マネージャーを指定できます。 構成ファイルで要求承認マネージャーを指定する、 [\<claimsAuthorizationManager\>](http://msdn.microsoft.com/ja-jp/9354eee3-f692-4ad6-8427-3169686b8bcc) の下の要素、 [\<identityConfiguration\>](http://msdn.microsoft.com/ja-jp/1db76253-07da-447b-9e7a-3705c7228cf4) 要素でこの id の構成が参照されていることを確認し、 [\<federationConfiguration\>](http://msdn.microsoft.com/ja-jp/8b14054c-6d07-46ab-ab58-03f14beac0f2) 、ランタイムによって読み込まれている要素 \(を設定して、たとえば、 `identityConfigurationName` 属性\)。 要求の承認マネージャーをコードから設定するには、ハンドラーを提供して、 <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=fullName> イベントです。  
  
 1 つのレベルの機能について説明して <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> を通じて提供されるロールベースのアクセス チェック \(RBAC\) に似ていますが、 <xref:System.Security.Permissions.PrincipalPermission> クラスです。 ただし、、 <xref:System.Security.Claims.ClaimsAuthorizationManager> クラスは、アクティブなプリンシパルによって提示されるクレームに基づくチェック機能を実行します。 これにより、さらに数多くの粒度より多くのアクセス許可が通常の 1 つのロールで収集される、純粋な RBAC を使用することはできます。 おそらく、さらに重要なアプリケーションをコード内のリソースに対する特定のアクションのアクセス許可を要求することができ、需要を満たすために表示することにより、エンティティを処理する必要が要求を構成するバックエンドからポリシーを使用するために有効クレーム ベースの承認にビジネス ロジックと承認ポリシーを適切に分離します。 RBAC と同様に <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> から派生するクラスによって実装されるコード アクセス セキュリティとは異なり、ユーザー ベースのアクセス チェックを実行、 <xref:System.Security.CodeAccessPermission> クラスを使用して、スタック ウォークをアクセス許可がコードのすべての呼び出し元に付与されていることを確認 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 、現在のプリンシパルにのみ、チェックを実行します。  
  
 静的な <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> メソッドは、指定したリソースに対して指定されたアクションのアクセスをチェックします。 リソースと操作両方の文字列、通常は Uri です。 インスタンスを初期化することもできます。 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> アクションとリソースの呼び出しが、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> メソッドです。 コンス トラクターは、1 つのリソースと操作にのみが <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> オブジェクトの組み合わせを通じて、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> と <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> メソッドです。 これらのメソッドを使用して作成されたアクセス許可には、複数のリソース操作のペアが含まれます。  
  
 両方のメソッドを呼び出してアクセスを決定する、 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName> で構成されている要求の承認マネージャーのメソッド、 <xref:System.Security.Claims.AuthorizationContext> 、アクティブなプリンシパルから成る \(<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>\) で、リソースと操作。 スロー、 <xref:System.Security.SecurityException> リソースに対して操作を行うには、現在のプリンシパルは権限がない場合のそれ以外の場合、実行されます。  
  
 場合、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 複数リソース アクション ペアを格納する、 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName> アクセス許可に含まれるリソース操作のペアの各メソッドが呼び出されます。  呼び出しの <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> きたように、アクティブなプリンシパルは、アクセス許可に含まれるリソース操作ペアのすべての承認が必要です。  
  
   
  
## 例  
 次の例を使用してリソースを保護する方法を示しています、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> 、メソッド、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> メソッド、または <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> 宣言します。 構成された各ケースで <xref:System.Security.Claims.ClaimsAuthorizationManager> が呼び出され、指定されたリソースと操作に対する現在のプリンシパルを評価します。 現在のプリンシパルが指定したリソースに対して指定されたアクションの権限がない場合、 <xref:System.Security.SecurityException> がスローされた場合、それ以外の場合に実行されます。  
  
 [!code-csharp[WifCppWithCam\#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 次の XML は、カスタム クレーム承認を使用するために必要な最小構成マネージャーに、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> クラスです。 必要があるには、少なくともを宣言する両方、 `system.identityModel` と `system.identityModel.services` セクション、 `<configSection>` 要素で、承認マネージャーを指定し、 [\<claimsAuthorizationManager\>](http://msdn.microsoft.com/ja-jp/9354eee3-f692-4ad6-8427-3169686b8bcc) \[既定の id の構成要素。 承認マネージャーが既定のフェデレーションの構成から参照されているようになります。 またはで承認マネージャーを指定する id の構成の名前を指定することができます、 `identityConfigurationName` の属性、 [\<federationConfiguration\>](http://msdn.microsoft.com/ja-jp/8b14054c-6d07-46ab-ab58-03f14beac0f2) 要素。  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">リソースがプリンシパルを承認が必要です。</param>
        <param name="action">プリンシパルの権限を操作します。</param>
        <summary>
          <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> クラスの新しいインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> と指定したリソース操作のペア オブジェクトを初期化します。 呼び出すことができます、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> アクセス チェックを実行するメソッドです。  
  
 コンス トラクターは、1 つのリソースと操作にのみが <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> オブジェクトの組み合わせを通じて、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> と <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> メソッドです。 これらのメソッドを使って作成されたアクセス許可には、複数のリソース操作のペアが含まれます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resource" /> が <see langword="null" /> または空の文字列です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">リソースがプリンシパルを承認が必要です。</param>
        <param name="action">プリンシパルの権限を操作します。</param>
        <summary>指定したリソースに対して指定したアクションを実行するかどうか、現在のプリンシパルを承認を確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンシパルは、指定したリソースに対して指定されたアクションの承認が必要、または <xref:System.Security.SecurityException> 例外がスローされます。  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName> 構成済みの要求の承認マネージャーのメソッドを呼び出す、 <xref:System.Security.Claims.AuthorizationContext> 、アクティブなプリンシパルから成る \(<xref:System.Threading.Thread.CurrentPrincipal%2A>\) をリソースと操作。  
  
   
  
## 例  
 次の例を使用してリソースを保護する方法を示しています、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> メソッドです。 指定されたリソースと操作に対する現在のプリンシパルを評価する構成済みの要求の承認マネージャーが呼び出されます。 現在のプリンシパルが指定したリソースに対して指定されたアクションの権限がない場合、 <xref:System.Security.SecurityException> がスローされた場合、それ以外の場合に実行されます。  
  
 [!code-csharp[WifCppWithCam\#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在のプリンシパルから割り当てることがない <see cref="T:System.Security.Claims.ClaimsPrincipal" />します。  
  
 または  
  
 ない <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> ように構成します。</exception>
        <exception cref="T:System.Security.SecurityException">承認チェックが失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のコピーを返します <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> インスタンス。</summary>
        <returns>A <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 現在のインスタンスからコピーします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のインスタンスに関連付けられているリソース操作のペアのかどうか、現在のプリンシパルを承認を確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のプリンシパルは、このインスタンスに関連付けられているリソース操作のペアのすべての承認が必要、または <xref:System.Security.SecurityException> 例外がスローされます。  
  
 コンス トラクターは、1 つのリソースと操作にのみが <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> オブジェクトの組み合わせを通じて、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> と <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> メソッドです。 これらのメソッドを使って作成されたアクセス許可には、複数のリソース操作のペアが含まれます。  
  
 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> メソッドを呼び出す、 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName> で構成されている要求の承認マネージャーのメソッド、 <xref:System.Security.Claims.AuthorizationContext> 、アクティブなプリンシパルから成る \(<xref:System.Threading.Thread.CurrentPrincipal%2A>\)、リソース、およびアクセス許可に含まれるリソース操作のペアの各アクション。<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> をアクティブなを成功させるには、アクセス許可に含まれるリソース操作のペアのすべてのプリンシパルを承認します。  
  
   
  
## 例  
 次の例を使用してリソースを保護する方法を示しています、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> メソッドです。 指定されたリソースと操作に対する現在のプリンシパルを評価する構成済みの要求の承認マネージャーが呼び出されます。 現在のプリンシパルが指定したリソースに対して指定されたアクションの権限がない場合、 <xref:System.Security.SecurityException> がスローされた場合、それ以外の場合に実行されます。  
  
 [!code-csharp[WifCppWithCam\#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在のプリンシパルから割り当てることがない <see cref="T:System.Security.Claims.ClaimsPrincipal" />します。  
  
 または  
  
 ない <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> ように構成します。</exception>
        <exception cref="T:System.Security.SecurityException">承認チェックが失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">アクセス許可の再構築に使用する XML エンコード。</param>
        <summary>現在のアクセス許可と、指定された XML エンコーディングからの状態を再構築します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しによって作成された XML エンコーディングから権限を再構築、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">エンコードするには、認識されない要素、属性、または形式の正しくない XML が含まれます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">現在のアクセス許可と交差する権限です。 インスタンスがある必要があります <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />します。</param>
        <summary>現在のアクセス許可と、指定した権限の交差部分である権限を返します。</summary>
        <returns>新しい <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> を現在のアクセス許可と指定した権限の積集合を表すまたは <see langword="null" /> 場合 <paramref name="target" /> は <paramref name="null" /> のインスタンスではない、または <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返されるアクセス許可には、現在のアクセス許可と、指定した権限の両方に存在していたリソース操作のペアだけがいます。 1 つだけか、アクセス許可の一方に存在するリソース操作のペアは含まれません。<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> 、新しいアクセス許可では成功する、現在のプリンシパルのみする必要がありますが現在のアクセス許可と、指定した権限に共通するリソース操作のペアを承認します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">サブセットの関係をテストする権限です。 インスタンスがある必要があります <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />します。</param>
        <summary>現在のアクセス許可が、指定した権限のサブセットであるかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> 現在のアクセス許可が指定した権限のサブセットである場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のアクセス許可は、指定したアクセス許可の存在もすべて現在のアクセス許可に含まれるリソース操作ペアの場合、指定した権限のサブセットです。 場合 `target` は `null` のインスタンスではない、または <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>, 、 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A> 返します `false`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アクセス許可が無制限かどうかを示す値を返します。</summary>
        <returns>アクセス許可が無制限の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 アクセス許可が制限されていることを示す <see langword="true" /> を常に返します。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のアクセス許可とその状態の XML にエンコードされたフォームを返します。</summary>
        <returns>現在のアクセス許可とその状態の XML にエンコードされたフォーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The principal can be reconstructed from its XML encoded form by calling the <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">現在のアクセス許可と結合する権限です。<see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> 型でなければなりません。</param>
        <summary>現在のアクセス許可と、指定した権限の和集合を表す新しいアクセス許可を返します。<see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> すべての現在のインスタンスとターゲット インスタンスに存在するリソース操作のペアを持つオブジェクトです。</summary>
        <returns>新しい <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> を現在のアクセス許可と指定した権限の和集合を表すまたは <see langword="null" /> 場合 <paramref name="target" /> は <paramref name="null" /> のインスタンスではない、または <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返される権限にはすべての現在のアクセス許可に存在するリソース操作のペアと、指定した権限を表示できるリソース操作ペアのすべてです。<xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> 、新しいアクセス許可できたように、現在のプリンシパルをすべての現在のアクセス許可に含まれていたリソース アクション ペアと、指定した権限に存在していたリソース操作のペアのすべての承認が必要です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>