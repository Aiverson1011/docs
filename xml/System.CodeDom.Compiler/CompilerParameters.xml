<Type Name="CompilerParameters" FullName="System.CodeDom.Compiler.CompilerParameters">
  <TypeSignature Language="C#" Value="public class CompilerParameters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompilerParameters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CompilerParameters" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>コンパイラを呼び出すために使用されるパラメーターを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.CodeDom.Compiler.CompilerParameters> オブジェクトの設定し、オプションを <xref:System.CodeDom.Compiler.ICodeCompiler> インターフェイスです。  
  
 設定する必要があります実行可能プログラムをコンパイルする場合、 <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> プロパティを `true`します。 ときに、 <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> に設定されている `false`, 、コンパイラはクラス ライブラリを生成します。 既定では、新しい <xref:System.CodeDom.Compiler.CompilerParameters> で初期化される、 <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> プロパティに設定 `false`します。 CodeDOM グラフから実行可能ファイルをコンパイルする場合、 <xref:System.CodeDom.CodeEntryPointMethod> グラフで定義する必要があります。 クラスの名前を設定して、使用するエントリ ポイントを定義するクラスを指定するには複数のコード エントリ ポイントがある場合、 <xref:System.CodeDom.Compiler.CompilerParameters.MainClass%2A> プロパティです。  
  
 内の出力アセンブリのファイル名を指定する、 <xref:System.CodeDom.Compiler.CompilerParameters.OutputAssembly%2A> プロパティです。 それ以外の場合、既定の出力ファイル名が使用されます。 生成されたアセンブリのデバッグ情報は、設定、 <xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A> プロパティを `true`します。 内の項目としてアセンブリ名を指定する必要があります、プロジェクトでは、すべてのアセンブリを参照する場合、 <xref:System.Collections.Specialized.StringCollection> に設定、 <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A> のプロパティ、 <xref:System.CodeDom.Compiler.CompilerParameters> コンパイルを起動するときに使用します。  
  
 設定して、ディスクではなく、メモリに書き込まれたアセンブリをコンパイルすることができます、 <xref:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory%2A> プロパティを `true`します。 メモリ内アセンブリが生成されると、コードがから生成されたアセンブリへの参照を取得できます、 <xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A> のプロパティ、 <xref:System.CodeDom.Compiler.CompilerResults>です。 アセンブリが記述されている場合、ディスクから生成されたアセンブリ パスを取得することができます、 <xref:System.CodeDom.Compiler.CompilerResults.PathToAssembly%2A> のプロパティ、 <xref:System.CodeDom.Compiler.CompilerResults>です。  
  
 コンパイルを中断する警告レベルを指定する、 <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A> コンパイルを停止する位置を示す警告レベルを表す整数のプロパティです。 設定して警告が発生した場合は、コンパイルを停止するようにコンパイラを構成することも、 <xref:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors%2A> プロパティを `true`します。  
  
 コンパイル処理の実行時に使用するカスタムのコマンドライン引数の文字列を指定するには、\[文字列を設定、 <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A> プロパティです。 指定内のトークンの場合は、Win32 セキュリティ トークンは、コンパイラのプロセスを呼び出す必要がある、 <xref:System.CodeDom.Compiler.CompilerParameters.UserToken%2A> プロパティです。 .NET Framework リソース ファイルは、コンパイルされたアセンブリで、追加するリソース ファイルの名前、 <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> プロパティです。 別のアセンブリの .NET Framework のリソースを参照するには、リソース ファイルの名前を追加、 <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> プロパティです。 コンパイルされたアセンブリに Win32 リソース ファイルを含めるで Win32 リソース ファイルの名前を指定、 <xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A> プロパティです。  
  
> [!NOTE]
>  このクラスには、リンク確認要求し、すべてのメンバーに適用されるクラス レベルで継承確認要求が含まれています。 A <xref:System.Security.SecurityException> 直前の呼び出し元または派生クラスのいずれかに完全信頼のアクセス許可があるない場合にスローされます。 セキュリティ要求の詳細については、「 [Link Demands](http://msdn.microsoft.com/ja-jp/a33fd5f9-2de9-4653-a4f0-d9df25082c4d) と [継承確認要求](http://msdn.microsoft.com/ja-jp/28b9adbb-8f08-4f10-b856-dbf59eb932d9)します。  
  
   
  
## 例  
 次の例では、簡単な Hello World プログラムの CodeDOM ソース グラフをビルドします。  ソースは、実行可能ファイルにコンパイルされ、実行、ファイルに保存されます。`CompileCode` メソッドを使用する方法を示しています、 <xref:System.CodeDom.Compiler.CompilerParameters> クラスがさまざまなコンパイラ設定とオプションを指定します。  
  
 [!code-cpp[CompilerParametersExample\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#1)]
 [!code-csharp[CompilerParametersExample\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#1)]
 [!code-vb[CompilerParametersExample\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This class cannot be used by partially trusted code.</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This class cannot be inherited by partially trusted code.</permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 The following example illustrates using <xref:System.CodeDom.Compiler.CompilerParameters> to specify various compiler settings and options. This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerParameters> class.  
  
 [!code-cpp[CompilerParametersExample\#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample\#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This class cannot be used by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters (string[] assemblyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">参照するアセンブリの名前。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> クラスの指定したアセンブリ名を使用します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This class cannot be used by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters (string[] assemblyNames, string outputName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames, string outputName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
        <Parameter Name="outputName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">参照するアセンブリの名前。</param>
        <param name="outputName">出力ファイル名。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> クラスの指定したアセンブリ名と出力ファイル名を使用します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This class cannot be used by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters (string[] assemblyNames, string outputName, bool includeDebugInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames, string outputName, bool includeDebugInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
        <Parameter Name="outputName" Type="System.String" />
        <Parameter Name="includeDebugInformation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">参照するアセンブリの名前。</param>
        <param name="outputName">出力ファイル名。</param>
        <param name="includeDebugInformation">
          <see langword="true" /> デバッグ情報を含める <see langword="false" /> デバッグ情報を除外します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> クラスの指定したアセンブリ名、出力名、およびデバッグ情報を含めるかどうかを示す値を使用します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This class cannot be used by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName="CompilerOptions">
      <MemberSignature Language="C#" Value="public string CompilerOptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CompilerOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコンパイラを呼び出すときに使用するオプションのコマンドライン引数を設定します。</summary>
        <value>コンパイラの追加のコマンドライン引数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.CodeDom.Compiler.ICodeCompiler> 通常コマンド ライン コンパイラを呼び出すときに、コマンドラインでは、この文字列が含まれています。 既定では、このプロパティには、空の文字列が含まれています。  
  
   
  
## 例  
 使用して、次の例に示す <xref:System.CodeDom.Compiler.CompilerParameters> さまざまなコンパイラ設定とオプションを指定します。 このコード例が示されている例の一部は、 <xref:System.CodeDom.Compiler.CompilerParameters> クラスです。  
  
 [!code-cpp[CompilerParametersExample\#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample\#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssemblyFileName">
      <MemberSignature Language="C#" Value="public string CoreAssemblyFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CoreAssemblyFileName" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>主要なまたは基本的な型を含む標準のアセンブリの名前を取得または <see cref="T:System.Object" />, 、<see cref="T:System.String" />, 、または <see cref="T:System.Int32" />です。</summary>
        <value>基本的な型を含むコア アセンブリの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの値が空の文字列または `null`, 、コンパイラは、既定のコア アセンブリを使用します。 コンパイラのバージョンによっては、既定のコア アセンブリがあります mscorlib.dll または System.Runtime.dll Framework ディレクトリまたは参照アセンブリのディレクトリにします。 このプロパティの値が空でない場合、コード ドキュメント オブジェクト モデル \(CodeDOM\) は明示的に指定したアセンブリを参照し、コンパイラがコンパイル時にアセンブリを暗黙的に参照しないコンパイラ オプションを出力. 既定ではコンパイラによって暗黙的にのみ、コアまたは標準のアセンブリを参照するには、独自にこのプロパティを使用できます。 アセンブリをコアまたは標準のアセンブリをさらに暗黙的に参照するコンパイラでは、このオプションを使用することがあります指定する必要に追加エントリ、 <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A?displayProperty=fullName>プロパティです。  
  
> [!NOTE]
>  <xref:System.CodeDom.Compiler.ICodeCompiler> または <xref:System.CodeDom.Compiler.CodeDomProvider> 実装は、このプロパティを無視することができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmbeddedResources">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringCollection EmbeddedResources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection EmbeddedResources" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>出力アセンブリをコンパイルするときに含まれる .NET Framework リソース ファイルを取得します。</summary>
        <value>生成されたアセンブリに含めるリソースを .NET Framework のファイルのパスを含むコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 埋め込みリソースは、生成されたアセンブリの出力ファイルに組み込まれます。 このプロパティを使用してファイルを含むに似ていますが、 `/resource` 多くの .NET Framework コンパイラでサポートされているコマンドラインの引数。  
  
 呼び出すことによって、このサポートをテストする必要があります、.NET Framework リソース ファイルをサポートしていないすべてのコンパイラ、 <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> フラグ メソッド <xref:System.CodeDom.Compiler.GeneratorSupport.Resources>します。  
  
 返された 1 つまたは複数の .NET Framework リソース ファイル パスを追加する <xref:System.Collections.Specialized.StringCollection> 、コンパイルされたアセンブリにファイル リソースを埋め込みます。 重複しているか、無効なファイル パスは結果を追加する、コンパイル エラーが発生します。各文字列が有効な .NET Framework リソース ファイルを一意のパスを指定することを確認します。  
  
 使用して <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> に既定値またはニュートラル カルチャの .NET Framework のリソースをアセンブリに含めるを使用して、 <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> .NET Framework のリソースをサテライト アセンブリを参照するプロパティです。  
  
   
  
## 例  
 使用して、次の例に示す <xref:System.CodeDom.Compiler.CompilerParameters> さまざまなコンパイラ設定とオプションを指定します。 このコード例が示されている例の一部は、 <xref:System.CodeDom.Compiler.CompilerParameters> クラスです。  
  
 [!code-cpp[CompilerParametersExample\#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample\#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      </Docs>
    </Member>
    <Member MemberName="Evidence">
      <MemberSignature Language="C#" Value="public System.Security.Policy.Evidence Evidence { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence Evidence" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.Evidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CAS policy is obsolete and will be removed in a future release of the .NET Framework. Please see http://go2.microsoft.com/fwlink/?LinkId=131738 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>証拠を表すオブジェクトをコンパイルされたアセンブリを付与するセキュリティ ポリシーのアクセス許可を指定します。</summary>
        <value>コンパイルされたアセンブリを付与するセキュリティ ポリシーのアクセス許可を表すオブジェクト。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for the ability control evidence. Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" /></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="GenerateExecutable">
      <MemberSignature Language="C#" Value="public bool GenerateExecutable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GenerateExecutable" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または実行可能ファイルを生成するかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 実行可能ファイルを生成する場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの値が場合 `false`, 、DLL が生成されます。 このプロパティの値は、既定では、 `false`です。  
  
   
  
## 例  
 使用して、次の例に示す <xref:System.CodeDom.Compiler.CompilerParameters> さまざまなコンパイラ設定とオプションを指定します。 このコード例が示されている例の一部は、 <xref:System.CodeDom.Compiler.CompilerParameters> クラスです。  
  
 [!code-cpp[CompilerParametersExample\#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample\#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateInMemory">
      <MemberSignature Language="C#" Value="public bool GenerateInMemory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GenerateInMemory" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはメモリ内で出力を生成するかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> コンパイラは、メモリ内で出力を生成する場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 使用して、次の例に示す <xref:System.CodeDom.Compiler.CompilerParameters> さまざまなコンパイラ設定とオプションを指定します。 このコード例が示されている例の一部は、 <xref:System.CodeDom.Compiler.CompilerParameters> クラスです。  
  
 [!code-cpp[CompilerParametersExample\#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample\#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeDebugInformation">
      <MemberSignature Language="C#" Value="public bool IncludeDebugInformation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeDebugInformation" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコンパイル済み実行可能ファイルにデバッグ情報を含めるかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> デバッグ情報を生成する場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkedResources">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringCollection LinkedResources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection LinkedResources" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のソースで参照されている .NET Framework リソース ファイルを取得します。</summary>
        <value>ソースによって参照されている .NET Framework リソース ファイルのパスを含むコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リンクされたリソース ファイルには、実際のリソースをアセンブリに埋め込むことがなく .NET Framework のリソースを参照するアセンブリが許可されます。 に似ていますがこのプロパティを使用してファイルを参照する、 `/linkresource` コマンドライン引数を使って、.NET Framework コンパイラの多くではサポートされています。  
  
 呼び出すことによって、このサポートをテストする必要があります、.NET Framework リソース ファイルをサポートしていないすべてのコンパイラ、 <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> フラグ メソッド <xref:System.CodeDom.Compiler.GeneratorSupport.Resources>します。  
  
 返された 1 つまたは複数の .NET Framework リソース ファイル パスを追加する <xref:System.Collections.Specialized.StringCollection> 、コンパイルされたアセンブリでリソースのリンクを作成します。 重複しているか、無効なファイル パスは結果を追加する、コンパイル エラーが発生します。各文字列が有効な .NET Framework リソース ファイルを一意のパスを指定することを確認します。  
  
 使用して <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> 特定のカルチャのローカライズされたサテライト アセンブリに .NET Framework のリソースを参照する。 を使用して、 <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> プロパティを、コンパイルされたアセンブリにリソースを埋め込みます。  
  
   
  
## 例  
 使用して、次の例に示す <xref:System.CodeDom.Compiler.CompilerParameters> さまざまなコンパイラ設定とオプションを指定します。 このコード例が示されている例の一部は、 <xref:System.CodeDom.Compiler.CompilerParameters> クラスです。  
  
 [!code-cpp[CompilerParametersExample\#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample\#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      </Docs>
    </Member>
    <Member MemberName="MainClass">
      <MemberSignature Language="C#" Value="public string MainClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MainClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.MainClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または主要なクラスの名前を設定します。</summary>
        <value>主なクラスの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メイン クラスには、プログラムのエントリ ポイントが含まれています。  
  
   
  
## 例  
 使用して、次の例に示す <xref:System.CodeDom.Compiler.CompilerParameters> さまざまなコンパイラ設定とオプションを指定します。 このコード例が示されている例の一部は、 <xref:System.CodeDom.Compiler.CompilerParameters> クラスです。  
  
 [!code-cpp[CompilerParametersExample\#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample\#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAssembly">
      <MemberSignature Language="C#" Value="public string OutputAssembly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OutputAssembly" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または出力アセンブリの名前を設定します。</summary>
        <value>出力アセンブリの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 使用して、次の例に示す <xref:System.CodeDom.Compiler.CompilerParameters> さまざまなコンパイラ設定とオプションを指定します。 このコード例が示されている例の一部は、 <xref:System.CodeDom.Compiler.CompilerParameters> クラスです。  
  
 [!code-cpp[CompilerParametersExample\#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample\#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferencedAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringCollection ReferencedAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection ReferencedAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のプロジェクトによって参照されるアセンブリを取得します。</summary>
        <value>コンパイルするソースによって参照されるアセンブリ名を含むコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列コレクションに含まれるか含めるには、現在のプロジェクトによって参照されるアセンブリ。 返されたアセンブリ ファイル名を追加 <xref:System.Collections.Specialized.StringCollection> をアセンブリ マニフェストをインポートし、現在のプロジェクト アセンブリの型情報を参照します。  
  
   
  
## 例  
 使用して、次の例に示す <xref:System.CodeDom.Compiler.CompilerParameters> さまざまなコンパイラ設定とオプションを指定します。 このコード例が示されている例の一部は、 <xref:System.CodeDom.Compiler.CompilerParameters> クラスです。  
  
 [!code-cpp[CompilerParametersExample\#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample\#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.StringCollection" />
      </Docs>
    </Member>
    <Member MemberName="TempFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TempFiles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TempFiles" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.TempFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または一時ファイルを含むコレクションを設定します。</summary>
        <value>一時ファイルを含むコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コレクション内の一時ファイルを保持またはの値に基づいてコンパイラ アクティビティの完了すると削除、 <xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A> コレクション内のプロパティです。<xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A> プロパティを使用して、コレクションを作成する場合、 <xref:System.CodeDom.Compiler.TempFileCollection.%23ctor%28System.String%2CSystem.Boolean%29> を持つコンス トラクター、 `keepFiles` パラメーターを設定する `true`です。  
  
> [!NOTE]
>  このクラスには、リンク確認要求し、すべてのメンバーに適用されるクラス レベルで継承確認要求が含まれています。 A <xref:System.Security.SecurityException> 直前の呼び出し元または派生クラスのいずれかに完全信頼のアクセス許可があるない場合にスローされます。 セキュリティ要求の詳細については、「 [Link Demands](http://msdn.microsoft.com/ja-jp/a33fd5f9-2de9-4653-a4f0-d9df25082c4d) と [継承確認要求](http://msdn.microsoft.com/ja-jp/28b9adbb-8f08-4f10-b856-dbf59eb932d9)します。  
  
   
  
## 例  
 使用して、次の例に示す <xref:System.CodeDom.Compiler.CompilerParameters> さまざまなコンパイラ設定とオプションを指定します。 このコード例が示されている例の一部は、 <xref:System.CodeDom.Compiler.CompilerParameters> クラスです。  
  
 [!code-cpp[CompilerParametersExample\#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample\#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName="TreatWarningsAsErrors">
      <MemberSignature Language="C#" Value="public bool TreatWarningsAsErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TreatWarningsAsErrors" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または警告をエラーとして処理するかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 警告をエラーとして扱う場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 使用して、次の例に示す <xref:System.CodeDom.Compiler.CompilerParameters> さまざまなコンパイラ設定とオプションを指定します。 このコード例が示されている例の一部は、 <xref:System.CodeDom.Compiler.CompilerParameters> クラスです。  
  
 [!code-cpp[CompilerParametersExample\#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample\#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserToken">
      <MemberSignature Language="C#" Value="public IntPtr UserToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int UserToken" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.UserToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコンパイラのプロセスを作成するときに使用するユーザーのトークンを設定します。</summary>
        <value>使用するユーザー トークンです。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WarningLevel">
      <MemberSignature Language="C#" Value="public int WarningLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WarningLevel" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコンパイラがコンパイルを中止する警告レベルを設定します。</summary>
        <value>警告レベルは、コンパイラがコンパイルを中止します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 使用して、次の例に示す <xref:System.CodeDom.Compiler.CompilerParameters> さまざまなコンパイラ設定とオプションを指定します。 このコード例が示されている例の一部は、 <xref:System.CodeDom.Compiler.CompilerParameters> クラスです。  
  
 [!code-cpp[CompilerParametersExample\#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample\#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Win32Resource">
      <MemberSignature Language="C#" Value="public string Win32Resource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Win32Resource" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコンパイルされたアセンブリにリンクする Win32 リソース ファイルのファイル名を設定します。</summary>
        <value>コンパイルされたアセンブリにリンクされている Win32 リソース ファイルです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用してファイルをリンクと似ています、 `/winres` と `/winresource` 多くの .NET Framework コンパイラでサポートされているコマンドラインの引数。  
  
 使用 <xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A> 、アセンブリに Win32 リソース ファイルをコンパイルします。 使用 <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> または <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> .NET Framework リソース ファイルをコンパイルします。  
  
 すべてのコンパイラは Win32 リソース ファイルをサポートするため、コード ジェネレーターを呼び出して、リソース ファイルをリンクする前にこのサポートをテストする必要があります、 <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> フラグを設定してメソッド <xref:System.CodeDom.Compiler.GeneratorSupport.Win32Resources>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>