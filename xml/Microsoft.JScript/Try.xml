<Type Name="Try" FullName="Microsoft.JScript.Try">
  <TypeSignature Language="C#" Value="public sealed class Try : Microsoft.JScript.AST" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Try extends Microsoft.JScript.AST" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.Try" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.JScript.AST</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>エラー処理のスコープで実行するコードのブロックを識別します。 このクラスは、抽象構文ツリーのカテゴリに属します。</summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="JScriptExceptionValue">
      <MemberSignature Language="C#" Value="public static object JScriptExceptionValue (object e, Microsoft.JScript.Vsa.VsaEngine engine);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object JScriptExceptionValue(object e, class Microsoft.JScript.Vsa.VsaEngine engine) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.Try.JScriptExceptionValue(System.Object,Microsoft.JScript.Vsa.VsaEngine)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Object" />
        <Parameter Name="engine" Type="Microsoft.JScript.Vsa.VsaEngine" />
      </Parameters>
      <Docs>
        <param name="e">例外を表すオブジェクト。</param>
        <param name="engine">スクリプト エンジンへの参照。</param>
        <summary>特定への変換、例外として、指定したオブジェクトを返します<see cref="T:Microsoft.JScript.JScriptException" />可能な場合です。</summary>
        <returns>例外<paramref name="e" />特定に変換された、<see cref="T:Microsoft.JScript.JScriptException" />かどうかそれは可能です。</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <forInternalUseOnly />
        <altmember cref="T:Microsoft.JScript.JScriptException" />
        <altmember cref="T:Microsoft.JScript.JSError" />
      </Docs>
    </Member>
    <Member MemberName="PushHandlerScope">
      <MemberSignature Language="C#" Value="public static void PushHandlerScope (Microsoft.JScript.Vsa.VsaEngine engine, string id, int scopeId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushHandlerScope(class Microsoft.JScript.Vsa.VsaEngine engine, string id, int32 scopeId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.Try.PushHandlerScope(Microsoft.JScript.Vsa.VsaEngine,System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="engine" Type="Microsoft.JScript.Vsa.VsaEngine" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="scopeId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="engine">スクリプト エンジンへの参照。</param>
        <param name="id">スコープの名前、 <see langword="try" /> ブロックします。</param>
        <param name="scopeId">スコープの ID、 <see langword="try" /> ブロックします。</param>
        <summary>新たに作成 <see cref="T:Microsoft.JScript.BlockScope" /> のオブジェクト、 <see langword="try" /> をブロックし、グローバル スコープのスタックにプッシュします。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>