<Type Name="IDebugVsaScriptCodeItem" FullName="Microsoft.JScript.IDebugVsaScriptCodeItem">
  <TypeSignature Language="C#" Value="public interface IDebugVsaScriptCodeItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDebugVsaScriptCodeItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.IDebugVsaScriptCodeItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("6DFE759A-CB8B-4ca0-A973-1D04E0BF0B53")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>式を評価し、文字列を解析するメソッドを定義します。 このインターフェイスは通常、コード ブロックを表すオブジェクトを実装し、デバッガーが通常と呼ばれます。 このインターフェイスは、IActiveScript ホストで必要な追加の機能を提供します。</summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="public object Evaluate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Evaluate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クラスで実装された場合は、ブロック、式、またはコード項目によって表されるステートメントを評価し、値を返します。 通常呼び出されます \(たとえば、ウォッチ ウィンドウ\) で式を評価する必要があるデバッガーによってです。 式の場合は、値は、式の結果ができます。 ブロックとステートメントの場合は、結果の式は最後のブロックまたはステートメントによって計算される式です。</summary>
        <returns>ステートメント、式、またはブロックの評価を表す値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 なお、 <xref:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate%2A> メソッドは機能的に同じ、 <xref:Microsoft.JScript.IVsaScriptCodeItem.Execute%2A> メソッドです。 マーシャ リング属性のみが異なります。 このバージョンのインターフェイスを使用すると、として戻り値を取得するアンマネージのデバッガー、 `IUnknown` ポインターではなく、 `VARIANT`です。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ParseNamedBreakPoint">
      <MemberSignature Language="C#" Value="public bool ParseNamedBreakPoint (string input, out string functionName, out int nargs, out string arguments, out string returnType, out ulong offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ParseNamedBreakPoint(string input, string functionName, int32 nargs, string arguments, string returnType, unsigned int64 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="functionName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="nargs" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="arguments" Type="System.String&amp;" RefType="out" />
        <Parameter Name="returnType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="offset" Type="System.UInt64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">関数、省略可能な引数リスト、および省略可能な IL オフセットを与えるブレークポイント文字列は、整形式の名前です。</param>
        <param name="functionName">Out パラメーター、関数の名前を返す場合に解析がない、入力文字列か、空の文字列入力文字列の形式が正しくありません。</param>
        <param name="nargs">省略可能な引数リストの引数の数を返す出力パラメーター。 引数リストがない場合、または文字列が整形式でない場合は、0 を返します。</param>
        <param name="arguments">Out パラメーターには、引数リストが存在しないか、入力文字列が正しくない場合、引数リストまたは空の文字列ですべての引数の型の名前のスペースで区切られた一覧を返しています。</param>
        <param name="returnType">出力パラメーター、入力で指定された関数の戻り値の型を含む文字列、または戻り値の型が見つからない場合は、空の文字列または入力文字列を取得するもの形式がありません。</param>
        <param name="offset">符号なし長整数の IL オフセットがありませんでした。 または、文字列が正しくない場合は、入力文字列またはゼロから IL オフセットを指定します。</param>
        <summary>クラスで実装された場合は、文字列を解析し、解析された出力情報を返します。 通常、このメソッドとして表されるブレークポイントに関する情報を解析する必要があるデバッガーによって呼び出されます、 <see langword="string" />です。 デバッガーは、フォームのユーザーによって入力されたブレークポイントがある可能性があります *functionname 引数\-ILoffset*します。 ブレークポイントの名前付きの文字列になど、複雑な形式がある <c>F.B(C.D[], int, arg : double ) : C.Abc + 123.</c> IL オフセットは、パラメーター リストはオプションです。</summary>
        <returns>返します。 <see langword="true" /> 名前付きのブレークポイントが正常に解析された場合 <see langword="false" /> それ以外の場合。</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>