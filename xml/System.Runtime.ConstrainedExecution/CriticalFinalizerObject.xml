<Type Name="CriticalFinalizerObject" FullName="System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
  <TypeSignature Language="C#" Value="public abstract class CriticalFinalizerObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CriticalFinalizerObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>派生クラス内のすべての終了コードをクリティカルとしてマークされることを確認します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生するクラス、 <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject> クラスは暗黙的に制約された実行領域 \(CER\) として扱われます。  これには、ファイナライザーを厳密な信頼性コントラクトを持つコードを呼び出すだけでコードが必要です。 Cer の詳細については、次を参照してください。、 <xref:System.Runtime.ConstrainedExecution> 名前空間。  
  
 派生したクラスで、 <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject> クラス、共通言語ランタイム \(CLR\) の保証がクリティカル ファイナライズのすべてのコードが許可できることを実行する機会を提供、ファイナライザー、できなかったり、CLR に強制的にアプリケーション ドメインをアンロード スレッドの中止であっても、CER の規則に従います。 ファイナライザー CER の規則に違反することが正常に実行されなくなります。 さらに、CLR は通常および重要なファイナライザー間弱い順序付けを確立します。 クリティカル ファイナライザーのいずれかの前に、同時にガベージ コレクションによって回収されるオブジェクトの重要でないすべてのファイナライザーが呼び出されます。 などのクラスなど <xref:System.IO.FileStream>, 、内のデータを保持する、 <xref:System.Runtime.InteropServices.SafeHandle> から派生したクラスを <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>, 、バッファー内の既存のデータをフラッシュする標準的なファイナライザーを実行できます。  
  
 ほとんどの場合はから派生するクラスを作成する必要はありません、 <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject> クラスです。 .NET Framework クラス ライブラリには、2 つのクラスが用意されています <xref:System.Runtime.InteropServices.SafeHandle> と <xref:System.Runtime.InteropServices.CriticalHandle>, 、ハンドル リソース クリティカル ファイナライズ機能を提供します。 さらに、.NET Framework には一連の定義済みのクラスから派生した、 <xref:System.Runtime.InteropServices.SafeHandle> にクラス、およびこのセットがある、 <xref:Microsoft.Win32.SafeHandles> 名前空間。 これらのクラスは、ファイルおよびオペレーティング システム ハンドルをサポートするための一般的な機能を提供する設計されています。  
  
   
  
## 例  
 次のコード例の使用を示しています、 <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> 標準入力と出力ストリームに重大な終了処理を提供するクラス。<xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, から派生した、 <xref:System.Runtime.InteropServices.SafeHandle> クラス、ファイル ストリームに渡される、 <xref:System.IO.FileStream> コンス トラクターです。  
  
 [!code-csharp[SafeHandle.SafeFileHandle\#1](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle.SafeFileHandle/CS/program.cs#1)]
 [!code-vb[SafeHandle.SafeFileHandle\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SafeHandle.SafeFileHandle/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">for permission to call unmanaged code. Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This class cannot be used by partially trusted code.</permission>
    <altmember cref="T:System.Runtime.InteropServices.SafeHandle" />
    <altmember cref="T:System.Runtime.InteropServices.CriticalHandle" />
    <altmember cref="N:Microsoft.Win32.SafeHandles" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CriticalFinalizerObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for permission to call unmanaged code. Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This class cannot be used by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CriticalFinalizerObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> クラスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生する任意の型のファイナライザー <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject> する機会が与えられますを実行し、中断できない、ファイナライザーが正常に制約された実行領域 \(CER\) の規則に従いますと仮定した場合します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>