<Type Name="Cer" FullName="System.Runtime.ConstrainedExecution.Cer">
  <TypeSignature Language="C#" Value="public enum Cer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Cer extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ConstrainedExecution.Cer" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>制約された実行領域内で呼び出されたときに、メソッドの動作を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.ConstrainedExecution.Cer> 列挙体は、メソッド、型、または制約された実行領域 \(CER\) 内にあるアセンブリの動作を指定します。 エンティティが成功になっていることを示すために使用可能な 3 つの値のいずれかは、CER の情報を持たないと、成功または失敗を報告する可能性があります \(確定的に\) できません。  
  
 CER コードの領域に実行される保証は、中断のない、中止されたスレッドのメモリ不足の例外、またはスタック オーバーフローなど、非同期例外が発生した場合でもです。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Runtime.ConstrainedExecution.Cer> 列挙メソッドの制約された実行領域を指定する場合。 このコード例が示されている例の一部は、 <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A> コンス トラクターです。  
  
 [!code-csharp[System.Runtime.ConstrainedExecution\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.ConstrainedExecution/cs/program.cs#3)]
 [!code-vb[System.Runtime.ConstrainedExecution\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.ConstrainedExecution/vb/program.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions" />
    <altmember cref="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle)" />
  </Docs>
  <Members>
    <Member MemberName="MayFail">
      <MemberSignature Language="C#" Value="MayFail" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Cer MayFail = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.ConstrainedExecution.Cer.MayFail" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Cer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>例外的な状況が発生した場合、メソッドは失敗します。 この場合、メソッドが報告される呼び出し元のメソッドが成功したか失敗したかどうか。 メソッドは、戻り値を報告できることを確認するには、メソッド本体を CER が必要です。</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Cer None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.ConstrainedExecution.Cer.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Cer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メソッド、型、またはアセンブリには、CER の概念がありません。 CER の保証の利点は考慮しません。 これは、次を意味します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
-   例外的な状況が発生した場合、メソッドは失敗します。  
  
-   メソッドは、可能性がありますか、失敗したレポートしない可能性があります \(これは、非決定的です\)。  
  
-   Cer では、メソッドを念頭に置いては最も可能性の高いシナリオ\) 書き込まれません。  
  
 暗黙的にマークされているメソッド、型、またはアセンブリが明示的にマークされていない場合は成功、 `Cer.None`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Success">
      <MemberSignature Language="C#" Value="Success" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Cer Success = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.ConstrainedExecution.Cer.Success" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Cer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>例外的な状況が発生した場合、メソッドは成功することが保証します。 常に、CER 以外の領域内から呼び出されたときも、呼び出されるメソッドの周囲 CER を構築する必要があります。 メソッドは、実行するには適切では正常に完了しました。 マーキングなど <see cref="P:System.Collections.ArrayList.Count" /> と <c>ReliabilityContractAttribute(Cer.Success)</c> 、cer の元で実行されるときに常が返されることで要素の数のカウントが示すよう、 <see cref="T:System.Collections.ArrayList" /> し、不定状態で内部フィールドまま残ることはありません。</summary>
      </Docs>
    </Member>
  </Members>
</Type>