<Type Name="CompositionContainer" FullName="System.ComponentModel.Composition.Hosting.CompositionContainer">
  <TypeSignature Language="C#" Value="public class CompositionContainer : System.ComponentModel.Composition.Hosting.ExportProvider, IDisposable, System.ComponentModel.Composition.ICompositionService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositionContainer extends System.ComponentModel.Composition.Hosting.ExportProvider implements class System.ComponentModel.Composition.ICompositionService, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Composition.Hosting.ExportProvider</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Composition.ICompositionService</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>パーツの構成を管理します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> オブジェクトは、アプリケーションで 2 つの主要な目的を提供します。 最初に、追跡しののどの部分が合成に使用できる、依存関係が利用可能な一連のパーツの変更されるたびに、合成を実行するとします。 次に、アプリケーションをされたパーツのインスタンスを取得またはコンポーザブル パーツの依存関係を設定する方法を提供します。  
  
> [!IMPORTANT]
>  この型は、 <xref:System.IDisposable> インターフェイスです。 型の使用が完了したらを直接または間接的にその破棄する必要があります。 型の直接 dispose を呼び出してその <xref:System.IDisposable.Dispose%2A> メソッドで、 `try`\/`catch` ブロックします。 直接ことのない破棄する場合など言語構成要素を使用して `using` \(c\#\) のまたは `Using` \(Visual Basic で\)。 詳細については、"を使用して、オブジェクトを実装して IDisposable"」セクションを参照してください、 <xref:System.IDisposable> インターフェイスに関するトピック。  
  
 パーツが利用できるコンテナーにするか直接または、 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog%2A> プロパティです。 この探索可能なすべてのパーツ <xref:System.ComponentModel.Composition.Primitives.ComposablePartCatalog> を直接追加された任意のパーツと共にのインポートを満たすために、コンテナーを使用します。  
  
 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A> メソッドを使用して既存のコンテナーに追加するインスタンス化された部分で構成します。 合成が成功したと仮定した場合、これらのパーツが、コンテナーから取得したパーツで埋められたインポートあり、エクスポートが他の部分を使用できます。 再合成可能としてマークされているインポートは、再構成されるように登録されます。  
  
 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce%2A> メソッドを使用して、部品にそのインポートをコンテナーに追加しなくても入力します。 合成が成功した場合は、そのパートのインポートがいっぱいになるが、パーツのエクスポートは他の部分は使用できず、再構成のインポートは登録されません。  
  
 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> オブジェクトを破棄することが常にする必要があります。 ときに、 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose%2A> メソッドが呼び出されると、 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> オブジェクトが作成されたすべての部分を破棄します。  
  
 A <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> で複数のスレッドからアクセスできるオブジェクトを作成する必要があります、 `isThreadSafe` パラメーターを設定する `true`, を使用して、 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.%23ctor%28System.ComponentModel.Composition.Primitives.ComposablePartCatalog%2CSystem.Boolean%2CSystem.ComponentModel.Composition.Hosting.ExportProvider%5B%5D%29> コンス トラクターです。 パフォーマンスはわずかに低下される場合によくなります `isThreadSafe` は `true`, には、このパラメーターを設定することをお勧めしているため、 `false` シングル スレッドのシナリオでします。 既定値は、`false` です。  
  
> [!WARNING]
>  A <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> 自体、またはをへの参照を持つパートを読み込まない必要があります。 このような参照により、アクセスするために、コンテナー内のすべての部分信頼されていない一部です。  
  
   
  
## 例  
 次の例では、 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> オブジェクトがカタログに初期化され、パートのインポートの塗りつぶしに使用します。 この例では、属性付きプログラミング モデルを使用します。  
  
 [!code-csharp[Composition.CompositionContainer\#1](~/samples/snippets/csharp/VS_Snippets_Misc/composition.compositioncontainer/cs/program.cs#1)]
 [!code-vb[Composition.CompositionContainer\#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/composition.compositioncontainer/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="providers">配列 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> を提供するオブジェクト、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> へのアクセスを <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクト、または <see langword="null" /> を設定する <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> 空 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 指定したエクスポート プロバイダーとのクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providers" /> ある要素を含む <see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (System.ComponentModel.Composition.Hosting.CompositionOptions compositionOptions, System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ComponentModel.Composition.Hosting.CompositionOptions compositionOptions, class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="compositionOptions" Type="System.ComponentModel.Composition.Hosting.CompositionOptions" />
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="compositionOptions">このコンテナーの動作を指定するオブジェクト。</param>
        <param name="providers">配列 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> を提供するオブジェクト、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> へのアクセスを <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクト、または <see langword="null" /> を設定する <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> 空 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> クラスを指定したエクスポートのプロバイダーとオプションを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providers" /> ある要素を含む <see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalog" Type="System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">提供するカタログ <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトを <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />です。</param>
        <param name="providers">配列 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> を提供するオブジェクト、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> へのアクセスを <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクト、または <see langword="null" /> を設定する <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> 空 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> カタログが指定されたクラスし、プロバイダーをエクスポートします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providers" /> ある要素を含む <see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, bool isThreadSafe, System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, bool isThreadSafe, class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalog" Type="System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">提供するカタログ <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトを <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />です。</param>
        <param name="isThreadSafe">
          <see langword="true" /> この場合 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトがスレッド セーフの場合、それ以外の場合にする必要があります <see langword="false" />します。</param>
        <param name="providers">配列 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> を提供するオブジェクト、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> へのアクセスを <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクト、または <see langword="null" /> を設定する、 <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> プロパティを空に <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> クラスを指定したカタログにスレッド セーフ モードとプロバイダーをエクスポートします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> 複数のスレッドからアクセスできるオブジェクトを設定する必要があります、 `isThreadSafe` パラメーターを `true`します。 パフォーマンスはわずかに低下される場合によくなります `isThreadSafe` は `true`, には、このパラメーターを設定することをお勧めしているため、 `false` シングル スレッドのシナリオでします。 既定値は、`false` です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">1 つまたは複数の要素の <paramref name="providers" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, System.ComponentModel.Composition.Hosting.CompositionOptions compositionOptions, System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, valuetype System.ComponentModel.Composition.Hosting.CompositionOptions compositionOptions, class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalog" Type="System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />
        <Parameter Name="compositionOptions" Type="System.ComponentModel.Composition.Hosting.CompositionOptions" />
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">提供するカタログ <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトを <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />です。</param>
        <param name="compositionOptions">コンテナーの動作に影響するオプションを指定するオブジェクト。</param>
        <param name="providers">配列 <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> を提供するオブジェクト、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> へのアクセスを <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクト、または <see langword="null" /> を設定する <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> 空 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> クラスを指定したカタログ、オプション、およびプロバイダーをエクスポートします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providers" /> ある要素を含む <see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Catalog">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.Primitives.ComposablePartCatalog Catalog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Composition.Primitives.ComposablePartCatalog Catalog" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ComposablePartCatalog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> にコンテナーへのアクセスを提供する <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトです。</summary>
        <value>カタログを提供する、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> から生成されるエクスポートへのアクセス <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> オブジェクトです。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトが破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Compose">
      <MemberSignature Language="C#" Value="public void Compose (System.ComponentModel.Composition.Hosting.CompositionBatch batch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compose(class System.ComponentModel.Composition.Hosting.CompositionBatch batch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="batch" Type="System.ComponentModel.Composition.Hosting.CompositionBatch" />
      </Parameters>
      <Docs>
        <param name="batch">変更、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 構成時に含めます。</param>
        <summary>追加するか、指定した部分を削除 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> コンテナーから合成を実行するとします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、直接追加またはコンテナーからパーツを削除する主な方法です。<xref:System.ComponentModel.Composition.Hosting.CompositionContainer> 安定性、構成済みの状態を常に維持します。 そのため、 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A> 空の <xref:System.ComponentModel.Composition.Hosting.CompositionBatch> コンポジションを開始する必要はありません。 代わりに、 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A> メソッドを使用可能な部分に変更を加える場合は必ず、 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>です。  
  
 <xref:System.ComponentModel.Composition.Hosting.CompositionBatch> パーツを追加して削除するパーツの両方を含めることができます。  再構成は行わ 1 回だけを呼び出すたびに <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A>します。  
  
   
  
## 例  
 この単純な例では 3 つの部分の作成し、に追加、 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>, 、すべてのインポートに空き領域があるかを表示する 1 つの部分を取得します。 この例では、属性付きプログラミング モデルを使用します。  
  
 [!code-csharp[Composition.CompositionContainer.Compose\#1](~/samples/snippets/csharp/VS_Snippets_Misc/composition.compositioncontainer.compose/cs/program.cs#1)]
 [!code-vb[Composition.CompositionContainer.Compose\#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/composition.compositioncontainer.compose/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Dispose` を使い終わったら <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> を呼び出します。`Dispose` メソッドによって、<xref:System.ComponentModel.Composition.Hosting.CompositionContainer> は使用不可の状態になります。 呼び出した後 `Dispose`, 、に対するすべての参照を解放する必要があります、 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> ガベージ コレクターがメモリをクリアできるようにする、 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> によって占有されていた。  
  
 詳細については、[Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) および [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9) を参照してください。  
  
> [!NOTE]
>  `Dispose` への最後の参照を解放する前に、必ず <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> を呼び出してください。 そうしないと、ガベージ コレクターが <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportsCore">
      <MemberSignature Language="C#" Value="protected override System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">条件を定義するオブジェクト、 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトを取得します。</param>
        <param name="atomicComposition">を使用する合成トランザクションまたは <see langword="null" /> トランザクションの合成を無効にします。</param>
        <summary>指定した条件に一致するすべてのエクスポートのコレクションを返す <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> オブジェクトです。</summary>
        <returns>すべてのコレクション、 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> このオブジェクト <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトで指定された条件に一致する <paramref name="definition" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実装では、基数に関連する不一致をエラーとして処理しない必要があり、基数に関連する不一致の例外をスローする必要があります。 たとえば、インポートが正確に 1 つのエクスポートを要求し、プロバイダーが一致するエクスポートなしまたは 1 つ以上の場合、 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore%2A> メソッドは、空を返す必要があります <xref:System.Collections.Generic.IEnumerable%601> のコレクション <xref:System.ComponentModel.Composition.Primitives.Export> オブジェクトです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ComponentModel.Composition.Hosting.ExportProvider&gt; Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.ComponentModel.Composition.Hosting.ExportProvider&gt; Providers" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ComponentModel.Composition.Hosting.ExportProvider&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテナーへのアクセスを提供するエクスポート プロバイダーを追加取得 <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> オブジェクトです。</summary>
        <value>コレクション <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> を提供するオブジェクト、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> 追加へのアクセス <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトです。 既定値は空の <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> は破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExport">
      <MemberSignature Language="C#" Value="public void ReleaseExport (System.ComponentModel.Composition.Primitives.Export export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExport(class System.ComponentModel.Composition.Primitives.Export export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="export" Type="System.ComponentModel.Composition.Primitives.Export" />
      </Parameters>
      <Docs>
        <param name="export">
          <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> 解放する必要があります。</param>
        <summary>指定されたリリース <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトから、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの動作は、の実装によって異なる場合があります、 <xref:System.ComponentModel.Composition.Hosting.ExportProvider> を生成した、 <xref:System.ComponentModel.Composition.Primitives.Export> インスタンス。 原則として、コンテナーから非共有のエクスポートをデタッチする必要があります。  
  
 たとえば、 <xref:System.ComponentModel.Composition.Hosting.CatalogExportProvider> のみリリースされます、 <xref:System.ComponentModel.Composition.Primitives.Export> のものである場合、 <xref:System.ComponentModel.Composition.Primitives.ComposablePart> 下にある構築されている、 <xref:System.ComponentModel.Composition.CreationPolicy.NonShared> コンテキスト。 このコンテキストでリリースを意味の依存関係チェーンをたどることによる、 <xref:System.ComponentModel.Composition.Primitives.Export> オブジェクト\] コンテナーと呼び出し元からの参照をデタッチ `Dispose` で、 <xref:System.ComponentModel.Composition.Primitives.ComposablePart> オブジェクトを必要に応じて。 場合、 <xref:System.ComponentModel.Composition.Primitives.Export> で構築された、 <xref:System.ComponentModel.Composition.CreationPolicy.Shared> コンテキスト、 <xref:System.ComponentModel.Composition.Hosting.CatalogExportProvider> が何も指定した行いません <xref:System.ComponentModel.Composition.Primitives.Export> が他の要求側で使用されています。 これらはのみ、コンテナー自体が破棄されるときにデタッチされます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="export" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void ReleaseExport&lt;T&gt; (Lazy&lt;T&gt; export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExport&lt;T&gt;(class System.Lazy`1&lt;!!T&gt; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="export" Type="System.Lazy&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">エクスポートの型。</typeparam>
        <param name="export">削除するエクスポートを間接的に参照します。</param>
        <summary>指定したエクスポートを合成から削除し、可能であればそのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExports">
      <MemberSignature Language="C#" Value="public void ReleaseExports (System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExports(class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;" />
      </Parameters>
      <Docs>
        <param name="exports">コレクション <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトを解放します。</param>
        <summary>セットを解放 <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> オブジェクトから、 <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの動作は、対象のコンテキストによって異なる場合が、 <xref:System.ComponentModel.Composition.Primitives.Export> を構築しました。 詳細については、<xref:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport%2A> メソッドを参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exports" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="exports" /> ある要素を含む <see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void ReleaseExports&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExports&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">エクスポートの型。</typeparam>
        <param name="exports">削除するエクスポートへの間接参照のコレクション。</param>
        <summary>合成からエクスポートのコレクションを削除し、可能な場合は、リソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public void ReleaseExports&lt;T,TMetadataView&gt; (System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExports&lt;T, TMetadataView&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">エクスポートの型。</typeparam>
        <typeparam name="TMetadataView">エクスポートのメタデータ ビューの種類。</typeparam>
        <param name="exports">削除するエクスポートと、メタデータへの間接参照のコレクション。</param>
        <summary>合成からエクスポートのコレクションを削除し、可能な場合は、リソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SatisfyImportsOnce">
      <MemberSignature Language="C#" Value="public void SatisfyImportsOnce (System.ComponentModel.Composition.Primitives.ComposablePart part);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SatisfyImportsOnce(class System.ComponentModel.Composition.Primitives.ComposablePart part) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePart" />
      </Parameters>
      <Docs>
        <param name="part">インポートを満たす部分。</param>
        <summary>指定したインポートを満たす <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> 再構成されるように登録されていない場合のオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> オブジェクトが破棄されました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="part" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">構成中にエラーが発生しました。<see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> 発生したエラーのコレクションが含まれます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> で使用したリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>