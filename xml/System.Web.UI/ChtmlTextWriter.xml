<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ChtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ASP.NET サーバー コントロールの出力ストリームに、一連の cHTML 固有の文字とテキストを書き込みます。<see cref="T:System.Web.UI.ChtmlTextWriter" /> クラスには、ASP.NET サーバー コントロールが cHTML コンテンツをクライアントに表示したときに使用する書式設定機能が用意されています。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 HTML 2.0、HTML 3.2、および HTML 4.0 のサブセットは、コンパクトな HTML または cHTML、メモリの量が限られたデバイス上でレンダリングするよう設計されていて、CPU の能力、小さな画面と共に限定的な書式設定機能と \(携帯電話のタッチ パッド\) などの入力オプション数に制限します。 そのため、cHTML いない次をサポートしません。  
  
-   JPEG イメージ。  
  
-   テーブルです。  
  
-   イメージ マップします。  
  
-   複数の文字のフォントとスタイル。  
  
-   背景色と画像です。  
  
-   フレームです。  
  
-   スタイル シートです。  
  
 <xref:System.Web.UI.ChtmlTextWriter> クラスから派生する、 <xref:System.Web.UI.Html32TextWriter> クラスとその機能の大部分がによって提供される、 <xref:System.Web.UI.Html32TextWriter> はすべてのマークアップ テキスト ライターの基本クラスと、 <xref:System.Web.UI.HtmlTextWriter> クラスです。  
  
   
  
## 例  
 次のコード例は、という名前のクラスを作成する方法を示します `CustomChtmlTextWriter` から派生するが、 <xref:System.Web.UI.ChtmlTextWriter> クラスです。 2 つのコンス トラクターを作成し、上書き、 <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> しないようにする方法、 `bgcolor` スタイル属性の出力ストリームに書き込まれてから、 <xref:System.Web.UI.ChtmlTextWriter> オブジェクトです。 という名前のクラスも作成 `ChtmlCustomPageAdapter` 1 つのメソッドを定義する `CreateCustomChtmlTextWriter`, を作成してのインスタンスを返しますが、 `CustomChtmlTextWriter` クラスです。`CustomChtmlTextWriter` CHTML マークアップを使用しているブラウザーを使用してデバイスにページの cHTML コンテンツをレンダリングします。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter\_Sample4\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter\_Sample4\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> マークアップの内容を表示します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.ChtmlTextWriter" /> を使用するクラス、 <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> 行をインデントする定数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ChtmlTextWriter> クラスは、これは、標準から直接または間接的に派生するすべてのクラスを 2 つのコンス トラクターには、 <xref:System.Web.UI.HtmlTextWriter> クラスです。  
  
 <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> のインスタンスを受け取るコンス トラクター、 <xref:System.IO.TextWriter> クラスをパラメーターとしてには、2 番目のコンス トラクターを呼び出し、2 つのパラメーター値を渡します。  
  
-   <xref:System.IO.TextWriter>。  
  
-   指定されている文字列値、 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> フィールドには、XHTML テキスト ライターによって使用されるタブの間隔を指定します。  
  
   
  
## 例  
 という名前のクラスを作成する方法を次のコード例に示します `ChtmlCustomPageAdapter` 、1 つのメソッドを定義および `CreateCustomChtmlTextWriter`, を作成してのインスタンスを返しますが、 `CustomChtmlTextWriter` クラスです。`CustomChtmlTextWriter` CHTML マークアップを使用しているブラウザーを使用してデバイスにページのコンテンツを cHTML をレンダリングします。  
  
 このコード例が示されている例の一部は、 <xref:System.Web.UI.ChtmlTextWriter> クラスです。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter\_Sample4\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter\_Sample4\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> マークアップの内容を表示します。</param>
        <param name="tabString">定義されているスペースの数、 <see cref="P:System.Web.UI.HtmlTextWriter.Indent" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.ChtmlTextWriter" /> クラスで指定された行のインデントします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> コンス トラクターは、両方のインスタンスを受け取り、 <xref:System.IO.TextWriter> クラスと文字列を呼び出し、パラメーターとして、 <xref:System.Web.UI.Html32TextWriter> のインスタンスを作成するときに、同じパラメーターを受け取るコンス トラクター、 <xref:System.Web.UI.ChtmlTextWriter> クラスです。  
  
   
  
## 例  
 次のコード例は、という名前のカスタム クラスを作成する方法を示します `CustomChtmlTextWriter` から派生するが、 <xref:System.Web.UI.ChtmlTextWriter> クラスです。 に直接派生するすべてのクラスとしてもから間接的にも同じパターンを持つカスタム クラスのインスタンスを作成に使用できる 2 つのコンス トラクターを作成、 <xref:System.Web.UI.HtmlTextWriter> クラスです。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter\_Sample4\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter\_Sample4\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">属性を追加する cHTML 要素。</param>
        <param name="attributeName">追加する属性 <c>elementName</c>します。</param>
        <summary>CHTML 要素に属性を追加、 <see cref="T:System.Web.UI.ChtmlTextWriter" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> メソッドは、cHTML 要素に属性を追加します。 認識されている属性は認識されている属性に格納 <xref:System.Collections.Hashtable> のコレクション、 <xref:System.Web.UI.ChtmlTextWriter> によって参照されるオブジェクト、 <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Collections.Hashtable" /> cHTML 要素では描画できないグローバルに抑制されている属性のオブジェクト。</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> グローバルに抑制された cHTML 属性です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の一覧との新しいインスタンスに設定されているグローバルに抑制されている属性を示しています、 <xref:System.Web.UI.ChtmlTextWriter> クラスを作成します。  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">レンダリングする cHTML 属性です。</param>
        <param name="value">割り当てられた値 <c>name</c>です。</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> に関連付けられている <c>name</c>。</param>
        <summary>指定した cHTML 属性とその値を要求側のページを表示するかを決定します。 オーバーライドすることができます、 <see cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> から派生するクラスのメソッド、 <see cref="T:System.Web.UI.ChtmlTextWriter" /> をそのサポート cHTML デバイス上でレンダリングしたくない属性をフィルター処理するクラス。</summary>
        <returns>
          <see langword="true" /> 属性とその値を書き込む、 <see cref="T:System.Web.UI.ChtmlTextWriter" /> 出力ストリーム。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、 <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> メソッドにより、グローバルに抑制されている属性に記載されている、 <xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A> プロパティおよびに記載されている、要素に固有の非表示になる属性、 <xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A> プロパティを出力ストリームに書き込まれているからです。 動作をオーバーライドすることができます、 <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> から派生したクラスのメソッド、 <xref:System.Web.UI.ChtmlTextWriter> クラスです。  
  
   
  
## 例  
 次のコード例では、オーバーライドするカスタム クラスを使用して、 <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> しないようにする方法、 `bgcolor` cHTML 出力ストリームに書き込まれてからの属性です。 ベースで提供される機能を順に呼び出して <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> メソッドから、 <xref:System.Web.UI.ChtmlTextWriter> クラスを既定の動作が使用されるように、すぎます。  
  
 このコード例が示されている例の一部は、 <xref:System.Web.UI.ChtmlTextWriter> クラスです。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter\_Sample4\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter\_Sample4\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">出力するスタイル属性の名前を含む文字列。</param>
        <param name="value">割り当てられている値を表す文字列 <c>name</c>します。</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> に関連付けられている <c>name</c>。</param>
        <summary>指定した cHTML マークアップのスタイル属性とその値を現在のマークアップ要素を出力するかを決定します。</summary>
        <returns>
          <see langword="true" /> スタイルをレンダリングする場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender%2A> メソッドが返す `false` と `key` に等しい、 <xref:System.Web.UI.HtmlTextWriterStyle.TextDecoration> フィールドと値が `"line-through"`です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">出力する cHTML 要素の名前を含む文字列。</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> に関連付けられている <c>name</c>。</param>
        <summary>指定した cHTML マークアップ要素が要求側のページにレンダリングされるかどうかを決定します。</summary>
        <returns>
          <see langword="true" /> 指定した cHTML マークアップ要素をレンダリングする場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 CHTML 要素がある場合、 `span` 要素、 <xref:System.Web.UI.ChtmlTextWriter.OnTagRender%2A> メソッドが返す `false`します。 その他のすべてのタグを返します `true`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Collections.Hashtable" /> cHTML 要素に表示することが認識されている属性のオブジェクト。</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> 認識 cHTML 属性です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> 認識を追加するメソッドの属性は認識されている属性コレクションにします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">属性を削除する cHTML 要素。</param>
        <param name="attributeName">削除する属性 <c>elementName</c>します。</param>
        <summary>CHTML 要素の属性を削除する、 <see cref="T:System.Web.UI.ChtmlTextWriter" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> メソッドは、cHTML 要素から属性を削除します。 認識されている属性が認識されている属性から削除 <xref:System.Collections.Hashtable> のコレクション、 <xref:System.Web.UI.ChtmlTextWriter> によって参照されるオブジェクト、 <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Collections.Hashtable" /> ユーザー指定のオブジェクトが cHTML 要素にはレンダリングされません属性を抑制します。</summary>
        <value>A <see cref="T:System.Collections.Hashtable" /> 抑制された cHTML 属性です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> メソッドを非表示になる属性のコレクションに属性を追加します。  
  
 次の一覧に設定されている非表示に既定の属性を示しています、 `div` 要素の新しいインスタンスの場合に、 <xref:System.Web.UI.ChtmlTextWriter> クラスを作成します。  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 次の一覧に設定されている非表示に既定の属性を示しています、 `span` 要素の新しいインスタンスの場合に、 <xref:System.Web.UI.ChtmlTextWriter> クラスを作成します。  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>書き込み、 <see langword="br" /> 、cHTML に要素がストリームを出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> cHMTL のストリームに行を挿入するメソッドに分割します。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例では、cHTML クラスおよびカスタム プロパティを作成する方法を示します。 2 つ目のコード例では、Web ページで、カスタム クラスを使用する方法を示します。  
  
 ユーザー設定を使用する `ChtmlSimplelabelAdapter` アダプター、適切なのマシン レベルのファイルがサブディレクトリ内の .NET Framework 構成ディレクトリまたは Web アプリケーション ルートの直下の App\_Browsers ディレクトリ内のカスタム ブラウザー ファイルをブラウザーのいずれかに、次のコードを追加します。  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 次のコード例では、という cHTML アダプター クラスを作成 `ChtmlSimpleLabelAdapter` という名前のクラスの `SimpleLabel`です。 カスタムを作成して `Control` プロパティを使用できます、 `ChtmlSimpleLabelAdapter` クラスのメンバーにアクセスする、 `SimpleLabel` クラス、および、上書き、 <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> メソッドです。 オーバーライドでは、次の処理が行われます。  
  
-   参照を作成、 <xref:System.Web.UI.ChtmlTextWriter> という名前のオブジェクト `w`, から派生した、 <xref:System.Web.UI.HtmlTextWriter> として渡されるオブジェクト、 `writer` のパラメーター、 <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> メソッドです。  
  
-   文字列を作成して設定を `SimpleLabel.Text` 値。  
  
-   呼び出す、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> によって定義されているスタイルを適用するメソッド、 <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> 、cHTML にラベルのプロパティは、ストリームを出力します。  
  
-   書き込む、 `Text` プロパティの値をストリームと呼び出すことによってスタイル ブロックが閉じ、 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> メソッドです。  
  
-   呼び出す、 <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> をレンダリングする方法、 `br` 要素のテキストとスタイルのレンダリング後の出力ストリームにします。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter\_Sample1\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter\_Sample1\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.vb#2)]  
  
 次の例では、使用して、 `SimpleLabel` Web ページ内のクラスです。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter\_Sample1\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.aspx#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter\_Sample1\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">エンコードして出力ストリームに書き込む文字列。</param>
        <summary>要求元のデバイスで指定したテキストをエンコードし、それを出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列パラメーターに渡す場合、 <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> メソッドは `null` または長さ 0 の場合の何も書き込まれません。  
  
 使用して、 <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> メソッド \(string\) には、山かっこが含まれている場合 \(\< や \>\) またはアンパサンド \(& を\) 要求元のデバイスに正常にレンダリングされるはことを確認するとします。  
  
 <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> メソッドは、基本クラスを使用して <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.ChtmlTextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>