<Type Name="ScriptResourceAttribute" FullName="System.Web.UI.ScriptResourceAttribute">
  <TypeSignature Language="C#" Value="public sealed class ScriptResourceAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ScriptResourceAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptResourceAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>クライアント スクリプト ファイルから使用するアセンブリのリソースを定義します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptResourceAttribute> クラスが使用する場合のみ、アセンブリの宣言で有効です。 アセンブリ内の指定した埋め込みスクリプト リソースを使用するとします。 埋め込みスクリプト ライブラリの名前、スクリプト ライブラリのリソース ファイルの名前およびリソースの値を取得するためのスクリプト ファイルで使用されている名前を定義できます。<xref:System.Web.UI.ScriptManager> クラスのプロパティを使用して <xref:System.Web.UI.ScriptResourceAttribute> スクリプト ライブラリの適切なリソース名を特定します。<xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A> プロパティは、リソースを指定するリソースのキーで使用します。  
  
> [!NOTE]
>  <xref:System.Web.UI.ScriptResourceAttribute> クラスは、JavaScript ファイルのテキスト ベースのリソースの特定にのみ使用できます。 特定のカルチャにローカライズされたイメージ \(バイナリ\) ファイルを関連付ける、解決済みおよびに読み込まれたスクリプトをする、ローカライズされたリソースとしては、その URL を格納することを検討してください。  
  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.ScriptResourceAttribute> という CheckAnswer.js VerificationResources リソース ファイルからリソースを使用するスクリプト ファイルの属性です。 名前 `Answer` これらのリソースを参照するために使用します。  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough\#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough\#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 次の例では、クライアント スクリプトのリソースを使用する方法を示します。 リソース キー \(`Correct` と `Incorrect`\) が付いている `Answer` に値を含むスクリプト リソースの定義を識別します。  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
 [!code-javascript[LocalizingClientResourcesWalkthrough\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/CheckAnswer.js#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptResourceAttribute (string scriptName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string scriptName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptResourceAttribute.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">スクリプト ライブラリの名前。</param>
        <summary>
          <see cref="T:System.Web.UI.ScriptResourceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptResourceAttribute (string scriptName, string stringResourceName, string stringResourceClientTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string scriptName, string stringResourceName, string stringResourceClientTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptResourceAttribute.#ctor(System.String,System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
        <Parameter Name="stringResourceName" Type="System.String" />
        <Parameter Name="stringResourceClientTypeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">スクリプト ライブラリの名前。</param>
        <param name="stringResourceName">スクリプト ライブラリのリソース ファイルの名前。</param>
        <param name="stringResourceClientTypeName">リソース ファイル内の値を作成する型の名前。</param>
        <summary>
          <see cref="T:System.Web.UI.ScriptResourceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptResourceAttribute.%23ctor%2A> を使用して通常メソッドが呼び出されます、 <xref:System.Web.UI.ScriptResourceAttribute> アプリケーションの AssemblyInfo ファイル内のアセンブリ属性と属性。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="scriptName" />, 、<paramref name="scriptResourceName" />, 、または <paramref name="typeName" /> は <see langword="null" /> または空の文字列 \(""\) です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ScriptName">
      <MemberSignature Language="C#" Value="public string ScriptName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.ScriptName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スクリプト ライブラリの名前を取得します。</summary>
        <value>スクリプト ライブラリの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.ScriptResourceAttribute> という CheckAnswer.js VerificationResources リソース ファイルからリソースを使用するスクリプト ファイルの属性です。 名前 `Answer` これらのリソースを参照するために使用します。 この例では、 <xref:System.Web.UI.ScriptResourceAttribute.ScriptName%2A> "LocalizingResources.CheckAnswer.js"を返します。  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough\#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough\#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 次の例では、クライアント スクリプトのリソースを使用する方法を示します。 リソース キー \(`Correct` と `Incorrect`\) が付いている `Answer` に値を含むスクリプト リソースの定義を識別します。  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
 [!code-javascript[LocalizingClientResourcesWalkthrough\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/CheckAnswer.js#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptResourceName">
      <MemberSignature Language="C#" Value="public string ScriptResourceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.ScriptResourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Use StringResourceName instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スクリプト ライブラリのリソース ファイルの名前を取得します。</summary>
        <value>スクリプト ライブラリのリソース ファイルの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.ScriptResourceAttribute> という CheckAnswer.js VerificationResources リソース ファイルからリソースを使用するスクリプト ファイルの属性です。 名前 `Answer` これらのリソースを参照するために使用します。 この例では、 <xref:System.Web.UI.ScriptResourceAttribute.ScriptResourceName%2A> "LocalizingResources.VerificationResources"を返します。 ファイル名拡張子は含まれませんを定義するとき、 <xref:System.Web.UI.ScriptResourceAttribute.ScriptResourceName%2A>です。  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough\#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough\#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 次の例では、クライアント スクリプトのリソースを使用する方法を示します。 リソース キー \(`Correct` と `Incorrect`\) が付いている `Answer` に値を含むスクリプト リソースの定義を識別します。  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
 [!code-javascript[LocalizingClientResourcesWalkthrough\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/CheckAnswer.js#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringResourceClientTypeName">
      <MemberSignature Language="C#" Value="public string StringResourceClientTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringResourceClientTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.StringResourceClientTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リソース ファイル内の値を作成するクライアントの種類の名前を取得します。</summary>
        <value>クライアントの種類の名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringResourceName">
      <MemberSignature Language="C#" Value="public string StringResourceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.StringResourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スクリプト ライブラリのリソース ファイルの名前を取得します。</summary>
        <value>リソース ファイルの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Use StringResourceClientTypeName instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リソース ファイル内の値を取得するときに使用される名前を取得します。</summary>
        <value>リソース ファイル内の値を取得するときに、クライアント スクリプトで使用される名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A> プロパティには、クライアント スクリプトのローカライズされたリソースを取得するために使用される値が含まれています。 クライアント スクリプトを含める必要があります、 <xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A> 値とリソースをローカライズするのには、キーの名前。  
  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.ScriptResourceAttribute> という CheckAnswer.js VerificationResources リソース ファイルからリソースを使用するスクリプト ファイルの属性です。 名前 `Answer` これらのリソースを参照するために使用します。 この例では、 <xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A> プロパティを「回答」を返します。  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough\#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough\#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 次の例では、クライアント スクリプトのリソースを使用する方法を示します。 リソース キー \(`Correct` と `Incorrect`\) が付いている `Answer` に値を含むスクリプト リソースの定義を識別します。  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
 [!code-javascript[LocalizingClientResourcesWalkthrough\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/CheckAnswer.js#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.ScriptResourceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>