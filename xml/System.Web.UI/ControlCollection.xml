<Type Name="ControlCollection" FullName="System.Web.UI.ControlCollection">
  <TypeSignature Language="C#" Value="public class ControlCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ControlCollection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>その子コントロールのリストを保持する ASP.NET サーバー コントロールを有効にするコレクション コンテナーを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 メソッドとプロパティのいずれかにアクセスできる、 <xref:System.Web.UI.ControlCollection> クラスを通じて、 <xref:System.Web.UI.Control.Controls%2A?displayProperty=fullName> プロパティです。 以降、 <xref:System.Web.UI.Control> クラスは、すべての ASP.NET サーバー コントロールの基本クラス、すべてのサーバー コントロールは、このプロパティを継承します。  
  
 コレクションの詳細については、「[Collections and Data Structures](http://msdn.microsoft.com/ja-jp/60cc581f-1db5-445b-ba04-a173396bf872)」を参照してください。  
  
   
  
## 例  
 次のコード例の上書き、 <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=fullName> メソッドを 2 つのコントロール、という名前のカスタム クラスの両方のインスタンスを作成する `ChildControl`, 、という名前の文字列プロパティを持つ `Message`です。 2 つのコントロールを追加作成すると、 <xref:System.Web.UI.ControlCollection>です。<xref:System.Web.UI.ControlCollection.Add%2A> のこのバージョンを含むクラスに追加するには、各コントロールに対してメソッドを呼び出す <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=fullName>します。<xref:System.Web.UI.Control.ChildControlsCreated%2A> にプロパティが設定されている `true` されるため、これらのコントロールが不必要に再作成されません。  
  
 [!code-csharp[Control\_Sample\_1\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Control_Sample_1/CS/control_sample.cs#1)]
 [!code-vb[Control\_Sample\_1\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Control_Sample_1/VB/control_sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="P:System.Web.UI.Control.Controls" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlCollection (System.Web.UI.Control owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.Control owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.#ctor(System.Web.UI.Control)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="owner">コントロールのコレクションが作成される ASP.NET サーバー コントロール。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.ControlCollection" /> 、指定された親サーバー コントロールのクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、カスタム <xref:System.Web.UI.ControlCollection> メッセージを書き込むようにコンス トラクターをオーバーライドするクラス \(の名前を含む、 <xref:System.Web.UI.ControlCollection.Owner%2A> プロパティ\)、コレクションのインスタンスが作成されるときに、トレース ログにします。 ページのトレースまたはこの例を実行するアプリケーションを有効にする必要があります。  
  
 [!code-csharp[System.Web.UI.ControlCollection\_CTor\_Owner\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/cs/controlcollection_7.cs#1)]
 [!code-vb[System.Web.UI.ControlCollection\_CTor\_Owner\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/VB/controlcollection_7.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">場合に発生、 <paramref name="owner" /> パラメーターは <see langword="null" />です。</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (System.Web.UI.Control child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class System.Web.UI.Control child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Add(System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="child">コレクションに追加する <see cref="T:System.Web.UI.Control" />。</param>
        <summary>指定した <see cref="T:System.Web.UI.Control" /> オブジェクトをコレクションに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しいコントロールは、序数に基づくインデックスの配列の末尾に追加されます。 コントロールは、ASP.NET サーバー コントロールを作成したら、カスタム サーバー コントロールやリテラル コントロールのインスタンスであることができます。  
  
 コレクションの特定のインデックス位置にコントロールを追加するには、使用、 <xref:System.Web.UI.ControlCollection.AddAt%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.UI.ControlCollection.Add%2A> おり、その多くは、カスタム template 宣言されたコントロールをサーバー コントロールのビューステートから取得されますテンプレート項目の系列を追加するメソッドです。  
  
 [!code-csharp[TemplatedDataBoundControl\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/TemplatedDataBoundControl/CS/templatedataboundcontrol.cs#2)]
 [!code-vb[TemplatedDataBoundControl\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TemplatedDataBoundControl/VB/templatedataboundcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">スローされた場合、 <paramref name="child" /> パラメーターで、コントロールが指定されていません。</exception>
        <exception cref="T:System.Web.HttpException">スローされた場合、 <see cref="T:System.Web.UI.ControlCollection" /> は読み取り専用です。</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.AddAt(System.Int32,System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AddAt">
      <MemberSignature Language="C#" Value="public virtual void AddAt (int index, System.Web.UI.Control child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAt(int32 index, class System.Web.UI.Control child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.AddAt(System.Int32,System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="child" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="index">子コントロールを追加する位置を示す配列内の位置。</param>
        <param name="child">コレクションに追加する <see cref="T:System.Web.UI.Control" />。</param>
        <summary>指定した <see cref="T:System.Web.UI.Control" /> オブジェクトを指定したインデックス位置にあるコレクション。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 追加されたコントロールは、ASP.NET サーバー コントロールを作成したら、カスタム サーバー コントロールやリテラル コントロールのインスタンスであることができます。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.UI.ControlCollection.AddAt%2A> を新規に作成メソッド <xref:System.Web.UI.LiteralControl> という名前 `ChildControl2` にそれを追加し、 `myButton` コントロールの <xref:System.Web.UI.ControlCollection> 1 のインデックス位置にあるコレクション。  
  
 [!code-csharp[System.Web.UI.ControlCollection\_NewSamples\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#1)]
 [!code-vb[System.Web.UI.ControlCollection\_NewSamples\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="child" /> パラメーターで、コントロールが指定されていません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> パラメーターが 0 より大きいか小さい、 <see cref="P:System.Web.UI.ControlCollection.Count" /> プロパティです。</exception>
        <exception cref="T:System.Web.HttpException">
          <see cref="T:System.Web.UI.ControlCollection" /> は読み取り専用です。</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.Add(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のサーバー コントロールからのすべてのコントロールを削除 <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、空のカスタム コントロールの <xref:System.Web.UI.ControlCollection> オーバーライドする場合、 <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=fullName> と <xref:System.Web.UI.Control.DataBind%2A> メソッドです。 複合で template 宣言されたコントロールまたはテンプレートのデータ バインド コントロールを開発する際に、これを行います。  
  
   
  
## 例  
 次のコード例では、オーバーライドを示しています、 <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=fullName> メソッド、および使用して、 <xref:System.Web.UI.ControlCollection.Clear%2A> メソッドはすべての子コントロール以前に削除する、 <xref:System.Web.UI.ControlCollection> オブジェクトです。 ここでは、これを行うコントロールの内のオブジェクトを古いように <xref:System.Web.UI.ControlCollection> 不適切は表示されません。  
  
 [!code-csharp[TemplatedDataBoundControl\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/TemplatedDataBoundControl/CS/templatedataboundcontrol.cs#2)]
 [!code-vb[TemplatedDataBoundControl\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TemplatedDataBoundControl/VB/templatedataboundcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (System.Web.UI.Control c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Web.UI.Control c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Contains(System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="c">コレクション内で検索するサーバー コントロール。</param>
        <summary>指定したサーバー コントロールが親サーバー コントロールのかどうかを判断 <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトです。</summary>
        <returns>
          <see langword="true" /> 指定したサーバー コントロールがコレクションに存在する場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-csharp[System.Web.UI.ctrlCollection\_Contains\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.CtrlCollection_Contains/CS/ctrlcollection_contains.cs.aspx#1)]
 [!code-vb[System.Web.UI.ctrlCollection\_Contains\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.CtrlCollection_Contains/VB/ctrlcollection_contains.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Array" /> に子コントロールをコピーします。</param>
        <param name="index">コピーの開始位置となる、<c>array</c> の 0 から始まる相対インデックス番号。</param>
        <summary>格納されている子コントロールのコピー、 <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトを <see cref="T:System.Array" /> で指定したインデックス位置からのオブジェクト、 <see cref="T:System.Array" />です。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="array" /> <see langword="null" /> と次元されません。</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバー コントロールの数を取得、 <see cref="T:System.Web.UI.ControlCollection" /> 指定の ASP.NET サーバー コントロールのオブジェクト。</summary>
        <value>サーバー コントロールの数、 <see cref="T:System.Web.UI.ControlCollection" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.ControlCollection.Count%2A> プロパティをコントロールの反復処理する <xref:System.Web.UI.ControlCollection> オブジェクトです。 使用、 <xref:System.Web.UI.Control.HasControls%2A?displayProperty=fullName> プロパティは、コントロールに子コントロールがあることを確認します。 場合 <xref:System.Web.UI.Control.HasControls%2A?displayProperty=fullName> 返します `false`, 、残りのコードは実行されません。  
  
 [!code-csharp[Classic Control.HasControls Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Control.HasControls Example/CS/source.cs#1)]
 [!code-vb[Classic Control.HasControls Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Control.HasControls Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>反復処理できる列挙子を取得、 <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトです。</summary>
        <returns>コレクションを反復処理する列挙子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、列挙するメソッドを作成、 <xref:System.Web.UI.ControlCollection> のコレクション、 <xref:System.Web.UI.WebControls.Button> コントロール、 `myButton`です。 列挙子の作成時に、 <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> プロパティをチェックして、操作スレッド セーフである場合とでない場合、 <xref:System.Web.UI.ControlCollection.SyncRoot%2A> プロパティを使用して、操作スレッドを安全にすることのオブジェクトを取得します。 列挙が完了すると、値の <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> としてプロパティを書き込む、 <xref:System.Web.UI.WebControls.Label.Text%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Label> を含むページ上のコントロールです。  
  
 [!code-csharp[System.Web.UI.ControlCollection\_NewSamples\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection\_NewSamples\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (System.Web.UI.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(class System.Web.UI.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.IndexOf(System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Web.UI.Control" /> のインデックスが返されます。</param>
        <summary>指定したインデックスを取得 <see cref="T:System.Web.UI.Control" /> コレクション内のオブジェクト。</summary>
        <returns>指定されたサーバー コントロールのインデックス。 サーバー コントロールは、現在のコレクションのメンバーではない、\-1 が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドで指定されたサーバー コントロールのインデックス位置を使用して、 <xref:System.Web.UI.ControlCollection> オブジェクトです。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.UI.ControlCollection.IndexOf%2A> 、コントロールのインデックス位置に書き込むメソッド `myLiteralControl`, の <xref:System.Web.UI.ControlCollection> のコレクション、 <xref:System.Web.UI.WebControls.Button> という名前のコントロール `myButton`します。  
  
 [!code-csharp[System.Web.UI.ControlCollection\_NewSamples\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#1)]
 [!code-vb[System.Web.UI.ControlCollection\_NewSamples\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトは読み取り専用です。</summary>
        <value>
          <see langword="true" /> コントロールが読み取り専用の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、列挙するメソッドを作成、 <xref:System.Web.UI.ControlCollection> のコレクション、 <xref:System.Web.UI.WebControls.Button> コントロール、 `myButton`です。 列挙子の作成時に、 <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> プロパティをチェックして、操作スレッド セーフである場合とでない場合、 <xref:System.Web.UI.ControlCollection.SyncRoot%2A> プロパティを使用して、操作スレッドを安全にすることのオブジェクトを取得します。 列挙体が終了すると、値の <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> としてプロパティを書き込む、 <xref:System.Web.UI.WebControls.Label.Text%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Label> を含むページ上のコントロールです。  
  
 [!code-csharp[System.Web.UI.ControlCollection\_NewSamples\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection\_NewSamples\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトを同期します。</summary>
        <value>このプロパティは常に <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、列挙するメソッドを作成、 <xref:System.Web.UI.ControlCollection> のコレクション、 <xref:System.Web.UI.WebControls.Button> コントロール、 `myButton`です。 列挙子の作成時に、 <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> プロパティをチェックして、操作スレッド セーフである場合とでない場合、 <xref:System.Web.UI.ControlCollection.SyncRoot%2A> プロパティを使用して、操作スレッドを安全にすることのオブジェクトを取得します。 列挙体が終了すると、値の <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> としてプロパティを書き込む、 <xref:System.Web.UI.WebControls.Label.Text%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Label> を含むページ上のコントロールです。  
  
 [!code-csharp[System.Web.UI.ControlCollection\_NewSamples\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection\_NewSamples\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Control this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">内のサーバー コントロールの場所、 <see cref="T:System.Web.UI.ControlCollection" />です。</param>
        <summary>指定したインデックス位置にあるサーバー コントロールへの参照を取得、 <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトです。</summary>
        <value>コントロールへの参照。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、 <xref:System.Web.UI.ControlCollection.Item%2A> で指定子のインデックス位置を制御するプロパティが削除されて、 <xref:System.Web.UI.ControlCollection.Remove%2A> メソッドの呼び出しです。 これを行う、 `myButton.Controls.Remove` 構文です。  
  
 [!code-csharp[ControlCollection\_ReSubmit\_2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlCollection_ReSubmit_2/CS/controlcollection_copyto.cs.aspx#1)]
 [!code-vb[ControlCollection\_ReSubmit\_2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlCollection_ReSubmit_2/VB/controlcollection_copyto.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> パラメーターが 0 未満またはより大きいか等しい <see cref="P:System.Web.UI.ControlCollection.Count" />します。</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="protected System.Web.UI.Control Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control Owner" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得する ASP.NET サーバー コントロール、 <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトが属しています。</summary>
        <value>
          <see cref="T:System.Web.UI.Control" /> 先、 <see cref="T:System.Web.UI.ControlCollection" /> が属しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、カスタム <xref:System.Web.UI.ControlCollection> をオーバーライドするクラス、 <xref:System.Web.UI.ControlCollection.%23ctor%2A> にメッセージを書き込みます \(の名前を含む、 <xref:System.Web.UI.ControlCollection.Owner%2A> プロパティ\)、コレクションのインスタンスが作成されるときに、トレース ログにします。 ページのトレースまたはこの例を実行するアプリケーションを有効にする必要があります。  
  
 [!code-csharp[System.Web.UI.ControlCollection\_CTor\_Owner\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/cs/controlcollection_7.cs#1)]
 [!code-vb[System.Web.UI.ControlCollection\_CTor\_Owner\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/VB/controlcollection_7.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (System.Web.UI.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.Web.UI.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Remove(System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="value">削除するサーバー コントロール。</param>
        <summary>指定されたサーバー コントロールを親サーバーのコントロールから削除 <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インデックス位置からコントロールを削除するには、使用、 <xref:System.Web.UI.ControlCollection.RemoveAt%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.UI.ControlCollection.Remove%2A> から子コントロールを削除する方法、 `myButton` サーバー コントロール。 最初のコードを使用して、 <xref:System.Web.UI.ControlCollection.Contains%2A> メソッドを呼び出せば確認するかどうか、 `myChildControl` に含まれる、 <xref:System.Web.UI.ControlCollection> オブジェクトし、している場合は、削除します。  
  
 [!code-csharp[System.Web.UI.ControlCollection\_NewSamples\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#4)]
 [!code-vb[System.Web.UI.ControlCollection\_NewSamples\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ControlCollection.RemoveAt(System.Int32)" />
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">コレクションから削除するサーバー コントロールの序数インデックス。</param>
        <summary>指定したインデックス位置の子コントロールから削除、 <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールをその値に基づいてコレクションから削除するには、使用、 <xref:System.Web.UI.ControlCollection.Remove%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.UI.ControlCollection.RemoveAt%2A> から子コントロールを削除する方法、 `myButton` サーバー コントロール。 メソッドの呼び出しは、最初にコントロールの削除元となる 1 のインデックスの場所を指定します。 次に、格納先への書き込みページから、その場所でコントロールが削除されたことを示すテキスト メッセージ、 <xref:System.Web.UI.ControlCollection> コレクションです。  
  
 [!code-csharp[System.Web.UI.ControlCollection\_NewSamples\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#5)]
 [!code-vb[System.Web.UI.ControlCollection\_NewSamples\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">スローされた場合、 <see cref="T:System.Web.UI.ControlCollection" /> は読み取り専用です。</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.Remove(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのコレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
        <value>
          <see cref="T:System.Object" /> コレクションを同期するために使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、列挙するメソッドを作成、 <xref:System.Web.UI.ControlCollection> のコレクション、 <xref:System.Web.UI.WebControls.Button> コントロール、 `myButton`です。 列挙子の作成時に、 <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> プロパティをチェックして、操作スレッド セーフである場合とでない場合、 <xref:System.Web.UI.ControlCollection.SyncRoot%2A> プロパティを使用して、操作スレッドを安全にすることのオブジェクトを取得します。 列挙体が終了すると、値の <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> としてプロパティを書き込む、 <xref:System.Web.UI.WebControls.Label.Text%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Label> を含むページ上のコントロールです。  
  
 [!code-csharp[System.Web.UI.ControlCollection\_NewSamples\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection\_NewSamples\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
  </Members>
</Type>