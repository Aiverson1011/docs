<Type Name="PageAsyncTask" FullName="System.Web.UI.PageAsyncTask">
  <TypeSignature Language="C#" Value="public sealed class PageAsyncTask" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PageAsyncTask extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageAsyncTask" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ページに登録されている、非同期タスクについてを説明します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET version 2.0 を使用すると、ページに複数のタスクを登録し、ページを表示する前に非同期的に実行できます。 タスクが、低速な処理は、他のプロセスが実行中に忙殺したくない場合に、非同期的に実行するかを指定することがあります。 並列または順番に、非同期タスクを実行できます。  
  
 A <xref:System.Web.UI.PageAsyncTask> を使用してページにオブジェクトを登録する必要があります、 <xref:System.Web.UI.Page.RegisterAsyncTask%2A> メソッドです。 ページ自体は、非同期タスクを実行する非同期に処理する必要はありません。 設定することができます、 `Async` 属性のいずれかに `true` \(次のコード例を参照\)、または `false` \] ページでディレクティブ、および非同期タスクは通常どおり処理する非同期的にします。  
  
 `<%@ Page Async="true" %>`  
  
 ときに、 `Async` に属性が設定されている `false`, 、すべての非同期タスクが完了するまで、ページを実行するスレッドはブロックされます。  
  
 非同期タスクを登録する前に、 <xref:System.Web.UI.Page.PreRenderComplete> イベントによって実行される自動的にページが既に実行されていない場合。 非同期タスクが登録した後、 <xref:System.Web.UI.Page.PreRenderComplete> を通じて明示的にイベントを実行する必要があります、 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> メソッドです。<xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> メソッドは、前にタスクを開始するも使用できる、 <xref:System.Web.UI.Page.PreRenderComplete> イベントです。<xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> メソッドが実行されていないページで登録されているすべての非同期タスクを実行します。  
  
 既定では、45 秒以内に完了しない場合の非同期タスクがタイムアウトします。 Web.config ファイルまたはページ ディレクティブでは、別のタイムアウト値を指定できます。`<pages>` Web.config ファイルのセクションを含む、 `asyncTimeout` 属性は、次のようにします。  
  
 `<system.web>`  
  
 `<pages asyncTimeout="30">`  
  
 `</pages>`  
  
 `</system.web>`  
  
 ページ ディレクティブを含む、 `AsyncTimeout` 属性です。  
  
 `<%@ Page AsyncTimeout="30" %>`  
  
   
  
## 例  
 次のコード例では、ページに次の 3 つの非同期タスクを登録し、それらを並列で実行します。 各タスクは、単に、スレッドを 5 秒間スリープ状態にするメソッドを呼び出します。  
  
 [!code-csharp[System.Web.UI.PageAsyncTask\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-vb[System.Web.UI.PageAsyncTask\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">イベント ハンドラー。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.PageAsyncTask" /> クラスのキャンセル可能タスクを有効にするイベント ハンドラーを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターのラップ、 <xref:System.Web.CancellableTaskEventHandler> を委任できるように、 <xref:System.Web.UI.PageAsyncTask> オブジェクトは、非同期コードを統合できます \(に基づいて <xref:System.Threading.Tasks.Task> オブジェクト\) 既存の ASP.NET Web フォーム ページの非同期機能を使用します。 ASP.NET では通知、 <xref:System.Threading.CancellationToken> に渡されるオブジェクト、 <xref:System.Web.CancellableTaskEventHandler> に基づいて取り消し処理の委任、 <xref:System.Web.UI.Page.AsyncTimeout%2A> 属性の設定、 `@ Page` Web ページのディレクティブです。 ときに、 <xref:System.Web.UI.Page.AsyncTimeout%2A> 値に達している、 <xref:System.Threading.CancellationToken> オブジェクトをシグナル状態になります。`CancellationToken` の実装によって呼び出される非同期の Api には、パラメーターを渡す必要があります、 <xref:System.Web.CancellableTaskEventHandler> クラスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">イベント ハンドラー。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.PageAsyncTask" /> クラスを処理するタスクを有効にするイベント ハンドラーを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginHandler">非同期タスクを始めるときに呼び出されるハンドラー。</param>
        <param name="endHandler">タイムアウト期間内で、タスクが正常に完了したときにハンドラー。</param>
        <param name="timeoutHandler">タイムアウト期間内でタスクが正常に完了しないときに呼び出されるハンドラー。</param>
        <param name="state">タスクの状態を表すオブジェクト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.PageAsyncTask" /> クラスの既定値を使用して並列で実行するためです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターのセットの実装、 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> プロパティを `false` 、非同期タスクがページの他のタスクと並列で処理しないようにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="beginHandler" /> パラメーターまたは <paramref name="endHandler" /> パラメーターが指定されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="executeInParallel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="beginHandler">非同期タスクを始めるときに呼び出されるハンドラー。</param>
        <param name="endHandler">タイムアウト期間内で、タスクが正常に完了したときにハンドラー。</param>
        <param name="timeoutHandler">タイムアウト期間内でタスクが正常に完了しないときに呼び出されるハンドラー。</param>
        <param name="state">タスクの状態を表すオブジェクト。</param>
        <param name="executeInParallel">他のタスクと並列で処理できるかどうかを示す値です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.PageAsyncTask" /> クラスの指定した値を使用して並列で実行するためです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの実装では、非同期タスクは、ページ上の他のタスクと並列で処理されるかどうかを設定できます。  
  
   
  
## 例  
 次のコード例では、互いに並列で処理される 3 つの非同期タスクを作成します。 この例については、例の一部である、 <xref:System.Web.UI.PageAsyncTask> クラスの概要です。  
  
 [!code-csharp[System.Web.UI.PageAsyncTask\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="beginHandler" /> パラメーターまたは <paramref name="endHandler" /> パラメーターが指定されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginHandler">
      <MemberSignature Language="C#" Value="public System.Web.BeginEventHandler BeginHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.BeginEventHandler BeginHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.BeginEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期タスクの開始時に呼び出すメソッドを取得します。</summary>
        <value>A <see cref="T:System.Web.BeginEventHandler" /> 非同期タスクの開始時に呼び出すメソッドを表すデリゲート。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> コンス トラクターでデリゲートを設定します。  
  
   
  
## 例  
 次のコード例では、ページに次の 3 つの非同期タスクを登録し、それらを並列で実行します。 各タスクは、単に、スレッドを 5 秒間スリープ状態にするメソッドを呼び出します。 A <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> 各タスクのデリゲートを指定します。  
  
 [!code-csharp[System.Web.UI.PageAsyncTask\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-vb[System.Web.UI.PageAsyncTask\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler EndHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler EndHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイムアウト期間内で、タスクが正常終了したときに呼び出すメソッドを取得します。</summary>
        <value>
          <see cref="T:System.Web.EndEventHandler" /> のタイムアウト期間内タスクが正常に完了したときに呼び出すメソッドを表すデリゲート。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> 、コンス トラクターでデリゲートを設定します。  
  
   
  
## 例  
 次のコード例では、ページに次の 3 つの非同期タスクを登録し、それらを並列で実行します。 各タスクは、単に、スレッドを 5 秒間スリープ状態にするメソッドを呼び出します。<xref:System.Web.UI.PageAsyncTask.EndHandler%2A> 各タスクのデリゲートを指定します。  
  
 [!code-csharp[System.Web.UI.PageAsyncTask\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-vb[System.Web.UI.PageAsyncTask\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInParallel">
      <MemberSignature Language="C#" Value="public bool ExecuteInParallel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExecuteInParallel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>他のタスクと並列で処理できるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 場合は、タスクは、他のタスクと並列で処理する必要があります。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> コンス トラクターでプロパティを設定します。 ページ内の複数のタスクを登録すると、 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> にプロパティが設定されている `true`, 、それらのタスクが同時に処理し、します。 ただし場合、 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> プロパティに設定されて `false`, 、それらのタスクが順番に処理します。 などの場合は、ページが含まれている 2 つの非同期タスクを完了に 5 秒をした各と <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> に設定されている `true`, 、両方のタスクは 5 秒間に完了します。 場合 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> に設定されている `false` 同じこれらの 2 つの作業をし、最初のタスクは 5 秒以内に完了、2 番目のタスクは、最初のタスクの完了後に 5 秒間に完了します。  
  
   
  
## 例  
 次のコード例では、並列処理に設定された 3 つの非同期タスクを定義します。 この例については、例の一部である、 <xref:System.Web.UI.PageAsyncTask> クラスの概要です。  
  
 [!code-csharp[System.Web.UI.PageAsyncTask\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public object State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タスクの状態を表すオブジェクトを取得します。</summary>
        <value>
          <see cref="T:System.Object" /> タスクの状態を表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.PageAsyncTask.State%2A> プロパティは、コンス トラクターで設定され、非同期タスクの実行中に変更することはできません。 ページで非同期タスクを区別するには、それぞれに一意の文字列値を割り当てることによって <xref:System.Web.UI.PageAsyncTask.State%2A> プロパティです。  
  
   
  
## 例  
 次のコード例は、次の 3 つの非同期タスクを作成しの一意の値を提供、 <xref:System.Web.UI.PageAsyncTask.State%2A> プロパティです。 この例については、例の一部である、 <xref:System.Web.UI.PageAsyncTask> クラスの概要です。  
  
 [!code-csharp[System.Web.UI.PageAsyncTask\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler TimeoutHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler TimeoutHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイムアウト期間内で、タスクが正常に完了しないときに呼び出すメソッドを取得します。</summary>
        <value>
          <see cref="T:System.Web.EndEventHandler" /> タイムアウト期間内で、タスクが正常に完了しないときに呼び出すメソッドを表すデリゲート。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> コンス トラクターでデリゲートを設定します。  
  
   
  
## 例  
 次のコード例では、ページに次の 3 つの非同期タスクを登録し、それらを並列で実行します。 各タスクは、単に、スレッドを 5 秒間スリープ状態にするメソッドを呼び出します。 A <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> 各タスクのデリゲートを指定します。  
  
 [!code-csharp[System.Web.UI.PageAsyncTask\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-vb[System.Web.UI.PageAsyncTask\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.PageAsyncTask" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>