<Type Name="DataSourceControl" FullName="System.Web.UI.DataSourceControl">
  <TypeSignature Language="C#" Value="public abstract class DataSourceControl : System.Web.UI.Control, System.ComponentModel.IListSource, System.Web.UI.IDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DataSourceControl extends System.Web.UI.Control implements class System.ComponentModel.IListSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.DataSourceControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.DataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.DataSourceControlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.NonVisualControl</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データ バインド コントロールに対してデータ ソースを表すコントロールの基底クラスとして機能します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET supports a control data\-binding architecture that enables Web server controls to bind to data in a consistent fashion. Web server controls that bind to data are referred to as data\-bound controls, and the classes that facilitate that binding are called data source controls. Data source controls can represent any data source: a relational database, a file, a stream, a business object, and so on. Data source controls present data in a consistent way to data\-bound controls, regardless of the source or format of the underlying data.  
  
 You use the data source controls that are provided with ASP.NET, including <xref:System.Web.UI.WebControls.SqlDataSource>, <xref:System.Web.UI.WebControls.AccessDataSource>, and <xref:System.Web.UI.WebControls.XmlDataSource>, to perform most Web development tasks. You use the base <xref:System.Web.UI.DataSourceControl> class when you want to implement your own custom data source control.  
  
 While any class that implements the <xref:System.Web.UI.IDataSource> interface is a data source control, most ASP.NET data source controls extend the abstract <xref:System.Web.UI.DataSourceControl> class, which provides a base implementation of the <xref:System.Web.UI.IDataSource> interface. The <xref:System.Web.UI.DataSourceControl> class also provides an implementation of the <xref:System.ComponentModel.IListSource> interface, which enables you to programmatically assign the data source control to the **languageKeyword tag is not supported!!!!**  
 property of a data\-bound control and return data to the control as a basic list.  
  
 Any ASP.NET control that derives from the <xref:System.Web.UI.WebControls.DataBoundControl> class can bind to a data source control. When a <xref:System.Web.UI.WebControls.DataBoundControl> is bound to a data source control, data binding is performed automatically at run time. You can also use data source controls with ASP.NET controls that expose a **languageKeyword tag is not supported!!!!**  
 or **languageKeyword tag is not supported!!!!**  
 property and support basic data binding, but are not derived from <xref:System.Web.UI.WebControls.DataBoundControl>. When using these data\-bound controls, you must explicitly call the **languageKeyword tag is not supported!!!!**  
 method. For more information on data binding, see [ASP.NET Data Access Content Map](http://msdn.microsoft.com/ja-jp/f9219396-a0fa-481f-894d-e3d9c67d64f2).  
  
 You can think of a data source control as the combination of the <xref:System.Web.UI.DataSourceControl> object and its associated lists of data, called data source views. Each list of data is represented by a <xref:System.Web.UI.DataSourceView> object. Because the underlying data storage contains one or more lists of data, a <xref:System.Web.UI.DataSourceControl> is always associated with one or more named <xref:System.Web.UI.DataSourceView> objects. The <xref:System.Web.UI.IDataSource> interface defines the methods that all data source controls use to interact with data source views: the <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> method is used to enumerate the data source views currently associated with the data source control, and the <xref:System.Web.UI.DataSourceControl.GetView%2A> method is used to retrieve a specific data source view instance by name.  
  
 You can also think of the data source control as two distinct interfaces that callers use to access data. The <xref:System.Web.UI.DataSourceControl> class is the interface that page developers interact with directly when developing a Web Forms page, and the <xref:System.Web.UI.DataSourceView> class is the interface that data\-bound controls and data\-bound control authors interact with. Because the <xref:System.Web.UI.DataSourceView> object is available only at run time, any state persisted for the data source control or data source view must be exposed directly by the data source control.  
  
 There is no visual rendering of ASP.NET data source controls; they are implemented as controls so you can create them declaratively, and to optionally allow them to participate in state management. As a result, data source controls do not support visual features such as <xref:System.Web.UI.DataSourceControl.EnableTheming%2A> or <xref:System.Web.UI.DataSourceControl.SkinID%2A>.  
  
   
  
## 例  
 The following code example demonstrates how a class can extend the <xref:System.Web.UI.DataSourceControl> class. The `CsvDataSource` control represents comma\-separated file data stored in a .csv file. The `CsvDataSource` class provides its own implementations of the <xref:System.Web.UI.DataSourceControl.GetView%2A>, <xref:System.Web.UI.DataSourceControl.GetViewNames%2A>, and other methods, because the base class implementations are not functional.  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource\_1\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#1)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource\_1\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#1)]  
  
 The following code example demonstrates how to use the `CsvDataSource` control in a Web form.  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource\_1\_webform\#50](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1_webform/CS/webform6cs.aspx#50)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource\_1\_webform\#50](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1_webform/VB/webform6vb.aspx#50)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceView" />
    <altmember cref="T:System.Web.UI.WebControls.DataBoundControl" />
    <altmember cref="T:System.Web.UI.HierarchicalDataSourceControl" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSourceControl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceControl.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.DataSourceControl" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyStyleSheetSkin">
      <MemberSignature Language="C#" Value="public override void ApplyStyleSheetSkin (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ApplyStyleSheetSkin(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">
          <see cref="T:System.Web.UI.Page" /> コントロールを含みます。</param>
        <summary>コントロールをページのスタイル シートで定義されているスタイル プロパティを適用します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientID">
      <MemberSignature Language="C#" Value="public override string ClientID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceControl.ClientID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET によって生成されたサーバー コントロールの識別子を取得します。</summary>
        <value>ASP.NET によって生成されたサーバー コントロールの識別子です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientIDMode">
      <MemberSignature Language="C#" Value="public override System.Web.UI.ClientIDMode ClientIDMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ClientIDMode ClientIDMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceControl.ClientIDMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ClientIDMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このプロパティは、データ ソース コントロールでは使用されません。</summary>
        <value>このプロパティは、データ ソース コントロールでは使用されません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの <xref:System.Web.UI.Control> データ ソース コントロールのマークアップにレンダリングされないために、データ ソース コントロールの基本クラスが使用されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このプロパティを設定しようとしました。</exception>
        <altmember cref="P:System.Web.UI.Control.ClientIDMode" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public override System.Web.UI.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceControl.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Web.UI.ControlCollection" /> UI 階層に指定されたサーバー コントロールの子コントロールを表すオブジェクト。</summary>
        <value>指定されたサーバー コントロールの子コントロールのコレクション。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceControl.CreateControlCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>子コントロールを格納するコレクションを作成します。</summary>
        <returns>
          <see cref="T:System.Web.UI.EmptyControlCollection" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  データ ソース コントロールは、子コントロールを許可していないので、 <xref:System.Web.UI.DataSourceControl> クラスの既定の実装では、子コントロールの埋め込みはサポートされません。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.EmptyControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="EnableTheming">
      <MemberSignature Language="C#" Value="public override bool EnableTheming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableTheming" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceControl.EnableTheming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコントロールがテーマをサポートするかどうかを示す値を取得します。</summary>
        <value>常に <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.DataSourceControl> コントロールに視覚的なレンダリングがない、テーマをサポートしていません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">値を設定しようとしましたが、 <see cref="P:System.Web.UI.DataSourceControl.EnableTheming" /> プロパティです。</exception>
        <altmember cref="P:System.Web.UI.DataSourceControl.SkinID" />
        <altmember cref="P:System.Web.UI.DataSourceControl.Visible" />
      </Docs>
    </Member>
    <Member MemberName="FindControl">
      <MemberSignature Language="C#" Value="public override System.Web.UI.Control FindControl (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.Control FindControl(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceControl.FindControl(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">検索するコントロールの識別子。</param>
        <summary>指定したサーバー コントロールの現在の名前付けコンテナーを検索 <paramref name="id" /> パラメーター。</summary>
        <returns>指定したコントロールまたは <see langword="null" /> 指定したコントロールが存在しない場合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public override void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceControl.Focus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールに入力フォーカスを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.DataSourceControl> Visual を持たないレンダリングを呼び出す、 <xref:System.Web.UI.DataSourceControl.Focus%2A> メソッドをスロー、 <xref:System.NotSupportedException> 例外です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">呼び出すしようとしましたが、 <see cref="M:System.Web.UI.DataSourceControl.Focus" /> メソッドです。</exception>
        <altmember cref="P:System.Web.UI.DataSourceControl.Visible" />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected abstract System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceControl.GetView(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">取得する <see cref="T:System.Web.UI.DataSourceView" /> の名前。 などの 1 つのビューをサポートするデータ ソース コントロールに <see cref="T:System.Web.UI.WebControls.SqlDataSource" />, 、このパラメーターは無視されます。</param>
        <summary>データ ソース コントロールに関連付けられている名前付きのデータ ソース ビューを取得します。</summary>
        <returns>返す名前付き <see cref="T:System.Web.UI.DataSourceView" /> に関連付けられている、 <see cref="T:System.Web.UI.DataSourceControl" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出して、データ ソース コントロールに関連付けられているビューのセットを列挙する、 <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> メソッドです。  
  
 データ ソース コントロール クラスには、基になるデータには 1 つまたは複数のビューをサポートできます。 これらのビューがのインスタンスによって表される、 <xref:System.Web.UI.DataSourceView> クラスです。 データ ソース ビューは、データ ソース コントロールの機能を定義、基になるデータ ストアからデータを取得するために必要なすべての作業を行うし、並べ替え、挿入、削除、および更新などの操作を実行します。  
  
> [!NOTE]
>  <xref:System.Web.UI.DataSourceControl> クラスの既定の実装 `null`します。 拡張する場合、 <xref:System.Web.UI.DataSourceControl> クラスでオーバーライド、 <xref:System.Web.UI.DataSourceControl.GetView%2A> を返す、指定されたメソッドを <xref:System.Web.UI.DataSourceView> オブジェクトです。  
  
   
  
## 例  
 次のコード例は、データ ソース コントロール クラスを拡張する方法を示しています、 <xref:System.Web.UI.DataSourceControl> クラスが実装する、 <xref:System.Web.UI.IDataSource.GetView%2A> の厳密に型指定のインスタンスを返すメソッド、 <xref:System.Web.UI.DataSourceView> クラスです。 データ ソース コントロールは、1 つのビューをサポートするためにメソッド名を無視し、既定のビュー名が指定されたビューを返します。 このコード例が示されている例の一部は、 <xref:System.Web.UI.DataSourceControl> クラスです。  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource\_1\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#3)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource\_1\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.DataSourceControl.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceControl.GetViewNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リストを表す、名前のコレクションを取得 <see cref="T:System.Web.UI.DataSourceView" /> オブジェクトに関連付けられている、 <see cref="T:System.Web.UI.DataSourceControl" /> コントロールです。</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" /> の名前を含む、 <see cref="T:System.Web.UI.DataSourceView" /> オブジェクトに関連付けられている、 <see cref="T:System.Web.UI.DataSourceControl" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ICollection> 名のコレクションが使用可能な一連の値を渡すことができる、 <xref:System.Web.UI.DataSourceControl.GetView%2A> メソッドです。  
  
 <xref:System.Web.UI.ListSourceHelper> 用に使用されるクラス、 <xref:System.Web.UI.DataSourceControl> クラスの <xref:System.ComponentModel.IListSource> 実装では、チェック、 <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> 両方のメソッド、 <xref:System.Web.UI.DataSourceControl.System%23ComponentModel%23IListSource%23ContainsListCollection%2A> と <xref:System.Web.UI.DataSourceControl.System%23ComponentModel%23IListSource%23GetList%2A> ソース ビューを呼び出し、データ ソース コントロールが 1 つまたは複数のデータに関連付けられたかどうかを確認します。 場合 <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> 返します `null`, 、これは、メソッドの既定の実装 <xref:System.Web.UI.DataSourceControl.System%23ComponentModel%23IListSource%23ContainsListCollection%2A> を返します `false` と <xref:System.Web.UI.DataSourceControl.System%23ComponentModel%23IListSource%23GetList%2A> を返します `null`します。  
  
> [!NOTE]
>  <xref:System.Web.UI.DataSourceControl> クラスの既定の実装 `null`します。 拡張する場合、 <xref:System.Web.UI.DataSourceControl> クラスでオーバーライド、 <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> ビュー名のコレクションを返すメソッド。  
  
   
  
## 例  
 次のコード例は、方法を拡張するクラスについて説明します。、 <xref:System.Web.UI.DataSourceControl> クラスは、返す既定の実装をオーバーライドできます `null`, 、ビュー名のコレクションを提供します。`CsvDataSource` クラスには、1 つのビューのみサポートしています。 したがって、既定のビュー名を持つ 1 つの要素のコレクションが返されます。 このコード例が示されている例の一部は、 <xref:System.Web.UI.DataSourceControl> クラスです。  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource\_1\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#4)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource\_1\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.DataSourceControl.GetView(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasControls">
      <MemberSignature Language="C#" Value="public override bool HasControls ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool HasControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceControl.HasControls" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>サーバー コントロールに子コントロールが含まれるかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> コントロールには、その他のコントロールにコントロールが含まれている場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseDataSourceChangedEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaiseDataSourceChangedEvent (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaiseDataSourceChangedEvent(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.IDataSource.DataSourceChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent%2A> メソッドは、データ バインド コントロール、通知、基になるデータ ソースまたはメモリにキャッシュされたデータが変更されたことと、コントロールが再バインドし、必要な追加の作業を実行する必要があります。 通常、 <xref:System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent%2A> パラメーターの値またはデータ ソース コントロールのプロパティが変更されたときに、メソッドが呼び出されます。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
   
  
## 例  
 次のコード例では、呼び出し、 <xref:System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent%2A> メソッドのいずれかに影響を与える方法でデータ ソースまたはその基になるデータが変更されたときに、コントロールがバインドされています。 この例では、ファイルベースのデータ ソース コントロールを拡張、 <xref:System.Web.UI.DataSourceControl> クラスが生成、 <xref:System.Web.UI.IDataSource.DataSourceChanged> を呼び出してイベント <xref:System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent%2A> いつでも、 `FileName` プロパティを変更します。  
  
 [!code-csharp[Urtue.Samples.Alexkr.CsvDataSource\_1\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/CS/csvdatasource.cs#1)]
 [!code-vb[Urtue.Samples.Alexkr.CsvDataSource\_1\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.CsvDataSource_1/VB/csvdatasource.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.IDataSource.DataSourceChanged" />
      </Docs>
    </Member>
    <Member MemberName="RenderControl">
      <MemberSignature Language="C#" Value="public override void RenderControl (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RenderControl(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> コントロールの内容を受け取るオブジェクトです。</param>
        <summary>指定されたサーバー コントロールの内容を出力 <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトし、トレースが有効になっている場合は、コントロールに関するトレース情報を格納します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkinID">
      <MemberSignature Language="C#" Value="public override string SkinID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SkinID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceControl.SkinID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>適用するスキンを取得、 <see cref="T:System.Web.UI.DataSourceControl" /> コントロールです。</summary>
        <value>
          <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.DataSourceControl> 視覚的なレンダリングを持たないコントロールを設定することはできません、 <xref:System.Web.UI.DataSourceControl.SkinID%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">値を設定しようとしましたが、 <see cref="P:System.Web.UI.DataSourceControl.SkinID" /> プロパティです。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース コントロールがデータの 1 つまたは複数のリストに関連付けられているかどうかを示します。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Web.UI.DataSourceControl" /> が 1 つまたは複数関連付けられている <see cref="T:System.Web.UI.DataSourceView" /> オブジェクトで、それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、現在のオブジェクトをデータのリストを 1 つまたは複数のソースとして使用できるかどうかを決定します。 データ ソース コントロールとデータのリストをカプセル化 <xref:System.Web.UI.DataSourceView> オブジェクトで、そのため、1 つまたは複数に関連付けられているときに <xref:System.Web.UI.DataSourceView> オブジェクト、 <xref:System.Web.UI.DataSourceControl> コントロールが一覧のソース オブジェクトとプロパティを表すを返します `true`します。  
  
 このプロパティを呼び出す、静的な <xref:System.Web.UI.ListSourceHelper.ContainsListCollection%2A?displayProperty=fullName> 現在のデータ ソース コントロールであるかどうかを決定する方法は、データのソースとして使用できます。<xref:System.Web.UI.ListSourceHelper> クラスを決定するかどうか、 <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> メソッドは、ビュー名の有効なコレクションを返します。 かどうかには、このプロパティを返します `true`します。 場合 <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> 返します `null`, の既定の実装は、 <xref:System.Web.UI.DataSourceControl> クラス、メソッドを返します `false`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データの一覧のソースとして使用できるデータ ソース コントロールの一覧を取得します。</summary>
        <returns>
          <see cref="T:System.Collections.IList" /> のデータ ソース コントロールのデータのリストのソースとして使用できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用してを一連のデータのソースとして使用できるオブジェクトを取得します。 データ ソース コントロールとデータのリストをカプセル化 <xref:System.Web.UI.DataSourceView> オブジェクトで、そのため、1 つまたは複数に関連付けられているときに <xref:System.Web.UI.DataSourceView> オブジェクト、 <xref:System.Web.UI.DataSourceControl> コントロールが一覧のソース オブジェクトを表すし、メソッドが戻る、 <xref:System.Collections.IList> 1 つの要素のコレクション、 <xref:System.Web.UI.DataSourceControl> 自体です。  
  
 このメソッドは、静的な <xref:System.Web.UI.ListSourceHelper.GetList%2A?displayProperty=fullName> を取得するメソッド、 <xref:System.Collections.IList> データのソースとして使用できるオブジェクトのコレクション。<xref:System.Web.UI.ListSourceHelper> クラスを決定するかどうか <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> ビュー名の有効なコレクションを返します。 そのような場合は、 <xref:System.Web.UI.ListSourceHelper> クラスを返します。、 <xref:System.Collections.IList> 1 つの要素のコレクション、 <xref:System.Web.UI.DataSourceControl> コントロールです。 場合 <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> 返します `null`, の既定の実装である、 <xref:System.Web.UI.DataSourceControl> クラス、 <xref:System.Web.UI.ListSourceHelper> 返しますでクラスも `null`です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetView">
      <MemberSignature Language="C#" Value="System.Web.UI.DataSourceView IDataSource.GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.DataSourceView System.Web.UI.IDataSource.GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">取得する <see cref="T:System.Web.UI.DataSourceView" /> の名前。 などの 1 つのビューをサポートするデータ ソース コントロールに <see cref="T:System.Web.UI.WebControls.SqlDataSource" />, 、このパラメーターは無視されます。</param>
        <summary>名前付きの取得 <see cref="T:System.Web.UI.DataSourceView" /> オブジェクトに関連付けられている、 <see cref="T:System.Web.UI.DataSourceControl" /> コントロールです。 一部のデータ ソース コントロールは他のユーザー サポート 1 つ以上の 1 つのビューをサポートします。</summary>
        <returns>返す名前付き <see cref="T:System.Web.UI.DataSourceView" /> に関連付けられている、 <see cref="T:System.Web.UI.DataSourceControl" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `viewName` など 1 つのビューをサポートするデータ ソース コントロールでこのメソッドが呼び出されると、パラメーターは無視されます、 <xref:System.Web.UI.WebControls.SqlDataSource> と <xref:System.Web.UI.WebControls.AccessDataSource> コントロールです。  
  
> [!NOTE]
>  <xref:System.Web.UI.DataSourceControl> がこのインターフェイス メソッドによって呼び出されるクラスの既定の実装 `null`します。 拡張する場合、 <xref:System.Web.UI.DataSourceControl> クラスでオーバーライド、 <xref:System.Web.UI.DataSourceControl.GetView%2A> を返す、指定されたメソッドを <xref:System.Web.UI.DataSourceView> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="viewName" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.DataSourceControl.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataSource.GetViewNames">
      <MemberSignature Language="C#" Value="System.Collections.ICollection IDataSource.GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.ICollection System.Web.UI.IDataSource.GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リストを表す、名前のコレクションを取得 <see cref="T:System.Web.UI.DataSourceView" /> オブジェクトに関連付けられている、 <see cref="T:System.Web.UI.DataSourceControl" /> コントロールです。</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" /> の名前を含む、 <see cref="T:System.Web.UI.DataSourceView" /> オブジェクトに関連付けられている、 <see cref="T:System.Web.UI.DataSourceControl" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  <xref:System.Web.UI.DataSourceControl> がこのインターフェイス メソッドによって呼び出されるクラスの既定の実装 `null`, 、サポートされている 1 つのビューを示します。 拡張する場合、 <xref:System.Web.UI.DataSourceControl> クラスでオーバーライド、 <xref:System.Web.UI.DataSourceControl.GetViewNames%2A> ビュー名のコレクションを返すメソッド。 名前を渡すことが、 <xref:System.Web.UI.DataSourceControl.GetView%2A> を返すメソッドを <xref:System.Web.UI.DataSourceView> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.DataSourceControl.GetView(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.DataSourceControl.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロールが視覚的に表示されるかどうかを示す値を設定します。</summary>
        <value>常に <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.DataSourceControl> コントロールに視覚的に表示がない、 <xref:System.Web.UI.DataSourceControl.Visible%2A> プロパティは常に返します `false`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">値を設定しようとしましたが、 <see cref="P:System.Web.UI.DataSourceControl.Visible" /> プロパティです。</exception>
      </Docs>
    </Member>
  </Members>
</Type>