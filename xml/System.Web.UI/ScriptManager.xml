<Type Name="ScriptManager" FullName="System.Web.UI.ScriptManager">
  <TypeSignature Language="C#" Value="public class ScriptManager : System.Web.UI.Control, System.Web.UI.IPostBackDataHandler, System.Web.UI.IPostBackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ScriptManager extends System.Web.UI.Control implements class System.Web.UI.IPostBackDataHandler, class System.Web.UI.IPostBackEventHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackDataHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Scripts")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.ScriptManagerDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(EmbeddedResourceFinder), "System.Web.Resources.ScriptManager.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.NonVisualControl</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ASP.NET Ajax スクリプト ライブラリとスクリプト ファイル、部分ページ レンダリング、および Web サービスとアプリケーション サービスのクライアント プロキシ クラス生成を管理します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このトピックの内容  
  
-   [はじめに](#introduction)  
  
-   [部分ページ レンダリング](#partial_page_rendering)  
  
-   [マスター ページ、ユーザー コントロール、およびその他の子コンポーネントで ScriptManager コントロールの使用](#using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components)  
  
-   [スクリプトの管理と登録](#script_management_and_registration)  
  
-   [Web サービスの参照](#web_service_references)  
  
-   [ローカリゼーション](#localization)  
  
-   [エラー処理](#error_handling)  
  
-   [宣言構文](#declarative_syntax)  
  
<a name="introduction"></a>   
## はじめに  
 <xref:System.Web.UI.ScriptManager> コントロールは ASP.NET Ajax の機能に集中します。 コントロールは、ページ上のすべての ASP.NET Ajax リソースを管理します。 これは、ダウンロードが含まれています。 [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] ブラウザーとを使用して有効になっている部分ページ更新を調整するためのスクリプト <xref:System.Web.UI.UpdatePanel> コントロールです。 さらに、 <xref:System.Web.UI.ScriptManager> コントロールでは、以下を実行することができます。  
  
-   部分ページ更新と互換性があるスクリプトを登録します。 作成したスクリプトとコア ライブラリ間の依存関係を管理するために任意のスクリプトを登録するには、後に読み込まれます、 [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] スクリプトです。  
  
-   指定するかどうかを解放またはデバッグ スクリプトは、ブラウザーに送信します。  
  
-   持つ Web サービスを登録することによって、スクリプトから Web サービス メソッドにアクセスを提供、 <xref:System.Web.UI.ScriptManager> コントロールです。  
  
-   これらのサービスを登録することによってクライアント スクリプトからのアプリケーション サービスの ASP.NET 認証、ロール、およびプロファイルへのアクセスを提供、 <xref:System.Web.UI.ScriptManager> コントロールです。  
  
-   ECMAScript \(JavaScript\)、およびブラウザー内の関数のカルチャに固有の表示を有効にします。  
  
-   使用してスタンドアロンのスクリプト ファイルや埋め込みのスクリプト ファイルのローカライズ リソースにアクセス、 <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> のプロパティ、 <xref:System.Web.UI.ScriptReference> コントロールです。  
  
-   実装するサーバー コントロールを登録、 <xref:System.Web.UI.IExtenderControl> または <xref:System.Web.UI.IScriptControl> とのインターフェイス、 <xref:System.Web.UI.ScriptManager> を制御できるため、クライアント コンポーネントと動作に必要なスクリプトを表示します。  
  
<a name="partial_page_rendering"></a>   
## 部分ページ レンダリング  
 部分ページ レンダリングをサポートする ASP.NET ページの機能は、次の要因によって制御されます。  
  
-   <xref:System.Web.UI.ScriptManager> コントロールの <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> プロパティである必要があります `true` \(既定値\)。  
  
-   少なくとも 1 つあります <xref:System.Web.UI.UpdatePanel> ページ上のコントロールです。  
  
-   <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> プロパティである必要があります `true` \(既定値\)。 場合、 <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> プロパティが明示的に設定されていない、その値はブラウザーの機能に基づいています。  
  
 値を上書きする、 <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> 中またはページの前に、実行時にプロパティ <xref:System.Web.UI.Control.Init> イベントです。 ページの後にこのプロパティを変更しようとする場合は、 <xref:System.Web.UI.Control.Init> イベントが発生した、 <xref:System.InvalidOperationException> 例外がスローされます。  
  
 部分ページ レンダリングがサポートされている場合、 <xref:System.Web.UI.ScriptManager> コントロールは非同期ポストバックと部分ページ更新を有効にするスクリプトを表示します。 使用して更新するページの領域が指定されている <xref:System.Web.UI.UpdatePanel> コントロールです。<xref:System.Web.UI.ScriptManager> コントロールが非同期ポストバックを処理し、更新する必要があるページの領域のみを更新します。 部分ページ レンダリングの詳細については、次を参照してください。 [Partial\-Page Rendering Overview](http://msdn.microsoft.com/ja-jp/5c12736d-d9e9-464a-9388-3fe0f9f49e49)します。 更新プログラムを実行する条件の詳細については、次を参照してください。 [UpdatePanel Control Overview](http://msdn.microsoft.com/ja-jp/29a2265d-9674-4c19-b70e-e5560ee9689a)します。  
  
<a name="using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components"></a>   
## マスター ページ、ユーザー コントロール、およびその他の子コンポーネントで ScriptManager コントロールの使用  
 ページには、1 つだけ含めることができます <xref:System.Web.UI.ScriptManager> その階層内のコントロールです。 親ページで既にするときに、サービスおよび入れ子になったページやユーザー コントロール、コンポーネントのスクリプトを登録する、 <xref:System.Web.UI.ScriptManager> コントロールを使用して、 <xref:System.Web.UI.ScriptManagerProxy> コントロールです。 詳細については、「[Using the ASP.NET UpdatePanel Control with Master Pages](http://msdn.microsoft.com/ja-jp/b1c974d5-a6b2-4bb3-a3cc-61dd9dc0e1d6)」を参照してください。  
  
<a name="script_management_and_registration"></a>   
## スクリプトの管理と登録  
 <xref:System.Web.UI.ScriptManager> コントロールでは、ページの一部として、レンダリングされるスクリプトを登録することができます。<xref:System.Web.UI.ScriptManager> コントロールの登録メソッドは、次の 3 つのカテゴリに分けることができます。  
  
-   保証登録メソッドでは、依存関係をスクリプトに、 [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] が保持されます。  
  
-   依存しない登録メソッド、 [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)], が、そのと互換性のある <xref:System.Web.UI.UpdatePanel> コントロールです。  
  
-   使用をサポートする登録メソッド <xref:System.Web.UI.UpdatePanel> コントロールです。  
  
 作成し、ASP.NET で Ajax のスクリプトを使用する方法の詳細については、次を参照してください。 [Creating Custom Client Scripts in ASP.NET AJAX](http://msdn.microsoft.com/ja-jp/285e3a65-b42e-42c5-952d-baf184057899)します。  
  
### Microsoft Ajax ライブラリに依存しているスクリプトの登録  
 上のすべての依存関係を必ずの方法でスクリプト ファイルを登録する次のメソッドを使用する、 [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] が保持されます。  
  
|メソッド|定義|  
|----------|--------|  
|<xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A>|実装するサーバー コントロールを登録、 <xref:System.Web.UI.IScriptControl> インターフェイス クライアント オブジェクトを定義するために使用します。<xref:System.Web.UI.ScriptManager> コントロールは、クライアントをサポートしているスクリプトを表示します。|  
|<xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A>|実装するサーバー コントロールを登録、 <xref:System.Web.UI.IExtenderControl> インターフェイス クライアント オブジェクトを定義するために使用します。<xref:System.Web.UI.ScriptManager> コントロールは、クライアントをサポートしているスクリプトを表示します。|  
  
### 部分ページ更新プログラムの互換性のあるスクリプトの登録  
 次のメソッドを使用するに依存しないスクリプト ファイルを登録する、 [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] と互換性があるが、 <xref:System.Web.UI.UpdatePanel> コントロールです。 これらのメソッドがの同様のメソッドに対応して、 <xref:System.Web.UI.ClientScriptManager> コントロールです。 内部で使用するスクリプトをレンダリングする場合は、 <xref:System.Web.UI.UpdatePanel> 制御でのメソッドを呼び出すことを確認して、 <xref:System.Web.UI.ScriptManager> コントロールです。  
  
|メソッド|定義|  
|----------|--------|  
|<xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A>|JavaScript 配列に値を追加します。 配列が存在しない場合は作成されます。|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A>|レンダリング、 `script` 要素の後に、ページの開始 `<form>` タグ。 このスクリプトは、文字列パラメーターとして指定されます。|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A>|レンダリング、 `script` 要素の後に、ページの開始 `<form>` タグ。 設定して、スクリプトのコンテンツが指定されている、 `src` 属性にスクリプト ファイルを指す URL です。|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A>|レンダリング、 `script` 要素の後に、ページの開始 `<form>` タグ。 スクリプトの内容は、アセンブリ内のリソース名を指定します。`src` アセンブリから名前付きのスクリプトを取得する HTTP ハンドラーへの呼び出しで URL を使用して属性が自動的に設定されます。|  
|<xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>|指定したコントロールのマークアップに名前\/値のカスタム \(expando\) 属性ペアをレンダリングします。|  
|<xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A>|非表示フィールドを表示します。|  
|<xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>|応答で実行されるスクリプトを登録、 `form` 要素の `submit` イベントです。`onSubmit` 属性が指定されたスクリプトを参照します。|  
|<xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>|ページの終了直前に起動スクリプト ブロックをレンダリング `</form>` タグ。 スクリプトを表示するは、文字列パラメーターとして指定されます。|  
  
 メソッドを登録するときに、スクリプトの種類\/キー ペアを指定します。 スクリプトと同じタイプ\/キー ペアが既に登録されている場合、新しいスクリプトが登録されていません。 同様に、既に型\/リソース名のペアでスクリプトを登録する場合がある、 `script` リソースを参照する要素は追加されません。 以前に登録した属性の expando 属性を登録するときに、例外がスローされます。 配列の値を重複して登録を許可します。  
  
 呼び出すと、 <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> または <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> メソッド、インライン関数を実行するスクリプトの登録を防ぐためです。 代わりに、イベント ハンドラーのような関数の定義や、アプリケーションのカスタム クラスの定義が含まれるスクリプトを登録します。  
  
### UpdatePanel コントロールの登録メソッド  
 次のメソッドを使用するには使用する場合は、部分ページ更新をカスタマイズする <xref:System.Web.UI.UpdatePanel> コントロールです。  
  
|メソッド|定義|  
|----------|--------|  
|<xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A>|コントロールを非同期ポストバックのトリガーとして登録します。|  
|<xref:System.Web.UI.ScriptManager.RegisterDataItem%2A>|部分ページ レンダリング中にカスタム データをコントロールに送信します。|  
|<xref:System.Web.UI.ScriptManager.RegisterDispose%2A>|内のコントロールの破棄スクリプトを登録、 <xref:System.Web.UI.UpdatePanel> コントロールです。 このスクリプトは、<xref:System.Web.UI.UpdatePanel> コントロールが更新または削除されるときに実行されます。 Dispose メソッドではクライアント コンポーネントの一部であるため、 [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] コンポーネントを使用できなくする場合は、リソースを解放する必要があるとします。|  
|<xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A>|コントロールは、完全なポストバックのトリガーとして登録します。 このメソッドは内部のコントロールの使用、 <xref:System.Web.UI.UpdatePanel> それ以外の場合、非同期ポストバックを実行するコントロール。|  
  
<a name="web_service_references"></a>   
## Web サービスの参照  
 作成することでクライアント スクリプトから呼び出せる Web サービスに登録する、 <xref:System.Web.UI.ServiceReference> オブジェクトとに追加すること、 <xref:System.Web.UI.ScriptManager.Services%2A> のコレクション、 <xref:System.Web.UI.ScriptManager> コントロールです。 ASP.NET クライアント プロキシ オブジェクトによって生成される各 <xref:System.Web.UI.ServiceReference> 内のオブジェクト、 <xref:System.Web.UI.ScriptManager.Services%2A> コレクションです。 プログラムで追加することができます <xref:System.Web.UI.ServiceReference> オブジェクトを <xref:System.Web.UI.ScriptManager.Services%2A> コレクションが実行時に Web サービスを登録します。  
  
 スクリプトで Web サービスにアクセスする方法の詳細については、次を参照してください。 [Exposing Web Services to Client Script in ASP.NET AJAX](http://msdn.microsoft.com/ja-jp/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8) と [Calling Web Services from Client Script in ASP.NET AJAX](http://msdn.microsoft.com/ja-jp/fc06c224-f01a-45be-94af-bd71afbc07b0)です。  
  
<a name="localization"></a>   
## ローカリゼーション  
 <xref:System.Web.UI.ScriptManager> コントロールは、アセンブリまたはスタンドアロンのスクリプト ファイルに埋め込まれているスクリプト ファイルのいずれか適切なローカライズされたスクリプト ファイルを指す、レンダリングされたページ内の参照を生成します。  
  
 ときに、 <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> にプロパティが設定されている `true`, 、 <xref:System.Web.UI.ScriptManager> コントロールが存在する場合、現在のカルチャ \(ローカライズされた文字列\) などのローカライズされたリソースを取得します。<xref:System.Web.UI.ScriptManager> コントロールには、ローカライズされたリソースを使用するための次の機能が用意されています。  
  
-   **スクリプト アセンブリに埋め込まれているファイル**します。<xref:System.Web.UI.ScriptManager> コントロールがブラウザーに送信するには、どのカルチャに固有のカルチャまたはフォールバック カルチャのスクリプト ファイルを決定します。 これはカルチャに固有を使用して、 <xref:System.Resources.NeutralResourcesLanguageAttribute> アセンブリ属性、\(存在する場合\)、アセンブリと、ブラウザーの UI カルチャをパッケージ化されたリソース。  
  
-   **スタンドアロンのスクリプト ファイル**します。<xref:System.Web.UI.ScriptManager> コントロールを使用してサポートされている UI カルチャのリストを定義する、 <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> のプロパティ、 <xref:System.Web.UI.ScriptReference> オブジェクトです。  
  
-   **デバッグ モードで**します。<xref:System.Web.UI.ScriptManager> コントロールはデバッグ情報を含むカルチャに固有のスクリプト ファイルを表示しようとしています。 たとえば、ページがデバッグ モードでは、en MX に現在のカルチャは、コントロールをレンダリングなど、名前が指定されているスクリプト ファイル `scriptname`.en いる、ファイルが存在する場合。 適切なフォールバック カルチャのデバッグ ファイルが表示されるファイルが存在しない場合  
  
 リソースをローカライズする方法の詳細については、次を参照してください。 [Localizing Resources for Component Libraries Overview](http://msdn.microsoft.com/ja-jp/e6b15435-57c1-4dd1-9bd3-5d4c509685bb)します。  
  
<a name="error_handling"></a>   
## エラー処理  
 非同期ポストバック中にページ エラーが発生したとき、 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントが発生します。 サーバーでエラーがクライアントに送信される方法によって異なります、 <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> 、プロパティ、 <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティ、および Web.config ファイルのカスタム エラー セクションです。 詳細については、「[Customizing Error Handling for ASP.NET UpdatePanel Controls](http://msdn.microsoft.com/ja-jp/e15e7ffb-e4b2-4a89-b99e-16624a5861d0)」を参照してください。  
  
<a name="declarative_syntax"></a>   
## 宣言構文  
  
```  
<asp:ScriptManager  
    AllowCustomErrorsRedirect="True|False"  
    AsyncPostBackErrorMessage="string"  
    AsyncPostBackTimeout="integer"  
    AuthenticationService-Path="uri"  
    EnablePageMethods="True|False"  
    EnablePartialRendering="True|False"  
    EnableScriptGlobalization="True|False"  
    EnableScriptLocalization="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    LoadScriptsBeforeUI="True|False"  
    OnAsyncPostBackError="AsyncPostBackError event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnResolveScriptReference="ResolveScriptReference event handler"  
    OnUnload="Unload event handler"  
    ProfileService-LoadProperties="string"  
    ProfileService-Path="uri"  
    RoleService-LoadRoles="True|False"  
    RoleService-Path="uri"  
    runat="server"  
    ScriptMode="Auto|Inherit|Debug|Release"  
    ScriptPath="string"  
    SkinID="string"  
    SupportsPartialRendering="True|False"  
    Visible="True|False"  
>  
        <AuthenticationService  
            Path="uri"  
        />  
        <ProfileService  
            LoadProperties="string"  
            Path="uri"  
        />  
        <RoleService  
            LoadRoles="True|False"  
            Path="uri"  
        />  
        <Scripts>  
            <asp:ScriptReference  
                Assembly="string"  
                IgnoreScriptPath="True|False"  
                Name="string"  
                NotifyScriptLoaded="True|False"  
                Path="string"  
                ResourceUICultures="string"  
                ScriptMode="Auto|Debug|Inherit|Release"  
            />  
        </Scripts>  
        <Services>  
            <asp:ServiceReference  
                InlineScript="True|False"  
                Path="string"  
            />  
        </Services>  
</asp:ScriptManager>  
```  
  
   
  
## 例  
 次の例では、さまざまなシナリオを使用するため、 <xref:System.Web.UI.ScriptManager> コントロールです。  
  
 **部分ページ更新を有効にします。**  
  
 次の例では、使用する方法、 <xref:System.Web.UI.ScriptManager> 部分ページ更新を有効にするコントロール。 この例では、 <xref:System.Web.UI.WebControls.Calendar> と <xref:System.Web.UI.WebControls.DropDownList> コントロール内にある、 <xref:System.Web.UI.UpdatePanel> コントロールです。 既定では、値、 <xref:System.Web.UI.UpdatePanel.UpdateMode%2A> プロパティは、 <xref:System.Web.UI.UpdatePanelUpdateMode.Always>, の値、 <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> プロパティは `true`です。 そのため、コントロール パネルの子コントロールには、非同期ポストバックが発生します。  
  
 [!code-csharp[System.Web.UI.UpdatePanel\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/CS/UpdatePanelExample1CS.aspx#1)]
 [!code-vb[System.Web.UI.UpdatePanel\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/VB/UpdatePanelExample1VB.aspx#1)]  
  
 **部分ページ更新エラーの処理と、スクリプトの登録**  
  
 次の例では、カスタムのエラーが部分ページ更新中に処理を提供する方法を示します。 既定では、部分ページ更新中にエラーが発生したときに、JavaScript のメッセージ ボックスが表示されます。 この例では、カスタム エラー ハンドラーを提供することで処理を使用して、 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントを設定したり、 <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> イベント ハンドラーのプロパティです。 設定することも、 <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> 部分ページ更新中にエラーが発生したときに、Web.config ファイルのカスタム エラー セクションを使用する方法を指定するプロパティです。 この例では、既定値では、 <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> プロパティを使用します。 つまり、Web.config ファイルに、要素が含まれている場合、要素決まりますエラーを表示する方法です。 詳細については、次を参照してください。 [customErrors 要素 \(ASP.NET 設定スキーマ\)](http://msdn.microsoft.com/ja-jp/288c32e2-df1f-4548-abda-de6b4cb989a6)します。  
  
 [!code-csharp[System.Web.UI.ScriptManager.OnAsyncPostBackError\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/CS/default.aspx#1)]
 [!code-vb[System.Web.UI.ScriptManager.OnAsyncPostBackError\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/VB/default.aspx#1)]  
  
 **ブラウザーに表示される日時のグローバル化**  
  
 次の例では、設定する方法、 <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> プロパティをクライアント スクリプトは、ブラウザーで、カルチャ固有の日付と時刻を表示できるようにします。 この例で、 `Culture` に、ディレクティブの属性が設定されている `auto`します。 その結果、現在のブラウザーの設定で指定されている最初の言語は、カルチャと、ページの UI カルチャを決定します。 詳細については、「[How to: Set the Culture and UI Culture for ASP.NET Web Page Globalization](http://msdn.microsoft.com/ja-jp/76091f86-f967-4687-a40f-de87bd8cc9a0)」を参照してください。  
  
 [!code-csharp[System.Web.UI.ScriptManager.EnableScriptGlobalization\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/CS/default.aspx#1)]
 [!code-vb[System.Web.UI.ScriptManager.EnableScriptGlobalization\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/VB/default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ScriptManagerProxy" />
    <altmember cref="T:System.Web.UI.UpdatePanel" />
    <altmember cref="T:System.Web.UI.ClientScriptManager" />
    <altmember cref="T:System.Web.UI.ScriptMode" />
    <altmember cref="T:System.Web.UI.ScriptReference" />
    <altmember cref="T:System.Web.UI.ServiceReference" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.ScriptManager" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターで使用される内部のフィールド、 <xref:System.Web.UI.ScriptManager> コントロール ページ、制御、および展開の情報を追跡します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHistoryPoint">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>履歴ポイントを作成してブラウザーの履歴スタックに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これらのメソッド オーバー ロードを使用すると、ブラウザーでサーバーの状態、および必要に応じて履歴エントリのタイトルを定義できます。 履歴ポイントを作成してシリアル化および暗号化されたデータが、Web ページの URL に追加したブラウザーの履歴スタックにエントリが含まれます。 状態データを使用すると、以降のサーバー ナビゲーション イベントが発生したときに、ページを再作成します。 詳細については、「[Managing Browser History Using ASP.NET Server Controls](http://msdn.microsoft.com/ja-jp/bad617c8-f84c-4d94-8852-60af400810e9)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (System.Collections.Specialized.NameValueCollection state, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(class System.Collections.Specialized.NameValueCollection state, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.Collections.Specialized.NameValueCollection,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="state">状態データを含むキーと値のペアのコレクション。</param>
        <param name="title">この状態のタイトルとしてブラウザーの履歴スタックに追加するテキスト。</param>
        <summary>指定した状態データ コレクションおよび状態タイトルを使用して、履歴ポイントを作成し、ブラウザーの履歴スタックに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、状態データの 1 つ以上のキー\/値ペアを保存するときに、履歴ポイントを作成できます。 履歴ポイントを作成してシリアル化および暗号化されたデータが、Web ページの URL に追加したブラウザーの履歴スタックにエントリが含まれます。 場合、 `title` パラメーターは `null`, 、Web ページのタイトルは、履歴スタック内の状態エントリのタイトルとして使用されます。  
  
 状態データを使用すると、以降のサーバー ナビゲーション イベントが発生したときに、ページを再作成します。 詳細については、「[Managing Browser History Using ASP.NET Server Controls](http://msdn.microsoft.com/ja-jp/bad617c8-f84c-4d94-8852-60af400810e9)」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Web ページの状態を識別するキーと値のペアのキー部分。</param>
        <param name="value">Web ページの状態を識別するキーと値のペアの値部分。</param>
        <summary>指定した状態キーおよび状態値を使用して、履歴ポイントを作成し、ブラウザーの履歴スタックに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、状態を識別するのに値を保存する場合、履歴ポイントを作成できます。 履歴ポイントを作成してシリアル化および暗号化されたデータが、Web ページの URL に追加したブラウザーの履歴スタックにエントリが含まれます。 Web ページのタイトルは、履歴スタック内の状態エントリのタイトルとして使用されます。  
  
 状態データを使用すると、以降のサーバー ナビゲーション イベントが発生したときに、ページを再作成します。 詳細については、「[Managing Browser History Using ASP.NET Server Controls](http://msdn.microsoft.com/ja-jp/bad617c8-f84c-4d94-8852-60af400810e9)」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Web ページの状態を識別するキーと値のペアのキー部分。</param>
        <param name="value">Web ページの状態を識別するキーと値のペアの値部分。</param>
        <param name="title">この状態のタイトルとしてブラウザーの履歴スタックに追加するテキスト。</param>
        <summary>指定した状態キー、状態値、および状態タイトルを使用して、履歴ポイントを作成し、ブラウザーの履歴スタックに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、状態および状態のタイトルを識別するのに値を保存するときに、履歴ポイントを作成できます。 履歴ポイントを作成してシリアル化および暗号化されたデータが、Web ページの URL に追加したブラウザーの履歴スタックにエントリが含まれます。 場合、 `title` パラメーターは `null`, 、Web ページのタイトルは、履歴スタック内の状態エントリのタイトルとして使用されます。  
  
 状態データを使用すると、以降のサーバー ナビゲーション イベントが発生したときに、ページを再作成します。 詳細については、「[Managing Browser History Using ASP.NET Server Controls](http://msdn.microsoft.com/ja-jp/bad617c8-f84c-4d94-8852-60af400810e9)」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly AjaxFrameworkAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly AjaxFrameworkAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ページのコンポーネントが使用する AJAX フレームワーク アセンブリを取得します。</summary>
        <value>Ajax フレームワーク アセンブリ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AjaxFrameworkMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Microsoft Ajax クライアント ライブラリのクライアント スクリプトをクライアントに含める方法を示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.AjaxFrameworkMode" /> 列挙値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> プロパティをすべて有効にする [!INCLUDE[ajax_current_ext](~/includes/ajax-current-ext-md.md)] スクリプト ファイルがすべて無効にする [!INCLUDE[ajax_current_ext](~/includes/ajax-current-ext-md.md)] スクリプト ファイル、または個々 のスクリプトを明示的に指定するファイルです。  
  
   
  
## 例  
 次の例を設定する方法を示しています、 <xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> プロパティを `Explicit` スクリプトを明示的に指定できることを示します。  
  
```  
<asp:ScriptManager ID="sm1" AjaxFrameworkMode="Explicit" runat="server">   
<Scripts>   
    <asp:ScriptReference Name="MicrosoftAjaxCore.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxComponentModel.js" />    
    <asp:ScriptReference Name="MicrosoftAjaxSerialization.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxNetwork.js" />       
</Scripts>   
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.AjaxFrameworkMode" />
      </Docs>
    </Member>
    <Member MemberName="AllowCustomErrorsRedirect">
      <MemberSignature Language="C#" Value="public bool AllowCustomErrorsRedirect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowCustomErrorsRedirect" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期ポストバック中にエラーが発生したときに Web.config ファイルのカスタム エラー セクションを使用するかどうかを指定する値を取得または設定します。</summary>
        <value>Web.config ファイルのカスタム エラー設定を使用して非同期ポストバック中のエラー動作を決定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントは非同期ポストバック中にページ エラーがあると発生します。 クライアントへのサーバー上のエラーの送信方法によって異なります、 <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> 、プロパティ、 <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティ、および Web.config ファイルのカスタム エラー セクションです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期ポストバックの実行中にページ エラーが発生すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントは非同期ポストバック中にページ エラーがあると発生します。 クライアントへのサーバー上のエラーの送信方法によって異なります、 <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> 、プロパティ、 <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティ、および Web.config ファイルのカスタム エラー セクションです。  
  
   
  
## 例  
 次の例を処理する方法を示しています、 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> 設定イベントが、 <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> サーバー例外のエラー メッセージにプロパティ \(これは、クライアントに送信されます\)。  
  
 [!code-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackErrorMessage">
      <MemberSignature Language="C#" Value="public string AsyncPostBackErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期ポストバック中に未処理のサーバー例外が発生するとクライアントに送信されるエラー メッセージを取得または設定します。</summary>
        <value>エラー メッセージ。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントは非同期ポストバック中にページ エラーがあると発生します。 クライアントへのサーバー上のエラーの送信方法によって異なります、 <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> 、プロパティ、 <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティ、および Web.config ファイルのカスタム エラー セクションです。  
  
   
  
## 例  
 次の例を処理する方法を示しています、 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> 設定イベントが、 <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> サーバー例外のエラー メッセージにプロパティ \(これは、クライアントに送信されます\)。  
  
 [!code-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackSourceElementID">
      <MemberSignature Language="C#" Value="public string AsyncPostBackSourceElementID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackSourceElementID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期ポストバックを発生させたコントロールの一意の ID を取得します。</summary>
        <value>コントロールに ID がある場合は、コントロールの一意の ID。それ以外の場合は、空の文字列 \(""\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID%2A> property contains the value of the control ID that caused the asynchronous postback, which can be one of the following:  
  
-   A postback from a control that is inside an <xref:System.Web.UI.UpdatePanel> control whose <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> property is set to **languageKeyword tag is not supported!!!!**  
     \(the default\).  
  
-   A postback from a control that is a trigger for an <xref:System.Web.UI.UpdatePanel> control.  
  
-   A postback from a control that is registered by calling the <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> method of the <xref:System.Web.UI.ScriptManager> control.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackTimeout">
      <MemberSignature Language="C#" Value="public int AsyncPostBackTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AsyncPostBackTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(90)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>応答がない場合に非同期ポストバックがタイムアウトするまでの時間 \(秒単位\) を表す値を取得または設定します。</summary>
        <value>タイムアウトを秒単位で表す整数。 既定値は 90 秒です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationService">
      <MemberSignature Language="C#" Value="public System.Web.UI.AuthenticationServiceManager AuthenticationService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.AuthenticationServiceManager AuthenticationService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AuthenticationService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AuthenticationServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Web.UI.ScriptManager" /> インスタンスに関連付けられている <see cref="T:System.Web.UI.AuthenticationServiceManager" /> オブジェクトを取得します。</summary>
        <value>現在の <see cref="T:System.Web.UI.ScriptManager" /> インスタンスに対する <see cref="T:System.Web.UI.AuthenticationServiceManager" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.AuthenticationServiceManager> このプロパティによって返されるオブジェクトは、ページに登録されている認証サービスを表します。 認証サービスを定義することができます、 <xref:System.Web.UI.ScriptManager> コントロールまたは関連付けられている <xref:System.Web.UI.ScriptManagerProxy> コントロールです。  
  
 ASP.NET 認証サービスを使用したり、カスタム認証サービスを使用することができます。 マークアップでカスタムのサービスを追加するには含めることによって、 `AuthenticationService` 内の要素、 `asp:ScriptManager` 要素\] ページで、次の例で示すようにします。  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <AuthenticationService Path="MyAuthenticationService.asmx" />  
</asp:ScriptManager>  
```  
  
 プログラムによっても構成することができます、 <xref:System.Web.UI.AuthenticationServiceManager> オブジェクトです。 登録されるサービス、 <xref:System.Web.UI.ScriptManager> コントロール、ページの中に <xref:System.Web.UI.Control.PreRender> ライフ サイクルの段階です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientNavigateHandler">
      <MemberSignature Language="C#" Value="public string ClientNavigateHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientNavigateHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ClientNavigateHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントで [Sys.Application.navigate](http://msdn.microsoft.com/ja-jp/79ac04af-18b4-4106-9ab7-9cb10fbd0b93) イベントを処理するメソッドの名前を取得または設定します。</summary>
        <value>クライアントで [Sys.Application.navigate](http://msdn.microsoft.com/ja-jp/79ac04af-18b4-4106-9ab7-9cb10fbd0b93) イベントを処理するメソッドの名前。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositeScript">
      <MemberSignature Language="C#" Value="public System.Web.UI.CompositeScriptReference CompositeScript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.CompositeScriptReference CompositeScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.CompositeScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.CompositeScriptReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web ページをサポートする複合スクリプトへの参照を取得します。</summary>
        <value>複合スクリプトへの参照。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information, see [Combining Client Scripts into a Composite Script](http://msdn.microsoft.com/ja-jp/d0f608d0-b4c8-4795-990b-ede68c1239b3).  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyPageUrl">
      <MemberSignature Language="C#" Value="public virtual string EmptyPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyPageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EmptyPageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.Web.UI.Design.UrlEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>空白の Web ページの URL を取得または設定します。</summary>
        <value>対象 Web ページが空の場合に使用する URL。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Web.UI.ScriptManager.EmptyPageUrl%2A> property supports Ajax browser history.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdn">
      <MemberSignature Language="C#" Value="public bool EnableCdn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdn" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のページがクライアント スクリプト参照を CDN \(Content Delivery Network\) パスから読み込むかどうかを判断します。</summary>
        <value>クライアント スクリプト参照が CDN パスから読み込まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定しない `true` に設定した場合 <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> に `true` 既にします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdnFallback">
      <MemberSignature Language="C#" Value="public bool EnableCdnFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdnFallback" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdnFallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>CDN \(Content Delivery Network\) が使用できない場合にスクリプトのローカル コピーの読み込みを有効にします。</summary>
        <value>フォールバック CDN 値が有効になっている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableHistory">
      <MemberSignature Language="C#" Value="public bool EnableHistory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHistory" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableHistory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web ページが履歴ポイントの管理をサポートしているかどうかを示す値を取得または設定します。</summary>
        <value>Web ページがブラウザーの履歴スタックへの履歴ポイントの追加をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use the <xref:System.Web.UI.ScriptManager.EnableHistory%2A> property to enable history management in a Web page.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePageMethods">
      <MemberSignature Language="C#" Value="public bool EnablePageMethods { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePageMethods" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePageMethods" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET ページ内のパブリック静的ページ メソッドをクライアント スクリプトから 呼び出せるかどうかを示す値を取得または設定します。</summary>
        <value>ASP.NET ページ上の静的ページ メソッドをクライアント スクリプトから Web メソッドとして呼び出せる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can add static page methods to an ASP.NET page and mark them as Web methods. You can then call these methods from script as if they were part of a Web service, but without creating a separate .asmx file. To create Web methods on a page, import the <xref:System.Web.Services> namespace and add a <xref:System.Web.Services.WebMethodAttribute> attribute to each static method that you want to expose. The methods must be marked public.  
  
 For more information, see [Exposing Web Services to Client Script in ASP.NET AJAX](http://msdn.microsoft.com/ja-jp/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePartialRendering">
      <MemberSignature Language="C#" Value="public bool EnablePartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ページの部分レンダリングを有効化する値を取得または設定します。これにより、<see cref="T:System.Web.UI.UpdatePanel" /> コントロールを使用してページの各部を個別に更新できるようになります。</summary>
        <value>部分レンダリングが有効で、ページ全体の更新が実行されない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合でも、 <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> プロパティは、 `true`, 、部分ページ レンダリングが行われない場合します。 ブラウザーが部分ページ レンダリングをサポートしていない、または <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> にプロパティが設定されている `false`します。  
  
 値を上書きする、 <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> 中またはページの前に、実行時にプロパティ <xref:System.Web.UI.Control.Init> イベントです。 ページの後にこのプロパティを変更しようとする場合は、 <xref:System.Web.UI.Control.Init> イベントが発生した、 <xref:System.InvalidOperationException> 例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" /> 後、ページのプロパティが <see cref="E:System.Web.UI.Control.Init" /> イベントが発生します。</exception>
        <altmember cref="T:System.Web.UI.UpdatePanel" />
        <altmember cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="EnableScriptGlobalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptGlobalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptGlobalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptGlobalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.ScriptManager" /> コントロールが、カルチャ固有の情報の解析および書式設定をサポートするスクリプトをレンダリングするかどうかを示す値を取得または設定します。</summary>
        <value>カルチャ固有の情報を表示できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When the <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> property is set to **languageKeyword tag is not supported!!!!**  
, globalized ECMAScript \(JavaScript\) functions such as the  method display culture\-specific information. The culture can be set in the browser, in server code, or in the Web site's configuration file.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableScriptLocalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptLocalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptLocalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptLocalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.ScriptManager" /> コントロールが、スクリプト ファイルのローカライズ バージョンをレンダリングするかどうかを示す値を取得または設定します。</summary>
        <value>ローカライズされたスクリプト ファイルがレンダリングされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When the <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> property is set to **languageKeyword tag is not supported!!!!**  
, the <xref:System.Web.UI.ScriptManager> object will retrieve script files for the current culture if they exist. For example, a page might specify a script file that is named CustomScript.js. If the culture is set to fr\-CA, the <xref:System.Web.UI.ScriptManager> object will try to retrieve a script file that is named CustomScript.fr\-CA.js.  
  
> [!NOTE]
>  To prevent a script file from being rendered two times, the <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> property must not be modified during an asynchronous postback.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSecureHistoryState">
      <MemberSignature Language="C#" Value="public bool EnableSecureHistoryState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSecureHistoryState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableSecureHistoryState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>履歴状態文字列を暗号化するかどうかを示す値を取得または設定します。</summary>
        <value>履歴状態文字列を暗号化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!WARNING]
>  This property should **legacyBold tag is not supported!!!!**  
>  be set to **languageKeyword tag is not supported!!!!**  
>  on a production web site.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptManager GetCurrent (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.ScriptManager GetCurrent(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetCurrent(System.Web.UI.Page)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">
          <see cref="T:System.Web.UI.ScriptManager" /> の取得元のページ インスタンス。</param>
        <summary>指定された <see cref="T:System.Web.UI.Page" /> オブジェクトの <see cref="T:System.Web.UI.ScriptManager" /> インスタンスを取得します。</summary>
        <returns>選択された <see cref="T:System.Web.UI.Page" /> オブジェクトの現在の <see cref="T:System.Web.UI.ScriptManager" /> インスタンス。または、インスタンスが定義されていない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この静的メソッドを使用しているかどうか、 <xref:System.Web.UI.ScriptManager> コントロールがページで、またはプロパティとメソッドにアクセスする、 <xref:System.Web.UI.ScriptManager> 制御と把握していない ID  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredArrayDeclarations">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredArrayDeclarations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.Page" /> オブジェクトに既に登録済みの ECMAScript \(JavaScript\) 配列宣言の読み取り専用のコレクションを取得します。</summary>
        <returns>配列宣言を含むジェネリック コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterArrayDeclaration" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredClientScriptBlocks">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredClientScriptBlocks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.ScriptManager" /> コントロールに既に登録済みのクライアント スクリプト ブロックの読み取り専用のコレクションを取得します。</summary>
        <returns>クライアント スクリプト ブロックを含むジェネリック コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 登録されているクライアント スクリプト ブロック、 <xref:System.Web.UI.ScriptManager> 内にあるコントロールで使用するためのコントロール、 <xref:System.Web.UI.UpdatePanel> コントロールです。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredDisposeScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredDisposeScripts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.Page" /> オブジェクトに既に登録済みの <see langword="dispose" /> スクリプトの読み取り専用のコレクションを取得します。</summary>
        <returns>
          <see langword="dispose" /> スクリプトを含むジェネリック コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A `dispose` ときにスクリプトが実行される、 <xref:System.Web.UI.UpdatePanel> コントロールが更新または削除します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredExpandoAttributes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredExpandoAttributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.Page" /> オブジェクトに既に登録済みのカスタム \(expando\) 属性の読み取り専用のコレクションを取得します。</summary>
        <returns>カスタム属性を含むジェネリック コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 カスタム属性は、読み取りおよびクライアント スクリプトによって設定を持つ名前\/値ペアです。  
  
   
  
## 例  
 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.RegisteredExpandoAttribute>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredHiddenFields">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredHiddenFields" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.Page" /> オブジェクトに既に登録済みの隠しフィールドの読み取り専用のコレクションを取得します。</summary>
        <returns>隠しフィールドを含むジェネリック コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.RegisteredHiddenField" />
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterHiddenField" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredOnSubmitStatements">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredOnSubmitStatements" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.Page" /> オブジェクトに既に登録済みの <see langword="onsubmit" /> ステートメントの読み取り専用のコレクションを取得します。</summary>
        <returns>
          <see langword="onsubmit" /> ステートメントを含むジェネリック コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `onsubmit` ステートメントは、フォームが送信されるときに実行される ECMAScript \(JavaScript\)。  
  
   
  
## 例  
 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredStartupScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredStartupScripts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.Page" /> オブジェクトに既に登録済みの起動スクリプトの読み取り専用のコレクションを取得します。</summary>
        <returns>起動スクリプトを含むジェネリック コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スタートアップ スクリプトは、コントロールの開始時に実行されるコントロールに関連付けられているクライアント スクリプトです。  
  
   
  
## 例  
 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ScriptManager.GetRegisteredStartupScripts%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStateString">
      <MemberSignature Language="C#" Value="public string GetStateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetStateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetStateString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Web ページの状態を表すキーと値のペアが含まれる文字列を取得します。</summary>
        <returns>Web ページの状態を表すキーと値のペアが含まれる文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDebuggingEnabled">
      <MemberSignature Language="C#" Value="public bool IsDebuggingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDebuggingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsDebuggingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアント スクリプト ライブラリのデバッグ バージョンがレンダリングされるかどうかを示す値を取得します。</summary>
        <value>デバッグ モードで現在の要求が実行されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> プロパティを返します。 `false` 、次の条件のいずれかが true の場合。  
  
-   構成ファイルの要素で、 `retail` に属性が設定されている `true`します。 これには、その他のすべての設定がオーバーライドされます。  
  
-   <xref:System.Web.UI.ScriptManager.ScriptMode%2A> にプロパティが設定されている `Auto` または `Inherit`, 、デバッグが有効でないと、 `compilation` アプリケーション ルートの Web.config ファイルのセクションです。  
  
-   <xref:System.Web.UI.ScriptManager.ScriptMode%2A> プロパティが `Release` に設定されている。  
  
    > [!NOTE]
    >  `debug` ディレクティブの属性では Ajax 対応 ASP.NET アプリケーションには影響しません。<xref:System.Web.UI.ScriptManager> 制御し、Web.config ファイルで、\[設定のみを使用してその <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> と <xref:System.Web.UI.ScriptManager.ScriptMode%2A> プロパティをデバッグ スクリプトをレンダリングするかどうかを確認します。  
  
 詳細については、「[ASP.NET AJAX Debugging and Tracing Overview](http://msdn.microsoft.com/ja-jp/92684ea0-7bb4-4a34-9203-3aa6394ce375)」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpContext.IsDebuggingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsInAsyncPostBack">
      <MemberSignature Language="C#" Value="public bool IsInAsyncPostBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInAsyncPostBack" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsInAsyncPostBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>部分レンダリング モードで現在のポストバックが実行されているかどうかを示す値を取得します。</summary>
        <value>部分レンダリング モードで現在のポストバックが実行されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> プロパティと組み合わせて、 <xref:System.Web.UI.Page.IsPostBack%2A> 初期ページの読み込み、部分ページ更新、およびページ全体の更新で識別するためにプロパティ <xref:System.Web.UI.Control.Load>, 、<xref:System.Web.UI.Page.InitComplete>, 、または <xref:System.Web.UI.Control.PreRender> イベントです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="IsNavigating">
      <MemberSignature Language="C#" Value="public bool IsNavigating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNavigating" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsNavigating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Web.UI.ScriptManager.Navigate" /> イベントが現在処理されているかどうかを示す値を取得します。</summary>
        <value>
          <see cref="E:System.Web.UI.ScriptManager.Navigate" /> が処理されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.ScriptManager.IsNavigating%2A> を確認するにするかどうか、 <xref:System.Web.UI.ScriptManager.Navigate> イベントが発生しました。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="protected virtual bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">コントロールのキー識別子。</param>
        <param name="postCollection">受信するすべてのポスト データのコレクション。</param>
        <summary>ブラウザーからサーバーへポストされたフォーム データを読み取り、非同期ポストバックのソースを判断します。</summary>
        <returns>ポストバックの結果、<see cref="T:System.Web.UI.ScriptManager" /> コントロールの状態が変化した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.LoadPostData%2A> の機能を拡張コントロールの開発者によってメソッドが、主に使用される、 <xref:System.Web.UI.ScriptManager> コントロールです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <Member MemberName="LoadScriptsBeforeUI">
      <MemberSignature Language="C#" Value="public bool LoadScriptsBeforeUI { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LoadScriptsBeforeUI" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.LoadScriptsBeforeUI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ページ UI のマークアップが読み込まれる前と後のどちらにスクリプトが読み込まれるかを示す値を取得または設定します。</summary>
        <value>UI のマークアップが読み込まれる前にスクリプトが読み込まれる場合は <see langword="true" />。UI のマークアップが読み込まれた後にスクリプトが読み込まれる場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> プロパティを決定する方法でスクリプト、 <xref:System.Web.UI.ScriptManager.Scripts%2A> ページの UI のマークアップを基準としたコレクションが読み込まれます。  
  
 ときに、 <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> プロパティは、 `true`, 、 `script` ページの UI のマークアップが読み込まれる前に、要素が表示されます。 このシナリオではスクリプトでは、UI 要素が定義されている場合、UI が完全に機能を読み込む際にします。 ただし、スクリプトには、対象のインスタンスがまだ作成されていないマークアップで UI 要素がアクセスする、エラーが発生します。 アクセスする前に、UI 要素が読み込まれていることを確認するには、クラスのイベントを処理します。  
  
 ときに、 <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> プロパティは、 `false`, 、 `script` ページの UI のマークアップが表示された後に要素が表示されます。 このシナリオでは、UI の読み込みが高速なる場合が、完全に機能追加の UI 要素を定義するスクリプトが読み込みを完了していない場合。  
  
 このプロパティを設定しない `true` に設定した場合 <xref:System.Web.UI.ScriptManager.EnableCdn%2A> に `true` 既にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.Scripts" />
        <altmember cref="T:System.Web.UI.ScriptReference" />
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; Navigate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.HistoryEventArgs&gt; Navigate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.Navigate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.HistoryEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがブラウザーの **\[戻る\]** ボタンまたは **\[進む\]** ボタンをクリックしたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザーがブラウザーの **戻る** \] ボタンが移動前に表示した Url を履歴ポイントの状態データを含む Url を含めることができます。 Web ページ内のクライアント コードが URL に状態の履歴データが含まれることを検出した場合は、要求をサーバーのページを行います。 これは、ポストバック イベントとして機能し、 <xref:System.Web.UI.ScriptManagerProxy> サーバー コントロールを生成、 `Navigate` イベントです。 このイベントを処理して、イベントに渡される状態データを使用して、Web アプリケーションで必要なページを再作成することができます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAsyncPostBackError">
      <MemberSignature Language="C#" Value="protected virtual void OnAsyncPostBackError (System.Web.UI.AsyncPostBackErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnAsyncPostBackError(class System.Web.UI.AsyncPostBackErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.AsyncPostBackErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">エラー イベント データ。</param>
        <summary>
          <see cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> イベントは非同期ポストバック中にページ エラーがあると発生します。 クライアントへのサーバー上のエラーの送信方法によって異なります、 <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> 、プロパティ、 <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> プロパティ、および Web.config ファイルのカスタム エラー セクションです。  
  
   
  
## 例  
 次の例を処理する方法を示しています、 <xref:System.Web.UI.ScriptManager.AsyncPostBackError> 設定イベントが、 <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> サーバー例外のエラー メッセージにプロパティ \(これは、クライアントに送信されます\)。  
  
 [!code-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>
          <see cref="E:System.Web.UI.Control.Init" /> イベントを発生させ、ページ上に 1 つの <see cref="T:System.Web.UI.ScriptManager" /> コントロールのみ存在することを確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">複数のインスタンスの <see cref="T:System.Web.UI.ScriptManager" /> 、ページ上に存在します。</exception>
        <block subset="none" type="overrides">
          <para>When overriding this method, call the base <see cref="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" /> method so that script files are correctly handled for partial-page rendering.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>
          <see cref="E:System.Web.UI.Control.PreRender" /> イベントを発生させ、部分ページ更新用のスクリプト ファイルおよびサービスを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 DOM の詳細については、次を参照してください。、 [Document Object Model \(DOM\) Level 1 Specification](http://go.microsoft.com/fwlink/?LinkId=73305) World Wide Web コンソーシアム \(W3C\) の Web サイトにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">部分ページ要求を送ったブラウザーが、少なくともにサポートされていない DOM レベル 1.0 です。</exception>
        <block subset="none" type="overrides">
          <para>When overriding this method, call the base <see cref="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" /> method so that script blocks and services are correctly handled for partial-page rendering.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveCompositeScriptReference (System.Web.UI.CompositeScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveCompositeScriptReference(class System.Web.UI.CompositeScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveCompositeScriptReference(System.Web.UI.CompositeScriptReferenceEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.CompositeScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">複合スクリプト参照を表すオブジェクト。</param>
        <summary>
          <see cref="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResolveScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveScriptReference (System.Web.UI.ScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveScriptReference(class System.Web.UI.ScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveScriptReference(System.Web.UI.ScriptReferenceEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.ScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">現在のスクリプトを表すオブジェクト。</param>
        <summary>
          <see cref="T:System.Web.UI.ScriptManager" /> コントロールによって管理される各スクリプト参照に対して <see cref="E:System.Web.UI.ScriptManager.ResolveScriptReference" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.Web.UI.ScriptManager.OnPreRender%2A> イベント ハンドラーごとに 1 回 <xref:System.Web.UI.ScriptReference> で、 <xref:System.Web.UI.ScriptManager.Scripts%2A> コレクションです。  
  
 <xref:System.Web.UI.ScriptManager.ResolveScriptReference> イベントは、重複するスクリプトのエントリが解決した後に発生します。  
  
 ポストバックまたは部分ページ更新中に個々 のスクリプト ブロックの動作を変更するには、このメソッドをオーバーライドします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProfileService">
      <MemberSignature Language="C#" Value="public System.Web.UI.ProfileServiceManager ProfileService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ProfileServiceManager ProfileService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ProfileService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ProfileServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Web.UI.ScriptManager" /> インスタンスに関連付けられている <see cref="T:System.Web.UI.ProfileServiceManager" /> オブジェクトを取得します。</summary>
        <value>現在の <see cref="T:System.Web.UI.ScriptManager" /> インスタンスに対する <see cref="T:System.Web.UI.ProfileServiceManager" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ProfileServiceManager> このプロパティによって返されるオブジェクトは、ページに登録されているプロファイル サービスを表します。 プロファイル サービスを定義することができます、 <xref:System.Web.UI.ScriptManager> コントロールまたは関連付けられている <xref:System.Web.UI.ScriptManagerProxy> コントロールです。  
  
 ASP.NET プロファイル サービスを使用したり、カスタム プロファイル サービスを使用することができます。 マークアップでカスタムのサービスを追加するには含めることによって、 `ProfileService` 内の要素、 `asp:ScriptManager` 要素\] ページで、次の例で示すようにします。  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <ProfileService LoadProperties="propertyA,propertyB"  
    Path="MyProfileService.asmx" />  
</asp:ScriptManager>  
```  
  
 プログラムによっても構成することができます、 <xref:System.Web.UI.ProfileServiceManager> オブジェクトです。 登録されるサービス、 <xref:System.Web.UI.ScriptManager> コントロール、ページの中に <xref:System.Web.UI.Control.PreRender> ライフ サイクルの段階です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostBackEvent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Web ページの履歴状態を表すキーと値のペアが含まれる文字列。</param>
        <summary>
          <see cref="T:System.Web.UI.ScriptManager" /> コントロールによって発生させられたポストバック イベントを処理し、Web ページの履歴状態を読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>サーバーへのポストバック時に、<see cref="T:System.Web.UI.ScriptManager" /> コントロールのイベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.RaisePostDataChangedEvent%2A> の機能を拡張コントロールの開発者によってメソッドが、主に使用される、 <xref:System.Web.UI.ScriptManager> コントロールです。 既定の実装の <xref:System.Web.UI.ScriptManager> コントロール、イベントは発生しません。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">配列を登録するコントロール。</param>
        <param name="arrayName">登録する配列の名前。</param>
        <param name="arrayValue">登録する配列値。</param>
        <summary>
          <see cref="T:System.Web.UI.UpdatePanel" /> コントロール内のコントロールで使用できるように ECMAScript \(JavaScript\) 配列宣言を <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、配列をページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> された部分ページ レンダリングを互換性のあるクライアント スクリプト配列を登録するメソッドを持たない [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] の依存関係。 このメソッドは、配列、登録と `control` 内のコントロールを表す、 <xref:System.Web.UI.UpdatePanel> 更新されているコントロール。 非同期ポストバックが発生するたびに配列を登録するには、使用、 <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関係し、配列の最初のページのレンダリング中に一度だけを登録する場合は使用して配列を登録する場合、 <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> メソッドは、配列で指定されている名前を持つかどうかを判断、 `arrayName` パラメーターは既に登録されています。 そのため、このメソッドは追加で指定された値の場合 `arrayValue`します。 登録する配列が基づいているため、 <xref:System.Collections.ArrayList> クラス、重複は許可されています。 場合に名前を持つ登録されている配列 `arrayName` が存在しない配列の作成と内の値 `arrayValue` それに追加されます。  
  
 配列の文字列リテラルは、単一引用符 \('\) または二重引用符をエスケープ \(\\"\) で `arrayValue`します。  
  
 JavaScript が配列内の区切り記号としてコンマ \(,\) を処理することに注意してください。 コンマ区切りの文字列を渡すことによって、複数の配列値を指定できます `arrayValue`します。 2 つの項目で、コンマで区切って `arrayValue` を呼び出すことと同じです、 <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> メソッド、2 回ごとに 1 回の項目。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Page page, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Page page, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">配列を登録するページ オブジェクト。</param>
        <param name="arrayName">登録する配列の名前。</param>
        <param name="arrayValue">登録する配列値。</param>
        <summary>
          <see cref="T:System.Web.UI.UpdatePanel" /> コントロール内のコントロールで使用できるように ECMAScript \(JavaScript\) 配列宣言を <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、配列をページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> された部分ページ レンダリングを互換性のあるクライアント スクリプト配列を登録するメソッドを持たない [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] の依存関係。 このメソッドは、非同期ポストバックが発生するたびに、配列を登録します。 配列内のコントロールを登録する、 <xref:System.Web.UI.UpdatePanel> を制御できるため、配列が登録されている、パネルが更新されたときにのみ、使用して、 <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関係し、配列の最初のページのレンダリング中に一度だけを登録する場合は使用して配列を登録する場合、 <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAsyncPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterAsyncPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterAsyncPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">非同期ポストバック用に登録するコントロール。</param>
        <summary>コントロールを非同期ポストバックのトリガーとして登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> メソッドでは、同期ポストバックではなく、非同期ポストバックを実行するように、トリガーとしての Web サーバー コントロールを登録することができます。 ときに、 <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> のプロパティ、 <xref:System.Web.UI.UpdatePanel> にコントロールが設定されている `true` \(既定値は、\) 内のコントロールのポストバック、 <xref:System.Web.UI.UpdatePanel> コントロールが自動的に非同期ポストバック コントロールとして登録します。  
  
 使用して、 <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> の外部のコントロールを登録するメソッド、 <xref:System.Web.UI.UpdatePanel> 可能性のある更新パネルのコンテンツを更新して、非同期ポストバックのトリガーと同様に制御します。 更新する、 <xref:System.Web.UI.UpdatePanel> プログラムを使用してコントロールを呼び出し、 <xref:System.Web.UI.UpdatePanel.Update%2A> メソッドです。  
  
 使用して宣言によって、トリガーを追加することができます、 `Triggers` の要素、 <xref:System.Web.UI.UpdatePanel> コントロールです。[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)], 、デザイナーの使用 **コレクション エディターの \[UpdatePanelTrigger** \] ダイアログ ボックス。  
  
   
  
## 例  
 次の例を呼び出す方法を示します、 <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> を登録するメソッド、 <xref:System.Web.UI.WebControls.Button> 制御の更新が実行されるよう、 <xref:System.Web.UI.UpdatePanel> コントロールのコンテンツ。<xref:System.Web.UI.WebControls.Button> コントロールが内部ではない、 <xref:System.Web.UI.UpdatePanel> コントロールです。 2 つのボタンが表示されます: `Button1` と `Button2`です。`Button1` パネルの内容を更新し、 `Button2` ページ全体を更新します。  
  
 [!code-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager1CS.aspx#1)]
 [!code-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager1VB.aspx#1)]  
  
 次の例を呼び出す方法、 <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> の更新が実行されるように、ユーザーを登録するメソッドが制御、 <xref:System.Web.UI.UpdatePanel> コントロールのコンテンツ。 最初の例では、ユーザー コントロールを使用してページを示します。 2 番目の例では、ユーザー コントロールを示します。  
  
 [!code-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl\#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager2CS.aspx#2)]
 [!code-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl\#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager2VB.aspx#2)]  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">登録済みのコントロール実装しません。、 <see cref="T:System.Web.UI.INamingContainer" />, 、<see cref="T:System.Web.UI.IPostBackDataHandler" />, 、または <see cref="T:System.Web.UI.IPostBackEventHandler" /> インターフェイスです。</exception>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
        <altmember cref="M:System.Web.UI.UpdatePanel.Update" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">クライアント スクリプト ブロックを登録するコントロール。</param>
        <param name="type">クライアント スクリプト ブロックの型。 このパラメーターは、通常、<see langword="typeof" /> 演算子 \(C\#\) または <see langword="GetType" /> 演算子 \(Visual Basic\) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ブロックの一意の識別子。</param>
        <param name="script">スクリプト。</param>
        <param name="addScriptTags">スクリプト ブロックを <see langword="&lt;script&gt;" /> タグと <see langword="&lt;/script&gt;" /> タグで囲む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Web.UI.UpdatePanel" /> コントロール内のコントロールで使用できるようにクライアント スクリプト ブロックを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、スクリプト ブロックをページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> された部分ページ レンダリングを互換性のあるクライアント スクリプト ブロックを登録するメソッドを持たない [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] の依存関係。 このメソッドを使用して、登録されているクライアント スクリプト ブロックは、ページに送信される場合にのみ `control` 内のコントロールを表す、 <xref:System.Web.UI.UpdatePanel> 更新されているコントロール。 非同期ポストバックが発生するたびにスクリプト ブロックを登録するには、使用、 <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関係し、スクリプト ブロックの最初のページのレンダリング中に一度だけを登録する場合を使用してスクリプト ブロックを登録する場合、 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 場合 `addScriptTags` は `true`, 、 <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> メソッドは、追加 `<script>` タグで、スクリプト ブロックを囲みます。 渡す `false` を作成する場合は、 `<script>` など、特定の属性を設定する場合、タグ `<script>` タグ。 場合 `addScriptTags` は `false` と `script` パラメーターには、複数のスクリプト ブロックが含まれる、例外がスローされます。  
  
 <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> メソッドの開始後にスクリプト ブロックをページに追加する `<form>` タグ。 スクリプト ブロックは、登録されている同じ順序で出力されるとは限りません。 スクリプト ブロックの順序が重要な場合は、単一の文字列としてスクリプト ブロックを連結 \(たとえばを使用して、 <xref:System.Text.StringBuilder> オブジェクト\) に、1 つのクライアント スクリプト ブロックとして登録します。  
  
   
  
## 例  
 [!code-csharp[System.Web.UI.ScriptManager.RegisterClientScriptBlock\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/CS/ScriptManager_RegisterClientScriptBlockCS.aspx#1)]
 [!code-vb[System.Web.UI.ScriptManager.RegisterClientScriptBlock\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/vb/ScriptManager_RegisterClientScriptBlockVB.aspx#1)]  
  
 [!code-xml[System.Web.UI.ScriptManager.RegisterClientScriptBlock\#2](~/samples/snippets/common/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/Common/App_Data/Contacts.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプト ブロック <paramref name="type" /> は <see langword="null" />です。  
  
 または  
  
 スクリプト ブロックを登録するコントロールが <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">スクリプト ブロックを登録するコントロールは、ページのコントロール ツリーにはできません。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">クライアント スクリプト ブロックを登録するページ オブジェクト。</param>
        <param name="type">クライアント スクリプト ブロックの型。 このパラメーターは、通常、<see langword="typeof" /> 演算子 \(C\#\) または <see langword="GetType" /> 演算子 \(Visual Basic\) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ブロックの一意の識別子。</param>
        <param name="script">登録するスクリプト。</param>
        <param name="addScriptTags">スクリプト ブロックを <see langword="&lt;script&gt;" /> タグと <see langword="&lt;/script&gt;" /> タグで囲む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Web.UI.UpdatePanel" /> コントロール内のコントロールで使用できるようにクライアント スクリプト ブロックを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、スクリプト ブロックをページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、スクリプト ブロックを登録するときに、スクリプトは非同期ポストバックが発生するたびに表示されます。 内のコントロールのスクリプト ブロックを登録する、 <xref:System.Web.UI.UpdatePanel> を制御できるため、スクリプトが登録されている場合にのみ、 <xref:System.Web.UI.UpdatePanel> コントロールが更新を使用して、 <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関係し、スクリプト ブロックの最初のページのレンダリング中に一度だけを登録する場合を使用してスクリプト ブロックを登録する場合、 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">スクリプト ブロック <paramref name="type" /> は <see langword="null" />です。  
  
 または  
  
 スクリプト ブロックを登録するページが <see langword="null" />です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">クライアント スクリプト ファイルを登録するコントロール。</param>
        <param name="type">クライアント スクリプト ファイルの型。 このパラメーターは、通常、typeof 演算子 \(C\#\) または GetType 演算子 \(Visual Basic\) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ファイルの一意の識別子。</param>
        <param name="url">スクリプト ファイルの URL。</param>
        <summary>
          <see cref="T:System.Web.UI.UpdatePanel" /> コントロール内のコントロールで使用できるようにクライアント スクリプト ファイルを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、スクリプト ファイルの参照をページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> 部分ページ更新内のページまたは参加しているページの一部のクライアント スクリプト ファイルを登録します。 このメソッドを使用して、登録されているクライアント スクリプト ファイルは、ページに送信される場合にのみ、 `control` 内のコントロールを表す、 <xref:System.Web.UI.UpdatePanel> コントロールが更新中です。 非同期ポストバックが発生するたびにスクリプト ファイルを登録するには、使用、 <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関係し、スクリプト ブロックの最初のページのレンダリング中に一度だけを登録する場合を使用してスクリプト ブロックを登録する場合、 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> メソッドは、レンダリングすることによって、ページ上のクライアント スクリプト ファイルを登録、 `script` 要素の開始タグを含む、 `src` 属性です。`url` パラメーターを設定するため、 `src` 属性です。 Url を解決するを使用して、 <xref:System.Web.UI.Control.ResolveClientUrl%2A> メソッドです。 このメソッドは、パスを解決するのには呼び出された URL のコンテキストを使用します。  
  
 両方の <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> と <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> メソッドは、ブラウザーにスクリプト ファイルをレンダリングします。 同じ型とキー \(スクリプト ファイル\) または同じ型とリソース名 \(埋め込まれたリソース\) のスクリプトは既に描画されて、スクリプトは再度表示されません。  
  
   
  
## 例  
 [!code-csharp[System.Web.UI.ScriptManager.RegisterClientScriptInclude\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/ScriptManager_RegisterClientScriptIncludeCS.aspx#1)]  
  
 [!code-javascript[System.Web.UI.ScriptManager.RegisterClientScriptInclude\#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/scripts/script_alertdiv.js#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプト ファイル <paramref name="type" /> は <see langword="null" />です。  
  
 または  
  
 スクリプト ファイルを登録するコントロールが <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">スクリプト ファイルを登録するコントロールは、ページのコントロール ツリーにはできません。  
  
 または  
  
 <paramref name="url" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="url" /> が空です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Page page, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Page page, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">クライアント スクリプト ファイルを登録するページ オブジェクト。</param>
        <param name="type">クライアント スクリプト ファイルの型。 このパラメーターは、通常、typeof 演算子 \(C\#\) または GetType 演算子 \(Visual Basic\) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ファイルの一意の識別子。</param>
        <param name="url">スクリプト ファイルの URL。</param>
        <summary>非同期ポストバックが発生するたびにクライアント スクリプトを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、スクリプト ファイルの参照をページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用してスクリプト ファイルを登録するときに、スクリプトは非同期ポストバックが発生するたびに表示されます。 内のコントロールのスクリプト ファイルを登録する、 <xref:System.Web.UI.UpdatePanel> を制御できるため、スクリプトが登録されている場合にのみ、 <xref:System.Web.UI.UpdatePanel> コントロールが更新を使用して、 <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関係し、スクリプト ブロックの最初のページのレンダリング中に一度だけを登録する場合を使用してスクリプト ブロックを登録する場合、 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプト ファイル <paramref name="type" /> は <see langword="null" />です。  
  
 または  
  
 スクリプト ファイルを登録するページが <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="url" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="url" /> が空です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">スクリプトを登録するコントロール。</param>
        <param name="type">クライアント スクリプトの型。 このパラメーターは、通常、typeof 演算子 \(C\#\) または GetType 演算子 \(Visual Basic\) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="resourceName">リソースの識別子。</param>
        <summary>部分ページ レンダリングに関係するコントロールで使用できるように、アセンブリに埋め込まれているクライアント スクリプトを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> された部分ページ レンダリングを互換性のあるスクリプトを登録するメソッドを持たない [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] の依存関係。 このメソッドを使用して、登録されているスクリプト リソースが登録されている場合にのみ `control` 内のコントロールを表す、 <xref:System.Web.UI.UpdatePanel> コントロールが更新されます。 非同期ポストバックが発生するたびにスクリプトを登録するには、使用、 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関係し、スクリプト ブロックの最初のページのレンダリング中に一度だけを登録する場合を使用してスクリプト ブロックを登録する場合、 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> アセンブリからのリソースは、HTTP ハンドラーを使用してアクセスされるときにメソッドを使用します。 このメソッドにはで、リソース URL のコンテンツが含まれています、 `script` 要素。  
  
 両方の <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> と <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> メソッドは、ブラウザーにスクリプト ファイルを読み込む。 同じ型とキー \(スクリプト ファイル\) または同じ型とリソース名 \(埋め込まれたリソース\) のスクリプトは既に読み込まれている場合、スクリプトは読み込まれません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント リソース <paramref name="type" /> は <see langword="null" />です。  
  
 または  
  
 スクリプトを登録するコントロールが <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">スクリプトを登録するコントロールは、ページのコントロール ツリーにはできません。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Page page, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Page page, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">スクリプトを登録するページ オブジェクト。</param>
        <param name="type">クライアント スクリプトの型。 このパラメーターは、通常、typeof 演算子 \(C\#\) または GetType 演算子 \(Visual Basic\) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="resourceName">リソースの識別子。</param>
        <summary>ポストバックが発生するたびに、アセンブリに埋め込まれているクライアント スクリプト ファイルを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用してスクリプト ファイルを登録するときに、スクリプトは非同期ポストバックが発生するたびに表示されます。 内のコントロールのスクリプトを登録する、 <xref:System.Web.UI.UpdatePanel> を制御できるため、スクリプトが登録されている場合にのみ、 <xref:System.Web.UI.UpdatePanel> コントロールが更新を使用して、 <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関係し、スクリプト ブロックの最初のページのレンダリング中に一度だけを登録する場合を使用してスクリプト ブロックを登録する場合、 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント リソース <paramref name="type" /> は <see langword="null" />です。  
  
 または  
  
 スクリプトを登録するページが <see langword="null" />です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">データを受け取るコントロール。</param>
        <param name="dataItem">コントロールに送信されるデータ。</param>
        <summary>部分ページ レンダリング中にカスタム データをコントロールに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> があっても、データを受信して、コントロール内の非同期ポストバック中にデータをサーバーからクライアントに送信する方法、 <xref:System.Web.UI.UpdatePanel> コントロールです。  
  
 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> メソッドは、非同期ポストバック中にのみ呼び出すことができます。 ポストバックは非同期であるかどうかを確認するのには、使用、 <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> プロパティです。 このメソッドは、名前付きパラメーターを受け取るオーバー ロードを呼び出します。 `isJsonSerialized` に設定されている `false`します。 ときに、 `isJsonSerialized` にパラメーターが設定されている `false`, 、文字列は JavaScript Object Notation \(JSON\) としてシリアル化されません。 JSON 形式の詳細については、次を参照してください。、 [Introducing JSON](http://go.microsoft.com/fwlink/?LinkId=77297) Web サイトです。  
  
 登録されているデータ項目、 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> メソッドは、中にクライアント スクリプトでアクセスできる、およびとオブジェクトのイベントです。 これらのイベントを処理する場合は、カスタムのデータがイベント引数オブジェクトに渡されます。 たとえば、イベントのハンドラーを提供する場合は、プロパティを公開するクラスでカスタム データが渡されます。  
  
   
  
## 例  
 次の例は、2 つにデータを送信する方法を示しています。 <xref:System.Web.UI.WebControls.Label> 非同期ポストバック中にページ上のコントロールです。<xref:System.Web.UI.WebControls.Label> コントロールは、内部、 <xref:System.Web.UI.UpdatePanel> コントロールです。  
  
> [!NOTE]
>  この例で送信されるデータは、例示のみを目的です。 現実のアプリケーションで使用すると、 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> サーバーからカスタム データを送信する方法です。  
  
 [!code-csharp[System.Web.UI.ScriptManager.RegisterDataItem\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-vb[System.Web.UI.ScriptManager.RegisterDataItem\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" /> ポストバック時に呼び出されます。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataItem" /> 既に登録されて <paramref name="control" />します。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem, bool isJsonSerialized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem, bool isJsonSerialized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
        <Parameter Name="isJsonSerialized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">データを受け取るページ コントロール。</param>
        <param name="dataItem">コントロールに送信されるデータ。</param>
        <param name="isJsonSerialized">
          <c>dataItem</c> が JSON としてシリアル化されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>部分ページ レンダリング中にカスタム データをコントロールに送信し、データが JSON \(JavaScript Object Notation\) 形式かどうかを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> があっても、データを受信して、コントロール内の非同期ポストバック中にデータをサーバーからクライアントに送信する方法、 <xref:System.Web.UI.UpdatePanel> コントロールです。  
  
 場合、 `dataItem` を登録するパラメーター `control` JSON としてシリアル化されない設定、 `isJsonSerialized` パラメーターを `false`します。 これにより、各文字列は、クライアントに送信されるため、関数を使用する必要があります。 JSON 形式の詳細については、次を参照してください。、 [Introducing JSON](http://go.microsoft.com/fwlink/?LinkId=77297) Web サイトです。  
  
 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> メソッドは、非同期ポストバック中にのみ呼び出すことができます。 ポストバックは非同期であるかどうかを確認するのには、使用、 <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> プロパティです。  
  
 データ項目を使用して登録されている、 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> メソッドは、中にクライアント スクリプトでアクセスできる、およびとオブジェクトのイベントです。 これらのイベントを処理する場合は、カスタムのデータがイベント引数オブジェクトに渡されます。 たとえば、イベントのハンドラーを提供する場合は、プロパティを公開するクラスでカスタム データが渡されます。  
  
   
  
## 例  
 次の例は、2 つにデータを送信する方法を示しています。 <xref:System.Web.UI.WebControls.Label> 非同期ポストバック中にページ上のコントロールです。<xref:System.Web.UI.WebControls.Label> コントロールは、内部、 <xref:System.Web.UI.UpdatePanel> コントロールです。 この例でを取らないオーバー ロード、 `isJsonSerialized` パラメーター。 それ以外の場合、オブジェクトのプロパティを取得するための手順は、そのオーバー ロードを使用していない場合と同じです。  
  
> [!NOTE]
>  この例で送信されるデータは、例示のみを目的です。 現実のアプリケーションで使用すると、 <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> サーバーからカスタム データを送信する方法です。 たとえば、データ項目を使用してクライアントに内部ではない要素を表示または非表示にするかどうかに関する情報を送信する可能性があります、 <xref:System.Web.UI.UpdatePanel> コントロールです。  
  
 [!code-csharp[System.Web.UI.ScriptManager.RegisterDataItem\#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-vb[System.Web.UI.ScriptManager.RegisterDataItem\#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" /> ポストバック時に呼び出されます。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataItem" /> 既に登録されて <paramref name="control" />します。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDispose">
      <MemberSignature Language="C#" Value="public void RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">
          <see langword="dispose" /> スクリプトの目的のコントロール。</param>
        <param name="disposeScript">
          <see langword="dispose" /> スクリプト。</param>
        <summary>
          <see cref="T:System.Web.UI.UpdatePanel" /> コントロール内にあるコントロールに対して <see langword="dispose" /> スクリプトを登録します。 このスクリプトは、<see cref="T:System.Web.UI.UpdatePanel" /> コントロールが更新または削除されるときに実行されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、<xref:System.Web.UI.ScriptManager.RegisterDispose%2A>メソッドを登録する`dispose`内にあるコントロールのスクリプト、<xref:System.Web.UI.UpdatePanel>コントロール。 非同期ポストバック中に<xref:System.Web.UI.UpdatePanel>更新、削除、または作成されたコントロール。 パネルが更新または削除されたとき、いずれかの`dispose`内にあるコントロールに登録されているスクリプト、<xref:System.Web.UI.UpdatePanel>と呼ばれます。 ページの一般的な開発シナ リオでを呼び出す必要はありません、<xref:System.Web.UI.ScriptManager.RegisterDispose%2A>メソッドです。  
  
 <xref:System.Web.UI.ScriptManager.RegisterDispose%2A>メソッドが使用するスクリプトを登録またはから継承するコントロールを作成するコントロールの開発者によってもの、<xref:System.Web.UI.IScriptControl>インターフェイスです。 たとえば、使用する場合があります、`dispose`コンポジションを使ったクライアントのコントロールを開発する場合のスクリプトを作成します。 実装する、コントロールで<xref:System.Web.UI.IScriptControl>し、個々 のコントロールをレンダリングします。 登録する、`dispose`メソッドなど、定義されているクライアント コンポーネントに対応しない任意の項目の`Sys.TextBox`します。 カスタム コントロールがクライアント コンポーネントに対応する要素を構成するかどうか、 [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)]、登録する必要はありません、`dispose`スクリプト、ため`dispose`自動的に呼び出されます。 そのため、使用、<xref:System.Web.UI.ScriptManager.RegisterDispose%2A>メソッドの一部であるクライアント コンポーネントを[!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)]するコンポーネントを使用できなくする場合は、リソースを解放する必要があるとします。  
  
 <xref:System.Web.UI.ScriptManager.RegisterDispose%2A>メソッドは、コントロールの複数回呼び出すことがあります。 複数のスクリプトは集計されます。 スクリプトの破棄の順序では、スクリプトが登録された順序と一致します。  
  
 登録する場合、`dispose`スクリプトに含まれていないコントロールに対して、<xref:System.Web.UI.UpdatePanel>制御、例外がスローされます。`dispose`間でスクリプトが呼び出される、およびクラスのイベントです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="disposeScript" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" />ページが見つかりません。  
  
 または  
  
 <paramref name="control" />内部ではありません、<see cref="T:System.Web.UI.UpdatePanel" />コントロール。</exception>
        <altmember cref="T:System.Web.UI.IScriptControl" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public static void RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">expando 属性を登録するコントロール。</param>
        <param name="controlId">カスタム属性を含むページ上のコントロール。</param>
        <param name="attributeName">登録するカスタム属性の名前。</param>
        <param name="attributeValue">カスタム属性の値。</param>
        <param name="encode">登録されるカスタム属性をエンコードする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定されたコントロールのカスタム \(expando\) 属性として名前\/値ペアを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> された部分ページ レンダリングを互換性のあるコントロールのカスタム \(expando\) プロパティを登録するメソッドを持たない [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] の依存関係。  
  
 <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> メソッドは、指定したコントロールのカスタム属性として名前\/値ペアを登録します。 プロパティが、レンダリングされたコントロールのマークアップの XHTML の互換性を維持するように ECMAScript \(JavaScript\) から動的に設定されます。 設定 `encode` に `true` 動的プロパティの値に含まれる文字をエスケープする必要がある場合。  
  
 動的プロパティの追加されたコントロールが見つからない場合は、スクリプト エラーが発生します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> ページのコントロール ツリーではありません。  
  
 または  
  
 <paramref name="controlId" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="controlId" /> が空です。  
  
 または  
  
 <paramref name="attributeName" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="attributeName" /> が空です。  
  
 または  
  
 <paramref name="attributeName" /> 既に登録されています。</exception>
        <altmember cref="T:System.Web.UI.ClientScriptManager" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExtenderControl&lt;TExtenderControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterExtenderControl&lt;TExtenderControl&gt; (TExtenderControl extenderControl, System.Web.UI.Control targetControl) where TExtenderControl : System.Web.UI.Control, System.Web.UI.IExtenderControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterExtenderControl&lt;(class System.Web.UI.Control, class System.Web.UI.IExtenderControl) TExtenderControl&gt;(!!TExtenderControl extenderControl, class System.Web.UI.Control targetControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExtenderControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IExtenderControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="extenderControl" Type="TExtenderControl" />
        <Parameter Name="targetControl" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <typeparam name="TExtenderControl">
          <see cref="T:System.Web.UI.IExtenderControl" /> インターフェイスを実装しているコントロール。</typeparam>
        <param name="extenderControl">登録するエクステンダー コントロール。</param>
        <param name="targetControl">エクステンダー コントロールが拡張するスクリプト コントロール。</param>
        <summary>現在の <see cref="T:System.Web.UI.ScriptManager" /> インスタンスにエクステンダー コントロールを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、主にコントロールの開発者によって使用されます。 呼び出す、 <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> メソッド中にカスタムの ASP.NET Ajax エクステンダー コントロールからその `onInit` ページにコントロールを登録するイベント ハンドラーです。 部分ページ レンダリングに参加する ASP.NET Ajax エクステンダー コントロールを登録する必要があります。  
  
 <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> メソッドは、拡張ターゲット スクリプト コントロールとエクステンダー コントロールの内部リストに指定したエクステンダー コントロールを追加します。 この一覧は処理中に、 <xref:System.Web.UI.Control.PreRender> イベントです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extenderControl" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="targetControl" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">隠しフィールドを登録するコントロール。</param>
        <param name="hiddenFieldName">登録する隠しフィールドの名前。</param>
        <param name="hiddenFieldInitialValue">隠しフィールドの初期値。</param>
        <summary>
          <see cref="T:System.Web.UI.UpdatePanel" /> コントロール内のコントロールについて、隠しフィールドを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> された部分ページ レンダリングを互換性のある非表示フィールドを登録するメソッドを持たない [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] の依存関係。 このメソッドは、フィールドを登録するコントロールの内側に、非表示フィールドを登録、 <xref:System.Web.UI.UpdatePanel> 更新されているコントロール。 非同期ポストバックが発生するたびに非表示フィールドを登録するには、使用、 <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関係し、非表示フィールドの最初のページのレンダリング中に一度だけを登録する場合は使用して非表示フィールドを登録する場合、 <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> メソッドは、非表示を作成 `input` レンダリングされた HTML ページ上の要素。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="hiddenFieldName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> ページのコントロール ツリーではありません。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">隠しフィールドを登録するページ オブジェクト。</param>
        <param name="hiddenFieldName">登録する隠しフィールドの名前。</param>
        <param name="hiddenFieldInitialValue">隠しフィールドの初期値。</param>
        <summary>非同期ポストバックのたびに、隠しフィールドを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> された部分ページ レンダリングを互換性のある非表示フィールドを登録するメソッドを持たない [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] の依存関係。 このメソッドは、非同期ポストバックが発生するたびに、非表示フィールドを登録します。 内のコントロール用の隠しフィールドを登録する、 <xref:System.Web.UI.UpdatePanel> コントロール、パネルが更新されたときにのみ、フィールドが登録されていることを使用して、 <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関係し、非表示フィールドの最初のページのレンダリング中に一度だけを登録する場合は使用して非表示フィールドを登録する場合、 <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="hiddenFieldName" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Control control, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Control control, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Control,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">スクリプトを登録するコントロール。</param>
        <param name="resourceName">リソースの識別子。</param>
        <summary>部分ページ レンダリングに関係するコントロールで使用できるように、アセンブリに埋め込まれているクライアント スクリプトを、リソース名で <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Page page, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Page page, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Page,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">スクリプトを登録するページ オブジェクト。</param>
        <param name="resourceName">リソースの識別子。</param>
        <summary>部分ページ レンダリングに関係するコントロールで使用できるように、アセンブリに埋め込まれているクライアント スクリプトを、リソース名で <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">
          <see langword="onsubmit" /> ステートメントを登録するコントロール。</param>
        <param name="type">クライアント スクリプト ステートメントの型。 このパラメーターは、通常、typeof 演算子 \(C\#\) または GetType 演算子 \(Visual Basic\) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ステートメントの一意の識別子。</param>
        <param name="script">登録するスクリプト。</param>
        <summary>フォームが送信されるときに実行される <see cref="T:System.Web.UI.UpdatePanel" /> コントロールと連携するコントロールについて、ECMAScript \(JavaScript\) コードを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> フォームが送信される前に実行されるスクリプトを追加して送信された内容を変更またはキャンセルできます。  
  
 使用する、 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> をレンダリングする方法、 `onsubmit` ステートメント部分ページ レンダリングと互換性のあるし、\[いいえのある [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] の依存関係。 ステートメントを登録するコントロールが内部にある場合にのみ、このメソッドを使用して、登録されている JavaScript コードが、ページに送信された、 <xref:System.Web.UI.UpdatePanel> コントロールが更新中です。 非同期ポストバックのたびにコードを登録するには、使用、 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関連して、コードの最初のページのレンダリング中に一度だけを登録する場合は使用しなかったする JavaScript コードを登録する場合、 <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 *スクリプト* のパラメーター、 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> メソッドは、セミコロン \(;\) を使用して区切られた複数のスクリプト コマンドを含めることができます。  
  
 HTML フォームの詳細については、 `onsubmit` イベントを参照してください、 [World Wide Web Consortium \(W3C\) Web site](http://go.microsoft.com/fwlink/?linkid=37125)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="type" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> ページのコントロール ツリーではありません。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Page page, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Page page, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">
          <see langword="onsubmit" /> ステートメントを登録するページ オブジェクト。</param>
        <param name="type">クライアント スクリプト ステートメントの型。 このパラメーターは、通常、typeof 演算子 \(C\#\) または GetType 演算子 \(Visual Basic\) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ステートメントの一意の識別子。</param>
        <param name="script">登録するスクリプト。</param>
        <summary>フォームが送信されるときに実行される <see cref="T:System.Web.UI.UpdatePanel" /> コントロールと連携するコントロールについて、ECMAScript \(JavaScript\) コードを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 非同期ポストバックが発生するたびに含まれるスクリプトをこのメソッドを使用して JavaScript コードを登録します。  
  
> [!NOTE]
>  以前の非同期ポストバックのコードは削除されません。 新しい非同期ポストバックの既存のコードにコードを追加する、 `onsubmit` ステートメントです。  
  
 内のコントロールのコードを登録する、 <xref:System.Web.UI.UpdatePanel> を制御できるため、コードが登録されている場合にのみ、 <xref:System.Web.UI.UpdatePanel> コントロールが更新を使用して、 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関連して、コードの最初のページのレンダリング中に一度だけを登録する場合は使用しなかったする JavaScript コードを登録する場合、 <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="type" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterPostBackControl(System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">ポストバック用に登録するコントロール。</param>
        <summary>コントロールをポストバックのトリガーとして登録します。 このメソッドは、本来は非同期ポストバックを実行する <see cref="T:System.Web.UI.UpdatePanel" /> コントロール内のポストバック コントロールを構成するために使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A> 内のポストバック コントロールを登録するメソッド、 <xref:System.Web.UI.UpdatePanel> トリガーと同様に制御します。 このメソッドを使用して、登録されているコントロールのみを更新する代わりにページ全体の更新、 <xref:System.Web.UI.UpdatePanel> コントロールのコンテンツ。 外側には、このメソッドへのポストバック コントロールを登録、 <xref:System.Web.UI.UpdatePanel> コントロールには影響がない既定ではこれらのコントロールを実行しないための非同期ポストバックします。  
  
 使用して宣言によって、トリガーを追加することができます、 `Triggers` の要素、 <xref:System.Web.UI.UpdatePanel> コントロールです。[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)], 、デザイナーの使用 **コレクション エディターの \[UpdatePanelTrigger** \] ダイアログ ボックス。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptControl&lt;TScriptControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterScriptControl&lt;TScriptControl&gt; (TScriptControl scriptControl) where TScriptControl : System.Web.UI.Control, System.Web.UI.IScriptControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptControl&lt;(class System.Web.UI.Control, class System.Web.UI.IScriptControl) TScriptControl&gt;(!!TScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TScriptControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IScriptControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="scriptControl" Type="TScriptControl" />
      </Parameters>
      <Docs>
        <typeparam name="TScriptControl">
          <see cref="T:System.Web.UI.IScriptControl" /> インターフェイスを実装しているコントロール。</typeparam>
        <param name="scriptControl">登録するスクリプト コントロール。</param>
        <summary>現在の <see cref="T:System.Web.UI.ScriptManager" /> インスタンスにスクリプト コントロールを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、主にコントロールの開発者によって使用されます。 呼び出す、 <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> メソッド中にカスタムの ASP.NET Ajax スクリプト コントロールからその `onInit` ページにコントロールを登録するイベント ハンドラーです。 部分ページ レンダリングに参加する ASP.NET Ajax スクリプト コントロールを登録する必要があります。  
  
 <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> メソッドで処理されるスクリプト コントロールの内部の一覧に、指定したエクステンダー コントロールを追加する、 <xref:System.Web.UI.Control.PreRender> イベントです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scriptControl" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IExtenderControl extenderControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IExtenderControl extenderControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extenderControl" Type="System.Web.UI.IExtenderControl" />
      </Parameters>
      <Docs>
        <param name="extenderControl">スクリプト ディスクリプターが登録されるエクステンダー コントロール。</param>
        <summary>
          <see cref="T:System.Web.UI.ExtenderControl" /> クラスにコールバックして、クライアントのコントロール、コンポーネント、または動作を表すクライアント オブジェクトをサポートするためにレンダリングする必要があるインスタンス スクリプトを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Web.UI.ExtenderControl> class calls the <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> method in its <xref:System.Web.UI.Control.Render%2A> method.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>If you derive from the <see cref="T:System.Web.UI.ExtenderControl" /> class and override the <see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> method, but you do not call the base class method, you must call the <see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" /> method. This enables the <see cref="T:System.Web.UI.ScriptManager" /> control to render the instance scripts that support the client object that the control represents.</para>
        </block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IScriptControl scriptControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptControl" Type="System.Web.UI.IScriptControl" />
      </Parameters>
      <Docs>
        <param name="scriptControl">スクリプト ディスクリプターが登録されるスクリプト コントロール。</param>
        <summary>
          <see cref="T:System.Web.UI.ScriptControl" /> クラスを呼び出して、クライアントのコントロール、コンポーネント、または動作を表すクライアント オブジェクトをサポートするためにレンダリングする必要があるインスタンス スクリプトを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Web.UI.ScriptControl> class calls the <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> method during its <xref:System.Web.UI.Control.Render%2A> event.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>If you derive from the <see cref="T:System.Web.UI.ScriptControl" /> class and override the <see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> method, but you do not call the base class method, you must call the <see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" /> method. This enables the <see cref="T:System.Web.UI.ScriptManager" /> control to render the instance scripts that support the client object that the control represents.</para>
        </block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">クライアント スクリプト ブロックを登録するコントロール。</param>
        <param name="type">クライアント スクリプト ブロックの型。 このパラメーターは、通常、typeof 演算子 \(C\#\) または GetType 演算子 \(Visual Basic\) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ブロックの一意の識別子。</param>
        <param name="script">登録するスクリプト。</param>
        <param name="addScriptTags">スクリプト ブロックを <see langword="&lt;script&gt;" /> タグと <see langword="&lt;/script&gt;" /> タグで囲む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Web.UI.ScriptManager" /> コントロールを使用して <see cref="T:System.Web.UI.UpdatePanel" /> 内のコントロールの起動スクリプト ブロックを登録し、スクリプト ブロックをページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> された部分ページ レンダリングを互換性のあるページに対して起動スクリプト ブロックを登録するメソッドを持たない [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] の依存関係。 ブロックを登録するコントロールが内部にある場合にのみ、このメソッドを使用して、登録されている起動スクリプト ブロックは、ページに送信された、 <xref:System.Web.UI.UpdatePanel> コントロールが更新中です。 非同期ポストバックが発生するたびに起動スクリプト ブロックを登録するには、使用、 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関連して、スクリプトの最初のページのレンダリング中に一度だけを登録する場合は使用しなかったするスタートアップ スクリプトを登録する場合、 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 によって表示されているスクリプト ブロック、 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> メソッドは、ページ読み込みが完了したときに、ページのクライアントの前に実行されます。 `onload` イベントが発生します。 起動スクリプト ブロックは、直前にレンダリングされる ASP.NET ページの下部にある、 `</form>` タグ。  
  
 起動スクリプト ブロックを使用して登録されている <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> は登録されている同じ順序で出力されるとは限りません。 起動スクリプト ブロックの順序が重要な場合を使用して、 <xref:System.Text.StringBuilder> オブジェクトの 1 つの文字列内のスクリプト ブロックを収集して、それらすべてを 1 つのスタートアップ スクリプトとして登録します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="type" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> ページのコントロール ツリーではありません。</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">クライアント スクリプト ブロックを登録するページ オブジェクト。</param>
        <param name="type">クライアント スクリプト ブロックの型。 このパラメーターは、通常、typeof 演算子 \(C\#\) または GetType 演算子 \(Visual Basic\) を使用して指定され、スクリプトを登録するコントロールの型を取得します。</param>
        <param name="key">スクリプト ブロックの一意の識別子。</param>
        <param name="script">登録するスクリプト。</param>
        <param name="addScriptTags">スクリプト ブロックを <see langword="&lt;script&gt;" /> タグと <see langword="&lt;/script&gt;" /> タグで囲む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>非同期ポストバックのたびに起動スクリプト ブロックを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、スクリプト ブロックをページに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 非同期ポストバックが発生するたびに含まれている起動スクリプト ブロックを登録するのにには、このメソッドを使用します。 内のコントロールのスクリプト ブロックを登録する、 <xref:System.Web.UI.UpdatePanel> を制御できるため、スクリプト ブロックが登録されている場合にのみ、 <xref:System.Web.UI.UpdatePanel> コントロールが更新を使用して、 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> このメソッドのオーバー ロードします。  
  
 部分ページ更新に関連して、スクリプトの最初のページのレンダリング中に一度だけを登録する場合は使用しなかったするスタートアップ スクリプトを登録する場合、 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> のメソッド、 <xref:System.Web.UI.ClientScriptManager> クラスです。 参照を取得できます、 <xref:System.Web.UI.ClientScriptManager> オブジェクトから、 <xref:System.Web.UI.Page.ClientScript%2A> ページのプロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">ページに書き込むコントロールのコンテンツを受け取るオブジェクト。</param>
        <summary>指定された <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトを使用して、ブラウザーに <see cref="T:System.Web.UI.ScriptManager" /> コントロールのコンテンツをレンダリングします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、コントロールの開発者によって拡張するための <xref:System.Web.UI.ScriptManager> コントロールです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding this method, call the base <see cref="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" /> method so that the client script that defines the  class is rendered on the page.</para>
        </block>
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>複合スクリプトが <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録されるときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveScriptReference" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Web.UI.ScriptManager.Scripts" /> コレクションのメンバーが <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録されるときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは 1 回の各メンバーに対して、 <xref:System.Web.UI.ScriptManager.Scripts%2A> 、ページの中にコレクション <xref:System.Web.UI.Control.PreRender> イベントです。 このイベントを使用すると、スクリプトがページにレンダリングされる前に、更新プログラムを実行できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoleService">
      <MemberSignature Language="C#" Value="public System.Web.UI.RoleServiceManager RoleService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.RoleServiceManager RoleService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.RoleService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.RoleServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Web.UI.ScriptManager" /> インスタンスに関連付けられている <see cref="T:System.Web.UI.RoleServiceManager" /> オブジェクトを取得します。</summary>
        <value>現在の <see cref="T:System.Web.UI.ScriptManager" /> インスタンスに対する <see cref="T:System.Web.UI.RoleServiceManager" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.RoleServiceManager> このプロパティによって返されるオブジェクトは、ページに登録されている役割サービスを表します。 役割サービスを定義することができます、 <xref:System.Web.UI.ScriptManager> コントロールまたは関連付けられている <xref:System.Web.UI.ScriptManagerProxy> コントロールです。 ASP.NET のロール サービスを使用したり、カスタムのロール サービスを使用できます。 マークアップでカスタムのサービスを追加するには含めることによって、 `RoleService` 内の要素、 `asp:ScriptManager` \] ページで、次の例のように要素。  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <RoleService Path="MyRoleService.asmx" LoadRoles="True" />  
</asp:ScriptManager>  
```  
  
 プログラムによっても構成することができます、 <xref:System.Web.UI.RoleServiceManager> オブジェクトです。 登録されるサービス、 <xref:System.Web.UI.ScriptManager> コントロール、ページの中に <xref:System.Web.UI.Control.PreRender> ライフ サイクルの段階です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptMode ScriptMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ScriptMode ScriptMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアント スクリプト ライブラリのデバッグ バージョンまたはリリース バージョンがレンダリングされるかどうかを示す値を取得または設定します。</summary>
        <value>現在のモードを示す列挙値。 既定値は、<see cref="F:System.Web.UI.ScriptMode.Auto" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.ScriptMode%2A> プロパティを指定するかどうか、 <xref:System.Web.UI.ScriptManager> コントロールのデバッグをレンダリングまたはクライアント スクリプト ライブラリのバージョンをリリースする必要があります。 この値は、構成ファイルと、page ディレクティブ内に設定されている値で置き換えることができます。  
  
 次の表は、このプロパティの有効な値を一覧表示します。  
  
|値|定義|  
|-------|--------|  
|<xref:System.Web.UI.ScriptMode.Auto>|ライブラリは、Web ページで使用されるクライアント スクリプトのデバッグ バージョンと、 `retail` に構成要素の属性が設定されている `false`します。 それ以外の場合、クライアント スクリプト ライブラリのリリース バージョンが使用されます。|  
|<xref:System.Web.UI.ScriptMode.Inherit>|適用すると、 <xref:System.Web.UI.ScriptManager.ScriptMode%2A> のプロパティ、 <xref:System.Web.UI.ScriptManager> オブジェクトに、この値は同じ <xref:System.Web.UI.ScriptMode.Auto>します。|  
|<xref:System.Web.UI.ScriptMode.Debug>|しない限り、ライブラリは、Web ページで使用するクライアント スクリプトのデバッグ バージョン、 `retail` に構成要素の属性が設定されている `true`します。|  
|<xref:System.Web.UI.ScriptMode.Release>|しない限り、クライアント スクリプト ライブラリのリリース バージョンが、Web ページで使用される、 `retail` に構成要素の属性が設定されている `false`します。|  
  
> [!NOTE]
>  `debug` ディレクティブの属性では Ajax 対応 ASP.NET アプリケーションには影響しません。<xref:System.Web.UI.ScriptManager> 制御し、Web.config ファイルで、\[設定のみを使用してその <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> と <xref:System.Web.UI.ScriptManager.ScriptMode%2A> プロパティをデバッグ スクリプトをレンダリングするかどうかを確認します。  
  
 詳細については、「[ASP.NET AJAX Debugging and Tracing Overview](http://msdn.microsoft.com/ja-jp/92684ea0-7bb4-4a34-9203-3aa6394ce375)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Web.UI.ScriptManager.ScriptMode" /> プロパティは、のいずれかではない、 <see cref="T:System.Web.UI.ScriptMode" /> 値。</exception>
        <altmember cref="T:System.Web.UI.ScriptMode" />
      </Docs>
    </Member>
    <Member MemberName="ScriptPath">
      <MemberSignature Language="C#" Value="public string ScriptPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Set the Path property on each individual ScriptReference instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET AJAX およびカスタム スクリプト ファイルへのパスを作成するために使用される場所のルート パスを取得または設定します。</summary>
        <value>スクリプト ファイルが格納される場所。 既定値は、相対パスとして解釈される空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.ScriptPath%2A> プロパティでは、絶対パス、相対パスを指定できます。 または、ページのスクリプトのすべてのアプリケーションの相対 URL をブロックします。 これにより、現在に登録されているカスタムとサード パーティのスクリプト ブロックが含まれます。 <xref:System.Web.UI.ScriptManager> インスタンス。<xref:System.Web.UI.ScriptManager.ScriptPath%2A> プロパティの設定は、通常の属性として宣言して、 `ScriptManager` 、ページ上の要素をコードでも設定できます。  
  
 場合、 `path` 属性または <xref:System.Web.UI.ScriptReferenceBase.Path%2A> プロパティを設定、 <xref:System.Web.UI.ScriptReference> 内のオブジェクト、 <xref:System.Web.UI.ScriptManager.Scripts%2A> コレクション、path の値を上書き、 <xref:System.Web.UI.ScriptManager.ScriptPath%2A> その値 <xref:System.Web.UI.ScriptReference> インスタンス。  
  
 いない場合 <xref:System.Web.UI.ScriptReferenceBase.Path%2A> 値が指定されている、 <xref:System.Web.UI.ScriptManager> コントロールで定義されているディレクトリを検索する、 <xref:System.Web.UI.ScriptManager.ScriptPath%2A> プロパティと解決のスクリプトを参照して、 <xref:System.Web.UI.ScriptReference.Name%2A> または <xref:System.Web.UI.ScriptReference.Assembly%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptResourceMapping">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptResourceMapping ScriptResourceMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.UI.ScriptResourceMapping ScriptResourceMapping" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptResourceMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptResourceMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.ScriptResourceMapping" /> オブジェクトを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.ScriptResourceMapping" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 静的な <xref:System.Web.UI.ScriptManager.ScriptResourceMapping%2A> プロパティを返します。、 <xref:System.Web.UI.ScriptResourceMapping> スクリプト リソース \(スクリプトのリダイレクト\) の場所を表すマッピングのコレクションを含めることができるオブジェクト。 名前または名前\/アセンブリのペアに基づいてこのマッピングのコレクションをマップできるし、を指していることができます、 <xref:System.Web.UI.ScriptResourceDefinition> オブジェクトです。  
  
   
  
## 例  
 次の例を追加する方法を示しています、 <xref:System.Web.UI.ScriptResourceDefinition> で参照できるオブジェクト、 <xref:System.Web.UI.ScriptManager> オブジェクトです。 Global.asax ファイルに次のコードを追加、 `Application_Start` イベントです。  
  
```csharp  
ScriptResourceDefinition myScriptResDef = new ScriptResourceDefinition();  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js";  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js";  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js";  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js";  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", null, myScriptResDef);  
```  
  
```vb  
Dim myScriptResDef As New ScriptResourceDefinition()  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js"  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js"  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js"  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js"  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", Nothing, myScriptResDef)  
```  
  
 ASP.NET Web フォーム ページ \(.aspx ファイル\) のマークアップに内に、次のマークアップを追加、 `form` 要素とすべての要素または jQuery スクリプトを使用するコードの前にします。  
  
```  
<asp:ScriptManager ID="sm1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="jquery"/>  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scripts">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptReferenceCollection Scripts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ScriptReferenceCollection Scripts" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Scripts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントにレンダリングされるスクリプト ファイルをそれぞれ表す <see cref="T:System.Web.UI.ScriptReference" /> オブジェクトが格納された <see cref="T:System.Web.UI.ScriptReferenceCollection" /> オブジェクトを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.ScriptManager" /> インスタンスの <see cref="T:System.Web.UI.ScriptReferenceCollection" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptReferenceCollection> このプロパティによって返されるオブジェクトのコレクションは、 <xref:System.Web.UI.ScriptReference> スクリプト ファイルを表すオブジェクト。 コレクションには、カスタム スクリプト ファイル、および ASP.NET Ajax の機能のために必要なすべてのスクリプト ファイルへの参照が含まれています。 レンダリングするカスタム スクリプト ファイルを定義することができます、 <xref:System.Web.UI.ScriptManager> コントロールまたは関連付けられている <xref:System.Web.UI.ScriptManagerProxy> コントロールです。  
  
 スクリプト ファイルをマークアップでコレクションに追加するには追加することで `asp:ScriptReference` 要素を `Scripts` 内のノード、 `asp:ScriptManager` 要素\] ページで、次の例で示すようにします。  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="Script.js" />  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 追加することも、 <xref:System.Web.UI.ScriptReference> オブジェクトを <xref:System.Web.UI.ScriptManager.Scripts%2A> を使用してプログラムを使用してコレクション、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> のメソッド、 <xref:System.Web.UI.ScriptReferenceCollection> クラスです。  
  
 <xref:System.Web.UI.ScriptManager> コントロールがコントロールの中にスクリプト ファイルを登録 <xref:System.Web.UI.Control.PreRender> イベントです。  
  
 <xref:System.Web.UI.ScriptManager.Scripts%2A> コアがコレクションに含まれていない [!INCLUDE[atlaslib_current_ext](~/includes/atlaslib-current-ext-md.md)] スクリプトです。 コア ライブラリ内のスクリプトは自動的に表示されます。登録する必要がない、 <xref:System.Web.UI.ScriptManager> コントロールです。 ただし、コア スクリプトまたは任意のコントロールのスクリプトをオーバーライドし、スクリプトの別のバージョンを代用する場合は、そのバージョンを追加できる、 <xref:System.Web.UI.ScriptManager.Scripts%2A> コレクションです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Services">
      <MemberSignature Language="C#" Value="public System.Web.UI.ServiceReferenceCollection Services { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ServiceReferenceCollection Services" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Services" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ServiceReferenceCollectionEditor, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ServiceReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET が AJAX 機能用にクライアントに公開している各 Web サービスに対応する <see cref="T:System.Web.UI.ServiceReference" /> オブジェクトが格納されている <see cref="T:System.Web.UI.ServiceReferenceCollection" /> オブジェクトを取得します。</summary>
        <value>現在の <see cref="T:System.Web.UI.ScriptManager" /> インスタンスに対する <see cref="T:System.Web.UI.ServiceReferenceCollection" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ServiceReferenceCollection> このプロパティによって返されるオブジェクトのコレクションは、 <xref:System.Web.UI.ServiceReference> に登録されている Web サービスを表すオブジェクト、 <xref:System.Web.UI.ScriptManager> コントロールです。 サービスを定義することができます、 <xref:System.Web.UI.ScriptManager> コントロールまたは関連付けられている <xref:System.Web.UI.ScriptManagerProxy> コントロールです。  
  
 サービスをマークアップでコレクションに追加するには追加することで、 `asp:ServiceReference` 要素を `Services` 内の要素、 `asp:ScriptManager` \] ページで、次の例のようにをインスタンス化します。  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Services>  
    <asp:ServiceReference Path="Service.asmx" />  
  </Services>  
</asp:ScriptManager>  
```  
  
 プログラムでも追加することができます、 <xref:System.Web.UI.ServiceReference> オブジェクトを <xref:System.Web.UI.ScriptManager.Services%2A> を使用してコレクション、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> のメソッド、 <xref:System.Web.UI.ServiceReferenceCollection> クラスです。  
  
 登録されるサービス、 <xref:System.Web.UI.ScriptManager> ページの中に <xref:System.Web.UI.Control.PreRender> ライフ サイクルの段階です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">フォーカスを受け取るコントロールの ID。</param>
        <summary>ブラウザーのフォーカスを、ID で指定されるコントロールに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドの動作のように、 <xref:System.Web.UI.Page.SetFocus%2A> のメソッド、 <xref:System.Web.UI.Page> クラスです。 どちらのメソッドは、Web ページ上のアクティブ コントロールを指定した ID を持つコントロールに設定します。<xref:System.Web.UI.ScriptManager.SetFocus%2A> のメソッド、 <xref:System.Web.UI.ScriptManager> クラスを使用して、非同期ポストバック中にフォーカスを設定します。 ポストバックと、ページが初めて表示された場合、中に、 <xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドの呼び出し、 <xref:System.Web.UI.Page.SetFocus%2A> のメソッド、 <xref:System.Web.UI.Page> クラスです。  
  
 複数の呼び出しがある場合、 <xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドの最後の呼び出しで、コントロールがフォーカスを受け取る。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.String)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">フォーカスを受け取るコントロール。</param>
        <summary>ブラウザーのフォーカスを、指定したコントロールに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドの動作のように、 <xref:System.Web.UI.Page.SetFocus%2A> のメソッド、 <xref:System.Web.UI.Page> クラスです。 どちらのメソッドは、Web ページ上のアクティブ コントロールを指定したコントロールに設定します。<xref:System.Web.UI.ScriptManager.SetFocus%2A> のメソッド、 <xref:System.Web.UI.ScriptManager> クラスを使用して、非同期ポストバック中にフォーカスを設定します。 ポストバックと、ページが初めて表示された場合、中に、 <xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドの呼び出し、 <xref:System.Web.UI.Page.SetFocus%2A> のメソッド、 <xref:System.Web.UI.Page> クラスです。  
  
 複数の呼び出しがある場合、 <xref:System.Web.UI.ScriptManager.SetFocus%2A> メソッドの最後の呼び出しで指定したコントロールがフォーカスを受け取る。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SupportsPartialRendering">
      <MemberSignature Language="C#" Value="public bool SupportsPartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsPartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントが部分ページ レンダリングをサポートしているかどうかを示す値を取得します。</summary>
        <value>クライアントが部分ページ レンダリングをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> にプロパティが設定されている `false`, 、 <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> プロパティを返します。 `false`します。  
  
 部分ページ レンダリングがサポートされているかどうかを決定する既定のチェックが返す `true` 、次の条件が当てはまる場合。  
  
-   <xref:System.Web.Configuration.HttpCapabilitiesBase.W3CDomVersion%2A> プロパティ値が 1.0 以上にする必要があります。  
  
-   <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A> プロパティ値が 1.0 以上にする必要があります。  
  
-   <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> にプロパティの値を設定する必要があります `true`します。  
  
 ときに、 <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> プロパティが明示的に設定されている、これらのチェックは使用されません。  
  
 コントロールの開発者が使用する必要があります、 <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> 部分ページ レンダリングをサポートするかどうかを決定するプロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" /> プロパティは <see langword="false" /> と <see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" /> プロパティに設定されました <see langword="true" />します。  
  
 または  
  
 <see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" /> 後にプロパティが設定された、 <see cref="E:System.Web.UI.Control.Init" /> イベントです。</exception>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
        <altmember cref="T:System.Web.HttpBrowserCapabilities" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.LoadPostData">
      <MemberSignature Language="C#" Value="bool IPostBackDataHandler.LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">コントロールのキー識別子。</param>
        <param name="postCollection">受信するすべてのポスト データのコレクション。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />」を参照してください。</summary>
        <returns>ポストバックの結果、<see cref="T:System.Web.UI.ScriptManager" /> コントロールの状態が変化した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.ScriptManager> のインスタンスが <xref:System.Web.UI.IPostBackDataHandler> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="void IPostBackDataHandler.RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.ScriptManager> のインスタンスが <xref:System.Web.UI.IPostBackDataHandler> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Web ページの履歴状態を表すキーと値のペアが含まれる文字列。</param>
        <summary>
          <see cref="T:System.Web.UI.ScriptManager" /> コントロールでポストバック イベントの処理と Web ページの履歴状態の読み込みができるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基本 <see cref="T:System.Web.UI.Control" /> クラスから継承される <see cref="P:System.Web.UI.Control.Visible" /> プロパティをオーバーライドして、この値が設定されないようにします。</summary>
        <value>常に <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.Control.Visible%2A> プロパティでオーバーライドされて、 <xref:System.Web.UI.ScriptManager> クラスがこの値が設定されないようにします。 A <xref:System.NotImplementedException> 値がこのプロパティに割り当てられている場合にエラーが発生します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">値が割り当てられた、 <see cref="P:System.Web.UI.ScriptManager.Visible" /> プロパティです。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterNamedClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>部分ページ レンダリングに関係するコントロールで使用できるように、アセンブリに埋め込まれているクライアント スクリプトを、リソース名で <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.UpdatePanel" /> コントロール内のコントロールで使用できるようにクライアント スクリプト ファイルを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、スクリプト ファイルの参照をページに追加します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterScriptDescriptors">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアントのコントロール、コンポーネント、または動作を表すクライアント オブジェクトをサポートするスクリプトを返すために、<see cref="T:System.Web.UI.ScriptManager" /> コントロールに対して、<see cref="T:System.Web.UI.ScriptControl" /> クラスまたは <see cref="T:System.Web.UI.ExtenderControl" /> クラスへのコールバックを指示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterDataItem">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>部分ページ レンダリング中にカスタム データをコントロールに送信します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>起動スクリプト ブロックを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、スクリプト ブロックをページに追加します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>部分ページ レンダリングに関係するコントロールで使用できるように、アセンブリに埋め込まれているクライアント スクリプトを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.UpdatePanel" /> コントロール内のコントロールで使用できるようにクライアント スクリプト ブロックを <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、スクリプト ブロックをページに追加します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetFocus">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ブラウザーのフォーカスを、指定したコントロールに設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterHiddenField">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>隠しフィールドを登録します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterArrayDeclaration">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.UpdatePanel" /> コントロール内のコントロールで使用できるように ECMAScript \(JavaScript\) 配列宣言を <see cref="T:System.Web.UI.ScriptManager" /> コントロールに登録し、配列をページに追加します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterOnSubmitStatement">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>フォームが送信されるときに実行される ECMAScript \(JavaScript\) コードを登録します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>