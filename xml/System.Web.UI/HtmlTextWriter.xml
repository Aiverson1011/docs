<Type Name="HtmlTextWriter" FullName="System.Web.UI.HtmlTextWriter">
  <TypeSignature Language="C#" Value="public class HtmlTextWriter : System.IO.TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HtmlTextWriter extends System.IO.TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>マークアップ文字とテキストを ASP.NET サーバー コントロールの出力ストリームに書き込みます。 このクラスは、ASP.NET サーバー コントロールがクライアントにマークアップを表示するときに使用する書式設定機能を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter>クラスは、HTML 4.0 をデスクトップ ブラウザーに表示するために使用します。<xref:System.Web.UI.HtmlTextWriter>内のすべてのマークアップ ライターの基本クラスも、<xref:System.Web.UI>名前空間を含む、 <xref:System.Web.UI.ChtmlTextWriter>、 <xref:System.Web.UI.Html32TextWriter>、および<xref:System.Web.UI.XhtmlTextWriter>クラスです。 これらのクラスは、要素、属性、およびマークアップのさまざまな種類のスタイルとレイアウト情報の書き込みに使用されます。 さらに、これらのクラスは、各マークアップの言語に関連付けられているページとコントロール アダプター クラスによって使用されます。  
  
 ほとんどの場合、ASP.NET は自動的に要求元のデバイスの適切なライターを使用します。 ただし、カスタム テキスト ライターを作成する場合、または特定のデバイス用のページを表示するために特定のライターを指定する場合は、割り当てる必要があります、ライターのページに、`controlAdapters`アプリケーション .browser ファイルのセクションです。  
  
   
  
## 例  
 次のコード例は、オーバーライドする方法を示します、<xref:System.Web.UI.Control.Render%2A>から派生したカスタム コントロールのメソッド、<xref:System.Web.UI.Control>クラスです。 このコード例は、さまざまなを使用する方法を示しています。<xref:System.Web.UI.HtmlTextWriter>メソッド、プロパティ、およびフィールドです。  
  
 [!code-csharp[MarkupTextWriter\_Samples1\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#1)]
 [!code-vb[MarkupTextWriter\_Samples1\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.TextWriter" />
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
    <altmember cref="T:System.Web.UI.Adapters.PageAdapter" />
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
    <altmember cref="T:System.Web.UI.Html32TextWriter" />
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
    <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> マークアップの内容を表示するインスタンス。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.HtmlTextWriter" /> を既定のタブの文字列を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> コンス トラクターを使用して、 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> 、行のインデントに必要な場合に定数です。 呼び出す、 <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> のオーバー ロードを新しいインスタンスを初期化します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> カスタムを作成するコンス トラクター <xref:System.Web.UI.HtmlTextWriter> という名前のオブジェクト `StyledLabelHtmlWriter.` ときに、 `MyPage` から派生したカスタム クラス、 <xref:System.Web.UI.Page> クラスを使用して、クライアント ブラウザーから要求される、 `StyledLabelHtmlWriter` を出力ストリームには、そのコンテンツをレンダリングするクラス。  
  
 [!code-cpp[HtmlTextWriter\_Methods3\#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter\_Methods3\#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter\_Methods3\#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> マークアップの内容を表示します。</param>
        <param name="tabString">行のインデントのレンダリングに使用する文字列。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.HtmlTextWriter" /> 文字列は指定したタブ文字でクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> コンス トラクターを使用して `tabString` 、行のインデントが必要な場合です。 呼び出す、 <xref:System.IO.TextWriter.%23ctor%28System.IFormatProvider%29?displayProperty=fullName> 基本コンス トラクターを新しいインスタンスを初期化します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%29> カスタムを作成するコンス トラクター <xref:System.Web.UI.HtmlTextWriter> という名前のオブジェクト `StyledLabelHtmlWriter.` ときに、 `MyPage` から派生したカスタム クラス、 <xref:System.Web.UI.Page> クラスを使用して、クライアント ブラウザーから要求される、 `StyledLabelHtmlWriter` を出力ストリームには、そのコンテンツをレンダリングするクラス。  
  
 [!code-cpp[HtmlTextWriter\_Methods3\#10](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#10)]
 [!code-csharp[HtmlTextWriter\_Methods3\#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#10)]
 [!code-vb[HtmlTextWriter\_Methods3\#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">追加する属性の名前を表す文字列。</param>
        <param name="value">属性に代入する値を含む文字列。</param>
        <summary>指定したマークアップ属性と値の要素の開始タグを追加する、 <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトを作成する後続の呼び出しで、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> メソッド、属性は、のいずれかではない場合、 <xref:System.Web.UI.HtmlTextWriterAttribute> 値、または実行時までに、属性が不明の場合。  
  
 指定されたマークアップの任意の要素のインスタンスの <xref:System.Web.UI.HtmlTextWriter> クラスは、その要素の属性の一覧を保持します。 ときに、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドを呼び出して、任意の属性によって追加された、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> メソッドは、要素の開始タグに表示されます。 属性の一覧がから消去し、 <xref:System.Web.UI.HtmlTextWriter> オブジェクトです。  
  
 マークアップ要素を表示するためのコーディング パターンは次のとおりです。  
  
-   使用して、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 要素に属性を追加します。  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドを使用します。  
  
-   必要に応じて、要素のタグと終了タグの間にあるコンテンツをレンダリングするその他のメソッドを使用します。  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> メソッドを使用します。  
  
   
  
## 例  
 次のコード例では、呼び出し、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> メソッドを呼び出す前に、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドです。 コードの 2 つの異なるオーバー ロードを呼び出して <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> との 2 つの異なるオーバー ロード <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> を呼び出す前に、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> をレンダリングする方法、 `<span>` 要素を出力ストリーム。<xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%29> という名前のカスタム属性を定義するメソッドが使用される `CustomAttribute` とという名前のカスタム値 `CustomAttributeValue` の `<span>` このコードをレンダリングする要素。  
  
 [!code-csharp[MarkupTextWriter\_Samples1\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter\_Samples1\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 出力ストリームに追加するマークアップ属性を表します。</param>
        <param name="value">属性に代入する値を含む文字列。</param>
        <summary>マークアップ属性と属性値、要素の開始タグを追加する、 <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトを作成する後続の呼び出しで、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> 標準マークアップ属性を表示するメソッドです。  
  
 指定されたマークアップの任意の要素のインスタンスの <xref:System.Web.UI.HtmlTextWriter> クラスは、その要素の属性の一覧を保持します。 ときに、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドを呼び出して、すべての属性によって追加される、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> メソッドは、要素の開始タグに表示されます。 属性の一覧がから消去し、 <xref:System.Web.UI.HtmlTextWriter>です。  
  
 マークアップ要素を表示するためのコーディング パターンは次のとおりです。  
  
-   使用して、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 要素に属性を追加します。  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドを使用します。  
  
-   必要に応じて、要素のタグと終了タグの間にあるコンテンツをレンダリングするその他のメソッドを使用します。  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> メソッドを使用します。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29> を追加するメソッド、 `Onclick` マークアップ要素に属性し、ECMAScript コードを次にその値を設定します。  
  
```  
alert('Hello');  
```  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter\#1](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#1)]
 [!code-csharp[System.Web.UI.HtmlTextWriter\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.HtmlTextWriter\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, string value, bool fEndode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, string value, bool fEndode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEndode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">追加する属性の名前を表す文字列。</param>
        <param name="value">属性に代入する値を含む文字列。</param>
        <param name="fEndode">
          <see langword="true" /> 属性とその値をエンコードするにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>指定したマークアップ属性と値の要素の開始タグを追加する、 <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトを作成する後続の呼び出しで、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドは、省略可能なエンコーディングをします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> メソッド、属性は、のいずれかではない場合、 <xref:System.Web.UI.HtmlTextWriterAttribute> 値、または実行時までのエンコーディング属性が不明の場合が必要です。  
  
 指定されたマークアップの任意の要素のインスタンスの <xref:System.Web.UI.HtmlTextWriter> クラスは、その要素の属性の一覧を保持します。 ときに、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドを呼び出して、任意の属性によって追加された、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> メソッドは、要素の開始タグに表示されます。 属性の一覧がから消去し、 <xref:System.Web.UI.HtmlTextWriter> オブジェクトです。  
  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> メソッドを `fEncode` に設定 `true`, 属性では、引用符 \("\)、不等号 \(\<\) を含めることができます可能性がある場合や、アンパサンド \(&\)。 メソッドの呼び出しでは、要求元のデバイスの要件を満たすように属性をエンコードします。 設定する `fEncode` に `false`, 属性が既にエンコードされていることがわかっている場合、またはこれらの文字のいずれも生成されることをわかっている場合。  
  
 マークアップ要素を表示するためのコーディング パターンは次のとおりです。  
  
-   使用して、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 要素に属性を追加します。  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドを使用します。  
  
-   必要に応じて、要素のタグと終了タグの間にあるコンテンツをレンダリングするその他のメソッドを使用します。  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> メソッドを使用します。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> メソッドという名前のカスタム属性を `myattribute`, には、その値はエンコードされていないと、 `<img>` 要素。  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter\#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddAttribute (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">追加する属性の名前を表す文字列。</param>
        <param name="value">属性に代入する値を含む文字列。</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> を表す属性です。</param>
        <summary>と共に、指定したマークアップ属性と値を追加、 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 列挙体の値、要素の開始タグを <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトを作成する後続の呼び出しで、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterAttribute%29> メソッドから継承する場合にのみ、 <xref:System.Web.UI.HtmlTextWriter> クラスです。 新しいを作成することができます `name` と `key` 属性のペアです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddAttribute(System.Web.UI.HtmlTextWriterAttribute,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 出力ストリームに追加するマークアップ属性を表します。</param>
        <param name="value">属性に代入する値を含む文字列。</param>
        <param name="fEncode">
          <see langword="true" /> 属性とその値をエンコードするにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>マークアップ属性と属性値、要素の開始タグを追加する、 <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトを作成する後続の呼び出しで、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドは、省略可能なエンコーディングをします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> メソッドを省略可能なエンコーディングとの標準マークアップ属性が表示されます。  
  
 指定されたマークアップの任意の要素のインスタンスの <xref:System.Web.UI.HtmlTextWriter> クラスは、その要素の属性の一覧を保持します。 ときに、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドを呼び出して、任意の属性によって追加された、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> は要素の開始タグに表示されます。 属性の一覧がから消去し、 <xref:System.Web.UI.HtmlTextWriter> オブジェクトです。  
  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> メソッドを `fEncode` に設定 `true`, 属性では、引用符 \("\)、不等号 \(\<\) を含めることができます可能性がある場合や、アンパサンド \(&\)。 メソッドの呼び出しでは、要求元のデバイスの要件を満たすように属性をエンコードします。 設定する `fEncode` に `false`, 属性が既にエンコードされていることがわかっている場合、またはこれらの文字のいずれも生成されることをわかっている場合。  
  
 マークアップ要素を表示するためのコーディング パターンは次のとおりです。  
  
-   使用して、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> 要素に属性を追加します。  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドを使用します。  
  
-   必要に応じて、要素のタグと終了タグの間にあるコンテンツをレンダリングするその他のメソッドを使用します。  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> メソッドを使用します。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%2CSystem.Boolean%29> 文字列値に割り当てられていることを確認する方法、 `Alt` 属性を `<img>` 要素が要求元のデバイス用にエンコードされています。  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter\#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">追加するスタイル属性を含む文字列です。</param>
        <param name="value">属性に代入する値を含む文字列です。</param>
        <summary>開くマークアップに、指定したマークアップのスタイル属性と属性の値を追加する後続の呼び出しによって作成されたタグ、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> スタイルがのメンバーではない場合は、メソッド、 <xref:System.Web.UI.HtmlTextWriterStyle> 列挙型か、実行時まで不明です。  
  
 <xref:System.Web.UI.HtmlTextWriter> クラスはレンダリングされるマークアップ要素スタイルの一覧を保持します。 ときに、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドを呼び出して、によって追加されるすべてのスタイル、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> メソッドは、要素の開始タグに表示されます。 スタイルの一覧がクリアされます。  
  
 マークアップ要素を表示するためのコーディング パターンは次のとおりです。  
  
-   使用して、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 要素に属性を任意のスタイルを追加します。  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドを使用します。  
  
-   必要に応じて、要素の開始と終了タグの間にあるコンテンツをレンダリングする他の方法を使用します。  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> メソッドを使用します。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%29> メソッド `font-size` と `color` に対する属性のスタイル、 `<p>` 要素。 このコード例では、 <xref:System.Web.UI.HtmlTextWriter> コントロールの内容を表示するクラス。  
  
 [!code-cpp[HtmlTextWriter\_AddStyleAttribute\#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CPP/htmltextwriter_addstyleattribute.cpp#1)]
 [!code-csharp[HtmlTextWriter\_AddStyleAttribute\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/CS/htmltextwriter_addstyleattribute.cs#1)]
 [!code-vb[HtmlTextWriter\_AddStyleAttribute\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_AddStyleAttribute/VB/htmltextwriter_addstyleattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddStyleAttribute (System.Web.UI.HtmlTextWriterStyle key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddStyleAttribute(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 出力ストリームに追加するスタイル属性を表します。</param>
        <param name="value">属性に代入する値を含む文字列です。</param>
        <summary>指定された関連付けられているマークアップのスタイル属性を追加 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 値と開始マークアップに属性値に後続の呼び出しによって作成されたタグ、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%29> スタイルのメンバーである場合は、メソッド、 <xref:System.Web.UI.HtmlTextWriterStyle> 列挙され、実行する前に呼ばれます。  
  
 <xref:System.Web.UI.HtmlTextWriter> クラスはレンダリングされるマークアップ要素スタイルの一覧を保持します。 ときに、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドを呼び出して、任意のスタイルを追加して、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> メソッドは、要素の開始タグに表示されます。 スタイルの一覧がクリアされます。  
  
 マークアップ要素を表示するためのコーディング パターンは次のとおりです。  
  
-   使用して、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> 要素に属性を任意のスタイルを追加します。  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドを使用します。  
  
-   必要に応じて、要素の開始と終了タグの間にあるコンテンツをレンダリングする他の方法を使用します。  
  
-   <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> メソッドを使用します。  
  
   
  
## 例  
 次のコード例では、オーバーライドした関数の一部を使用して、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> から派生したクラスのメソッド、 <xref:System.Web.UI.HtmlTextWriter> クラスです。 コードのチェックするかどうか、 `<Label>` 要素を表示しています。 必要な場合は、 <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> を確認するメソッドが呼び出されるかどうか、 `Color` スタイル属性が定義されて、 `<Label>` 要素。 場合、 `Color` 属性が定義されていない、コードのこのオーバー ロードを呼び出して、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> を追加するメソッド、 `Color` スタイル属性を属性し、し、その値に設定 `red`します。  
  
 [!code-cpp[HtmlTextWriter\_Methods3\#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter\_Methods3\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter\_Methods3\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="AddStyleAttribute">
      <MemberSignature Language="C#" Value="protected virtual void AddStyleAttribute (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddStyleAttribute(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.AddStyleAttribute(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">追加するスタイル属性を含む文字列です。</param>
        <param name="value">属性に代入する値を含む文字列です。</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> を追加するスタイル属性を表します。</param>
        <summary>と共に指定したマークアップのスタイル属性と属性の値を追加、 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 列挙体の値、開始マークアップ タグは後続の呼び出しによって作成された、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%28System.String%2CSystem.String%2CSystem.Web.UI.HtmlTextWriterStyle%29> メソッドから継承する場合にのみ、 <xref:System.Web.UI.HtmlTextWriter> クラスです。 新しいを作成することができます `name` と `value` のペアを <xref:System.Web.UI.HtmlTextWriterStyle> 属性です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="BeginRender">
      <MemberSignature Language="C#" Value="public virtual void BeginRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知、 <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクト、またはコントロールのレンダリングする派生クラスのオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter> のクラスの実装、 <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> メソッドには、機能がありません。 オーバーライドする必要があります、 <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> から派生したクラスのメソッドに <xref:System.Web.UI.HtmlTextWriter> 独自の表示機能を提供します。 必要となるマークアップ言語などで `<p>` 場合でも、コントロールの前にすぐにレンダリングされる要素の必要性、 `<p>` 要素は、前に特定した、使用することが、 <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> をオーバーライドします。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>閉じる、 <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトし、関連付けられているシステム リソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装の <xref:System.Web.UI.HtmlTextWriter.Close%2A> メソッドの呼び出し、 <xref:System.IO.TextWriter.Close%2A?displayProperty=fullName> 基本メソッドです。  
  
 呼び出しに続く、 <xref:System.Web.UI.HtmlTextWriter.Close%2A> メソッドは、に対するすべての操作、 <xref:System.Web.UI.HtmlTextWriter> そのすべてのリソースが解放されたために、オブジェクトが例外をスロー可能性があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.IO.TextWriter.Close" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="DefaultTabString">
      <MemberSignature Language="C#" Value="public const string DefaultTabString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultTabString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>1 つのタブ文字を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 1 つのタブは、ASCII 9 文字で表されます。  
  
   
  
## 例  
 次のコード例を使用するコンス トラクターを作成する方法を示しています、 <xref:System.IO.TextWriter> オブジェクト パラメーターおよびパスとして、 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> コンス トラクターの 2 番目のバージョンへのパラメーターの引数としてフィールドです。 このコンス トラクターは、コードから呼び出されたときに、 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> フィールドは、ページまたはアダプタで使用されるマークアップ ライターのインスタンスのインデントのポリシーを定義します。  
  
 [!code-csharp[MarkupTextWriter\_Methods3\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#1)]
 [!code-vb[MarkupTextWriter\_Methods3\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="DoubleQuoteChar">
      <MemberSignature Language="C#" Value="public const char DoubleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char DoubleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.DoubleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>引用符 \("\) 文字を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> フィールドを使用して、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 属性を閉じます。  
  
   
  
## 例  
 次のコード例をレンダリングする方法を示しています、 `border` 属性を `<table>` 要素。 コードの呼び出し、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 属性とその値、および使用方法を表示するメソッド、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> をレンダリングする方法、 <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> と <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> フィールドです。  
  
 このコード例は、次のマークアップを表示します。  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter\_Constants\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter\_Constants\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.Write" />
        <altmember cref="M:System.IO.TextWriter.Dispose(System.Boolean)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected string EncodeAttributeValue (string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeAttributeValue(string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">エンコードする属性値を含む文字列。</param>
        <param name="fEncode">属性値をエンコードする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>現在のコンテキストの <see cref="T:System.Web.HttpRequest" /> オブジェクトの要件に基づいて、指定したマークアップ属性の値をエンコードします。</summary>
        <returns>
          <paramref name="value" /> が空の場合は、エンコードされた属性値を含む文字列 <see langword="null" />。または <paramref name="fEncode" /> が <see langword="false" /> の場合は、エンコードされていない属性値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、<xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A>のオーバー ロード、<xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%29>メソッド、属性がない場合、<xref:System.Web.UI.HtmlTextWriterAttribute>列挙値か、実行時まで不明です。  
  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A>メソッドは、二重引用符 \("\)、アンパサンド \(&\) を削除し、署名 \(より小さい\<\) so that invalid tags are not generated, regardless of the input. so\="" that\="" invalid\="" tags\="" are\="" not\="" generated,\="" regardless\="" of\="" the\=""\>\<\/\) so that invalid tags are not generated, regardless of the input.\> によって実行は、実際のエンコード、<xref:System.Web.HttpUtility.HtmlAttributeEncode%2A>メソッドです。  
  
   
  
## 例  
 次のコード例を呼び出す方法を示します、<xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A>メソッドのパラメーターとして、<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>メソッドを呼び出すし、エンコードして、`color:blue`スタイル属性の値を設定します。  
  
 [!code-cpp[HtmlTextWriter\_Methods\#5](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#5)]
 [!code-csharp[HtmlTextWriter\_Methods\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#5)]
 [!code-vb[HtmlTextWriter\_Methods\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeAttributeValue">
      <MemberSignature Language="C#" Value="protected virtual string EncodeAttributeValue (System.Web.UI.HtmlTextWriterAttribute attrKey, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string EncodeAttributeValue(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeAttributeValue(System.Web.UI.HtmlTextWriterAttribute,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrKey">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> マークアップ属性を表します。</param>
        <param name="value">エンコードする属性の値を含む文字列。</param>
        <summary>要件に基づいて、指定したマークアップ属性の値をエンコード、 <see cref="T:System.Web.HttpRequest" /> 、現在のコンテキストのオブジェクト。</summary>
        <returns>エンコードされた属性値を表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.EncodeAttributeValue%2A> メソッドは、二重引用符 \("\)、アンパサンドを削除 \(&\)、および記号 \(\<\) ため、その無効なタグは生成されず、入力に関係なくよりも小さい値です。 によって実行が実際のエンコード、 <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="EncodeUrl">
      <MemberSignature Language="C#" Value="protected string EncodeUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string EncodeUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EncodeUrl(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">URL エンコードを含む文字列。</param>
        <summary>指定された URL にスペースを文字列"%20"に変換することで、最低限の URL エンコードを実行します。</summary>
        <returns>エンコードされた URL を含む文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字の URL エンコードは、パーセント記号 \(%\) の後に、2 桁の 16 進表現 \(大文字\) 文字の ISO ラテン語のコード ポイントで構成されます。 スペースの 16 進数表現は 20 です。  
  
   
  
## 例  
 次のコード例では、呼び出し、 <xref:System.Web.UI.HtmlTextWriter.EncodeUrl%2A> でパラメーターとして渡される URL に含まれるスペースに変換するメソッド、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> メソッドの呼び出しです。  
  
 [!code-cpp[HtmlTextWriter\_Methods\#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#6)]
 [!code-csharp[HtmlTextWriter\_Methods\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#6)]
 [!code-vb[HtmlTextWriter\_Methods\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="T:System.Web.HttpRequest" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public override System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エンコーディングを取得、 <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトを使用してコンテンツをページに書き込みます。</summary>
        <value>
          <see cref="T:System.Text.Encoding" /> で、ページにマークアップが書き込まれます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> プロパティから値を取得する <xref:System.IO.TextWriter> オブジェクトです。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.Encoding%2A> プロパティをカスタム コントロールが含まれているページにテキストのレンダリングに使用するエンコーディングの種類を記述します。  
  
 [!code-cpp[HtmlTextWriter\_Properties\#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#2)]
 [!code-csharp[HtmlTextWriter\_Properties\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#2)]
 [!code-vb[HtmlTextWriter\_Properties\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="EndRender">
      <MemberSignature Language="C#" Value="public virtual void EndRender ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EndRender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通知、 <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクト、またはコントロールには、表示が完了したら、派生クラスのオブジェクト。 このメソッドを使用するにはで開かれているすべてのマークアップ要素を閉じる、 <see cref="M:System.Web.UI.HtmlTextWriter.BeginRender" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter> のクラスの実装、 <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> メソッドには、機能がありません。 オーバーライドする必要があります <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> から派生したクラスで、 <xref:System.Web.UI.HtmlTextWriter> 、独自の表示機能を提供するクラス。  
  
 使用することができます、 <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> で開かれているすべてのマークアップ要素を終了するメソッド、 <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.BeginRender" />
      </Docs>
    </Member>
    <Member MemberName="EndTagLeftChars">
      <MemberSignature Language="C#" Value="public const string EndTagLeftChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EndTagLeftChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EndTagLeftChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>左角かっことスラッシュ記号を表します \(&lt;\/\) マークアップ要素の終了タグのです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> フィールドを使用して、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 要素終了タグのマークアップを作成する方法です。  
  
   
  
## 例  
 次のコード例の終了タグをレンダリングする方法を示しています、 `<table>` マークアップ要素を使用して、 <xref:System.Web.UI.HtmlTextWriter.EndTagLeftChars> と <xref:System.Web.UI.HtmlTextWriter.TagRightChar> フィールドへの呼び出しでパラメーター値として、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドです。  
  
 このコード例は、次のマークアップを表示します。  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter\_Constants\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter\_Constants\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> 、レイアウトとマークアップのブロックに適用を開始する書式設定を指定します。</param>
        <summary>開始タグを書き込み、 <see langword="&lt;span&gt;" /> をレイアウトし、指定したスタイルの文字の書式設定を実装する属性を含む要素です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> マークアップのブロックに背景色や境界線の幅などのスタイルを適用するメソッドです。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> と <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> メソッドを指定したスタイルの文字の書式設定を使用するマークアップを作成するには、デバイス アダプターまたはコントロールを使用します。 に対して同じ値を使用して `style` で、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> をそれぞれ使用する方法に <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> メソッドです。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> メソッドの開始タグの表示、 `<span>` 要素。 このメソッドは、必要な属性とスタイル属性を追加するとの開始タグを `<span>` によって指定される設定を表示する要素、 <xref:System.Web.UI.WebControls.Style> オブジェクトです。 属性とスタイル属性を含む、使用する異なるマークアップ要素を描画する場合、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> オーバー ロードします。  
  
   
  
## 例  
 次のコード例では、という名前のカスタム クラスを使用して `TextSample`, から派生した、 <xref:System.Web.UI.WebControls.WebControl> クラスを使用して、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> を適用するメソッド、 <xref:System.Web.UI.WebControls.Style.ForeColor%2A> スタイルのテキスト文字列をします。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> メソッドは、HTML をレンダリング `<span style="color:Navy;">`します。<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> メソッドの呼び出しを閉じる、 `<span>` 要素のテキストが表示された後にします。  
  
 [!code-vb[System.Web.UI.HtmlTextWriter\_EnterStyle\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterStyle">
      <MemberSignature Language="C#" Value="public virtual void EnterStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnterStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.EnterStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> 、レイアウトとマークアップのブロックに適用を開始する書式設定を指定します。</param>
        <param name="tag">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> で指定されたスタイル オブジェクトを含むマークアップ要素の開始タグを指定する <c>style</c>です。</param>
        <summary>指定したスタイルの文字の書式設定とレイアウトを実装する属性を含むマークアップ要素の開始タグを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> マークアップのブロックに背景色や境界線の幅などのスタイルを適用するメソッドです。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> と <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> メソッドを指定したスタイルの文字の書式設定を使用するマークアップを作成するには、デバイス アダプターまたはコントロールを使用します。 に対して同じ値を使用して `style` で、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> をそれぞれ使用する方法に <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> メソッドです。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> メソッドで指定した要素の開始タグの表示、 `tag` パラメーター。<xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29> メソッドし、必要な属性とスタイルの属性に追加で指定されている設定を表示する要素の開始タグ、 <xref:System.Web.UI.WebControls.Style> オブジェクトです。 使用して、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%29> の開始タグをレンダリングするオーバー ロード、 `<span>` 要素。  
  
   
  
## 例  
 次のコード例では、という名前のカスタム クラスを使用して `TextSample`, から派生した、 <xref:System.Web.UI.WebControls.WebControl> クラスを使用して、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> を適用するメソッド、 <xref:System.Web.UI.WebControls.Style.ForeColor%2A> スタイルのテキスト文字列をします。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> メソッドは、HTML をレンダリング`<span style="color:Navy;">`します。<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> メソッドの呼び出しを閉じる、 `<span>` 要素のテキストが表示された後にします。  
  
 [!code-vb[System.Web.UI.HtmlTextWriter\_EnterStyle\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.ExitStyle" />
      </Docs>
    </Member>
    <Member MemberName="EqualsChar">
      <MemberSignature Language="C#" Value="public const char EqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char EqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>等号 \(\=\) を表します \(<see langword="=" />\)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> フィールドの代わりに、 <xref:System.Web.UI.HtmlTextWriter.EqualsChar> 属性値の区切り記号を構築するときのフィールドです。  
  
   
  
## 例  
 次のコード例をレンダリングする方法を示しています、 `src` 属性と用の値の一部、 `<img>` 要素。 コードを使用して、 <xref:System.Web.UI.HtmlTextWriter.EqualsChar> フィールドに、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 間に等号 \(\=\) を表示するメソッドの呼び出し、 `src` 属性とその値。  
  
 このコード例は、次のマークアップを表示します。  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter\_Constants\#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter\_Constants\#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      </Docs>
    </Member>
    <Member MemberName="EqualsDoubleQuoteString">
      <MemberSignature Language="C#" Value="public const string EqualsDoubleQuoteString;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EqualsDoubleQuoteString" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>等号 \(\=\) と二重引用符 \("\) で文字列を表します \(\="\) です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> フィールドを使用して、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> と <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 属性値の区切り記号を構築する方法です。  
  
   
  
## 例  
 次のコード例をレンダリングする方法を示しています、 `border` 属性を `<table>` 要素。 コードの呼び出し、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 属性とその値、および使用方法を表示するメソッド、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> をレンダリングする方法、 <xref:System.Web.UI.HtmlTextWriter.EqualsDoubleQuoteString> と <xref:System.Web.UI.HtmlTextWriter.DoubleQuoteChar> フィールドです。  
  
 このコード例は、次のマークアップを表示します。  
  
 `border="1"`  
  
 [!code-csharp[MarkupTextWriter\_Constants\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#6)]
 [!code-vb[MarkupTextWriter\_Constants\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="style">A <see cref="T:System.Web.UI.WebControls.Style" /> を閉じる、レイアウトや書式設定を指定します。</param>
        <summary>終了タグを書き込み、 <see langword="&lt;span&gt;" /> 指定されたレイアウトと文字の書式設定を終了する要素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%29> メソッドの終了タグの表示、 `<span>` コントロールの終了タグの後の要素、要素を閉じる、対応するによって開かれた <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 呼び出します。  
  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> と <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> メソッドを開始し、指定したスタイルの文字の書式設定を使用して、ブロックを終了するマークアップを作成するには、デバイス アダプターまたはコントロールを使用します。 に対して同じ値を使用して `style` で、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> をそれぞれ使用する方法に <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、という名前のカスタム クラスを使用して `TextSample`, から派生した、 <xref:System.Web.UI.WebControls.WebControl> クラスを使用して、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> を適用するメソッド、 <xref:System.Web.UI.WebControls.Style.ForeColor%2A> スタイルのテキスト文字列をします。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> メソッドは、HTML をレンダリング `<span style="color:Navy;">`します。<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> メソッドの呼び出しを閉じる、 `<span>` 要素のテキストが表示された後にします。  
  
 [!code-vb[System.Web.UI.HtmlTextWriter\_EnterStyle\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ExitStyle">
      <MemberSignature Language="C#" Value="public virtual void ExitStyle (System.Web.UI.WebControls.Style style, System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExitStyle(class System.Web.UI.WebControls.Style style, valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.ExitStyle(System.Web.UI.WebControls.Style,System.Web.UI.HtmlTextWriterTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Web.UI.WebControls.Style" />
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="style">出力テキストへの適用を停止するよう、レイアウトと書式設定を指定する <see cref="T:System.Web.UI.WebControls.Style" />。</param>
        <param name="tag">指定したスタイルを適用する属性が含まれるマークアップ要素の終了タグを指定する <see cref="T:System.Web.UI.HtmlTextWriterTag" />。 これは、対応する <see cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" /> 呼び出しで渡されたキーに一致する必要があります。</param>
        <summary>指定されたマークアップ要素の終了タグを書き込んで、指定されたレイアウトと文字書式を終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>のオーバー ロード、<xref:System.Web.UI.HtmlTextWriter.ExitStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29>メソッドで指定されている要素の終了タグをレンダリングする`tag`、コントロールの終了タグの後に、対応するによって開かれた要素を閉じる<xref:System.Web.UI.HtmlTextWriter.EnterStyle%28System.Web.UI.WebControls.Style%2CSystem.Web.UI.HtmlTextWriterTag%29>メソッドの呼び出しです。  
  
 <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>と<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>メソッドを使用するマークアップ先頭し、末尾に指定したスタイルの文字書式を使用してブロックを作成するには、デバイス アダプターまたは制御します。 同じ値を使用して`style`で、 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 、対応するのに使用する方法<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>メソッドです。  
  
   
  
## 例  
 次のコード例は、という名前のカスタム クラスを使用する方法を示します`TextSample`から派生した、<xref:System.Web.UI.WebControls.WebControl>を使用して、クラス、<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>適用する方法、<xref:System.Web.UI.WebControls.Style.ForeColor%2A>スタイルのテキスト文字列をします。  
  
 <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A>メソッドに、HTML 表示`<span style="color:Navy;">`です。<xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A>メソッドの呼び出しの終了の`<span>`テキストが表示された後の要素。  
  
 [!code-vb[System.Web.UI.HtmlTextWriter\_EnterStyle\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter_EnterStyle/VB/styledtext.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.EnterStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void FilterAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FilterAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.FilterAttributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ページまたは Web サーバー コントロールのすべてのプロパティにすべてのマークアップとスタイルの属性を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 マークアップ要素に属性がレンダリングされる前に、 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> メソッドが呼び出されます。 さらに、 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> メソッドの呼び出し、 <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> と <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> 属性とスタイルをレンダリングするためのメソッドです。  
  
   
  
## 例  
 次のコード例から派生するカスタム クラスを使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter> をオーバーライドするクラス、 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> メソッドです。 呼び出されると、 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> オーバーライドは、いずれかのテキスト ライターをレンダリングするかどうかをチェック `<label>` または `<a>` 要素。  
  
-   場合、 `<label>` 要素を表示している、 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> メソッド チェックするかどうか、 `style` 属性は、要素に表示され、ない場合は、作成、 `style` 属性し、設定 `color: blue`します。  
  
-   場合、 `<a>` 要素を表示している、 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> メソッドを決定するかどうか、 `href` 属性が含まれる、ない場合は、追加、 `href` URL http:\/\/www.cohowinery.com にします。  
  
 [!code-cpp[HtmlTextWriter\_Methods\#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter\_Methods\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter\_Methods\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のすべてのバッファーをクリア <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトとすべての出力ストリームに書き込むデータのバッファリングされた原因です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter> のクラスの実装、 <xref:System.Web.UI.HtmlTextWriter.Flush%2A> メソッドを呼び出すだけ、 <xref:System.IO.TextWriter.Flush%2A> 基本メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterAttribute GetAttributeKey (string attrName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterAttribute GetAttributeKey(string attrName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attrName">取得する対象の属性を含む文字列、 <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />です。</param>
        <summary>取得する、対応する <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 指定した属性の列挙値。</summary>
        <returns>
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 列挙値を指定した属性それ以外の場合、無効な <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 属性は、列挙体のメンバーではない場合は値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `attrName` は `null` または空の文字列 \(""\) に型指定された属性の名前、値\-1 の場合、テーブルで見つからないか、 <xref:System.Web.UI.HtmlTextWriterAttribute> オブジェクトが返されます。  
  
   
  
## 例  
 次のコード例から派生するクラスを使用して、 <xref:System.Web.UI.HtmlTextWriter> をオーバーライドするクラス、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドです。 上書きのチェックするかどうか `tagKey` に等しい、 <xref:System.Web.UI.HtmlTextWriterTag.Font> フィールドに、あることを示す、 `<font>` マークアップ要素が表示されます。 したがって、オーバーライドを呼び出す場合、 <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> かどうかを確認するメソッド、 `<font>` 要素が含まれています、 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 属性です。 場合、 <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> 返します `false`, 、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> メソッドの呼び出し、 <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> を定義するメソッド、 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> し、その値を設定 `30pt`します。  
  
 [!code-cpp[HtmlTextWriter\_Methods\#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter\_Methods\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter\_Methods\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.IsAttributeDefined" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeName">
      <MemberSignature Language="C#" Value="protected string GetAttributeName (System.Web.UI.HtmlTextWriterAttribute attrKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetAttributeName(valuetype System.Web.UI.HtmlTextWriterAttribute attrKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetAttributeName(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attrKey" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="attrKey">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> のマークアップの属性名を取得します。</param>
        <summary>指定した関連付けられているマークアップ属性の名前を取得する <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 値。</summary>
        <returns>マークアップ属性の名前を表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> メソッドは、空の文字列を返します \(""\) 場合は、 `attrKey` が無効です <xref:System.Web.UI.HtmlTextWriterAttribute> 値。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.GetAttributeName%2A> に変換する方法、 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 列挙値を文字列の名前にします。  
  
 [!code-cpp[HtmlTextWriter\_Methods3\#6](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#6)]
 [!code-csharp[HtmlTextWriter\_Methods3\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#6)]
 [!code-vb[HtmlTextWriter\_Methods3\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterStyle GetStyleKey (string styleName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Web.UI.HtmlTextWriterStyle GetStyleKey(string styleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="styleName">取得する対象のスタイル属性、 <see cref="T:System.Web.UI.HtmlTextWriterStyle" />です。</param>
        <summary>取得、 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 指定したスタイルの列挙値。</summary>
        <returns>
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> に対応する列挙値 <paramref name="styleName" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> メソッドが値として型指定された\-1 を返します、 <xref:System.Web.UI.HtmlTextWriterStyle> 場合は、値 `styleName` いずれかに対応していない <xref:System.Web.UI.HtmlTextWriterStyle> 列挙値。  
  
   
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> から派生したクラスのメソッド、 <xref:System.Web.UI.HtmlTextWriter> クラスです。<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> オーバーライドによりかどうか、 `<label>` マークアップを表示する場合は、要素を確認し、 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 属性です。 場合、 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 属性が定義されていない、 <xref:System.Web.UI.HtmlTextWriter.GetStyleKey%2A> メソッドへの呼び出しの最初のパラメーターとして使用、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> を追加するメソッド、 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 属性を `<label>` マークアップ要素、 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 属性を `red`します。  
  
 [!code-cpp[HtmlTextWriter\_Methods\#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#1)]
 [!code-csharp[HtmlTextWriter\_Methods\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#1)]
 [!code-vb[HtmlTextWriter\_Methods\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetStyleName">
      <MemberSignature Language="C#" Value="protected string GetStyleName (System.Web.UI.HtmlTextWriterStyle styleKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetStyleName(valuetype System.Web.UI.HtmlTextWriterStyle styleKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetStyleName(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="styleKey" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="styleKey">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> スタイル属性の名前を取得します。</param>
        <summary>指定した関連付けられているマークアップのスタイル属性名を取得 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 列挙値。</summary>
        <returns>スタイル属性の名前に関連付けられている、 <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> で指定された列挙値 <paramref name="styleKey" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `styleKey` が無効です <xref:System.Web.UI.HtmlTextWriterStyle> オブジェクト、 <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> メソッドは、空の文字列を返します \(""\) です。  
  
   
  
## 例  
 次のコード例を確認する方法を示して かどうか、 `<label>` 要素を表示しています。 そのため、これを確認する場合かどうか、 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 要素にスタイル属性が定義されています。 属性が定義されていない場合、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> メソッドが呼び出されると、 <xref:System.Web.UI.HtmlTextWriter.GetStyleName%2A> メソッドに変換、 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 列挙型のメンバーに渡すには、その文字列形式に、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> メソッドです。  
  
 [!code-cpp[HtmlTextWriter\_Methods3\#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter\_Methods3\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter\_Methods3\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag GetTagKey (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Web.UI.HtmlTextWriterTag GetTagKey(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">取得する対象のマークアップ要素、 <see cref="T:System.Web.UI.HtmlTextWriterTag" />です。</param>
        <summary>取得、 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 列挙値の指定したマークアップ要素に関連付けられています。</summary>
        <returns>
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 列挙値。 それ以外の場合 <paramref name="tagName" /> が特定の関連付けられていない <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 値、 <see cref="F:System.Web.UI.HtmlTextWriterTag.Unknown" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `tagName` は `null`, 、空の文字列 \(""\)、またはマークアップ タグの名前のテーブルに見つかりません、 <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> メソッドが返される、 <xref:System.Web.UI.HtmlTextWriterTag.Unknown> フィールドです。  
  
   
  
## 例  
 次のコード例のオーバー ロードをオーバーライドする方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> をパラメーターとして文字列を受け取るメソッドです。 文字列が渡される、 <xref:System.Web.UI.HtmlTextWriter.GetTagKey%2A> メソッドで、対応する変換 <xref:System.Web.UI.HtmlTextWriterTag> 列挙体のメンバーとすることが渡されます、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> を受け取るオーバー ロード、 <xref:System.Web.UI.HtmlTextWriterTag> 列挙値をパラメーターとして。  
  
 [!code-cpp[HtmlTextWriter\_Methods3\#8](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#8)]
 [!code-csharp[HtmlTextWriter\_Methods3\#8](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#8)]
 [!code-vb[HtmlTextWriter\_Methods3\#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="GetTagName">
      <MemberSignature Language="C#" Value="protected virtual string GetTagName (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTagName(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.GetTagName(System.Web.UI.HtmlTextWriterTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> のマークアップ要素を取得します。</param>
        <summary>指定した関連付けられているマークアップ要素を取得する <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 列挙値。</summary>
        <returns>マークアップ要素を表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `tagKey` が無効です <xref:System.Web.UI.HtmlTextWriterTag> 値、 <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> メソッドは、空の文字列を返します \(""\) です。  
  
   
  
## 例  
 次のコード例では、閉じる、 `<font>` 要素を使用して、 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> メソッドです。<xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> メソッドの呼び出し、 <xref:System.Web.UI.HtmlTextWriter.GetTagName%2A> に変換する方法、 <xref:System.Web.UI.HtmlTextWriterTag.Font> 値を文字列にします。  
  
 [!code-cpp[HtmlTextWriter\_Methods3\#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#7)]
 [!code-csharp[HtmlTextWriter\_Methods3\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#7)]
 [!code-vb[HtmlTextWriter\_Methods3\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはマークアップの各行の先頭にインデントを設定するタブ位置の数を設定します。</summary>
        <value>各行をインデントするタブ位置の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定された文字列を記述してインデントを実行、 `tabString` のパラメーター、 <xref:System.Web.UI.HtmlTextWriter.%23ctor%28System.IO.TextWriter%2CSystem.String%29> コンス トラクターで指定された回数、 <xref:System.Web.UI.HtmlTextWriter.Indent%2A> プロパティです。  
  
 場合、 <xref:System.Web.UI.HtmlTextWriter.Indent%2A> プロパティが負の値に設定されているが保存される前に 0 に変更します。  
  
   
  
## 例  
 割り当てられている値をインクリメントする次のコード例には、 <xref:System.Web.UI.HtmlTextWriter.Indent%2A> プロパティの開始タグに属性が追加されたときに、 `<span>` 要素および <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドが呼び出されました。 内部に表示されますが、マークアップでインデント増加、 `<span>` 要素。  
  
 [!code-csharp[MarkupTextWriter\_Samples1\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#2)]
 [!code-vb[MarkupTextWriter\_Samples1\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      </Docs>
    </Member>
    <Member MemberName="InnerWriter">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter InnerWriter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter InnerWriter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.InnerWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはマークアップ要素の内部コンテンツを書き込むテキスト ライターを設定します。</summary>
        <value>A <see cref="T:System.IO.TextWriter" /> 内部マークアップの内容を書き込みます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内部マークアップの内容は、開始タグと終了タグのマークアップ言語の要素の間にあるテキストです。  
  
 場合、 <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> プロパティに設定されて、 <xref:System.IO.TextWriter> オブジェクトのインスタンスである、 <xref:System.Web.HttpWriter> クラスは、この事実が記録され、別の参照を保存します。  
  
   
  
## 例  
 次のコード例から派生したカスタム Web サーバー コントロールを使用する方法を示しています、 <xref:System.Web.UI.WebControls.WebControl> をオーバーライドするクラス、 <xref:System.Web.UI.Control.Render%2A> メソッドです。 使用して、 <xref:System.Web.UI.HtmlTextWriter> 書き込むためにクラス、 `<font>` 要素。 使用して、要素の開始タグを書き込み、後に、 <xref:System.Web.UI.HtmlTextWriter.InnerWriter%2A> 文字列に書き込むプロパティ `"<br> The time on the server:"` の値を持つには、この文字列を連結し、 <xref:System.DateTime.Now%2A?displayProperty=fullName> プロパティです。  
  
 [!code-cpp[HtmlTextWriter\_Properties\#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CPP/htmltextwriter_properties1.cpp#3)]
 [!code-csharp[HtmlTextWriter\_Properties\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Properties/CS/htmltextwriter_properties1.cs#3)]
 [!code-vb[HtmlTextWriter\_Properties\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Properties/VB/htmltextwriter_properties1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.HttpWriter" />
        <altmember cref="T:System.Web.UI.WebControls.WebControl" />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> マークアップ属性に関連付けられています。</param>
        <summary>次の呼び出し中に指定したマークアップ属性とその値が表示されるかどうかを判断、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <returns>
          <see langword="true" /> 次の呼び出し中に、属性が表示されるかどうか、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッド以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 割り当てられる値を取得する、 <xref:System.Web.UI.HtmlTextWriterAttribute> オブジェクトを使用して、 <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%28System.Web.UI.HtmlTextWriterAttribute%2CSystem.String%40%29> このものではなく、オーバー ロードします。  
  
   
  
## 例  
 次のコード例のオーバーライドを使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> から継承するクラスのメソッド、 <xref:System.Web.UI.HtmlTextWriter> クラスです。<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> かどうかのチェックを無効、 `<font>` マークアップ要素が表示されます。 したがって、オーバーライドを呼び出す場合、 <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> をチェックするメソッドかどうか、 `<font>` 要素が含まれています、 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 属性です。 ない場合、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> メソッドの呼び出し、 <xref:System.Web.UI.HtmlTextWriter.GetAttributeKey%2A> を定義するメソッド、 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 属性し、その値に設定 `30pt`します。  
  
 [!code-cpp[HtmlTextWriter\_Methods\#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#3)]
 [!code-csharp[HtmlTextWriter\_Methods\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#3)]
 [!code-vb[HtmlTextWriter\_Methods\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsAttributeDefined (System.Web.UI.HtmlTextWriterAttribute key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsAttributeDefined(valuetype System.Web.UI.HtmlTextWriterAttribute key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsAttributeDefined(System.Web.UI.HtmlTextWriterAttribute,System.String@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> マークアップ属性に関連付けられています。</param>
        <param name="value">属性に代入する値。</param>
        <summary>次の呼び出し中に指定したマークアップ属性とその値が表示されるかどうかを判断、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <returns>
          <see langword="true" /> 次の呼び出し中に、属性が表示されるかどうか、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッド以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> メソッドが返す `true`, に割り当てられる値、 <xref:System.Web.UI.HtmlTextWriterAttribute> オブジェクトが返され、 `value` パラメーター。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 属性に関連付けられています。</param>
        <summary>指定したマークアップのスタイル属性が次の呼び出し中にレンダリングされるかどうかを判断、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <returns>
          <see langword="true" /> かどうか、属性は、次の呼び出し中に表示されます、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッド以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定したスタイル属性で表示する値を取得するには、使用、 <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%28System.Web.UI.HtmlTextWriterStyle%2CSystem.String%40%29> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> メソッドです。  
  
   
  
## 例  
 次のコード例を確認する方法を示して かどうか、 `<label>` 要素を表示しています。 場合は、 <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> メソッド チェックするかどうか、 <xref:System.Web.UI.HtmlTextWriterStyle.Color> スタイル属性を要素に定義されています。 場合、 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 属性が定義されていない、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> メソッドを定義、 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 属性し、その値に設定 `red`します。  
  
 [!code-cpp[HtmlTextWriter\_Methods3\#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CPP/htmltextwriter_methods3.cpp#4)]
 [!code-csharp[HtmlTextWriter\_Methods3\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods3/CS/htmltextwriter_methods3.cs#4)]
 [!code-vb[HtmlTextWriter\_Methods3\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods3/VB/htmltextwriter_methods3.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsStyleAttributeDefined">
      <MemberSignature Language="C#" Value="protected bool IsStyleAttributeDefined (System.Web.UI.HtmlTextWriterStyle key, out string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsStyleAttributeDefined(valuetype System.Web.UI.HtmlTextWriterStyle key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined(System.Web.UI.HtmlTextWriterStyle,System.String@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
        <Parameter Name="value" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> 属性に関連付けられています。</param>
        <param name="value">スタイル属性に割り当てられた値。</param>
        <summary>次の呼び出し中に指定したマークアップのスタイル属性とその値が表示されるかどうかを判断、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <returns>
          <see langword="true" /> 属性とその値は次の呼び出し中にレンダリングする場合、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッド以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Web.UI.HtmlTextWriter.IsStyleAttributeDefined%2A> メソッドが返す `true`, に割り当てられる値、 <xref:System.Web.UI.HtmlTextWriterStyle> で属性が返される、 `value` パラメーター。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsValidFormAttribute (string attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidFormAttribute(string attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attribute">チェックする属性の名前を表す文字列。</param>
        <summary>レンダリングの開始タグでできることを確認するための属性のチェック、 <see langword="&lt;form&gt;" /> マークアップ要素。</summary>
        <returns>常に <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter> のクラスの実装、 <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> メソッドが返す `true` すべての属性です。 オーバーライド、 <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> の開始タグで表示可能な属性を制限するため、 `<form>` 要素。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Override the <see cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" /> method to return <see langword="true" /> only for those attributes that can be included in the <see langword="&lt;form&gt;" /> element of the markup for which the class derived from the <see cref="T:System.Web.UI.HtmlTextWriter" /> class is intended.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public override string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定で使用される行終端文字列、 <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトです。</summary>
        <value>現在のために使用する行終端文字列 <see cref="T:System.Web.UI.HtmlTextWriter" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列とは、ライン フィード \("\\r\\n"\) の後にキャリッジ リターン、です。  
  
 行終端文字列が 1 つの出力ストリームに書き込まれるは <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> メソッドが呼び出されます。 場合、 <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> にプロパティが設定されている `null`, 、既定改行文字を使用します。  
  
   
  
## 例  
 次のコード例から派生するカスタム クラスを使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter> をオーバーライドするクラス、 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> メソッドです。 呼び出されると、 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> オーバーライドは、いずれかのテキスト ライターをレンダリングするかどうかをチェック `<label>` または `<a>` 要素。 その場合、 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> メソッドは、ラベルのスタイル属性が定義されているかどうかを判断します。 スタイルが定義されていない場合、 <xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> メソッドの既定値の設定、 `style:color` を青の属性です。<xref:System.Web.UI.HtmlTextWriter.FilterAttributes%2A> メソッドを使用し、 <xref:System.Web.UI.HtmlTextWriter.NewLine%2A> 行を挿入するプロパティは、マークアップ タグ内で中断して、その他の定義済みの属性を書き込みます。  
  
 [!code-cpp[HtmlTextWriter\_Methods\#4](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#4)]
 [!code-csharp[HtmlTextWriter\_Methods\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#4)]
 [!code-vb[HtmlTextWriter\_Methods\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">表示する属性の名前を表す文字列。</param>
        <param name="value">属性に割り当てられている値を表す文字列。</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> マークアップ属性に関連付けられています。</param>
        <summary>指定したマークアップ属性とその値を現在のマークアップ要素にレンダリングできるかどうかを決定します。</summary>
        <returns>常に <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter> のクラスの実装、 <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> メソッドは常に返します `true`します。<xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> のオーバーライドでは、属性が、ページに表示するかどうかを判断できます。  
  
   
  
## 例  
 次のコード例は、オーバーライドする方法を示します、 <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> メソッドです。 場合、 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 属性が表示されますが、 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 値ではありません `30pt`, 、 <xref:System.Web.UI.HtmlTextWriter.OnAttributeRender%2A> オーバーライドを呼び出し、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> を追加するメソッド、 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 属性し、その値に設定 `30pt`します。  
  
 [!code-csharp[MarkupTextWriter\_Methods3\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#5)]
 [!code-vb[MarkupTextWriter\_Methods3\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>If you inherit from the <see cref="T:System.Web.UI.HtmlTextWriter" /> class, you can override the <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> method to return <see langword="false" /> to prevent an attribute from being rendered at all, being rendered on a particular element, or being rendered for a particular markup. For example, if you do not want the object derived from <see cref="T:System.Web.UI.HtmlTextWriter" /> to render the <see langword="bgcolor" /> attribute to <see langword="&lt;table&gt;" /> elements, you can override the <see cref="M:System.Web.UI.HtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> and return <see langword="false" /> when <paramref name="name" /> passes <see langword="bgcolor" /> and the <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> property value is <see langword="table" />.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">出力するスタイル属性の名前を含む文字列。</param>
        <param name="value">スタイル属性に割り当てられている値を表す文字列。</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> スタイル属性に関連付けられています。</param>
        <summary>指定したマークアップのスタイル属性とその値を現在のマークアップ要素にレンダリングできるかどうかを決定します。</summary>
        <returns>常に <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter> のクラスの実装、 <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> メソッドは常に返します `true`します。<xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> のオーバーライドでは、ページにスタイル属性を表示するかどうかを判断できます。  
  
   
  
## 例  
 次のコード例は、オーバーライドする方法を示します、 <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> メソッドです。 場合、 <xref:System.Web.UI.HtmlTextWriterStyle.Color> スタイル属性が表示されますが、 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 値ではありません `purple`, 、 <xref:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender%2A> 使用方法をオーバーライド、 <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> を設定するメソッド、 <xref:System.Web.UI.HtmlTextWriterStyle.Color> 属性を `purple`します。  
  
 [!code-csharp[MarkupTextWriter\_Methods3\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#6)]
 [!code-vb[MarkupTextWriter\_Methods3\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>If you inherit from the <see cref="T:System.Web.UI.HtmlTextWriter" /> class, you can override the <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> method to return <see langword="false" /> to prevent a style attribute from being rendered at all, being rendered on a particular element, or being rendered for a particular markup language. For example, if you do not want the object that is derived from <see cref="T:System.Web.UI.HtmlTextWriter" /> to render the <see langword="color" /> style attribute to a <see langword="&lt;p&gt;" /> element, you can override the <see cref="M:System.Web.UI.HtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" /> and return <see langword="false" /> when <paramref name="name" /> passes <see langword="color" /> and the <see cref="P:System.Web.UI.HtmlTextWriter.TagName" /> property value is <see langword="p" />.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected virtual bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">表示する要素の名前を表す文字列。</param>
        <param name="key">要素に関連付けられた <see cref="T:System.Web.UI.HtmlTextWriterTag" />。</param>
        <summary>指定したマークアップ要素が要求側のページに表示するかどうかを決定します。</summary>
        <returns>常に <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter> のクラスの実装、 <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> メソッドは常に返します `true`します。<xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> のオーバーライドでは、要素をページに表示するかどうかを判断できます。  
  
   
  
## 例  
 次のコード例は、オーバーライドする方法を示します、 <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> メソッドです。 場合、 <xref:System.Web.UI.HtmlTextWriterTag.Font> 要素を表示している、 <xref:System.Web.UI.HtmlTextWriter.OnTagRender%2A> オーバーライドは、 <xref:System.Web.UI.HtmlTextWriter.IsAttributeDefined%2A> メソッドを呼び出せば確認するかどうか、 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 属性を表示しています。 使用されていない場合、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> を作成する方法、 <xref:System.Web.UI.HtmlTextWriterAttribute.Size> 属性し、その値に設定 `20pt`します。  
  
 [!code-csharp[MarkupTextWriter\_Methods3\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods3/CS/overriddenmarkup.cs#4)]
 [!code-vb[MarkupTextWriter\_Methods3\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods3/VB/overriddenmarkup.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>If you inherit from the <see cref="T:System.Web.UI.HtmlTextWriter" /> class, you can override the <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> method to return <see langword="false" /> to prevent a markup element from being rendered at all or for a particular markup language. For example, if you do not want the object that is derived from <see cref="T:System.Web.UI.HtmlTextWriter" /> to render the <see langword="&lt;font&gt;" /> element, you can override the <see cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" /> method to return <see langword="false" /> when a page is requested that contains a <see langword="&lt;font&gt;" /> element.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="OutputTabs">
      <MemberSignature Language="C#" Value="protected virtual void OutputTabs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTabs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.OutputTabs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一連のマークアップ文字の行のインデント レベルを表すタブ文字列を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> メソッドの使用方法、 <xref:System.Web.UI.HtmlTextWriter.Indent%2A> させることが必要なインデントを記述する数のタブ文字列を決定するプロパティです。  
  
 タブ文字列を指定すると、 <xref:System.Web.UI.HtmlTextWriter.%23ctor%2A> コンス トラクターです。 タブ文字列が指定されていない場合、 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> 定数 \(`\t`\) を使用します。  
  
   
  
## 例  
 次のコード例は、オーバーライドする方法を示します、 <xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> から派生したクラスのメソッド、 <xref:System.Web.UI.HtmlTextWriter> クラスです。<xref:System.Web.UI.HtmlTextWriter.OutputTabs%2A> オーバーライド使用では常に、 <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> インデントを実行する定数。  
  
 [!code-cpp[HtmlTextWriter\_Methods\#7](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CPP/htw.cpp#7)]
 [!code-csharp[HtmlTextWriter\_Methods\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods/CS/htw.cs#7)]
 [!code-vb[HtmlTextWriter\_Methods\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods/VB/htw.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.Indent" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </Member>
    <Member MemberName="PopEndTag">
      <MemberSignature Language="C#" Value="protected string PopEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string PopEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>レンダリングされる要素の一覧から、最後に保存されたマークアップ要素を削除します。</summary>
        <returns>A <see cref="T:System.String" /> 最近を含むマークアップ要素をレンダリングします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要素が出力されるマークアップ要素のリストに追加する、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドです。<xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> メソッド リストから呼び出すことによってマークアップ要素を削除する、 <xref:System.Web.UI.HtmlTextWriter.PopEndTag%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">レンダリングされる要素の一覧が空です。</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PushEndTag">
      <MemberSignature Language="C#" Value="protected void PushEndTag (string endTag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PushEndTag(string endTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.PushEndTag(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endTag">マークアップ要素の終了タグ。</param>
        <summary>マークアップ要素の終了タグを生成するときに、後で使用できる指定されたマークアップ要素を保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要素が出力されるマークアップ要素のリストに追加するときに、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドの呼び出し、 <xref:System.Web.UI.HtmlTextWriter.PushEndTag%2A> メソッドです。<xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> メソッドでは、要素の終了タグがレンダリング後の一覧からマークアップ要素を削除します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.PopEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttribute">
      <MemberSignature Language="C#" Value="protected static void RegisterAttribute (string name, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterAttribute(string name, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterAttribute(System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">登録するマークアップ属性の名前を表す文字列。</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> 属性名に対応します。</param>
        <summary>マークアップ属性を登録するかどうかリテラルまたは動的に生成された、ソース ファイルから、要求元クライアントに正しくレンダリングされるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しによって、HTML マークアップ言語の定義済みの属性が登録されている、 <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> メソッドと 1 つ目 <xref:System.Web.UI.HtmlTextWriter> オブジェクトを作成します。 動的な属性を使用して登録することができます、 <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> 時以外にもメソッドです。  
  
 使用される登録テーブル、 <xref:System.Web.UI.HtmlTextWriter.RegisterAttribute%2A> メソッドは `static`, の属性の登録がすべてに適用されるため、 <xref:System.Web.UI.HtmlTextWriter> ホスト コンピューター上のオブジェクト。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStyle">
      <MemberSignature Language="C#" Value="protected static void RegisterStyle (string name, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterStyle(string name, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterStyle(System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">スタイル名を指定するソース ファイルから、文字列が渡されます。</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> に特定のスタイルに対応します。</param>
        <summary>マークアップ スタイルのプロパティを登録するかどうかのリテラルまたは動的に生成された、ソース ファイルから、要求元クライアントに正しくレンダリングされるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しによって、HTML マークアップ言語のカスケード スタイル シート \(CSS\) の定義済み属性が登録されている、 <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> メソッドと 1 つ目 <xref:System.Web.UI.HtmlTextWriter> オブジェクトを作成します。 動的なスタイル属性を使用して登録することができます、 <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> 時以外にもメソッドです。  
  
 使用される登録テーブル、 <xref:System.Web.UI.HtmlTextWriter.RegisterStyle%2A> メソッドは `static`, の属性の登録がすべてに適用されるため、 <xref:System.Web.UI.HtmlTextWriter> ホスト コンピューター上のオブジェクト。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterTag">
      <MemberSignature Language="C#" Value="protected static void RegisterTag (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void RegisterTag(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RegisterTag(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">HTML タグを含む文字列です。</param>
        <param name="key">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> レンダリングされる要素を指定します。</param>
        <summary>マークアップ タグを登録するかどうかリテラルまたは動的に生成された、ソース ファイルから、要求元クライアントに正しくレンダリングされるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しによって、HTML の言語の定義済みのマークアップ タグが登録されている、 <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> メソッドと 1 つ目 <xref:System.Web.UI.HtmlTextWriter> オブジェクトを作成します。 使用して動的なマークアップ タグを登録することができます、 <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> 時以外にもメソッドです。  
  
 使用される登録テーブル、 <xref:System.Web.UI.HtmlTextWriter.RegisterTag%2A> メソッドは `static`, すべてにタグの登録が適用されるため、 <xref:System.Web.UI.HtmlTextWriter> ホスト コンピューター上のオブジェクト。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>任意のテキストまたはマークアップの出力ストリームに内容の後、およびマークアップの要素の終了タグの前に発生する空白文字を書き込みます。</summary>
        <returns>空白文字または要素のコンテンツの後に書き込むテキストを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> メソッドをマークアップの現在の要素に子要素を挿入する場合に便利にすることができます。  
  
   
  
## 例  
 次のコード例は、オーバーライドする方法を示します、 <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> から派生したクラスのメソッド、 <xref:System.Web.UI.HtmlTextWriter> クラスを決定するかどうか、 `<label>` 要素を表示しています。 場合は、 <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> 上書き挿入の終了タグ、 `<font>` の終了タグの直前の要素、 `<label>` 要素。 以外の要素 `<label>` 表示している、 <xref:System.Web.UI.HtmlTextWriter.RenderAfterContent%2A> 基本メソッドを使用します。  
  
 [!code-cpp[HtmlTextWriter\_Methods1\#3](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#3)]
 [!code-csharp[HtmlTextWriter\_Methods1\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#3)]
 [!code-vb[HtmlTextWriter\_Methods1\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The <see cref="T:System.Web.UI.HtmlTextWriter" /> class implementation of the <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> method returns <see langword="null" />. Override <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterContent" /> if you want to write text or spacing after the element content but before the closing tag.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderAfterTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderAfterTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderAfterTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>任意の空白文字またはマークアップ要素の終了タグの後に発生するテキストを書き込みます。</summary>
        <returns>空白文字または要素の終了タグの後に書き込むテキスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> メソッドになる要素のタグの後に追加の終了タグをレンダリングしたい場合に便利です。  
  
   
  
## 例  
 次のコード例は、オーバーライドする方法を示します、 <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> から派生するクラスかどうかを決定する方法、 <xref:System.Web.UI.HtmlTextWriter> クラスを表示、 `<label>` 要素。 場合は、 <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> 上書き挿入の終了タグ、 `<font>` 要素の直後に、 `<label>` 要素。 ない場合は、 `<label>` 要素、 <xref:System.Web.UI.HtmlTextWriter.RenderAfterTag%2A> 基本メソッドを使用します。  
  
 [!code-cpp[HtmlTextWriter\_Methods4\#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#2)]
 [!code-csharp[HtmlTextWriter\_Methods4\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#2)]
 [!code-vb[HtmlTextWriter\_Methods4\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The <see cref="T:System.Web.UI.HtmlTextWriter" /> class implementation of the <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> method returns <see langword="null" />. Override <see cref="M:System.Web.UI.HtmlTextWriter.RenderAfterTag" /> if you want to write text or spacing after the element closing tag.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeContent">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>任意のテキストまたはコンテンツの前に、マークアップ要素の開始タグの後の空白文字を書き込みます。</summary>
        <returns>テキストまたは要素のコンテンツの前に記述する間隔。 オーバーライドされなかった場合、 <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> 返します <see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> メソッドを内部のマークアップの前に、現在のマークアップ要素に子要素を挿入する場合に便利にすることができます。  
  
   
  
## 例  
 次のコード例は、オーバーライドする方法を示します、 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> から派生するクラスかどうかを決定する方法、 <xref:System.Web.UI.HtmlTextWriter> クラスは、表示しようとする、 `<label>` 要素。 場合は、 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> 上書き挿入の開始タグ、 `<font>` 要素の開始タグの直後に、 `<label>` 要素。 ない場合は、 `<label>` 要素、 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> 基本メソッドを使用します。  
  
 [!code-cpp[HtmlTextWriter\_Methods1\#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter\_Methods1\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter\_Methods1\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The <see cref="T:System.Web.UI.HtmlTextWriter" /> class implementation of the <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> method returns <see langword="null" />. Override <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeContent" /> if you want to write text or spacing after the opening tag but ahead of the element content.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeforeTag">
      <MemberSignature Language="C#" Value="protected virtual string RenderBeforeTag ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string RenderBeforeTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>任意のテキストまたはマークアップ要素の開始タグの直前に発生する空白文字を書き込みます。</summary>
        <returns>テキストまたはマークアップ要素の開始タグの前に記述する間隔。 オーバーライドされなかった場合、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> メソッドになる目的の要素の開始タグの前に追加の開始タグをレンダリングしたい場合に便利です。  
  
   
  
## 例  
 次のコード例は、オーバーライドする方法を示します、 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> から派生するクラスかどうかを決定する方法、 <xref:System.Web.UI.HtmlTextWriter> クラスは、表示しようとする、 `<label>` 要素。 場合は、 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> 上書き挿入の開始タグ、 `<font>` 要素の直前に、 `<label>` 要素。 場合は、 `<label>` 要素、 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> 基本メソッドを使用します。  
  
 [!code-cpp[HtmlTextWriter\_Methods4\#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter\_Methods4\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter\_Methods4\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The <see cref="T:System.Web.UI.HtmlTextWriter" /> class implementation of the <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> method returns <see langword="null" />. Override <see cref="M:System.Web.UI.HtmlTextWriter.RenderBeforeTag" /> if you want to write text or spacing ahead of the element opening tag.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">開始タグをレンダリングするマークアップ要素の名前を含む文字列。</param>
        <summary>指定したマークアップ要素の開始タグを出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>の上書き、<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.String%29>メソッド、マークアップ要素は、のいずれかではない場合、<xref:System.Web.UI.HtmlTextWriterTag>列挙値。  
  
 マークアップ要素を使用して生成する、<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>メソッドは、最初の呼び出し、<xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A>と<xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A>メソッドは、必要に応じて、任意の要素の属性または要素の開始タグの表示スタイル属性を指定します。 内側のマークアップを生成するには、後に呼び出し、<xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>終了タグを生成する方法です。  
  
   
  
## 例  
 次のコード例を呼び出す方法を示します、<xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>非標準の開始タグを表示するためにカスタム コントロール`MyTag`要素。 コードの例では次の<xref:System.Web.UI.HtmlTextWriter.Write%2A>内側のマークアップを呼び出し、続いてを表示するためにメソッドの<xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A>要素を閉じます。  
  
 このコード例では、次のマークアップが生成されます。  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter\#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriterTag tagKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(valuetype System.Web.UI.HtmlTextWriterTag tagKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagKey" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tagKey">いずれか、 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> をレンダリングするマークアップ要素の開始タグを定義する値。</param>
        <summary>指定した関連付けられているマークアップ要素の開始タグを書き込みます <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 出力ストリームに列挙値。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> のオーバー ロード、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%28System.Web.UI.HtmlTextWriterTag%29> メソッドの 1 つは、既知の型のマークアップ要素である場合、 <xref:System.Web.UI.HtmlTextWriterTag> 列挙値。  
  
 使用してマークアップ要素を生成する、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドは、最初の呼び出し、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> と <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A> メソッドは、必要に応じて、その要素の属性または要素の開始タグで表示しようとするスタイル属性を指定します。 内部のマークアップを生成した後、 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 終了タグを生成します。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> の開始タグを出力する方法、 `<img>` 要素。 によって要素に追加する属性、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> メソッドは、開始になります `<img>` タグ。<xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 終了タグを生成するメソッドを使用します。  
  
 このコード例は、次のマークアップを生成します。  
  
 `<img alt="Encoding &quot;Required&quot;" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter\#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.RenderEndTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>マークアップ要素の終了タグを出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> した後に、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> オーバー ロードが呼び出され、開始タグと終了タグ \(内部マークアップ\) の要素の間のすべてのコンテンツが表示された後にします。  
  
   
  
## 例  
 呼び出す方法を次のコード例に示します、 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 両方の後に、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 開始タグを生成するメソッド、および <xref:System.Web.UI.HtmlTextWriter.Write%2A> 開始タグと終了タグのユーザー設定の間の内部のマークアップをレンダリング メソッド `MyTag` 要素が呼び出されました。  
  
 このコード例は、次のマークアップを生成します。  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter\#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingChars">
      <MemberSignature Language="C#" Value="public const string SelfClosingChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingChars" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>空白とマークアップ タグの自己終了スラッシュ記号 \(\/\) を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.SelfClosingChars> フィールドは自己終了マークアップ要素で使用します。 例:  
  
 `<input type="submit" value="go"  />`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SelfClosingTagEnd">
      <MemberSignature Language="C#" Value="public const string SelfClosingTagEnd;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelfClosingTagEnd" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>終了を表す終了スラッシュ記号と右の山かっこ \(\/&gt;\) 自己終了マークアップ要素のです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> フィールドを使用して、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> 自己終了マークアップ要素を構築する場合は、メソッドです。  
  
   
  
## 例  
 次のコード例は、カスタムの値を表示する方法を示しています。 `FileName` 引用符の後にプロパティおよびによって表される文字、 <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> フィールドです。 コード例では、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドを呼び出し、 <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> フィールドは、パラメーター引数要素を閉じます。  
  
 このコード例を表示、 `FileName` プロパティの値とし、次のマークアップ。  
  
 `" />`  
  
 [!code-csharp[MarkupTextWriter\_Constants\#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#11)]
 [!code-vb[MarkupTextWriter\_Constants\#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </Member>
    <Member MemberName="SemicolonChar">
      <MemberSignature Language="C#" Value="public const char SemicolonChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SemicolonChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SemicolonChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セミコロン \(;\) を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 渡す、 <xref:System.Web.UI.HtmlTextWriter.SemicolonChar> フィールド パラメーターの引数は、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> カスタム コントロールまたはアダプターからセミコロンをレンダリングするときに、メソッドの呼び出しです。  
  
   
  
## 例  
 次のコード例では、手動で一連のマークアップ要素にスタイルをレンダリングする方法を示します。 コード例では、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッド `font-size` と `border-style` 属性のスタイルを設定します。<xref:System.Web.UI.HtmlTextWriter.SemicolonChar> のパラメーターとして使用するフィールド、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> の値を区切るためのメソッド、 `font-size` の先頭からの属性、 `border-style` 属性です。  
  
 このコード例は、次のマークアップを表示します。  
  
 `style="font-size:12pt;border-style:ridge"`  
  
 [!code-csharp[MarkupTextWriter\_Constants\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simplebutton.cs#7)]
 [!code-vb[MarkupTextWriter\_Constants\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simplebutton.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SingleQuoteChar">
      <MemberSignature Language="C#" Value="public const char SingleQuoteChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SingleQuoteChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SingleQuoteChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アポストロフィ \('\) を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.SingleQuoteChar> アポストロフィをレンダリングする必要がある場合のフィールドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SlashChar">
      <MemberSignature Language="C#" Value="public const char SlashChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SlashChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SlashChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スラッシュ記号 \(\/\) を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.SlashChar> スラッシュをレンダリングするフィールドは、URL を作成する場合をマークします。<xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> メソッドの使用方法、 <xref:System.Web.UI.HtmlTextWriter.SlashChar> マークアップ要素の終了タグを作成するときのフィールドです。  
  
   
  
## 例  
 次のコード例では、手動で描画、 `src` の属性、 `<img>` 要素。 コード例では、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドを <xref:System.Web.UI.HtmlTextWriter.SlashChar> に適用されるパスにスラッシュをレンダリングするには、そのパラメーターとしてのフィールドをマーク、 `src` 属性です。  
  
 このコード例は、次のマークアップを表示します。  
  
 `src="/images/`  
  
 [!code-csharp[MarkupTextWriter\_Constants\#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpleimage.cs#10)]
 [!code-vb[MarkupTextWriter\_Constants\#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpleimage.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SpaceChar">
      <MemberSignature Language="C#" Value="public const char SpaceChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SpaceChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.SpaceChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>空白 \(\) 文字を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.SpaceChar> フィールドを使用して、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> と <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> 要素と属性間の区切り記号を記述するときの方法です。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初の例では、文字配列を作成する方法を示しています。 2 番目の例では、この配列を使用する方法を示しています。  
  
 これらのコード例では、次のマークアップを生成します。  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 次のコード例を作成する方法を示しています、 <xref:System.Char> を格納する配列、 <xref:System.Web.UI.HtmlTextWriter.SpaceChar> フィールドです。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter\_Methods2\#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 次のコード例は、呼び出し時にパラメーターとして前のコード例で作成された配列を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドです。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter\_Methods2\#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StyleEqualsChar">
      <MemberSignature Language="C#" Value="public const char StyleEqualsChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char StyleEqualsChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.StyleEqualsChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スタイル equals を表します \(<see langword=":" />\) のスタイルを設定するために使用する文字の属性値と等しい。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> フィールドを使用して、 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> スタイルの名前と値を区切るためにメソッドです。  
  
   
  
## 例  
 次のコード例では、レンダリング、 `FontWeight` 属性と値の `bold` 要素の開始タグにします。 コード例では、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドを <xref:System.Web.UI.HtmlTextWriter.StyleEqualsChar> フィールドは、パラメーターを各スタイル属性の値を設定する文字を表示します。  
  
 このコード例は、次のマークアップを表示します。  
  
 `FontWeight:"bold"`  
  
 [!code-csharp[MarkupTextWriter\_Constants\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#5)]
 [!code-vb[MarkupTextWriter\_Constants\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected System.Web.UI.HtmlTextWriterTag TagKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 指定したマークアップ要素の値。</summary>
        <value>レンダリングの開始タグが発生しているマークアップ要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> プロパティから継承するクラスにのみ使用するのでは、 <xref:System.Web.UI.HtmlTextWriter> クラスです。 読み取りまたは設定する必要があります、 <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> プロパティへの呼び出しでのみ、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドです。 これは、一貫した値に設定されているときだけです。  
  
   
  
## 例  
 次のコード例に示しますのオーバーライドされたバージョン、 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeContent%2A> から派生したクラスのメソッド、 <xref:System.Web.UI.HtmlTextWriter> クラスです。 値を使用して、 <xref:System.Web.UI.HtmlTextWriter.TagKey%2A> ユーザー設定を使用してサーバー コントロールかどうかを確認するに <xref:System.Web.UI.HtmlTextWriter> オブジェクトの表示、 `<label>` マークアップ要素。 である場合、 `<font>` を持つ要素を `color` 属性に設定 `red` の書式を変更するには、 `<label>` 要素のテキスト。  
  
 [!code-cpp[HtmlTextWriter\_Methods1\#2](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CPP/htw2.cpp#2)]
 [!code-csharp[HtmlTextWriter\_Methods1\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods1/CS/htw2.cs#2)]
 [!code-vb[HtmlTextWriter\_Methods1\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods1/VB/htw2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティ値を設定することはできません。</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagName" />
      </Docs>
    </Member>
    <Member MemberName="TagLeftChar">
      <MemberSignature Language="C#" Value="public const char TagLeftChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagLeftChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagLeftChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マークアップ タグの始め山かっこ \(&lt;\) を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> フィールドを使用して、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, 、<xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A>, 、<xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, 、および <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> マークアップ タグを作成するときの方法です。  
  
   
  
## 例  
 次のコード例のレンダリングの開始タグの最初の文字、 `<table>` 要素の名前を持つ要素。 コード例では、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドを <xref:System.Web.UI.HtmlTextWriter.TagLeftChar> をパラメーターとしてフィールドです。  
  
 このコード例は、次のマークアップを表示します。  
  
 `<table`  
  
 [!code-csharp[MarkupTextWriter\_Constants\#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#9)]
 [!code-vb[MarkupTextWriter\_Constants\#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected string TagName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlTextWriter.TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または出力されるマークアップ要素のタグ名を設定します。</summary>
        <value>出力されるマークアップ要素のタグ名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.TagName%2A> プロパティから継承するクラスにのみ使用するのでは、 <xref:System.Web.UI.HtmlTextWriter> クラスです。 読み取りまたは設定する必要があります、 <xref:System.Web.UI.HtmlTextWriter.TagName%2A> プロパティでのみ <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A> メソッドの呼び出しです。 これは、一貫した値に設定されているときだけです。  
  
   
  
## 例  
 次のコード例に示しますのオーバーライドされたバージョン、 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> から派生したクラスのメソッド、 <xref:System.Web.UI.HtmlTextWriter> クラスです。 コードの例では、表示する要素は、あるかどうかを確認、 `<label>` 要素を呼び出して、 <xref:System.String.Compare%2A?displayProperty=fullName> メソッド、および成功して、 <xref:System.Web.UI.HtmlTextWriter.TagName%2A> プロパティの値と、文字列 `"label"`, 、パラメーターの引数として。 場合、 `<label>` 要素のレンダリングの開始タグ、 `<font>` 要素で、 `color` 属性に設定 `red`, 、前にレンダリング、 `<label>` 要素の開始タグです。 出力する要素がない場合、 `<label>` 、要素の基本クラスのバージョン、 <xref:System.Web.UI.HtmlTextWriter.RenderBeforeTag%2A> メソッドが呼び出されます。  
  
 [!code-cpp[HtmlTextWriter\_Methods4\#1](~/samples/snippets/cpp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CPP/htmltextwriter_methods4.cpp#1)]
 [!code-csharp[HtmlTextWriter\_Methods4\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlTextWriter_Methods4/CS/htmltextwriter_methods4.cs#1)]
 [!code-vb[HtmlTextWriter\_Methods4\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlTextWriter_Methods4/VB/htmltextwriter_methods4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="TagRightChar">
      <MemberSignature Language="C#" Value="public const char TagRightChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char TagRightChar" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マークアップ タグの終わり山かっこ \(&gt;\) を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.TagRightChar> フィールドを使用して、 <xref:System.Web.UI.HtmlTextWriter.RenderBeginTag%2A>, 、<xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A>, 、および <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> マークアップ タグを作成するときの方法です。  
  
   
  
## 例  
 次のコード例の終了タグをレンダリングする方法を示しています、 `<table>` 要素でのオーバー ロードを呼び出して、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドです。 タグの最後の文字をレンダリングするコード例を使用して、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドを <xref:System.Web.UI.HtmlTextWriter.TagRightChar> をパラメーターとしてフィールドです。  
  
 このコード例は、次のマークアップを表示します。  
  
 `</table>`  
  
 [!code-csharp[MarkupTextWriter\_Constants\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Constants/CS/simpletable.cs#4)]
 [!code-vb[MarkupTextWriter\_Constants\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Constants/VB/simpletable.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.RenderBeginTag(System.Web.UI.HtmlTextWriterTag)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Boolean" /> 出力ストリームに書き込む。</param>
        <summary>ブール値のテキスト形式を保留中のタブの空白文字と共に、出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドは、タブ、保留になっていると、呼び出しを生成、 <xref:System.IO.TextWriter.Write%2A> 基本メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込む Unicode 文字。</param>
        <summary>Unicode 文字のテキスト形式を保留中のタブの空白文字と共に、出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドは、タブ、保留になっていると、呼び出しを生成、 <xref:System.IO.TextWriter.Write%2A> 基本メソッドです。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> の開始タグを終了するメソッド、 `<img>` 要素を使用して、 <xref:System.Web.UI.HtmlTextWriter.TagRightChar> 定数です。  
  
 このコード例は、次のマークアップを表示します。  
  
 `<img alt="A custom image">`  
  
 `</img>`  
  
 [!code-csharp[MarkupTextWriter\_Samples1\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Samples1/CS/markuptextwriter_samples1.cs#5)]
 [!code-vb[MarkupTextWriter\_Samples1\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Samples1/VB/markuptextwriter_samples1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">出力ストリームに書き込むの Unicode 文字の配列。</param>
        <summary>Unicode 文字の配列のテキスト形式を保留中のタブの空白文字と共に、出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドは、タブ、保留になっていると、呼び出しを生成、 <xref:System.IO.TextWriter.Write%2A> 基本メソッドです。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初の例では、文字の配列を作成する方法を示しています。 2 番目の例では、この配列を使用する方法を示しています。  
  
 これらのコード例では、次のマークアップを生成します。  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 次のコード例は、略語は文字の配列を作成する方法を示します `hello world`します。 配列に含まれるが、 <xref:System.Web.UI.HtmlTextWriter.SpaceChar> フィールドには、2 つの単語の間にスペースを作成します。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter\_Methods2\#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 次のコード例では、使用して、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> をレンダリングする方法、 `hello world` をこのコード例を含むコントロールがページに含まれている場合に、ページには、前のコード例で作成した文字配列。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#12](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#12)]
 [!code-vb[MarkupTextWriter\_Methods2\#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込む倍精度浮動小数点数。</param>
        <summary>倍精度浮動小数点数のテキスト形式を保留中のタブの空白文字と共に、出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドは、タブ、保留になっていると、呼び出しを生成、 <xref:System.IO.TextWriter.Write%2A> 基本メソッドです。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> の値を表示するメソッド、 <xref:System.Double.MaxValue?displayProperty=fullName> フィールドです。  
  
 このコード例は、次のマークアップを生成します。  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter\_Methods1\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#7)]
 [!code-vb[MarkupTextWriter\_Methods1\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込む 32 バイトの符号付き整数。</param>
        <summary>32 バイトの符号付き整数のテキスト表現を保留中\] タブの空白文字と共に、出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドは、タブ、保留になっていると、呼び出しを生成、 <xref:System.IO.TextWriter.Write%2A> 基本メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込む 64 バイトの符号付き整数。</param>
        <summary>64 バイトの符号付き整数のテキスト表現を保留中\] タブの空白文字と共に、出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドは、タブ、保留になっていると、呼び出しを生成、 <xref:System.IO.TextWriter.Write%2A> 基本メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込むオブジェクト。</param>
        <summary>オブジェクトのテキスト表現を保留中のタブの空白文字と共に、出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドは、タブ、保留になっていると、呼び出しを生成、 <xref:System.IO.TextWriter.Write%2A> 基本メソッドです。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> の値を表示するメソッド、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> プロパティです。  
  
 このコード例は、次のマークアップを生成します。  
  
 `This is a rendered CultureInfo object.`  
  
 `<bold>`  
  
 値、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティ。  
  
 `</bold>`  
  
 [!code-csharp[MarkupTextWriter\_Methods1\#8](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#8)]
 [!code-vb[MarkupTextWriter\_Methods1\#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込む単精度浮動小数点数。</param>
        <summary>単精度浮動小数点数のテキスト形式を保留中のタブの空白文字と共に、出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドは、タブ、保留になっていると、呼び出しを生成、 <xref:System.IO.TextWriter.Write%2A> 基本メソッドです。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> の値を表示するメソッド、 <xref:System.Single.Epsilon?displayProperty=fullName> 最小有効値は、フィールドの <xref:System.Single> 構造体。  
  
 このコード例は、次のマークアップを生成します。  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter\_Methods1\#10](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#10)]
 [!code-vb[MarkupTextWriter\_Methods1\#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">出力ストリームに書き込む文字列。</param>
        <summary>指定した文字列を保留中のタブの空白文字と共に、出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドは、タブ、保留になっていると、呼び出しを生成、 <xref:System.IO.TextWriter.Write%2A> 基本メソッドです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 開始タグと終了タグのマークアップのカスタム要素の間の文字列を表示します。  
  
 このコード例は、次のマークアップを生成します。  
  
 `<MyTag>`  
  
 `Contents of MyTag`  
  
 `</MyTag>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter\#4](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#4)]
 [!code-csharp[System.Web.UI.HtmlTextWriter\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#4)]
 [!code-vb[System.Web.UI.HtmlTextWriter\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">0 個以上の書式項目を含む文字列です。</param>
        <param name="arg0">書式指定するオブジェクト。</param>
        <summary>タブ文字列と書式設定された文字列と同じセマンティクスを使用して、出力ストリームを書き込みます、 <see cref="M:System.String.Format(System.String,System.Object)" /> メソッドは、保留中\] タブの空白文字とします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドは、タブ、保留になっていると、呼び出しを生成、 <xref:System.IO.TextWriter.Write%2A> 基本メソッドです。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> の値を持つ書式設定された文字列を表示するメソッド、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティです。  
  
 [!code-csharp[MarkupTextWriter\_Methods1\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#5)]
 [!code-vb[MarkupTextWriter\_Methods1\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">0 個以上の書式項目を含む文字列です。</param>
        <param name="arg">書式を設定するオブジェクト配列。</param>
        <summary>保留中のタブ空白文字と共に、出力ストリームにオブジェクトの配列のテキスト表現を含む書式設定された文字列を書き込みます。 このメソッドと同じセマンティクスを使用して、 <see cref="M:System.String.Format(System.String,System.Object[])" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドは、タブ、保留になっていると、呼び出しを生成、 <xref:System.IO.TextWriter.Write%2A> 基本メソッドです。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初の例では、書式設定された文字列および配列の内容を表示する方法を示しています。 2 番目の例では、配列を宣言する方法を示しています。  
  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 書式設定された文字列とという名前のオブジェクトの配列の内容を表示するメソッド `curPriceTime`します。 メソッドの呼び出しでは、最初のメンバーを表示する前に、配列の 2 番目のメンバーが表示されます。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#9)]
 [!code-vb[MarkupTextWriter\_Methods2\#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#9)]  
  
 次のコード例では、宣言することを示しています、 `curPriceTime` オブジェクトの配列。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#14](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#14)]
 [!code-vb[MarkupTextWriter\_Methods2\#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">元のテキストを出力ストリームに書き込む文字の配列。</param>
        <param name="index">配列の書き込みを開始するインデックス位置。</param>
        <param name="count">出力ストリームに書き込む文字数。</param>
        <summary>Unicode 文字の部分配列のテキスト形式を保留中のタブの空白文字と共に、出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [Write メソッド \(Char\<xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドは、タブ、保留になっていると、呼び出しを生成、 [Write メソッド \(Char\<xref:System.IO.TextWriter.Write%2A> 基本メソッドです。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初の例では、文字配列を作成する方法を示しています。 2 番目の例では、この配列を使用する方法を示しています。  
  
 これらのコード例では、次のマークアップを生成します。  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 次のコード例は、詳しく文字の配列を作成する方法を示しています。 `hello world`します。 配列に含まれるが、 [Write メソッド \(Char\<xref:System.Web.UI.HtmlTextWriter.SpaceChar> フィールドには、2 つの単語の間にスペースを作成します。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#13](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#13)]
 [!code-vb[MarkupTextWriter\_Methods2\#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#13)]  
  
 次のコード例の部分を使用して、 `index` と `count` のパラメーター、 [Write メソッド \(Char\<xref:System.Web.UI.HtmlTextWriter.Write%2A> 前の例で作成された配列の最初の 5 文字を表示するメソッドです。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#11](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/renderobjects.cs#11)]
 [!code-vb[MarkupTextWriter\_Methods2\#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/renderobjects.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">0 個以上の書式項目を含む文字列です。</param>
        <param name="arg0">書式指定するオブジェクト。</param>
        <param name="arg1">書式指定するオブジェクト。</param>
        <summary>保留中のタブ空白文字と共に、出力ストリームに 2 つのオブジェクトのテキスト表現を含む書式設定された文字列を書き込みます。 このメソッドと同じセマンティクスを使用して、 <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.Write%2A> メソッドは、タブ、保留になっていると、呼び出しを生成、 <xref:System.IO.TextWriter.Write%2A> 基本メソッドです。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.Write%2A> 書式設定された文字列との値を表示するメソッド、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> と <xref:System.DateTime.Today%2A> プロパティです。  
  
 [!code-csharp[MarkupTextWriter\_Methods1\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering2.cs#6)]
 [!code-vb[MarkupTextWriter\_Methods1\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering2.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.String.Format(System.String,System.Object,System.Object)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">出力ストリームに書き込む属性です。</param>
        <param name="value">属性に代入する値。</param>
        <summary>指定したマークアップ属性と値を出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> マークアップ属性およびエンコードなしでは、その値を書き込みます。<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> メソッドは、二重引用符 \("\) で囲まれた属性値を書き込みます。 場合 `value` は `null`, 、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> メソッドは、属性名のみを書き込みます。  
  
   
  
## 例  
 次のコード例に示しますレンダリング、 `<img>` する両方のオーバー ロードの内の要素、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> メソッドが呼び出されます。 コード例では、次の手順を使用します。  
  
-   呼び出し、 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> メソッドで、要素の開始文字を表示します。  
  
-   呼び出し、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> オーバー ロードでの書き込みが、 `alt` 属性とその値を `<img>` 要素。  
  
-   呼び出し、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> カスタムをレンダリングするオーバー ロード `myattribute` 属性の値と `No "encoding" required`, 、し、設定 `fEncode` に `false`します。  
  
-   要素の開始タグが閉じを呼び出して、 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> を終了するメソッド、 `<img>` 要素。  
  
 このコード例は、次のマークアップを生成します。  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter\#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>In derived classes, you can override the <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> method to define custom rules for writing attributes and their values. For example, you could write code that allowed the <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String)" /> method to write an attribute with an empty value.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">出力ストリームに書き込むマークアップ属性。</param>
        <param name="value">属性に代入する値。</param>
        <param name="fEncode">属性とその代入値をエンコードする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
        <summary>指定されたマークアップ属性と値を出力ストリームに書き込みます。また、指定されている場合は、エンコードされた値も書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> マークアップ属性およびエンコードの有無は、その値を書き込みます。<xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> メソッドの使用方法、 <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> エンコードを実行するメソッドです。  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> メソッドは、二重引用符 \("\) で囲まれた属性値を書き込みます。 場合 `value` は `null`, 、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> メソッドは、属性名のみを書き込みます。  
  
   
  
## 例  
 次のコード例に示しますレンダリング、 `<img>` する両方のオーバー ロードの内の要素、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> メソッドが呼び出されます。 コード例では、次の手順を使用します。  
  
-   呼び出し、 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> メソッドで、要素の開始文字を表示します。  
  
-   呼び出し、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> オーバー ロードでの書き込みが、 `alt` 属性とその値を `<img>` 要素。  
  
-   呼び出し、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> カスタムをレンダリングするオーバー ロード `myattribute` 属性の値と `No "encoding" required`, 、し、設定 `fEncode` に `false`します。  
  
-   要素の開始タグが閉じを呼び出して、 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> を終了するメソッド、 `<img>` 要素。  
  
 このコード例は、次のマークアップを生成します。  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter\#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>In derived classes, you can override the <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> method to define custom rules for writing attributes and their values. For example, you could write code that allowed the <see cref="M:System.Web.UI.HtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)" /> method to write an attribute with an empty value.</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">開始タグの書き込み先のマークアップ要素です。</param>
        <summary>タブ空白文字と、指定したマークアップ要素の開始タグを出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> メソッドでは、マークアップ要素の開始タグの終わり山かっこ \(\>\) は書き込まれません。 これにより、要素の開始タグのマークアップ属性の書き込みができます。 使用して、 <xref:System.Web.UI.HtmlTextWriter.TagRightChar> 定数を呼び出すときに開始タグを閉じる、 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> メソッドです。 使用して、 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> メソッドを <xref:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd> 自己終了、マークアップ要素を記述するときに定数です。  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> メソッドはタグや属性のマッピングを許可せず、要求ごとに同じ方法でマークアップ要素をレンダリングするカスタム サーバー コントロールによって使用されます。  
  
   
  
## 例  
 次のコード例に示しますレンダリング、 `<img>` する両方のオーバー ロードの内の要素、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> メソッドが呼び出されます。 コード例では、次の手順を使用します。  
  
-   呼び出し、 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> メソッドで、要素の開始文字を表示します。  
  
-   呼び出し、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%29> オーバー ロードでの書き込みが、 `alt` 属性とその値を `<img>` 要素。  
  
-   呼び出し、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%28System.String%2CSystem.String%2CSystem.Boolean%29> カスタムをレンダリングするオーバー ロード `myattribute` 属性の値と `No "encoding" required`, 、し、設定 `fEncode` に `false`します。  
  
-   要素の開始タグが閉じを呼び出して、 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> を終了するメソッド、 `<img>` 要素。  
  
 このコード例は、次のマークアップを生成します。  
  
 `<img alt="AtlValue" myattribute="No &quot;encoding&quot; required">`  
  
 `</img>`  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter\#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.TagRightChar" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.SelfClosingTagEnd" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public virtual void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>書き込みます、<see langword="&lt;br /&gt;" />マークアップ要素を出力ストリーム。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、<xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A>行を表示するためにメソッドをカスタム コントロールまたはアダプターのマークアップで中断します。<xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A>メソッドは、間に空白を書き込みます、`br`と`/`HTML 互換性を高めるためです。  
  
   
  
## 例  
 次のコード例を呼び出す方法を示します、<xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A>書き込みます、`<br />`要素の後に要求元のブラウザーを<xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A>メソッドは、エンコードされた書き込みます`&lt;custID&gt; &amp; &lt;invoice#&gt;`マークアップ。  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter\_Samples1\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter\_Samples1\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">エンコードして出力ストリームに書き込む文字列。</param>
        <summary>要求元のデバイスで指定したテキストをエンコードし、それを出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> メソッド \(string\) には、山かっこが含まれている場合 \(\< や \>\) またはアンパサンド \(&\)。  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> メソッドの使用方法、 <xref:System.Web.HttpUtility.HtmlEncode%2A> エンコードを実行するメソッドも Unicode 文字に変換し、 `00A0` に `&nbsp;`します。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> でエンコードされたマークアップを書き込みます `&lt;custID&gt; &amp; &lt;invoice#&gt;` 出力ストリームにします。<xref:System.Web.UI.HtmlTextWriter.WriteBreak%2A> メソッド書き込み `<br />`します。  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter\_Samples1\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#2)]
 [!code-vb[System.Web.UI.MarkupTextWriter\_Samples1\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrl">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrl (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrl(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">エンコードして出力ストリームに書き込む URL 文字列。</param>
        <summary>指定された URL をエンコードしてから、出力ストリームに書き込みます。 URL にはパラメーターが含まれている場合があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> メソッドは、文字列で、 `url` パラメーターを URL エンコード仕様に従っています。 疑問符 \(?\) 区切り記号に続くパラメーターはエンコードされません。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> メソッドで、次の出力が生成されます。  
  
 `http://localhost/Sample%20Folder/Sample%20%2b%20File.txt`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter\_Samples1\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#3)]
 [!code-vb[System.Web.UI.MarkupTextWriter\_Samples1\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedUrlParameter">
      <MemberSignature Language="C#" Value="public virtual void WriteEncodedUrlParameter (string urlText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEncodedUrlParameter(string urlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlText">エンコードして出力ストリームに書き込む URL パラメーター文字列。</param>
        <summary>要求元のデバイスに対して指定された URL パラメーターをエンコードし、それを出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 URL のパラメーターの一部に含まれるスペース、正符号 \(\+\) としてエンコードされており、等号 \(\=\) としてエンコード `%3d`します。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> メソッドで、次の出力が生成されます。  
  
 `ID%3dCity+State`  
  
 [!code-csharp[System.Web.UI.MarkupTextWriter\_Samples1\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/CS/stringencoder.cs#4)]
 [!code-vb[System.Web.UI.MarkupTextWriter\_Samples1\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.markuptextwriter_samples1/VB/stringencoder.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEndTag">
      <MemberSignature Language="C#" Value="public virtual void WriteEndTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteEndTag(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">終了タグの書き込み先の要素。</param>
        <summary>タブ空白文字と、指定したマークアップ要素の終了タグを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 異なり、 <xref:System.Web.UI.HtmlTextWriter.RenderEndTag%2A> 、メソッド、 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> メソッドは、対応する開始タグと一致する要素の終了タグを作成するためのロジックを持ちません。  
  
   
  
## 例  
 次のコード例に示しますレンダリング、 `<img>` 要素。 コード例では、次の手順を使用します。  
  
-   呼び出し、 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> 要素の開始文字を表示するメソッドです。  
  
-   2 つのオーバー ロードを呼び出して、 <xref:System.Web.UI.HtmlTextWriter.WriteAttribute%2A> メソッドに属性を書き込む、 `<img>` 要素。  
  
-   呼び出し、 <xref:System.Web.UI.HtmlTextWriter.WriteEndTag%2A> を終了するメソッド、 `<img>` 要素。  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter\#5](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#5)]
 [!code-csharp[System.Web.UI.HtmlTextWriter\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.HtmlTextWriter\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.WriteAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteFullBeginTag">
      <MemberSignature Language="C#" Value="public virtual void WriteFullBeginTag (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullBeginTag(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteFullBeginTag(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">出力ストリームに書き込む要素。</param>
        <summary>タブ空白文字と、指定したマークアップ要素の開始タグを出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> メソッドに自動的に右山かっこ \(\>\) の書き込みでは、要素の開始タグとは異なり、 <xref:System.Web.UI.HtmlTextWriter.WriteBeginTag%2A> メソッドで、その閉じ角かっこは書き込まれません。 使用 <xref:System.Web.UI.HtmlTextWriter.WriteFullBeginTag%2A> マークアップ要素の属性がないためです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteBeginTag(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データを書き込む、 <see cref="T:System.Web.UI.HtmlTextWriter" /> オーバー ロードされたパラメーターで指定された出力ストリームに続けて行終端文字列。 このメソッドのすべてのバージョンでは、出力ストリームに、保留中のタブの空白文字を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>行終端文字列を出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。 詳細については、「<xref:System.IO.TextWriter.WriteLine%2A>」を参照してください。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 後の行を挿入するメソッド、 `<img>` 要素が表示されます。  
  
 [!code-cpp[System.Web.UI.HtmlTextWriter\#3](~/samples/snippets/cpp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CPP/htmltextwriter.cpp#3)]
 [!code-csharp[System.Web.UI.HtmlTextWriter\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/CS/htmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.HtmlTextWriter\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlTextWriter/VB/htmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込むブール値。</param>
        <summary>保留中のタブ空白文字と行終端文字列を出力ストリームに続けて、ブール値のテキスト表現を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込む文字。</param>
        <summary>保留中のタブ空白文字と Unicode の文字の後に、行終端文字列を出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">出力ストリームに書き込む文字配列。</param>
        <summary>保留中のタブ空白文字と Unicode の文字を出力ストリームの行終端文字列の配列を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初の例では、配列を作成する方法を示しています。 2 番目の例では、その配列を使用する方法を示しています。  
  
 これらのコード例では、次のマークアップを生成します。  
  
 `<label>`  
  
 `hello world`  
  
 `</label>`  
  
 次のコード例は、詳しく文字の配列を作成する方法を示しています。 `hello world`します。 配列に含まれるが、 <xref:System.Web.UI.HtmlTextWriter.SpaceChar> フィールドには、2 つの単語の間にスペースを作成します。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter\_Methods2\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 次のコード例での表示、 `hello world` 文字配列を使用して、前の例で作成された、 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> メソッドです。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#5)]
 [!code-vb[MarkupTextWriter\_Methods2\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込む倍精度浮動小数点数。</param>
        <summary>保留中のタブ空白文字と行終端文字列を出力ストリームに続けて、倍精度浮動小数点数のテキスト表現を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> の値を表示するメソッド、 <xref:System.Double.MaxValue?displayProperty=fullName> フィールドです。  
  
 このコード例は、次のマークアップを生成します。  
  
 `<label>`  
  
 `1.79769313486232E+308`  
  
 `</label>`  
  
 [!code-csharp[MarkupTextWriter\_Methods1\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#3)]
 [!code-vb[MarkupTextWriter\_Methods1\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込む 32 バイトの符号付き整数。</param>
        <summary>保留中のタブ空白文字と行終端文字列を出力ストリームに続けて、32 ビット符号付き整数のテキスト表現を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込む 64 バイトの符号付き整数。</param>
        <summary>保留中のタブ空白文字と行終端文字列を出力ストリームに続いて、64 ビット符号付き整数のテキスト表現を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込むオブジェクト。</param>
        <summary>保留中のタブ空白文字と行終端文字列を出力ストリームの前に、オブジェクトのテキスト表現を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> の値を表示するメソッド、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> プロパティをコントロールします。  
  
 [!code-csharp[MarkupTextWriter\_Methods1\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#4)]
 [!code-vb[MarkupTextWriter\_Methods1\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込む単精度浮動小数点数。</param>
        <summary>保留中のタブ空白文字と行終端文字列を出力ストリームに続けて、単精度浮動小数点数のテキスト表現を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> の値を表示するメソッド、 <xref:System.Single.Epsilon?displayProperty=fullName> 最小有効値は、フィールドの <xref:System.Single> 構造体。  
  
 このコード例は、次のマークアップを生成します。  
  
 `<b>`  
  
 `1.401298E-45`  
  
 `</b>`  
  
 [!code-csharp[MarkupTextWriter\_Methods1\#9](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#9)]
 [!code-vb[MarkupTextWriter\_Methods1\#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">出力ストリームに書き込む文字列。</param>
        <summary>保留中のタブ空白文字と行終端文字列を出力ストリームに続く文字列を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.UInt32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">出力ストリームに書き込む 4 バイト符号なし整数。</param>
        <summary>保留中のタブ空白文字と行終端文字列を出力ストリームに続けて、4 バイト符号なし整数のテキスト表現を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Int64)" />
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">0 個以上の書式項目を含む文字列。</param>
        <param name="arg0">書式指定するオブジェクト。</param>
        <summary>保留中のタブ空白文字と行終端文字列を出力ストリームの前に、オブジェクトのテキスト表現を含む書式設定された文字列を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> メソッドと同じセマンティクスを使用して、 <xref:System.String.Format%28System.String%2CSystem.Object%29> メソッドです。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> の値を持つ書式設定された文字列を表示するメソッド、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティです。  
  
 [!code-csharp[MarkupTextWriter\_Methods1\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#1)]
 [!code-vb[MarkupTextWriter\_Methods1\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">0 個以上の書式項目を含む文字列。</param>
        <param name="arg">書式を設定するオブジェクト配列。</param>
        <summary>保留中のタブ空白文字と行終端文字列を出力ストリームに続いて、オブジェクトの配列のテキスト表現を含む書式設定された文字列を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> メソッドと同じセマンティクスを使用して、 <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> メソッドです。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` メソッドです。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初の例では、文字列と配列を出力ストリームに出力する方法を示しています。 2 つ目は、配列を宣言する方法を示します。  
  
 次のコード例では、使用して、 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 書式設定された文字列とオブジェクトの配列を出力ストリームの内容を表示するメソッドです。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#2)]
 [!code-vb[MarkupTextWriter\_Methods2\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#2)]  
  
 次のコード例では、前のコード例では、レンダリングされたオブジェクトの配列を宣言する方法を示します。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#7)]
 [!code-vb[MarkupTextWriter\_Methods2\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">元のテキストを出力ストリームに書き込む文字配列。</param>
        <param name="index">書き込みを開始する文字配列内の位置。</param>
        <param name="count">出力ストリームに書き込む配列内の文字の数。</param>
        <summary>保留中のタブ空白文字と Unicode の文字を出力ストリームの行終端文字列の部分配列を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。[WriteLine メソッド \(Char\<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初の例では、文字配列を作成する方法を示しています。 2 番目の例では、この配列を使用する方法を示しています。  
  
 これらのコード例では、次のマークアップを生成します。  
  
 `<label>`  
  
 `hello`  
  
 `</label>`  
  
 次のコード例は、略語は文字の配列を作成する方法を示します `hello world`します。 配列に含まれるが、 [WriteLine メソッド \(Char\<xref:System.Web.UI.HtmlTextWriter.SpaceChar> フィールドには、2 つの単語の間にスペースを作成します。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#6)]
 [!code-vb[MarkupTextWriter\_Methods2\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#6)]  
  
 次のコード例では、 `index` と `count` のパラメーター、 [WriteLine メソッド \(Char\<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 前のコード例で作成された配列の最初の 5 文字を表示するメソッドです。  
  
 [!code-csharp[MarkupTextWriter\_Methods2\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods2/CS/displaylabelsline.cs#4)]
 [!code-vb[MarkupTextWriter\_Methods2\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods2/VB/displaylabelsline.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">0 個以上の書式項目を含む文字列。</param>
        <param name="arg0">書式指定するオブジェクト。</param>
        <param name="arg1">書式指定するオブジェクト。</param>
        <summary>保留中のタブ空白文字と行終端文字列を出力ストリームに続く 2 つのオブジェクトのテキスト表現を含む書式設定された文字列を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> メソッドと同じセマンティクスを使用して、 <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> メソッドです。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 書式設定された文字列との値を表示するメソッド、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> プロパティおよび <xref:System.DateTime.Today%2A> プロパティです。  
  
 [!code-csharp[MarkupTextWriter\_Methods1\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/MarkupTextWriter_Methods1/CS/boldedrendering.cs#2)]
 [!code-vb[MarkupTextWriter\_Methods1\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/MarkupTextWriter_Methods1/VB/boldedrendering.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineNoTabs">
      <MemberSignature Language="C#" Value="public void WriteLineNoTabs (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLineNoTabs(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteLineNoTabs(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">出力ストリームに書き込む文字列。</param>
        <summary>出力ストリームに行終端文字列を続けて、文字列を書き込みます。 このメソッドは、指定したタブ空白文字を無視します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlTextWriter.WriteLineNoTabs%2A> メソッドではなく、 <xref:System.Web.UI.HtmlTextWriter.WriteLine%2A> 事前レンダリングされた文字列タブ空白文字を表示したくない場合は、メソッド `s`します。  
  
 既定の行終端記号の文字列は、キャリッジ リターンとライン フィード \("\\r\\n"\) です。<xref:System.IO.TextWriter.WriteLine%2A> 基本メソッドは、書き込みに使用される、 `value` パラメーター。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlTextWriter.NewLine" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">出力ストリームに書き込むスタイル属性。</param>
        <param name="value">スタイル属性に割り当てられた値。</param>
        <summary>指定したスタイル属性を出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> メソッドは、次の形式でスタイル属性を書き込みます。  
  
 `name` `=` `value` `;`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
      </Docs>
    </Member>
    <Member MemberName="WriteStyleAttribute">
      <MemberSignature Language="C#" Value="public virtual void WriteStyleAttribute (string name, string value, bool fEncode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStyleAttribute(string name, string value, bool fEncode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteStyleAttribute(System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fEncode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">出力ストリームに書き込むスタイル属性。</param>
        <param name="value">スタイル属性に割り当てられた値。</param>
        <param name="fEncode">
          <see langword="true" /> スタイル属性とその割り当てられた値をエンコードするにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>指定したスタイルの属性と値を出力ストリームに出力し、指定されている場合に、値をエンコードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.WriteStyleAttribute%2A> メソッドは、次の形式でスタイル属性を書き込みます。  
  
 `name` `=` `value` `;`  
  
 <xref:System.Web.HttpUtility.HtmlAttributeEncode%2A> メソッドのエンコードが使用される、 `value` パラメーター。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="Overload:System.IO.TextWriter.Write" />
        <altmember cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="WriteUrlEncodedString">
      <MemberSignature Language="C#" Value="protected void WriteUrlEncodedString (string text, bool argument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void WriteUrlEncodedString(string text, bool argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="argument" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">エンコードして出力ストリームに書き込む文字列。</param>
        <param name="argument">
          <see langword="true" /> URL のパラメーターのセクションの一部として文字列をエンコードするには <see langword="false" /> URL のパス セクションの一部として文字列をエンコードします。</param>
        <summary>URL の要件に従ってエンコードして、指定した文字列を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> メソッドは、URL の区切り記号と見なすことの文字をエンコード \(の設定に依存する `argument`\) 形式の文字列に `%``xx`, ASCII コードがより小さい 128、それ以外の場合、 `%u``xxxx`, ここで、 `x` 16 進数の数字です。  
  
 <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrl%2A> と <xref:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter%2A> メソッドを使用して、 <xref:System.Web.UI.HtmlTextWriter.WriteUrlEncodedString%2A> ユーティリティ メソッドとしてメソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrl(System.String)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.WriteEncodedUrlParameter(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.HtmlTextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>スタイル属性とその値を出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AddAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したマークアップ属性と値の要素の開始タグを追加する、 <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトを作成する後続の呼び出しで、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsStyleAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>次の呼び出し中にマークアップのスタイル属性を表示するかどうかを決定、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ExitStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたレイアウトと文字の書式設定を終了するマークアップ要素の終了タグを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RenderBeginTag">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>マークアップ要素の開始タグを出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>マークアップ属性とその値を出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AddStyleAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>マークアップを追加属性を要素の開始タグをスタイル、 <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトを作成する後続の呼び出しで、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsAttributeDefined">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>次の呼び出し中に指定したマークアップ属性とその値が表示されるかどうかを判断、 <see cref="Overload:System.Web.UI.HtmlTextWriter.RenderBeginTag" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたデータ型を保留中のタブの空白文字と共に、出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="EnterStyle">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したスタイルの文字の書式設定とレイアウトを実装する属性を含むマークアップ要素の開始タグを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="EncodeAttributeValue">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>要件に基づいて、指定したマークアップ属性の値をエンコード、 <see cref="T:System.Web.HttpRequest" /> 、現在のコンテキストのオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>