<Type Name="IChannelFactory&lt;TChannel&gt;" FullName="System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt;">
  <TypeSignature Language="C#" Value="public interface IChannelFactory&lt;TChannel&gt; : System.ServiceModel.Channels.IChannelFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IChannelFactory`1&lt;TChannel&gt; implements class System.ServiceModel.Channels.IChannelFactory, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IChannelFactory`1" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TChannel" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannelFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TChannel">チャネル ファクトリが作成するチャネルの型。</typeparam>
    <summary>種類に固有のチャネルを作成するためにチャネル ファクトリが実装する必要があるインターフェイスを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceModel.Channels.IChannelFactory%601> コントラクトを実装することで、その都度チャネルの種類を指定することなく、特定の種類の複数のチャネルを作成することができます。 つまり、<xref:System.ServiceModel.Channels.IChannelFactory%601> インターフェイスを実装するチャネル ファクトリのジェネリック パラメーターとしてチャネルの種類を定義することは、<xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%2A> のメソッドに種類を渡す必要がないことを意味します。 異なる種類のチャネルを作成する必要がある場合は、必要なチャネルの種類ごとに別のチャネル ファクトリを作成できます。<xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> のオーバーロードにより、メッセージが最初に送信されるアドレスと、最終的な宛先を区別することができます。 アドレス指定については、「[Addresses](http://msdn.microsoft.com/ja-jp/13f269e3-ebb1-433c-86cf-54fbd866a627)」を参照してください。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateChannel">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したエンドポイント アドレスへの指定した種類のチャネルを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メッセージの最初の送信先アドレスと最後の宛先アドレスを区別することが手動ルーティングで必要な場合、<xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> オーバーロードを使用します。 チャネル ファクトリを閉じると、そのチャネル ファクトリで作成されたチャネルも閉じられることに注意してください。 アドレス指定については、「[Addresses](http://msdn.microsoft.com/ja-jp/13f269e3-ebb1-433c-86cf-54fbd866a627)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateChannel">
      <MemberSignature Language="C#" Value="public TChannel CreateChannel (System.ServiceModel.EndpointAddress to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TChannel CreateChannel(class System.ServiceModel.EndpointAddress to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="to" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="to">サービスの場所を提供する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
        <summary>指定したエンドポイント アドレスへの指定した種類のチャネルを作成します。</summary>
        <returns>指定したエンドポイント アドレスへの <paramref name="TChannel" /> 型のチャネル。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use the <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> overload to distinguish the address to which the message is initially sent from the ultimate destination when you want to do manual routing. Note that any channels created by this channel factory are closed when the channel factory is closed.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChannel">
      <MemberSignature Language="C#" Value="public TChannel CreateChannel (System.ServiceModel.EndpointAddress to, Uri via);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TChannel CreateChannel(class System.ServiceModel.EndpointAddress to, class System.Uri via) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="to" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="via" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="to">サービスの場所を提供する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
        <param name="via">メッセージの送信先のトランスポート アドレスを格納している <see cref="T:System.Uri" />。</param>
        <summary>チャネルの種類と、メッセージの送信先のエンドポイント アドレスとトランスポート アドレスを指定して、チャネルを作成します。</summary>
        <returns>指定したエンドポイント アドレスとトランスポート アドレスへの <paramref name="TChannel" /> 型のチャネル。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The transport address specified by the **parameterReference tag is not supported!!!!**  
 is the location to which a message should initially be sent on its way to some other remote address specified by the **parameterReference tag is not supported!!!!**  
 at which the service is located. In most Internet scenarios, the **parameterReference tag is not supported!!!!**  
 URI is the same as the <xref:System.ServiceModel.EndpointAddress.Uri%2A> of the final **parameterReference tag is not supported!!!!**  
 address of the service. You only distinguish between these two addresses when you want to do some kind of manual routing. Note that any channels created by this channel factory are closed when the channel factory is closed. For a discussion of addressing, see the [Addresses](http://msdn.microsoft.com/ja-jp/13f269e3-ebb1-433c-86cf-54fbd866a627) topic.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>