<Type Name="WebMessageEncodingBindingElement" FullName="System.ServiceModel.Channels.WebMessageEncodingBindingElement">
  <TypeSignature Language="C#" Value="public sealed class WebMessageEncodingBindingElement : System.ServiceModel.Channels.MessageEncodingBindingElement, System.ServiceModel.Description.IWsdlExportExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WebMessageEncodingBindingElement extends System.ServiceModel.Channels.MessageEncodingBindingElement implements class System.ServiceModel.Description.IWsdlExportExtension" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.WebMessageEncodingBindingElement" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Web</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Channels.MessageEncodingBindingElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Description.IWsdlExportExtension</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Windows Communication Foundation (WCF) バインディングで使用されるときに、プレーンテキストの XML、JSON \(JavaScript Object Notation\) メッセージ エンコーディング、および "生の" バイナリ コンテンツの読み取りと書き込みができるようにします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 エンコーディングは、メッセージをバイト シーケンスに変換するプロセスです。 デコードは、その逆のプロセスです。 これらのプロセスでは、文字エンコーディングの指定が必要です。<xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement> は、プレーンテキストの XML と JSON エンコーディング、および "生の" バイナリ データの処理を、一連の内部エンコーダーに代行させることで機能します。 この委任は、複合メッセージ エンコーダーによって実行されます。  
  
 このバインディング要素と複合エンコーダーは、<xref:System.ServiceModel.WebHttpBinding> によって使用される SOAP メッセージを使用しないシナリオでのエンコーディングを制御するために使用されます。 これらのシナリオには、POX \("Plain Old XML"\)、REST \(Representational State Transfer\)、RSS \(Really Simple Syndication\) と Atom 配信、および AJAX \(Asynchronous JavaScript and XML\) が含まれます。 複合メッセージ エンコーダーは SOAP または WS\-Addressing をサポートしないため、<xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.MessageVersion%2A> は常に <xref:System.ServiceModel.Channels.MessageVersion.None%2A> を返します。  
  
 バインディング要素は、構築時に、<xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.%23ctor%28System.Text.Encoding%29> コンストラクターを使用し、書き込みの文字エンコーディングを使用して設定できます。<xref:System.Text.Encoding> 値は、JSON およびテキスト形式の XML の場合の書き込みの動作を指定します。 読み取りについては、任意の有効なメッセージ エンコーディングとテキスト エンコーディングが認識されます。  
  
 このコンストラクターは、プールに割り当てられており、それぞれ、新しいリーダーおよびライターを割り当てずに受信および送信メッセージを処理できるリーダーおよびライターの最大数の既定値を設定します。 プロパティ <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.MaxReadPoolSize%2A> と <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.MaxWritePoolSize%2A> を使用して、割り当てられるリーダーおよびライターの最大数をそれぞれ設定することもできます。 既定では、64 のリーダーと 16 のライターが割り当てられています。  
  
 既定の複雑さの制約も、<xref:System.Xml.XmlDictionaryReaderQuotas> プロパティによってこのエンコーディングと関連付けられている <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.ReaderQuotas%2A> でこのコンストラクターによって設定され、メッセージの複雑さを使用してエンドポイント処理リソースを停滞させるサービス拒否 \(DOS\) 型の攻撃から保護します。  
  
 <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement> は、メッセージ エンコーダー ファクトリを作成する <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.CreateMessageEncoderFactory%2A> メソッドを持っています。メッセージ エンコーダー ファクトリは、指定されたコンテンツ タイプに応じて、JSON、XML または Raw メッセージのデコーダーおよびエンコーダーを適切に作成します。  
  
 <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement> は、HTTP 要求が通過するチャネルのファクトリおよびリスナーを構築するメソッドも提供します。  
  
 複合エンコーダーおよびその関連クラスと構成コンポーネントは部分信頼で使用でき、使用する場合に、特別なアクセス許可は必要ありません。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebMessageEncodingBindingElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.WebMessageEncodingBindingElement.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ServiceModel.Channels.WebMessageEncodingBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンストラクターは、既定の文字エンコーディングとして <xref:System.Text.UTF8Encoding> を使用します。 そのため、この文字エンコーディングを使用する場合は、このコンストラクターを使用します。 別の文字エンコーディングを使用する場合は、<xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.%23ctor%28System.Text.Encoding%29> コンストラクターを使用します。  
  
 このコンストラクターは、プールに割り当てられており、それぞれ、新しいリーダーおよびライターを割り当てずに受信および送信メッセージを処理できるリーダーおよびライターの最大数の既定値を設定します。 既定では、<xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.MaxReadPoolSize%2A> プロパティでは 64 リーダー、<xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.MaxWritePoolSize%2A> プロパティでは 16 ライターが割り当てられています。  
  
 既定の複雑さの制約も、<xref:System.Xml.XmlDictionaryReaderQuotas> プロパティによってこのメッセージ エンコーディングと関連付けられている <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.ReaderQuotas%2A> でこのコンストラクターによって設定され、メッセージの複雑さを使用してエンドポイント処理リソースを停滞させるサービス拒否 \(DOS\) 型の攻撃から保護します。 これらの制約とその既定値 \(バイト単位\) を公開するプロパティを次に示します。  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A> \= 32  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength%2A> \= 8192  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength%2A> \= 16384  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead%2A> \= 4096  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxNameTableCharCount%2A> \= 16384  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebMessageEncodingBindingElement (System.Text.Encoding writeEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Text.Encoding writeEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.WebMessageEncodingBindingElement.#ctor(System.Text.Encoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writeEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="writeEncoding">メッセージでの文字の書き込みに使用される <see cref="T:System.Text.Encoding" />。</param>
        <summary>書き込みの文字エンコーディングを指定して、<see cref="T:System.ServiceModel.Channels.WebMessageEncodingBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サポートされているエンコーディングは、UTF\-8、Unicode、および Big\-Endian Unicode です。 別のテキスト エンコーディングを指定すると、<xref:System.ArgumentException> がスローされます。  
  
 このコンストラクターは、プールに割り当てられており、それぞれ、新しいリーダーおよびライターを割り当てずに受信および送信メッセージを処理できるリーダーおよびライターの最大数の既定値を設定します。 既定では、<xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.MaxReadPoolSize%2A> プロパティでは 64 リーダー、<xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.MaxWritePoolSize%2A> プロパティでは 16 ライターが割り当てられています。  
  
 既定の複雑さの制約も、<xref:System.Xml.XmlDictionaryReaderQuotas> プロパティによってこのメッセージ エンコーディングと関連付けられている <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.ReaderQuotas%2A> でこのコンストラクターによって設定され、メッセージの複雑さを使用してエンドポイント処理リソースを停滞させるサービス拒否 \(DOS\) 型の攻撃から保護します。 これらの制約とその既定値 \(バイト単位\) を公開するプロパティを次に示します。  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A> \= 32  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength%2A> \= 8192  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength%2A> \= 16384  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead%2A> \= 4096  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxNameTableCharCount%2A> \= 16384  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writeEncoding" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="writeEncoding" /> は、サポートされているメッセージ テキスト エンコーディングではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BuildChannelFactory&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt; BuildChannelFactory&lt;TChannel&gt; (System.ServiceModel.Channels.BindingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.IChannelFactory`1&lt;!!TChannel&gt; BuildChannelFactory&lt;TChannel&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.WebMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel">チャネル ファクトリが作成するチャネルの種類。</typeparam>
        <param name="context">チャネルの <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
        <summary>指定したコンテキストに対して指定した種類のチャネルを作成するチャネル ファクトリ スタックをクライアント上に作成します。</summary>
        <returns>指定したコンテキストの <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> 型の <paramref name="TChannel" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定値が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="BuildChannelListener&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.IChannelListener&lt;TChannel&gt; BuildChannelListener&lt;TChannel&gt; (System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.IChannelListener`1&lt;!!TChannel&gt; BuildChannelListener&lt;class (class System.ServiceModel.Channels.IChannel) TChannel&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.WebMessageEncodingBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.IChannelListener&lt;TChannel&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel">チャネル リスナーが受け入れるチャネルの種類。</typeparam>
        <param name="context">リスナーの <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
        <summary>指定したコンテキストに対する、指定した種類のチャネルを受け入れるチャネル リスナー スタックをクライアント上に作成します。</summary>
        <returns>指定したコンテキストの <see cref="T:System.ServiceModel.Channels.IChannelListener`1" /> 型の <paramref name="TChannel" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定値が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanBuildChannelListener&lt;TChannel&gt;">
      <MemberSignature Language="C#" Value="public override bool CanBuildChannelListener&lt;TChannel&gt; (System.ServiceModel.Channels.BindingContext context) where TChannel : class, System.ServiceModel.Channels.IChannel;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanBuildChannelListener&lt;class (class System.ServiceModel.Channels.IChannel) TChannel&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.WebMessageEncodingBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TChannel">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="TChannel">チャネル リスナーが受け入れるチャネルの種類。</typeparam>
        <param name="context">リスナーの <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
        <summary>指定した種類のチャネルとコンテキストに対するリスナーを現在のバインディングが作成できるかどうかを示す値を返します。</summary>
        <returns>指定したチャネル リスナー スタックをサービスで作成できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.BindingElement Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.BindingElement Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.WebMessageEncodingBindingElement.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.BindingElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新しい <see cref="T:System.ServiceModel.Channels.WebMessageEncodingBindingElement" /> オブジェクトを作成し、現在のオブジェクトを使用して初期化します。</summary>
        <returns>現在の要素と同じプロパティ値が設定された <see cref="T:System.ServiceModel.Channels.WebMessageEncodingBindingElement" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This creates a complete copy of the current binding element object tree, also called a deep clone. A deep clone of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object. This is called copying the entire object graph. Returning a deep clone enables the runtime to support the case in which multiple custom bindings share a custom binding element. If a deep clone is not returned, the run\-time behavior is undefined. A shallow clone of an object, by contrast, is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects; instead, it copies only the references to the original objects.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentTypeMapper">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.WebContentTypeMapper ContentTypeMapper { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Channels.WebContentTypeMapper ContentTypeMapper" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.WebMessageEncodingBindingElement.ContentTypeMapper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.WebContentTypeMapper</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>受信メッセージのコンテンツ タイプを形式にマップする方法を取得または設定します。</summary>
        <value>受信メッセージのコンテンツ タイプの形式を示す <see cref="T:System.ServiceModel.Channels.WebContentTypeMapper" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageEncoderFactory">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.MessageEncoderFactory CreateMessageEncoderFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.Channels.MessageEncoderFactory CreateMessageEncoderFactory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.WebMessageEncodingBindingElement.CreateMessageEncoderFactory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.MessageEncoderFactory</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>JSON \(JavaScript Object Notation\) または XML メッセージを書き込めるメッセージ エンコーダーを作成する、メッセージ エンコーダー ファクトリを作成します。</summary>
        <returns>JSON、XML、または "生の" バイナリ メッセージをエンコードする <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The value of the <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.WriteEncoding%2A> property determines the character encoding used to write the message.  
  
 The maximum number of readers and writers that are allocated to pools and that is respectively available to process incoming and outgoing messages without allocating new readers are specified by the <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.MaxReadPoolSize%2A> and <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.MaxWritePoolSize%2A> properties.  
  
 The default complexity constraints that are used by the message encoders produced by the <xref:System.ServiceModel.Channels.MessageEncoderFactory> can be obtained from the <xref:System.Xml.XmlDictionaryReaderQuotas> associated with this encoding by the <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.ReaderQuotas%2A> property to protect against a class of denial of service \(DOS\) attacks that attempt to use message complexity to tie up endpoint processing resources.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossDomainScriptAccessEnabled">
      <MemberSignature Language="C#" Value="public bool CrossDomainScriptAccessEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CrossDomainScriptAccessEnabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.WebMessageEncodingBindingElement.CrossDomainScriptAccessEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドメイン間スクリプト アクセスが有効かどうかを決定する値を取得または設定します。</summary>
        <value>
          <see langword="true" /> かどうかはドメイン間スクリプト アクセスが有効です。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public override T GetProperty&lt;T&gt; (System.ServiceModel.Channels.BindingContext context) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!T GetProperty&lt;class T&gt;(class System.ServiceModel.Channels.BindingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.WebMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.Channels.BindingContext" />
      </Parameters>
      <Docs>
        <typeparam name="T">メソッドが照会している、型指定されたオブジェクト。</typeparam>
        <param name="context">現在のバインディング要素の <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
        <summary>チャネル スタックの適切な層から、要求された型のオブジェクトがある場合はそれを返します。ない場合は <see langword="null" /> を返します。</summary>
        <returns>要求される型指定されたオブジェクト <paramref name="T" /> がある場合は、そのオブジェクト。ない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバーライドは、基本の <xref:System.ServiceModel.Channels.MessageEncodingBindingElement.GetProperty%60%601%28System.ServiceModel.Channels.BindingContext%29> 実装に 1 つのプロパティを追加します。`T` が <xref:System.Xml.XmlDictionaryReaderQuotas> の場合は、<xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.ReaderQuotas%2A> プロパティが返されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定されている <paramref name="context" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxReadPoolSize">
      <MemberSignature Language="C#" Value="public int MaxReadPoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxReadPoolSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.WebMessageEncodingBindingElement.MaxReadPoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プールに割り当てられており、新しいリーダーを割り当てずに受信メッセージを処理できるリーダーの最大数を指定する値を取得または設定します。</summary>
        <value>受信メッセージを処理できるリーダーの最大数。 既定値はそれぞれの種類で 64 リーダーです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この数を増やすとメモリの消費量が増えますが、受信メッセージ数の急激な増加にエンコーダーが対処できるようになります。これは、作成済みのリーダーをプールから使用でき、新しいリーダーを作成する必要がないためです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値が 0 以下です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxWritePoolSize">
      <MemberSignature Language="C#" Value="public int MaxWritePoolSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxWritePoolSize" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.WebMessageEncodingBindingElement.MaxWritePoolSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プールに割り当てられており、新しいライターを割り当てずに送信メッセージを処理できるライターの最大数を指定する値を取得または設定します。</summary>
        <value>送信メッセージを処理できるライターの最大数。 既定値はそれぞれの種類で 16 ライターです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この数を増やすとメモリの消費が増えますが、送信メッセージ数の急激な増加にエンコーダーが対処できるようになります。これは、作成済みのライターをプールから使用でき、新しいライターを作成する必要がないためです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値が 0 以下です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MessageVersion">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.Channels.MessageVersion MessageVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Channels.MessageVersion MessageVersion" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.WebMessageEncodingBindingElement.MessageVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.MessageVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインド要素が SOAP または WS\-Addressing を使用しないことを示すメッセージのバージョンを取得または設定します。</summary>
        <value>
          <see cref="P:System.ServiceModel.Channels.MessageVersion.None" />
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 JSON メッセージ エンコーディングは SOAP または WS\-Addressing のいずれもサポートしません。<xref:System.ServiceModel.Channels.MessageVersion.None%2A> には <xref:System.ServiceModel.EnvelopeVersion.None%2A> および <xref:System.ServiceModel.Channels.AddressingVersion.None%2A> が含まれており、それぞれこの非サポートを指定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">設定値が <see langword="null" /> または <see cref="P:System.ServiceModel.Channels.MessageVersion.None" /> のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReaderQuotas">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDictionaryReaderQuotas ReaderQuotas" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.WebMessageEncodingBindingElement.ReaderQuotas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReaderQuotas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このバインディングを使用して設定されるエンドポイントにより処理可能な、SOAP メッセージの複雑さに対する制約を取得します。</summary>
        <value>交換される SOAP メッセージに対する複雑さの制約を指定する <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。 これらの制約の既定値については、後の「解説」で説明します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複雑さの制約は、メッセージの複雑さを使用してエンドポイント処理リソースを停滞させるサービス拒否 \(DOS\) 型の攻撃から保護します。 これらの制約とその既定値 \(バイト単位\) を公開するプロパティを次に示します。  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A> \= 32  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength%2A> \= 8192  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength%2A> \= 16384  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead%2A> \= 4096  
  
-   <xref:System.Xml.XmlDictionaryReaderQuotas.MaxNameTableCharCount%2A> \= 16384  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定値が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IWsdlExportExtension.ExportContract">
      <MemberSignature Language="C#" Value="void IWsdlExportExtension.ExportContract (System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlContractConversionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(class System.ServiceModel.Description.WsdlExporter exporter, class System.ServiceModel.Description.WsdlContractConversionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.WebMessageEncodingBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exporter" Type="System.ServiceModel.Description.WsdlExporter" />
        <Parameter Name="context" Type="System.ServiceModel.Description.WsdlContractConversionContext" />
      </Parameters>
      <Docs>
        <param name="exporter">コントラクト情報をエクスポートする <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
        <param name="context">エクスポートされた WSDL 要素からコントラクトの説明へのマッピングを提供する <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" /> オブジェクト。</param>
        <summary>バインド要素に格納されているエンコーディング ポリシーから WSDL コントラクト情報を生成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement> は、WSDL 内のメッセージ バージョンに関する情報を設定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint">
      <MemberSignature Language="C#" Value="void IWsdlExportExtension.ExportEndpoint (System.ServiceModel.Description.WsdlExporter exporter, System.ServiceModel.Description.WsdlEndpointConversionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(class System.ServiceModel.Description.WsdlExporter exporter, class System.ServiceModel.Description.WsdlEndpointConversionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.WebMessageEncodingBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exporter" Type="System.ServiceModel.Description.WsdlExporter" />
        <Parameter Name="context" Type="System.ServiceModel.Description.WsdlEndpointConversionContext" />
      </Parameters>
      <Docs>
        <param name="exporter">コントラクト情報をエクスポートする <see cref="T:System.ServiceModel.Description.WsdlExporter" />。</param>
        <param name="context">エクスポートされた WSDL 要素からエンドポイントの説明へのマッピングを提供する <see cref="T:System.ServiceModel.Description.WsdlContractConversionContext" /> オブジェクト。</param>
        <summary>バインド要素に格納されているエンコーディング ポリシーから WSDL コントラクト情報を生成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement> は、WSDL 内のメッセージ バージョンに関する情報を設定します。 これでは、 <xref:System.ServiceModel.Channels.WebMessageEncodingBindingElement.System%23ServiceModel%23Description%23IWsdlExportExtension%23ExportEndpoint%28System.ServiceModel.Description.WsdlExporter%2CSystem.ServiceModel.Description.WsdlEndpointConversionContext%29>メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="context" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding WriteEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding WriteEncoding" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.WebMessageEncodingBindingElement.WriteEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メッセージ テキストの書き込みに使用される文字エンコーディングを取得または設定します。</summary>
        <value>メッセージ テキストの書き込みに使用される文字エンコードを示す <see cref="T:System.Text.Encoding" />。 既定値は、<see cref="T:System.Text.UTF8Encoding" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定値が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.ServiceModel.Channels.WebMessageEncodingBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>