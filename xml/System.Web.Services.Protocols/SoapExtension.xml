<Type Name="SoapExtension" FullName="System.Web.Services.Protocols.SoapExtension">
  <TypeSignature Language="C#" Value="public abstract class SoapExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SoapExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapExtension" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ASP.NET を使用して作成された XML Web サービスの SOAP 拡張機能の基本クラスです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET では、機能拡張機構を使用してビルドする SOAP 関連のインフラストラクチャです。 ASP.NET の SOAP 拡張機能のアーキテクチャを検査またはメッセージ処理、クライアントまたはサーバーのいずれかの特定の段階でメッセージを変更する拡張機能を築いています。  
  
 派生して ASP.NET SOAP 拡張機能、 <xref:System.Web.Services.Protocols.SoapExtension> クラスです。<xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> と <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> メソッドはパフォーマンスを強化する SOAP 拡張機能を初期化するための代替手段を提供します。<xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> 定義されている各段階で、メソッドが呼び出されると、ほとんどの SOAP 拡張機能の中核は、 <xref:System.Web.Services.Protocols.SoapMessageStage>, 、その特定の SOAP 拡張機能の目的の動作を実行する SOAP 拡張機能を許可します。 SOAP 要求または SOAP 応答を変更する必要がある SOAP 拡張機能の <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> 、ネットワーク経由で送信される、提案されたデータを受信する機会を提供します。  
  
   
  
## 例  
 次 `TraceExtension` SOAP 拡張機能は、SOAP 要求と XML Web サービス メソッドに適用すると、指定したファイルへの SOAP 応答を出力します。 XML Web サービスで実行する次の SOAP 拡張機能をインストールする場合は、ASPNET ユーザー アカウントが、ログ ファイルが書き込まれるディレクトリに対する書き込みアクセス許可として必要です。  
  
 [!code-cpp[Classic SoapExtension Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    <altmember cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
    <altmember cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SoapExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.Services.Protocols.SoapExtension" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChainStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream ChainStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream ChainStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">SOAP 要求または応答を格納しているメモリ バッファー。</param>
        <summary>派生クラスでオーバーライドされた場合は、SOAP 要求または応答を格納しているメモリ バッファーに SOAP 拡張機能のアクセスを許可します。</summary>
        <returns>A <see cref="T:System.IO.Stream" /> この SOAP 拡張機能を変更できる、新しいメモリ バッファーを表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> により、優先度が高い SOAP 拡張機能が送信されるか、ネットワーク経由で返される SOAP メッセージに最も近いの実際のデータを変更できます。  
  
 SOAP 拡張機能の参照を保存する必要があります、 <xref:System.IO.Stream> に渡される <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> と <xref:System.IO.Stream> から返された <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A>です。 XML Web サービス メソッドを実行する SOAP 拡張機能が構成されている場合、 <xref:System.IO.Stream> に渡される <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> でシリアル化された SOAP 要求を含む、 <xref:System.Web.Services.Protocols.SoapMessageStage.BeforeDeserialize><xref:System.Web.Services.Protocols.SoapMessageStage>します。 同様に、 <xref:System.IO.Stream> から返される参照 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> に書き込まれるシリアル化が発生し、そのためにシリアル化された SOAP 応答を含む、 <xref:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize><xref:System.Web.Services.Protocols.SoapMessageStage>します。  
  
   
  
## 例  
 次の例では、両方を保存、 <xref:System.IO.Stream> に渡される <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> と <xref:System.IO.Stream> から返された <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> メンバー変数に `oldStream` と `newStream`, 、それぞれします。  
  
 [!code-cpp[Classic SoapExtension.ChainStream Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.ChainStream Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.ChainStream Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">SOAP 拡張機能を適用する XML Web サービスを実装するクラスの型。</param>
        <summary>派生クラスでオーバーライドされると、1 つに XML Web サービスを実装するクラスに固有のデータを初期化するために SOAP 拡張機能は、時間のパフォーマンスは低下します。</summary>
        <returns>
          <see cref="T:System.Object" /> SOAP 拡張機能は、キャッシュを初期化します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバー ロード <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> から呼び出されるを ASP.NET は、SOAP 拡張機能の指定方法によって異なります。 SOAP 拡張機能を指定するための 2 つの方法はあります。  
  
-   派生するカスタムの属性を適用 <xref:System.Web.Services.Protocols.SoapExtensionAttribute>, 、個々 の XML Web サービス メソッドにします。  
  
-   App.config または web.config 構成ファイル内の参照を追加します。  
  
 構成ファイルのいずれかへの参照を追加する場合は、その構成ファイルのスコープ内のすべての XML Web サービスの SOAP 拡張機能が実行されます。 ASP.NET を起動、構成ファイルを参照することで SOAP 拡張機能を指定する場合、 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> オーバー ロードに渡される、 <xref:System.Type>です。 拡張機能を指定すると、カスタム属性を適用することで、ASP.NET が呼び出さ、 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 内で渡された、 <xref:System.Web.Services.Protocols.LogicalMethodInfo> と <xref:System.Web.Services.Protocols.SoapExtensionAttribute>です。  
  
 SOAP 拡張機能を構成ファイルに追加する方法の詳細については、「 [&#91;\<topic:\/\/cpconconfigurationoptionsforaspnetwebservices\>&#93;](http://msdn.microsoft.com/ja-jp/1f0d71bc-8faa-4730-b500-2a6c7b5d4f6b)します。  
  
   
  
## 例  
 次のコードでは、SOAP 拡張機能の特定のデータを保存のいずれかの方法を示しています、XML Web サービスごとです。 SOAP 拡張機能を構成するには、属性ではなく構成ファイルを使用する場合、SOAP 拡張機能は、SOAP 拡張機能を適用する各クラスのデータを格納できます。 この例では、キャッシュに XML Web サービスを実装するクラスの名前に基づく XML Web サービス メソッド間で送受信する SOAP メッセージを記録するファイルの名前を保存します。 このコード例は、完全なコードの例で使用されている TraceExtension SOAP 拡張機能の一部、 <xref:System.Web.Services.Protocols.SoapExtension> クラスの概要です。  
  
 [!code-cpp[SoapExtension.GetInitializer\-Type\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/CPP/traceextension.cpp#1)]
 [!code-csharp[SoapExtension.GetInitializer\-Type\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/CS/traceextension.cs#1)]
 [!code-vb[SoapExtension.GetInitializer\-Type\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/VB/traceextension.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo, System.Web.Services.Protocols.SoapExtensionAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Web.Services.Protocols.LogicalMethodInfo methodInfo, class System.Web.Services.Protocols.SoapExtensionAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Web.Services.Protocols.LogicalMethodInfo" />
        <Parameter Name="attribute" Type="System.Web.Services.Protocols.SoapExtensionAttribute" />
      </Parameters>
      <Docs>
        <param name="methodInfo">A <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> SOAP 拡張機能を適用する XML Web サービス メソッドの特定の関数のプロトタイプを表します。</param>
        <param name="attribute">
          <see cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" /> XML Web サービス メソッドに適用します。</param>
        <summary>派生クラスでオーバーライドされると、1 つで XML Web サービス メソッドに適用する属性を使用して XML Web サービス メソッドに固有のデータを初期化するために SOAP 拡張機能は、時間のパフォーマンスは低下します。</summary>
        <returns>
          <see cref="T:System.Object" /> SOAP 拡張機能は、キャッシュを初期化します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 SOAP 拡張機能が構成ファイルを参照で構成されている場合、 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> を受け入れるオーバー ロード、 <xref:System.Type>です。  
  
 SOAP 拡張機能にデータを初期化する次の 3 つの機会があり、ユーザーがさまざまな目的を持っているすべては。  
  
-   SOAP 拡張機能がインスタンス化され、は、通常のメンバー変数を初期化するために使用するたびに、クラスのコンス トラクターのときに、クラス コンス トラクターが呼び出されます。  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> \- <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>, 、初めて、SOAP 要求された XML Web サービス メソッド、1 回だけに、ただし、呼び出されます。 XML Web サービス メソッドにカスタム属性が適用されている場合、 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> メソッドが呼び出されます。 これにより、調査する SOAP 拡張機能、 <xref:System.Web.Services.Protocols.LogicalMethodInfo> プロトタイプについてかから派生するクラスによって渡された拡張機能に固有のデータにアクセスする XML Web サービス メソッドの <xref:System.Web.Services.Protocols.SoapExtensionAttribute>です。 戻り値は ASP.NET によってキャッシュされ、それ以降に渡される <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> メソッドです。 そのため、初期化がで実行 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 本質的に 1 回限りのパフォーマンスの低下にカプセル化します。  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> \- <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> たびに、SOAP 要求、XML Web サービス メソッドに加えられたが、利点は、クラスのコンス トラクターで呼び出される、 <xref:System.Object> で初期化 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> に渡されます。  
  
   
  
## 例  
 次のコードから派生したクラスを使用して渡さ SOAP 拡張機能に固有のデータを取得する方法を示します <xref:System.Web.Services.Protocols.SoapExtensionAttribute>, でそのデータをキャッシュし <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>します。 このコード例の完全なコード例の一部である、 `TraceExtension` は記載されている SOAP 拡張機能、 <xref:System.Web.Services.Protocols.SoapExtension> クラスの概要です。 このコード例は、 `TraceExtensionAttribute` に渡される、 `attribute` パラメーター。 完全なコード例では `TraceExtensionAttribute` から派生した <xref:System.Web.Services.Protocols.SoapExtensionAttribute> を追加し、 `Filename` プロパティとはどのような <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> は、キャッシュに格納します。  
  
 [!code-cpp[Classic SoapExtension.GetInitializer Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.GetInitializer Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.GetInitializer Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
        <altmember cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize (object initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(object initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="initializer">
          <see cref="T:System.Object" /> から返された <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" /> ASP.NET によってキャッシュされます。</param>
        <summary>派生クラスでオーバーライドされた場合にキャッシュされたデータを使用してそれ自体を初期化するために SOAP 拡張機能は、 <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 SOAP 拡張機能にデータを初期化する次の 3 つの機会があり、ユーザーがさまざまな目的を持っているすべては。  
  
-   SOAP 拡張機能がインスタンス化され、は、通常のメンバー変数を初期化するために使用するたびに、クラスのコンス トラクターのときに、クラス コンス トラクターが呼び出されます。  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> \- <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>, 、初めて、SOAP 要求された XML Web サービス メソッド、1 回だけに、ただし、呼び出されます。 XML Web サービス メソッドにカスタム属性が適用されている場合、 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> メソッドが呼び出されます。 これにより、調査する SOAP 拡張機能、 <xref:System.Web.Services.Protocols.LogicalMethodInfo> プロトタイプについてかから派生するクラスによって渡された拡張機能に固有のデータにアクセスする XML Web サービス メソッドの <xref:System.Web.Services.Protocols.SoapExtensionAttribute>です。 戻り値は ASP.NET によってキャッシュされ、それ以降に渡される <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> メソッドです。 そのため、初期化がで実行 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> 本質的に 1 回限りのパフォーマンスの低下にカプセル化します。  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> \- <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> たびに、SOAP 要求、XML Web サービス メソッドに加えられたが、利点は、クラスのコンス トラクターで呼び出される、 <xref:System.Object> で初期化 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> に渡されます。  
  
-  
  
> [!NOTE]
>  派生することがなく、SOAP 拡張機能を追加することもできます。 <xref:System.Web.Services.Protocols.SoapExtensionAttribute> を使用して、 [\< soapExtensionTypes \> 要素](http://msdn.microsoft.com/ja-jp/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) 構成ファイルにします。 詳細については、「 [\< soapExtensionTypes \> 要素](http://msdn.microsoft.com/ja-jp/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) と [SOAP Message Modification Using SOAP Extensions](http://msdn.microsoft.com/ja-jp/97d81ace-95e7-4acc-ae39-9692a0021e95)です。  
  
-  
  
   
  
## 例  
 次の例では、中にキャッシュされたデータを使用する方法を示しています、 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> メソッドです。  
  
 [!code-cpp[Classic SoapExtension.Initialize Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.Initialize Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.Initialize Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessMessage">
      <MemberSignature Language="C#" Value="public abstract void ProcessMessage (System.Web.Services.Protocols.SoapMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessMessage(class System.Web.Services.Protocols.SoapMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapMessage" />
      </Parameters>
      <Docs>
        <param name="message">処理対象の <see cref="T:System.Web.Services.Protocols.SoapMessage" />。</param>
        <summary>派生クラスでオーバーライドされた場合は、受信する SOAP 拡張機能、 <see cref="T:System.Web.Services.Protocols.SoapMessage" /> 各プロセスに <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> まったくと呼ばれる <xref:System.Web.Services.Protocols.SoapMessageStage> ASP.NET およびそれらのクライアントを使用して作成した両方の XML Web サービスに適用される SOAP 拡張機能のステージ。 各 <xref:System.Web.Services.Protocols.SoapMessageStage>, から派生するクラスのインスタンス <xref:System.Web.Services.Protocols.SoapMessage> に渡される <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>です。 SOAP 拡張機能が、XML Web サービス クライアントで実行されている場合、 <xref:System.Web.Services.Protocols.SoapClientMessage> オブジェクトに渡されて <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>以外の場合、 <xref:System.Web.Services.Protocols.SoapServerMessage> オブジェクトが渡されました。  
  
   
  
## 例  
 次の例は、 <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> SOAP 要求と SOAP 応答を記録する SOAP 拡張機能の一部です。 ログ記録で、 <xref:System.Web.Services.Protocols.SoapMessage> で、 <xref:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize><xref:System.Web.Services.Protocols.SoapMessageStage>, 、SOAP 拡張機能へのアクセス、 <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> 、ネットワーク経由で送信します。 SOAP 拡張機能が、ASP.NET を使用して作成された XML Web サービス メソッドに適用されている場合、 <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> XML Web サービス メソッドからの SOAP 応答が含まれています。 SOAP 拡張機能が、XML Web サービス クライアントに適用されている場合、 <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> XML Web サービス メソッドに対する SOAP 要求が含まれています。  
  
 クラシック SoapExtension.ProcessMessage 例 1  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInitializer">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>派生クラスでオーバーライドされると、1 つに、XML Web サービス メソッドに固有のデータを初期化する SOAP 拡張機能は、時間のパフォーマンスは低下します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>