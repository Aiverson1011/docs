<Type Name="SoapHttpClientProtocol" FullName="System.Web.Services.Protocols.SoapHttpClientProtocol">
  <TypeSignature Language="C#" Value="public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapHttpClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>SOAP を使用する場合に、プロキシがから派生するクラスのクライアントを指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 XML Web サービス クライアントを構築する場合、プロキシ クラスから派生した直接または間接的に <xref:System.Web.Services.Protocols.WebClientProtocol> XML Web サービス用に作成する必要があります。 XML Web サービス クライアントを呼び出すし、SOAP を使用して、プロキシ クラスがから派生する必要があります <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, から派生した <xref:System.Web.Services.Protocols.HttpWebClientProtocol>します。<xref:System.Web.Services.Protocols.HttpWebClientProtocol>, 、から派生、 <xref:System.Web.Services.Protocols.WebClientProtocol>です。  
  
 XML Web サービスと通信するためから直接または間接的に派生したプロキシ クラスを作成 <xref:System.Web.Services.Protocols.WebClientProtocol> XML Web サービスを呼び出そうとするのです。 プロキシ クラスを手動で作成するには、代わりに、Web サービス記述言語ツール \(Wsdl.exe\) を使用して、指定された XML Web サービスのサービスの説明用のプロキシ クラスを作成します。 を介して、XML Web サービス メソッドへの非同期呼び出しが行われる SOAP プロトコルのプロキシ クラスが生成されると、 <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> メソッドを使用して非同期呼び出しが行われたが、 <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> メソッドおよび <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> メソッドです。  
  
   
  
## 例  
 次のコード例は、の Wsdl.exe によって生成されたプロキシ クラス、 `Math` XML Web サービスです。 プロキシ クラスの派生元 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, 、抽象から派生した <xref:System.Web.Services.Protocols.WebClientProtocol> クラスです。  
  
 [!code-cpp[Classic SoapHttpClientProtocol Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/VB/source.vb#1)]  
  
 次のコード例は、 `Math` 前述のプロキシ クラスが生成された XML Web サービスです。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
    <block subset="none" type="overrides">
      <para>When you override this class, you can introduce methods in the derived class which are specific to a particular type of XML Web service. The methods capture the parameters and call the base class to do the work of communicating with the XML Web service. If the introduced methods are asynchronous, call the <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> method and the <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> method. If the introduced methods are synchronous, call the <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" /> method. The overridden constructor typically sets the <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /> property to the URL of the XML Web service method.</para>
    </block>
    <altmember cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapHttpClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">呼び出して派生クラスを XML Web サービス メソッドの名前、 <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> メソッドです。</param>
        <param name="parameters">XML Web サービスに渡すパラメーターを格納するオブジェクトの配列。 配列内の値の順序は、派生クラスの呼び出し元のメソッドでは、パラメーター順序に対応します。</param>
        <param name="callback">非同期呼び出しが完了したときに呼び出すデリゲート。 場合 <c>callback</c> は <see langword="null" />, 、デリゲートは呼び出されません。</param>
        <param name="asyncState">呼び出し元によって提供される追加情報です。</param>
        <summary>SOAP を使用して XML Web サービス メソッドの非同期呼び出しを開始します。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> に渡される、 <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> リモート メソッド呼び出しからの戻り値を取得します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、するとは呼ばれません、 [BeginInvoke メソッド \(String, Object\<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> メソッドを直接、XML Web サービスのプロキシ クラスを作成していた場合を除き、します。  
  
 サービスの説明から Web サービス記述言語ツール \(Wsdl.exe\) によって生成されるプロキシ クラスは、XML Web サービス メソッドを同期的に呼び出すプロキシ クラスから派生する名前として、XML Web サービス メソッドを公開します。 各 XML Web サービス メソッドと 1 つのプロキシ クラスに追加の 2 つのメソッドを追加する XML Web サービス メソッドを非同期に呼び出す、 `Begin` XML Web サービス メソッドとに 1 つの名前に追加するプレフィックス、 `End` プレフィックスを追加します。  
  
 プロキシ クラスの呼び出し、 [BeginInvoke メソッド \(String, Object\<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> XML Web サービス メソッドへの呼び出しの非同期呼び出しを開始します。 たとえば、XML Web サービスという名前の XML Web サービス メソッドを公開している場合 `Add`, 、プロキシ クラスには、という名前のメソッドが含まれています。 `BeginAdd`, 、XML Web への呼び出しを開始するためのサービス メソッドです。 コード内、 `BeginAdd`, への呼び出しが行われた、 [BeginInvoke メソッド \(String, Object\<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> メソッドと、結果が予期される戻り値の型に配置する `Add`です。  
  
 `methodName` に追加された、メソッドなど、カスタム属性の検索に使用される [BeginInvoke メソッド \(String, Object\<xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>します。[BeginInvoke メソッド \(String, Object\<xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> SOAP プロトコルに必要な派生メソッドに関する追加情報を提供します。  
  
 `asyncState` 渡される `callback` に含まれると、 [BeginInvoke メソッド \(String, Object\<xref:System.IAsyncResult> から返された、 [BeginInvoke メソッド \(String, Object\<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> メソッドです。`asyncState` で指定された非同期の呼び出しのコンテキストに関する情報を渡すパラメーターを使用できる、 `callback` パラメーター、結果を処理するデリゲート。  
  
   
  
## 例  
 次のコード例は、Web サービス記述言語ツール \(Wsdl.exe\) によって生成されたプロキシ クラス、 `Math` XML Web サービスです。 内で、 `BeginAdd` プロキシ クラスのメソッド、 [BeginInvoke メソッド \(String, Object\<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> メソッドは非同期呼び出しを開始して、 `Add` XML Web サービス メソッドです。  
  
 [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.BeginInvoke Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/VB/source.vb#1)]  
  
 次のコード例は、 `Math` 前述のプロキシ クラスが作成された XML Web サービスです。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">要求はサーバー コンピューターに到達しますが、正常に処理されませんでした。</exception>
        <exception cref="T:System.InvalidOperationException">要求は、オブジェクトの現在の状態に対して無効でした。</exception>
        <exception cref="T:System.Net.WebException">ネットワークへのアクセス中にエラーが発生しました。</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="Discover">
      <MemberSignature Language="C#" Value="public void Discover ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Discover() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>探索ドキュメントで説明した XML Web サービスを動的にバインド <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 XML Web サービス クライアントがプロキシ クラスを使用して、参照されているものではない XML Web サービスにバインドできます動的に、 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> メソッドです。 通常、 <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> プロパティは、XML Web サービスのベース アドレスを参照します。 呼び出す前に、 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> 方法、設定、 <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> プロパティを探索ドキュメントの URL にします。<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> メソッドはプロキシ クラスで定義されているバインディングに探索ドキュメントに一致するものを見つけてを動的にバインドを試みます。 成功した場合、後続のメソッド呼び出しは、探索ドキュメントで説明した XML Web サービスに送られます。  
  
 プロキシ クラスが呼び出すを使用して XML Web サービス メソッドによって実装されるバインディングを定義する場合は、プロキシ クラスは、Web サービス記述言語ツール \(Wsdl.exe\) を使用して構築された、 <xref:System.Web.Services.WebServiceBindingAttribute>です。 XML Web サービスには、複数のバインディングが実装される場合、Wsdl.exe は、各バインドのプロキシ クラスを作成します。 各プロキシ クラスが適用されている、 <xref:System.Web.Services.WebServiceBindingAttribute> バインディングとその名前空間の名前を定義します。 設定した探索ドキュメント、 <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> プロパティには、同じバインディング名と名前空間を実装する XML Web サービスへの参照を含める必要がありますか、例外がスローされます。  
  
   
  
## 例  
 次のコード例は、の Wsdl.exe ユーティリティを使用して生成されたプロキシ クラス、 `Math` XML Web サービスです。 A <xref:System.Web.Services.WebServiceBindingAttribute> に適用される、 `Math` プロキシ クラスのバインディング名に設定 `MathSoap` およびその名前空間を `http://tempuri.org/`します。  
  
 [!code-cpp[SoapHttpClientProtocol.Discover Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CPP/source.cpp#1)]
 [!code-csharp[SoapHttpClientProtocol.Discover Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/source.cs#1)]
 [!code-vb[SoapHttpClientProtocol.Discover Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/source.vb#1)]  
  
 次のコード例は、上記のプロキシ クラスを使用して Web サービス クライアントです。 内で、 `EnterBtn_Click` Web フォーム、XML Web サービス クライアントの呼び出しのイベント、 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> メソッドは、ユーザーが指定した URL に動的にバインドしようとしています。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[SoapHttpClientProtocol.Discover Example\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/sourcecs.aspx#2)]
 [!code-vb[SoapHttpClientProtocol.Discover Example\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/sourcevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">プロキシ クラスには、定義されているバインドがありません。</exception>
        <altmember cref="T:System.Web.Services.WebServiceBindingAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object[] EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> メソッドから返された <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />。</param>
        <summary>SOAP を使用して XML Web サービス メソッドの非同期呼び出しを終了します。</summary>
        <returns>戻り値と、参照渡しを含むオブジェクトの配列または <see langword="out" /> 派生クラスのメソッドのパラメーターです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、するとは呼ばれません、 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> メソッドを直接、XML Web サービスのプロキシ クラスを作成していた場合を除き、します。  
  
 XML Web サービスの Web サービス記述言語ツール \(Wsdl.exe\) によって生成されたプロキシ クラスでは、XML Web サービス メソッドを同期的に呼び出すためのプロキシ クラスの名前として、XML Web サービス メソッドを公開します。 XML Web サービス メソッドを非同期的に呼び出すため、2 つの追加メソッドが各 XML Web サービス メソッドと 1 つのプロキシ クラスに追加されます、 `Begin` XML Web サービス メソッドとに 1 つの名前に追加するプレフィックス、 `End` プレフィックスを追加します。  
  
 プロキシ クラスの呼び出し、 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> メソッドを XML Web サービス メソッドへの呼び出しの非同期呼び出しを完了します。 たとえば、XML Web サービスという名前の XML Web サービス メソッドを公開する `Add`, 、プロキシ クラスには、という名前のメソッドが含まれています。 `EndAdd`, 、XML Web の非同期呼び出しを完了するためのサービス メソッドです。 コード内、 `EndAdd` への呼び出しが行われた、 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> メソッドとし、結果が予期される戻り値の型に配置する `Add`です。  
  
   
  
## 例  
 次のコード例は、の Wsdl.exe によって生成されたプロキシ クラス、 `Math` XML Web サービスです。 内で、 `EndAdd` プロキシ クラスのメソッド、 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> メソッドへの非同期呼び出しが完了すると、 `Add` XML Web サービス メソッドです。  
  
 [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.EndInvoke Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/VB/source.vb#1)]  
  
 次のコード例は、 `Math` 前述のプロキシ クラスが作成された XML Web サービスです。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> 戻り値ではありません、 <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> メソッドです。</exception>
        <exception cref="T:System.Web.Services.Protocols.SoapException">要求はサーバー コンピューターに到達しますが、正常に処理されませんでした。</exception>
        <exception cref="T:System.InvalidOperationException">要求は、オブジェクトの現在の状態に対して無効でした。</exception>
        <exception cref="T:System.Net.WebException">ネットワークへのアクセス中にエラーが発生しました。</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="GetReaderForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlReader GetReaderForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">A <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> を提供する、 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> 初期化するために、 <see cref="T:System.Xml.XmlReader" />です。</param>
        <param name="bufferSize">最初のバッファー サイズ、 <see cref="T:System.IO.StreamReader" /> で使用される、 <see cref="T:System.Xml.XmlReader" />です。</param>
        <summary>返します。、 <see cref="T:System.Xml.XmlReader" /> による初期化を行う、 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> のプロパティ、 <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> パラメーター。</summary>
        <returns>A <see cref="T:System.Xml.XmlReader" /> による初期化を行う、 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> のプロパティ、 <paramref name="message" /> パラメーター。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected override System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">
          <see cref="T:System.Uri" /> を作成するときに使用する、 <see cref="T:System.Net.WebRequest" />です。</param>
        <summary>指定した <paramref name="uri" /> に対して <see cref="T:System.Net.WebRequest" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Net.WebRequest" /> Uri に指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドをオーバーライドして、カスタマイズ、 <xref:System.Net.WebRequest> 前 XML Web に、サービス要求を作成します。 たとえば、要求にカスタム ヘッダーを追加できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="uri" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetWriterForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlWriter GetWriterForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">A <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> を提供する、 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> 初期化するために、 <see cref="T:System.Xml.XmlWriter" />です。</param>
        <param name="bufferSize">最初のバッファー サイズ、 <see cref="T:System.IO.StreamWriter" /> で使用される、 <see cref="T:System.Xml.XmlWriter" />です。</param>
        <summary>返します。、 <see cref="T:System.Xml.XmlWriter" /> による初期化を行う、 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> のプロパティ、 <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> パラメーター。</summary>
        <returns>A <see cref="T:System.Xml.XmlWriter" /> による初期化を行う、 <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> のプロパティ、 <paramref name="message" /> パラメーター。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object[] Invoke (string method_name, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string method_name, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method_name">To be added.</param>
        <param name="parameters">XML Web サービスに渡すパラメーターを含むオブジェクトの配列。 配列内の値の順序は、派生クラスの呼び出し元のメソッドでは、パラメーター順序に対応します。</param>
        <summary>同期的に SOAP を使用して XML Web サービス メソッドを呼び出します。</summary>
        <returns>オブジェクトの配列を戻り値とを含む <see langword="reference" /> または <see langword="out" /> 派生クラスのメソッドのパラメーターです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常を呼び出す必要はありません、 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> メソッドを直接、XML Web サービスのプロキシ クラスを作成する場合を除き、します。  
  
 XML Web サービスの Web サービス記述言語ツール \(Wsdl.exe\) によって生成されたプロキシ クラスでは、プロキシ クラスの名前として、XML Web サービス メソッドを公開します。 プロキシ クラスの呼び出し、 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> メソッドを呼び出して XML Web サービス メソッド呼び出しです。 たとえば、XML Web サービスという名前の XML Web サービス メソッドを公開する `Add`, 、プロキシ クラスは、という名前のメソッドも含まれています。 `Add`します。 コード内、 `Add` プロキシ クラスのメソッドは、同期呼び出しはから XML Web サービス メソッドに加えられた、 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> メソッドとし、結果が予期される戻り値の型に配置する `Add`です。  
  
 `methodName` パラメーターが追加された、メソッドなどのカスタム属性の検索に使用される <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>します。<xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> 派生メソッドの SOAP プロトコルに必要な追加情報を提供します。  
  
   
  
## 例  
 次のコード例は、の Wsdl.exe によって生成されたプロキシ クラス、 `Math` XML Web サービスです。 内で、 `Add` プロキシ クラスのメソッド、 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> メソッドを呼び出して、 `Add` XML Web サービス メソッドです。  
  
 [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.Invoke Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.Invoke Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/VB/source.vb#1)]  
  
 次のコード例は、 `Math` 前述のプロキシ クラスが作成された XML Web サービスです。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">要求はサーバー コンピューターに到達しますが、正常に処理されませんでした。</exception>
        <exception cref="T:System.InvalidOperationException">要求は、オブジェクトの現在の状態に対して無効でした。</exception>
        <exception cref="T:System.Net.WebException">ネットワークへのアクセス中にエラーが発生しました。</exception>
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
      </Parameters>
      <Docs>
        <param name="methodName">呼び出すメソッドの名前。</param>
        <param name="parameters">メソッドに渡すパラメーター。</param>
        <param name="callback">このデリゲートは、メソッドの呼び出しが完了したときに呼び出されます。</param>
        <summary>指定したメソッドを非同期的に呼び出します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">呼び出すメソッドの名前。</param>
        <param name="parameters">メソッドに渡すパラメーター。</param>
        <param name="callback">このデリゲートは、メソッドの呼び出しが完了したときに呼び出されます。</param>
        <param name="userState">状態情報を渡すために使用されるオブジェクト、 <c>callback</c> を委任します。</param>
        <summary>指定したメソッドを非同期的に呼び出します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoapVersion">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapProtocolVersion SoapVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapProtocolVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または XML Web サービスに SOAP 要求に使用される SOAP プロトコルのバージョンを設定します。</summary>
        <value>
          <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" /> 値のいずれか。 既定値は、<see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Soap11" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> に Web サービス記述言語ツール \(Wsdl.exe\) によって生成されたプロキシ クラスにプロパティを設定 <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> 既定では、XML Web サービスの WSDL ドキュメントには、SOAP 1.1 がサポートされている場合。 しかし、ときに、XML Web サービスのみをサポート SOAP 1.2 では、Wsdl.exe セット、 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> プロパティを <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>します。 Wsdl.exe を使用して、プロキシ クラスを生成するときに、SOAP プロトコルのバージョンを選択するには、使用、 `/protocol` スイッチと、 `SOAP` または `SOAP12` 設定を格納、 <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> プロパティを <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> と <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>, 、それぞれします。  
  
   
  
## 例  
 次のコード例では、SOAP 1.2 を XML Web サービスとの通信に使用するプロトコルのバージョンを設定します。  
  
 [!code-csharp[SoapHttpClientProtocol.SoapVersion\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/CS/serverusageclientcs.aspx#1)]
 [!code-vb[SoapHttpClientProtocol.SoapVersion\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/VB/serverusageclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
        <altmember cref="P:System.Web.HttpContext.Items" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したメソッドを非同期的に呼び出します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>