<Type Name="LogicalMethodInfo" FullName="System.Web.Services.Protocols.LogicalMethodInfo">
  <TypeSignature Language="C#" Value="public sealed class LogicalMethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogicalMethodInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.LogicalMethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>属性および XML Web サービス メソッドのメタデータを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Services.Protocols.LogicalMethodInfo> 実行に使用する SOAP 拡張機能が構成されている XML Web サービス メソッドの詳細を調査する SOAP 拡張機能によって、主に使用されます。 SOAP 拡張機能の構成方法に応じてで XML Web サービス メソッドの詳細を見つけることができます、 <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> メソッドの <xref:System.Web.Services.Protocols.SoapExtension> を受け取り、 <xref:System.Web.Services.Protocols.LogicalMethodInfo>です。<xref:System.Web.Services.Protocols.LogicalMethodInfo> にアクセスして XML Web サービス メソッドのパラメーターなどの詳細情報を提供、 <xref:System.Web.Services.Protocols.LogicalMethodInfo.Parameters%2A> プロパティと XML Web サービス メソッドの使用に適用されるカスタム属性、 <xref:System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes%2A> プロパティです。  
  
 SOAP 拡張機能の詳細について参照してください、 <xref:System.Web.Services.Protocols.SoapExtension> クラスまたは [&#91;\<topic:\/\/cpconAlteringSOAPMessageUsingSOAPExtensions\>&#93;](http://msdn.microsoft.com/ja-jp/97d81ace-95e7-4acc-ae39-9692a0021e95)です。  
  
   
  
## 例  
  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.SoapExtension" />
    <altmember cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />
    <altmember cref="T:System.Reflection.MethodInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogicalMethodInfo (System.Reflection.MethodInfo method_info);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo method_info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.LogicalMethodInfo.#ctor(System.Reflection.MethodInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="method_info">To be added.</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> クラス、 <see cref="T:System.Reflection.MethodInfo" /> に渡されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/CPP/logicalmethodinfo_constructor.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/CS/logicalmethodinfo_constructor.cs#1)]
 [!code-vb[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/VB/logicalmethodinfo_constructor.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Reflection.MethodBase.IsStatic" /> のプロパティ、 <paramref name="methodInfo" /> パラメーターは <see langword="true" />です。  
  
 または  
  
 <see cref="M:System.Reflection.MethodBase.GetParameters" /> のメソッド、 <paramref name="methodInfo" /> パラメーターのインスタンスで表されるメソッドで必要なすべてのパラメーターが含まれていない <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncCallbackParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo AsyncCallbackParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo AsyncCallbackParameter" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パラメーター情報を取得、 <paramref name="AsyncCallback" /> 非同期の呼び出しで Begin メソッドのパラメーターです。</summary>
        <value>A <see cref="T:System.Reflection.ParameterInfo" /> を表す、 <paramref name="AsyncCallback" /> のパラメーター、 <see langword="Begin" /> 非同期メソッドの呼び出しです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 共通言語ランタイムの非同期デザイン パターンは、通話、 `Begin` 非同期メソッドの呼び出しを開始する方法と `End` メソッドを呼び出しを完了します。`Begin` メソッドは、メソッドの同期バージョンで定義されたパラメーターだけでなく 2 つのパラメーターを受け取ります。 デリゲートと 1 つで、デリゲートに渡される必要があるすべての状態情報を格納を格納する 1 つです。 このプロパティのパラメーター名を持つデリゲートのパラメーターを表す `AsyncCallback`します。  
  
 XML Web サービスを非同期的に呼び出すための詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconInvokingWebServicesAsynchronously\>&#93;](http://msdn.microsoft.com/ja-jp/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)します。  
  
   
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CPP/logicalmethodinfo_create2.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CS/logicalmethodinfo_create2.cs#1)]
 [!code-vb[LogicalMethodInfo\_Create2\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Create2/VB/logicalmethodinfo_create2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter" />
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter" />
        <altmember cref="T:System.Reflection.ParameterInfo" />
      </Docs>
    </Member>
    <Member MemberName="AsyncResultParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo AsyncResultParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo AsyncResultParameter" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>戻り値を取得、 <see langword="Begin" /> 非同期メソッドの呼び出しです。</summary>
        <value>A <see cref="T:System.Reflection.ParameterInfo" /> を表す、 <see cref="T:System.IAsyncResult" /> から返される、 <see langword="Begin" /> 非同期メソッドの呼び出しです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 共通言語ランタイムの非同期デザイン パターンは、通話、 `Begin` 非同期メソッドの呼び出しを開始する方法と `End` メソッドを呼び出しを完了します。`Begin` メソッド通常すぐに制御を実装するオブジェクト、 <xref:System.IAsyncResult> インターフェイスを渡すことが、 `End` は後で、非同期メソッド呼び出しを完了する方法です。 返されたオブジェクトを実装する、 <xref:System.IAsyncResult> インターフェイスは、このプロパティによって表されます。  
  
 XML Web サービスを非同期的に呼び出すための詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconInvokingWebServicesAsynchronously\>&#93;](http://msdn.microsoft.com/ja-jp/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)します。  
  
   
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CPP/logicalmethodinfo_create2.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CS/logicalmethodinfo_create2.cs#1)]
 [!code-vb[LogicalMethodInfo\_Create2\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Create2/VB/logicalmethodinfo_create2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter" />
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter" />
        <altmember cref="T:System.Reflection.ParameterInfo" />
      </Docs>
    </Member>
    <Member MemberName="AsyncStateParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo AsyncStateParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo AsyncStateParameter" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.AsyncStateParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パラメーター情報を取得、 <paramref name="AsyncState" /> のパラメーター、 <see langword="Begin" /> で非同期的に呼び出すメソッド。</summary>
        <value>A <see cref="T:System.Reflection.ParameterInfo" /> を表す、 <paramref name="AsyncState" /> のパラメーター、 <see langword="Begin" /> で非同期的に呼び出すメソッド。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 共通言語ランタイムの非同期デザイン パターンは、通話、 `Begin` 非同期メソッドの呼び出しを開始する方法と `End` メソッドを呼び出しを完了します。`Begin` メソッドは、メソッドの同期バージョンで定義されたパラメーターだけでなく 2 つのパラメーターを受け取ります。 デリゲートと 1 つで、デリゲートに渡される必要があるすべての状態情報を格納を格納する 1 つです。 このプロパティは、デリゲートに渡される必要がある状態情報を表します。  
  
 XML Web サービスを非同期的に呼び出すための詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconInvokingWebServicesAsynchronously\>&#93;](http://msdn.microsoft.com/ja-jp/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)します。  
  
   
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CPP/logicalmethodinfo_create2.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CS/logicalmethodinfo_create2.cs#1)]
 [!code-vb[LogicalMethodInfo\_Create2\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Create2/VB/logicalmethodinfo_create2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.AsyncCallbackParameter" />
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.AsyncResultParameter" />
        <altmember cref="T:System.Reflection.ParameterInfo" />
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (object target, object[] values, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(object target, object[] values, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(System.Object,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="values" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target">インスタンス、 <see cref="T:System.Object" /> でメソッドを呼び出し元となるのです。</param>
        <param name="values">呼び出されたメソッドの引数リスト。 これは、メソッドのパラメーターと同じ数、順序、および型を持つオブジェクトの配列です。 メソッドは、パラメーターを必要としない場合 <c>values</c> べき <see langword="null" />します。</param>
        <param name="callback">非同期呼び出しが完了したときに呼び出すデリゲート。 場合 <c>callback</c> は <see langword="null" />, 、デリゲートは呼び出されません。</param>
        <param name="asyncState">デリゲートに渡される状態情報。</param>
        <summary>これによって表されるメソッドの非同期呼び出しを開始 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />します。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> に渡される <see cref="M:System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(System.Object,System.IAsyncResult)" /> リモート メソッド呼び出しからの戻り値を取得します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_BeginInvoke\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_BeginInvoke/CPP/logicalmethodinfo_begininvoke.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_BeginInvoke\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_BeginInvoke/CS/logicalmethodinfo_begininvoke.cs#1)]
 [!code-vb[LogicalMethodInfo\_BeginInvoke\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_BeginInvoke/VB/logicalmethodinfo_begininvoke.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException">
          <paramref name="target" /> 指して <see langword="null" />します。</exception>
        <exception cref="T:System.ArgumentException">数や型のパラメーターの順序 <paramref name="values" /> 呼び出されたメソッドの署名に一致しません。</exception>
        <exception cref="T:System.MemberAccessException">呼び出し元には、メソッドを呼び出すためのアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginMethodInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo BeginMethodInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo BeginMethodInfo" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>属性とメタデータの取得、 <see langword="Begin" /> で非同期的に呼び出すメソッド。</summary>
        <value>A <see cref="T:System.Reflection.MethodInfo" /> 属性とのメタデータを表す、 <see langword="Begin" /> 非同期メソッドの呼び出しです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CPP/logicalmethodinfo_create2.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CS/logicalmethodinfo_create2.cs#1)]
 [!code-vb[LogicalMethodInfo\_Create2\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Create2/VB/logicalmethodinfo_create2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo" />
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Web.Services.Protocols.LogicalMethodInfo[] Create (System.Reflection.MethodInfo[] method_infos);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Services.Protocols.LogicalMethodInfo[] Create(class System.Reflection.MethodInfo[] method_infos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.LogicalMethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfos" Type="System.Reflection.MethodInfo[]" />
      </Parameters>
      <Docs>
        <param name="method_infos">To be added.</param>
        <summary>配列を指定 <see cref="T:System.Reflection.MethodInfo" /> 非同期と同期の両方の方法に関する情報を含めることができますの配列を作成する <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />です。</summary>
        <returns>配列 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />, 、内でメソッドを表す <paramref name="methodInfos" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Create1\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Create1/CPP/logicalmethodinfo_create1.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Create1\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Create1/CS/logicalmethodinfo_create1.cs#1)]
 [!code-vb[LogicalMethodInfo\_Create1\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Create1/VB/logicalmethodinfo_create1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A <see langword="Begin" /> で非同期メソッドが含まれている <paramref name="methodInfos" /> 、対応することがなく <see langword="End" /> メソッドです。</exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Web.Services.Protocols.LogicalMethodInfo[] Create (System.Reflection.MethodInfo[] method_infos, System.Web.Services.Protocols.LogicalMethodTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Services.Protocols.LogicalMethodInfo[] Create(class System.Reflection.MethodInfo[] method_infos, valuetype System.Web.Services.Protocols.LogicalMethodTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.LogicalMethodInfo.Create(System.Reflection.MethodInfo[],System.Web.Services.Protocols.LogicalMethodTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.LogicalMethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfos" Type="System.Reflection.MethodInfo[]" />
        <Parameter Name="types" Type="System.Web.Services.Protocols.LogicalMethodTypes" />
      </Parameters>
      <Docs>
        <param name="method_infos">To be added.</param>
        <param name="types">
          <see cref="T:System.Web.Services.Protocols.LogicalMethodTypes" /> 値のビットごとの組み合わせ。 単に同期または非同期のメソッドまたはその両方がの返される配列に含まれるかどうかを決定 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />します。</param>
        <summary>配列を指定 <see cref="T:System.Reflection.MethodInfo" />, ここで、返される配列の <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> メソッドの非同期または同期のみに制限できるの配列を作成 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />します。</summary>
        <returns>配列 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />, 、内でメソッドを表す <paramref name="methodInfos" />, の値でフィルター処理された、 <paramref name="types" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CPP/logicalmethodinfo_create2.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CS/logicalmethodinfo_create2.cs#1)]
 [!code-vb[LogicalMethodInfo\_Create2\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Create2/VB/logicalmethodinfo_create2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A <see langword="Begin" /> で非同期メソッドが含まれている <paramref name="methodInfos" /> 、対応することがなく <see langword="End" /> メソッドです。</exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CustomAttributeProvider">
      <MemberSignature Language="C#" Value="public System.Reflection.ICustomAttributeProvider CustomAttributeProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider CustomAttributeProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.CustomAttributeProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メソッドに適用されるカスタム属性を取得します。</summary>
        <value>
          <see cref="T:System.Reflection.ICustomAttributeProvider" /> メソッドのカスタム属性を表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_GetCustomAttribute\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/CPP/logicalmethodinfo_getcustomattribute.cpp#4)]
 [!code-csharp[LogicalMethodInfo\_GetCustomAttribute\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/CS/logicalmethodinfo_getcustomattribute.cs#4)]
 [!code-vb[LogicalMethodInfo\_GetCustomAttribute\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/VB/logicalmethodinfo_getcustomattribute.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のメソッドを宣言するクラスを取得 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />します。</summary>
        <value>
          <see cref="T:System.Type" /> によって表されるメソッドを宣言するクラス、 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Services.Protocols.LogicalMethodInfo.DeclaringType%2A> プロパティへの参照を取得する、 <xref:System.Type> のこのメンバーを宣言する型。 クラス \(またはインターフェイス\) のメンバーが宣言されているか、基本クラス \(またはインターフェイス\) から継承します。 返された <xref:System.Type> と同じあります、 <xref:System.Type> XML Web サービスを実装するクラスの \(そのクラスが基底クラスから派生し、このクラスによって表されるメソッドがその基底クラスで宣言されている場合、 <xref:System.Type> 基本クラスは、返される\)。  
  
   
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/CPP/logicalmethodinfo_constructor.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/CS/logicalmethodinfo_constructor.cs#1)]
 [!code-vb[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/VB/logicalmethodinfo_constructor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object[] EndInvoke (object target, IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object[] EndInvoke(object target, class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.LogicalMethodInfo.EndInvoke(System.Object,System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="target">インスタンス、 <see cref="T:System.Object" /> メソッドの呼び出しに使用します。</param>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> から返された <see cref="M:System.Web.Services.Protocols.LogicalMethodInfo.BeginInvoke(System.Object,System.Object[],System.AsyncCallback,System.Object)" />です。</param>
        <summary>現在のメソッドの非同期呼び出しを開始 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />します。</summary>
        <returns>戻り値と格納しているオブジェクトの配列参照でまたは派生クラスのメソッドの出力パラメーターです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_BeginInvoke\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_BeginInvoke/CPP/logicalmethodinfo_begininvoke.cpp#2)]
 [!code-csharp[LogicalMethodInfo\_BeginInvoke\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_BeginInvoke/CS/logicalmethodinfo_begininvoke.cs#2)]
 [!code-vb[LogicalMethodInfo\_BeginInvoke\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_BeginInvoke/VB/logicalmethodinfo_begininvoke.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException">
          <paramref name="target" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.MemberAccessException">呼び出し元には、メソッドを呼び出すためのアクセス許可がありません。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">呼び出されたメソッドでは、例外をスローします。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndMethodInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo EndMethodInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo EndMethodInfo" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>属性とメタデータの取得、 <see langword="End" /> メソッドへの非同期呼び出しのメソッドです。</summary>
        <value>A <see cref="T:System.Reflection.MethodInfo" /> 属性とのメタデータを表す、 <see langword="End" /> 非同期メソッドの呼び出しです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CPP/logicalmethodinfo_create2.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CS/logicalmethodinfo_create2.cs#1)]
 [!code-vb[LogicalMethodInfo\_Create2\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Create2/VB/logicalmethodinfo_create2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo" />
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public object GetCustomAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetCustomAttribute(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttribute(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> カスタム属性を適用します。</param>
        <summary>任意のカスタム属性が型に適用されている場合は、型に適用された最初のカスタム属性を返します。</summary>
        <returns>
          <see cref="T:System.Object" /> に適用される最初のカスタム属性を含む、 <paramref name="type" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_GetCustomAttribute\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/CPP/logicalmethodinfo_getcustomattribute.cpp#4)]
 [!code-csharp[LogicalMethodInfo\_GetCustomAttribute\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/CS/logicalmethodinfo_getcustomattribute.cs#4)]
 [!code-vb[LogicalMethodInfo\_GetCustomAttribute\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/VB/logicalmethodinfo_getcustomattribute.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込めませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object[] GetCustomAttributes(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.LogicalMethodInfo.GetCustomAttributes(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> カスタム属性を適用します。</param>
        <summary>指定した型に適用されるカスタム属性を返します。</summary>
        <returns>配列 <see cref="T:System.Object" /> に適用されるカスタム属性を含む <paramref name="type" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_GetCustomAttribute\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/CPP/logicalmethodinfo_getcustomattribute.cpp#4)]
 [!code-csharp[LogicalMethodInfo\_GetCustomAttribute\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/CS/logicalmethodinfo_getcustomattribute.cs#4)]
 [!code-vb[LogicalMethodInfo\_GetCustomAttribute\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/VB/logicalmethodinfo_getcustomattribute.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込めませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="InParameters">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo[] InParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo[] InParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インスタンスで表されるメソッドに渡されるパラメーターを取得 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />します。</summary>
        <value>型の配列 <see cref="T:System.Reflection.ParameterInfo" /> のインスタンスで表されるメソッドに渡されるパラメーターを含む <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンスを使用して <xref:System.Reflection.ParameterInfo> パラメーターのデータ型に関する情報を取得するには、既定値、および具合です。  
  
 <xref:System.Web.Services.Protocols.LogicalMethodInfo.InParameters%2A> 配列を返します <xref:System.Reflection.ParameterInfo> の順序でのメソッドに渡されるパラメーターを表すオブジェクトします。  
  
   
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Create1\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Create1/CPP/logicalmethodinfo_create1.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Create1\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Create1/CS/logicalmethodinfo_create1.cs#1)]
 [!code-vb[LogicalMethodInfo\_Create1\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Create1/VB/logicalmethodinfo_create1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.Parameters" />
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.OutParameters" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object[] Invoke (object target, object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object[] Invoke(object target, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.LogicalMethodInfo.Invoke(System.Object,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="values" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="target">インスタンス、 <see cref="T:System.Object" /> メソッドを呼び出します。</param>
        <param name="values">呼び出されたメソッドの引数リスト。 これは、メソッドのパラメーターと同じ数、順序、および型を持つオブジェクトの配列です。 メソッドは、パラメーターを必要としない場合、 <c>values</c> パラメーターは必ず <see langword="null" />します。</param>
        <summary>現在のメソッドを呼び出す <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />します。</summary>
        <returns>型の配列 <see cref="T:System.Object" /> 戻り値を表すと、呼び出されたメソッドの出力パラメーターです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/CPP/logicalmethodinfo_constructor.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/CS/logicalmethodinfo_constructor.cs#1)]
 [!code-vb[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/VB/logicalmethodinfo_constructor.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetException">
          <paramref name="target" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">数や型のパラメーターの順序、 <paramref name="values" /> パラメーターは、呼び出されたメソッドのシグネチャと一致しません。</exception>
        <exception cref="T:System.MemberAccessException">呼び出し元には、メソッドを呼び出すためのアクセス許可がありません。</exception>
        <exception cref="T:System.Reflection.TargetInvocationException">呼び出されたメソッドでは、例外をスローします。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="public bool IsAsync { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.IsAsync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メソッドがのインスタンスで表されるかどうかを示す値を取得 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> が非同期的に呼び出されます。</summary>
        <value>
          <see langword="true" /> メソッドが非同期的に起動された場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CPP/logicalmethodinfo_create2.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Create2\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Create2/CS/logicalmethodinfo_create2.cs#1)]
 [!code-vb[LogicalMethodInfo\_Create2\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Create2/VB/logicalmethodinfo_create2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBeginMethod">
      <MemberSignature Language="C#" Value="public static bool IsBeginMethod (System.Reflection.MethodInfo method_info);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsBeginMethod(class System.Reflection.MethodInfo method_info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.LogicalMethodInfo.IsBeginMethod(System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="method_info">To be added.</param>
        <summary>メソッドが渡されるかどうかを示す値を返す、 <see langword="Begin" /> 非同期呼び出しのメソッドです。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="methodInfo" /> パラメーターは、 <see langword="Begin" /> の非同期的に呼び出すメソッド。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_IsBeginMethod\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_IsBeginMethod/CPP/logicalmethodinfo_isbeginmethod.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_IsBeginMethod\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_IsBeginMethod/CS/logicalmethodinfo_isbeginmethod.cs#1)]
 [!code-vb[LogicalMethodInfo\_IsBeginMethod\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_IsBeginMethod/VB/logicalmethodinfo_isbeginmethod.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEndMethod">
      <MemberSignature Language="C#" Value="public static bool IsEndMethod (System.Reflection.MethodInfo method_info);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsEndMethod(class System.Reflection.MethodInfo method_info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.LogicalMethodInfo.IsEndMethod(System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="method_info">To be added.</param>
        <summary>メソッドが渡されるかどうかを示す値を返す、 <see langword="End" /> 非同期呼び出しのメソッドです。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="methodInfo" /> パラメーターは、 <see langword="End" /> の非同期的に呼び出すメソッド。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_IsBeginMethod\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_IsBeginMethod/CPP/logicalmethodinfo_isbeginmethod.cpp#2)]
 [!code-csharp[LogicalMethodInfo\_IsBeginMethod\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_IsBeginMethod/CS/logicalmethodinfo_isbeginmethod.cs#2)]
 [!code-vb[LogicalMethodInfo\_IsBeginMethod\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_IsBeginMethod/VB/logicalmethodinfo_isbeginmethod.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVoid">
      <MemberSignature Language="C#" Value="public bool IsVoid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVoid" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.IsVoid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メソッドの戻り値の型がのインスタンスで表されるかどうかを示す値を取得 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> は <see langword="void" />です。</summary>
        <value>
          <see langword="true" /> 戻り値の型が void; の場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Create1\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Create1/CPP/logicalmethodinfo_create1.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Create1\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Create1/CS/logicalmethodinfo_create1.cs#1)]
 [!code-vb[LogicalMethodInfo\_Create1\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Create1/VB/logicalmethodinfo_create1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo MethodInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo MethodInfo" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.MethodInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>同期メソッドの属性およびメタデータを取得します。</summary>
        <value>A <see cref="T:System.Reflection.MethodInfo" /> 属性とメソッドのメタデータを表します。 場合 <see cref="P:System.Web.Services.Protocols.LogicalMethodInfo.IsAsync" /> は <see langword="true" />, 、このプロパティの値は <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_GetCustomAttribute\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/CPP/logicalmethodinfo_getcustomattribute.cpp#3)]
 [!code-csharp[LogicalMethodInfo\_GetCustomAttribute\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/CS/logicalmethodinfo_getcustomattribute.cs#3)]
 [!code-vb[LogicalMethodInfo\_GetCustomAttribute\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/VB/logicalmethodinfo_getcustomattribute.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.BeginMethodInfo" />
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.EndMethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>これによって表されるメソッドの名前を取得 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />します。</summary>
        <value>これによって表されるメソッドの名前 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Create1\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Create1/CPP/logicalmethodinfo_create1.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Create1\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Create1/CS/logicalmethodinfo_create1.cs#1)]
 [!code-vb[LogicalMethodInfo\_Create1\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Create1/VB/logicalmethodinfo_create1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutParameters">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo[] OutParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo[] OutParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.OutParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メソッドの出力パラメーターを取得します。</summary>
        <value>配列 <see cref="T:System.Reflection.ParameterInfo" /> の順序で、メソッドの出力パラメーターを表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Reflection.ParameterInfo> パラメーターのデータ型に関する情報を取得するには、既定値、および具合です。  
  
   
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Create1\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Create1/CPP/logicalmethodinfo_create1.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Create1\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Create1/CS/logicalmethodinfo_create1.cs#1)]
 [!code-vb[LogicalMethodInfo\_Create1\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Create1/VB/logicalmethodinfo_create1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.Parameters" />
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Reflection.ParameterInfo[] Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo[] Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メソッドのパラメーターを取得します。</summary>
        <value>配列 <see cref="T:System.Reflection.ParameterInfo" /> メソッドのパラメーターを表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Reflection.ParameterInfo> パラメーターのデータ型に関する情報を取得するには、既定値、および具合です。  
  
 <xref:System.Web.Services.Protocols.LogicalMethodInfo.Parameters%2A> 配列を返します <xref:System.Reflection.ParameterInfo> の順序でのメソッドに渡されるパラメーターを表すオブジェクトします。  
  
   
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/CPP/logicalmethodinfo_constructor.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/CS/logicalmethodinfo_constructor.cs#1)]
 [!code-vb[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/VB/logicalmethodinfo_constructor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.InParameters" />
        <altmember cref="P:System.Web.Services.Protocols.LogicalMethodInfo.OutParameters" />
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.ReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメソッドの戻り値の型を取得します。</summary>
        <value>
          <see cref="T:System.Type" /> このメソッドによって返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/CPP/logicalmethodinfo_constructor.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/CS/logicalmethodinfo_constructor.cs#1)]
 [!code-vb[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/VB/logicalmethodinfo_constructor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributeProvider">
      <MemberSignature Language="C#" Value="public System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributeProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributeProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.LogicalMethodInfo.ReturnTypeCustomAttributeProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>戻り値の型のカスタム属性を取得します。</summary>
        <value>
          <see cref="T:System.Reflection.ICustomAttributeProvider" /> 戻り値の型のカスタム属性を表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_GetCustomAttribute\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/CPP/logicalmethodinfo_getcustomattribute.cpp#4)]
 [!code-csharp[LogicalMethodInfo\_GetCustomAttribute\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/CS/logicalmethodinfo_getcustomattribute.cs#4)]
 [!code-vb[LogicalMethodInfo\_GetCustomAttribute\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_GetCustomAttribute/VB/logicalmethodinfo_getcustomattribute.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.LogicalMethodInfo.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> を表す文字列を返します。</summary>
        <returns>現在の <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> を表す <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/CPP/logicalmethodinfo_constructor.cpp#1)]
 [!code-csharp[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/CS/logicalmethodinfo_constructor.cs#1)]
 [!code-vb[LogicalMethodInfo\_Constructor\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/LogicalMethodInfo_Constructor/VB/logicalmethodinfo_constructor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>配列を指定 <see cref="T:System.Reflection.MethodInfo" />, の配列を作成 <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>