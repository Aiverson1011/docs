<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>別のソースからのデータを SQL Server テーブルに効率的に一括読み込みすることができます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 Microsoft SQL Server には、という一般的なコマンド プロンプト ユーティリティが含まれています。 **bcp** 単一のサーバーであるかどうか、またはサーバー間で、1 つのテーブルからデータを移動します。<xref:System.Data.SqlClient.SqlBulkCopy> クラスでは、同様の機能を提供するマネージ コード ソリューションを記述することができます。 SQL Server テーブル \(たとえば INSERT ステートメント\) にデータを読み込むには、その他の方法がありますが、 <xref:System.Data.SqlClient.SqlBulkCopy> ことよりもパフォーマンスが大幅に有利です。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> クラスを使用すると、SQL Server のテーブルにのみデータを書き込むことができます。 ただし、データ ソースは SQL Server に制限はありません。データの読み込み限り、任意のデータ ソースを使用できます、 <xref:System.Data.DataTable> インスタンスまたはを使用して読み、 <xref:System.Data.IDataReader> インスタンス。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> 失敗する一括読み込みを行う、 <xref:System.Data.DataTable> 型の列 <xref:System.Data.SqlTypes.SqlDateTime> SQL Server 2008 で SQL Server に、型が日付\/時刻型のいずれかの列を追加します。  
  
   
  
## 例  
 次のコンソール アプリケーションでは、<xref:System.Data.SqlClient.SqlBulkCopy> クラスを使用してデータを読み込む方法について示しています。 この例では、 <xref:System.Data.SqlClient.SqlDataReader> からデータをコピーするために使用、 **Production.Product** テーブルに、 [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]**AdventureWorks** データベースを同じデータベース内の同等のテーブルです。  
  
> [!IMPORTANT]
>  このサンプルは、「[Creating Tables for the Bulk Copy Examples](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb)」で説明しているように作業テーブルを作成してからでないと動作しません。 このコードでは、**SqlBulkCopy** だけを使用した構文について説明します。 簡単かつ迅速に、TRANSACT\-SQL の使用が元とコピー先のテーブルが同じ SQL Server インスタンスである場合は、 `INSERT … SELECT` ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks BulkCopy.Single\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">一括コピー操作を実行するために使用される既に開いている <see cref="T:System.Data.SqlClient.SqlConnection" /> インスタンス。 接続文字列で <see langword="Integrated Security = true" /> を使用しない場合、<see cref="T:System.Data.SqlClient.SqlCredential" /> を使用することによって、接続文字列内でユーザー ID とパスワードをテキストとして指定する場合よりも安全にユーザー ID とパスワードを渡すことができます。</param>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlConnection" /> の指定されたオープン インスタンスを使用して、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの新しいインスタンスを初期化します</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 接続があるため既に開いているときに、 <xref:System.Data.SqlClient.SqlBulkCopy> インスタンスが初期化されて、接続は後に開いたまま、 <xref:System.Data.SqlClient.SqlBulkCopy> インスタンスが閉じられています。  
  
 場合、 `connection` 引数が null の場合、 <xref:System.ArgumentNullException> がスローされます。  
  
   
  
## 例  
 次のコンソール アプリケーションでは、データの一括読み込みが既に開いている接続を使用する方法を示します。 この例では、 <xref:System.Data.SqlClient.SqlDataReader> からデータをコピーするために使用、 **Production.Product** テーブルに、 [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]**AdventureWorks** データベースを同じデータベース内の同等のテーブルです。 この例では、デモンストレーションを目的としてのみです。 使用すべきでない `SqlBulkCopy` 運用アプリケーションで同じデータベース内の別の 1 つのテーブルからデータを移動します。 SQL Server 上にあるソース データがいないことに注意してください。読み取ることができる任意のデータ ソースを使用する、 <xref:System.Data.IDataReader> に読み込まれたか、 <xref:System.Data.DataTable>です。  
  
> [!IMPORTANT]
>  このサンプルは、「[Creating Tables for the Bulk Copy Examples](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb)」で説明しているように作業テーブルを作成してからでないと動作しません。 このコードでは、**SqlBulkCopy** だけを使用した構文について説明します。 簡単かつ迅速に、TRANSACT\-SQL の使用が元とコピー先のテーブルが同じ SQL Server インスタンスである場合は、 `INSERT … SELECT` ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks BulkCopy.Single\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">
          <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> インスタンスで使用するために開かれる接続を定義する文字列。 接続文字列で <see langword="Integrated Security = true" /> が使用されない場合、<see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> または <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> と <see cref="T:System.Data.SqlClient.SqlCredential" /> を使用して、接続文字列内にテキストとしてユーザー ID とパスワードを指定する場合よりも安全にユーザー ID とパスワードを渡すことができます。</param>
        <summary>指定された <paramref name="connectionString" /> に基づいて、<see cref="T:System.Data.SqlClient.SqlConnection" /> の新しいインスタンスを初期化して開きます。 コンストラクターは、<see cref="T:System.Data.SqlClient.SqlConnection" /> を使用して、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 接続は、バルク コピー操作の最後に自動的に閉じられます。  
  
 場合 `connectionString` が null の場合、 <xref:System.ArgumentNullException> がスローされます。 場合 `connectionString` 空の文字列には、 <xref:System.ArgumentException> がスローされます。  
  
   
  
## 例  
 次のコンソール アプリケーションでは、データの一括読み込みを文字列として指定された接続を使用して、方法を示します。 接続が自動的に終了するときに、 <xref:System.Data.SqlClient.SqlBulkCopy> インスタンスが閉じています。  
  
 この例では、ソース データが最初に SQL Server テーブルから読み取る、 <xref:System.Data.SqlClient.SqlDataReader> インスタンス。 ソース データが SQL Server 上にある必要はありません。読み取ることができる任意のデータ ソースを使用する、 <xref:System.Data.IDataReader> に読み込まれたか、 <xref:System.Data.DataTable>です。  
  
> [!IMPORTANT]
>  このサンプルは、「[Bulk Copy Example Setup](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb)」で説明しているように作業テーブルを作成してからでないと動作しません。 このコードでは、**SqlBulkCopy** だけを使用した構文について説明します。 簡単かつ迅速に、TRANSACT\-SQL の使用が元とコピー先のテーブルが同じ SQL Server インスタンスである場合は、 `INSERT … SELECT` ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">
          <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> インスタンスで使用するために開かれる接続を定義する文字列。 接続文字列で <see langword="Integrated Security = true" /> を使用しない場合、<see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> または <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> と <see cref="T:System.Data.SqlClient.SqlCredential" /> を使用することによって、接続文字列内でユーザー ID とパスワードをテキストとして指定する場合よりも安全にユーザー ID とパスワードを渡すことができます。</param>
        <param name="copyOptions">コピー先のテーブルにコピーするデータ ソース行を決定する、<see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 列挙型の値の組み合わせ。</param>
        <summary>指定した <paramref name="connectionString" /> に基づいて、<see cref="T:System.Data.SqlClient.SqlConnection" /> の新しいインスタンスを初期化して開きます。 コンストラクターは、<see cref="T:System.Data.SqlClient.SqlConnection" /> を使用して、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの新しいインスタンスを初期化します。<see cref="T:System.Data.SqlClient.SqlConnection" /> インスタンスは、<paramref name="copyOptions" /> パラメーターで指定したオプションに従って動作します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内のすべての一括コピー オプションに関する詳細な情報を取得できます、 <xref:System.Data.SqlClient.SqlBulkCopyOptions> トピックです。  
  
   
  
## 例  
 次のコンソール アプリケーションでは、文字列として指定された接続を使用して一括読み込みを実行する方法を示します。 変換先テーブルを読み込むときに、ソース テーブルの id 列の値を使用する設定されています。 この例では、ソース データが最初に SQL Server テーブルから読み取る、 <xref:System.Data.SqlClient.SqlDataReader> インスタンス。 ソース テーブルと変換先テーブルには、Id 列が含まれます。 既定では、新しい値を **Identity** 追加した各行のコピー先テーブルの列を生成します。 この例では、オプションが設定を使用するバルク ロード処理を強制的の接続が開かれる、 **Identity** 代わりに、ソース テーブルから値です。 オプションで、でサンプルを実行する方法、一括読み込みの動作をどのように影響するかを確認する **dbo です。BulkCopyDemoMatchingColumns** テーブルが空です。 すべての行は、ソースから読み込みます。 テーブルを空にせずに、サンプルをもう一度し、実行します。 例外がスローされ、コードは、主キー制約違反があったため、行が追加されなかったことを通知するコンソールにメッセージを書き込みます。  
  
> [!IMPORTANT]
>  このサンプルは、「[Creating Tables for the Bulk Copy Examples](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb)」で説明しているように作業テーブルを作成してからでないと動作しません。 このコードでは、**SqlBulkCopy** だけを使用した構文について説明します。 簡単かつ迅速に、TRANSACT\-SQL の使用が元とコピー先のテーブルが同じ SQL Server インスタンスである場合は、 `INSERT … SELECT` ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">一括コピーを実行するために使用される、既に開いている <see cref="T:System.Data.SqlClient.SqlConnection" /> インスタンス。 接続文字列で <see langword="Integrated Security = true" /> を使用しない場合、<see cref="T:System.Data.SqlClient.SqlCredential" /> を使用することによって、接続文字列内でユーザー ID とパスワードをテキストとして指定する場合よりも安全にユーザー ID とパスワードを渡すことができます。</param>
        <param name="copyOptions">コピー先のテーブルにコピーするデータ ソース行を決定する、<see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> 列挙型の値の組み合わせ。</param>
        <param name="externalTransaction">一括コピーが実行される既存の <see cref="T:System.Data.SqlClient.SqlTransaction" /> インスタンス。</param>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlConnection" /> の指定された既存のオープン インスタンスを使用して、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの新しいインスタンスを初期化します。<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> インスタンスは、<paramref name="copyOptions" /> パラメーターで指定したオプションに従って動作します。 null 以外の <see cref="T:System.Data.SqlClient.SqlTransaction" /> が指定された場合、コピー操作はトランザクション内で実行されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オプションを含める場合 `UseInternalTransaction` と `externalTransaction` 引数が null でない、 **InvalidArgumentException** がスローされます。  
  
 使用する方法を示す例について `SqlBulkCopy` トランザクションでは、次を参照してください。 [Performing a Bulk Copy Operation in a Transaction](http://msdn.microsoft.com/ja-jp/f6f0cbc9-f7bf-4d6e-875f-ad1ba0b4aa62)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>各バッチ内の行数。 各バッチの最後に、バッチの行がサーバーに送信されます。</summary>
        <value>
          <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> プロパティの整数値。値が設定されていない場合は 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バッチが完了したら場合 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 行が処理された、または変換先データ ソースに送信する行がありません。  
  
 \(既定値\) をそれぞれ示しますゼロ <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 操作が 1 つのバッチ。  
  
 場合、 <xref:System.Data.SqlClient.SqlBulkCopy> なくインスタンスが宣言された、 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> オプション行が実際には、サーバーに送信されます <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 行で、時間がないトランザクションに関連するアクションを実行します。 場合 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> が有効で行の各バッチは、別のトランザクションとして挿入します。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> プロパティは、いつでも設定できます。 一括コピーが既に実行中に、現在のバッチは、前のバッチ サイズに従ってサイズします。 その後のバッチでは、新しいサイズを使用します。 場合、 <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> の初期値 0 と中に変更された、 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 操作が既に進行中、操作が単一のバッチとしてデータを読み込みます。 その後 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> に対して同じ操作を <xref:System.Data.SqlClient.SqlBulkCopy> インスタンスを使用して、新しい <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>します。  
  
   
  
## 例  
 次のコンソール アプリケーションでは、50 行のバッチで一括で読み込む方法を示します。 例の示すについてどのように <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> 、トランザクションとの連携を参照してください [Transaction and Bulk Copy Operations](http://msdn.microsoft.com/ja-jp/f6f0cbc9-f7bf-4d6e-875f-ad1ba0b4aa62)します。  
  
 この例では、ソース データが最初に SQL Server テーブルから読み取る、 <xref:System.Data.SqlClient.SqlDataReader> インスタンス。 ソース データが SQL Server 上にある必要はありません。読み取ることができる任意のデータ ソースを使用する、 <xref:System.Data.IDataReader> に読み込まれたか、 <xref:System.Data.DataTable>です。  
  
> [!IMPORTANT]
>  このサンプルは、「[Bulk Copy Example Setup](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb)」で説明しているように作業テーブルを作成してからでないと動作しません。 このコードでは、**SqlBulkCopy** だけを使用した構文について説明します。 簡単かつ迅速に、TRANSACT\-SQL の使用が元とコピー先のテーブルが同じ SQL Server インスタンスである場合は、 `INSERT … SELECT` ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイムアウトになる前に操作が完了するまでの秒数。</summary>
        <value>
          <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" /> プロパティの整数値。 既定値は 30 秒です。 値 0 は無制限を意味します。一括コピーは無期限に待機します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 操作がタイムアウトになった場合、トランザクションはコミットされませんし、変換先テーブルからコピーされるすべての行が削除されます。  
  
   
  
## 例  
 次のコンソール アプリケーションを 60 秒間にタイムアウトを変更する方法を示してとデータの一括読み込みします。  
  
 この例では、ソース データが最初から読み取り、 [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] テーブルを <xref:System.Data.SqlClient.SqlDataReader> インスタンス。 ソース データが上にある必要はありません [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]; を読み取ることができる任意のデータ ソースを使用する、 <xref:System.Data.IDataReader> に読み込まれたか、 <xref:System.Data.DataTable>です。  
  
> [!IMPORTANT]
>  このサンプルは、「[Creating Tables for the Bulk Copy Examples](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb)」で説明しているように作業テーブルを作成してからでないと動作しません。 このコードでは、**SqlBulkCopy** だけを使用した構文について説明します。 ソースと宛先テーブルが同じ場合 [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] 簡単かつ迅速に使用するには、インスタンス、 [!INCLUDE[tsql](~/includes/tsql-md.md)]`INSERT … SELECT` データをコピーするステートメントです。  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> インスタンスを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 After you call a <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> on the <xref:System.Data.SqlClient.SqlBulkCopy> object, no other operation will succeed. Calls to the <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> method will throw an <xref:System.InvalidOperationException>.  
  
 Calling the <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> method from the <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> event causes an <xref:System.InvalidOperationException> to be thrown.  
  
 Note that open <xref:System.Data.SqlClient.SqlBulkCopy> instances are closed implicitly at the end of a **languageKeyword tag is not supported!!!!**  
 block.  
  
   
  
## 例  
 The following example uses the same <xref:System.Data.SqlClient.SqlBulkCopy> instance to add sales orders and their associated details to two destination tables. Because the **legacyBold tag is not supported!!!!**  
 sales order tables are large, the sample reads only orders placed by a certain account number and bulk copies those orders and details to the destination tables. The <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> method is used only after both bulk copy operations are complete.  
  
> [!IMPORTANT]
>  This sample will not run unless you have created the work tables as described in [Creating Tables for the Bulk Copy Examples](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb). This code is provided to demonstrate the syntax for using **legacyBold tag is not supported!!!!**  
>  only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact\-SQL `INSERT … SELECT` statement to copy the data.  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" /> は項目のコレクションを返します。 列マッピングは、データ ソース中の列とターゲット中の列の間の関係を定義します。</summary>
        <value>列マッピングのコレクション。 既定では、空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the data source and the destination table have the same number of columns, and the ordinal position of each source column within the data source matches the ordinal position of the corresponding destination column, the <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection is unnecessary. However, if the column counts differ, or the ordinal positions are not consistent, you must use <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> to make sure that data is copied into the correct columns.  
  
 During the execution of a bulk copy operation, this collection can be accessed, but it cannot be changed. Any attempt to change it will throw an <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバー上の宛先テーブルの名前。</summary>
        <value>
          <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティの文字列値。または、値が指定されていない場合は null。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> has not been set when <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> is called, an <xref:System.ArgumentNullException> is thrown.  
  
 If <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> is modified while a <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operation is running, the change does not affect the current operation. The new <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> value is used the next time a <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> method is called.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> is a three\-part name \(`<database>.<owningschema>.<name>`\). You can qualify the table name with its database and owning schema if you choose. However, if the table name uses an underscore \("\_"\) or any other special characters, you must escape the name using surrounding brackets as in \(`[<database>.<owningschema>.<name_01>]`\). For more information, see "Identifiers" in SQL Server Books Online.  
  
 You can bulk\-copy data to a temporary table by using a value such as `tempdb..#table` or `tempdb.<owner>.#table` for the <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> property.  
  
   
  
## 例  
 The following console application demonstrates how to bulk load data using a connection that is already open. The destination table is a table in the **legacyBold tag is not supported!!!!**  
 database.  
  
 In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  This sample will not run unless you have created the work tables as described in [Creating Tables for the Bulk Copy Examples](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb). This code is provided to demonstrate the syntax for using **legacyBold tag is not supported!!!!**  
>  only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact\-SQL `INSERT … SELECT` statement to copy the data.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.IDataReader" /> オブジェクトからデータをストリーミングする <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトを有効または無効にします。</summary>
        <value>
          <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトが <see cref="T:System.Data.IDataReader" /> オブジェクトからデータをストリーミングできる場合は <see langword="true" />。それ以外の場合は false。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> is **languageKeyword tag is not supported!!!!**  
, <xref:System.Data.SqlClient.SqlBulkCopy> reads from an <xref:System.Data.IDataReader> object using <xref:System.Data.CommandBehavior.SequentialAccess>, optimizing memory usage by using the <xref:System.Data.IDataReader> streaming capabilities. When it’s set to false, the <xref:System.Data.SqlClient.SqlBulkCopy> class loads all the data returned by the <xref:System.Data.IDataReader> object into memory before sending it to [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] or SQL Azure.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通知イベントを生成する前に処理する行の数を定義します。</summary>
        <value>
          <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> プロパティの整数値。プロパティが設定されていない場合は 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、バルク コピー操作の進行状況を示すユーザー インターフェイス コンポーネント用です。 通知イベントを生成する前に処理する行の数を示します。<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> プロパティは、バルク コピー操作が進行中であっても、いつでも設定できます。 一括コピー操作中に行われた変更は、次の通知の後にも反映されます。 新しい設定は、同じインスタンス上の後続のすべての操作に適用されます。  
  
 場合 <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 0 より小さい数値に設定するには、 <xref:System.ArgumentOutOfRangeException> がスローされます。  
  
   
  
## 例  
 次のコンソール アプリケーションでは、データの一括読み込みが既に開いている接続を使用する方法を示します。<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> ごとの 50 行がテーブルにコピーした後、イベント ハンドラーが呼び出されるように、プロパティを設定します。  
  
 この例では、接続は、まず使用する SQL Server テーブルからデータを読み取る、 <xref:System.Data.SqlClient.SqlDataReader> インスタンス。 一括コピー データを 2 つ目の接続を開きます。 SQL Server 上にあるソース データがいないことに注意してください。読み取ることができる任意のデータ ソースを使用する、 <xref:System.Data.IDataReader> に読み込まれたか、 <xref:System.Data.DataTable>です。  
  
> [!IMPORTANT]
>  このサンプルは、「[Creating Tables for the Bulk Copy Examples](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb)」で説明しているように作業テーブルを作成してからでないと動作しません。 このコードでは、**SqlBulkCopy** だけを使用した構文について説明します。 簡単かつ迅速に、TRANSACT\-SQL の使用が元とコピー先のテーブルが同じ SQL Server インスタンスである場合は、 `INSERT … SELECT` ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> プロパティによって指定された行数が処理されるたびに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 注意してください、設定の <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> と <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> は独立しています。 受信確認、 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> イベントはすべての行がサーバーに送信またはコミットされたことを意味しません。  
  
 SqlBulkCopy.Close を呼び出すことはできません \(<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>\) または SqlConnection.Close \(<xref:System.Data.SqlClient.SqlConnection.Close%2A>\) このイベントからです。 これにより、実行、 <xref:System.InvalidOperationException> がスローされ、および <xref:System.Data.SqlClient.SqlBulkCopy> オブジェクトの状態は変更されません。 ユーザーがそのイベントから操作をキャンセルする場合、 <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> のプロパティ、 <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> 使用できます。 \(参照 [Performing a Bulk Copy Operation in a Transaction](http://msdn.microsoft.com/ja-jp/f6f0cbc9-f7bf-4d6e-875f-ad1ba0b4aa62) の使用例について、 <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> プロパティです\)。  
  
 トランザクション アクティビティなどの操作はサポートされておらず、バルク コピー操作の実行中に接続され、中に使用された同一の接続を使用しないことをお勧めします <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> イベントです。 ただし、別の接続を開くことができます。  
  
   
  
## 例  
 次のコンソール アプリケーションでは、データの一括読み込みが既に開いている接続を使用する方法を示します。<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> ごとの 50 行がテーブルにコピーした後、イベント ハンドラーが呼び出されるように、プロパティを設定します。  
  
 この例では、接続は、まず使用する SQL Server テーブルからデータを読み取る、 <xref:System.Data.SqlClient.SqlDataReader> インスタンス。 SQL Server 上にあるソース データがいないことに注意してください。読み取ることができる任意のデータ ソースを使用する、 <xref:System.Data.IDataReader> に読み込まれたか、 <xref:System.Data.DataTable>です。  
  
> [!IMPORTANT]
>  このサンプルは、「[Creating Tables for the Bulk Copy Examples](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb)」で説明しているように作業テーブルを作成してからでないと動作しません。 このコードでは、**SqlBulkCopy** だけを使用した構文について説明します。 簡単かつ迅速に、TRANSACT\-SQL の使用が元とコピー先のテーブルが同じ SQL Server インスタンスである場合は、 `INSERT … SELECT` ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Dispose` を使い終わったら <xref:System.Data.SqlClient.SqlBulkCopy> を呼び出します。`Dispose` メソッドによって、<xref:System.Data.SqlClient.SqlBulkCopy> は使用不可の状態になります。 呼び出した後 `Dispose`, 、に対するすべての参照を解放する必要があります、 <xref:System.Data.SqlClient.SqlBulkCopy> ガベージ コレクターがメモリをクリアできるようにする、 <xref:System.Data.SqlClient.SqlBulkCopy> によって占有されていた。  
  
 詳細については、[Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) および [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9) を参照してください。  
  
> [!NOTE]
>  `Dispose` への最後の参照を解放する前に、必ず <xref:System.Data.SqlClient.SqlBulkCopy> を呼び出してください。 そうしないと、ガベージ コレクターが <xref:System.Data.SqlClient.SqlBulkCopy> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データ ソースから、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定された宛先のテーブルにすべての行をコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数のアクティブな結果セット \(MARS\) 場合は、無効になっている <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> ビジー状態の接続を作成します。 MARS が有効になっている場合への呼び出しをインターリーブできます <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 同じ接続では、その他のコマンドを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">行がコピー先テーブルにコピーされる <see cref="T:System.Data.Common.DbDataReader" />。</param>
        <summary>示された <see cref="T:System.Data.Common.DbDataReader" /> 配列から、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定された宛先のテーブルにすべての行をコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">コピー先テーブルにコピーされる <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
        <summary>示された <see cref="T:System.Data.DataRow" /> 配列から、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定された宛先のテーブルにすべての行をコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一括コピー操作実行中は、関連する宛先 <xref:System.Data.SqlClient.SqlConnection> がビジー状態機能を提供するとの接続で実行できるその他の操作がありません。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> コレクションから、マップ、 <xref:System.Data.DataRow> 転送先データベースのテーブルの列です。  
  
   
  
## 例  
 次のコンソール アプリケーションでは、データの一括読み込みから、 <xref:System.Data.DataRow> 配列。 変換先テーブル内のテーブルは、 **AdventureWorks** データベースです。  
  
 この例では、 <xref:System.Data.DataTable> 実行時に作成します。 1 つの行が選択されている、 <xref:System.Data.DataTable> を変換先テーブルにコピーします。  
  
> [!IMPORTANT]
>  このサンプルは、「[Creating Tables for the Bulk Copy Examples](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb)」で説明しているように作業テーブルを作成してからでないと動作しません。 このコードでは、**SqlBulkCopy** だけを使用した構文について説明します。 簡単かつ迅速に、TRANSACT\-SQL の使用が元とコピー先のテーブルが同じ SQL Server インスタンスである場合は、 `INSERT … SELECT` ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">行が宛先テーブルにコピーされる <see cref="T:System.Data.DataTable" />。</param>
        <summary>指定された <see cref="T:System.Data.DataTable" /> のすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定される宛先テーブルにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての行、 <xref:System.Data.DataTable> が削除されているものを除き、変換先テーブルにコピーします。  
  
 一括コピー操作実行中は、関連する宛先 <xref:System.Data.SqlClient.SqlConnection> がビジー状態機能を提供するとの接続で実行できるその他の操作がありません。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> コレクションから、マップ、 <xref:System.Data.DataTable> 転送先データベースのテーブルの列です。  
  
   
  
## 例  
 次のコンソール アプリケーションでは、データの一括読み込みから、 <xref:System.Data.DataTable>です。 変換先テーブル内のテーブルは、 **AdventureWorks** データベースです。  
  
 この例では、 <xref:System.Data.DataTable> は実行時に作成されのソースである、 `SqlBulkCopy` 操作します。  
  
> [!IMPORTANT]
>  このサンプルは、「[Creating Tables for the Bulk Copy Examples](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb)」で説明しているように作業テーブルを作成してからでないと動作しません。 このコードでは、**SqlBulkCopy** だけを使用した構文について説明します。 簡単かつ迅速に、TRANSACT\-SQL の使用が元とコピー先のテーブルが同じ SQL Server インスタンスである場合は、 `INSERT … SELECT` ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">行が宛先テーブルにコピーされる <see cref="T:System.Data.IDataReader" />。</param>
        <summary>指定された <see cref="T:System.Data.IDataReader" /> のすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定される宛先テーブルにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コピー操作は、リーダーで利用可能な次の行から開始されます。 ほとんどの場合、リーダーがだけ返した <xref:System.Data.IDbCommand.ExecuteReader%2A> または同様の呼び出し、次の使用可能な行が最初の行であるためです。 複数の結果を処理するには、呼び出す <xref:System.Data.IDataReader.NextResult%2A> 呼び出し、データ リーダー <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 再度します。  
  
 使用して <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> リーダーの状態を変更します。 メソッドがアンマネージ <xref:System.Data.IDataReader.Read%2A> false が返された、操作が中止されると、あるいは、エラーが発生するまでです。 つまり、データ リーダーが結果セットの最後の別の状態に含まれる場合、 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 操作が完了しました。  
  
 一括コピー操作実行中は、関連する宛先 <xref:System.Data.SqlClient.SqlConnection> がビジー状態機能を提供するとの接続で実行できるその他の操作がありません。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> コレクション、データからリーダーの列にマップ先のデータベース テーブル。  
  
   
  
## 例  
 次のコンソール アプリケーションでは、データの一括読み込みから、 <xref:System.Data.SqlClient.SqlDataReader>です。 変換先テーブル内のテーブルは、 **AdventureWorks** データベースです。  
  
> [!IMPORTANT]
>  このサンプルは、「[Creating Tables for the Bulk Copy Examples](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb)」で説明しているように作業テーブルを作成してからでないと動作しません。 このコードでは、**SqlBulkCopy** だけを使用した構文について説明します。 簡単かつ迅速に、TRANSACT\-SQL の使用が元とコピー先のテーブルが同じ SQL Server インスタンスである場合は、 `INSERT … SELECT` ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">行がコピー先テーブルにコピーされる <see cref="T:System.Data.DataTable" />。</param>
        <param name="rowState">
          <see cref="T:System.Data.DataRowState" /> 列挙体の値。 行の状態に一致する行のみが、コピー先にコピーされます。</param>
        <summary>提供された <see cref="T:System.Data.DataTable" /> 内の提供された行の状態と一致する行のみを、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定されたコピー先のテーブルにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ある行だけ、 <xref:System.Data.DataTable> に示されている状態にある、 `rowState` 引数削除されていないと、変換先テーブルにコピーされます。  
  
> [!NOTE]
>  場合 <xref:System.Data.DataRowState.Deleted> が指定されている、 <xref:System.Data.DataRowState.Unchanged>, 、<xref:System.Data.DataRowState.Added>, 、および <xref:System.Data.DataRowState.Modified> 行は、サーバーにコピーすることもできます。 例外は発生しません。  
  
 一括コピー操作実行中は、関連する宛先 <xref:System.Data.SqlClient.SqlConnection> がビジー状態機能を提供するとの接続で実行できるその他の操作がありません。  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> コレクションから、マップ、 <xref:System.Data.DataTable> 転送先データベースのテーブルの列です。  
  
   
  
## 例  
 次のコンソール アプリケーションでは、一括読み込みの行のみ、 <xref:System.Data.DataTable> 、指定した状態に一致します。 この場合、変更されていない行だけが追加されます。 変換先テーブル内のテーブルは、 **AdventureWorks** データベースです。  
  
 この例では、 <xref:System.Data.DataTable> 3 つの実行時に作成される行を追加します。 前に、 <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> メソッドが実行され、編集、行の 1 つです。<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> メソッドが呼び出された、 `DataRowState.Unchanged``rowState` 引数、2 つの変更されていない行だけが、変換先に一括コピーします。  
  
> [!IMPORTANT]
>  このサンプルは、「[Creating Tables for the Bulk Copy Examples](http://msdn.microsoft.com/ja-jp/d4dde6ac-b8b6-4593-965a-635c8fb2dadb)」で説明しているように作業テーブルを作成してからでないと動作しません。 このコードでは、**SqlBulkCopy** だけを使用した構文について説明します。 簡単かつ迅速に、TRANSACT\-SQL の使用が元とコピー先のテーブルが同じ SQL Server インスタンスである場合は、 `INSERT … SELECT` ステートメント、データをコピーします。  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同期バージョンの <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" />。データ ソースのすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定された宛先テーブルにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数のアクティブな結果セット \(MARS\) 場合は、無効になっている <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> ビジー状態の接続を作成します。 MARS が有効になっている場合への呼び出しをインターリーブできます <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 同じ接続では、その他のコマンドを使用します。  
  
 1 つが失敗した場合、ロールバックが行の数は、いくつかの方法によって異なります。  
  
-   場合 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> を指定します。  
  
-   ある場合は、独自のトランザクション。  
  
-   <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> の値。  
  
 サーバーの現在のバッチにデータを送信中にエラーがある場合 \(で指定されたとおり <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>\) はロールバックされます。 場合 <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> が指定されていない独自のトランザクションがあると、トランザクション全体はロールバックされます \(これは、すべての以前バッチが含まれています\)。  
  
 使用 <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> をサーバーにコピーされた行の数を知る。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">行が宛先テーブルにコピーされる <see cref="T:System.Data.Common.DbDataReader" />。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />。指定された <see cref="T:System.Data.Common.DbDataReader" /> 配列から、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定されたコピー先テーブルにすべての行をコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">コピー先テーブルにコピーされる <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />。示された <see cref="T:System.Data.DataRow" /> 配列から、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定された宛先のテーブルにすべての行をコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] 用データ プロバイダーの非同期プログラミングの詳細については、「[Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> を複数回呼び出す。  
  
 タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> を呼び出す。  
  
 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> の実行中に、接続が切断または閉じられます。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
 タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられる。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">行が宛先テーブルにコピーされる <see cref="T:System.Data.DataTable" />。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />。示された <see cref="T:System.Data.DataTable" /> のすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定された宛先のテーブルにコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] 用データ プロバイダーの非同期プログラミングの詳細については、「[Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> を複数回呼び出す。  
  
 タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> を呼び出す。  
  
 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> の実行中に、接続が切断または閉じられます。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
 タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられる。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">行が宛先テーブルにコピーされる <see cref="T:System.Data.IDataReader" />。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />。示された <see cref="T:System.Data.IDataReader" /> のすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定された宛先のテーブルにコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] 用データ プロバイダーの非同期プログラミングの詳細については、「[Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> を複数回呼び出す。  
  
 タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> を呼び出す。  
  
 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> の実行中に、接続が切断または閉じられます。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
 タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられます。  
  
 完了した <see cref="T:System.Threading.Tasks.Task" /> が返される前に、<see cref="T:System.Data.IDataReader" /> が閉じられました。  
  
 完了した <see cref="T:System.Threading.Tasks.Task" /> が返される前に、<see cref="T:System.Data.IDataReader" /> の関連付けられている接続が閉じられました。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">行がコピー先テーブルにコピーされる <see cref="T:System.Data.Common.DbDataReader" />。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値は、このメソッドを <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" /> と同じにします。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />。指定された <see cref="T:System.Data.Common.DbDataReader" /> 配列から、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定されたコピー先テーブルにすべての行をコピーします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="rows">コピー先テーブルにコピーされる <see cref="T:System.Data.DataRow" /> オブジェクトの配列。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値は、このメソッドを <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と同じにします。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />。示された <see cref="T:System.Data.DataRow" /> 配列から、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定された宛先のテーブルにすべての行をコピーします。  
  
 キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄することを要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] 用データ プロバイダーの非同期プログラミングの詳細については、「[Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> を複数回呼び出す。  
  
 タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> を呼び出す。  
  
 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> の実行中に、接続が切断または閉じられます。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
 タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられる。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">行がコピー先テーブルにコピーされる <see cref="T:System.Data.DataTable" />。</param>
        <param name="rowState">
          <see cref="T:System.Data.DataRowState" /> 列挙体の値。 行の状態に一致する行のみが、コピー先にコピーされます。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />。提供された <see cref="T:System.Data.DataTable" /> 内の提供された行の状態と一致する行のみを、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定されたコピー先のテーブルにコピーします。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] 用データ プロバイダーの非同期プログラミングの詳細については、「[Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> を複数回呼び出す。  
  
 タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> を呼び出す。  
  
 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> の実行中に、接続が切断または閉じられます。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
 タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられる。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">行が宛先テーブルにコピーされる <see cref="T:System.Data.DataTable" />。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値は、このメソッドを <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と同じにします。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />。示された <see cref="T:System.Data.DataTable" /> のすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定された宛先のテーブルにコピーします。  
  
 キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄することを要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] 用データ プロバイダーの非同期プログラミングの詳細については、「[Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> を複数回呼び出す。  
  
 タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> を呼び出す。  
  
 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> の実行中に、接続が切断または閉じられます。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
 タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられる。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">行がコピー先テーブルにコピーされる <see cref="T:System.Data.IDataReader" />。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値は、このメソッドを <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と同じにします。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />。示された <see cref="T:System.Data.IDataReader" /> のすべての行を、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> プロパティで指定された宛先のテーブルにコピーします。  
  
 キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄することを要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] 用データ プロバイダーの非同期プログラミングの詳細については、「[Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> を複数回呼び出す。  
  
 タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> を呼び出す。  
  
 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> の実行中に、接続が切断または閉じられます。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
 タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられます。  
  
 完了した <see cref="T:System.Threading.Tasks.Task" /> が返される前に、<see cref="T:System.Data.IDataReader" /> が閉じられました。  
  
 完了した <see cref="T:System.Threading.Tasks.Task" /> が返される前に、<see cref="T:System.Data.IDataReader" /> の関連付けられている接続が閉じられました。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">行が宛先テーブルにコピーされる <see cref="T:System.Data.DataTable" />。</param>
        <param name="rowState">
          <see cref="T:System.Data.DataRowState" /> 列挙体の値。 行の状態に一致する行のみが、コピー先にコピーされます。</param>
        <param name="cancellationToken">取り消し命令。 このパラメーターの <see cref="P:System.Threading.CancellationToken.None" /> 値は、このメソッドを <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> と同じにします。</param>
        <summary>非同期バージョンの <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />。提供された <see cref="T:System.Data.DataTable" /> 内の提供された行の状態と一致する行のみを、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトの <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> のプロパティで指定されたコピー先のテーブルにコピーします。  
  
 キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄することを要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] 用データ プロバイダーの非同期プログラミングの詳細については、「[Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> を複数回呼び出す。  
  
 タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> と <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> を呼び出す。  
  
 <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> の実行中に、接続が切断または閉じられます。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlBulkCopy" /> オブジェクトがメソッドの実行中に閉じられた。  
  
 タスク オブジェクトで返されたため、接続プールがタイムアウトした。  
  
 タスク オブジェクトで返されたため、<see cref="T:System.Data.SqlClient.SqlConnection" /> オブジェクトはメソッドの実行前に閉じられる。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">タスク オブジェクトで返されたため、接続を開くときに発生した SQL Server によって返されるすべてのエラー。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>