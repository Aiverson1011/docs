<Type Name="SqlCommandBuilder" FullName="System.Data.SqlClient.SqlCommandBuilder">
  <TypeSignature Language="C#" Value="public sealed class SqlCommandBuilder : System.Data.Common.DbCommandBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlCommandBuilder extends System.Data.Common.DbCommandBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlCommandBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbCommandBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>SQL Server データベースに関連付けられた <see cref="T:System.Data.DataSet" /> への変更を調整するための単一テーブル コマンドを自動的に生成します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.SqlClient.SqlDataAdapter> に加えられた変更を調整するために必要な TRANSACT\-SQL ステートメントを自動的に生成しない、 <xref:System.Data.DataSet> に関連付けられた SQL Server のインスタンス。 ただし、作成、 <xref:System.Data.SqlClient.SqlCommandBuilder> に設定した場合、単一テーブル更新のための TRANSACT\-SQL ステートメントを自動的に生成するオブジェクト、 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> のプロパティ、 <xref:System.Data.SqlClient.SqlDataAdapter>です。 次に、設定のしないその他の TRANSACT\-SQL ステートメントはによって生成される、 <xref:System.Data.SqlClient.SqlCommandBuilder>です。  
  
 <xref:System.Data.SqlClient.SqlCommandBuilder> のリスナーとして登録 <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> イベントを設定する場合、 <xref:System.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A> プロパティです。 関連付けることができますのみ <xref:System.Data.SqlClient.SqlDataAdapter> または <xref:System.Data.SqlClient.SqlCommandBuilder> 互いにオブジェクトを一度に 1 つです。  
  
 INSERT、UPDATE、または DELETE ステートメントを生成する、 <xref:System.Data.SqlClient.SqlCommandBuilder> を使用して、 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> プロパティを自動的に必要な一連のメタデータを取得します。 変更した場合、 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> を呼び出して最初の更新の後など、メタデータが取得された後、 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> にメタデータを更新する方法です。  
  
 `SelectCommand` は少なくとも 1 つの主キーまたは一意の列を返す必要があります。 いずれも存在しない場合、 **InvalidOperation** 例外が生成され、コマンドは生成されません。  
  
 <xref:System.Data.SqlClient.SqlCommandBuilder> も使用して、 <xref:System.Data.SqlClient.SqlCommand.Connection%2A>, 、<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>, 、および <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> プロパティによって参照される、 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>です。 ユーザーが呼び出す必要があります <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 1 つ以上のこれらのプロパティが変更された場合、または、 <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> 自体は置き換えられます。 それ以外の場合、 <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, 、<xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, 、および <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> プロパティは、前回の値を保持します。  
  
 呼び出した場合 <xref:System.ComponentModel.Component.Dispose%2A>, 、 <xref:System.Data.SqlClient.SqlCommandBuilder> 関連付けが解除され、 <xref:System.Data.SqlClient.SqlDataAdapter>, 、され、生成されたコマンドは使用されなくします。  
  
   
  
## 例  
 次の例では、 <xref:System.Data.SqlClient.SqlCommand>, と共に、 <xref:System.Data.SqlClient.SqlDataAdapter> と <xref:System.Data.SqlClient.SqlConnection>, 、データ ソースから行を選択します。 この例は、接続文字列では、TRANSACT\-SQL SELECT ステートメントでは、クエリ文字列、データベース テーブルの名前を指定する文字列に渡されます。 作成し、 <xref:System.Data.SqlClient.SqlCommandBuilder>です。  
  
 [!code-csharp[Classic WebData SqlCommandBuilder\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommandBuilder/CS/Source.cs#1)]
 [!code-vb[Classic WebData SqlCommandBuilder\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommandBuilder/VB/Source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommandBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommandBuilder (System.Data.SqlClient.SqlDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.SqlClient.SqlDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">
          <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> の名前。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> 、関連付けクラス <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.SqlClient.SqlCommandBuilder> のリスナーとして登録 <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> によって生成されるイベント、 <xref:System.Data.SqlClient.SqlDataAdapter> このプロパティで指定します。  
  
 新しいインスタンスを作成するときに <xref:System.Data.SqlClient.SqlCommandBuilder>, 、すべての既存の <xref:System.Data.SqlClient.SqlCommandBuilder> に関連付けられた <xref:System.Data.SqlClient.SqlDataAdapter> がリリースされました。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyParameterInfo">
      <MemberSignature Language="C#" Value="protected override void ApplyParameterInfo (System.Data.Common.DbParameter parameter, System.Data.DataRow datarow, System.Data.StatementType statementType, bool whereClause);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ApplyParameterInfo(class System.Data.Common.DbParameter parameter, class System.Data.DataRow datarow, valuetype System.Data.StatementType statementType, bool whereClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Common.DbParameter" />
        <Parameter Name="datarow" Type="System.Data.DataRow" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="whereClause" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="parameter">To be added.</param>
        <param name="datarow">To be added.</param>
        <param name="statementType">To be added.</param>
        <param name="whereClause">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogLocation">
      <MemberSignature Language="C#" Value="public override System.Data.Common.CatalogLocation CatalogLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Common.CatalogLocation CatalogLocation" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.CatalogLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.CatalogLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定または取得、 <see cref="T:System.Data.Common.CatalogLocation" /> のインスタンスの <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> クラスです。</summary>
        <value>
          <see cref="T:System.Data.Common.CatalogLocation" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogSeparator">
      <MemberSignature Language="C#" Value="public override string CatalogSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CatalogSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インスタンスのカタログの区切り記号として使用される文字列を取得または設定、 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> クラスです。</summary>
        <value>インスタンスで使用するカタログの区切り記号を示し、文字列、 <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> クラスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataAdapter">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataAdapter DataAdapter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlDataAdapter DataAdapter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.DataAdapter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataAdapter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> オブジェクトをどの TRANSACT\-SQL ステートメントが自動的に生成します。</summary>
        <value>
          <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.SqlClient.SqlCommandBuilder> のリスナーとして登録 <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> によって生成されるイベント、 <xref:System.Data.SqlClient.SqlDataAdapter> このプロパティで指定します。  
  
 新しいインスタンスを作成するときに <xref:System.Data.SqlClient.SqlCommandBuilder>, 、すべての既存の <xref:System.Data.SqlClient.SqlCommandBuilder> に関連付けられた <xref:System.Data.SqlClient.SqlDataAdapter> がリリースされました。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeriveParameters">
      <MemberSignature Language="C#" Value="public static void DeriveParameters (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeriveParameters(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <see cref="T:System.Data.SqlClient.SqlCommand" /> パラメーター情報の派生元のストアド プロシージャを参照します。 派生パラメーターに追加されます、 <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> のコレクション、 <see cref="T:System.Data.SqlClient.SqlCommand" />です。</param>
        <summary>指定されたストアド プロシージャからパラメーター情報を取得、 <see cref="T:System.Data.SqlClient.SqlCommand" /> し、設定、 <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> の指定したコレクション <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `DeriveParameters` 既存のパラメーター情報を上書き、 `SqlDbCommand`です。  
  
 `DeriveParameters` データベースに追加の呼び出し情報を取得する必要があります。 パラメーター情報が事前にわかっている場合は、情報を明示的に設定するパラメーターのコレクションを作成するより効率的です。  
  
 使用できるだけ `DeriveParameters` ストアド プロシージャを使用します。 使用することはできません `DeriveParameters` 拡張ストアド プロシージャです。 使用することはできません `DeriveParameters` を設定する、 <xref:System.Data.SqlClient.SqlParameterCollection> パラメーター化された SELECT ステートメントなどの任意の TRANSACT\-SQL ステートメントを使用します。  
  
 詳細については、「[Using Stored Procedures with a Command](http://msdn.microsoft.com/ja-jp/537d8a2c-d40b-4000-83eb-bc1fcc93f707)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">コマンド テキストは、有効なストアド プロシージャ名ではありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDeleteCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>自動的に生成された取得 <see cref="T:System.Data.SqlClient.SqlCommand" /> 、データベースでの削除を実行するために必要なオブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションで使用できる、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> を返すために、情報やトラブルシューティングの方法が目的で、 <xref:System.Data.SqlClient.SqlCommand> 実行されるオブジェクト。  
  
 使用することも <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> 変更されたコマンドの基礎として。 たとえば、呼び出すことができます <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> し、変更、 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 値に設定してで明示的に設定する、 <xref:System.Data.SqlClient.SqlDataAdapter>です。  
  
 SQL ステートメントを生成した後、アプリケーションを明示的に呼び出します <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> でステートメントが変更された場合。 それ以外の場合、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> 前のステートメントは正しくない可能性がありますからの情報が使用されます。 SQL ステートメントは、アプリケーションがいずれかの <xref:System.Data.Common.DbDataAdapter.Update%2A> または <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>です。  
  
 詳細については、「[Automatically Generating Commands](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetDeleteCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetDeleteCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>自動的に生成された取得 <see cref="T:System.Data.SqlClient.SqlCommand" /> 、データベースでの削除を実行するために必要なオブジェクトです。</summary>
        <returns>自動的に生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> 削除を実行するために必要なオブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションで使用できる、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> を返すために、情報やトラブルシューティングの方法が目的で、 <xref:System.Data.SqlClient.SqlCommand> 実行されるオブジェクト。  
  
 使用することも <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> 変更されたコマンドの基礎として。 たとえば、呼び出すことができます <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> し、変更、 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 値に設定してで明示的に設定する、 <xref:System.Data.SqlClient.SqlDataAdapter>です。  
  
 SQL ステートメントを生成した後、アプリケーションを明示的に呼び出します <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> でステートメントが変更された場合。 それ以外の場合、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> 前のステートメントは正しくない可能性がありますからの情報が使用されます。 SQL ステートメントは、アプリケーションがいずれかの <xref:System.Data.Common.DbDataAdapter.Update%2A> または <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>です。  
  
 詳細については、「[Automatically Generating Commands](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetDeleteCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetDeleteCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">場合 <see langword="true" />, 、一致する列名が可能であれば、パラメーター名を生成します。 場合 <see langword="false" />, 、@p1、@p2 を生成し、具合です。</param>
        <summary>自動的に生成された取得 <see cref="T:System.Data.SqlClient.SqlCommand" /> 、データベースでの削除を実行するために必要なオブジェクトです。</summary>
        <returns>自動的に生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> 削除を実行するために必要なオブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションで使用できる、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> を返すために、情報やトラブルシューティングの方法が目的で、 <xref:System.Data.SqlClient.SqlCommand> 実行されるオブジェクト。  
  
 使用することも <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> 変更されたコマンドの基礎として。 たとえば、呼び出すことができます <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> し、変更、 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 値に設定してで明示的に設定する、 <xref:System.Data.SqlClient.SqlDataAdapter>です。  
  
 SQL ステートメントを生成した後、アプリケーションを明示的に呼び出します <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> でステートメントが変更された場合。 それ以外の場合、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> 前のステートメントは正しくない可能性がありますからの情報が使用されます。 SQL ステートメントは、アプリケーションがいずれかの <xref:System.Data.Common.DbDataAdapter.Update%2A> または <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>です。  
  
 パラメーター名を生成するときに、既定の動作では、@p1、@p2 などを使用して、さまざまなパラメーターです。 渡す `true` の `useColumnsForParameterNames` パラメーターさせることができます、 <xref:System.Data.OleDb.OleDbCommandBuilder> 代わりに列名に基づくパラメーターを生成します。 これは、次の条件を満たした場合にのみ成功します。  
  
-   <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> から返される、 **GetSchema** メソッドを呼び出すし、ではありません、 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> コレクションが指定されており、その長さが同じかまたは生成されたパラメーター名よりも大きいです。  
  
-   生成されたパラメーター名で指定した条件を満たしている、 <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> から返される、 **GetSchema** メソッドを呼び出すし、ではありません、 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> 正規表現のコレクション。  
  
-   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> から返される、 **GetSchema** メソッドを呼び出すし、ではありません、 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> コレクションを指定します。  
  
 詳細については、「[Automatically Generating Commands](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInsertCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>自動的に生成された取得 <see cref="T:System.Data.SqlClient.SqlCommand" /> データベースの挿入の実行に必要なオブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションで使用できる、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> を返すために、情報やトラブルシューティングの方法が目的で、 <xref:System.Data.SqlClient.SqlCommand> 実行されるオブジェクト。  
  
 使用することも <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> 変更されたコマンドの基礎として。 たとえば、呼び出すことができます <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> し、変更、 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 値に設定してで明示的に設定する、 <xref:System.Data.SqlClient.SqlDataAdapter>です。  
  
 アプリケーションが明示的に呼び出す必要があります: TRANSACT\-SQL ステートメントを生成した後 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> でステートメントが変更された場合。 それ以外の場合、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> 前のステートメントは正しくない可能性がありますからの情報が使用されます。 TRANSACT\-SQL ステートメントは、アプリケーションがいずれかの <xref:System.Data.Common.DbDataAdapter.Update%2A> または <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>です。  
  
 詳細については、「[Automatically Generating Commands](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetInsertCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetInsertCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>自動的に生成された取得 <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトがデータベースに挿入の実行に必要です。</summary>
        <returns>自動的に生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトが挿入の実行に必要です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションで使用できる、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> を返すために、情報やトラブルシューティングの方法が目的で、 <xref:System.Data.SqlClient.SqlCommand> 実行されるオブジェクト。  
  
 使用することも <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> 変更されたコマンドの基礎として。 たとえば、呼び出すことができます <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> し、変更、 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 値に設定してで明示的に設定する、 <xref:System.Data.SqlClient.SqlDataAdapter>です。  
  
 アプリケーションが明示的に呼び出す必要があります: TRANSACT\-SQL ステートメントを生成した後 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> でステートメントが変更された場合。 それ以外の場合、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> 前のステートメントは正しくない可能性がありますからの情報が使用されます。 TRANSACT\-SQL ステートメントは、アプリケーションがいずれかの <xref:System.Data.Common.DbDataAdapter.Update%2A> または <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>です。  
  
 詳細については、「[Automatically Generating Commands](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetInsertCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetInsertCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">場合 <see langword="true" />, 、一致する列名が可能であれば、パラメーター名を生成します。 場合 <see langword="false" />, 、@p1、@p2 を生成し、具合です。</param>
        <summary>自動的に生成された取得 <see cref="T:System.Data.SqlClient.SqlCommand" /> データベースの挿入の実行に必要なオブジェクトです。</summary>
        <returns>自動的に生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> 挿入の実行に必要なオブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションで使用できる、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> を返すために、情報やトラブルシューティングの方法が目的で、 <xref:System.Data.SqlClient.SqlCommand> 実行されるオブジェクト。  
  
 使用することも <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> 変更されたコマンドの基礎として。 たとえば、呼び出すことができます <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> し、変更、 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 値に設定してで明示的に設定する、 <xref:System.Data.SqlClient.SqlDataAdapter>です。  
  
 アプリケーションが明示的に呼び出す必要があります: TRANSACT\-SQL ステートメントを生成した後 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> でステートメントが変更された場合。 それ以外の場合、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> 前のステートメントは正しくない可能性がありますからの情報が使用されます。 TRANSACT\-SQL ステートメントは、アプリケーションがいずれかの <xref:System.Data.Common.DbDataAdapter.Update%2A> または <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>です。  
  
 パラメーター名を生成するときに、既定の動作では、@p1、@p2 などを使用して、さまざまなパラメーターです。 渡す `true` の `useColumnsForParameterNames` パラメーターさせることができます、 <xref:System.Data.OleDb.OleDbCommandBuilder> 代わりに列名に基づくパラメーターを生成します。 これは、次の条件を満たした場合にのみ成功します。  
  
-   <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> から返される、 **GetSchema** メソッドを呼び出すし、ではありません、 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> コレクションが指定されており、その長さが同じかまたは生成されたパラメーター名よりも大きいです。  
  
-   生成されたパラメーター名で指定した条件を満たしている、 <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> から返される、 **GetSchema** メソッドを呼び出すし、ではありません、 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> 正規表現のコレクション。  
  
-   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> から返される、 **GetSchema** メソッドを呼び出すし、ではありません、 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> コレクションを指定します。  
  
 詳細については、「[Automatically Generating Commands](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterName">
      <MemberSignature Language="C#" Value="protected override string GetParameterName (int parameterOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterName(int32 parameterOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterOrdinal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterName">
      <MemberSignature Language="C#" Value="protected override string GetParameterName (string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterName(string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameterName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterPlaceholder">
      <MemberSignature Language="C#" Value="protected override string GetParameterPlaceholder (int parameterOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterPlaceholder(int32 parameterOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterOrdinal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaTable">
      <MemberSignature Language="C#" Value="protected override System.Data.DataTable GetSchemaTable (System.Data.Common.DbCommand srcCommand);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.DataTable GetSchemaTable(class System.Data.Common.DbCommand srcCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcCommand" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="srcCommand">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUpdateCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>自動的に生成された取得 <see cref="T:System.Data.SqlClient.SqlCommand" /> 、データベースで更新プログラムを実行するために必要なオブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションで使用できる、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> を返すために、情報やトラブルシューティングの方法が目的で、 <xref:System.Data.SqlClient.SqlCommand> 実行されるオブジェクト。  
  
 使用することも <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> 変更されたコマンドの基礎として。 たとえば、呼び出すことができます <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> し、変更、 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 値に設定してで明示的に設定する、 <xref:System.Data.SqlClient.SqlDataAdapter>です。  
  
 アプリケーションが明示的に呼び出す必要があります: TRANSACT\-SQL ステートメントを生成した後 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> でステートメントが変更された場合。 それ以外の場合、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> 前のステートメントは正しくない可能性がありますからの情報が使用されます。 TRANSACT\-SQL ステートメントは、アプリケーションがいずれかの <xref:System.Data.Common.DbDataAdapter.Update%2A> または <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>です。  
  
 詳細については、「[Automatically Generating Commands](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetUpdateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetUpdateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>自動的に生成された取得 <see cref="T:System.Data.SqlClient.SqlCommand" /> 、データベースで更新プログラムを実行するために必要なオブジェクトです。</summary>
        <returns>自動的に生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> 更新を実行するために必要なオブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションで使用できる、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> を返すために、情報やトラブルシューティングの方法が目的で、 <xref:System.Data.SqlClient.SqlCommand> 実行されるオブジェクト。  
  
 使用することも <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> 変更されたコマンドの基礎として。 たとえば、呼び出すことができます <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> し、変更、 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 値に設定してで明示的に設定する、 <xref:System.Data.SqlClient.SqlDataAdapter>です。  
  
 アプリケーションが明示的に呼び出す必要があります: TRANSACT\-SQL ステートメントを生成した後 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> でステートメントが変更された場合。 それ以外の場合、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> 前のステートメントは正しくない可能性がありますからの情報が使用されます。 TRANSACT\-SQL ステートメントは、アプリケーションがいずれかの <xref:System.Data.Common.DbDataAdapter.Update%2A> または <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>です。  
  
 詳細については、「[Automatically Generating Commands](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetUpdateCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetUpdateCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">場合 <see langword="true" />, 、一致する列名が可能であれば、パラメーター名を生成します。 場合 <see langword="false" />, 、@p1、@p2 を生成し、具合です。</param>
        <summary>自動的に生成された取得 <see cref="T:System.Data.SqlClient.SqlCommand" /> 、データベースで更新プログラムを実行するために必要なオブジェクトです。</summary>
        <returns>自動的に生成された <see cref="T:System.Data.SqlClient.SqlCommand" /> 更新を実行するために必要なオブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションで使用できる、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> を返すために、情報やトラブルシューティングの方法が目的で、 <xref:System.Data.SqlClient.SqlCommand> 実行されるオブジェクト。  
  
 使用することも <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> 変更されたコマンドの基礎として。 たとえば、呼び出すことができます <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> し、変更、 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 値に設定してで明示的に設定する、 <xref:System.Data.SqlClient.SqlDataAdapter>です。  
  
 アプリケーションが明示的に呼び出す必要があります: TRANSACT\-SQL ステートメントを生成した後 <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> でステートメントが変更された場合。 それ以外の場合、 <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> 前のステートメントは正しくない可能性がありますからの情報が使用されます。 TRANSACT\-SQL ステートメントは、アプリケーションがいずれかの <xref:System.Data.Common.DbDataAdapter.Update%2A> または <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>です。  
  
 パラメーター名を生成するときに、既定の動作では、@p1、@p2 などを使用して、さまざまなパラメーターです。 渡す `true` の `useColumnsForParameterNames` パラメーターさせることができます、 <xref:System.Data.OleDb.OleDbCommandBuilder> 代わりに列名に基づくパラメーターを生成します。 これは、次の条件を満たした場合にのみ成功します。  
  
-   <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> から返される、 **GetSchema** メソッドを呼び出すし、ではありません、 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> コレクションが指定されており、その長さが同じかまたは生成されたパラメーター名よりも大きいです。  
  
-   生成されたパラメーター名で指定した条件を満たしている、 <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> から返される、 **GetSchema** メソッドを呼び出すし、ではありません、 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> 正規表現のコレクション。  
  
-   A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> から返される、 **GetSchema** メソッドを呼び出すし、ではありません、 <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> コレクションを指定します。  
  
 詳細については、「[Automatically Generating Commands](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand InitializeCommand (System.Data.Common.DbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand InitializeCommand(class System.Data.Common.DbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuoteIdentifier">
      <MemberSignature Language="C#" Value="public override string QuoteIdentifier (string unquotedIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string QuoteIdentifier(string unquotedIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unquotedIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unquotedIdentifier">元の引用符なしの識別子です。</param>
        <summary>Id が指定、引用符なしの場合は正しいカタログ返します、正しい形式の id を引用符で囲まれました。 これには、識別子では、正しくエスケープが含まれます。</summary>
        <returns>引用符で囲まれた識別子のバージョンです。 Id 内に埋め込まれた引用符を正しくエスケープされています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuotePrefix">
      <MemberSignature Language="C#" Value="public override string QuotePrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QuotePrefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または開始文字以上のテーブルまたは列の名前に空白や予約済みのトークンなどの文字が含まれるなどの SQL Server データベース オブジェクトを指定するときに使用する文字を設定します。</summary>
        <value>先頭の文字または文字を使用します。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  変更できませんが、 <xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> または <xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> 、挿入した後にプロパティを更新、または削除コマンドが生成されて、その設定を変更するには呼び出した後、 `Update` DataAdapter のメソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このプロパティは、INSERT、UPDATE 後は、変更できませんまたは DELETE コマンドが生成されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="QuoteSuffix">
      <MemberSignature Language="C#" Value="public override string QuoteSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QuoteSuffix" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または終了文字以上のテーブルまたは列の名前に空白や予約済みのトークンなどの文字が含まれるなどの SQL Server データベース オブジェクトを指定するときに使用する文字を設定します。</summary>
        <value>最後の文字またはを使用する文字列。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  変更できませんが、 <xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> または <xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> 、挿入した後にプロパティを更新、または削除操作が生成されて、その設定を変更するには呼び出した後、 `Update` DataAdapter のメソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このプロパティは、挿入、更新、または delete コマンドが生成された後に変更できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="SchemaSeparator">
      <MemberSignature Language="C#" Value="public override string SchemaSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SchemaSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはスキーマ識別子とその他の識別子の区切りに使用する文字を設定します。</summary>
        <value>スキーマの区切り記号として使用する文字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一般に、データベース サーバーは、いくつかの文字を持つ id をスキーマ名を区切ることによって、識別子のスキーマを示します。 たとえば、SQL Server は、期間 Person.CustomerName、ここで"Person"は、スキーマ名は、"CustomerName"が識別子などの完全な識別子を作成します。 このプロパティを設定するには、開発者がこの動作を変更することができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRowUpdatingHandler">
      <MemberSignature Language="C#" Value="protected override void SetRowUpdatingHandler (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetRowUpdatingHandler(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnquoteIdentifier">
      <MemberSignature Language="C#" Value="public override string UnquoteIdentifier (string quotedIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string UnquoteIdentifier(string quotedIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quotedIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="quotedIdentifier">埋め込まれた引用符が削除の識別子です。</param>
        <summary>引用符で囲まれた識別子では、指定した識別子の正しい引用符なしの形式を返します。 これには、正しく id に、引用符をエスケープ解除が含まれます。</summary>
        <returns>埋め込まれた引用符が適切にエスケープ解除されたクォート識別子です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>