<Type Name="SqlCommand" FullName="System.Data.SqlClient.SqlCommand">
  <TypeSignature Language="C#" Value="public sealed class SqlCommand : System.Data.Common.DbCommand, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlCommand extends System.Data.Common.DbCommand implements class System.Data.IDbCommand, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlCommand" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbCommand</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("RecordsAffected")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem("System.Drawing.Design.ToolboxItem, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>SQL Server データベースに対して実行する Transact\-SQL ステートメントまたはストアド プロシージャを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンス<xref:System.Data.SqlClient.SqlCommand>が作成、読み取り\/書き込みプロパティは、初期値に設定されます。 これらの値の一覧は、次を参照してください。、<xref:System.Data.SqlClient.SqlCommand>コンス トラクターです。  
  
 <xref:System.Data.SqlClient.SqlCommand>SQL Server データベースでのコマンドを実行するため、次の方法を機能します。  
  
|アイテム|説明|  
|----------|--------|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>|TRANSACT\-SQL ステートメントまたはこの記載されているストアド プロシージャの非同期実行を開始<xref:System.Data.SqlClient.SqlCommand>、通常、INSERT、DELETE、UPDATE などのコマンドを実行してステートメントを設定します。 各呼び出し<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>への呼び出しと組み合わせる必要がある<xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>別のスレッドで通常の操作を終了します。|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>|TRANSACT\-SQL ステートメントまたはこの記載されているストアド プロシージャの非同期実行を開始<xref:System.Data.SqlClient.SqlCommand>と 1 つまたは複数の結果セットがサーバーから取得します。 各呼び出し<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>への呼び出しと組み合わせる必要がある<xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>別のスレッドで通常の操作を終了します。|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>|この <xref:System.Data.SqlClient.SqlCommand> によって定義された Transact\-SQL ステートメントまたはストアド プロシージャの非同期実行を開始します。 各呼び出し`BeginExecuteXmlReader`への呼び出しと組み合わせる必要が`EndExecuteXmlReader`、通常、別のスレッド上で、操作の終了を返す、<xref:System.Xml.XmlReader>オブジェクト。|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>|行を返すコマンドを実行します。 パフォーマンスを向上させる<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>Transact SQL を使用してコマンドを呼び出します`sp_executesql`システム ストアド プロシージャです。 したがって、<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>使用されている場合を希望する効果がない可能性があります: TRANSACT\-SQL の SET ステートメントなどのコマンドを実行します。|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>|Transact SQL の INSERT、DELETE、UPDATE、および一連のステートメントなどのコマンドを実行します。|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>|データベースから 1 つの値 \(たとえば、集計値\) を取得します。|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A> を <xref:System.Data.SqlClient.SqlCommand.Connection%2A> に送信し、<xref:System.Xml.XmlReader> オブジェクトを構築します。|  
  
 リセットすることができます、<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>プロパティと再利用、<xref:System.Data.SqlClient.SqlCommand>オブジェクト。 ただし、閉じる必要があります、<xref:System.Data.SqlClient.SqlDataReader>新しいまたは前のコマンドを実行する前にします。  
  
 場合、<xref:System.Data.SqlClient.SqlException>メソッドの実行によって生成される、 <xref:System.Data.SqlClient.SqlCommand>、<xref:System.Data.SqlClient.SqlConnection>重大度レベルが 19 以下の場合は開いたままです。 重大度レベルが 20 以上の場合は、通常は閉じます、<xref:System.Data.SqlClient.SqlConnection>です。 ただし、ユーザーは接続を再び開き、続行できます。  
  
> [!NOTE]
>  名前のない、序数に基づくとも呼ばれます。 パラメーターが、SQL Server の .NET Framework データ プロバイダーによってサポートされていません。  
  
   
  
## 例  
 次の例を作成、 <xref:System.Data.SqlClient.SqlConnection>、 <xref:System.Data.SqlClient.SqlCommand>、および<xref:System.Data.SqlClient.SqlDataReader>です。 例は、コンソールに書き込み、データを読み取ります。 最後に、例、<xref:System.Data.SqlClient.SqlDataReader>し、<xref:System.Data.SqlClient.SqlConnection>終了すると、`Using`コード ブロック。  
  
 [!code-csharp[Classic WebData SqlCommand Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand Example/VB/source.vb#1)]  
  
 次の例では、作成し、異なる種類の SqlCommand オブジェクトを実行する方法を示します。  
  
 まず、次のスクリプトを実行することにより、サンプル データベースを作成する必要があります。  
  
```  
USE [master]  
GO  
  
CREATE DATABASE [MySchool]  
GO  
  
USE [MySchool]  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE procedure [dbo].[CourseExtInfo] @CourseId int  
as  
select c.CourseID,c.Title,c.Credits,d.Name as DepartmentName  
from Course as c left outer join Department as d on c.DepartmentID=d.DepartmentID  
where c.CourseID=@CourseId  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
create procedure [dbo].[DepartmentInfo] @DepartmentId int,@CourseCount int output  
as  
select @CourseCount=Count(c.CourseID)  
from course as c  
where c.DepartmentID=@DepartmentId  
  
select d.DepartmentID,d.Name,d.Budget,d.StartDate,d.Administrator  
from Department as d  
where d.DepartmentID=@DepartmentId  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
Create PROCEDURE [dbo].[GetDepartmentsOfSpecifiedYear]   
@Year int,@BudgetSum money output  
AS  
BEGIN  
        SELECT @BudgetSum=SUM([Budget])  
  FROM [MySchool].[dbo].[Department]  
  Where YEAR([StartDate])=@Year   
  
SELECT [DepartmentID]  
      ,[Name]  
      ,[Budget]  
      ,[StartDate]  
      ,[Administrator]  
  FROM [MySchool].[dbo].[Department]  
  Where YEAR([StartDate])=@Year  
  
END  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  
[Year] [smallint] NOT NULL,  
[Title] [nvarchar](100) NOT NULL,  
[Credits] [int] NOT NULL,  
[DepartmentID] [int] NOT NULL,  
 CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   
(  
[CourseID] ASC,  
[Year] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  
[Name] [nvarchar](50) NOT NULL,  
[Budget] [money] NOT NULL,  
[StartDate] [datetime] NOT NULL,  
[Administrator] [int] NULL,  
 CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   
(  
[DepartmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Person]([PersonID] [int] IDENTITY(1,1) NOT NULL,  
[LastName] [nvarchar](50) NOT NULL,  
[FirstName] [nvarchar](50) NOT NULL,  
[HireDate] [datetime] NULL,  
[EnrollmentDate] [datetime] NULL,  
 CONSTRAINT [PK_School.Student] PRIMARY KEY CLUSTERED   
(  
[PersonID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[StudentGrade]([EnrollmentID] [int] IDENTITY(1,1) NOT NULL,  
[CourseID] [nvarchar](10) NOT NULL,  
[StudentID] [int] NOT NULL,  
[Grade] [decimal](3, 2) NOT NULL,  
 CONSTRAINT [PK_StudentGrade] PRIMARY KEY CLUSTERED   
(  
[EnrollmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
create view [dbo].[EnglishCourse]  
as  
select c.CourseID,c.Title,c.Credits,c.DepartmentID  
from Course as c join Department as d on c.DepartmentID=d.DepartmentID  
where d.Name=N'English'  
  
GO  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  
SET IDENTITY_INSERT [dbo].[Department] ON   
  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  
SET IDENTITY_INSERT [dbo].[Department] OFF  
SET IDENTITY_INSERT [dbo].[Person] ON   
  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (1, N'Hu', N'Nan', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (2, N'Norman', N'Laura', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (3, N'Olivotto', N'Nino', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (4, N'Anand', N'Arturo', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (5, N'Jai', N'Damien', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (6, N'Holt', N'Roger', CAST(0x000097F100000000 AS DateTime), NULL)  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (7, N'Martin', N'Randall', CAST(0x00008B1A00000000 AS DateTime), NULL)  
SET IDENTITY_INSERT [dbo].[Person] OFF  
SET IDENTITY_INSERT [dbo].[StudentGrade] ON   
  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (1, N'C1045', 1, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (2, N'C1045', 2, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (3, N'C1045', 3, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (4, N'C1045', 4, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (5, N'C1045', 5, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (6, N'C1061', 1, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (7, N'C1061', 3, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (8, N'C1061', 4, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (9, N'C1061', 5, CAST(1.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (10, N'C2021', 1, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (11, N'C2021', 2, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (12, N'C2021', 4, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (13, N'C2021', 5, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (14, N'C2042', 1, CAST(2.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (15, N'C2042', 2, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (16, N'C2042', 3, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (17, N'C2042', 5, CAST(3.00 AS Decimal(3, 2)))  
SET IDENTITY_INSERT [dbo].[StudentGrade] OFF  
ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  
REFERENCES [dbo].[Department] ([DepartmentID])  
GO  
ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  
GO  
ALTER TABLE [dbo].[StudentGrade]  WITH CHECK ADD  CONSTRAINT [FK_StudentGrade_Student] FOREIGN KEY([StudentID])  
REFERENCES [dbo].[Person] ([PersonID])  
GO  
ALTER TABLE [dbo].[StudentGrade] CHECK CONSTRAINT [FK_StudentGrade_Student]  
GO  
```  
  
 次に、コンパイルして、次を実行します。  
  
```  
using System;  
using System.Data;  
using System.Data.SqlClient;  
using System.Threading.Tasks;  
  
class Program {  
  
   static class SqlHelper {  
      // Set the connection, command, and then execute the command with non query.  
      public static Int32 ExecuteNonQuery(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         using (SqlConnection conn = new SqlConnection(connectionString)) {  
            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
               // There're three command types: StoredProcedure, Text, TableDirect. The TableDirect   
               // type is only for OLE DB.    
               cmd.CommandType = commandType;  
               cmd.Parameters.AddRange(parameters);  
  
               conn.Open();  
               return cmd.ExecuteNonQuery();  
            }  
         }  
      }  
  
      // Set the connection, command, and then execute the command and only return one value.  
      public static Object ExecuteScalar(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         using (SqlConnection conn = new SqlConnection(connectionString)) {  
            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
               cmd.CommandType = commandType;  
               cmd.Parameters.AddRange(parameters);  
  
               conn.Open();  
               return cmd.ExecuteScalar();  
            }  
         }  
      }  
  
      // Set the connection, command, and then execute the command with query and return the reader.  
      public static SqlDataReader ExecuteReader(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         SqlConnection conn = new SqlConnection(connectionString);  
  
         using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
            cmd.CommandType = commandType;  
            cmd.Parameters.AddRange(parameters);  
  
            conn.Open();  
            // When using CommandBehavior.CloseConnection, the connection will be closed when the   
            // IDataReader is closed.  
            SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);  
  
            return reader;  
         }  
      }  
   }  
  
   static void Main(string[] args) {  
      String connectionString = "Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;";  
  
      CountCourses(connectionString, 2012);  
      Console.WriteLine();  
  
      Console.WriteLine("Following result is the departments that started from 2007:");  
      GetDepartments(connectionString, 2007);  
      Console.WriteLine();  
  
      Console.WriteLine("Add the credits when the credits of course is lower than 4.");  
      AddCredits(connectionString, 4);  
      Console.WriteLine();  
  
      Console.WriteLine("Please press any key to exit...");  
      Console.ReadKey();  
   }  
  
   static void CountCourses(String connectionString, Int32 year) {  
      String commandText = "Select Count([CourseID]) FROM [MySchool].[dbo].[Course] Where Year=@Year";  
      SqlParameter parameterYear = new SqlParameter("@Year", SqlDbType.Int);  
      parameterYear.Value = year;  
  
      Object oValue = SqlHelper.ExecuteScalar(connectionString, commandText, CommandType.Text, parameterYear);  
      Int32 count;  
      if (Int32.TryParse(oValue.ToString(), out count))  
         Console.WriteLine("There {0} {1} course{2} in {3}.", count > 1 ? "are" : "is", count, count > 1 ? "s" : null, year);  
   }  
  
   // Display the Departments that start from the specified year.  
   static void GetDepartments(String connectionString, Int32 year) {  
      String commandText = "dbo.GetDepartmentsOfSpecifiedYear";  
  
      // Specify the year of StartDate  
      SqlParameter parameterYear = new SqlParameter("@Year", SqlDbType.Int);  
      parameterYear.Value = year;  
  
      // When the direction of parameter is set as Output, you can get the value after   
      // executing the command.  
      SqlParameter parameterBudget = new SqlParameter("@BudgetSum", SqlDbType.Money);  
      parameterBudget.Direction = ParameterDirection.Output;  
  
      using (SqlDataReader reader = SqlHelper.ExecuteReader(connectionString, commandText,  
          CommandType.StoredProcedure, parameterYear, parameterBudget)) {  
         Console.WriteLine("{0,-20}{1,-20}{2,-20}{3,-20}", "Name", "Budget", "StartDate",  
             "Administrator");  
         while (reader.Read()) {  
            Console.WriteLine("{0,-20}{1,-20:C}{2,-20:d}{3,-20}", reader["Name"],  
                reader["Budget"], reader["StartDate"], reader["Administrator"]);  
         }  
      }  
      Console.WriteLine("{0,-20}{1,-20:C}", "Sum:", parameterBudget.Value);  
   }  
  
   // If credits of course is lower than the certain value, the method will add the credits.  
   static void AddCredits(String connectionString, Int32 creditsLow) {  
      String commandText = "Update [MySchool].[dbo].[Course] Set Credits=Credits+1 Where Credits<@Credits";  
  
      SqlParameter parameterCredits = new SqlParameter("@Credits", creditsLow);  
  
      Int32 rows = SqlHelper.ExecuteNonQuery(connectionString, commandText, CommandType.Text, parameterCredits);  
  
      Console.WriteLine("{0} row{1} {2} updated.", rows, rows > 1 ? "s" : null, rows > 1 ? "are" : "is");  
   }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The base constructor initializes all fields to their default values. The following table shows initial property values for an instance of <xref:System.Data.SqlClient.SqlCommand>.  
  
|Properties|Initial value|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|empty string \(""\)|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|Null|  
  
 You can change the value for any of these properties through a separate call to the property.  
  
   
  
## 例  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets the **languageKeyword tag is not supported!!!!**  
 property.  
  
 [!code-csharp[Classic WebData IDbCommand.CommandTimeout Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData IDbCommand.CommandTimeout Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cmdText">クエリのテキスト。</param>
        <summary>クエリ テキストを指定して、<see cref="T:System.Data.SqlClient.SqlCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When an instance of <xref:System.Data.SqlClient.SqlCommand> is created, the following read\/write properties are set to initial values.  
  
|Properties|Initial value|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|null|  
  
 You can change the value for any of these properties through a separate call to the property.  
  
   
  
## 例  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand>, passing in the connection string and command text.  
  
 [!code-csharp[Classic WebData SqlCommand.SqlCommand1 Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.SqlCommand1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="cmdText">クエリのテキスト。</param>
        <param name="connection">SQL Server のインスタンスへの接続を表す <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
        <summary>クエリ テキストと <see cref="T:System.Data.SqlClient.SqlConnection" /> を指定して、<see cref="T:System.Data.SqlClient.SqlCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The following table shows initial property values for an instance of <xref:System.Data.SqlClient.SqlCommand>.  
  
|Properties|Initial value|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|A new <xref:System.Data.SqlClient.SqlConnection> that is the value for the **parameterReference tag is not supported!!!!**<br /> parameter.|  
  
 You can change the value for any of these parameters by setting the related property.  
  
   
  
## 例  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  
  
 [!code-csharp[Classic WebData SqlCommand.SqlCommand2 Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.SqlCommand2 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection, class System.Data.SqlClient.SqlTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="transaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="cmdText">クエリのテキスト。</param>
        <param name="connection">SQL Server のインスタンスへの接続を表す <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
        <param name="transaction">
          <see cref="T:System.Data.SqlClient.SqlCommand" /> が実行される <see cref="T:System.Data.SqlClient.SqlTransaction" />。</param>
        <summary>クエリのテキスト、<see cref="T:System.Data.SqlClient.SqlConnection" />、および <see cref="T:System.Data.SqlClient.SqlTransaction" /> を指定して、<see cref="T:System.Data.SqlClient.SqlCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The following table shows initial property values for an instance of <xref:System.Data.SqlClient.SqlCommand>.  
  
|Properties|Initial value|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|A new <xref:System.Data.SqlClient.SqlConnection> that is the value for the **parameterReference tag is not supported!!!!**<br /> parameter.|  
  
 You can change the value for any of these parameters by setting the related property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction, System.Data.SqlClient.SqlCommandColumnEncryptionSetting columnEncryptionSetting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection, class System.Data.SqlClient.SqlTransaction transaction, valuetype System.Data.SqlClient.SqlCommandColumnEncryptionSetting columnEncryptionSetting) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommandColumnEncryptionSetting)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="transaction" Type="System.Data.SqlClient.SqlTransaction" />
        <Parameter Name="columnEncryptionSetting" Type="System.Data.SqlClient.SqlCommandColumnEncryptionSetting" />
      </Parameters>
      <Docs>
        <param name="cmdText">クエリのテキスト。</param>
        <param name="connection">SQL Server のインスタンスへの接続を表す <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
        <param name="transaction">
          <see cref="T:System.Data.SqlClient.SqlCommand" /> が実行される <see cref="T:System.Data.SqlClient.SqlTransaction" />。</param>
        <param name="columnEncryptionSetting">暗号化の設定。 詳細については、次を参照してください。 [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx)します。</param>
        <summary>指定されたコマンド テキスト、接続、トランザクション、暗号化の設定で、<see cref="T:System.Data.SqlClient.SqlCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteNonQuery">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteNonQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Data.SqlClient.SqlCommand" /> によって定義された Transact\-SQL ステートメントまたはストアド プロシージャの非同期実行を開始します。</summary>
        <returns>結果のポーリング、待機、またはその両方に使用する <see cref="T:System.IAsyncResult" />。この値は、影響を受けた行数を返す <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> を呼び出す場合にも必要となります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> メソッドが非同期に実行する処理を開始、 [!INCLUDE[tsql](~/includes/tsql-md.md)] ステートメントまたはストアド プロシージャを行を返さない場合、ステートメントが実行中に同時に他のタスクを実行できるようにします。 開発者は、ステートメントが完了したらを呼び出す必要があります、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> メソッドが、操作を完了します。<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> メソッドからすぐに \(<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 影響を与えません <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>\)、対応するコードが実行されるまで、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し <xref:System.Data.SqlClient.SqlCommand> オブジェクトです。 呼び出す、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> コマンドの実行が完了する前に、 <xref:System.Data.SqlClient.SqlCommand> 実行が終了するまでブロックするオブジェクト。  
  
 コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドや、多くのパラメーターを送信すると、このメソッドも書き込み中にブロックされます。 コマンドを送信すると、メソッドから、サーバーからの応答を待機せずにすぐには、読み取りは非同期です。  
  
 このオーバー ロードは、コールバック プロシージャをサポートしていないため開発者には、コマンドが完了になっているかどうかを判断するのいずれかのポーリングを使用して、 <xref:System.IAsyncResult.IsCompleted%2A> のプロパティ、 <xref:System.IAsyncResult> によって返される、 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> メソッドまたはを使用して 1 つまたは複数のコマンドを完了するための待機、 <xref:System.IAsyncResult.AsyncWaitHandle%2A> 、返されたプロパティ <xref:System.IAsyncResult>します。  
  
   
  
## 例  
 次のコンソール アプリケーション内のデータの更新プログラムの作成、 **AdventureWorks** 、操作を非同期的に実行してサンプル データベース。 長時間にわたるプロセスをエミュレートするために、この例では、コマンド テキスト内に WAITFOR ステートメントを挿入します。 通常、する作業を行って、コマンドの実行が遅くになりませんが、これで、この場合は非同期の動作の例をわかりやすくします。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteNonQuery\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQuery/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteNonQuery\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQuery/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定されたときに、**Binary** でも **VarBinary** でもない <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、**Xml** のいずれでもない <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に発生したエラー。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.InvalidOperationException">名前と値のペア "Asynchronous Processing\=true" が、この <see cref="T:System.Data.SqlClient.SqlCommand" /> の接続を定義する接続文字列に含まれていませんでした。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteNonQuery">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteNonQuery (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteNonQuery(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">コマンドの実行が完了したときに呼び出される <see cref="T:System.AsyncCallback" /> デリゲート。 コールバックが不要である場合は、<see langword="null" /> \(Microsoft Visual Basic の場合は <see langword="Nothing" />\) を渡します。</param>
        <param name="stateObject">コールバック プロシージャに渡されるユーザー定義の状態オブジェクト。 このオブジェクトは、コールバック プロシージャ内から、<see cref="P:System.IAsyncResult.AsyncState" /> プロパティを使用して取得します。</param>
        <summary>引数に指定されたコールバック プロシージャと状態情報に基づき、この <see cref="T:System.Data.SqlClient.SqlCommand" /> によって定義された Transact\-SQL ステートメントまたはストアド プロシージャの非同期実行を開始します。</summary>
        <returns>結果のポーリング、待機、またはその両方に使用する <see cref="T:System.IAsyncResult" />。この値は、影響を受けた行数を返す <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> を呼び出す場合にも必要となります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> メソッドは、ステートメントが実行中に同時に他のタスクを実行するために、TRANSACT\-SQL ステートメントまたは行を返さないストアド プロシージャを非同期に実行する処理を開始します。 開発者は、ステートメントが完了したらを呼び出す必要があります、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> メソッドが、操作を完了します。<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> メソッドからすぐに \(<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> 影響を与えません <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>\)、対応するコードが実行されるまで、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し <xref:System.Data.SqlClient.SqlCommand> オブジェクトです。 呼び出す、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> コマンドの実行が完了する前に、 <xref:System.Data.SqlClient.SqlCommand> 実行が終了するまでブロックするオブジェクト。  
  
 `callback` パラメーターを指定できます、 <xref:System.AsyncCallback> 、ステートメントが完了したときに呼び出されるデリゲート。 呼び出すことができます、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> メソッドからこのデリゲート プロシージャ内や、アプリケーション内で他の場所からです。 さらに、内のオブジェクトを渡すことができます、 `asyncStateObject` パラメーター、およびコールバック プロシージャを使用してこの情報を取得できます、 <xref:System.IAsyncResult.AsyncState%2A> プロパティです。  
  
 コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドや、多くのパラメーターを送信すると、このメソッドも書き込み中にブロックされます。 コマンドを送信すると、メソッドから、サーバーからの応答を待機せずにすぐには、読み取りは非同期です。  
  
 コールバック プロシージャは、Microsoft .NET 共通言語ランタイムによって提供されるバック グラウンド スレッド内から実行するため、非常に重要ですから、アプリケーション内でのスレッド間の対話を処理するため、厳密なアプローチを行うです。 たとえば、する通信してはいけませんからフォームの内容を持つコールバック プロシージャ内でフォームを更新する必要を切り替える必要があります、フォームのスレッドに作業を実行するためにします。 このトピックの例では、この動作を示します。  
  
 操作の実行中に発生するすべてのエラーは、コールバック プロシージャでの例外としてスローされます。 コールバック プロシージャでは、メイン アプリケーションではなく、例外を処理する必要があります。 コールバック プロシージャでの例外処理の詳細については、このトピックの例を参照してください。  
  
   
  
## 例  
 次の Windows アプリケーションの使用方法を示します、 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> \(実行時間の長いコマンドをエミュレートする\) 数秒の遅れを伴う TRANSACT\-SQL ステートメントを実行しているメソッド。  
  
 この例では、多くの重要なテクニックを示します。 これには、別のスレッドからのフォームと対話するメソッドを呼び出すことが含まれます。 さらに、この例では、ユーザーがコマンドに複数回を同時に実行するようにブロックしてと呼ばれるはどのようにして、コールバック プロシージャの前に、フォームが閉じられないことを確認してください。  
  
 この例をセットアップするには、新しい Windows アプリケーションを作成します。 Put、 <xref:System.Windows.Forms.Button> コントロールと <xref:System.Windows.Forms.Label> \(各コントロールの既定の名前のまま\) フォーム上のコントロールです。 フォームのクラス、お客様の環境に必要な接続文字列を変更するには、次のコードを追加します。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteNonQueryForm\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQueryForm/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteNonQueryForm\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQueryForm/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定されたときに、**Binary** でも **VarBinary** でもない <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、**Xml** のいずれでもない <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に発生したエラー。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.InvalidOperationException">名前と値のペア "Asynchronous Processing\=true" が、この <see cref="T:System.Data.SqlClient.SqlCommand" /> の接続を定義する接続文字列に含まれていませんでした。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Data.SqlClient.SqlCommand" /> で定義された Transact\-SQL ステートメントまたはストアド プロシージャの非同期実行を開始し、サーバーから 1 つ以上の結果セットを取得します。</summary>
        <returns>結果のポーリング、待機、またはその両方に使用する <see cref="T:System.IAsyncResult" />。この値は <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> を呼び出すときにも必要となります。これによって返された <see cref="T:System.Data.SqlClient.SqlDataReader" /> のインスタンスを使用して、返された行を取得できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> メソッドは非同期的にまたはを実行する TRANSACT\-SQL ステートメントの行を返すストアド プロシージャ ステートメントが実行中に同時に他のタスクを実行するためのプロセスを開始します。 開発者は、ステートメントが完了したらを呼び出す必要があります、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> を操作を完了し、取得、 <xref:System.Data.SqlClient.SqlDataReader> コマンドによって返されます。<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> メソッドからすぐに、対応するコードが実行されるまで、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し <xref:System.Data.SqlClient.SqlCommand> オブジェクトです。 呼び出す、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> コマンドの実行が完了する前に、 <xref:System.Data.SqlClient.SqlCommand> 実行が終了するまでブロックするオブジェクト。  
  
 コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドや、多くのパラメーターを送信すると、このメソッドも書き込み中にブロックされます。 コマンドを送信すると、メソッドから、サーバーからの応答を待機せずにすぐには、読み取りは非同期です。 コマンドの実行は非同期ですは、現在も同期処理では値を取得します。 呼び出しをすることを意味 <xref:System.Data.SqlClient.SqlDataReader.Read%2A> 月より多くのデータが必要な場合にブロックし、基になるネットワークの読み取り操作がブロックされます。  
  
 このオーバー ロードは、コールバック プロシージャをサポートしていないため開発者には、コマンドが完了になっているかどうかを判断するのいずれかのポーリングを使用して、 <xref:System.IAsyncResult.IsCompleted%2A> のプロパティ、 <xref:System.IAsyncResult> によって返される、 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> メソッドまたはを使用して 1 つまたは複数のコマンドを完了するための待機、 <xref:System.IAsyncResult.AsyncWaitHandle%2A> 、返されたプロパティ <xref:System.IAsyncResult>します。  
  
 使用する場合 <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> または <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> XML データにアクセスする SQL Server から返される、XML 結果 2,033 文字を超える複数の行にそれぞれ 2,033 文字の長さ。 この動作を避けるためには、次のように使用します。 <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> または <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> を FOR XML クエリを読み取る。 詳細については、http:\/\/support.microsoft.com で Microsoft サポート技術情報で記事 Q310378、"\[prb\]:: XML データが切り捨てられたときに、使用 SqlDataReader"を参照してください。  
  
   
  
## 例  
 次のコンソール アプリケーションでは、データ リーダーを非同期的に取得するプロセスを開始します。 結果を待っている間に、このシンプルなアプリケーションは、ループでは、内に調査して、 <xref:System.IAsyncResult.IsCompleted%2A> プロパティの値。 コードを取得、処理が完了するとすぐに、 <xref:System.Data.SqlClient.SqlDataReader> し、その内容を表示します。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReader\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReader/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReader\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定されたときに、**Binary** でも **VarBinary** でもない <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、**Xml** のいずれでもない <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に発生したエラー。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.InvalidOperationException">名前と値のペア "Asynchronous Processing\=true" が、この <see cref="T:System.Data.SqlClient.SqlCommand" /> の接続を定義する接続文字列に含まれていませんでした。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.Data.CommandBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">ステートメントの実行とデータ取得に対するオプションを指定する <see cref="T:System.Data.CommandBehavior" /> 値の 1 つ。</param>
        <summary>
          <see cref="T:System.Data.CommandBehavior" /> のいずれかの値を使用し、この <see cref="T:System.Data.SqlClient.SqlCommand" /> によって定義された Transact\-SQL ステートメントまたはストアド プロシージャの非同期実行を開始します。</summary>
        <returns>結果のポーリング、待機、またはその両方に使用する <see cref="T:System.IAsyncResult" />。この値は <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> を呼び出すときにも必要となります。これによって返された <see cref="T:System.Data.SqlClient.SqlDataReader" /> のインスタンスを使用して、返された行を取得できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> メソッドは非同期的にまたはを実行する TRANSACT\-SQL ステートメントの行を返すストアド プロシージャ ステートメントが実行中に同時に他のタスクを実行するためのプロセスを開始します。 開発者は、ステートメントが完了したらを呼び出す必要があります、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> を操作を完了し、取得、 <xref:System.Data.SqlClient.SqlDataReader> コマンドによって返されます。<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> メソッドからすぐに、対応するコードが実行されるまで、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し <xref:System.Data.SqlClient.SqlCommand> オブジェクトです。 呼び出す、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> コマンドの実行が完了する前に、 <xref:System.Data.SqlClient.SqlCommand> 実行が終了するまでブロックするオブジェクト。  
  
 `behavior` パラメーターでは、コマンドと、その接続の動作を制御するオプションを指定することができます。 これらの値を一緒に組み合わせることができます \(、プログラミング言語を使用 `OR` 演算子\)。 一般に、開発者を使用して、 `CommandBehavior.CloseConnection` 、ランタイムによって接続が閉じていることを確認するには値ときに、 <xref:System.Data.SqlClient.SqlDataReader> が閉じられます。  
  
 コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドや、多くのパラメーターを送信すると、このメソッドも書き込み中にブロックされます。 コマンドを送信すると、メソッドから、サーバーからの応答を待機せずにすぐには、読み取りは非同期です。 コマンドの実行は非同期ですは、現在も同期処理では値を取得します。 呼び出しをすることを意味 <xref:System.Data.SqlClient.SqlDataReader.Read%2A> 月より多くのデータが必要な場合にブロックし、基になるネットワークの読み取り操作がブロックされます。  
  
 このオーバー ロードは、コールバック プロシージャをサポートしていないため開発者には、コマンドが完了になっているかどうかを判断するのいずれかのポーリングを使用して、 <xref:System.IAsyncResult.IsCompleted%2A> のプロパティ、 <xref:System.IAsyncResult> によって返される、 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> メソッドまたはを使用して 1 つまたは複数のコマンドを完了するための待機、 <xref:System.IAsyncResult.AsyncWaitHandle%2A> 、返されたプロパティ <xref:System.IAsyncResult>します。  
  
 使用する場合 <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> または <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> XML データにアクセスする SQL Server を返します XML 結果 2,033 文字を超える複数の行にそれぞれ 2,033 文字の長さ。 この動作を避けるためには、次のように使用します。 <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> または <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> を FOR XML クエリを読み取る。 詳細については、http:\/\/support.microsoft.com で Microsoft サポート技術情報で記事 Q310378、"\[prb\]:: XML データが切り捨てられたときに、使用 SqlDataReader"を参照してください。  
  
   
  
## 例  
 次のコンソール アプリケーションでは、データ リーダーを非同期的に取得するプロセスを開始します。 結果を待っている間に、このシンプルなアプリケーションは、ループでは、内に調査して、 <xref:System.IAsyncResult.IsCompleted%2A> プロパティの値。 プロセスが完了すると、コードを取得、 <xref:System.Data.SqlClient.SqlDataReader> し、その内容を表示します。  
  
 この例でも渡します、 `CommandBehavior.CloseConnection` と `CommandBehavior.SingleRow` 接続が終了する原因と、動作パラメーターの値、返された <xref:System.Data.SqlClient.SqlDataReader> を閉じると、単一行の結果を最適化するとします。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncSimple/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncSimple/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定されたときに、**Binary** でも **VarBinary** でもない <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、**Xml** のいずれでもない <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に発生したエラー。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.InvalidOperationException">名前と値のペア "Asynchronous Processing\=true" が、この <see cref="T:System.Data.SqlClient.SqlCommand" /> の接続を定義する接続文字列に含まれていませんでした。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">コマンドの実行が完了したときに呼び出される <see cref="T:System.AsyncCallback" /> デリゲート。 コールバックが不要である場合は、<see langword="null" /> \(Microsoft Visual Basic の場合は <see langword="Nothing" />\) を渡します。</param>
        <param name="stateObject">コールバック プロシージャに渡されるユーザー定義の状態オブジェクト。 このオブジェクトは、コールバック プロシージャ内から、<see cref="P:System.IAsyncResult.AsyncState" /> プロパティを使用して取得します。</param>
        <summary>この <see cref="T:System.Data.SqlClient.SqlCommand" /> によって定義された Transact\-SQL ステートメントまたはストアド プロシージャの非同期実行を開始し、引数に指定されたコールバック プロシージャと状態情報に基づき、サーバーから 1 つまたは複数の結果を取得します。</summary>
        <returns>結果のポーリング、待機、またはその両方に使用できる <see cref="T:System.IAsyncResult" />。この値は <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> を呼び出すときにも必要となります。これによって返された <see cref="T:System.Data.SqlClient.SqlDataReader" /> のインスタンスを使用して、返された行を取得できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> メソッドは非同期的にまたはを実行する TRANSACT\-SQL ステートメントの行を返すストアド プロシージャ ステートメントが実行中に同時に他のタスクを実行するためのプロセスを開始します。 開発者は、ステートメントが完了したらを呼び出す必要があります、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> を操作を完了し、取得、 <xref:System.Data.SqlClient.SqlDataReader> コマンドによって返されます。<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> メソッドからすぐに、対応するコードが実行されるまで、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し <xref:System.Data.SqlClient.SqlCommand> オブジェクトです。 呼び出す、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> コマンドの実行が完了する前に原因、 <xref:System.Data.SqlClient.SqlCommand> 実行が終了するまでブロックするオブジェクト。  
  
 `callback` パラメーターを指定できます、 <xref:System.AsyncCallback> 、ステートメントが完了したときに呼び出されるデリゲート。 呼び出すことができます、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> メソッドからこのデリゲート プロシージャ内や、アプリケーション内で他の場所からです。 さらに、内のオブジェクトを渡すことができます、 `stateObject` パラメーター、およびコールバック プロシージャを使用してこの情報を取得できます、 <xref:System.IAsyncResult.AsyncState%2A> プロパティです。  
  
 コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドや、多くのパラメーターを送信すると、このメソッドも書き込み中にブロックされます。 コマンドを送信すると、メソッドから、サーバーからの応答を待機せずにすぐには、読み取りは非同期です。 コマンドの実行は非同期ですは、現在も同期処理では値を取得します。 呼び出しをすることを意味 <xref:System.Data.SqlClient.SqlDataReader.Read%2A> 月より多くのデータが必要な場合にブロックし、基になるネットワークの読み取り操作がブロックされます。  
  
 コールバック プロシージャは、Microsoft .NET ランタイムによって提供されるバック グラウンド スレッド内から実行するため、非常に重要ですから、アプリケーション内でのスレッド間の対話を処理するため、厳密なアプローチを行うです。 たとえば、する通信してはいけませんからフォームの内容を持つコールバック プロシージャ内でフォームを更新する必要を切り替える必要があります、フォームのスレッドに作業を実行するためにします。 このトピックの例では、この動作を示します。  
  
 操作の実行中に発生するすべてのエラーは、コールバック プロシージャでの例外としてスローされます。 コールバック プロシージャでは、メイン アプリケーションではなく、例外を処理する必要があります。 コールバック プロシージャでの例外処理の詳細については、このトピックの例を参照してください。  
  
 使用する場合 <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> または <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> XML データにアクセスする SQL Server を返します XML 結果 2,033 文字を超える複数の行にそれぞれ 2,033 文字の長さ。 この動作を避けるためには、次のように使用します。 <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> または <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> を FOR XML クエリを読み取る。 詳細については、http:\/\/support.microsoft.com で Microsoft サポート技術情報で記事 Q310378、"\[prb\]:: XML データが切り捨てられたときに、使用 SqlDataReader"を参照してください。  
  
   
  
## 例  
 次の Windows アプリケーションは、<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> メソッドを使って、数秒の遅れを伴う \(時間のかかるコマンドをエミュレートする\) Transact\-SQL ステートメントを実行する例を示しています。 サンプルでは、コマンドを非同期的に実行するため、フォームは応答を結果を待っている間にします。 この例では、実行する <xref:System.Data.SqlClient.SqlCommand> オブジェクトとして、 `stateObject` パラメーターの場合はあえてを取得する単純な <xref:System.Data.SqlClient.SqlCommand> 、コードを呼び出せるように、コールバック プロシージャ内でオブジェクトから、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> メソッドの最初の呼び出しに対応する <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>です。  
  
 この例では、多くの重要なテクニックを示します。 これには、別のスレッドからのフォームと対話するメソッドを呼び出すことが含まれます。 さらに、この例では、ユーザーがコマンドに複数回を同時に実行するようにブロックしてと呼ばれるはどのようにして、コールバック プロシージャの前に、フォームが閉じられないことを確認してください。  
  
 この例をセットアップするには、新しい Windows アプリケーションを作成します。 Put、 <xref:System.Windows.Forms.Button> コントロール、 <xref:System.Windows.Forms.DataGridView> コントロール、および <xref:System.Windows.Forms.Label> \(各コントロールの既定の名前のまま\) フォーム上のコントロールです。 フォームのクラス、お客様の環境に必要な接続文字列を変更するには、次のコードを追加します。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReaderAsync\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsync/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsync\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsync/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定されたときに、**Binary** でも **VarBinary** でもない <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、**Xml** のいずれでもない <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に発生したエラー。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.InvalidOperationException">名前と値のペア "Asynchronous Processing\=true" が、この <see cref="T:System.Data.SqlClient.SqlCommand" /> の接続を定義する接続文字列に含まれていませんでした。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(class System.AsyncCallback callback, object stateObject, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="callback">コマンドの実行が完了したときに呼び出される <see cref="T:System.AsyncCallback" /> デリゲート。 コールバックが不要である場合は、<see langword="null" /> \(Microsoft Visual Basic の場合は <see langword="Nothing" />\) を渡します。</param>
        <param name="stateObject">コールバック プロシージャに渡されるユーザー定義の状態オブジェクト。 このオブジェクトは、コールバック プロシージャ内から、<see cref="P:System.IAsyncResult.AsyncState" /> プロパティを使用して取得します。</param>
        <param name="behavior">ステートメントの実行とデータ取得に対するオプションを指定する <see cref="T:System.Data.CommandBehavior" /> 値の 1 つ。</param>
        <summary>引数に指定されたコールバック プロシージャと状態情報に基づき、<see langword="CommandBehavior" /> 値の 1 つを使用し、サーバーから 1 つまたは複数の結果セットを取得して、この <see cref="T:System.Data.SqlClient.SqlCommand" /> によって記述された Transact\-SQL ステートメントまたはストアド プロシージャの非同期実行を開始します。</summary>
        <returns>結果のポーリング、待機、またはその両方に使用する <see cref="T:System.IAsyncResult" />。この値は <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> を呼び出す際にも必要となります。これによって返された <see cref="T:System.Data.SqlClient.SqlDataReader" /> のインスタンスを使用して、返された行を取得できます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method starts the process of asynchronously executing a Transact\-SQL statement or stored procedure that returns rows, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method to finish the operation and retrieve the <xref:System.Data.SqlClient.SqlDataReader> returned by the command. The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method returns immediately, but until the code executes the corresponding <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <xref:System.Data.SqlClient.SqlCommand> object. Calling the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> before the command's execution is completed causes the <xref:System.Data.SqlClient.SqlCommand> object to block until the execution is finished.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter lets you specify an <xref:System.AsyncCallback> delegate that is called when the statement has completed. You can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method from within this delegate procedure, or from any other location within your application. In addition, you can pass any object in the **parameterReference tag is not supported!!!!**  
 parameter, and your callback procedure can retrieve this information using the <xref:System.IAsyncResult.AsyncState%2A> property.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter lets you specify options that control the behavior of the command and its connection. These values can be combined together \(using the programming language's **languageKeyword tag is not supported!!!!**  
 operator\); generally, developers use the **languageKeyword tag is not supported!!!!**  
 value to make sure that the connection is closed by the runtime when the <xref:System.Data.SqlClient.SqlDataReader> is closed. Developers can also optimize the behavior of the <xref:System.Data.SqlClient.SqlDataReader> by specifying the **languageKeyword tag is not supported!!!!**  
 value when it is known in advance that the Transact\-SQL statement or stored procedure only returns a single row.  
  
 Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server\-\-that is, reads are asynchronous. Although command execution is asynchronous, value fetching is still synchronous. This means that calls to <xref:System.Data.SqlClient.SqlDataReader.Read%2A> may block if more data is required and the underlying network's read operation blocks.  
  
 Because the callback procedure executes from within a background thread supplied by the Microsoft .NET common language runtime, it is very important that you take a rigorous approach to handling cross\-thread interactions from within your applications. For example, you must not interact with a form's contents from within your callback procedure\-\-should you have to update the form, you must switch back to the form's thread in order to do your work. The example in this topic demonstrates this behavior.  
  
 All errors that occur during the execution of the operation are thrown as exceptions in the callback procedure. You must handle the exception in the callback procedure, not in the main application. See the example in this topic for additional information on handling exceptions in the callback procedure.  
  
 If you use <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http:\/\/support.microsoft.com.  
  
   
  
## 例  
 The following Windows application demonstrates the use of the <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method, executing a Transact\-SQL statement that includes a delay of a few seconds \(emulating a long\-running command\). Because the sample executes the command asynchronously, the form remains responsive while awaiting the results. This example passes the executing <xref:System.Data.SqlClient.SqlCommand> object as the **parameterReference tag is not supported!!!!**  
 parameter; doing so makes it simple to retrieve the <xref:System.Data.SqlClient.SqlCommand> object from within the callback procedure, so that the code can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method corresponding to the initial call to <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  
  
 To set up this example, create a new Windows application. Put a <xref:System.Windows.Forms.Button> control, a <xref:System.Windows.Forms.DataGridView> control, and a <xref:System.Windows.Forms.Label> control on the form \(accepting the default name for each control\). Add the following code to the form's class, modifying the connection string as needed for your environment.  
  
 This example passes the **languageKeyword tag is not supported!!!!**  
 value in the **parameterReference tag is not supported!!!!**  
 parameter, causing the returned <xref:System.Data.SqlClient.SqlDataReader> to automatically close its connection when it is closed.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に発生したエラー。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.InvalidOperationException">名前と値のペア "Asynchronous Processing\=true" が、この <see cref="T:System.Data.SqlClient.SqlCommand" /> の接続を定義する接続文字列に含まれていませんでした。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteXmlReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteXmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteXmlReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Data.SqlClient.SqlCommand" /> によって定義された Transact\-SQL ステートメントまたはストアド プロシージャの非同期実行を開始し、結果を <see cref="T:System.Xml.XmlReader" /> オブジェクトとして返します。</summary>
        <returns>結果のポーリング、待機、またはその両方に使用する <see cref="T:System.IAsyncResult" />。この値は、単一の XML 値を取得する <see langword="EndExecuteXmlReader" /> を呼び出す場合にも必要となります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> method starts the process of asynchronously executing a Transact\-SQL statement that returns rows as XML, so that other tasks can run concurrently while the statement is executing. When the statement has completed, developers must call the **languageKeyword tag is not supported!!!!**  
 method to finish the operation and retrieve the XML returned by the command. The <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> method returns immediately, but until the code executes the corresponding **languageKeyword tag is not supported!!!!**  
 method call, it must not execute any other calls that start a synchronous or asynchronous execution against the same <xref:System.Data.SqlClient.SqlCommand> object. Calling the **languageKeyword tag is not supported!!!!**  
 before the command's execution is completed causes the <xref:System.Data.SqlClient.SqlCommand> object to block until the execution is finished.  
  
 The <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> property ordinarily specifies a Transact\-SQL statement with a valid FOR XML clause. However, **languageKeyword tag is not supported!!!!**  
 can also specify a statement that returns **languageKeyword tag is not supported!!!!**  
 data that contains valid XML.  
  
 A typical <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> query can be formatted as in the following C\# example:  
  
```  
SqlCommand command = new SqlCommand("SELECT ContactID, FirstName, LastName FROM dbo.Contact FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 This method can also be used to retrieve a single\-row, single\-column result set. In this case, if more than one row is returned, the **languageKeyword tag is not supported!!!!**  
 method attaches the <xref:System.Xml.XmlReader> to the value on the first row, and discards the rest of the result set.  
  
 The multiple active result set \(MARS\) feature lets multiple actions use the same connection.  
  
 Note that the command text and parameters are sent to the server synchronously. If a large command or many parameters are sent, this method may block during writes. After the command is sent, the method returns immediately without waiting for an answer from the server\-\-that is, reads are asynchronous. Although command execution is asynchronous, value fetching is still synchronous.  
  
 Because this overload does not support a callback procedure, developers need to either poll to determine whether the command has completed, using the <xref:System.IAsyncResult.IsCompleted%2A> property of the <xref:System.IAsyncResult> returned by the <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> method; or wait for the completion of one or more commands using the <xref:System.IAsyncResult.AsyncWaitHandle%2A> property of the returned <xref:System.IAsyncResult>.  
  
 If you use <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to access XML data, SQL Server returns any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http:\/\/support.microsoft.com.  
  
   
  
## 例  
 The following console application starts the process of retrieving XML data asynchronously. While waiting for the results, this simple application sits in a loop, investigating the <xref:System.IAsyncResult.IsCompleted%2A> property value. Once the process has completed, the code retrieves the XML and displays its contents.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteXmlReader\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReader/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReader\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に発生したエラー。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.InvalidOperationException">名前と値のペア "Asynchronous Processing\=true" が、この <see cref="T:System.Data.SqlClient.SqlCommand" /> の接続を定義する接続文字列に含まれていませんでした。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteXmlReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteXmlReader (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteXmlReader(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">コマンドの実行が完了したときに呼び出される <see cref="T:System.AsyncCallback" /> デリゲート。 コールバックが不要である場合は、<see langword="null" /> \(Microsoft Visual Basic の場合は <see langword="Nothing" />\) を渡します。</param>
        <param name="stateObject">コールバック プロシージャに渡されるユーザー定義の状態オブジェクト。 このオブジェクトは、コールバック プロシージャ内から、<see cref="P:System.IAsyncResult.AsyncState" /> プロパティを使用して取得します。</param>
        <summary>この <see cref="T:System.Data.SqlClient.SqlCommand" /> によって定義された Transact\-SQL ステートメントまたはストアド プロシージャの非同期実行を開始し、コールバック プロシージャを使用して結果を <see cref="T:System.Xml.XmlReader" /> オブジェクトとして返します。</summary>
        <returns>結果のポーリング、待機、またはその両方に使用する <see cref="T:System.IAsyncResult" />。この値は、コマンドの結果を XML として返す <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> を呼び出す場合にも必要となります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> メソッドは、ステートメントが実行中に同時に他のタスクを実行するために、TRANSACT\-SQL ステートメントまたは XML として行を返すストアド プロシージャを非同期に実行する処理を開始します。 開発者は、ステートメントが完了したらを呼び出す必要があります、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> を操作を完了し、要求された XML データを取得します。<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> メソッドからすぐに、対応するコードが実行されるまで、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> メソッド呼び出しでない実行することは同じに対して同期または非同期実行を開始するその他の呼び出し <xref:System.Data.SqlClient.SqlCommand> オブジェクトです。 呼び出す、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> コマンドの実行が完了する前に、 <xref:System.Data.SqlClient.SqlCommand> 実行が終了するまでブロックするオブジェクト。  
  
 <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> プロパティが有効な FOR XML 句を使用して通常 TRANSACT\-SQL ステートメントを指定します。 ただし、 `CommandText` を有効な XML を含むデータを返すステートメントを指定することもできます。 このメソッドは、単一行、単一列の結果セットを取得することもできます。 この場合は、数より多い場合は、1 行が返される、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> メソッドのアタッチ、 <xref:System.Xml.XmlReader> 最初の行、および破棄の値に結果の残りの部分を設定します。  
  
 標準的な <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> クエリは、次の c\# の例のようにフォーマットされていることができます。  
  
```  
SqlCommand command = new SqlCommand("SELECT ContactID, FirstName, LastName FROM Contact FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 このメソッドは、単一行、単一列の結果セットを取得することもできます。 この場合は、数より多い場合は、1 行が返される、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> メソッドのアタッチ、 <xref:System.Xml.XmlReader> 最初の行、および破棄の値に結果の残りの部分を設定します。  
  
 複数のアクティブな結果セット \(MARS\) 機能には、同じ接続を使用して複数のアクションことができます。  
  
 `callback` パラメーターを指定できます、 <xref:System.AsyncCallback> 、ステートメントが完了したときに呼び出されるデリゲート。 呼び出すことができます、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> メソッドからこのデリゲート プロシージャ内や、アプリケーション内で他の場所からです。 さらに、内のオブジェクトを渡すことができます、 `stateObject` パラメーター、およびコールバック プロシージャを使用してこの情報を取得できます、 <xref:System.IAsyncResult.AsyncState%2A> プロパティです。  
  
 コマンド テキストとパラメーターが同期的に送信します。 ことに注意してください。 大量のコマンドまたは多数のパラメーターを送信する場合、このメソッドは、書き込み中にブロック可能性があります。 コマンドを送信すると、メソッドから、サーバーからの応答を待機せずにすぐには、読み取りは非同期です。  
  
 操作の実行中に発生するすべてのエラーは、コールバック プロシージャでの例外としてスローされます。 コールバック プロシージャでは、メイン アプリケーションではなく、例外を処理する必要があります。 コールバック プロシージャでの例外処理の詳細については、このトピックの例を参照してください。  
  
 使用する場合 <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> または <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> XML データにアクセスする SQL Server から返される、XML 結果 2,033 文字を超える複数の行にそれぞれ 2,033 文字の長さ。 この動作を避けるためには、次のように使用します。 <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> または <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> を FOR XML クエリを読み取る。 詳細については、http:\/\/support.microsoft.com で Microsoft サポート技術情報で記事 Q310378、"\[prb\]:: XML データが切り捨てられたときに、使用 SqlDataReader"を参照してください。  
  
   
  
## 例  
 次の Windows アプリケーションは、<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> メソッドを使って、数秒の遅れを伴う \(時間のかかるコマンドをエミュレートする\) Transact\-SQL ステートメントを実行する例を示しています。 この例では、実行する <xref:System.Data.SqlClient.SqlCommand> オブジェクトとして、 `stateObject` パラメーター \- これにより、取得する簡単な <xref:System.Data.SqlClient.SqlCommand> 、コードを呼び出せるように、コールバック プロシージャ内でオブジェクトから、 <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> メソッドの最初の呼び出しに対応する <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>です。  
  
 この例では、多くの重要なテクニックを示します。 これには、別のスレッドからのフォームと対話するメソッドを呼び出すことが含まれます。 さらに、この例では、ユーザーがコマンドに複数回を同時に実行するようにブロックしてと呼ばれるはどのようにして、コールバック プロシージャの前に、フォームが閉じられないことを確認してください。  
  
 この例をセットアップするには、新しい Windows アプリケーションを作成します。 Put、 <xref:System.Windows.Forms.Button> コントロール、 <xref:System.Windows.Forms.ListBox> コントロール、および <xref:System.Windows.Forms.Label> \(各コントロールの既定の名前のまま\) フォーム上のコントロールです。 フォームのクラス、お客様の環境に必要な接続文字列を変更するには、次のコードを追加します。  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteXmlReaderAsync\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReaderAsync/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReaderAsync\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReaderAsync/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定されたときに、**Binary** でも **VarBinary** でもない <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、**Xml** のいずれでもない <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に発生したエラー。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.InvalidOperationException">名前と値のペア "Asynchronous Processing\=true" が、この <see cref="T:System.Data.SqlClient.SqlCommand" /> の接続を定義する接続文字列に含まれていませんでした。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <altmember cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
        <altmember cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public override void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Cancel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlCommand" /> の実行の取り消しを試行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If there is nothing to cancel, nothing occurs. However, if there is a command in process, and the attempt to cancel fails, no exception is generated.  
  
 In some, rare, cases, if you call <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> then call <xref:System.Data.SqlClient.SqlDataReader.Close%2A> \(implicitily or explicitly\) before calling <xref:System.Data.SqlClient.SqlCommand.Cancel%2A>, and then call <xref:System.Data.SqlClient.SqlCommand.Cancel%2A>, the cancel command will not be sent to SQL Server and the result set can continue to stream after you call <xref:System.Data.SqlClient.SqlConnection.Close%2A>. To avoid this, make sure that you call <xref:System.Data.SqlClient.SqlCommand.Cancel%2A> before closing the reader or connection.  
  
   
  
## 例  
 The following example demonstrates the use of the <xref:System.Data.SqlClient.SqlCommand.Cancel%2A> method.  
  
 [!code-csharp[Classic WebData SqlCommand.Cancel\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Cancel/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.Cancel\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Cancel/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のインスタンスのコピーである新しい <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトを作成します。</summary>
        <returns>このインスタンスのコピーである新しい <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionSetting">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SqlClient.SqlCommandColumnEncryptionSetting ColumnEncryptionSetting" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommandColumnEncryptionSetting</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコマンドの列の暗号化の設定を取得または設定します。</summary>
        <value>このコマンドの列の暗号化の設定。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandText">
      <MemberSignature Language="C#" Value="public override string CommandText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandText" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.CommandText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースで実行する Transact\-SQL ステートメント、テーブル名、またはストアド プロシージャを取得または設定します。</summary>
        <value>実行する Transact\-SQL ステートメントまたはストアド プロシージャ。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When the <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> property is set to **languageKeyword tag is not supported!!!!**  
, the <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> property should be set to the name of the stored procedure. The user may be required to use escape character syntax if the stored procedure name contains any special characters. The command executes this stored procedure when you call one of the **languageKeyword tag is not supported!!!!**  
 methods.  
  
 The Microsoft .NET Framework Data Provider for SQL Server does not support the question mark \(?\) placeholder for passing parameters to a Transact\-SQL statement or a stored procedure called by a command of **languageKeyword tag is not supported!!!!**  
. In this case, named parameters must be used. For example:  
  
```  
SELECT * FROM dbo.Customers WHERE CustomerID = @CustomerID  
```  
  
 For more information, see [Configuring Parameters and Parameter Data Types](http://msdn.microsoft.com/ja-jp/537d8a2c-d40b-4000-83eb-bc1fcc93f707).  
  
   
  
## 例  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  
  
 [!code-csharp[Classic WebData SqlCommand.CommandText Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.CommandText Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.CommandText Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.CommandText Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public override int CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CommandTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コマンドを実行する試みを終了してエラーが生成されるまでの待機時間を取得または設定します。</summary>
        <value>コマンドの実行を待機する時間 \(秒単位\)。 既定値は 30 秒です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A value of 0 indicates no limit \(an attempt to execute a command will wait indefinitely\).  
  
> [!NOTE]
>  The <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> property will be ignored during asynchronous method calls such as <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> has no effect when the command is executed against a context connection \(a <xref:System.Data.SqlClient.SqlConnection> opened with "context connection\=true" in the connection string\).  
  
> [!NOTE]
>  This property is the cumulative time\-out \(for all network packets that are read during the invocation of a method\) for all network reads during command execution or processing of the results. A time\-out can still occur after the first row is returned, and does not include user processing time, only network read time.  
>   
>  For example, with a 30 second time out, if <xref:System.Data.SqlClient.SqlDataReader.Read%2A> requires two network packets, then it has 30 seconds to read both network packets. If you call <xref:System.Data.SqlClient.SqlDataReader.Read%2A> again, it will have another 30 seconds to read any data that it requires.  
  
```  
using System;  
using System.Data.SqlClient;  
///   
public class A {  
   ///   
   public static void Main() {  
      string connectionString = "";  
      // Wait for 5 second delay in the command  
      string queryString = "waitfor delay '00:00:05'";  
      using (SqlConnection connection = new SqlConnection(connectionString)) {  
         connection.Open();  
         SqlCommand command = new SqlCommand(queryString, connection);  
         // Setting command timeout to 1 second  
         command.CommandTimeout = 1;  
         try {  
            command.ExecuteNonQuery();  
         }  
         catch (SqlException e) {  
            Console.WriteLine("Got expected SqlException due to command timeout ");  
            Console.WriteLine(e);  
         }  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandType">
      <MemberSignature Language="C#" Value="public override System.Data.CommandType CommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandType CommandType" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.CommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.CommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> プロパティの解釈方法を示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Data.CommandType" /> 値のいずれか。 既定値は、<see langword="Text" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When you set the <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> property to **languageKeyword tag is not supported!!!!**  
, you should set the <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> property to the name of the stored procedure. The command executes this stored procedure when you call one of the Execute methods.  
  
 The Microsoft .NET Framework Data Provider for SQL Server does not support the question mark \(?\) placeholder for passing parameters to a SQL Statement or a stored procedure called with a <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> of <xref:System.Data.CommandType.Text>. In this case, named parameters must be used. For example:  
  
 SELECT \* FROM Customers WHERE CustomerID \= @CustomerID  
  
 For more information, see [Configuring Parameters and Parameter Data Types](http://msdn.microsoft.com/ja-jp/537d8a2c-d40b-4000-83eb-bc1fcc93f707).  
  
   
  
## 例  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  
  
 [!code-csharp[Classic WebData IDbCommand.CommandTimeout Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData IDbCommand.CommandTimeout Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">値が正しい <see cref="T:System.Data.CommandType" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlConnection Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Data.SqlClient.SqlCommand" /> のインスタンスで使用する <see cref="T:System.Data.SqlClient.SqlConnection" /> を取得または設定します。</summary>
        <value>データ ソースへの接続。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the command is enlisted in an existing transaction, and the connection is changed, trying to execute the command will throw an <xref:System.InvalidOperationException>.  
  
 If the <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> property is not null and the transaction has already been committed or rolled back, <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> is set to null.  
  
   
  
## 例  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  
  
 [!code-csharp[Classic WebData SqlCommand.Connection Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Connection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.Connection Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Connection Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">コマンドがトランザクションに登録されていた間に、<see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> プロパティが変更されました。</exception>
        <altmember cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
        <altmember cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
        <altmember cref="P:System.Data.SqlClient.SqlCommand.CommandType" />
      </Docs>
    </Member>
    <Member MemberName="CreateDbParameter">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameter CreateDbParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbParameter CreateDbParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.CreateDbParameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParameter">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlParameter CreateParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlParameter CreateParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.CreateParameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlParameter" /> オブジェクトの新しいインスタンスを作成します。</summary>
        <returns>
          <see cref="T:System.Data.SqlClient.SqlParameter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Data.SqlClient.SqlCommand.CreateParameter%2A> method is a strongly\-typed version of <xref:System.Data.IDbCommand.CreateParameter%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbConnection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbConnection DbConnection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection DbConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DbConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbParameterCollection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameterCollection DbParameterCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbParameterCollection DbParameterCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DbParameterCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction DbTransaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbTransaction DbTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DbTransaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DesignTimeVisible">
      <MemberSignature Language="C#" Value="public override bool DesignTimeVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DesignTimeVisible" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DesignTimeVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コマンド オブジェクトを Windows フォーム デザイナー コントロールに表示する必要があるかどうかを示す値を取得または設定します。</summary>
        <value>コマンド オブジェクトをコントロールに表示する必要があるかどうかを示す値。 既定値は **true** です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndExecuteNonQuery">
      <MemberSignature Language="C#" Value="public int EndExecuteNonQuery (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndExecuteNonQuery(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> への呼び出しで返される <see cref="T:System.IAsyncResult" />。</param>
        <summary>Transact\-SQL ステートメントの非同期実行を完了します。</summary>
        <returns>影響を受けた行の数 \(<see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" /> と同じ動作\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When you call <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> to execute a [!INCLUDE[tsql](~/includes/tsql-md.md)] statement, you must call <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> in order to complete the operation. If the process of executing the command has not yet finished, this method blocks until the operation is complete. Users can verify that the command has completed its operation by using the <xref:System.IAsyncResult> instance returned by the <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> method. If a callback procedure was specified in the call to <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>, this method must be called.  
  
   
  
## 例  
 For examples demonstrating the use of the <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> method, see <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> パラメーターが null です \(Microsoft Visual Basic では <see langword="Nothing" />\)。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> が 1 回のコマンドの実行に対して複数回呼び出されたか、メソッドがその実行メソッドと一致しませんでした \(<see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" /> への呼び出しを完了するためにコードが <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> を呼び出すなど\)。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">
          <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> で指定された時間が経過しましたが、<see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> で指定された非同期操作が完了していません。  
  
 状況によっては、<see cref="T:System.IAsyncResult" /> が誤って <see langword="IsCompleted" /> に設定されている可能性があります。 これが発生して <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> が呼び出された場合、<see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> で指定された時間が経過したにもかかわらず <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> で指定した非同期操作が完了していないと、EndExecuteNonQuery が SqlException エラーを発生させることがあります。 このような状況を修正するには、CommandTimeout の値を大きくするか、非同期操作で実行されている作業を軽減する必要があります。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader EndExecuteReader (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader EndExecuteReader(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> の呼び出しで返される <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader" />。</param>
        <summary>Transact\-SQL ステートメントの非同期実行を完了し、要求された <see cref="T:System.Data.SqlClient.SqlDataReader" /> を返します。</summary>
        <returns>要求された行を取得するための <see cref="T:System.Data.SqlClient.SqlDataReader" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When you call <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to execute a Transact\-SQL statement, you must call <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> in order to complete the operation. If the process of executing the command has not yet finished, this method blocks until the operation is complete. Users can verify that the command has completed its operation by using the <xref:System.IAsyncResult> instance returned by the <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method. If a callback procedure was specified in the call to <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>, this method must be called.  
  
   
  
## 例  
 For examples demonstrating the use of the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method, see <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> パラメーターは null です \(Microsoft Visual Basic では <see langword="Nothing" /> です\)。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> が 1 回のコマンドの実行に対して複数回呼び出されました。または、メソッドが実行メソッドに対して一致しませんでした \(たとえば、<see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" /> に対する呼び出しを実行するためにコードが <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> を呼び出しました\)。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndExecuteXmlReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader EndExecuteXmlReader (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader EndExecuteXmlReader(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> の呼び出しで返される <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />。</param>
        <summary>Transact\-SQL ステートメントの非同期実行を完了し、要求されたデータを XML として返します。</summary>
        <returns>結果の XML データをフェッチするときに使用できる <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When you call <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to execute a Transact\-SQL statement, you must call <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> in order to complete the operation. If the process of executing the command has not yet finished, this method blocks until the operation is complete. Users can verify that the command has completed its operation by using the <xref:System.IAsyncResult> instance returned by the <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> method. If a callback procedure was specified in the call to <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>, this method must be called.  
  
   
  
## 例  
 For examples demonstrating the use of the <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> method, see <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> パラメーターは null です \(Microsoft Visual Basic では <see langword="Nothing" /> です\)。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> が 1 回のコマンドの実行に対して複数回呼び出されました。または、メソッドが実行メソッドに対して一致しませんでした \(たとえば、<see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> に対する呼び出しを実行するためにコードが <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> を呼び出しました\)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReader">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbDataReader ExecuteDbDataReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbDataReader ExecuteDbDataReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReaderAsync">
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt; ExecuteDbDataReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Data.Common.DbDataReader&gt; ExecuteDbDataReaderAsync(valuetype System.Data.CommandBehavior behavior, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQuery">
      <MemberSignature Language="C#" Value="public override int ExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ExecuteNonQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>接続に対して Transact\-SQL ステートメントを実行し、影響を受けた行数を返します。</summary>
        <returns>影響を受けた行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can use the <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> to perform catalog operations \(for example, querying the structure of a database or creating database objects such as tables\), or to change the data in a database without using a <xref:System.Data.DataSet> by executing UPDATE, INSERT, or DELETE statements.  
  
 Although the <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> returns no rows, any output parameters or return values mapped to parameters are populated with data.  
  
 For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. When a trigger exists on a table being inserted or updated, the return value includes the number of rows affected by both the insert or update operation and the number of rows affected by the trigger or triggers. For all other types of statements, the return value is \-1. If a rollback occurs, the return value is also \-1.  
  
   
  
## 例  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and then executes it using <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>. The example is passed a string that is a Transact\-SQL statement \(such as UPDATE, INSERT, or DELETE\) and a string to use to connect to the data source.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteNonQuery Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定された時に、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">ロックされた行に対するコマンドの実行中に、例外が発生しました。 Microsoft .NET Framework バージョン 1.0 を使用している場合は、この例外は生成されません。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.InvalidOperationException">ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQueryAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ExecuteNonQueryAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ExecuteNonQueryAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">取り消し命令。</param>
        <summary>接続に対して Transact-SQL ステートメントを実行し、影響を受ける行の数を返す <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" /> の非同期バージョン。 キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄することを要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" /> を複数回呼び出す。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に SQL Server がエラーを返しました。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader ExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader ExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> を <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> に送信し、<see cref="T:System.Data.SqlClient.SqlDataReader" /> を構築します。</summary>
        <returns>
          <see cref="T:System.Data.SqlClient.SqlDataReader" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When the <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> property is set to **languageKeyword tag is not supported!!!!**  
, the <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> property should be set to the name of the stored procedure. The command executes this stored procedure when you call <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>.  
  
> [!NOTE]
>  If a transaction is deadlocked, an exception may not be thrown until <xref:System.Data.SqlClient.SqlDataReader.Read%2A> is called.  
  
 The multiple active result set \(MARS\) feature allows for multiple actions using the same connection.  
  
 If you use <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http:\/\/support.microsoft.com.  
  
   
  
## 例  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand>, and then executes it by passing a string that is a Transact\-SQL SELECT statement, and a string to use to connect to the data source.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteReader Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteReader Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定された時に、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">ロックされた行に対するコマンドの実行中に、例外が発生しました。 Microsoft .NET Framework バージョン 1.0 を使用している場合は、この例外は生成されません。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.InvalidOperationException">現在の接続の状態は "終了" です。<see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> には開いている <see cref="T:System.Data.SqlClient.SqlConnection" /> が必要です。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader ExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader ExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">
          <see cref="T:System.Data.CommandBehavior" /> 値の 1 つ。</param>
        <summary>
          <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> を <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> に送信し、<see cref="T:System.Data.CommandBehavior" /> 値のいずれかを使用して <see cref="T:System.Data.SqlClient.SqlDataReader" /> を構築します。</summary>
        <returns>
          <see cref="T:System.Data.SqlClient.SqlDataReader" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When the <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> property is set to **languageKeyword tag is not supported!!!!**  
, the <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> property should be set to the name of the stored procedure. The command executes this stored procedure when you call <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>.  
  
> [!NOTE]
>  Use <xref:System.Data.CommandBehavior.SequentialAccess> to retrieve large values and binary data. Otherwise, an <xref:System.OutOfMemoryException> might occur and the connection will be closed.  
  
 The multiple active result set \(MARS\) feature allows for multiple actions using the same connection.  
  
 If you use <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http:\/\/support.microsoft.com.  
  
   
  
## 例  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand>, and then executes it by passing a string that is a Transact\-SQL SELECT statement, and a string to use to connect to the data source. <xref:System.Data.CommandBehavior> is set to <xref:System.Data.CommandBehavior.CloseConnection>.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteReader2\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader2/CS/mysample.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteReader2\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader2/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.InvalidOperationException">ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteReaderAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Data.SqlClient.SqlCommand" /> によって記述された Transact-SQL ステートメントまたはストアド プロシージャの非同期実行を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> に <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> を送信し、<see cref="T:System.Data.SqlClient.SqlDataReader" /> を構築する、<see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> の非同期バージョン。 例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.ArgumentException">正しくない <see cref="T:System.Data.CommandBehavior" /> 値。</exception>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync" /> を複数回呼び出しています。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に SQL Server がエラーを返しました。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">ステートメントの実行とデータ取得に関するオプション。<see langword="Default" /> に設定されている場合、<see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> は完全なタスクを返す前に行全体を読み取ります。</param>
        <summary>
          <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> に <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> を送信し <see cref="T:System.Data.SqlClient.SqlDataReader" /> を構築する、<see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" /> の非同期バージョン。 例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.ArgumentException">正しくない <see cref="T:System.Data.CommandBehavior" /> 値。</exception>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)" /> を複数回呼び出しています。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に SQL Server がエラーを返しました。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">取り消し命令。</param>
        <summary>
          <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> に <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> を送信し <see cref="T:System.Data.SqlClient.SqlDataReader" /> を構築する、<see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> の非同期バージョン。  
  
 キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄することを要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.ArgumentException">正しくない <see cref="T:System.Data.CommandBehavior" /> 値。</exception>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> を複数回呼び出しています。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に SQL Server がエラーを返しました。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Data.CommandBehavior behavior, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="behavior">ステートメントの実行とデータ取得に関するオプション。<see langword="Default" /> に設定されている場合、<see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> は完全なタスクを返す前に行全体を読み取ります。</param>
        <param name="cancellationToken">取り消し命令。</param>
        <summary>
          <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> に <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> を送信し、<see cref="T:System.Data.SqlClient.SqlDataReader" /> を構築する、<see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" /> の非同期バージョン。  
  
 キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄することを要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.ArgumentException">正しくない <see cref="T:System.Data.CommandBehavior" /> 値。</exception>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> を複数回呼び出しています。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に SQL Server がエラーを返しました。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalar">
      <MemberSignature Language="C#" Value="public override object ExecuteScalar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ExecuteScalar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteScalar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クエリを実行し、そのクエリが返す結果セットの最初の行にある最初の列を返します。 以降の列または行は無視されます。</summary>
        <returns>結果セットの最初の行の最初の列。結果セットが空の場合は、null 参照 \(Visual Basic の <see langword="Nothing" />\)。 最大 2,033 文字を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use the <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A> method to retrieve a single value \(for example, an aggregate value\) from a database. This requires less code than using the <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> method, and then performing the operations that you need to generate the single value using the data returned by a <xref:System.Data.SqlClient.SqlDataReader>.  
  
 A typical <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A> query can be formatted as in the following C\# example:  
  
```  
cmd.CommandText = "SELECT COUNT(*) FROM dbo.region";  
Int32 count = (Int32) cmd.ExecuteScalar();  
```  
  
   
  
## 例  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and then executes it using <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>. The example is passed a string representing a new value to be inserted into a table, and a string to use to connect to the data source. The function returns the new **legacyBold tag is not supported!!!!**  
 column value if a new row was inserted, 0 on failure.  
  
 [!code-csharp[DataWorks SqlCommand.ExecuteScalar\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.ExecuteScalar/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.ExecuteScalar\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.ExecuteScalar/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定された時に、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">ロックされた行に対するコマンドの実行中に、例外が発生しました。 Microsoft .NET Framework バージョン 1.0 を使用している場合は、この例外は生成されません。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.InvalidOperationException">ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalarAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; ExecuteScalarAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ExecuteScalarAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">取り消し命令。</param>
        <summary>クエリを非同期で実行し、クエリで返された結果セットの最初の行の最初の列を返す <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalar" /> の非同期バージョン。 以降の列または行は無視されます。  
  
 キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄することを要求できます。 例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して、<see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> を複数回呼び出しています。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に SQL Server がエラーを返しました。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteXmlReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader ExecuteXmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader ExecuteXmlReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> を <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> に送信し、<see cref="T:System.Xml.XmlReader" /> オブジェクトを構築します。</summary>
        <returns>
          <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> property ordinarily specifies a [!INCLUDE[tsql](~/includes/tsql-md.md)] statement with a valid FOR XML clause. However, <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> can also specify a statement that returns **languageKeyword tag is not supported!!!!**  
 or **languageKeyword tag is not supported!!!!**  
 data that contains valid XML, or the contents of a column defined with the **languageKeyword tag is not supported!!!!**  
 data type.  
  
 A typical <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> query can be formatted as in the following Microsoft Visual C\# example:  
  
```  
SqlCommand command = new SqlCommand("SELECT * FROM dbo.Customers FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 This method can also be used to retrieve a single\-row, single\-column result set that contains XML data. In this case, if more than one row is returned, the <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> method attaches the <xref:System.Xml.XmlReader> to the value on the first row, and discards the rest of the result set.  
  
 The multiple active result set \(MARS\) feature allows for multiple actions using the same connection.  
  
 If you use <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> to access XML data, SQL Server will return any XML results greater than 2,033 characters in length in multiple rows of 2,033 characters each. To avoid this behavior, use <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> or <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> to read FOR XML queries. For more information, see article Q310378, "PRB: XML Data Is Truncated When You Use SqlDataReader," in the Microsoft Knowledge Base at http:\/\/support.microsoft.com.  
  
   
  
## 例  
 The following example creates a <xref:System.Data.SqlClient.SqlCommand> and then executes it using <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>. The example is passed a string that is a Transact\-SQL FOR XML SELECT statement, and a string to use to connect to the data source.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteXmlReader\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteXmlReader/CS/mysample.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteXmlReader\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteXmlReader/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定された時に、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">ロックされた行に対するコマンドの実行中に、例外が発生しました。 Microsoft .NET Framework バージョン 1.0 を使用している場合は、この例外は生成されません。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.InvalidOperationException">ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteXmlReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt; ExecuteXmlReaderAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Xml.XmlReader&gt; ExecuteXmlReaderAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> に <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> を送信し、<see cref="T:System.Xml.XmlReader" /> オブジェクトを構築する <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" /> の非同期バージョン。  
  
 例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して、<see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> を複数回呼び出しています。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に SQL Server がエラーを返しました。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteXmlReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt; ExecuteXmlReaderAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Xml.XmlReader&gt; ExecuteXmlReaderAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">取り消し命令。</param>
        <summary>
          <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> に <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> を送信し、<see cref="T:System.Xml.XmlReader" /> オブジェクトを構築する <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" /> の非同期バージョン。  
  
 キャンセル トークンを使用すると、コマンド タイムアウトが経過する前に操作を破棄するように要求できます。  例外は、返されたタスク オブジェクトによって報告されます。</summary>
        <returns>非同期操作を表すタスク。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](http://msdn.microsoft.com/ja-jp/85da7447-7125-426e-aa5f-438a290d1f77).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.Stream" /> に設定された際に、**Binary** または **VarBinary** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.IO.TextReader" /> に設定されていたときに、**Char**、**NChar**、**NVarChar**、**VarChar**、または **Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。  
  
 <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> が <see cref="T:System.Xml.XmlReader" /> に設定されたときに、**Xml** 以外の <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> が使用されました。</exception>
        <exception cref="T:System.InvalidOperationException">タスクの完了前に、同じインスタンスに対して、<see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> を複数回呼び出しています。  
  
 ストリーミング操作中に、<see cref="T:System.Data.SqlClient.SqlConnection" /> が閉じられたか切断されました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。  
  
 <see langword="Context Connection=true" /> は接続文字列で指定されます。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">コマンド テキストの実行中に SQL Server がエラーを返しました。  
  
 ストリーミング操作中にタイムアウトが発生しました。 ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.IO.IOException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトでエラーが発生しました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
        <exception cref="T:System.ObjectDisposedException">ストリーミング操作中に、<see cref="T:System.IO.Stream" />、<see cref="T:System.Xml.XmlReader" />、または <see cref="T:System.IO.TextReader" /> オブジェクトが閉じられました。  ストリーミングの詳細については、「[SqlClient Streaming Support](http://msdn.microsoft.com/ja-jp/c449365b-470b-4edb-9d61-8353149f5531)」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="Notification">
      <MemberSignature Language="C#" Value="public System.Data.Sql.SqlNotificationRequest Notification { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Sql.SqlNotificationRequest Notification" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Notification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Sql.SqlNotificationRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコマンドにバインドされた <see cref="T:System.Data.Sql.SqlNotificationRequest" /> オブジェクトを指定する値を取得または設定します。</summary>
        <value>null \(既定\) に設定されている場合、通知を要求することはできません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効にするために、コマンドを実行する前に、このプロパティの値を設定する必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotificationAutoEnlist">
      <MemberSignature Language="C#" Value="public bool NotificationAutoEnlist { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotificationAutoEnlist" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.NotificationAutoEnlist" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>共通 <see cref="T:System.Data.SqlClient.SqlDependency" /> オブジェクトからのクエリ通知をアプリケーションで自動的に受信するかどうかを示す値を取得または設定します。</summary>
        <value>アプリケーションでクエリ通知を自動的に受信する場合は **true**。それ以外の場合は **false**。 既定値は **true** です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この機能は、SQL Server に対して ASP ページで実行されるすべてのコマンドに対する通知を受信する ASP.NET アプリケーションで使用されます。 これにより、ASP.NET ページをレンダリングするためのクエリでは、異なる結果が生成されるまでページをキャッシュできます。 自動参加します。  
  
 このプロパティは、クエリ通知をサポートする SQL Server のバージョンにのみ適用されます。 以前のバージョンでは、このプロパティを設定 **true** アプリケーションに影響を与えません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlParameterCollection Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlParameterCollection Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlParameterCollection" /> を取得します。</summary>
        <value>Transact\-SQL ステートメントまたはストアド プロシージャのパラメーター。 既定値は空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The Microsoft .NET Framework Data Provider for SQL Server does not support the question mark \(?\) placeholder for passing parameters to a SQL Statement or a stored procedure called by a command of **languageKeyword tag is not supported!!!!**  
. In this case, named parameters must be used. For example:  
  
 SELECT \* FROM Customers WHERE CustomerID \= @CustomerID  
  
> [!NOTE]
>  If the parameters in the collection do not match the requirements of the query to be executed, an error may result.  
  
 For more information, see [Using Stored Procedures with a Command](http://msdn.microsoft.com/ja-jp/537d8a2c-d40b-4000-83eb-bc1fcc93f707).  
  
   
  
## 例  
 The following example demonstrates how to create a <xref:System.Data.SqlClient.SqlCommand> and add parameters to the <xref:System.Data.SqlClient.SqlParameterCollection>.  
  
 [!code-csharp[DataWorks SqlParameterCollection.AddWithValue\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlParameterCollection.AddWithValue/CS/source.cs#1)]
 [!code-vb[DataWorks SqlParameterCollection.AddWithValue\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlParameterCollection.AddWithValue/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public override void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Prepare() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Prepare" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>SQL Server のインスタンスに準備されたバージョンのコマンドを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> is set to **languageKeyword tag is not supported!!!!**  
, the call to <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> should succeed, although it may cause a no\-op.  
  
 Before you call <xref:System.Data.SqlClient.SqlCommand.Prepare%2A>, specify the data type of each parameter in the statement to be prepared. For each parameter that has a variable length data type, you must set the <xref:System.Data.SqlClient.SqlParameter.Size%2A> property to the maximum size needed. <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> returns an error if these conditions are not met.  
  
> [!NOTE]
>  If the database context is changed by executing the Transact\-SQL **languageKeyword tag is not supported!!!!**  
>  statement, or by calling the <xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A> method, then <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> must be called a second time.  
  
 If you call an **languageKeyword tag is not supported!!!!**  
 method after calling <xref:System.Data.SqlClient.SqlCommand.Prepare%2A>, any parameter value that is larger than the value specified by the <xref:System.Data.SqlClient.SqlParameter.Size%2A> property is automatically truncated to the original specified size of the parameter, and no truncation errors are returned.  
  
 Output parameters \(whether prepared or not\) must have a user\-specified data type. If you specify a variable length data type, you must also specify the maximum <xref:System.Data.SqlClient.SqlParameter.Size%2A>.  
  
 Prior to Visual Studio 2010, <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> threw an exception.  Beginning in Visual Studio 2010, this method does not throw an exception.  
  
   
  
## 例  
 The following example demonstrates the use of the <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> method.  
  
 [!code-csharp[Classic WebData SqlCommand.Prepare\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Prepare/CS/Source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.Prepare\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Prepare/VB/Source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetCommandTimeout">
      <MemberSignature Language="C#" Value="public void ResetCommandTimeout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetCommandTimeout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ResetCommandTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> プロパティを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値、 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> は 30 秒です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatementCompleted">
      <MemberSignature Language="C#" Value="public event System.Data.StatementCompletedEventHandler StatementCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.StatementCompletedEventHandler StatementCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlCommand.StatementCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.StatementCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Transact\-SQL ステートメントの実行が完了すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.System#ICloneable#Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のインスタンスのコピーである新しい <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクトを作成します。</summary>
        <returns>このインスタンスのコピーである新しい <see cref="T:System.Data.SqlClient.SqlCommand" /> オブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction Transaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlTransaction Transaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Transaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlTransaction" /> が実行される <see cref="T:System.Data.SqlClient.SqlCommand" /> を取得または設定します。</summary>
        <value>
          <see cref="T:System.Data.SqlClient.SqlTransaction" />。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You cannot set the <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> property if it is already set to a specific value, and the command is in the process of executing. If you set the transaction property to a <xref:System.Data.SqlClient.SqlTransaction> object that is not connected to the same <xref:System.Data.SqlClient.SqlConnection> as the <xref:System.Data.SqlClient.SqlCommand> object, an exception is thrown the next time that you attempt to execute a statement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatedRowSource">
      <MemberSignature Language="C#" Value="public override System.Data.UpdateRowSource UpdatedRowSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.UpdateRowSource UpdatedRowSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.UpdatedRowSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.UpdateRowSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.Common.DbDataAdapter" /> の **Update** メソッドで使用するときに、コマンドの結果を <see cref="T:System.Data.DataRow" /> に適用する方法を取得または設定します。</summary>
        <value>
          <see cref="T:System.Data.UpdateRowSource" /> 値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The default <xref:System.Data.UpdateRowSource> value is **legacyBold tag is not supported!!!!**  
 unless the command is automatically generated \(as in the case of the <xref:System.Data.SqlClient.SqlCommandBuilder>\), in which case the default is **legacyBold tag is not supported!!!!**  
.  
  
 For more information about using the **legacyBold tag is not supported!!!!**  
 property, see [Using Parameters with a DataAdapter](http://msdn.microsoft.com/ja-jp/f21e6aba-b76d-46ad-a83e-2ad8e0af1e12).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginExecuteReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Data.SqlClient.SqlCommand" /> で定義された Transact\-SQL ステートメントまたはストアド プロシージャの非同期実行を開始し、サーバーから 1 つ以上の結果を取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BeginExecuteXmlReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Data.SqlClient.SqlCommand" /> によって記述される Transact\-SQL ステートメントまたはストアド プロシージャの非同期実行を開始し、結果を <see cref="T:System.Xml.XmlReader" /> オブジェクトとして返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BeginExecuteNonQuery">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Data.SqlClient.SqlCommand" /> によって定義された Transact\-SQL ステートメントまたはストアド プロシージャの非同期実行を開始します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ExecuteXmlReaderAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Data.SqlClient.SqlCommand" /> によって記述されている Transact-SQL ステートメントまたはストアド プロシージャの非同期実行を開始し、結果を <see cref="T:System.Xml.XmlReader" /> オブジェクトとして返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ExecuteReader">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> を <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> に送信し、<see cref="T:System.Data.SqlClient.SqlDataReader" /> を構築します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.SqlClient.SqlCommand" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>