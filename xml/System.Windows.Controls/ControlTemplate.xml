<Type Name="ControlTemplate" FullName="System.Windows.Controls.ControlTemplate">
  <TypeSignature Language="C#" Value="public class ControlTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ControlTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>視覚的な構造とさまざまな動作を指定する <see cref="T:System.Windows.Controls.Control" /> コントロールの複数のインスタンス間で共有できます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Controls.ControlTemplate> コントロールの視覚的な構造を指定することができます。 コントロールの作成者は、既定値を定義できます <xref:System.Windows.Controls.ControlTemplate> アプリケーション作成者が上書きできると、 <xref:System.Windows.Controls.ControlTemplate> をコントロールの視覚的な構造を再構築します。  
  
 コントロール テンプレートによって提供される多くの機能は、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] スタイルとテンプレートのモデルです。 スタイルとテンプレートのモデルから、ある多くの場合必要はありません、独自のコントロールを作成するのような非常に柔軟に提供します。 コントロールの視覚エフェクトを変更したり、置き換えたりする必要のあるアプリケーション作成者の場合は、 <xref:System.Windows.Controls.ControlTemplate> の既存のコントロールを参照してください、 [スタイルとテンプレート](http://msdn.microsoft.com/ja-jp/481765e5-5467-4a75-9f7b-e10e2ac410d9) 例とについて詳しく説明するトピックです。  
  
 独自のコントロールを作成する場合に「カスタム コントロールを作成する」を参照してください、 [コントロール作成の概要](http://msdn.microsoft.com/ja-jp/3d864748-cff0-4e63-9b23-d8e5a635b28f)します。  
  
 A <xref:System.Windows.Controls.ControlTemplate> がユーザーとスタイルをなどのオブジェクトの外側に表示されていない実装の細部の自己完結型装置を使用するものでは。 同じコントロール テンプレート内では、コントロール テンプレートの内容を操作する唯一の方法です。  
  
<a name="xamlObjectElementUsage_VisualTree"></a>   
## XAML プロパティ要素の使用  
  
```  
<ControlTemplate>  
  <VisualTreeRootNode>VisualTreeNodeContents  
  </VisualTreeRootNode>  
</ControlTemplate>  
```  
  
<a name="xamlValues_VisualTree"></a>   
## XAML 値  
 *ControlTemplate*  
 オブジェクト要素 <xref:System.Windows.Controls.ControlTemplate> または派生クラスです。  
  
 *VisualTreeRootNode*  
 単一の [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 要素の直下の子として、 <xref:System.Windows.Controls.ControlTemplate> \(または派生クラス\)。 テンプレートには、単一のルート ノードが必要です。 有効なテンプレートとして選択した要素を生成するために *VisualTreeRootNode* が多くの場合、複数の子要素をサポートするモデルで、独自のコンテンツ モデルをサポートする予定です。  
  
 *VisualTreeNodeContents*  
 目的のテンプレートを完了する 1 つまたは複数の要素。 場合として選択された *VisualTreeRootNode* のみサポートしている 1 つの子、ことがありますのみとして宣言されている 1 つの要素 *VisualTreeNodeContents*します。 可能です \(ただし、一般的でない\) 場合は、テキスト コンテンツを提供する選択した証明書 *VisualTreeRootNode* テキスト コンテンツ プロパティをサポートしています。  
  
   
  
## 例  
 次に示す、 <xref:System.Windows.Controls.Button> <xref:System.Windows.Style> が設定された、 <xref:System.Windows.Controls.ControlTemplate> の <xref:System.Windows.Controls.Button>:  
  
 [!code-xml[StylingIntroSample\_snip\#ButtonCT](~/samples/snippets/csharp/VS_Snippets_Wpf/StylingIntroSample_snip/CSharp/Window1.xaml#buttonct)]  
  
 これが適用時に、 <xref:System.Windows.Controls.Button> として表示される、 <xref:System.Windows.Shapes.Ellipse>:  
  
 79f0ae3e-fc5b-412f-8ff4-abb45395d4d4  
  
 設定すると、 <xref:System.Windows.Controls.Control.Template%2A> のプロパティ、 <xref:System.Windows.Controls.Control> を新しい <xref:System.Windows.Controls.ControlTemplate> 全体のテンプレートを置き換える場合、上記の例に示すようにします。 どのような <xref:System.Windows.Controls.Button> にフォーカスがあるまたは交換するボタンの既定の外観の一部は、押されたときのようになります。 そのため、必要に応じて、どのようなボタンが押されたときのようになります、定義というように、次の例のようにで配置することがあります。  
  
 [!code-xml[ControlTemplateExamples\#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/button.xaml#1)]  
  
 この例がここで示されていないリソースを参照することに注意してください。 完全なサンプルを参照してください。 [Styling with ControlTemplates Sample](http://go.microsoft.com/fwlink/?LinkID=160041)します。 そのサンプルでは、多くのコントロールのコントロール テンプレートの例を提供し、初めてのコントロール テンプレートを作成することをお勧めします。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Style" />
    <altmember cref="T:System.Windows.DataTemplate" />
    <altmember cref="T:System.Windows.Controls.ContentPresenter" />
    <altmember cref="T:System.Windows.Controls.ItemsPresenter" />
    <altmember cref="T:System.Windows.TemplateBindingExtension" />
    <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.ControlTemplate" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor(System.Type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">このテンプレートの対象の型。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Controls.ControlTemplate" /> 指定された対象の型とクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>対象の種類の設定を取得または <see cref="T:System.Windows.Controls.ControlTemplate" /> が対象としています。</summary>
        <value>既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スタンドアロンがあれば <xref:System.Windows.Controls.ControlTemplate> リソース セクションで、 <xref:System.Windows.Controls.ControlTemplate.TargetType%2A> プロパティの型に設定されて、 <xref:System.Windows.Controls.ControlTemplate> は取得の型を自動的に適用されません。 代わりに、指定する必要があります、 `x:Key` 、テンプレートを明示的に適用します。  
  
 また、 <xref:System.Windows.Controls.ControlTemplate.TargetType%2A> に必要なプロパティ、 <xref:System.Windows.Controls.ControlTemplate> テンプレートの定義が含まれている場合、 <xref:System.Windows.Controls.ContentPresenter>です。  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## XAML 属性の使用方法  
  
```  
<object TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## XAML 値  
 *型名*  
 クラスの型名。 参照する、 <xref:System.Type> を使用して、クラスの名前、 [マークアップ拡張機能と WPF XAML](http://msdn.microsoft.com/ja-jp/618dc745-8b14-4886-833f-486d2254bb78)します。  
  
   
  
## 例  
 次の例では、このプロパティの使用方法を示します。  
  
 [!code-xml[ControlTemplateExamples\#Label](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/label.xaml#label)]  
  
 上記の例では、次のリソースを使用します。  
  
  
  
 完全なサンプルを参照してください。 [Styling with ControlTemplates Sample](http://go.microsoft.com/fwlink/?LinkID=160041)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> プロパティにはできません <see langword="null" /> テンプレートの定義がある場合、 <see cref="T:System.Windows.Controls.ContentPresenter" />です。</exception>
        <exception cref="T:System.ArgumentException">指定した型を使用することはできません。<see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> の <see cref="T:System.Windows.Controls.ControlTemplate" /> されたりから継承する必要があります、 <see cref="T:System.Windows.Controls.Control" />, 、 <see cref="T:System.Windows.Controls.Page" />, 、または <see cref="T:System.Windows.Navigation.PageFunctionBase" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションを取得 <see cref="T:System.Windows.TriggerBase" /> プロパティの変更を適用またはに基づいてアクションを実行するオブジェクトが条件を指定します。</summary>
        <value>
          <see cref="T:System.Windows.TriggerBase" /> オブジェクトのコレクション。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## XAML プロパティ要素の使用  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## XAML 値  
 *oneOrMoreTriggers*  
 1 つまたは複数 <xref:System.Windows.TriggerBase> オブジェクト \(これらは、通常、 <xref:System.Windows.Trigger>\)。  
  
   
  
## 例  
 次の例では、このプロパティの使用方法を示します。  
  
 [!code-xml[ControlTemplateExamples\#ToolTip](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/tooltip.xaml#tooltip)]  
  
 上記の例では、次のリソースを使用します。  
  
  
  
  
 完全なサンプルを参照してください。 [Styling with ControlTemplates Sample](http://go.microsoft.com/fwlink/?LinkID=160041)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">要素にこのテンプレートが適用されます。</param>
        <summary>ルールのセットに対してテンプレートの親を確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、次の規則を使用します。  
  
 1. `templatedParent` 型 <xref:System.Windows.FrameworkContentElement>します。  
  
 2. `templatedParent` 型 <xref:System.Windows.FrameworkElement> 外にある、 <xref:System.Windows.Controls.Control>です。  
  
 3. `templatedParent` することはできません、 <xref:System.Windows.Controls.Control> が関連付けられていない、 <xref:System.Windows.Controls.ControlTemplate>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="templatedParent" /> は <see langword="null" /> にすることはできません。</exception>
        <exception cref="T:System.ArgumentException">関連付ける必要があります、 <see cref="T:System.Windows.Controls.ControlTemplate" /> で、 <see cref="T:System.Windows.Controls.Control" /> を設定して、 <see cref="P:System.Windows.Controls.Control.Template" /> プロパティを使用する前に、 <see cref="T:System.Windows.Controls.ControlTemplate" /> で、 <see cref="T:System.Windows.Controls.Control" />です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.ControlTemplate" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>