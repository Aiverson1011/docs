<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>データ オブジェクトとデータ バインド要素に基づいて <see cref="T:System.Windows.DataTemplate" /> を選択する方法を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 Typically, you create a <xref:System.Windows.Controls.DataTemplateSelector> when you have more than one <xref:System.Windows.DataTemplate> for the same type of objects and you want to supply your own logic to choose a <xref:System.Windows.DataTemplate> to apply based on the properties of each data object. Note that if you have objects of different types you can set the <xref:System.Windows.DataTemplate.DataType%2A> property on the <xref:System.Windows.DataTemplate>. If you do that then there is no need to create a <xref:System.Windows.Controls.DataTemplateSelector>. Furthermore, if you have objects of the same type but with different properties, you can also consider using a <xref:System.Windows.DataTrigger> or a data converter. For more information, see [Data Templating Overview](http://msdn.microsoft.com/ja-jp/0f4d9f8c-0230-4013-bd7b-e8e7fed01b4a).  
  
 To create a template selector, create a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. Once your class is defined you can assign an instance of the class to the template selector property of your element.  
  
   
  
## 例  
 In this example, the binding source is a list of `Task` objects. One of the properties of a `Task` object is `Priority`. There are two data templates defined, `myTaskTemplate` and `importantTaskTemplate`.  
  
 To supply logic to choose which <xref:System.Windows.DataTemplate> to use based on the `Priority` value of the data object, create a subclass of <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method. In the following example, the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method provides logic to return the appropriate template based on the value of the `Priority` property. The template to return is found in the resources of the enveloping <xref:System.Windows.Window> element.  
  
 [!code-csharp[DataTemplatingIntro\_snip\#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro\_snip\#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 We can then declare the `TaskListDataTemplateSelector` as a resource:  
  
 [!code-xml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 To use the template selector resource, assign it to the <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> property of the <xref:System.Windows.Controls.ListBox>. The <xref:System.Windows.Controls.ListBox> calls the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method of the `TaskListDataTemplateSelector` for each of the items in the underlying collection. The call passes the data object as the item parameter. The <xref:System.Windows.DataTemplate> that is returned by the method is then applied to that data object.  
  
 [!code-xml[DataTemplatingIntro\_snip\#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 For the complete sample, see [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.DataTemplateSelector" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">テンプレートを選択する対象となるデータ オブジェクト。</param>
        <param name="container">データ バインドされたオブジェクト。</param>
        <summary>派生クラスでオーバーライドされた場合、カスタム ロジックに基づいた <see cref="T:System.Windows.DataTemplate" /> を返します。</summary>
        <returns>
          <see cref="T:System.Windows.DataTemplate" /> または <see langword="null" /> を返します。 既定値は <see langword="null" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、同じ種類のオブジェクトに対して定義されている 1 つ以上のデータ テンプレートがある場合は、テンプレート セレクターを使用します。 などバインド ソースがリストの場合、student オブジェクトの一覧はパートタイム受講者に、特定のテンプレートを適用するとします。 継承するクラスを作成することでこれを行う <xref:System.Windows.Controls.DataTemplateSelector> をオーバーライドして、 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> メソッドです。 クラスを定義すると、要素のテンプレート セレクター プロパティに、クラスのインスタンスを割り当てることができます。  
  
   
  
## 例  
 この例では、バインド ソースは、一連の `Task` オブジェクトです。 プロパティの 1 つ、 `Task` オブジェクトが `Priority`です。 定義されている、2 つのデータ テンプレートが `myTaskTemplate` と `importantTaskTemplate`です。  
  
 選択するためのロジックを提供する <xref:System.Windows.DataTemplate> に基づいて、使用するのには、 `Priority` 値のデータ オブジェクトのサブクラスを作成 <xref:System.Windows.Controls.DataTemplateSelector> させ、 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> メソッドです。 次の例では、 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> メソッドの値に基づいて、適切なテンプレートを返すロジックを提供する、 `Priority` プロパティです。 返されるテンプレートは、エンベロープの資料を参照 <xref:System.Windows.Window> 要素。  
  
 [!code-csharp[DataTemplatingIntro\_snip\#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro\_snip\#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 宣言できますし、 `TaskListDataTemplateSelector` をリソースとして。  
  
 [!code-xml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 テンプレート セレクター リソースを使用するには、それを割り当てる、 <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> のプロパティ、 <xref:System.Windows.Controls.ListBox>です。<xref:System.Windows.Controls.ListBox> 呼び出し、 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> のメソッド、 `TaskListDataTemplateSelector` の基になるコレクション内の項目ごとにします。 呼び出しは、アイテムのパラメーターとして、データ オブジェクトを渡します。<xref:System.Windows.DataTemplate> によって返される、メソッドがそのデータ オブジェクトに適用されます。  
  
 [!code-xml[DataTemplatingIntro\_snip\#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 完全なサンプルを参照してください。 [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>