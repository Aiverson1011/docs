<Type Name="Calendar" FullName="System.Windows.Controls.Calendar">
  <TypeSignature Language="C#" Value="public class Calendar : System.Windows.Controls.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Calendar extends System.Windows.Controls.Control" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Calendar" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.TemplatePart(Name="PART_Root", Type=typeof(System.Windows.Controls.Panel))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.TemplatePart(Name="PART_CalendarItem", Type=typeof(System.Windows.Controls.Primitives.CalendarItem))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ユーザーがビジュアルな予定表を使用して日付を選択できるコントロールを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Controls.Calendar> 制御したり、それ自体のボックスの一覧の一部として、 <xref:System.Windows.Controls.DatePicker> コントロールです。 詳細については、「<xref:System.Windows.Controls.DatePicker>」を参照してください。  
  
> [!NOTE]
>  <xref:System.Windows.Controls.Calendar> はグレゴリオ暦だけをサポートしています。  
  
 次の表は、一般に関連付けられているタスクに関する情報を提供、 <xref:System.Windows.Controls.Calendar>です。  
  
|タスク|実装|  
|---------|--------|  
|<xref:System.Windows.Controls.Calendar> 1 か月、年全体、または 10 年を表示します。|設定、 <xref:System.Windows.Controls.Calendar.DisplayMode%2A> プロパティを月、年、または 10 年間です。|  
|ユーザーが日付を選択するかどうか、日付の範囲、または日付の複数の範囲を指定します。|使用して、 <xref:System.Windows.Controls.Calendar.SelectionMode%2A>です。|  
|指定の日付を選択することはできません。|<xref:System.Windows.Controls.Calendar.BlackoutDates%2A> プロパティを使用します。|  
|日付の範囲を指定する、 <xref:System.Windows.Controls.Calendar> が表示されます。|<xref:System.Windows.Controls.Calendar.DisplayDateStart%2A> プロパティおよび <xref:System.Windows.Controls.Calendar.DisplayDateEnd%2A> プロパティを使用します。|  
|現在の日付が強調表示されているかどうかを指定します。|<xref:System.Windows.Controls.Calendar.IsTodayHighlighted%2A> プロパティを使用します。 既定では、 <xref:System.Windows.Controls.Calendar.IsTodayHighlighted%2A> は `true`です。|  
|サイズを変更、 <xref:System.Windows.Controls.Calendar>です。|使用して、 <xref:System.Windows.Controls.Viewbox> 設定や、 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> プロパティを <xref:System.Windows.Media.ScaleTransform>です。  設定する場合、 <xref:System.Windows.FrameworkElement.Width%2A> と <xref:System.Windows.FrameworkElement.Height%2A> のプロパティ、 <xref:System.Windows.Controls.Calendar>, 、実際のカレンダーでは、そのサイズは変更されません。|  
  
 <xref:System.Windows.Controls.Calendar> コントロールは、マウスまたはキーボードを使用して基本的なナビゲーションを提供します。 次の表は、キーボード ナビゲーションをまとめたものです。  
  
|キーの組み合わせ|<xref:System.Windows.Controls.Calendar.DisplayMode%2A>|アクション|  
|--------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|  
|矢印|<xref:System.Windows.Controls.CalendarMode.Month>|変更、 <xref:System.Windows.Controls.Calendar.SelectedDate%2A> プロパティ場合、 <xref:System.Windows.Controls.Calendar.SelectionMode%2A> にプロパティが設定されていない <xref:System.Windows.Controls.CalendarSelectionMode.None>します。|  
|矢印|<xref:System.Windows.Controls.CalendarMode.Year>|月の変更、 <xref:System.Windows.Controls.Calendar.DisplayDate%2A> プロパティです。  なお、 <xref:System.Windows.Controls.Calendar.SelectedDate%2A> は変わりません。|  
|矢印|<xref:System.Windows.Controls.CalendarMode.Decade>|変更の年、 <xref:System.Windows.Controls.Calendar.DisplayDate%2A>です。  なお、 <xref:System.Windows.Controls.Calendar.SelectedDate%2A> は変わりません。|  
|SHIFT キーを押しながら方向|<xref:System.Windows.Controls.CalendarMode.Month>|場合 <xref:System.Windows.Controls.Calendar.SelectionMode%2A> に設定されていない <xref:System.Windows.Controls.CalendarSelectionMode.SingleDate> または <xref:System.Windows.Controls.CalendarSelectionMode.None>, 、選択した日付の範囲が広がります。|  
|ホーム|<xref:System.Windows.Controls.CalendarMode.Month>|変更、 <xref:System.Windows.Controls.Calendar.SelectedDate%2A> 現在の月の最初の日付です。|  
|ホーム|<xref:System.Windows.Controls.CalendarMode.Year>|月の変更、 <xref:System.Windows.Controls.Calendar.DisplayDate%2A> 年の最初の月にします。<xref:System.Windows.Controls.Calendar.SelectedDate%2A> は変わりません。|  
|ホーム|<xref:System.Windows.Controls.CalendarMode.Decade>|変更の年、 <xref:System.Windows.Controls.Calendar.DisplayDate%2A> 10 年の最初の年をします。<xref:System.Windows.Controls.Calendar.SelectedDate%2A> は変わりません。|  
|End|<xref:System.Windows.Controls.CalendarMode.Month>|変更、 <xref:System.Windows.Controls.Calendar.SelectedDate%2A> 、現在の月の最終日にします。|  
|End|<xref:System.Windows.Controls.CalendarMode.Year>|月の変更、 <xref:System.Windows.Controls.Calendar.DisplayDate%2A> 年の最後の月にします。<xref:System.Windows.Controls.Calendar.SelectedDate%2A> は変わりません。|  
|End|<xref:System.Windows.Controls.CalendarMode.Decade>|年を変更、 <xref:System.Windows.Controls.Calendar.DisplayDate%2A> 、10 年の最後の年にします。<xref:System.Windows.Controls.Calendar.SelectedDate%2A> は変わりません。|  
|Ctrl \+ ↑|どれでも可|次のスイッチより大きな <xref:System.Windows.Controls.Calendar.DisplayMode%2A>します。 場合 <xref:System.Windows.Controls.Calendar.DisplayMode%2A> が既に <xref:System.Windows.Controls.CalendarMode.Decade>, 、操作はありません。|  
|Ctrl \+↓|どれでも可|次のスイッチより小さい <xref:System.Windows.Controls.Calendar.DisplayMode%2A>します。 場合 <xref:System.Windows.Controls.Calendar.DisplayMode%2A> が既に <xref:System.Windows.Controls.CalendarMode.Month>, 、操作はありません。|  
|Space キーまたは ENTER|<xref:System.Windows.Controls.CalendarMode.Year> または <xref:System.Windows.Controls.CalendarMode.Decade>|スイッチ <xref:System.Windows.Controls.Calendar.DisplayMode%2A> に、 <xref:System.Windows.Controls.CalendarMode.Month> または <xref:System.Windows.Controls.CalendarMode.Year> フォーカスのあるアイテムによって表されます。|  
  
## 予定表コントロールのカスタマイズ  
 複数に同じプロパティ設定を適用する <xref:System.Windows.Controls.Calendar> コントロールを使用して、 <xref:System.Windows.FrameworkElement.Style%2A> プロパティです。 既定値を変更する <xref:System.Windows.Controls.ControlTemplate> コントロール固有の外観を与えるためです。 作成の詳細については、 <xref:System.Windows.Controls.ControlTemplate>, を参照してください [ControlTemplate を作成することで、既存のコントロールの外観のカスタマイズ](http://msdn.microsoft.com/ja-jp/678dd116-43a2-4b8c-82b5-6b826f126e31)します。  パーツおよびに固有の状態を確認する、 <xref:System.Windows.Controls.Calendar>, を参照してください [予定表のスタイルとテンプレート](http://msdn.microsoft.com/ja-jp/f4fcf046-7a8f-41b8-b5a8-534b64e0345c)します。  
  
 コントロールの既定のスタイルでは、このコントロールの依存関係プロパティを設定する場合があります。  プロパティが既定のスタイルが設定されている場合、アプリケーションでコントロールが表示されたときに、プロパティが既定値から変更可能性があります。 既定のスタイルは、デスクトップ テーマでは、アプリケーションが実行されているときに使用が決定されます。  詳細については、次を参照してください。 [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252)します。  
  
> [!NOTE]
>  Visual プロパティの設定は効果プロパティは、両方に存在する場合 <xref:System.Windows.Controls.Calendar> コントロールの既定のテンプレートとを使用して設定します。 「を変更する視覚的構造の、」の「コントロール」セクションで visual プロパティの一覧が見つかります [ControlTemplate 作成することで、既存のコントロールの外観のカスタマイズ](http://msdn.microsoft.com/ja-jp/678dd116-43a2-4b8c-82b5-6b826f126e31)します。  
  
<a name="xamlObjectElementUsage_Calendar"></a>   
## XAML オブジェクト要素の使用方法  
  
```  
<Calendar .../>  
```  
  
   
  
## 例  
 次の図は 2 つ <xref:System.Windows.Controls.Calendar> 選択および選択できない日付を持つとなしのいずれかを制御します。  
  
 e88fee11-7853-4729-a844-032c0053211b  
予定表コントロール  
  
 次のコードと XAML は、2 つのページを作成 <xref:System.Windows.Controls.Calendar> 前の図は、次のようなコントロールです。  
  
 [!code-csharp[CalendarSnippets\#1](~/samples/snippets/csharp/VS_Snippets_Wpf/calendarsnippets/csharp/window1.xaml.cs#1)]
 [!code-vb[CalendarSnippets\#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/calendarsnippets/visualbasic/window1.xaml.vb#1)]
 [!code-xml[CalendarSnippets\#1](~/samples/snippets/xaml/VS_Snippets_Wpf/calendarsnippets/xaml/window1.xaml#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Controls.DatePicker" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Calendar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Calendar.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.Calendar" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BlackoutDates">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.CalendarBlackoutDatesCollection BlackoutDates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.CalendarBlackoutDatesCollection BlackoutDates" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Calendar.BlackoutDates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.CalendarBlackoutDatesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>選択不可としてマークされている日付のコレクションを取得します。</summary>
        <value>選択できない日付のコレクション。 既定値は空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコレクション内の日付は灰色と交差アウト カレンダーに表示します。  
  
 すべて期限が切れていない選択できるようにを使用することができます、 <xref:System.Windows.Controls.CalendarBlackoutDatesCollection.AddDatesInPast%2A> このプロパティによって返されるコレクションによって提供されるメソッドです。  
  
<a name="xamlPropertyElementUsage_BlackoutDates"></a>   
## XAML プロパティ要素の使用  
  
```  
<object>  
  <object.BlackoutDates>  
    oneOrMoreCalendarDateRanges  
  </object.BlackoutDates>  
</object>  
```  
  
<a name="xamlValues_BlackoutDates"></a>   
## XAML 値  
 *oneOrMoreCalendarDateRanges*  
 型の 1 つまたは複数のオブジェクト要素 <xref:System.Windows.Controls.CalendarDateRange>します。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Windows.Controls.Calendar> によって日が選択することはできません。  
  
 [!code-csharp[CalendarSnippets\#3](~/samples/snippets/csharp/VS_Snippets_Wpf/calendarsnippets/csharp/window1.xaml.cs#3)]
 [!code-vb[CalendarSnippets\#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/calendarsnippets/visualbasic/window1.xaml.vb#3)]
 [!code-xml[CalendarSnippets\#3](~/samples/snippets/xaml/VS_Snippets_Wpf/calendarsnippets/xaml/window1.xaml#3)]  
  
 前の例では、次の図は、次のような出力を生成します。  
  
 e4e9273c-5adf-42d8-bd0f-80bf75b913d5  
選択できない日付を含むカレンダー  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalendarButtonStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style CalendarButtonStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style CalendarButtonStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Calendar.CalendarButtonStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Windows.Style" /> に関連付けられているコントロールの内部 <see cref="T:System.Windows.Controls.Primitives.CalendarButton" /> オブジェクトです。</summary>
        <value>現在のスタイル、 <see cref="T:System.Windows.Controls.Primitives.CalendarButton" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlAttributeUsage_CalendarButtonStyle"></a>   
## XAML 属性の使用方法  
  
```  
<object CalendarButtonStyle="{resourceExtensionstyleResourceKey"/>  
  
```  
  
<a name="xamlValues_CalendarButtonStyle"></a>   
## XAML 値  
 *resourceExtension*  
 次のいずれか: `StaticResource` または `DynamicResource`です。 詳細については、次を参照してください。 [XAML リソース](http://msdn.microsoft.com/ja-jp/91580b89-a0a8-4889-aecb-fddf8e63175f)します。  
  
 *styleResourceKey*  
 要求されているリソースを識別するキー。 このキーは既存のリソースを <xref:System.Windows.ResourceDictionary>です。  
  
<a name="dependencyPropertyInfo_CalendarButtonStyle"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Calendar.CalendarButtonStyleProperty>|  
|メタデータのプロパティを設定 **true**|なし|  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalendarButtonStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CalendarButtonStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CalendarButtonStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Calendar.CalendarButtonStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Calendar.CalendarButtonStyle" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalendarDayButtonStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style CalendarDayButtonStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style CalendarDayButtonStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Calendar.CalendarDayButtonStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Windows.Style" /> に関連付けられているコントロールの内部 <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> オブジェクトです。</summary>
        <value>現在のスタイル、 <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlAttributeUsage_CalendarDayButtonStyle"></a>   
## XAML 属性の使用方法  
  
```  
<object CalendarDayButtonStyle="{resourceExtensionstyleResourceKey}"/>  
  
```  
  
<a name="xamlValues_CalendarDayButtonStyle"></a>   
## XAML 値  
 *resourceExtension*  
 次のいずれか: `StaticResource` または `DynamicResource`です。 詳細については、次を参照してください。 [XAML リソース](http://msdn.microsoft.com/ja-jp/91580b89-a0a8-4889-aecb-fddf8e63175f)します。  
  
 *styleResourceKey*  
 要求されているリソースを識別するキー。 このキーは既存のリソースを <xref:System.Windows.ResourceDictionary>です。  
  
<a name="dependencyPropertyInfo_CalendarDayButtonStyle"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Calendar.CalendarDayButtonStyleProperty>|  
|メタデータのプロパティを設定 **true**|なし|  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalendarDayButtonStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CalendarDayButtonStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CalendarDayButtonStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Calendar.CalendarDayButtonStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Calendar.CalendarDayButtonStyle" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalendarItemStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style CalendarItemStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style CalendarItemStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Calendar.CalendarItemStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Windows.Style" /> に関連付けられているコントロールの内部 <see cref="T:System.Windows.Controls.Primitives.CalendarItem" /> オブジェクトです。</summary>
        <value>現在のスタイル、 <see cref="T:System.Windows.Controls.Primitives.CalendarItem" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlAttributeUsage_CalendarItemStyle"></a>   
## XAML 属性の使用方法  
  
```  
<object CalendarItemStyle="{resourceExtensionstyleResourceKey}"/>  
  
```  
  
<a name="xamlValues_CalendarItemStyle"></a>   
## XAML 値  
 *resourceExtension*  
 次のいずれか: `StaticResource` または `DynamicResource`です。 詳細については、次を参照してください。 [XAML リソース](http://msdn.microsoft.com/ja-jp/91580b89-a0a8-4889-aecb-fddf8e63175f)します。  
  
 *styleResourceKey*  
 要求されているリソースを識別するキー。 このキーは既存のリソースを <xref:System.Windows.ResourceDictionary>です。  
  
<a name="dependencyPropertyInfo_CalendarItemStyle"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Calendar.CalendarItemStyleProperty>|  
|メタデータのプロパティを設定 **true**|なし|  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalendarItemStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CalendarItemStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CalendarItemStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Calendar.CalendarItemStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Calendar.CalendarItemStyle" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayDate">
      <MemberSignature Language="C#" Value="public DateTime DisplayDate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DisplayDate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Calendar.DisplayDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または表示する日付を設定します。</summary>
        <value>日付を表示します。 既定値は、<see cref="P:System.DateTime.Today" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Controls.Calendar.DisplayDate%2A> と <xref:System.Windows.Controls.Calendar.DisplayMode%2A> プロパティ カレンダーが表示され、カレンダーでフォーカスがあるものを指定します。  ユーザーが変更できる、 <xref:System.Windows.Controls.Calendar.SelectedDate%2A> される場合にのみ <xref:System.Windows.Controls.Calendar.DisplayMode%2A> の月に設定されているユーザーが変わる可能性があります、 <xref:System.Windows.Controls.Calendar.DisplayDate%2A> カレンダーが年と 10 年間のモードの場合にします。  次の表は、モードを変更する方法を示して、 <xref:System.Windows.Controls.Calendar.DisplayDate%2A>です。  
  
|DisplayMode|アクション|  
|-----------------|-----------|  
|月|<xref:System.Windows.Controls.Calendar.DisplayDate%2A> ユーザーが別の月に移動するときに変更します。|  
|Year|月の <xref:System.Windows.Controls.Calendar.DisplayDate%2A> をクリックするか、別の月に移動したときに変更します。|  
|10 年間|年の <xref:System.Windows.Controls.Calendar.DisplayDate%2A> をクリックするか、他の年に移動したときに変更します。|  
  
 <xref:System.Windows.Controls.Calendar.DisplayDate%2A> 値がで指定された日付の範囲外にある場合は無視されます <xref:System.Windows.Controls.Calendar.DisplayDateStart%2A> と <xref:System.Windows.Controls.Calendar.DisplayDateEnd%2A> プロパティです。  
  
<a name="dependencyPropertyInfo_DisplayDate"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Calendar.DisplayDateProperty>|  
|メタデータのプロパティを設定 **true**|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
<a name="xamlAttributeUsage_DisplayDate"></a>   
## XAML 属性の使用方法  
  
```  
<Calendar DisplayDate="dateTimeString"/>  
```  
  
<a name="xamlValues_DisplayDate"></a>   
## XAML 値  
 *dateTimeString*  
 記載されているいずれかの形式では、日付、 [DateTime XAML 構文](http://msdn.microsoft.com/ja-jp/5901710a-609b-40c8-9d65-f0016cd9090b) トピックです。  
  
   
  
## 例  
 次のコードをセットアップ、 <xref:System.Windows.Controls.Calendar> 表示可能な日付は、現在選択されていると表示されている日付を設定の特定の範囲とします。  
  
 [!code-csharp[CalendarSnippets\#2](~/samples/snippets/csharp/VS_Snippets_Wpf/calendarsnippets/csharp/window1.xaml.cs#2)]
 [!code-vb[CalendarSnippets\#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/calendarsnippets/visualbasic/window1.xaml.vb#2)]
 [!code-xml[CalendarSnippets\#2](~/samples/snippets/xaml/VS_Snippets_Wpf/calendarsnippets/xaml/window1.xaml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayDateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.CalendarDateChangedEventArgs&gt; DisplayDateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.CalendarDateChangedEventArgs&gt; DisplayDateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.Calendar.DisplayDateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.CalendarDateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="P:System.Windows.Controls.Calendar.DisplayDate" /> プロパティを変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは <xref:System.Windows.Controls.Calendar.DisplayDate%2A> その新しい値が割り当てられます。  
  
<a name="xamlAttributeUsage_DisplayDateChanged"></a>   
## XAML 属性の使用方法  
  
```  
<Calendar DisplayDateChanged="eventhandler"/>  
```  
  
   
  
## 例  
 次のイベント ハンドラーの更新プログラム、 <xref:System.Windows.Controls.TextBox> からの情報、 <xref:System.Windows.Controls.Calendar.DisplayDateChanged> イベントです。 この例で使用できる例の一部である、 <xref:System.Windows.Controls.Calendar> の概要です。  
  
 [!code-xml[CalendarSnippets\#6](~/samples/snippets/xaml/VS_Snippets_Wpf/calendarsnippets/xaml/window1.xaml#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayDateEnd">
      <MemberSignature Language="C#" Value="public Nullable&lt;DateTime&gt; DisplayDateEnd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; DisplayDateEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Calendar.DisplayDateEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または最後の日付をカレンダーで使用できる日付の範囲に設定します。</summary>
        <value>カレンダーで使用可能な最後の日付です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 範囲を制限する、 <xref:System.Windows.Controls.Calendar> を設定して、 <xref:System.Windows.Controls.Calendar.DisplayDateStart%2A> と <xref:System.Windows.Controls.Calendar.DisplayDateEnd%2A> プロパティです。  ユーザーにスクロールするか、この範囲外の日付を選択することはできません。  設定した場合、 <xref:System.Windows.Controls.Calendar.SelectedDate%2A> プロパティの後の日付を <xref:System.Windows.Controls.Calendar.DisplayDateEnd%2A>, 、<xref:System.Windows.Controls.Calendar.DisplayDateEnd%2A> と同じ値に設定されている <xref:System.Windows.Controls.Calendar.SelectedDate%2A>します。  
  
<a name="dependencyPropertyInfo_DisplayDateEnd"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Calendar.DisplayDateEndProperty>|  
|メタデータのプロパティを設定 **true**|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
<a name="xamlAttributeUsage_DisplayDateEnd"></a>   
## XAML 属性の使用方法  
  
```  
<Calendar DisplayDateEnd="dateTimeString"/>  
```  
  
<a name="xamlValues_DisplayDateEnd"></a>   
## XAML 値  
 *dateTimeString*  
 記載されているいずれかの形式では、日付、 [DateTime XAML 構文](http://msdn.microsoft.com/ja-jp/5901710a-609b-40c8-9d65-f0016cd9090b) トピックです。  
  
   
  
## 例  
 次のコードをセットアップ、 <xref:System.Windows.Controls.Calendar> 表示可能な日付は、現在選択されていると表示されている日付を設定の特定の範囲とします。  
  
 [!code-csharp[CalendarSnippets\#2](~/samples/snippets/csharp/VS_Snippets_Wpf/calendarsnippets/csharp/window1.xaml.cs#2)]
 [!code-vb[CalendarSnippets\#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/calendarsnippets/visualbasic/window1.xaml.vb#2)]
 [!code-xml[CalendarSnippets\#2](~/samples/snippets/xaml/VS_Snippets_Wpf/calendarsnippets/xaml/window1.xaml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.DatePicker.DisplayDateEnd" />
      </Docs>
    </Member>
    <Member MemberName="DisplayDateEndProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DisplayDateEndProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DisplayDateEndProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Calendar.DisplayDateEndProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayDateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DisplayDateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DisplayDateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Calendar.DisplayDateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Calendar.DisplayDate" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayDateStart">
      <MemberSignature Language="C#" Value="public Nullable&lt;DateTime&gt; DisplayDateStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; DisplayDateStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Calendar.DisplayDateStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはカレンダーで使用できる最初の日付を設定します。</summary>
        <value>カレンダーで使用できる最初の日付です。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定して、予定表の範囲を制限することができます、 <xref:System.Windows.Controls.Calendar.DisplayDateStart%2A> と <xref:System.Windows.Controls.Calendar.DisplayDateEnd%2A> プロパティです。  ユーザーにスクロールするか、この範囲外の日付を選択することはできません。  設定した場合、 <xref:System.Windows.Controls.Calendar.SelectedDate%2A> プロパティの前にある日付を <xref:System.Windows.Controls.Calendar.DisplayDateStart%2A>, 、<xref:System.Windows.Controls.Calendar.DisplayDateStart%2A> と同じ値に設定されている <xref:System.Windows.Controls.Calendar.SelectedDate%2A>します。  
  
<a name="dependencyPropertyInfo_DisplayDateStart"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Calendar.DisplayDateStartProperty>|  
|メタデータのプロパティを設定 **true**|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
<a name="xamlAttributeUsage_DisplayDateStart"></a>   
## XAML 属性の使用方法  
  
```  
<Calendar DisplayDateStart="dateTimeString"/>  
```  
  
<a name="xamlValues_DisplayDateStart"></a>   
## XAML 値  
 *dateTimeString*  
 記載されているいずれかの形式では、日付、 [DateTime XAML 構文](http://msdn.microsoft.com/ja-jp/5901710a-609b-40c8-9d65-f0016cd9090b) トピックです。  
  
   
  
## 例  
 次のコードをセットアップ、 <xref:System.Windows.Controls.Calendar> 表示可能な日付は、現在選択されていると表示されている日付を設定の特定の範囲とします。  
  
 [!code-csharp[CalendarSnippets\#2](~/samples/snippets/csharp/VS_Snippets_Wpf/calendarsnippets/csharp/window1.xaml.cs#2)]
 [!code-vb[CalendarSnippets\#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/calendarsnippets/visualbasic/window1.xaml.vb#2)]
 [!code-xml[CalendarSnippets\#2](~/samples/snippets/xaml/VS_Snippets_Wpf/calendarsnippets/xaml/window1.xaml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.DatePicker.DisplayDateStart" />
      </Docs>
    </Member>
    <Member MemberName="DisplayDateStartProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DisplayDateStartProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DisplayDateStartProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Calendar.DisplayDateStartProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayMode">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.CalendarMode DisplayMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.CalendarMode DisplayMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Calendar.DisplayMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.CalendarMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または月、年、または 10 年に予定表が表示されるかどうかを示す値を設定します。</summary>
        <value>どのような時間の長さを示す値、 <see cref="T:System.Windows.Controls.Calendar" /> が表示されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 予定表には、1 か月、年または 10 年を表示できます。 次の表では、モードごとにユーザーの移動方法を示します。  
  
|DisplayMode|アクション|  
|-----------------|-----------|  
|月|\[年\] モードに移動するには、月の見出しをクリックします。|  
|Year|10 年間のモードに移動するには、年の見出しをクリックします。 Month モードに移動するには、表示されている月の 1 つをクリックします。|  
|10 年間|\[年\] モードに移動するには、表示されている年の 1 つをクリックします。|  
  
<a name="dependencyPropertyInfo_DisplayMode"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Calendar.DisplayModeProperty>|  
|メタデータのプロパティを設定 **true**|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
   
  
## 例  
 次の例では、1 年間とハンドルで月を表示するカレンダー、 <xref:System.Windows.Controls.Calendar.DisplayModeChanged> イベント カレンダーが変わらないできるように、1 か月または年のユーザーがクリックした場合、その <xref:System.Windows.Controls.Calendar.DisplayMode%2A>します。  
  
 [!code-csharp[CalendarSnippets\#4](~/samples/snippets/csharp/VS_Snippets_Wpf/calendarsnippets/csharp/window1.xaml.cs#4)]
 [!code-vb[CalendarSnippets\#4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/calendarsnippets/visualbasic/window1.xaml.vb#4)]
 [!code-xml[CalendarSnippets\#4](~/samples/snippets/xaml/VS_Snippets_Wpf/calendarsnippets/xaml/window1.xaml#4)]  
  
 [!code-csharp[CalendarSnippets\#5](~/samples/snippets/csharp/VS_Snippets_Wpf/calendarsnippets/csharp/window1.xaml.cs#5)]
 [!code-vb[CalendarSnippets\#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/calendarsnippets/visualbasic/window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.CalendarModeChangedEventArgs&gt; DisplayModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.CalendarModeChangedEventArgs&gt; DisplayModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.Calendar.DisplayModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.CalendarModeChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="P:System.Windows.Controls.Calendar.DisplayMode" /> プロパティを変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlAttributeUsage_DisplayModeChanged"></a>   
## XAML 属性の使用方法  
  
```  
<Calendar DisplayModeChanged="eventhandler"/>  
```  
  
   
  
## 例  
 次の例では、1 年間とハンドルで月を表示するカレンダー、 <xref:System.Windows.Controls.Calendar.DisplayModeChanged> イベント カレンダーが変わらないできるように、1 か月または年のユーザーがクリックした場合、その <xref:System.Windows.Controls.Calendar.DisplayMode%2A>します。  
  
 [!code-csharp[CalendarSnippets\#4](~/samples/snippets/csharp/VS_Snippets_Wpf/calendarsnippets/csharp/window1.xaml.cs#4)]
 [!code-vb[CalendarSnippets\#4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/calendarsnippets/visualbasic/window1.xaml.vb#4)]
 [!code-xml[CalendarSnippets\#4](~/samples/snippets/xaml/VS_Snippets_Wpf/calendarsnippets/xaml/window1.xaml#4)]  
  
 [!code-csharp[CalendarSnippets\#5](~/samples/snippets/csharp/VS_Snippets_Wpf/calendarsnippets/csharp/window1.xaml.cs#5)]
 [!code-vb[CalendarSnippets\#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/calendarsnippets/visualbasic/window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DisplayModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DisplayModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Calendar.DisplayModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Calendar.DisplayMode" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstDayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek FirstDayOfWeek { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek FirstDayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Calendar.FirstDayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または週の始めと見なされる日を設定します。</summary>
        <value>A <see cref="T:System.DayOfWeek" /> 週の始めを表します。 既定値は、 <see cref="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" /> は、現在のカルチャによって決まります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="dependencyPropertyInfo_FirstDayOfWeek"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Calendar.FirstDayOfWeekProperty>|  
|メタデータのプロパティを設定 **true**|なし|  
  
<a name="xamlAttributeUsage_FirstDayOfWeek"></a>   
## XAML 属性の使用方法  
 \< カレンダー **FirstDayOfWeek**\="<xref:System.DayOfWeek>"\/\>  
  
   
  
## 例  
 次の例のセット、 <xref:System.Windows.Controls.Calendar.FirstDayOfWeek%2A> プロパティを <xref:System.DayOfWeek.Monday>します。  
  
 [!code-xml[CalendarSnippets\#8](~/samples/snippets/xaml/VS_Snippets_Wpf/calendarsnippets/xaml/window1.xaml#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstDayOfWeekProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FirstDayOfWeekProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FirstDayOfWeekProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Calendar.FirstDayOfWeekProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Calendar.FirstDayOfWeek" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTodayHighlighted">
      <MemberSignature Language="C#" Value="public bool IsTodayHighlighted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTodayHighlighted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Calendar.IsTodayHighlighted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または現在の日付が強調表示されているかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 場合は、現在の日付を強調表示されます。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="dependencyPropertyInfo_IsTodayHighlighted"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Calendar.IsTodayHighlightedProperty>|  
|メタデータのプロパティを設定 **true**|なし|  
  
<a name="xamlAttributeUsage_IsTodayHighlighted"></a>   
## XAML 属性の使用方法  
  
```  
<Calendar IsTodayHighlighted="bool"/>  
```  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Windows.Controls.Calendar> 、現在の日付が強調表示されません。  
  
 [!code-csharp[CalendarSnippets\#3](~/samples/snippets/csharp/VS_Snippets_Wpf/calendarsnippets/csharp/window1.xaml.cs#3)]
 [!code-vb[CalendarSnippets\#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/calendarsnippets/visualbasic/window1.xaml.vb#3)]
 [!code-xml[CalendarSnippets\#3](~/samples/snippets/xaml/VS_Snippets_Wpf/calendarsnippets/xaml/window1.xaml#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTodayHighlightedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsTodayHighlightedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsTodayHighlightedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Calendar.IsTodayHighlightedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Calendar.IsTodayHighlighted" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public override void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Calendar.OnApplyTemplate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ビジュアル ツリーを構築、 <see cref="T:System.Windows.Controls.Calendar" /> 新しいテンプレートが適用されたときを制御します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーション コードまたはレイアウト パスの再構築などの内部プロセスが呼び出すたびに、このメソッドが呼び出され、 <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Calendar.OnCreateAutomationPeer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" /> で使用するため、 Silverlight オートメーション インフラストラクチャです。</summary>
        <returns>A <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" /> の <see cref="T:System.Windows.Controls.Calendar" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが、新たに作成 <xref:System.Windows.Automation.Peers.CalendarAutomationPeer> コントロール インスタンスの場合は、1 つのインスタンスが作成されていません。 それ以外を返します、 <xref:System.Windows.Automation.Peers.CalendarAutomationPeer> 以前に作成します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayDateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDisplayDateChanged (System.Windows.Controls.CalendarDateChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDisplayDateChanged(class System.Windows.Controls.CalendarDateChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Calendar.OnDisplayDateChanged(System.Windows.Controls.CalendarDateChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.CalendarDateChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>
          <see cref="E:System.Windows.Controls.Calendar.DisplayDateChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Controls.Calendar.OnDisplayDateChanged(System.Windows.Controls.CalendarDateChangedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Controls.Calendar.OnDisplayDateChanged(System.Windows.Controls.CalendarDateChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDisplayModeChanged (System.Windows.Controls.CalendarModeChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDisplayModeChanged(class System.Windows.Controls.CalendarModeChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Calendar.OnDisplayModeChanged(System.Windows.Controls.CalendarModeChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.CalendarModeChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>
          <see cref="E:System.Windows.Controls.Calendar.DisplayModeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Controls.Calendar.OnDisplayModeChanged(System.Windows.Controls.CalendarModeChangedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Controls.Calendar.OnDisplayModeChanged(System.Windows.Controls.CalendarModeChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Calendar.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>クラスの処理を提供、 <see cref="E:System.Windows.UIElement.KeyDown" /> ルーティングされたイベント、ユーザーがこのコントロールにフォーカスがあるときに、キーを押したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Controls.Calendar> 上書き、 <xref:System.Windows.Controls.Calendar.OnKeyDown%2A> キーボード ナビゲーションをサポートするメソッドです。  詳細については、<xref:System.Windows.Controls.Calendar> クラスを参照してください。 この実装ではマーク、 <xref:System.Windows.UIElement.KeyDown> イベントを処理するには、 <xref:System.Windows.RoutedEventArgs.Handled%2A> するイベント データのプロパティ `true` 方向キーを押すなどのキー入力がナビゲーション操作を実行する場合。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>If you override <see cref="M:System.Windows.Controls.Calendar.OnKeyDown(System.Windows.Input.KeyEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Calendar.OnKeyDown(System.Windows.Input.KeyEventArgs)" /> implementation. Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class. You can call the base implementation either before or after your special handling, depending on your requirements.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Calendar.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>クラスの処理を提供、 <see cref="E:System.Windows.UIElement.KeyUp" /> このコントロールにフォーカスがあるときにキーを離したときに発生するイベントをルーティングします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Controls.Calendar> 上書き、 <xref:System.Windows.Controls.Calendar.OnKeyDown%2A> キーボード ナビゲーションをサポートするメソッドです。  詳細については、<xref:System.Windows.Controls.Calendar> クラスを参照してください。 この実装では、処理済みの状態は変更されません \(、 <xref:System.Windows.RoutedEventArgs.Handled%2A> プロパティ\) の <xref:System.Windows.UIElement.KeyUp> イベント データ。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>If you override <see cref="M:System.Windows.Controls.Calendar.OnKeyUp(System.Windows.Input.KeyEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Controls.Calendar.OnKeyUp(System.Windows.Input.KeyEventArgs)" /> implementation. Failure to call the base implementation prevents base classes from handling the event with a class handler, which might change the run-time behavior of the final class. You can call the base implementation either before or after your special handling, depending on your requirements.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedDatesChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedDatesChanged (System.Windows.Controls.SelectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedDatesChanged(class System.Windows.Controls.SelectionChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Calendar.OnSelectedDatesChanged(System.Windows.Controls.SelectionChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.SelectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>発生させる、 <see cref="E:System.Windows.Controls.Calendar.SelectedDatesChanged" /> ルーティングされたイベント。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールで発生し、 <xref:System.Windows.Controls.Calendar.SelectedDatesChanged> を呼び出してイベント <xref:System.Windows.UIElement.RaiseEvent%2A>です。 詳細については、次を参照してください。 [ルーティング イベントの概要](http://msdn.microsoft.com/ja-jp/1a2189ae-13b4-45b0-b12c-8de2e49c29d2)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Controls.Calendar.OnSelectedDatesChanged(System.Windows.Controls.SelectionChangedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Controls.Calendar.OnSelectedDatesChanged(System.Windows.Controls.SelectionChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelectionModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectionModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectionModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Calendar.OnSelectionModeChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>
          <see cref="E:System.Windows.Controls.Calendar.SelectionModeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Windows.Controls.Calendar.OnSelectionModeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Windows.Controls.Calendar.OnSelectionModeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SelectedDate">
      <MemberSignature Language="C#" Value="public Nullable&lt;DateTime&gt; SelectedDate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; SelectedDate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Calendar.SelectedDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または現在選択されている日付を設定します。</summary>
        <value>現在選択されている日付。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="dependencyPropertyInfo_SelectedDate"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Calendar.SelectedDateProperty>|  
|メタデータのプロパティを設定 **true**|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
 このプロパティを使用するときに <xref:System.Windows.Controls.Calendar.SelectionMode%2A> に設定されている <xref:System.Windows.Controls.CalendarSelectionMode.SingleDate>します。 他のモードでこのプロパティは常に最初の日付に <xref:System.Windows.Controls.Calendar.SelectedDates%2A>します。  
  
<a name="xamlAttributeUsage_SelectedDate"></a>   
## XAML 属性の使用方法  
  
```  
<Calendar SelectedDate="dateTimeString"/>  
```  
  
<a name="xamlValues_SelectedDate"></a>   
## XAML 値  
 *dateTimeString*  
 記載されているいずれかの形式では、日付、 [DateTime XAML 構文](http://msdn.microsoft.com/ja-jp/5901710a-609b-40c8-9d65-f0016cd9090b) トピックです。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Windows.Controls.Calendar> 表示可能な日付は、現在選択されていると表示されている日付を設定の特定の範囲とします。  
  
 [!code-csharp[CalendarSnippets\#2](~/samples/snippets/csharp/VS_Snippets_Wpf/calendarsnippets/csharp/window1.xaml.cs#2)]
 [!code-vb[CalendarSnippets\#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/calendarsnippets/visualbasic/window1.xaml.vb#2)]
 [!code-xml[CalendarSnippets\#2](~/samples/snippets/xaml/VS_Snippets_Wpf/calendarsnippets/xaml/window1.xaml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定した日付がで指定された範囲から外れて <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" /> と <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" />  
  
 または  
  
 指定した日付が、 <see cref="P:System.Windows.Controls.Calendar.BlackoutDates" /> コレクションです。</exception>
        <exception cref="T:System.InvalidOperationException">場合以外に何も設定 <see langword="null" /> と <see cref="P:System.Windows.Controls.Calendar.SelectionMode" /> に設定されている <see cref="F:System.Windows.Controls.CalendarSelectionMode.None" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectedDateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SelectedDateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SelectedDateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Calendar.SelectedDateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Calendar.SelectedDate" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedDates">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SelectedDatesCollection SelectedDates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.SelectedDatesCollection SelectedDates" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Calendar.SelectedDates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SelectedDatesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>選択した日付のコレクションを取得します。</summary>
        <value>A <see cref="T:System.Windows.Controls.SelectedDatesCollection" /> 現在選択されている日付を含むオブジェクト。 既定値は空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 日付は、個別にまたはを使用して範囲でコレクションに追加できる、 <xref:System.Windows.Controls.SelectedDatesCollection.AddRange%2A> メソッドです。 値に応じて、 <xref:System.Windows.Controls.Calendar.SelectionMode%2A> プロパティには、日付または範囲をコレクションに追加する可能性がありますをクリアします。 次の表にどのように <xref:System.Windows.Controls.CalendarSelectionMode> 影響を与える、 <xref:System.Windows.Controls.Calendar.SelectedDates%2A> プロパティです。  
  
|CalendarSelectionMode|説明|  
|---------------------------|--------|  
|<xref:System.Windows.Controls.CalendarSelectionMode.None>|選択内容は使用できません。<xref:System.Windows.Controls.Calendar.SelectedDate%2A> 設定することはできませんに値が追加されないと <xref:System.Windows.Controls.Calendar.SelectedDates%2A>です。|  
|<xref:System.Windows.Controls.CalendarSelectionMode.SingleDate>|設定するか、1 つの日付のみを選択することができます <xref:System.Windows.Controls.Calendar.SelectedDate%2A> の最初の値または <xref:System.Windows.Controls.Calendar.SelectedDates%2A>です。<xref:System.Windows.Controls.SelectedDatesCollection.AddRange%2A> 使用できません。|  
|<xref:System.Windows.Controls.CalendarSelectionMode.SingleRange>|単一の日付の範囲を選択することができます。 設定 <xref:System.Windows.Controls.Calendar.SelectedDate%2A>, 、日付を個別に追加する <xref:System.Windows.Controls.Calendar.SelectedDates%2A>, 、またはを使用して <xref:System.Windows.Controls.SelectedDatesCollection.AddRange%2A> から以前のすべての値がクリアされます <xref:System.Windows.Controls.Calendar.SelectedDates%2A>します。|  
|<xref:System.Windows.Controls.CalendarSelectionMode.MultipleRange>|複数の連続していない日付範囲を選択することができます。 日付を個別に追加する <xref:System.Windows.Controls.Calendar.SelectedDates%2A> またはを使用して <xref:System.Windows.Controls.SelectedDatesCollection.AddRange%2A> はクリアしません <xref:System.Windows.Controls.Calendar.SelectedDates%2A>します。 設定 <xref:System.Windows.Controls.Calendar.SelectedDate%2A> もクリアされます <xref:System.Windows.Controls.Calendar.SelectedDates%2A>, が、その他の日付または範囲を追加し、ことができます。 選択されてまたは範囲の和集合内の別の範囲結果と重複していますし、例外は発生しません日付を含む範囲を追加します。|  
  
<a name="xamlPropertyElementUsage_SelectedDates"></a>   
## XAML プロパティ要素の使用  
  
```  
<object>  
  <object.SelectedDates>  
    oneOrMoreDateTimeObjects  
  </object.SelectedDates>  
</object>  
  
```  
  
<a name="xamlValues_SelectedDates"></a>   
## XAML 値  
 *oneOrMoreDateTimeObjects*  
 1 つまたは複数 <xref:System.DateTime> オブジェクトの要素。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Windows.Controls.Calendar> を持つ複数の範囲の日付を選択します。  
  
 [!code-csharp[CalendarSnippets\#3](~/samples/snippets/csharp/VS_Snippets_Wpf/calendarsnippets/csharp/window1.xaml.cs#3)]
 [!code-vb[CalendarSnippets\#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/calendarsnippets/visualbasic/window1.xaml.vb#3)]
 [!code-xml[CalendarSnippets\#3](~/samples/snippets/xaml/VS_Snippets_Wpf/calendarsnippets/xaml/window1.xaml#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedDatesChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Controls.SelectionChangedEventArgs&gt; SelectedDatesChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Controls.SelectionChangedEventArgs&gt; SelectedDatesChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.Calendar.SelectedDatesChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Controls.SelectionChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>によって、コレクションが返されるときに発生、 <see cref="P:System.Windows.Controls.Calendar.SelectedDates" /> プロパティを変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlAttributeUsage_SelectedDatesChanged"></a>   
## XAML 属性の使用方法  
  
```  
<Calendar SelectedDatesChanged="eventhandler"/>  
```  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedDatesChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SelectedDatesChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SelectedDatesChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Calendar.SelectedDatesChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.Controls.Calendar.SelectedDatesChanged" /> ルーティング イベントを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.CalendarSelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.CalendarSelectionMode SelectionMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Calendar.SelectionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.CalendarSelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または許可されている設定内容にどのような種類を示す値を設定します。</summary>
        <value>現在の選択モードを示す値です。 既定値は、<see cref="F:System.Windows.Controls.CalendarSelectionMode.SingleDate" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="dependencyPropertyInfo_SelectionMode"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Calendar.SelectionModeProperty>|  
|メタデータのプロパティを設定 **true**|なし|  
  
 このプロパティを決定するかどうか、 <xref:System.Windows.Controls.Calendar> 選択、1 つの日付の選択または選択の複数の日にちは許可されません。 選択モードが指定された、 <xref:System.Windows.Controls.CalendarSelectionMode> 列挙します。  
  
 このプロパティが変更されると、選択したすべての日付はクリアされます。  
  
<a name="xamlAttributeUsage_SelectionMode"></a>   
## XAML 属性の使用方法  
 \< カレンダー **SelectionMode**\="<xref:System.Windows.Controls.CalendarSelectionMode>"\/\>  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Windows.Controls.Calendar> を持つ複数の範囲の日付を選択します。  
  
 [!code-csharp[CalendarSnippets\#3](~/samples/snippets/csharp/VS_Snippets_Wpf/calendarsnippets/csharp/window1.xaml.cs#3)]
 [!code-vb[CalendarSnippets\#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/calendarsnippets/visualbasic/window1.xaml.vb#3)]
 [!code-xml[CalendarSnippets\#3](~/samples/snippets/xaml/VS_Snippets_Wpf/calendarsnippets/xaml/window1.xaml#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;EventArgs&gt; SelectionModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.EventArgs&gt; SelectionModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.Calendar.SelectionModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.EventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="P:System.Windows.Controls.Calendar.SelectionMode" /> 変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SelectionModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SelectionModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Calendar.SelectionModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Calendar.SelectionMode" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Calendar.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>選択した日付のテキスト表現を提供します。</summary>
        <returns>選択した日付または空の文字列のテキスト表現場合 <see cref="P:System.Windows.Controls.Calendar.SelectedDate" /> は <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>