<Type Name="Label" FullName="System.Windows.Controls.Label">
  <TypeSignature Language="C#" Value="public class Label : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Label extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Label" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Label)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>コントロールのテキスト ラベルを表し、アクセス キーのサポートを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスは、アクセス キー \(ニーモニックとも呼ばれます\) の機能と visual の両方のサポートを提供します。 などのコントロールへのすばやいキーボード アクセスを有効にするでよく使用される、 <xref:System.Windows.Controls.TextBox>です。 割り当てるには、 <xref:System.Windows.Controls.Label> に、 <xref:System.Windows.Controls.Control>, 、設定、 <xref:System.Windows.Controls.Label.Target%2A> プロパティ コントロールに対しては、ユーザーがアクセス キーを押すと、フォーカスを取得する必要があります。 ターゲット設定が原因も [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] ラベルのテキストを対象となるコントロールの名前として使用します。 詳細については、「[Accessibility](http://msdn.microsoft.com/ja-jp/e7ec856e-41ee-47b1-9d57-b75a3dad088c)」を参照してください。  
  
 アクセス キーを設定するには、アクセス キーのある文字の前にアンダー スコアを追加します。 最初の 1 つだけをアクセス キーに変換して、コンテンツに複数のアンダー スコア文字がある場合は、その他のアンダー スコアは、通常のテキストとして表示されます。 アクセス キーに変換する、アンダー スコアが最初のアンダー スコアでない場合は、変換する前にあるすべてのアンダー スコアの 2 つの連続するアンダー スコアを使用します。 たとえば、次のコードはアクセス キーが含まれていて、\_hello**W**指定します。  
  
```  
<Label>__Hello_World</Label>   
```  
  
 H の前にアンダー スコアが double 型の値であるために、W キーは、アクセス キーとして登録します。  
  
 ラベルがフォーカスを設定して、タブの停止になっていません。 詳細については、「 [フォーカス概要](http://msdn.microsoft.com/ja-jp/0230c4eb-0c8a-462b-ac4b-ae3e511659f4)します。  
  
 A <xref:System.Windows.Controls.Label> は、 <xref:System.Windows.Controls.ContentControl>, 、つまり、任意の型 \(文字列、イメージ、パネルなど\) の 1 つのオブジェクトを含めることができます。 詳細については、<xref:System.Windows.Controls.ContentControl> クラスを参照してください。  
  
## ラベル コントロールをカスタマイズします。  
 複数に同じプロパティ設定を適用する <xref:System.Windows.Controls.Label> コントロールを使用して、 <xref:System.Windows.FrameworkElement.Style%2A> プロパティです。 既定値を変更する <xref:System.Windows.Controls.ControlTemplate> コントロール固有の外観を与えるためです。 作成の詳細については、 <xref:System.Windows.Controls.ControlTemplate>, を参照してください [ControlTemplate を作成することで、既存のコントロールの外観のカスタマイズ](http://msdn.microsoft.com/ja-jp/678dd116-43a2-4b8c-82b5-6b826f126e31)します。  パーツおよびに固有の状態を確認する、 <xref:System.Windows.Controls.Label>, を参照してください [ラベルのスタイルとテンプレート](http://msdn.microsoft.com/ja-jp/c1d5359a-8e4a-4925-ab3e-e92bf6694859)します。  
  
 コントロールの既定のスタイルでは、このコントロールの依存関係プロパティを設定する場合があります。  プロパティが既定のスタイルが設定されている場合、アプリケーションでコントロールが表示されたときに、プロパティが既定値から変更可能性があります。 既定のスタイルは、デスクトップ テーマでは、アプリケーションが実行されているときに使用が決定されます。  詳細については、次を参照してください。 [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252)します。  
  
> [!NOTE]
>  Visual プロパティの設定は効果プロパティは、両方に存在する場合 <xref:System.Windows.Controls.Label> コントロールの既定のテンプレートとを使用して設定します。 「を変更する視覚的構造の、」の「コントロール」セクションで visual プロパティの一覧が見つかります [ControlTemplate 作成することで、既存のコントロールの外観のカスタマイズ](http://msdn.microsoft.com/ja-jp/678dd116-43a2-4b8c-82b5-6b826f126e31)します。  
  
   
  
## 例  
 次の例では、作成する方法、 <xref:System.Windows.Controls.Label> バインディングを使用してターゲットを設定します。  
  
 [!code-xml[Label\#1](~/samples/snippets/xaml/VS_Snippets_Wpf/Label/XAML/Pane1.xaml#1)]
 [!code-xml[Label\#1](~/samples/snippets/csharp/VS_Snippets_Wpf/Label/CS/Pane1.xaml#1)]  
  
 次の例では、作成する方法、 <xref:System.Windows.Controls.Label> アクセス キーがあり、テキストの折り返しをサポートします。  
  
 [!code-xml[Label\#4](~/samples/snippets/xaml/VS_Snippets_Wpf/Label/XAML/Pane1.xaml#4)]
 [!code-xml[Label\#4](~/samples/snippets/csharp/VS_Snippets_Wpf/Label/CS/Pane1.xaml#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.Label" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.OnCreateAutomationPeer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>適切な提供 <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> の一部としてこのコントロールの実装、 WPF インフラストラクチャです。</summary>
        <returns>型固有の <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 実装。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public System.Windows.UIElement Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Target" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Label.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.NameReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがラベルのアクセス キーを押すと、フォーカスを受け取る要素を取得または設定します。</summary>
        <value>ユーザーがアクセス キーを押すとフォーカスを受け取る <see cref="T:System.Windows.UIElement" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 キーボード ショートカットを提供することにより、アクセス キーをサポートしない要素を指定する、 <xref:System.Windows.Controls.Label> アクセス キーと、このプロパティを設定します。 アクセス キーとして機能する文字の直前にアンダー スコアを配置することでラベルにアクセス キーを指定します。 アクセス キーを指定することができます、 <xref:System.Windows.Controls.ContentControl.Content%2A> プロパティを設定したり <xref:System.Windows.Controls.ContentControl.Content%2A> に、 <xref:System.Windows.Controls.AccessText> オブジェクトです。  
  
 このプロパティを使用して定義することはできません、 <xref:System.Windows.UIElement>です。 たとえば、次のコードはコンパイルしても機能しません。 `<object.Target><UIElement../></object.Target>`します。 このプロパティは、アプリケーションで既に定義されている要素への参照を提供します。  
  
<a name="dependencyPropertyInfo_Target"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Label.TargetProperty>|  
|メタデータのプロパティを設定するには `true`|なし|  
  
<a name="xamlAttributeUsage_Target"></a>   
## XAML 属性の使用方法  
  
```  
<Label Target="nameOfExistingElement"/>  
  
```  
  
<a name="xamlPropertyElementUsage_Target"></a>   
## XAML プロパティ要素の使用  
  
<a name="xamlValues_Target"></a>   
## XAML 値  
 `nameOfExistingElement`  
 名前 <xref:System.Windows.UIElement> アクセス キーが押されたときに、フォーカスを受け取る。  
  
   
  
## 例  
 <xref:System.Windows.Controls.Label.Target%2A> の <xref:System.Windows.Controls.Label> プロパティを設定する方法を次の例に示します。  
  
 [!code-xml[Label\#1](~/samples/snippets/xaml/VS_Snippets_Wpf/Label/XAML/Pane1.xaml#1)]
 [!code-xml[Label\#1](~/samples/snippets/csharp/VS_Snippets_Wpf/Label/CS/Pane1.xaml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Label.TargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Label.Target" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>