<Type Name="Page" FullName="System.Windows.Controls.Page">
  <TypeSignature Language="C#" Value="public class Page : System.Windows.FrameworkElement, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Page extends System.Windows.FrameworkElement implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Page" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Content")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>移動先でホストするコンテンツのページをカプセル化 Windows Internet Explorer, 、<see cref="T:System.Windows.Navigation.NavigationWindow" />, 、および <see cref="T:System.Windows.Controls.Frame" />です。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Controls.Page> コンテンツを移動でき、キーのメンバーは次のページをカプセル化します。  
  
-   **有効期間管理**: <xref:System.Windows.Controls.Page.KeepAlive%2A>です。  
  
-   **ナビゲーション**: <xref:System.Windows.Controls.Page.NavigationService%2A>です。  
  
-   **Appearance**: <xref:System.Windows.Controls.Page.Background%2A>, <xref:System.Windows.Controls.Page.Content%2A>, <xref:System.Windows.Controls.Page.FontFamily%2A>, <xref:System.Windows.Controls.Page.FontSize%2A>, <xref:System.Windows.Controls.Page.Foreground%2A>, <xref:System.Windows.Controls.Page.ShowsNavigationUI%2A>, <xref:System.Windows.Controls.Page.Template%2A>, <xref:System.Windows.Controls.Page.Title%2A>.  
  
-   **ウィンドウの外観をホスト**: <xref:System.Windows.Controls.Page.WindowHeight%2A>, 、<xref:System.Windows.Controls.Page.WindowWidth%2A>, 、<xref:System.Windows.Controls.Page.WindowTitle%2A>です。  
  
 ページは、マークアップ、マークアップおよび分離コード、またはコードを使用して定義できます。 ページは、次の理由をパッケージ コンテンツを移動するための推奨される方法を示します。  
  
-   これは、定義、再利用、および管理する簡単です。  
  
-   アクセスしたり使用したり、 <xref:System.Windows.Navigation.NavigationService> に移動します。  
  
-   タイトル、幅、高さ、およびナビゲーションを変更することができます [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] そのホスト ウィンドウの \(<xref:System.Windows.Controls.Page.WindowTitle%2A>, 、<xref:System.Windows.Controls.Page.WindowWidth%2A>, 、<xref:System.Windows.Controls.Page.WindowHeight%2A>, 、<xref:System.Windows.Controls.Page.ShowsNavigationUI%2A>\)。  
  
-   デザイナー サポートがある [!INCLUDE[TLA#tla_visualstu](~/includes/tlasharptla-visualstu-md.md)]です。  
  
 ページをホストできる <xref:System.Windows.Window>, 、<xref:System.Windows.Navigation.NavigationWindow>, 、<xref:System.Windows.Controls.Frame>, 、またはブラウザーからです。 ホストされるように、ページが表示できます。  
  
-   直接の子、 <xref:System.Windows.Window>, 、<xref:System.Windows.Navigation.NavigationWindow>, 、または <xref:System.Windows.Controls.Frame> 内の要素 [!INCLUDE[TLA2#tla_titlexaml](~/includes/tla2sharptla-titlexaml-md.md)]します。  
  
-   インスタンス化され、設定の値として、 `Content` プロパティの <xref:System.Windows.Window>, 、<xref:System.Windows.Navigation.NavigationWindow>, 、および <xref:System.Windows.Controls.Frame>です。  
  
-   として設定、 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] のソース、 `Source` プロパティのいずれかの <xref:System.Windows.Navigation.NavigationWindow> または <xref:System.Windows.Controls.Frame>です。  
  
-   として設定、 <xref:System.Windows.Application.StartupUri%2A> スタンドアロン アプリケーションです。  
  
-   として設定、 <xref:System.Windows.Application.StartupUri%2A> で、 [!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]です。  
  
 アプリケーションには、次の機構を使用すると移動 2 つまたは複数のページ通常があります。  
  
-   使用して宣言によって <xref:System.Windows.Documents.Hyperlink>します。  
  
-   使用してプログラムを使用して <xref:System.Windows.Navigation.NavigationService>します。  
  
-   ナビゲーションを使用して、視覚的に [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] も含め、ホストの [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], 、<xref:System.Windows.Navigation.NavigationWindow>, 、および <xref:System.Windows.Controls.Frame>です。  
  
 ページ関数を使用して構造化ナビゲーションの \(<xref:System.Windows.Navigation.PageFunction%601>\) を参照してください [構造化ナビゲーションの概要](http://msdn.microsoft.com/ja-jp/025d30ef-fec5-436d-ad7a-5d5483331c26) と [ナビゲーション トポロジの概要](http://msdn.microsoft.com/ja-jp/5d5ee837-629a-4933-869a-186dc22ac43d)します。  
  
 コントロールの既定のスタイルでは、このコントロールの依存関係プロパティを設定する場合があります。  プロパティが既定のスタイルが設定されている場合、アプリケーションでコントロールが表示されたときに、プロパティが既定値から変更可能性があります。 既定のスタイルは、デスクトップ テーマでは、アプリケーションが実行されているときに使用が決定されます。  詳細については、次を参照してください。 [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252)します。  
  
   
  
## 例  
 次の例は、標準的なページのマークアップのみを使用して定義します。  
  
 [!code-xml[PageSnippets\#MarkupPageMARKUP](~/samples/snippets/csharp/VS_Snippets_Wpf/PageSnippets/CSharp/MarkupPage.xaml#markuppagemarkup)]  
  
 コードのみを使用して標準的なページを定義する方法を例を示します。  
  
 [!code-csharp[PageSnippets\#CodePageCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/PageSnippets/CSharp/CodePage.cs#codepagecodebehind)]
 [!code-vb[PageSnippets\#CodePageCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PageSnippets/visualbasic/codepage.vb#codepagecodebehind)]  
  
 次の例は、標準的なページのマークアップおよび分離コードの組み合わせを使用して定義します。  
  
 [!code-xml[PageSnippets\#MarkupAndCodeBehindPageMARKUP](~/samples/snippets/csharp/VS_Snippets_Wpf/PageSnippets/CSharp/MarkupAndCodeBehindPage.xaml#markupandcodebehindpagemarkup)]  
  
 [!code-csharp[PageSnippets\#MarkupAndCodeBehindPageCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/PageSnippets/CSharp/MarkupAndCodeBehindPage.xaml.cs#markupandcodebehindpagecodebehind)]
 [!code-vb[PageSnippets\#MarkupAndCodeBehindPageCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PageSnippets/visualbasic/markupandcodebehindpage.xaml.vb#markupandcodebehindpagecodebehind)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Navigation.PageFunction`1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Page ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Page.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Controls.Page" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.Controls.Page> 中保持しない \(を参照してください <xref:System.Windows.Controls.Page.KeepAlive%2A>\)、許可するように既定のコンス トラクターを実装する必要がある [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] ナビゲーション履歴を前後に背面に移動したときの新しいインスタンスを作成します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size arrangeBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrangeBounds" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="arrangeBounds">子要素の配置に使用するサイズ。</param>
        <summary>コンテンツ \(子要素\) を配置、 <see cref="T:System.Windows.Controls.Page" />です。</summary>
        <returns>A <see cref="T:System.Windows.Size" /> ページの配置のサイズを表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Background">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush Background { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush Background" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.Background" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の背景、 <see cref="T:System.Windows.Controls.Page" />です。</summary>
        <value>
          <see cref="T:System.Windows.Media.Brush" /> を <see cref="T:System.Windows.Controls.Page" /> の背景を塗りつぶすために使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="dependencyPropertyInfo_PageBackground"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Page.BackgroundProperty>|  
|メタデータのプロパティを設定するには `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender%2A>|  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BackgroundProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BackgroundProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Page.BackgroundProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Page.Background" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Content">
      <MemberSignature Language="C#" Value="public object Content { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Content" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.Content" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の内容、 <see cref="T:System.Windows.Controls.Page" />です。</summary>
        <value>コンテンツを格納しているオブジェクト、 <see cref="T:System.Windows.Controls.Page" />です。 既定値は、<see cref="P:System.Windows.SystemFonts.MessageFontFamily" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Controls.Page> 単一の子要素のみを持つことができます。 他のすべての要素、 <xref:System.Windows.Controls.Page> その要素の子孫である必要があります。 コンテンツでは通常、 <xref:System.Windows.Controls.Page> レイアウト要素をホスト\-など <xref:System.Windows.Controls.Grid>, 、<xref:System.Windows.Controls.StackPanel>, と <xref:System.Windows.Controls.DockPanel>などのコンテンツをホストする、 <xref:System.Windows.Controls.Page>です。  
  
<a name="dependencyPropertyInfo_PageContent"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Page.ContentProperty>|  
|メタデータのプロパティを設定するには `true`|なし|  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Page.ContentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Page.Content" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontFamily">
      <MemberSignature Language="C#" Value="public System.Windows.Media.FontFamily FontFamily { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.FontFamily FontFamily" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.FontFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Font, Modifiability=System.Windows.Modifiability.Unmodifiable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.FontFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または指定されたフォント ファミリの名前を設定します。</summary>
        <value>A <see cref="T:System.Windows.Media.FontFamily" /> のコンテンツのフォント ファミリは、 <see cref="T:System.Windows.Controls.Page" />です。 既定値は、<see cref="P:System.Windows.SystemFonts.MessageFontFamily" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="dependencyPropertyInfo_PageFontFamily"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Page.FontFamilyProperty>|  
|メタデータのプロパティを設定するには `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>、<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontFamilyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontFamilyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontFamilyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Page.FontFamilyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Page.FontFamily" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Controls.Page.FontFamily%2A> 依存関係プロパティの識別子。  
  
   
  
## 例  
 [依存関係プロパティの概要](http://msdn.microsoft.com/ja-jp/d119d00c-3afb-48d6-87a0-c4da4f83dee5)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontSize">
      <MemberSignature Language="C#" Value="public double FontSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 FontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.FontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.FontSizeConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはフォント サイズを設定します。</summary>
        <value>コンテンツのフォント サイズ、 <see cref="T:System.Windows.Controls.Page" />です。 既定値は、<see cref="P:System.Windows.SystemFonts.MessageFontSize" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 フォント サイズは正の数値との範囲内である必要があります、 <xref:System.Windows.SystemFonts.MessageFontSize%2A>です。  
  
<a name="dependencyPropertyInfo_PageFontSize"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Page.FontSizeProperty>|  
|メタデータのプロパティを設定するには `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>、<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontSizeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontSizeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontSizeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Page.FontSizeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Page.FontSize" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Controls.Page.FontSize%2A> 依存関係プロパティの識別子。  
  
   
  
## 例  
 [依存関係プロパティの概要](http://msdn.microsoft.com/ja-jp/d119d00c-3afb-48d6-87a0-c4da4f83dee5)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Foreground">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush Foreground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush Foreground" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.Foreground" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の前景色、 <see cref="T:System.Windows.Controls.Page" />です。</summary>
        <value>
          <see cref="T:System.Windows.Media.Brush" /> を <see cref="T:System.Windows.Controls.Page" /> の前景の描画に使用します。 既定値は、<see cref="P:System.Windows.Media.Brushes.Black" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="dependencyPropertyInfo_PageForeground"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Page.ForegroundProperty>|  
|メタデータのプロパティを設定するには `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>、<xref:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender%2A>、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForegroundProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForegroundProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForegroundProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Page.ForegroundProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Page.Foreground" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Controls.Page.Foreground%2A> 依存関係プロパティの識別子。  
  
   
  
## 例  
 [依存関係プロパティの概要](http://msdn.microsoft.com/ja-jp/d119d00c-3afb-48d6-87a0-c4da4f83dee5)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public bool KeepAlive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepAlive" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.KeepAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、 <see cref="T:System.Windows.Controls.Page" /> インスタンスがナビゲーション履歴に保持されます。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Windows.Controls.Page" /> インスタンスがナビゲーション履歴に保持されている以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ページをナビゲートの新しいインスタンスを最初にした、 <xref:System.Windows.Controls.Page> クラスを作成します。 \(バックアップまたは転送\) から、ページの移動が、ページのエントリがナビゲーション履歴に追加されます。 既定では、エントリはページ オブジェクトを参照していません。 代わりに、項目には、パッケージが含まれて [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] ページです。 ページのエントリがナビゲーション履歴に、パックを使用して移動 [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] ページの新しいインスタンスを作成するために使用します。 この動作は、過剰なメモリの使用を避けるために、既定値: コンテンツの重要な量のメモリを簡単に利用できるページ インスタンスを保持します。 背面に格納できるエントリの数と前方のスタックのナビゲーション履歴には制限がないという事実によって、この問題を強化します。 これに対し、パックを格納する [!INCLUDE[TLA#tla_uri#plural](~/includes/tlasharptla-urisharpplural-md.md)] ページは実質的に影響しないメモリの消費します。  
  
 ページの新しいインスタンスを作成する主な欠点は、ページの状態が別に記憶ページの 1 つのインスタンスからされません。 このような場合は、 [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] 状態を記憶するためのいくつかの手法を提供しています。  
  
 設定するページを維持する、 <xref:System.Windows.Controls.Page.KeepAlive%2A> プロパティを `true` \(既定値は `false`\)。  
  
> [!NOTE]
>  インスタンス化をコードのみを使用して参照するページ \(たとえばを呼び出す <xref:System.Windows.Navigation.NavigationService.Navigate%2A>\) が自動的に維持します。  
  
 設定を避ける必要があります <xref:System.Windows.Controls.Page.KeepAlive%2A> に `true` する必要がない場合。  
  
-   ページに大量のコンテンツがある場合は、インスタンス化に時間がかかる場合があります。 ページは保持しないと、ページへの移動が頻繁に、ページを常にインスタンス化したコストは、ユーザー エクスペリエンスに悪影響を及ぼすがあります。 ただし、パフォーマンスの観点からする必要があります、既定の設定に依存し、アプリケーションのパフォーマンスのプロファイリングテストすると、ページを下回る場合、アプリケーションに必要な範囲の読み込み時間に見つかる、維持されるように設定する、問題を解決する方法の 1 つことがあります。  
  
> [!NOTE]
>  ナビゲーション履歴に保持されませんが維持されるページのエントリ、 [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] に戻す場合は、ユーザーからの切り替えが移動して、 [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]です。 ナビゲーション履歴には、維持しないページの履歴項目のみが保持されます。  
  
<a name="dependencyPropertyInfo_PageKeepAlive"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Page.KeepAliveProperty>|  
|メタデータのプロパティを設定するには `true`|なし|  
  
> [!NOTE]
>  この依存関係プロパティのメタデータ型が <xref:System.Windows.PropertyMetadata>, ではなく、 <xref:System.Windows.FrameworkPropertyMetadata>です。  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] のインスタンスを保持する、 <xref:System.Windows.Controls.Page> 複数ナビゲーション間クラスです。  
  
 [!code-xml[PageKeepAliveSnippets#SetPageKeepAliveXAML1](~/samples/snippets/xaml/VS_Snippets_Wpf/PageKeepAliveSnippets/XAML/HomePage.xaml#setpagekeepalivexaml1)]  
[!code-xml[PageKeepAliveSnippets#SetPageKeepAliveXAML2](~/samples/snippets/xaml/VS_Snippets_Wpf/PageKeepAliveSnippets/XAML/HomePage.xaml#setpagekeepalivexaml2)]  
  
 [!code-xml[PageKeepAliveSnippets#SetPageKeepAliveXAMLForLang1](~/samples/snippets/csharp/VS_Snippets_Wpf/PageKeepAliveSnippets/CSharp/HomePage.xaml#setpagekeepalivexamlforlang1)]  
[!code-xml[PageKeepAliveSnippets#SetPageKeepAliveXAMLForLang2](~/samples/snippets/csharp/VS_Snippets_Wpf/PageKeepAliveSnippets/CSharp/HomePage.xaml#setpagekeepalivexamlforlang2)]  
  
 [!code-csharp[PageKeepAliveSnippets\#SetPageKeepAliveCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/PageKeepAliveSnippets/CSharp/HomePage.xaml.cs#setpagekeepalivecodebehind)]
 [!code-vb[PageKeepAliveSnippets\#SetPageKeepAliveCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PageKeepAliveSnippets/visualbasic/homepage.xaml.vb#setpagekeepalivecodebehind)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Navigation.JournalEntry.KeepAlive" />
      </Docs>
    </Member>
    <Member MemberName="KeepAliveProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty KeepAliveProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty KeepAliveProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Page.KeepAliveProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Page.KeepAlive" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Controls.Page.KeepAlive%2A> 依存関係プロパティの識別子。  
  
   
  
## 例  
 [依存関係プロパティの概要](http://msdn.microsoft.com/ja-jp/d119d00c-3afb-48d6-87a0-c4da4f83dee5)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>論理上の子の列挙子の要素を返す、 <see cref="T:System.Windows.Controls.Page" />です。</summary>
        <value>
          <see cref="T:System.Collections.IEnumerator" /> の論理上の子要素では、 <see cref="T:System.Windows.Controls.Page" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size constraint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size constraint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Page.MeasureOverride(System.Windows.Size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraint" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="constraint">ウィンドウは、その子に与えることが可能な領域です。</param>
        <summary>子要素の測定、 <see cref="T:System.Windows.Controls.Page" />です。</summary>
        <returns>A <see cref="T:System.Windows.Size" /> ウィンドウの実際のサイズです。 メソッドは、親がスクロール バーを追加する必要があります、大きい方の値を返す可能性があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NavigationService">
      <MemberSignature Language="C#" Value="public System.Windows.Navigation.NavigationService NavigationService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Navigation.NavigationService NavigationService" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.NavigationService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Navigation.NavigationService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ページのホストを使用してナビゲーションを管理するナビゲーション サービスを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Navigation.NavigationService" /> オブジェクト、ページのホストを使用して、ナビゲーションを管理または <see langword="null" /> ホストがナビゲーションをサポートしていない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ページは複数の種類のなど、ホストでホストされる <xref:System.Windows.Window>, 、<xref:System.Windows.Navigation.NavigationWindow>, 、<xref:System.Windows.Controls.Frame>, 、およびブラウザーです。  
  
 多くの場合、ページは、ページのナビゲーションのサポートを提供する、ホストのナビゲーションと統合する必要があります。 ただし、ページは、実行時に、ホストができるを把握していない可能性があります、ためにはそのためには、ホストのナビゲーションのメンバーと直接統合ことはできません。  
  
 代わりに、ブラウザー スタイルのナビゲーションをサポートし、によってカプセル化するサービスは、ナビゲーション サービスを使用を試行できます、 <xref:System.Windows.Navigation.NavigationService> クラスです。 独自に作成することはできません <xref:System.Windows.Navigation.NavigationService> インスタンスもします。 代わりに、ホストの種類をなど <xref:System.Windows.Navigation.NavigationWindow>, 、<xref:System.Windows.Controls.Frame>, 、ブラウザーが、それぞれまたは <xref:System.Windows.Navigation.NavigationService> インスタンスからアクセスできる、 <xref:System.Windows.Controls.Page.NavigationService%2A> プロパティです。  
  
 ナビゲーション サービスから返される、 <xref:System.Windows.Controls.Page.NavigationService%2A> プロパティは、のインスタンス、 <xref:System.Windows.Navigation.NavigationService> ビジュアル ツリーを最初のナビゲーターによって管理されているクラス。 1 つが見つからない場合、 `null` 返されるか、ページのホストがナビゲーションをサポートしていないことを示します。  
  
> [!NOTE]
>  <xref:System.Windows.Window> クラスのナビゲーションをサポートしておらず、ナビゲーション サービスを提供しません。  
  
   
  
## 例  
 次の例を示し方法ページことができますナビゲーション サービスが利用可能な場合する場合、使用前のページに戻るにします。  
  
 [!code-csharp[PageNavigationServiceSnippets\#GetPageNavigationServiceCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/PageNavigationServiceSnippets/CSharp/HomePage.xaml.cs#getpagenavigationservicecodebehind)]
 [!code-vb[PageNavigationServiceSnippets\#GetPageNavigationServiceCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PageNavigationServiceSnippets/visualbasic/homepage.xaml.vb#getpagenavigationservicecodebehind)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTemplateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTemplateChanged (System.Windows.Controls.ControlTemplate oldTemplate, System.Windows.Controls.ControlTemplate newTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTemplateChanged(class System.Windows.Controls.ControlTemplate oldTemplate, class System.Windows.Controls.ControlTemplate newTemplate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Page.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldTemplate" Type="System.Windows.Controls.ControlTemplate" />
        <Parameter Name="newTemplate" Type="System.Windows.Controls.ControlTemplate" />
      </Parameters>
      <Docs>
        <param name="oldTemplate">古いテンプレート。</param>
        <param name="newTemplate">新しいテンプレート。</param>
        <summary>ときに呼び出されます用のテンプレート、 <see cref="T:System.Windows.Controls.Page" /> 変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 「<xref:System.Windows.Controls.Control.OnTemplateChanged%2A?displayProperty=fullName>」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.Page.Template" />
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Page.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">以前の親です。 設定 <see langword="null" /> 場合、 <see cref="T:System.Windows.DependencyObject" /> 以前の親はありませんでした。</param>
        <summary>ときに呼び出されますの親、 <see cref="T:System.Windows.Controls.Page" /> を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 <xref:System.Windows.UIElement.OnVisualParentChanged%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">新しい親はどちらも、 <see cref="T:System.Windows.Window" /> も <see cref="T:System.Windows.Controls.Frame" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeShowsNavigationUI">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeShowsNavigationUI ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeShowsNavigationUI() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Page.ShouldSerializeShowsNavigationUI" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスのシリアル化動作を決定する、 <see cref="P:System.Windows.Controls.Page.ShowsNavigationUI" /> プロパティです。</summary>
        <returns>
          <see langword="true" /> 場合は、コンテンツがシリアル化する必要があります。それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTitle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTitle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTitle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Page.ShouldSerializeTitle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスのシリアル化動作を決定する、 <see cref="P:System.Windows.Controls.Page.Title" /> プロパティです。</summary>
        <returns>
          <see langword="true" /> 場合は、コンテンツがシリアル化する必要があります。それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeWindowHeight">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeWindowHeight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeWindowHeight() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Page.ShouldSerializeWindowHeight" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスのシリアル化動作を決定する、 <see cref="P:System.Windows.Controls.Page.WindowHeight" /> プロパティです。</summary>
        <returns>
          <see langword="true" /> 場合は、コンテンツがシリアル化する必要があります。それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeWindowTitle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeWindowTitle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeWindowTitle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Page.ShouldSerializeWindowTitle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスのシリアル化動作を決定する、 <see cref="P:System.Windows.Controls.Page.WindowTitle" /> プロパティです。</summary>
        <returns>
          <see langword="true" /> 場合は、コンテンツがシリアル化する必要があります。それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeWindowWidth">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeWindowWidth ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeWindowWidth() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Page.ShouldSerializeWindowWidth" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスのシリアル化動作を決定する、 <see cref="P:System.Windows.Controls.Page.WindowWidth" /> プロパティです。</summary>
        <returns>
          <see langword="true" /> 場合は、コンテンツがシリアル化する必要があります。それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsNavigationUI">
      <MemberSignature Language="C#" Value="public bool ShowsNavigationUI { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsNavigationUI" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.ShowsNavigationUI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、ナビゲーション UI の <see cref="T:System.Windows.Navigation.NavigationWindow" /> に Microsoft Internet Explorer 6 が表示されます。</summary>
        <value>
          <see langword="true" /> 場合は、ナビゲーション UI ホストの <see cref="T:System.Windows.Navigation.NavigationWindow" /> が表示されているそれ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Navigation.NavigationWindow> ナビゲーションを表示 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 既定で有効にするブラウザー スタイル forwards と backwards のナビゲーションにします。 ページとして設定されている場合、 <xref:System.Windows.Application.StartupUri%2A>, 、<xref:System.Windows.Application> が自動的に開きます、 <xref:System.Windows.Navigation.NavigationWindow> でページをホストします。 既定値を使用したくあまりせんページかどうか <xref:System.Windows.Navigation.NavigationWindow> ナビゲーション [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)], 、設定可能で <xref:System.Windows.Controls.Page.ShowsNavigationUI%2A> に `false`します。  
  
> [!NOTE]
>  [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] はナビゲーションに統合されません [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] の [!INCLUDE[TLA#tla_ie6](~/includes/tlasharptla-ie6-md.md)], 、独自のナビゲーションを提供 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)], 、表示または設定によって非表示にするには、これ <xref:System.Windows.Controls.Page.ShowsNavigationUI%2A>します。[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] 統合、 [!INCLUDE[TLA#tla_ie7](~/includes/tlasharptla-ie7-md.md)] ナビゲーション [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)], ので設定 <xref:System.Windows.Controls.Page.ShowsNavigationUI%2A> 内のページに [!INCLUDE[TLA#tla_ie7](~/includes/tlasharptla-ie7-md.md)] も何も起こりません。  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] ナビゲーションを非表示にする [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] の、 <xref:System.Windows.Navigation.NavigationWindow>です。  
  
 [!code-xml[PageShowsNavigationUISnippets#SetPageShowsNavigationUIXAML1](~/samples/snippets/xaml/VS_Snippets_Wpf/PageShowsNavigationUISnippets/XAML/HomePage.xaml#setpageshowsnavigationuixaml1)]  
[!code-xml[PageShowsNavigationUISnippets#SetPageShowsNavigationUIXAML2](~/samples/snippets/xaml/VS_Snippets_Wpf/PageShowsNavigationUISnippets/XAML/HomePage.xaml#setpageshowsnavigationuixaml2)]  
  
 [!code-xml[PageShowsNavigationUISnippets#SetPageShowsNavigationUIXAMLLang1](~/samples/snippets/csharp/VS_Snippets_Wpf/PageShowsNavigationUISnippets/CSharp/HomePage.xaml#setpageshowsnavigationuixamllang1)]  
[!code-xml[PageShowsNavigationUISnippets#SetPageShowsNavigationUIXAMLLang2](~/samples/snippets/csharp/VS_Snippets_Wpf/PageShowsNavigationUISnippets/CSharp/HomePage.xaml#setpageshowsnavigationuixamllang2)]  
  
 [!code-csharp[PageShowsNavigationUISnippets\#SetPageShowsNavigationUICODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/PageShowsNavigationUISnippets/CSharp/HomePage.xaml.cs#setpageshowsnavigationuicodebehind)]
 [!code-vb[PageShowsNavigationUISnippets\#SetPageShowsNavigationUICODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PageShowsNavigationUISnippets/visualbasic/homepage.xaml.vb#setpageshowsnavigationuicodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Controls.Page.ShowsNavigationUI" /> でプロパティを調査、 <see cref="T:System.Windows.Controls.Page" /> によってホストされていないインスタンス、 <see cref="T:System.Windows.Window" />, 、<see cref="T:System.Windows.Navigation.NavigationWindow" />, 、またはブラウザーです。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Page.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">追加する子オブジェクト。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Windows.Markup.IAddChild.AddChild(System.Object)" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Controls.Page> のインスタンスが <xref:System.Windows.Markup.IAddChild> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string str);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Page.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">オブジェクトに追加するテキスト。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Windows.Markup.IAddChild.AddText(System.String)" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Controls.Page> のインスタンスが <xref:System.Windows.Markup.IAddChild> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Template">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ControlTemplate Template { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ControlTemplate Template" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.Template" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ControlTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のコントロール テンプレート、 <see cref="T:System.Windows.Controls.Page" />です。</summary>
        <value>
          <see cref="T:System.Windows.Controls.ControlTemplate" /> の <see cref="T:System.Windows.Controls.Page" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlAttributeUsage_ContentTemplate"></a>   
## XAML 属性の使用方法  
  
```  
<object Template="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlValues_ContentTemplate"></a>   
## XAML 値  
 *resourceExtension*  
 か、テンプレート リソースを参照する方法を識別するマークアップ拡張機能 `StaticResource` または `DynamicResource`です。 参照してください [XAML リソース](http://msdn.microsoft.com/ja-jp/91580b89-a0a8-4889-aecb-fddf8e63175f)します。  
  
 *styleResourceKey*  
 要求されたテンプレート セレクターを識別するキー。 このキーは既存のリソースを <xref:System.Windows.ResourceDictionary>です。  
  
> [!NOTE]
>  プロパティ要素構文は、技術的に可能ですが、推奨されません。 詳細については、次を参照してください。 [インライン スタイルおよびテンプレート](http://msdn.microsoft.com/ja-jp/69a1a3f9-acb5-4e2c-9c43-2e376c055ac4)します。  
  
<a name="dependencyPropertyInfo_PageTemplate"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Page.TemplateProperty>|  
|メタデータのプロパティを設定するには `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TemplateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Page.TemplateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Page.Template" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のタイトル、 <see cref="T:System.Windows.Controls.Page" />です。</summary>
        <value>タイトル、 <see cref="T:System.Windows.Controls.Page" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Windows.Controls.Page.Title%2A> では、プロパティが表示されない <xref:System.Windows.Controls.Page>, に表示されることをホストしているウィンドウのタイトル バーからも、 <xref:System.Windows.Controls.Page>です。 設定する代わりに、 <xref:System.Windows.Controls.Page.WindowTitle%2A> ホスト ウィンドウのタイトルを変更します。  
  
 <xref:System.Windows.Controls.Page.Title%2A> コンテンツの移動のナビゲーション履歴エントリの名前を生成するにも使用できます。 データの次の情報を使用して、優先順位、ナビゲーション履歴エントリ名を自動的に作成します。  
  
-   アタッチされた <xref:System.Windows.Navigation.JournalEntry.Name%2A> 属性です。  
  
-   <xref:System.Windows.Controls.Page.Title%2A> プロパティ。  
  
-   <xref:System.Windows.Controls.Page.WindowTitle%2A> プロパティおよび [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] 、現在のページ  
  
-   [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] 、現在のページです。  
  
 関連付けられている場合は、 <xref:System.Windows.Navigation.CustomContentState> オブジェクトのナビゲーション履歴にコンテンツを指定できます表示される名前ナビゲーション履歴エントリに上書きすることで <xref:System.Windows.Navigation.CustomContentState.JournalEntryName%2A?displayProperty=fullName>します。  
  
<a name="dependencyPropertyInfo_PageTitle"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.Page.TitleProperty>|  
|メタデータのプロパティを設定するには `true`|なし|  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TitleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TitleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Page.TitleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Controls.Page.Title" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 識別子、 <xref:System.Windows.Controls.Page.Title%2A> 依存関係プロパティ。  
  
   
  
## 例  
 [依存関係プロパティの概要](http://msdn.microsoft.com/ja-jp/d119d00c-3afb-48d6-87a0-c4da4f83dee5)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowHeight">
      <MemberSignature Language="C#" Value="public double WindowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 WindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.WindowHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ホストの高さを取得または <see cref="T:System.Windows.Window" /> または <see cref="T:System.Windows.Navigation.NavigationWindow" /> の <see cref="T:System.Windows.Controls.Page" />です。</summary>
        <value>直接ホストするウィンドウの高さ、 <see cref="T:System.Windows.Controls.Page" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Controls.Page.WindowHeight%2A> のみに適用すると、 <xref:System.Windows.Controls.Page> が含まれています\] ウィンドウで直接ホストされています。  
  
-   <xref:System.Windows.Window>  
  
-   <xref:System.Windows.Navigation.NavigationWindow>  
  
-   [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]  
  
 場合、 <xref:System.Windows.Controls.Page> によってホストされている、 <xref:System.Windows.Controls.Frame>, 設定 <xref:System.Windows.Controls.Page.WindowHeight%2A> 、影響を与えませんの値を取得することもできます <xref:System.Windows.Controls.Page.WindowHeight%2A>します。  
  
 A <xref:System.Windows.Controls.Page> で、 [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] のみを使用して <xref:System.Windows.Controls.Page.WindowHeight%2A> の高さを変更する [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]; を設定して、高さを変更できません <xref:System.Windows.FrameworkElement.Height%2A>, 、<xref:System.Windows.FrameworkElement.MinHeight%2A>, 、または <xref:System.Windows.FrameworkElement.MaxHeight%2A>です。  
  
 最小の高さ、 [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)] ウィンドウが 150 ピクセルです。 ブラウザーによってホストされるページ、つまり、この値の <xref:System.Windows.Controls.Page.WindowHeight%2A> 全体の高さの原因となる場合、適用されないことが、 [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)] 150 未満のピクセルのウィンドウです。  
  
   
  
## 例  
 次の例では、ページから、ウィンドウの高さを設定する方法を示します。  
  
 [!code-xml[HOWTONavigationSnippets\#SetPageWindowHeightXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTONavigationSnippets/CSharp/SetWindowHeightPage.xaml#setpagewindowheightxaml)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowTitle">
      <MemberSignature Language="C#" Value="public string WindowTitle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WindowTitle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.WindowTitle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Title)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイトルをホストの設定を取得または <see cref="T:System.Windows.Window" /> または <see cref="T:System.Windows.Navigation.NavigationWindow" /> の <see cref="T:System.Windows.Controls.Page" />です。</summary>
        <value>直接ホストするウィンドウのタイトル、 <see cref="T:System.Windows.Controls.Page" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、ページをホストするウィンドウのタイトルを含む <xref:System.Windows.Navigation.NavigationWindow> と [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], 、現在ホストされているファイルの名前を指定します \(ページが緩やかな場合は、.xaml 拡張子を持つ [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], 、.xbap 拡張子をページの一部である場合、または、 [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)]\)。  
  
 ページは既定値を設定して変更できます、 <xref:System.Windows.Controls.Page.WindowTitle%2A> プロパティです。  
  
 別のページ設定までに、ウィンドウのタイトルが変更されない、ページは、この方法で、ウィンドウのタイトルを設定、いったん <xref:System.Windows.Controls.Page.WindowTitle%2A> 値が異なります。  
  
> [!NOTE]
>  <xref:System.Windows.Controls.Page> 、最上位のウィンドウでのコンテンツの必要があります <xref:System.Windows.Controls.Page.WindowTitle%2A> 効果の場合に、 <xref:System.Windows.Controls.Page> 内でホストされる、 <xref:System.Windows.Controls.Frame>, 、例、 <xref:System.Windows.Controls.Page.WindowTitle%2A> ホスト ウィンドウのタイトルを変更することはできません。  
  
 <xref:System.Windows.Controls.Page.WindowTitle%2A> コンテンツの移動のナビゲーション履歴エントリの名前を生成するにも使用できます。 データの次の情報を使用して、優先順位、ナビゲーション履歴エントリ名を自動的に作成します。  
  
-   アタッチされた <xref:System.Windows.Navigation.JournalEntry.Name%2A> 属性です。  
  
-   <xref:System.Windows.Controls.Page.Title%2A> プロパティ。  
  
-   <xref:System.Windows.Controls.Page.WindowTitle%2A> プロパティおよび [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] 、現在のページ  
  
-   [!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] 、現在のページです。  
  
 関連付けられている場合は、 <xref:System.Windows.Navigation.CustomContentState> オブジェクトのナビゲーション履歴にコンテンツを含む、オーバーライドすることで、ナビゲーション履歴要素名の値を指定できます <xref:System.Windows.Navigation.CustomContentState.JournalEntryName%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 次の例では、ページから、ウィンドウのタイトルを設定する方法を示します。  
  
 [!code-xml[HOWTONavigationSnippets\#SetPageWindowTitleXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTONavigationSnippets/CSharp/SetWindowTitlePage.xaml#setpagewindowtitlexaml)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowWidth">
      <MemberSignature Language="C#" Value="public double WindowWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 WindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Page.WindowWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ホストの幅を取得または <see cref="T:System.Windows.Window" /> または <see cref="T:System.Windows.Navigation.NavigationWindow" /> の <see cref="T:System.Windows.Controls.Page" />です。</summary>
        <value>直接ホストするウィンドウの幅、 <see cref="T:System.Windows.Controls.Page" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Controls.Page.WindowWidth%2A> のみに適用すると、 <xref:System.Windows.Controls.Page> が含まれています\] ウィンドウで直接ホストされています。  
  
-   <xref:System.Windows.Window>  
  
-   <xref:System.Windows.Navigation.NavigationWindow>  
  
-   [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]  
  
 場合、 <xref:System.Windows.Controls.Page> によってホストされている、 <xref:System.Windows.Controls.Frame>, 設定 <xref:System.Windows.Controls.Page.WindowWidth%2A> 、影響を与えませんの値を取得することもできます <xref:System.Windows.Controls.Page.WindowWidth%2A>します。  
  
 A <xref:System.Windows.Controls.Page> で、 [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] のみを使用して <xref:System.Windows.Controls.Page.WindowWidth%2A> の幅を変更する [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]; を設定して、幅を変更できません <xref:System.Windows.FrameworkElement.Width%2A>, 、<xref:System.Windows.FrameworkElement.MinWidth%2A>, 、または <xref:System.Windows.FrameworkElement.MaxWidth%2A>です。  
  
 最小の幅、 [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)] ウィンドウは 250 ピクセルです。 ブラウザーによってホストされるページ、つまり、この値の <xref:System.Windows.Controls.Page.WindowWidth%2A> 全体の幅が発生する場合、適用されないことが、 [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)] ウィンドウをより小さい 250 ピクセルにします。  
  
   
  
## 例  
 次の例では、ページから、ウィンドウの幅を設定する方法を示します。  
  
 [!code-xml[HOWTONavigationSnippets\#SetPageWindowWidthXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTONavigationSnippets/CSharp/SetWindowWidthPage.xaml#setpagewindowwidthxaml)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>