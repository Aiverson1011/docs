<Type Name="SpeechSynthesizer" FullName="System.Speech.Synthesis.SpeechSynthesizer">
  <TypeSignature Language="C#" Value="public sealed class SpeechSynthesizer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpeechSynthesizer extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeechSynthesizer" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>インストール済みの音声合成エンジン機能へのアクセスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 When you create a new <xref:System.Speech.Synthesis.SpeechSynthesizer> object, it uses the default system voice. To configure the <xref:System.Speech.Synthesis.SpeechSynthesizer> to use one of the installed speech synthesis \(text\-to\-speech\) voices, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> or <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> method. To get information about which voices are installed, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method and the <xref:System.Speech.Synthesis.VoiceInfo> class.  
  
 This class also provides control over the following aspects of speech synthesis:  
  
-   To configure the output for the <xref:System.Speech.Synthesis.SpeechSynthesizer> object, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> methods.  
  
-   To generate speech, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, or <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> method. The <xref:System.Speech.Synthesis.SpeechSynthesizer> can produce speech from text, a <xref:System.Speech.Synthesis.Prompt> or <xref:System.Speech.Synthesis.PromptBuilder> object, or from [Speech Synthesis Markup Language \(SSML\) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763).  
  
-   To pause and resume speech synthesis, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> methods.  
  
-   To add or remove lexicons, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> methods. The <xref:System.Speech.Synthesis.SpeechSynthesizer> can use one or more lexicons to guide its pronunciation of words.  
  
-   To modify the delivery of speech output, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A> and <xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A> properties.  
  
 The <xref:System.Speech.Synthesis.SpeechSynthesizer> raises events when it encounters certain features in prompts: \(<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>, and <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>\). It also raises events that report on the start \(<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>\) and end \(<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>\) of speak operations and on the change of the speaking voice \(<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>\).  
  
> [!NOTE]
>  Always call <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A> before you release your last reference to the <xref:System.Speech.Synthesis.SpeechSynthesizer>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Speech.Synthesis.SpeechSynthesizer> object's <xref:System.Object.Finalize%2A> method.  
  
   
  
## 例  
 The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and speaks a string.  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string.  
      synth.Speak("This example demonstrates a basic use of Speech Synthesizer");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
    <altmember cref="T:System.Speech.Synthesis.Prompt" />
    <altmember cref="T:System.Speech.Synthesis.PromptBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 初期化するとき、新しい <xref:System.Speech.Synthesis.SpeechSynthesizer> インスタンス、既定のシステムの音声を使用します。 構成する、 <xref:System.Speech.Synthesis.SpeechSynthesizer> 使用するにはインストール済みの音声合成 \(合成\) 音声のいずれかを使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> または <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> メソッドです。 音声のインストールに関する情報を取得する、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドおよび <xref:System.Speech.Synthesis.VoiceInfo> クラスです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public void AddLexicon (Uri uri, string mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLexicon(class System.Uri uri, string mediaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">辞書情報の場所。</param>
        <param name="mediaType">辞書のメディアの種類。 メディアの種類の値は大文字小文字を区別ではありません。</param>
        <summary>辞書を追加、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 発音辞書は、単語または語句とその発音では、サポートされている音声記号からの文字から成るのコレクションです。 辞書を使用すると、アプリケーションで特殊なボキャブラリのカスタムの発音を指定します。  
  
 発音が外部の辞書ファイルで指定された音声シンセサイザーの内部辞書またはディクショナリの発音よりも優先されます。 ただし、発音がインラインを指定のいずれかで作成されるプロンプトで、 <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, 、<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, 、または <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> メソッドの辞書で指定した発音よりも優先されます。 インライン発音単語の 1 つのみに適用されます。 詳細については、「[Lexicons and Phonetic Alphabets](http://msdn.microsoft.com/ja-jp/435e3c6f-6834-4e5a-b0f6-c17b2275dc51)」を参照してください。  
  
 複数の辞書を追加する、 <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトです。2 つの値は、現在のサポートされている、 `mediaType` パラメーター。  
  
-   値 `application/pls+xml` 、辞書に準拠することを示す、 [Pronunciation Lexicon Specification \(PLS\) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201766)します。 これは、使用する優先形式です。  
  
-   値 `application/vdn.ms-sapi-lex` 辞書形式が Microsoft 独自の形式は、圧縮されていない用語集であることを示します。 これは、従来の形式と、上記で説明した PL 形式を使用することをお勧めします。  
  
   
  
## 例  
 次の例では、追加と削除を含むカスタム発音"blue"という単語を辞書の効果を示します。 辞書は、"bleep"のようなサウンドを"blue"の読み方を定義します。 辞書が読み込まれているスピーチ シンセサイザーは、辞書で定義されている発音を使用します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Add a lexicon that changes the pronunciation of "blue".  
        synth.AddLexicon(new Uri("C:\\test\\Blue.pls"), "application/pls+xml");  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
  
        // Remove the lexicon.  
        synth.RemoveLexicon(new Uri("C:\\test\\Blue.pls"));  
  
        // Speak the prompt.  
        synth.Speak("My favorite color is blue.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 Blue.pls 辞書ファイルの内容を次に示します。  
  
```xml  
<?xml version="1.0" encoding="UTF-8"?>  
  
<lexicon version="1.0"   
      xmlns="http://www.w3.org/2005/01/pronunciation-lexicon"  
      alphabet="x-microsoft-ups" xml:lang="en-US">  
  
  <lexeme>  
    <grapheme> blue </grapheme>  
    <phoneme> B L I P </phoneme>  
  </lexeme>  
  
</lexicon>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="BookmarkReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.BookmarkReachedEventArgs&gt; BookmarkReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.BookmarkReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するか、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> メッセージ内のブックマークが発生しました。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> のいずれかの処理中にこのイベントを発生させる、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, 、または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドです。 イベントに関連付けられているデータについては、次を参照してください。 <xref:System.Speech.Synthesis.BookmarkReachedEventArgs>します。  
  
 使用してブックマークを追加する、 <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A> メソッドです。  
  
   
  
## 例  
 次の例では、2 つのブックマークが含まれていて、出力を再生用の WAV ファイルを送信するプロンプトを作成します。 ハンドラー、 <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> イベントがコンソールにイベントが発生したときに、オーディオのストリーム内での位置およびブックマークの名前を書き込みます。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nightime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>破棄することも、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトおよびリリースのリソースが、セッション中に使用します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SpeechSynthesizer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リソースをクリーンアップするための安全装置として機能になった場合、 <see cref="M:System.Speech.Synthesis.SpeechSynthesizer.Dispose" /> メソッドは呼び出されません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentlySpokenPrompt">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>プロンプトを取得、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> の音声が出力されます。</summary>
        <returns>現在のナレーション中にプロンプトのオブジェクトを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
  
```csharp  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInstalledVoices">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在システムにインストールされている音声 \(合成\) を合成音声認識のコレクションを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションを呼び出すと <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, 、メソッドは、音声 \(音声合成エンジン\) の各が検出されるレジストリ満たすで特定の最低限の条件を確認します。 検証が失敗したすべての音声を <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 設定、 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを `False`します。 アプリケーションは、音声を選択できないを <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティは `False`です。 通常、アプリケーションでは、音声を設定しない <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてのインストール済みの音声合成 \(合成\) 音声を返します。</summary>
        <returns>システムに現在インストールされているボイスの読み取り専用コレクションを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声とは、音声合成 \(TTS\) で、システムにインストールされている音声合成エンジンです。  
  
   
  
## 例  
 次の例を初期化するコンソール アプリケーションの一部である、 <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトしインストールされている音声 \(音声合成エンジン\) の一覧をコンソールに出力し、各音声で利用可能な情報を示します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices.   
        Console.WriteLine("Installed voices -");  
        foreach (InstalledVoice voice in synth.GetInstalledVoices())  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          string AudioFormats = "";  
          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  
          {  
            AudioFormats += String.Format("{0}\n",  
            fmt.EncodingFormat.ToString());  
          }  
  
          Console.WriteLine(" Name:          " + info.Name);  
          Console.WriteLine(" Culture:       " + info.Culture);  
          Console.WriteLine(" Age:           " + info.Age);  
          Console.WriteLine(" Gender:        " + info.Gender);  
          Console.WriteLine(" Description:   " + info.Description);  
          Console.WriteLine(" ID:            " + info.Id);  
          Console.WriteLine(" Enabled:       " + voice.Enabled);  
          if (info.SupportedAudioFormats.Count != 0)  
          {  
            Console.WriteLine( " Audio formats: " + AudioFormats);  
          }  
          else  
          {  
            Console.WriteLine(" No supported audio formats found");  
          }  
  
          string AdditionalInfo = "";  
          foreach (string key in info.AdditionalInfo.Keys)  
          {  
            AdditionalInfo += String.Format("  {0}: {1}\n", key, info.AdditionalInfo[key]);  
          }  
  
          Console.WriteLine(" Additional Info - " + AdditionalInfo);  
          Console.WriteLine();  
        }  
      }  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints" />
        <altmember cref="Overload:System.Speech.Synthesis.PromptBuilder.StartVoice" />
      </Docs>
    </Member>
    <Member MemberName="GetInstalledVoices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Synthesis.InstalledVoice&gt; GetInstalledVoices(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Synthesis.InstalledVoice&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">音声をサポートする必要があるロケールです。</param>
        <summary>特定のロケールをサポートする \(音声合成\) を合成音声で次のインストール済みの音声のすべてを返します。</summary>
        <returns>指定したロケールをサポートするシステムに現在インストールされている音声の読み取り専用コレクションを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インストールされている音声サポート指定されたロケールにない場合、このメソッドは空のコレクションを返します。  
  
 Microsoft Windows および System.Speech API は、すべての有効な言語\-国コードを受け取ります。 カルチャ プロパティで指定された言語を使用して音声合成を実行するには、言語\-国コードをサポートする音声合成エンジンをインストールする必要があります。 Microsoft Windows 7 に付属の音声合成エンジンは、次の言語、国コードと協力します。  
  
-   EN\-US です。 英語 \(米国\)  
  
-   ZH\-CN です。 中国語 \(中国\)  
  
-   zh\-tw があります。 中国語 \(台湾\)  
  
 "En"などの 2 文字の言語コードも許可されています。  
  
   
  
## 例  
 次の例を初期化するコンソール アプリケーションの一部である、<xref:System.Speech.Synthesis.SpeechSynthesizer>オブジェクトを EN\-US ロケールをサポートしているインストール済みの音声の一覧をコンソールに出力します。  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synthesizer = new SpeechSynthesizer())  
      {  
  
        // Output information about all of the installed voices that  
        // support the en-US locacale.   
        Console.WriteLine("Installed voices for the en-US locale:");  
        foreach (InstalledVoice voice in  
          synthesizer.GetInstalledVoices(new CultureInfo("en-US")))  
        {  
          VoiceInfo info = voice.VoiceInfo;  
          OutputVoiceInfo(info);  
        }  
  
        // Output information about the current voice.  
        Console.WriteLine();  
        Console.WriteLine("Current voice:");  
        OutputVoiceInfo(synthesizer.Voice);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Display information about a synthesizer voice.  
    private static void OutputVoiceInfo(VoiceInfo info)  
    {  
      Console.WriteLine("  Name: {0}, culture: {1}, gender: {2}, age: {3}.",  
        info.Name, info.Culture, info.Gender, info.Age);  
      Console.WriteLine("    Description: {0}", info.Description);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.InstalledVoice" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一時停止、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="PhonemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.PhonemeReachedEventArgs&gt; PhonemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.PhonemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>音素に達したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音素は言語の基本コンポーネント、通常 1 つまたは複数の個別のサウンドを表す文字のアルファベット \(または 2 文字の組み合わせ\) です。 たとえば、文字"c"は、「ある軽量」で"s"のように、または"catch"に"k"のように思われるかもしれません音素です。 書き込まれた単語とは、音素のカルテです。 Word の音素を変更すると、そのスペルが変更されます。  
  
 A <xref:System.Speech.Synthesis.SpeechSynthesizer> インスタンスの生成、 <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> 音素のときに使用する単語の各部分のイベントです。 たとえば、単語の「テーマ」が生成 3 つの <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> イベント;"th"サウンド"e"サウンド用および"m"の音を出す \(me\)。  
  
 例と、イベントに関連付けられているデータに関する情報については、次を参照してください。 <xref:System.Speech.Synthesis.PhonemeReachedEventArgs>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public int Rate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rate" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Rate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の読み上げ速度、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトです。</summary>
        <value>読み上げ速度を返す、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 10 を\-10 のオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、\-2 に設定する話し速度で文字列を話します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Set a value for the speaking rate.  
      synth.Rate = -2;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a text string synchronously.  
      synth.Speak("This example speaks a string with the speaking rate set to -2.");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }     
  }    
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.PromptStyle" />
        <altmember cref="T:System.Speech.Synthesis.PromptRate" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public void RemoveLexicon (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveLexicon(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">辞書のドキュメントの場所。</param>
        <summary>辞書を削除、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 例については、「<xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Resume" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>履歴書、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> が一時停止された後のオブジェクトします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.Pause" />
        <altmember cref="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoice">
      <MemberSignature Language="C#" Value="public void SelectVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">選択する音声の名前。</param>
        <summary>名前で特定の音声を選択します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドおよび<xref:System.Speech.Synthesis.VoiceInfo>クラスの名前を取得するには、選択可能な音声合成 \(TTS\) 音声がインストールされています。 選択するには、音声の内容全体を渡す、<xref:System.Speech.Synthesis.VoiceInfo.Name%2A>プロパティの引数として、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>メソッドです。<xref:System.Speech.Synthesis.SpeechSynthesizer>オブジェクトの選択を含む最初のインストール済みの音声`name`で音声の<xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=fullName>プロパティです。<xref:System.Speech.Synthesis.SpeechSynthesizer>音声と一致するかどうかを決定する、大文字小文字を区別部分文字列比較を実行、`name`です。  
  
 アプリケーションを呼び出すと<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドは、レジストリ内で検出された音声のそれぞれには、特定最小の条件を満たしていることを確認します。 検証に失敗した、音声の<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>設定、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティを`False`です。 アプリケーションが、音声を選択できない持つ<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティは`False`します。 通常、アプリケーションが設定されていない、音声の<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティです。  
  
 性別、年齢、またはロケールによって、音声を選択するには、いずれかの操作を使用して、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectVoiceByHints">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定の特性を持つ音声を選択します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスの名前を取得するには、選択可能な音声合成 \(TTS\) 声がインストールされています。<xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトによって指定された特性に一致する最初のインストール済みの音声を選択します。  
  
 アプリケーションを呼び出すと <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, 、メソッドは、最低限の条件を満たしてレジストリで検出された音声のことを確認します。 検証が失敗したすべての音声を <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 設定、 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを `False`します。 アプリケーションは、音声を選択できないを <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティは `False`です。 通常、アプリケーションでは、音声を設定しない <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティです。  
  
 名前で、音声を選択するため、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> メソッド  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender">選択する音声の性別。</param>
        <summary>特定の性別と音声を選択します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスの名前を取得するには、選択可能な音声合成 \(TTS\) 声がインストールされています。<xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトが最初のインストール済みの音声によって選択が <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> と一致する、 `gender` パラメーター。  
  
 アプリケーションを呼び出すと <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, 、メソッドは、最低限の条件を満たしてレジストリで検出された音声のことを確認します。 検証が失敗したすべての音声を <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 設定、 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを `False`します。 アプリケーションは、音声を選択できないを <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティは `False`です。 通常、アプリケーションでは、音声を設定しない <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティです。  
  
 その他の特性に基づき、音声を選択するには、他の参照してください。 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> メソッドです。  
  
 名前で、音声を選択するため、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender">選択する音声の性別。</param>
        <param name="age">選択する音声の年齢。</param>
        <summary>特定の性別と年齢に音声を選択します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスの名前を取得するには、選択可能な音声合成 \(TTS\) 声がインストールされています。<xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトが最初のインストール済みの音声を選択するが <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> と <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> プロパティ一致、 `gender` と `age` パラメーター。  
  
 アプリケーションを呼び出すと <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, 、メソッドは、最低限の条件を満たしてレジストリで検出された音声のことを確認します。 検証が失敗したすべての音声を <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 設定、 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを `False`します。 アプリケーションは、音声を選択できないを <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティは `False`です。 通常、アプリケーションでは、音声を設定しない <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティです。  
  
 その他の特性に基づき、音声を選択するには、他の参照してください。 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> メソッドです。  
  
 名前で、音声を選択するため、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender">選択する音声の性別。</param>
        <param name="age">選択する音声の年齢。</param>
        <param name="voiceAlternate">選択する音声の位置。</param>
        <summary>声が順序付けの位置に基づいて特定の性別と年齢での音声を選択します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラスの名前を取得するには、選択可能な音声合成 \(TTS\) 声がインストールされています。<xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトの検索がインストールされている音声を持つ <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> と <xref:System.Speech.Synthesis.VoiceInfo.Age%2A> プロパティ一致、 `gender` と `age` パラメーター。<xref:System.Speech.Synthesis.SpeechSynthesizer> に等しくなると、音声を取得し、見つかった一致項目をカウント、 `voiceAlternate` パラメーター。  
  
 アプリケーションを呼び出すと <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, 、メソッドは、最低限の条件を満たしてレジストリで検出された音声のことを確認します。 検証が失敗したすべての音声を <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 設定、 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを `False`します。 アプリケーションは、音声を選択できないを <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティは `False`です。 通常、アプリケーションでは、音声を設定しない <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティです。  
  
 その他の特性に基づき、音声を選択するには、他の参照してください。 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> オーバー ロードします。  
  
 名前で、音声を選択するため、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SelectVoiceByHints">
      <MemberSignature Language="C#" Value="public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectVoiceByHints(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="gender">選択する音声の性別。</param>
        <param name="age">選択する音声の年齢。</param>
        <param name="voiceAlternate">選択する音声の位置。</param>
        <param name="culture">選択する音声のロケールです。</param>
        <summary>声が順序付けの位置に基づいて特定の性別、年齢、およびロケールの音声を選択します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>検索意見を持つオブジェクト<xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>、 <xref:System.Speech.Synthesis.VoiceInfo.Age%2A>、および<xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>プロパティ一致、 `gender`、 `age`、および`culture`パラメーター。<xref:System.Speech.Synthesis.SpeechSynthesizer>カウント一致が見つかると、しに等しくなると、音声が返されます、`voiceAlternate`パラメーター。  
  
 Microsoft Windows および System.Speech API は、すべての有効な言語\-国コードを受け取ります。 指定された言語を使用して音声合成を実行する、`culture`パラメーターでは、言語、国コードをインストールする必要があるをサポートする音声合成エンジンです。 Microsoft Windows 7 に付属の音声合成エンジンは、次の言語、国コードと協力します。  
  
-   EN\-US です。 英語 \(米国\)  
  
-   ZH\-CN です。 中国語 \(中国\)  
  
-   zh\-tw があります。 中国語 \(台湾\)  
  
 "En"などの 2 文字の言語コードも許可されています。  
  
 アプリケーションを呼び出すと<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>メソッドは、レジストリ内で検出された音声のそれぞれには、特定最小の条件を満たしていることを確認します。 検証に失敗したすべての音声の<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>設定、<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティを`False`です。 アプリケーションが、音声を選択できない持つ<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティは`False`します。 通常、アプリケーションは、音声のない設定<xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>プロパティです。  
  
 その他の特性に基づいて、音声を選択するを参照してください、他の<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>オーバー ロードします。  
  
 名前で、音声を選択するには、<xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Speech.Synthesis.VoiceAge" />
        <altmember cref="T:System.Speech.Synthesis.VoiceGender" />
        <altmember cref="T:System.Speech.Synthesis.VoiceInfo" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetOutputToAudioStream (System.IO.Stream audioDestination, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToAudioStream(class System.IO.Stream audioDestination, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioDestination">音声合成の出力を追加するストリーム。</param>
        <param name="formatInfo">使用して合成出力形式。</param>
        <summary>構成、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オーディオ ストリームに出力を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> を解放する、 <xref:System.Speech.Synthesis.SpeechSynthesizer>のストリームへの参照。  
  
 その他の出力の構成オプションを参照してください、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, 、および <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetOutputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>構成、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 既定のオーディオ デバイスに出力を送信するオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、  **サウンド** windows ウィンドウ **コントロール パネルの \[** コンピューターの既定のオーディオ デバイスを構成します。  
  
 その他の出力の構成オプションを参照してください、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, 、および <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> メソッドです。  
  
   
  
## 例  
 次の例では、シンセサイザーを使用して、既定のオーディオ出力のフレーズを話します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the synthesizer to send output to the default audio device.  
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutputToNull">
      <MemberSignature Language="C#" Value="public void SetOutputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>構成、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> いないデバイス、ファイル、またはストリームに合成の操作から出力を送信するオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、リリース、 <xref:System.Speech.Synthesis.SpeechSynthesizer> のファイルまたはストリームへの参照。 例については、「<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>」を参照してください。  
  
 その他の出力の構成オプションを参照してください、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, 、および <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetOutputToWaveFile">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>構成、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> ウェーブ フォーム オーディオ形式のファイルに出力を追加するオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 解放する、 <xref:System.Speech.Synthesis.SpeechSynthesizer>の参照、ファイルを再構成、 <xref:System.Speech.Synthesis.SpeechSynthesizer>の出力、たとえばを呼び出して <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>します。  
  
 その他の出力の構成オプションを参照してください、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, 、および <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">ファイルへのパス。</param>
        <summary>構成、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> ウェーブ フォーム オーディオの設定を含むファイルに出力を追加するオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 出力を構成して、オーディオ形式を指定してを使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> メソッドです。  
  
   
  
## 例  
 次の例のインスタンスを使用して <xref:System.Media.SoundPlayer> .wav のファイルに出力されたプロンプトを再生します。<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 呼び出しは非同期で、 <xref:System.Media.SoundPlayer> インスタンスが作成される \(および <xref:System.Media.SoundPlayer.Play%2A> 呼び出されるメソッド\) のハンドラーで、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> イベントです。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToWaveFile(@"C:\Test\Sample.wav");  
  
      // Register for the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Build a prompt.  
      PromptBuilder builder = new PromptBuilder();  
      builder.AppendText("This sample asynchronously speaks a prompt to a WAVE file.");  
  
      // Speak the string asynchronously.  
      synth.SpeakAsync(builder);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeakCompleted event.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
  
      // Create a SoundPlayer instance to play the output audio file.  
      System.Media.SoundPlayer m_SoundPlayer =  
        new System.Media.SoundPlayer(@"C:\Test\Sample.wav");  
  
      //  Play the output file.  
      m_SoundPlayer.Play();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveFile (string path, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveFile(string path, class System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="path">ファイルへのパス。</param>
        <param name="formatInfo">オーディオ形式情報。</param>
        <summary>構成、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 指定された形式でのウェーブ フォーム オーディオ形式ファイルに出力を追加するオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、音声合成の出力の形式を指定し、WAV ファイルを送信します。  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\temp\test.wav",   
          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Create a SoundPlayer instance to play output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =   
          new System.Media.SoundPlayer(@"C:\temp\test.wav");  
  
        // Build a prompt.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is sample output to a WAVE file.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetOutputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetOutputToWaveStream (System.IO.Stream audioDestination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOutputToWaveStream(class System.IO.Stream audioDestination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioDestination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioDestination">音声合成の出力を追加するストリーム。</param>
        <summary>構成、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> ウェーブ フォーム オーディオの設定を格納しているストリームに出力を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 解放する、 <xref:System.Speech.Synthesis.SpeechSynthesizer>の参照、ストリーム reconfigure シンセサイザーの出力をたとえばを呼び出して <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>します。  
  
 その他の出力の構成オプションを参照してください、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, 、および <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> メソッドです。  
  
   
  
## 例  
 次の例では、WAV ストリームに文字列を出力します。  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the speech synthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      using (MemoryStream stream = new MemoryStream())  
      {  
  
        // Create a SoundPlayer instance to play the output audio file.  
        MemoryStream streamAudio = new MemoryStream();  
        System.Media.SoundPlayer m_SoundPlayer = new System.Media.SoundPlayer();  
  
        // Configure the synthesizer to output to an audio stream.  
        synth.SetOutputToWaveStream(streamAudio);  
  
        // Speak a phrase.  
        synth.Speak("This is sample text-to-speech output.");  
        streamAudio.Position = 0;  
        m_SoundPlayer.Stream = streamAudio;  
        m_SoundPlayer.Play();  
  
        // Set the synthesizer output to null to release the stream.   
        synth.SetOutputToNull();  
  
        // Insert code to persist or process the stream contents here.  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Speak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>同期的には、文字列から音声出力を生成、 <see cref="T:System.Speech.Synthesis.Prompt" /> オブジェクト、または <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドは同期的に音声を生成します。 内容までメソッドを返さない、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> インスタンスが完全に読み上げられます。 これは、音声の生成に最も簡単な方法です。 ただし、話すときにタスクを実行する場合、アプリケーションは、次に例を強調表示テキストのペイント アニメーション、モニターのコントロールやその他のタスクを使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> メソッドまたは <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドを非同期的に音声を生成します。  
  
 このメソッドの呼び出し中に、 <xref:System.Speech.Synthesis.SpeechSynthesizer> 次のイベントを発生させることができます。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>。 シンセサイザーの話し方の状態が変更されたときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>。 シンセサイザーが音声の生成を開始するときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>。 シンセサイザーはアルファベットまたは言語で音声認識の個別のサウンドを構成する文字の組み合わせに達するたびに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>。 語を話すたびに発生をシンセサイザーは完了します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>。 音声出力口または音声の生成に使用される顔筋肉の位置の変更を必要とするたびに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>。 シンセサイザーには、メッセージ内のブックマークが発生したときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>。 シンセサイザーの声が変更されたときに発生します。  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer>は発生しません、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> イベントのいずれかの処理中に、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">メッセージを聞くことコンテンツ。</param>
        <summary>内容を同期的に講演、 <see cref="T:System.Speech.Synthesis.Prompt" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内容を非同期的に話をする、 <xref:System.Speech.Synthesis.Prompt> オブジェクトを使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>します。  
  
   
  
## 例  
 次の例、 <xref:System.Speech.Synthesis.Prompt> 文字列からオブジェクトへの引数として、オブジェクトを渡すと、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドです。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a prompt from a string.  
        Prompt color = new Prompt("What is your favorite color?");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(color);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">メッセージを聞くことコンテンツ。</param>
        <summary>内容を同期的に講演、 <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内容を非同期的に話をする、 <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトを使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>します。  
  
   
  
## 例  
 次の例、 <xref:System.Speech.Synthesis.PromptBuilder> 文字列からオブジェクトへの引数として、オブジェクトを渡すと、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドです。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder song = new PromptBuilder();  
        song.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt synchronously.  
        synth.Speak(song);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Speak(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">読み上げるテキストです。</param>
        <summary>文字列の内容を同期的に話します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 SSML マークアップを含む文字列を同期的に話すことを使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> メソッドです。 文字列の内容を非同期的に話すことを使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> メソッドです。  
  
   
  
## 例  
 次の例のように、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドは音声同期的に出力を生成する最も簡単な手段を提供します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Speak a string synchronously.  
        synth.Speak("What is your favorite color?");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SpeakAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列から非同期的に音声出力を生成、 <see cref="T:System.Speech.Synthesis.Prompt" /> オブジェクト、または <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> メソッドが非同期的に音声を生成します。 メソッドは、返すの内容を待たずにすぐに、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 講演を終了するオブジェクト。 使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 話すときにタスクを実行するには、テキストを強調表示など、アプリケーションが必要な場合は、アニメーション、モニターのコントロール、またはその他のタスクをペイントします。  
  
 このメソッドの呼び出し中に、 <xref:System.Speech.Synthesis.SpeechSynthesizer> 次のイベントを発生させることができます。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>。 シンセサイザーの話し方の状態が変更されたときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>。 シンセサイザーが音声の生成を開始するときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>。 シンセサイザーはアルファベットまたは言語で音声認識の個別のサウンドを構成する文字の組み合わせに達するたびに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>。 語を話すたびに発生をシンセサイザーは完了します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>。 音声出力口または音声の生成に使用される顔筋肉の位置の変更を必要とするたびに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>。 シンセサイザーには、メッセージ内のブックマークが発生したときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>。 シンセサイザーの声が変更されたときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>。 シンセサイザーが終了したときに発生する <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 操作します。  
  
 使用することができます、アプリケーションが話すときにタスクを実行する必要がない場合、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドまたは <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> 同期的に音声を生成します。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </MemberGroup>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public void SpeakAsync (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsync(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">メッセージを聞くことコンテンツ。</param>
        <summary>内容を非同期的に講演、 <see cref="T:System.Speech.Synthesis.Prompt" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロンプトでの非同期の講演を取り消すことができます、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> メソッドです。  
  
 内容を同期的に話をする、 <xref:System.Speech.Synthesis.Prompt> オブジェクトを使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>します。  
  
   
  
## 例  
 次の例、 <xref:System.Speech.Synthesis.Prompt> 文字列からオブジェクトへの引数として、オブジェクトを渡すと、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> メソッドです。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a prompt from a string.  
      Prompt color = new Prompt("What is your favorite color?");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(color);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">メッセージを聞くことコンテンツ。</param>
        <summary>内容を非同期的に講演、 <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトです。</summary>
        <returns>読み上げるためにコンテンツを含むオブジェクトを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内容を同期的に話をする、 <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトを使用 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>します。  
  
   
  
## 例  
 次の例、 <xref:System.Speech.Synthesis.PromptBuilder> 文字列からオブジェクトへの引数として、オブジェクトを渡すと、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> メソッドです。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Create a PromptBuilder object and append a text string.  
      PromptBuilder song = new PromptBuilder();  
      song.AppendText("Say the name of the song you want to hear");  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakAsync(song);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="SpeakAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">読み上げるテキストです。</param>
        <summary>文字列の内容を非同期的に話します。</summary>
        <returns>読み上げるためにコンテンツを含むオブジェクトを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 SSML マークアップを含む文字列を非同期的に話すことを使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドです。 文字列の内容を同期的に話すことを使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドです。 プロンプトでの非同期の講演を取り消すことができます、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> メソッドです。  
  
   
  
## 例  
 次の例のように、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> メソッドは音声に非同期的に出力を生成する最も簡単な手段を提供します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Synthesis.SpeechSynthesizer.Speak" />
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancel">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancel (System.Speech.Synthesis.Prompt prompt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancel(class System.Speech.Synthesis.Prompt prompt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prompt" Type="System.Speech.Synthesis.Prompt" />
      </Parameters>
      <Docs>
        <param name="prompt">Speak 操作をキャンセルする対象のコンテンツ。</param>
        <summary>キューに置かれたメッセージの非同期合成の操作を取り消します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して非同期のキャンセルして、次の操作を聞くこと。  
  
-   内容、 <xref:System.String> によって指定された、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> メソッドです。  
  
-   内容、 <xref:System.Speech.Synthesis.PromptBuilder> によって指定された、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> メソッドです。  
  
-   内容、 <xref:System.String> SSML で指定されたを含む、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドです。  
  
 呼び出すと <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>, 、または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>, 、system.speech の違いを作成、 <xref:System.Speech.Synthesis.Prompt> オブジェクト、メソッドのパラメーターの内容を設定し、返す、 <xref:System.Speech.Synthesis.Prompt> オブジェクトです。 返されたのコピーを保持する場合 <xref:System.Speech.Synthesis.Prompt>, を渡すことができます <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A> で指定された会話の内容をキャンセルする、 <xref:System.String> または <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="SpeakAsyncCancelAll">
      <MemberSignature Language="C#" Value="public void SpeakAsyncCancelAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakAsyncCancelAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてキューに入っている、非同期、音声合成の操作をキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例の使用を表示する <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> 新しいプロンプトを読み上げられるように、非同期といえば、プロンプトをキャンセルします。 なお、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> ときにイベントが発生、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> 操作が取り消されました。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
using System.Threading;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the StateChanged event.  
      synth.StateChanged += new EventHandler<StateChangedEventArgs>(synth_StateChanged);  
  
      // Subscribe to the SpeakProgress event.  
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Subscribe to the SpeakCompleted event.  
      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  
  
      // Begin speaking a text string asynchronously.  
      synth.SpeakAsync("Speech is an effective and natural way for people to interact with applications, " +  
        "complementing or even replacing the use of mice, keyboards, controllers, and gestures.");  
  
      // Speak for four seconds.  
      Thread.Sleep(4000);  
  
      // Cancel the SpeakAsync operation and wait one second.  
      synth.SpeakAsyncCancelAll();  
      Thread.Sleep(1000);  
  
      // Speak a new text string.  
      synth.Speak("An urgent email message has arrived. Do you want to hear it?");  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write to the console when the SpeakAsync operation has been cancelled.  
    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  
    {  
      Console.WriteLine("\nThe SpeakAsync operation was cancelled!!");  
    }  
  
    // When it changes, write the state of the SpeechSynthesizer to the console.  
    static void synth_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      Console.WriteLine("\nSynthesizer State: {0}    Previous State: {1}\n", e.State, e.PreviousState);  
    }  
  
    // Write the text being spoken by the SpeechSynthesizer to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }      
  }    
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="SpeakCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakCompletedEventArgs&gt; SpeakCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するか、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 、プロンプトの講演が完了するとします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> を発生させる、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> イベントのいずれかの完了時に、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> または  <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドです。  
  
 <xref:System.Speech.Synthesis.SpeakCompletedEventArgs> クラスのプロパティを持たないし、からのデータを返さない、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> イベントです。 アプリケーションの作成者のイベント ハンドラーを記述するために用意されたこと、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> イベントです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Synthesis.SpeakCompletedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeakProgress">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakProgressEventArgs&gt; SpeakProgress" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakProgressEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>後に発生した、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 各プロンプトの 1 つの単語の講演を行っています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> のいずれかを使用して、プロンプトでの講演で、新しい単語ごとにこのイベントを発生させる、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, 、または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドです。 例と、イベントに関連付けられたデータの詳細については、次を参照してください。 <xref:System.Speech.Synthesis.SpeakProgressEventArgs>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="SpeakSsml">
      <MemberSignature Language="C#" Value="public void SpeakSsml (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SpeakSsml(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">メッセージを聞くこと SSML 文字列。</param>
        <summary>同期的に講演しています、 <see cref="T:System.String" /> SSML マークアップを格納しています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内容、 `textToSpeak` パラメーターを含める必要があります、 `speak` 要素に従っている必要があります、 [Speech Synthesis Markup Language \(SSML\) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763)します。 詳細については、「[Speech Synthesis Markup Language Reference](http://msdn.microsoft.com/ja-jp/0c51279e-84d2-4f73-a924-8832039abf94)」を参照してください。  
  
 SSML マークアップを含む文字列を非同期的に話すことを使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドです。 使用する <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> SSML マークアップが含まれていない文字列の言うと同期を開始します。  
  
 このメソッドの呼び出し中に、 <xref:System.Speech.Synthesis.SpeechSynthesizer> 次のイベントを発生させることができます。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>。 シンセサイザーの話し方の状態が変更されたときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>。 シンセサイザーが音声の生成を開始するときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>。 シンセサイザーはアルファベットまたは言語で音声認識の個別のサウンドを構成する文字の組み合わせに達するたびに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>。 語を話すたびに発生をシンセサイザーは完了します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>。 音声出力口または音声の生成に使用される顔筋肉の位置の変更を必要とするたびに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>。 シンセサイザーには、メッセージ内のブックマークが発生したときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>。 シンセサイザーの声が変更されたときに発生します。  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> は発生しません、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> イベントの処理中に、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> メソッドです。  
  
   
  
## 例  
 次の例では、日付を表示します。 1\/29\/2009、日付の月、日、年の順とします。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakSsml(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="SpeakSsmlAsync">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.Prompt SpeakSsmlAsync (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Synthesis.Prompt SpeakSsmlAsync(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.Prompt</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">メッセージを聞くこと SMML マークアップ。</param>
        <summary>非同期的に講演しています、 <see cref="T:System.String" /> SSML マークアップを格納しています。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内容、 `textToSpeak` パラメーターを含める必要があります、 `speak` 要素に従っている必要があります、 [Speech Synthesis Markup Language \(SSML\) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763)します。 詳細については、「[Speech Synthesis Markup Language Reference](http://msdn.microsoft.com/ja-jp/0c51279e-84d2-4f73-a924-8832039abf94)」を参照してください。  
  
 SSML マークアップを含む文字列を同期的に話すことを使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> メソッドです。 使用する <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> SSML マークアップが含まれていない文字列の非同期の講演を開始します。  
  
 このメソッドの呼び出し中に、 <xref:System.Speech.Synthesis.SpeechSynthesizer> 次のイベントを発生させることができます。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>。 シンセサイザーの話し方の状態が変更されたときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>。 シンセサイザーが音声の生成を開始するときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>。 シンセサイザーはアルファベットまたは言語で音声認識の個別のサウンドを構成する文字の組み合わせに達するたびに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>。 語を話すたびに発生をシンセサイザーは完了します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>。 音声出力口または音声の生成に使用される顔筋肉の位置の変更を必要とするたびに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>。 シンセサイザーには、メッセージ内のブックマークが発生したときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>。 シンセサイザーの声が変更されたときに発生します。  
  
-   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>。 シンセサイザー処理を終了するときに発生する <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> 操作します。  
  
 使用することを話すときにタスクを実行するアプリケーション dos が不要な場合、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> 同期的に音声を生成します。  
  
   
  
## 例  
  
```  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer();  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Build an SSML prompt in a string.  
      string str = "<speak version=\"1.0\"";  
      str += " xmlns=\"http://www.w3.org/2001/10/synthesis\"";  
      str += " xml:lang=\"en-US\">";  
      str += "<say-as type=\"date:mdy\"> 1/29/2009 </say-as>";  
      str += "</speak>";  
  
      // Speak the contents of the prompt asynchronously.  
      synth.SpeakSsmlAsync(str);  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="SpeakStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.SpeakStartedEventArgs&gt; SpeakStarted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.SpeakStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するか、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 、プロンプトの講演を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> のいずれかを使用して、プロンプトの処理が開始したときに、このイベントを発生させる、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, 、または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドです。  
  
 <xref:System.Speech.Synthesis.SpeakStartedEventArgs> クラスのプロパティを持たないし、からのデータを返さない、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> イベントです。 アプリケーションの作成者のイベント ハンドラーを記述するために用意されたこと、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> イベントです。  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.SynthesizerState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.SynthesizerState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.SynthesizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>状態を取得言うと、現在、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトです。</summary>
        <value>現在の話し方の状態を返す、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しい状態を取得する、 <xref:System.Speech.Synthesis.SpeechSynthesizer> 、変更があった後を使用して、 <xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A> のプロパティ、 <xref:System.Speech.Synthesis.StateChangedEventArgs> クラスです。  
  
   
  
## 例  
 次の例では、状態、 <xref:System.Speech.Synthesis.SpeechSynthesizer> 、実行時に、前後に、プロンプトを言うとします。  
  
```csharp  
using System;  
using System.Threading;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      SpeechSynthesizer synth = new SpeechSynthesizer() ;  
  
      // Configure the audio output.   
      synth.SetOutputToDefaultAudioDevice();  
  
      // Subscribe to the SpeakProgress event.         
      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
      // Write the state of the SpeechSynthesizer to the console.  
      Console.WriteLine("Current Synthesizer state: " + synth.State + "\n");  
  
      // Speak a string asynchronously.  
      synth.SpeakAsync("What is your favorite color?");  
  
      // Write the state of the SpeechSynthesizer to the console while it is speaking.  
      Thread.Sleep(1000);  
      Console.WriteLine("\n - Current Synthesizer state: " + synth.State + " - \n");  
  
      // Write the state of the SpeechSynthesizer to the console after it is done speaking.  
      Thread.Sleep(2000);  
      Console.WriteLine("\nCurrent Synthesizer state: " + synth.State);  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine(e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.StateChangedEventArgs&gt; StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.StateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.StateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するかの状態、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> このイベントを発生させるときに言うと、 <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A> 変更します。 例と、イベントに関連付けられたデータの詳細については、次を参照してください。 <xref:System.Speech.Synthesis.StateChangedEventArgs>します。  
  
 一時停止する音声合成を使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A> と <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="VisemeReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VisemeReachedEventArgs&gt; VisemeReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VisemeReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Viseme に達したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Viseme は、音素の発音口と面の基本的な位置です。 Visemes は、音素の視覚的表現です。  
  
 System.speech の違いは、英語 \(米国\)、対応する 1 つまたは複数の音素を 21 visemes をサポートします。<xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> 達すると新しい音素がある別の対応する viseme より前の音素に達したときにイベントが発生します。 いくつか visemes が 1 つ以上の音素を表すため、 <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> 以前音素として同じ viseme に対応する次の音素に達した場合、イベントは生成されません。 たとえば、話された単語「このゾーン」を <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> "this"の"s"と「ゾーン」に"z"のイベントが発生します。 ただし、 <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> "s"は"this"として同じ viseme に対応するため、「ゾーン」に"z"のイベントが発生しません。  
  
 21 SAPI 音素と英語 \(米国\) で viseme に対応する音素グループの一覧を次に示します。  
  
|Viseme|Phoneme\(s\)|  
|------------|------------------|  
|0|サイレント状態|  
|1|ae、ax、ah|  
|2|aa|  
|3|ao|  
|4|欄、よね、困った|  
|5|er|  
|6|y、iy、ih、ix|  
|7|w、ワシントン大学|  
|9|改行|  
|9|aw|  
|10|oy|  
|11|接続されて|  
|12|時|  
|13|r|  
|14|l|  
|15|s、z|  
|16|sh、ch、jh、zh|  
|17|th、dh|  
|18|f、v|  
|19|d、t、n|  
|20|k、g、ng|  
|21|p、b、m|  
  
 関連付けられているデータについては、 `VisemeReached` イベントを参照してください <xref:System.Speech.Synthesis.VisemeReachedEventArgs>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="Voice">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.VoiceInfo Voice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Synthesis.VoiceInfo Voice" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Voice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.VoiceInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の音声情報を取得、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトです。</summary>
        <value>現在の音声に関する情報を返す、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 初期化するとき、新しい <xref:System.Speech.Synthesis.SpeechSynthesizer>, 、既定のシステムの音声を使用します。 構成する、 <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクトがインストールされている音声合成の音声のいずれかを使用して、使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> または <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> メソッドです。 音声のインストールに関する情報を取得する、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドおよび <xref:System.Speech.Synthesis.VoiceInfo> クラスです。  
  
   
  
## 例  
 次の例のインスタンスを初期化する <xref:System.Speech.Synthesis.SpeechSynthesizer>し、現在の音声情報を取得します。  
  
```csharp  
using System;  
using System.IO;  
using System.Speech.Synthesis;  
using System.Speech.AudioFormat;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Get information about supported audio formats.  
        string AudioFormats = "";  
        foreach (SpeechAudioFormatInfo fmt in synth.Voice.SupportedAudioFormats)  
        {  
          AudioFormats += String.Format("{0}\n",  
          fmt.EncodingFormat.ToString());  
        }  
  
        // Write information about the voice to the console.  
        Console.WriteLine(" Name:          " + synth.Voice.Name);  
        Console.WriteLine(" Culture:       " + synth.Voice.Culture);  
        Console.WriteLine(" Age:           " + synth.Voice.Age);  
        Console.WriteLine(" Gender:        " + synth.Voice.Gender);  
        Console.WriteLine(" Description:   " + synth.Voice.Description);  
        Console.WriteLine(" ID:            " + synth.Voice.Id);  
        if (synth.Voice.SupportedAudioFormats.Count != 0)  
        {  
          Console.WriteLine(" Audio formats: " + AudioFormats);  
        }  
        else  
        {  
          Console.WriteLine(" No supported audio formats found");  
        }  
  
        // Get additional information about the voice.  
        string AdditionalInfo = "";  
        foreach (string key in synth.Voice.AdditionalInfo.Keys)  
        {  
          AdditionalInfo += String.Format("  {0}: {1}\n",  
            key, synth.Voice.AdditionalInfo[key]);  
        }  
  
        Console.WriteLine(" Additional Info - " + AdditionalInfo);  
        Console.WriteLine();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)" />
        <altmember cref="M:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices" />
        <altmember cref="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      </Docs>
    </Member>
    <Member MemberName="VoiceChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Synthesis.VoiceChangeEventArgs&gt; VoiceChange" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Synthesis.VoiceChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するかの声、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> 変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 例と、イベントに関連付けられているデータに関する情報については、次を参照してください。 <xref:System.Speech.Synthesis.VoiceChangeEventArgs>します。  
  
 音声を変更することができますが、 <xref:System.Speech.Synthesis.SpeechSynthesizer> のいずれかを使用、 <xref:System.Speech.Synthesis.PromptBuilder>の <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> メソッドまたは <xref:System.Speech.Synthesis.SpeechSynthesizer>の <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> または <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="" />
      </Docs>
    </Member>
    <Member MemberName="Volume">
      <MemberSignature Language="C#" Value="public int Volume { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Volume" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeechSynthesizer.Volume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の出力の量、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" /> オブジェクトです。</summary>
        <value>ボリュームを返す、 <see cref="T:System.Speech.Synthesis.SpeechSynthesizer" />, 、0 ~ 100 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例のボリュームの設定、 <xref:System.Speech.Synthesis.SpeechSynthesizer>のオーディオを合成の音声と WAV ファイルの出力です。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Set the volume of the SpeechSynthesizer's ouput.  
        synth.Volume = 60;  
  
        // Build a prompt containing recorded audio and synthesized speech.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendAudio("C:\\Test\\WelcomeToContosoRadio.wav");  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>