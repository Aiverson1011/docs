<Type Name="SpeakProgressEventArgs" FullName="System.Speech.Synthesis.SpeakProgressEventArgs">
  <TypeSignature Language="C#" Value="public class SpeakProgressEventArgs : System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeakProgressEventArgs extends System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeakProgressEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Synthesis.PromptEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" /> イベントからのデータを返します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンス <xref:System.Speech.Synthesis.SpeakProgressEventArgs> 場合は、作成、 <xref:System.Speech.Synthesis.SpeechSynthesizer> オブジェクト、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> イベントです。<xref:System.Speech.Synthesis.SpeechSynthesizer> のいずれかを使用して、プロンプトでの講演で、新しい単語ごとにこのイベントを発生させる、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, 、または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドです。  
  
 返されるデータは、\[音声合成のマークアップ言語 \(SSML\) コードを生成するに基づきます。 値は、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> 空白文字と、コードによって生成される SSML タグの内容が含まれます。  
  
   
  
## 例  
 次の例から提供されている情報 <xref:System.Speech.Synthesis.SpeakProgressEventArgs>します。 注方法 <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, 、<xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>, 、<xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, 、および <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A> メソッドに影響を与える、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> を追加して **\< p \>**, 、**\<\/p \>**, 、**\< s \>**, と **\<\/s \>** タグ生成される SSML をします。 また、「30%」、この番号の文字列 \(30%\) を読み上げるために各単語の 1 つの出力には 2 つのエントリがあります。<xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> と <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> エントリごとに同じで、"30% 文字を表すです。 ただし、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> 「30」単語の話し方と、"percent"反映して変更、 <xref:System.Speech.Synthesis.SpeechSynthesizer>です。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt containing a paragraph and two sentences.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.StartParagraph();  
        builder.StartSentence();  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.EndSentence();  
        builder.StartSentence();  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.EndSentence();  
        builder.EndParagraph();  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character postion to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("CharPos: {0}   CharCount: {1}   AudioPos: {2}    \"{3}\"",  
        e.CharacterPosition, e.CharacterCount, e.AudioPosition, e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベントのオーディオの位置を取得します。</summary>
        <value>オーディオ出力ストリームのイベントの位置を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> 数の話される方法に対応する単語の番号を正規化します。 たとえば、シンセサイザーは「4 1,000 分の 3」と「4003」数を話します。 生成、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> 話された単語を返します。 の各イベント、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> 単語ごとにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterCount">
      <MemberSignature Language="C#" Value="public int CharacterCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterCount" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベントが発生した直前の音声が word では、文字数を取得します。</summary>
        <value>イベントが発生した直前の音声が word では、文字数を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> 数の話される方法に対応する単語の番号を正規化します。 たとえば、シンセサイザーは「4 1,000 分の 3」と「4003」数を話します。 生成、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> 話された単語の各イベントです。 ただし、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> 3 つの単語の各プロパティは同じです。 ここで、プロンプトのテキストに「4003」数の文字数は 4 つです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterPosition">
      <MemberSignature Language="C#" Value="public int CharacterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>読み上げだけの単語の最初の文字の前に位置する、プロンプトの先頭から文字とスペースの数を取得します。</summary>
        <value>読み上げだけの単語の最初の文字の前に位置する、プロンプトの先頭から文字とスペースの数を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> 、それを囲む角かっこを含む XML タグ内の文字数が含まれています。 いずれかを使用する場合、 <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, 、<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, 、<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, 、<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, 、または <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> メソッド、内容が、開始タグと終了を含む SSML プロンプトに追加されます `speak` 要素。 開始 `speak` 要素は、82 文字のオフセットを追加し、スペースを <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> 、すべての単語と、プロンプトに含まれる文字。 たとえば、次のスニペットで、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> 82 は、"this"の最初の単語です。  
  
```csharp  
builder.AppendText("This is a test");  
Synthesizer.Speak(builder);  
```  
  
 上記の例では、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> "test"という単語の 92 ができます。 次のスニペットに、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> の単語の"test"は、23 文字以上 \(115\) ため開始 **\< prosody ピッチ \=「高」\>**  前にあるタグには、23 の文字とスペース \(2 つのエスケープ文字「\\」はカウントされない\) が含まれています。  
  
```csharp  
builder.AppendSsmlMarkup("This is a <prosody pitch=\"high\"> test </prosody>.");   
Synthesizer.Speak(builder);  
```  
  
 使用する場合、 <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> を開く、ファイルを指定することでプロンプトを使用するコンテンツを追加するメソッドを `xml` 宣言と `speak` ファイル内の要素が使用されるかはカウントされません。 開始した後、ファイルの最初の文字 `speak` タグなります 82 の位置にある場合は、プロンプトの最初のコンテンツ。  
  
 これに対して、文字列パラメーター、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドがのナレーション中にする前に追加 SSML プロンプトを取得できません。 したがって、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> 最初の単語の"this"では、次のスニペットは 0 です。  
  
```csharp  
Synthesizer.Speak(“This is a test.”);  
```  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> 数の話される方法に対応する単語の番号を正規化します。 たとえば、シンセサイザーは「4 1,000 分の 3」と「4003」数を話します。 生成、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> 3 話された単語の各イベントです。 ただし、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> 3 つの単語の各プロパティは同じです。 プロンプトのテキストに「4003」番号の最初の文字の前に位置することをお勧めします。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Speech.Synthesis.PromptBuilder> SSML 内容を使用する XML ファイルを追加および <xref:System.Xml.XmlReader>です。 例では、WAV ファイルを再生用に音声を出力します。 下のコード例、SSML を含む XML ファイルの内容が表示されます。  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a path to the file that contains SSML.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.ssml");  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress: {0} {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
  
```  
  
```xml  
<!-- The following are the contents of the file Weather.ssml.   
Note that because of the <p> tag and the space that follows it,   
that the character position of the first word "The" will be 86. -->  
  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <p> The weather forecast for today is partly cloudy with   
some sun breaks. </p>  
  
  <break strength="medium" />  
  
  <p> Tonight's weather will be cloudy with a 30% chance of   
showers. </p>  
  
</speak>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テキストが、イベントが発生したときに読み上げだけです。</summary>
        <value>イベントが発生したときに読み上げだけテキストを返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> 数の話される方法に対応する単語の番号を正規化します。 たとえば、シンセサイザーは「4 1,000 分の 3」と「4003」数を話します。 生成、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> 話された単語の各イベントです。 ただし、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> 3 つの単語の各プロパティは同じです。 プロンプトのテキスト「4003」することをお勧めします。  
  
   
  
## 例  
 次の例は、方法、 <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> イベントのレポート、 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> と <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> 数値を格納した文字列のプロパティです。  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("4003");  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress -    Character position:  {0}    Text:  {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>