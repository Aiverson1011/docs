<Type Name="PromptBuilder" FullName="System.Speech.Synthesis.PromptBuilder">
  <TypeSignature Language="C#" Value="public class PromptBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit PromptBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.PromptBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>空の <see cref="T:System.Speech.Synthesis.Prompt" /> オブジェクトを作成し、内容の追加、音声の選択、音声の属性の制御、および読み上げられる単語の発音の制御を行うメソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.PromptBuilder>, 、さまざまなコンテンツの種類 \(文字列またはファイル\) としてプレーン テキスト、SSML マークアップを含む、プロンプトに、オーディオの記録を追加するかも別 <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトです。  
  
 テキストを追加する、 <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトし、強調、レート、および、ボリュームのいずれかを使用するなど、音声の属性を必要に応じて制御、 <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> メソッドです。  使用してグループとして、音声の属性を制御することも、 <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> と <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> メソッドです。  
  
 テキストを追加し、読み上げられる内容を制御することができますを使用して発音がどのように、 <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, 、<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, 、<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>,  、<xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>, 、または <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> メソッドです。  
  
 オーバー ロードされたいずれかを使用して、プロンプトで現在選択されている語音声を変更する <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> メソッドを使用するかを指定する特定の音声の名前を付ける年齢や性別などの音声の特性が必要です。  
  
 音声の生成に、 <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトへの引数として渡すことができる、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> メソッドです。  
  
 詳細については、「[Constructing a Complex Prompt](http://msdn.microsoft.com/ja-jp/552cb356-7344-473e-b0f2-7a9983f8c1a4)」を参照してください。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> クラスの新しいインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例が、新たに作成 <xref:System.Speech.Synthesis.PromptBuilder> をインスタンス化し、テキスト文字列を追加します。  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("Hello world!");  
}  
```  
  
 次のマークアップは、それと同等の音声合成のマークアップ言語 \(SSML\) でを示しています \(`xml:lang` の必須の属性は、 `speak` 要素\)。  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PromptBuilder (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">特定のカルチャに関する情報を提供します。たとえば、カルチャの言語、カルチャの名前、書記体系、使用するカレンダー、日付形式や文字列の並べ替え方法などです。</param>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> クラスの新しいインスタンスを作成し、カルチャを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの値の設定、 <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティです。<xref:System.Speech.Synthesis.SpeechSynthesizer> で指定された言語をサポートするインストール済みの音声を選択しようとして、オブジェクト、 `culture` メッセージを処理するパラメーターです。 指定したカルチャに音声が見つかった場合は使用されます。 指定したカルチャに音声が見つからない場合は、既定の音声が使用されます。  
  
 指定された言語の単語を正しく発音、 `culture` パラメーターを言語をサポートする音声合成の音声合成 \(TTS\) エンジンをインストールする必要があります。 インストール済みの音声合成エンジンは、音声と呼ばれます。 に特定のカルチャの音声のインストールに関する情報を取得するには、使用、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドです。  
  
 Microsoft Windows と System.Speech API は、の値として有効なすべての言語\-国コードを受け入れる `culture`します。 Windows 7 に同梱されている TTS エンジンは、次の言語\-国コードをサポートします。  
  
-   en\-us \(英語\)。 英語 \(米国\)  
  
-   ZH\-CN します。 中国語 \(中国\)  
  
-   中国語 \(台湾\)。 中国語 \(台湾\)  
  
 "En"などの 2 文字の言語コードも許可されます。  
  
   
  
## 例  
 次の例を作成、 <xref:System.Speech.Synthesis.PromptBuilder> をインスタンス化し、指定の <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>です。  
  
```csharp  
using System.Speech.Synthesis;  
  
public void MySimpleText ()  
{  
    PromptBuilder builder = new PromptBuilder(new System.Globalization.CultureInfo("en-US"));  
    builder.AppendText("Hello world!");  
}  
```  
  
 次のマークアップは、同等の SSML を示しています。  
  
```xml  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">  
  Hello world!  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">オーディオ ファイルへの完全修飾パス。</param>
        <summary>指定されたオーディオ ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="audioFile">オーディオ ファイルの URI。</param>
        <summary>指定した URI のオーディオ ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class and then adds text to it, followed by an audio file.  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
    // Add a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendText("How are you today?");  
    builder.AppendAudio(new Uri ("http://www.speech.microsoft.com/ding.wav"));  
}  
```  
  
 The following markup shows the equivalent SSML markup.  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  How are you today?  
  <audio src="http://www.speech.microsoft.com/ding.wav" />  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendAudio">
      <MemberSignature Language="C#" Value="public void AppendAudio (Uri audioFile, string alternateText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendAudio(class System.Uri audioFile, string alternateText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioFile" Type="System.Uri" />
        <Parameter Name="alternateText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="audioFile">オーディオ ファイルの URI。</param>
        <param name="alternateText">オーディオを表す代替テキストを含む文字列。</param>
        <summary>指定されたオーディオ ファイルと代替テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーディオ ファイルを再生できない場合、音声合成エンジンは代替テキストを話します。  
  
   
  
## 例  
 次の例では、追加のオーディオ ファイルを <xref:System.Speech.Synthesis.PromptBuilder> をインスタンス化し、テキスト、オーディオ ファイルを再生できない場合の話を指定します。  
  
```csharp  
using System.Speech.PromptBuilder;  
  
public void SimpleConcatenation()  
{  
  
    // Concatenate a prompt fragment from a .wav file.  
    PromptBuilder builder = new PromptBuilder ();  
    builder.AppendAudio(new Uri ("C:\\OnHold.wav"), "Your call will be answered in the order it was received");  
}  
```  
  
 次のマークアップは、同等の SSML マークアップを示します。  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis"  
       xmlns:ms="http://www.microsoft.com/speech/synthesis" xml:lang="en">  
  
  <audio src="C:\OnHold.wav"> Your call will be answered in the order it was received. </audio>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBookmark">
      <MemberSignature Language="C#" Value="public void AppendBookmark (string bookmarkName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBookmark(string bookmarkName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bookmarkName">追加されるブックマークの名前を含む文字列。</param>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトにブックマークを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声複合エンジンが生成、 <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> イベントのいずれかを使用して、プロンプトを話すときに、ブックマークに到達した場合、 <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, 、<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, 、または <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> メソッドです。  
  
   
  
## 例  
 次の例では、2 つのブックマークが含まれていて、出力を再生用の WAV ファイルを送信するプロンプトを作成します。 ハンドラー、 <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> イベントがコンソールにイベントが発生したときに、オーディオのストリーム内での位置およびブックマークの名前を書き込みます。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt and append bookmarks.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.AppendBookmark("Daytime forecast");  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.AppendBookmark("Nightime forecast");  
  
        // Add a handler for the BookmarkReached event.  
        synth.BookmarkReached +=  
          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write the name and position of the bookmark to the console.  
    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  
    {  
      Console.WriteLine("Bookmark ({0}) reached at: {1} ",  
        e.Bookmark, e.AudioPosition);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに中断を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、中断の期間を指定しません。<xref:System.Speech.Synthesis.SpeechSynthesizer> 言語のコンテキストに基づいて期間の値が決定されます。  
  
   
  
## 例  
 次の例では、改行で区切られた 2 つの文を含むメッセージを構築し、コンピューターの既定のオーディオ デバイスには、プロンプト講演を行っています。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45.");  
        builder.AppendBreak();  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:30, and 9:15.");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (System.Speech.Synthesis.PromptBreak strength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.Speech.Synthesis.PromptBreak strength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strength" Type="System.Speech.Synthesis.PromptBreak" />
      </Parameters>
      <Docs>
        <param name="strength">中断の期間と次の増加する値を示します:</param>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに中断を追加し、強度 \(継続時間\) を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Speech.Synthesis.PromptBreak> 列挙体は、単語の境界間の分離間隔 \(一時停止\) の範囲を表します。 音声複合エンジンでは、間隔の正確な時間を決定します。 中断が要求されると、これらの値の 1 つは音声合成 \(TTS\) エンジンで、これらの値と対応する 1 ミリ秒区切りの値の間のマッピングを格納する渡されます。  
  
   
  
## 例  
 次の例では、改行で区切られた 2 つの文を含むメッセージを構築し、出力を WAV ファイルを再生用に送信します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(PromptBreak.Medium);  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendBreak">
      <MemberSignature Language="C#" Value="public void AppendBreak (TimeSpan duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendBreak(valuetype System.TimeSpan duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="duration">ティック単位の時間 \(1 ティックは 100 ナノ秒\)。</param>
        <summary>指定された継続時間の中断を <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一時停止または単語間の他の挿入する韻律の境界を制御する、区切りを使用できます。 改行はオプションです。 休憩が存在しない場合、シンセサイザーは言語的なコンテキストに応じて単語間の中断を決定します。  
  
   
  
## 例  
 次の例では、15,000, 000 のタイマー刻み \(1.5 秒\) の改行で区切られた 2 つの文を含むメッセージを構築し、コンピューターの既定のオーディオ デバイスには、プロンプト講演を行っています。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt with two sentences separated by a break.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45");  
        builder.AppendBreak(new TimeSpan(15000000));  
        builder.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendPromptBuilder">
      <MemberSignature Language="C#" Value="public void AppendPromptBuilder (System.Speech.Synthesis.PromptBuilder promptBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendPromptBuilder(class System.Speech.Synthesis.PromptBuilder promptBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promptBuilder" Type="System.Speech.Synthesis.PromptBuilder" />
      </Parameters>
      <Docs>
        <param name="promptBuilder">追加するコンテンツ。</param>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトを別の <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、2 つ作成されます <xref:System.Speech.Synthesis.PromptBuilder> をインスタンス化し、3 番目に追加し、 <xref:System.Speech.Synthesis.PromptBuilder>です。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\showtimes.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\showtimes.wav");  
  
        // Build child prompts.  
        PromptBuilder theatreA = new PromptBuilder();  
        theatreA.AppendText(  
          "Tonight's movie showings in theater A are at 5:45, 7:15, and 9:30");  
        theatreA.AppendBreak(PromptBreak.Large);  
        PromptBuilder theatreB = new PromptBuilder();  
        theatreB.AppendText(  
          "Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15");  
  
        // Build the parent prompt and append the two child prompts.  
        PromptBuilder showTimes = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        showTimes.AppendText(  
          "The following are the show times for tonight's movies:");  
        showTimes.AppendPromptBuilder(theatreA);  
        showTimes.AppendPromptBuilder(theatreB);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(showTimes);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">追加する SSML ファイルへの完全修飾パス。</param>
        <summary>指定したパスの SSML ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The SSML file must be an XML\-format file that conforms to the [Speech Synthesis Markup Language \(SSML\) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification.  
  
 You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.  
  
   
  
## 例  
 The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml("c:\\test\\Weather.ssml");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 The following is the SSML file that the preceding example references.  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (Uri ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Uri ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="ssmlFile">追加する SSML ファイルの完全修飾 URI。</param>
        <summary>指定した URI の SSML ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The SSML file must be an XML\-format file that conforms to the [Speech Synthesis Markup Language \(SSML\) Version 1.0](http://www.w3.org/TR/speech-synthesis/) specification.  
  
 You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.  
  
   
  
## 例  
 The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> method.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a file that defines an SSML prompt.  
        PromptBuilder ssmlFile = new PromptBuilder();  
        ssmlFile.AppendSsml(new Uri("c:\\test\\Weather.ssml"));  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(ssmlFile);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 The following is the SSML file that the preceding example references.  
  
```xml  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  
  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsml">
      <MemberSignature Language="C#" Value="public void AppendSsml (System.Xml.XmlReader ssmlFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsml(class System.Xml.XmlReader ssmlFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlFile" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="ssmlFile">追加する XML ファイルの完全修飾名。</param>
        <summary>SSML プロンプトを参照する <c>XMLReader</c> オブジェクトを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The SSML file must be an XML\-format file that conforms to the [Speech Synthesis Markup Language \(SSML\) Version 1.0](http://www.w3.org/TR/speech-synthesis/) specification.  
  
 You can also append SSML markup as a string using <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.  
  
   
  
## 例  
 The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from an <xref:System.Xml.XmlReader> object that references a file containing Speech Synthesis Markup Language \(SSML\) markup.  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Create the path to the SSML file.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.xml");  
        PromptBuilder builder = null;  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder = new PromptBuilder();  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSsmlMarkup">
      <MemberSignature Language="C#" Value="public void AppendSsmlMarkup (string ssmlMarkup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendSsmlMarkup(string ssmlMarkup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ssmlMarkup" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ssmlMarkup">SSML マークアップを格納している文字列。</param>
        <summary>SSML マークアップを含む指定された文字列を <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 SSML マークアップを追加するときに、適切なエスケープ文字を使用する必要があります。 値を囲む引用符の前に円記号に注目してください、 `interpret-as` 属性は、次の例。  
  
```csharp  
builder.AppendSsmlMarkup("<say-as interpret-as = \"characters\"> chair </say-as>");  
```  
  
> [!NOTE]
>  渡す引数として使用される文字列 <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> 含めることはできません、 `speak` 要素。  
  
 使用する場合 <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> でインライン発音を指定する、 `phoneme` 要素、現在の音声認識エンジンにサポートを提供する、次の音声アルファベットのいずれかからの電話を使用することができます。  
  
-   国際音声記号 \(IPA\)  
  
-   ユニバーサル電話設定 \(UPS\)  
  
-   SAPI 電話の設定  
  
 SSML 準拠音声認識エンジンは、IPA から電話を話します。  
  
 いずれかを使用して、SSML マークアップを含むファイルを追加することも、 <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> メソッドです。 マークアップ言語で書式設定されていないを読み上げるテキストを追加するには、いずれかの操作を使用して、 <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, 、<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, 、<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, 、または <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">読み上げるテキストを含む文字列。</param>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加されるテキストを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 To append text that is formatted as SSML markup language, use <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.  
  
   
  
## 例  
 The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends a text string using the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> method.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and append a text string.  
        PromptBuilder speakText = new PromptBuilder();  
        speakText.AppendText("Say the name of the song you want to hear");  
  
        // Speak the contents of the prompt.  
        synth.Speak(speakText);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptEmphasis emphasis);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptEmphasis emphasis) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="emphasis" Type="System.Speech.Synthesis.PromptEmphasis" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">読み上げるテキストを含む文字列。</param>
        <param name="emphasis">テキストに適用する強調またはストレスの値。</param>
        <summary>テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストの強調の度合いを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Windows での音声合成エンジンは、この時点で強調パラメーターをサポートしていません。 強調パラメーターの値を設定する生成されない合成の音声出力の音が聞こえる変更します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptRate rate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptRate rate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="rate" Type="System.Speech.Synthesis.PromptRate" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">読み上げるテキストを含む文字列。</param>
        <param name="rate">テキストに適用する話し速度の値。</param>
        <summary>テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストの読み上げ速度を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例を作成し、 <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトをテキスト文字列を追加します。 例では、 <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> の注文の内容を列挙する追加される文字列の評価、低速の講演を指定します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder speakRate = new PromptBuilder();  
        speakRate.AppendText("Your order for");  
        speakRate.AppendText("one kitchen sink and one faucet", PromptRate.Slow);  
        speakRate.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(speakRate);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendText">
      <MemberSignature Language="C#" Value="public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptVolume volume);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendText(string textToSpeak, valuetype System.Speech.Synthesis.PromptVolume volume) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="volume" Type="System.Speech.Synthesis.PromptVolume" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">読み上げるテキストを含む文字列。</param>
        <param name="volume">テキストに適用する音量 \(大きさ\) の値。</param>
        <summary>テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストの音量を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.PromptVolume.Default> 準 <xref:System.Speech.Synthesis.PromptVolume> は、同じデータのフルボリュームとして <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>します。 その他の設定は、ボリューム全体を基準とした音声出力の音量を調節します。  
  
   
  
## 例  
 次の例では、 <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A> 音量設定を指定する方法を <xref:System.Speech.Synthesis.SpeechSynthesizer> 音声出力に適用する必要があります。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Build a prompt that applies different volume settings.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("This is the default speaking volume.", PromptVolume.Default);  
        builder.AppendBreak();  
        builder.AppendText("This is the extra loud speaking volume.", PromptVolume.ExtraLoud);  
        builder.AppendBreak();  
        builder.AppendText("This is the medium speaking volume.", PromptVolume.Medium);  
  
        // Speak the prompt.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithAlias">
      <MemberSignature Language="C#" Value="public void AppendTextWithAlias (string textToSpeak, string substitute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithAlias(string textToSpeak, string substitute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="substitute" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">テキスト表現を含む文字列。</param>
        <param name="substitute">読み上げるテキストを含む文字列。</param>
        <summary>テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、追加したテキストの代わりに読み上げられるエイリアスのテキストを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これにより、音声およびプロンプトの記述形式を格納するドキュメントです。 たとえば、記述形式でした SAPI などの頭字語でき頭字語は、このケース音声アプリケーション プログラミング インターフェイスでの展開されたテキストが読み上げ形式になります。  
  
   
  
## 例  
 次の例に、テキスト文字列 \("音声合成 Markup Language"\) とそのエイリアス \("SSML"\) を追加、 <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトです。 シンセサイザーには、"S S M L"と発音します。  
  
```  
PromptBuilder alias = new PromptBuilder();  
alias.AppendTextWithAlias("Speech Synthesis Markup Language","SSML");   
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, System.Speech.Synthesis.SayAs sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, valuetype System.Speech.Synthesis.SayAs sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.Speech.Synthesis.SayAs" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">読み上げるテキストを含む文字列。</param>
        <param name="sayAs">テキストのコンテンツ タイプ。</param>
        <summary>テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、<see cref="T:System.Speech.Synthesis.SayAs" /> 列挙型のメンバーを使用してコンテンツ タイプを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されたコンテンツの種類 `sayAs` 発音の内容については、音声合成エンジンにガイダンスを提供できる `textToSpeak`です。  
  
   
  
## 例  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and define the data types for some of the added strings.  
        PromptBuilder sayAs = new PromptBuilder();  
        sayAs.AppendText("Your");  
        sayAs.AppendTextWithHint("1st", SayAs.NumberOrdinal);  
        sayAs.AppendText("request was for");  
        sayAs.AppendTextWithHint("1", SayAs.NumberCardinal);  
        sayAs.AppendText("room, on");  
        sayAs.AppendTextWithHint("10/19/2012,", SayAs.MonthDayYear);  
        sayAs.AppendText("with early arrival at");  
        sayAs.AppendTextWithHint("12:35pm", SayAs.Time12);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(sayAs);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithHint">
      <MemberSignature Language="C#" Value="public void AppendTextWithHint (string textToSpeak, string sayAs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithHint(string textToSpeak, string sayAs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="sayAs" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">読み上げるテキストを含む文字列。</param>
        <param name="sayAs">テキストのコンテンツ タイプ。</param>
        <summary>テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストのコンテンツ タイプを指定する <see cref="T:System.String" /> を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用するには記載されていないコンテンツの種類を指定する、 <xref:System.Speech.Synthesis.SayAs> 列挙します。 ただし、TTS エンジンでは、指定したパラメーターをサポートする必要があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendTextWithPronunciation">
      <MemberSignature Language="C#" Value="public void AppendTextWithPronunciation (string textToSpeak, string pronunciation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendTextWithPronunciation(string textToSpeak, string pronunciation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textToSpeak" Type="System.String" />
        <Parameter Name="pronunciation" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textToSpeak">言語の従来のアルファベットを使用した単語の記述形式を含む文字列。</param>
        <param name="pronunciation">国際音声記号 \(IPA\) の音素を含む文字列。</param>
        <summary>テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストの発音を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シンセサイザー講演の内容、 `pronunciation` パラメーターには、コンテンツではなく、 `textToSpeak` パラメーター。  
  
 発音でインラインで指定のプロンプトは、単語の個々 のオカレンスにのみ適用され、音声認識エンジンまたは、現在アクティブな辞書のいずれかの発音をオーバーライドします。 通常、既存の単語の発音をカスタムまたは音声複合エンジン発音がだけでなく想定される適切な名前などの特殊な単語の発音インライン発音が使用されます。  
  
 国際音声記号 \(IPA\) からの電話では、インライン発音を指定する必要があります。 スマート フォンは、文字または音声の個別のサウンドを表す文字です。 音声認識エンジンに準拠している、 [Speech Synthesis Markup Language \(SSML\) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) 仕様は、IPA から電話を発音します。 その他の音声のアルファベットを使用してインライン発音を指定するを参照してください。 <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>します。  
  
 IPA を公開、 [chart](http://go.microsoft.com/fwlink/?LinkId=58362) をその電話を一覧表示し、Unicode の数字にマッピングします。  
  
 IPA アルファベット順で一部の電話には、ラテン語アルファベット文字と同じ表現があります。 そのような場合は、ラテン語の文字を入力し、スマート フォンの適切な表現を作成することができます。 テキストでよく使用されるラテン文字によって表される IPA 電話設定のいくつかの携帯電話の可能性があります、ラテン語の文字を入力するだけが必要な正確な IPA 電話で生成されません。 としてコードに表示される IPA アルファベットの必要性には、その他の電話にアンパサンド \(&\)、シャープ記号で構成される参照の文字 \(\#\)、セミコロン \(;\) で後にすべての 16 進数または 10 進数、必要な電話番号の Unicode 番号です。 例、schwa \(および \#x10 0259;\) で表されます `&#x0259;`します。  
  
 複数の単語の発音を新規またはカスタムを追加、たとえば express 地域の言語仕様に、または適切な名前または教育や医療の分野に固有であるボキャブラリを追加するには、ビルド、辞書に追加、 <xref:System.Speech.Synthesis.SpeechSynthesizer> を使用して <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>します。  
  
   
  
## 例  
 次の例は、の新しいインスタンスを初期化、 <xref:System.Speech.Synthesis.PromptBuilder> クラスです。 そして、追加、テキスト文字列「自分の名前は」のインスタンスにします。 最後に、適切な名前"DuBois"を含む文字列を追加し、名前の発音を指定します。  
  
```csharp  
public void ProperName()  
{  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("My name is");  
  
    // Add a proper name and its pronunciation.  
    builder.AppendTextWithPronunciation("DuBois", "duˈbwɑ");     
}  
```  
  
 次のマークアップは、SSML を示しています。 この <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトが生成されます。  
  
```xml  
<speak xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-us">  
  My name is <phoneme ph="duˈbwɑ"> DuBois </phoneme>  
</speak>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearContent">
      <MemberSignature Language="C#" Value="public void ClearContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ClearContent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトから内容を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトのカルチャ情報を取得または設定します。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> で指定された言語をサポートするインストール済みの音声を選択しようとして、オブジェクト、 <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> メッセージを処理するプロパティです。 指定したカルチャに音声が見つかった場合は使用されます。 指定したカルチャに音声が見つからない場合は、既定の音声が使用されます。  
  
 使用してコンテンツのセクションでは個別の入力を求める内でも指定する場合、カルチャ、 <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, 、<xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, 、および <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> メソッドです。 上記のメソッドのいずれかを使用してコンテンツの一部がオーバーライドに指定されたカルチャ、 <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティの中に実際には、および <xref:System.Speech.Synthesis.SpeechSynthesizer> で指定された言語をサポートするインストール済みの音声を選択しようとしては、 `culture` メソッドのパラメーターです。  
  
 指定された言語の単語を正しく発音、 <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティには、言語をサポートする音声合成の音声合成 \(TTS\) エンジンをインストールする必要があります。 インストール済みの音声合成エンジンは、音声と呼ばれます。 に特定のカルチャの音声のインストールに関する情報を取得するには、使用、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドです。  
  
 Microsoft Windows と System.Speech API は、の値として有効なすべての言語\-国コードを受け入れる `culture`します。 Windows 7 に同梱されている TTS エンジンは、次の言語\-国コードをサポートします。  
  
-   en\-us \(英語\)。 英語 \(米国\)  
  
-   ZH\-CN します。 中国語 \(中国\)  
  
-   中国語 \(台湾\)。 中国語 \(台湾\)  
  
 "En"などの 2 文字の言語コードも許可されます。  参照してください [Language Identifier Constants and Strings](http://msdn.microsoft.com/library/dd318693\(VS.85\).aspx) 言語コードの包括的な一覧についてです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndParagraph">
      <MemberSignature Language="C#" Value="public void EndParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndParagraph" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの段落の終わりを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs. See <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A> for an example.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSentence">
      <MemberSignature Language="C#" Value="public void EndSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndSentence" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの文の終わりを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Long prompts can be rendered more like human speech if they are broken into sentences and paragraphs. See <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> for an example.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndStyle">
      <MemberSignature Language="C#" Value="public void EndStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトのスタイルの終わりを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> method stops the current speaking style. The speaking style reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> method initiated a new speaking style. See <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> for an example.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndVoice">
      <MemberSignature Language="C#" Value="public void EndVoice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndVoice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.EndVoice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声使用の終わりを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A> method stops the use of the current voice for speech output. The voice reverts to the setting that was in effect before the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> method initiated a new voice.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.PromptBuilder.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> が空かどうかを取得します。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartParagraph">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの段落の開始を指定し、オプションで言語を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 長いプロンプトを表示できます人間の音声のように、文章や段落に分類する場合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの段落の開始を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 長いプロンプトを表示できます人間の音声のように、文章や段落に分類する場合。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトは、コンテンツを追加して、段落や文にコンテンツを整理します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartParagraph">
      <MemberSignature Language="C#" Value="public void StartParagraph (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartParagraph(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">特定のカルチャに関する情報を提供します。たとえば、カルチャの言語、カルチャの名前、書記体系、使用するカレンダー、日付形式や文字列の並べ替え方法などです。</param>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの指定されたカルチャの段落の開始を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 長いプロンプトを表示できます人間の音声のように、文章や段落に分類する場合。  
  
 `culture` 段落のパラメーターとは異なる、 <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> のプロパティ、 <xref:System.Speech.Synthesis.PromptBuilder> それを含むオブジェクト。 値を実際には、while、 `culture` パラメーターはオーバーライドされます、 <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティです。<xref:System.Speech.Synthesis.SpeechSynthesizer> で指定された言語をサポートするインストール済みの音声を選択しようとしてが、 `culture` 段落を読み上げるためにパラメーター。 指定したカルチャに音声が見つかった場合は使用されます。 指定したカルチャに音声が見つからない場合は、既定の音声が使用されます。 指定された音声の使用を停止する <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, 、呼び出す <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>します。  
  
 指定された言語の単語を正しく発音、 `culture` パラメーターを言語をサポートする音声合成の音声合成 \(TTS\) エンジンをインストールする必要があります。 インストール済みの音声合成エンジンは、音声と呼ばれます。 に特定のカルチャの音声のインストールに関する情報を取得するには、使用、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドです。  
  
 Microsoft Windows と System.Speech API は、の値として有効なすべての言語\-国コードを受け入れる `culture`します。 Windows 7 に同梱されている TTS エンジンは、次の言語\-国コードをサポートします。  
  
-   en\-us \(英語\)。 英語 \(米国\)  
  
-   ZH\-CN します。 中国語 \(中国\)  
  
-   中国語 \(台湾\)。 中国語 \(台湾\)  
  
 "En"などの 2 文字の言語コードも許可されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartSentence">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの文の開始を指定し、オプションで言語を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 長いプロンプトを表示できます人間の音声のように、文章や段落に分類する場合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの文の開始を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 長いプロンプトを表示できます人間の音声のように、文章や段落に分類する場合。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトは、コンテンツを追加して、段落や文にコンテンツを整理します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content as paragraphs and sentences.  
        PromptBuilder parSent = new PromptBuilder();  
        parSent.StartParagraph();  
        parSent.StartSentence();  
        parSent.AppendText("Introducing the sentence element.");  
        parSent.EndSentence();  
        parSent.StartSentence();  
        parSent.AppendText("You can use it to mark individual sentences.");  
        parSent.EndSentence();  
        parSent.EndParagraph();  
        parSent.StartParagraph();  
        parSent.AppendText("Another simple paragraph. Sentence structure in this paragraph" +  
          "is not explicitly marked.");  
        parSent.EndParagraph();  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(parSent);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartSentence">
      <MemberSignature Language="C#" Value="public void StartSentence (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSentence(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">特定のカルチャに関する情報を提供します。たとえば、カルチャの言語、カルチャの名前、書記体系、使用するカレンダー、日付形式や文字列の並べ替え方法などです。</param>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの指定されたカルチャの文の開始を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 長いプロンプトを表示できます人間の音声のように、文章や段落に分類する場合。  
  
 `culture` 文のパラメーターとは異なる、 `culture` 、センテンスを含む段落のパラメーターまたは <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> のプロパティ、 <xref:System.Speech.Synthesis.PromptBuilder> 、それを含むオブジェクト。  
  
 値を実際には、while、 `culture` パラメーターはオーバーライドされます、 <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティおよび `culture` 、センテンスを含む段落のパラメーターです。<xref:System.Speech.Synthesis.SpeechSynthesizer> で指定された言語をサポートするインストール済みの音声を選択しようとしてが、 `culture` 文を読み上げるためにパラメーター。 指定したカルチャに音声が見つかった場合は使用されます。 指定したカルチャに音声が見つからない場合は、既定の音声が使用されます。 指定された音声の使用を停止する <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, 、呼び出す <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>します。  
  
 指定された言語の単語を正しく発音、 `culture` パラメーターを言語をサポートする音声合成の音声合成 \(TTS\) エンジンをインストールする必要があります。 インストール済みの音声合成エンジンは、音声と呼ばれます。 に特定のカルチャの音声のインストールに関する情報を取得するには、使用、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドです。  
  
 Microsoft Windows と System.Speech API は、の値として有効なすべての言語\-国コードを受け入れる `culture`します。 Windows 7 に同梱されている TTS エンジンは、次の言語\-国コードをサポートします。  
  
-   en\-us \(英語\)。 英語 \(米国\)  
  
-   ZH\-CN します。 中国語 \(中国\)  
  
-   中国語 \(台湾\)。 中国語 \(台湾\)  
  
 "En"などの 2 文字の言語コードも許可されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartStyle">
      <MemberSignature Language="C#" Value="public void StartStyle (System.Speech.Synthesis.PromptStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartStyle(class System.Speech.Synthesis.PromptStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="System.Speech.Synthesis.PromptStyle" />
      </Parameters>
      <Docs>
        <param name="style">開始するスタイル。</param>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトのスタイルの開始を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> メソッドには、 <xref:System.Speech.Synthesis.PromptStyle> オブジェクトを引数として。 プロパティを使用する、 <xref:System.Speech.Synthesis.PromptStyle> 強調したり、読み上げ速度、音声、スタイルが有効な状態を出力に適用する音量 \(大きさ\) を設定するオブジェクト。 現在のスタイルを使用してを停止する呼び出し、 <xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> メソッドです。  
  
> [!NOTE]
>  -   Windows での音声合成エンジンは、この時点で強調パラメーターをサポートしていません。 強調パラメーターの値を設定する生成されない合成の音声出力の音が聞こえる変更します。  
> -   <xref:System.Speech.Synthesis.PromptVolume.Default> 準 <xref:System.Speech.Synthesis.PromptVolume> は、同じデータのフルボリュームとして <xref:System.Speech.Synthesis.PromptVolume.ExtraLoud>します。 その他の設定は、ボリューム全体を基準とした音声出力の音量を調節します。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Speech.Synthesis.PromptBuilder> オブジェクトをテキスト文字列を追加します。 例では、 <xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> の注文の内容を列挙する追加される文字列の評価、低速の講演を指定します。  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartVoice">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するように指示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声では、インストール済みの音声合成エンジンを表します。 使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラス名との属性を取得するには、選択可能な音声合成 \(TTS\) 音声がインストールされています。  
  
 アプリケーションを呼び出すと <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, 、メソッドは、最低限の条件を満たしてレジストリで検出された音声のことを確認します。 検証が失敗したすべての音声を <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> 設定、 <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティを `False`します。 アプリケーションは、のいずれかを呼び出すことはできません、 <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> 、音声のメソッドが <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティは `False`です。 通常、アプリケーションでは、音声を設定しない <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">特定のカルチャに関する情報を提供します。たとえば、カルチャの言語、カルチャの名前、書記体系、使用するカレンダー、日付形式や文字列の並べ替え方法などです。</param>
        <summary>シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、使用する音声のカルチャを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `culture` パラメーターを <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> とは異なる、 <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> のプロパティ、 <xref:System.Speech.Synthesis.PromptBuilder> それを含むオブジェクト。  値を実際には、while、 `culture` パラメーターはオーバーライドされます、 <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> プロパティです。<xref:System.Speech.Synthesis.SpeechSynthesizer> で指定された言語をサポートするインストール済みの音声を選択しようとしてが、 `culture` で囲まれたコンテンツを読み上げるためにパラメーター <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> と <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>です。 指定したカルチャに音声が見つかった場合は使用されます。 指定したカルチャに音声が見つからない場合は、既定の音声が使用されます。 指定された音声の使用を停止する <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, 、呼び出す <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>します。  
  
 指定された言語の単語を正しく発音、 `culture` パラメーターを言語をサポートする音声合成の音声合成 \(TTS\) エンジンをインストールする必要があります。 インストール済みの音声合成エンジンは、音声と呼ばれます。 に特定のカルチャの音声のインストールに関する情報を取得するには、使用、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドです。  
  
 Microsoft Windows と System.Speech API は、の値として有効なすべての言語\-国コードを受け入れる `culture`します。 Windows 7 に同梱されている TTS エンジンは、次の言語\-国コードをサポートします。  
  
-   en\-us \(英語\)。 英語 \(米国\)  
  
-   ZH\-CN します。 中国語 \(中国\)  
  
-   中国語 \(台湾\)。 中国語 \(台湾\)  
  
 "En"などの 2 文字の言語コードも許可されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
      </Parameters>
      <Docs>
        <param name="gender">使用する音声の性別。</param>
        <summary>シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、使用する音声の性別を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラス名との属性を取得するには、選択可能な音声合成 \(TTS\) 音声がインストールされています。  
  
 指定された音声の使用を停止する <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> 呼び出す <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceInfo voice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(class System.Speech.Synthesis.VoiceInfo voice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voice" Type="System.Speech.Synthesis.VoiceInfo" />
      </Parameters>
      <Docs>
        <param name="voice">使用する音声の条件。</param>
        <summary>シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、新しい音声の条件を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラス名との属性を取得するには、選択可能な音声合成 \(TTS\) 音声がインストールされています。  
  
 指定された音声の使用を停止する <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> 呼び出す <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">使用する音声の名前。</param>
        <summary>シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、使用する音声の名前を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声のインストールに関する情報を取得するには、いずれかを使用、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドです。  
  
 指定された音声の使用を停止する <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> 呼び出す <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
      </Parameters>
      <Docs>
        <param name="gender">使用する新しい音声の性別。</param>
        <param name="age">使用する音声の年齢。</param>
        <summary>シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、新しい音声の性別と年齢を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラス名との属性を取得するには、選択可能な音声合成 \(TTS\) 音声がインストールされています。  
  
 指定された音声の使用を停止する <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> 呼び出す <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVoice">
      <MemberSignature Language="C#" Value="public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartVoice(valuetype System.Speech.Synthesis.VoiceGender gender, valuetype System.Speech.Synthesis.VoiceAge age, int32 voiceAlternate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gender" Type="System.Speech.Synthesis.VoiceGender" />
        <Parameter Name="age" Type="System.Speech.Synthesis.VoiceAge" />
        <Parameter Name="voiceAlternate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="gender">使用する音声の性別。</param>
        <param name="age">使用する音声の年齢。</param>
        <param name="voiceAlternate">複数の音声が <c>gender</c> と <c>age</c> のパラメーターに一致するときに、望ましい音声を指定する整数。</param>
        <summary>シンセサイザーに <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトの音声を変更するよう指示し、性別、年齢、および指定した性別と年齢に一致する適切な音声を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声複合エンジンは、指定したパラメーターを検索し、カウントが音声を返します一致項目をカウント、 `voiceAlternate` パラメーター。  
  
 使用して、 <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> メソッドと <xref:System.Speech.Synthesis.VoiceInfo> クラス名との属性を取得するには、選択可能な音声合成 \(TTS\) 音声がインストールされています。  
  
 指定された音声の使用を停止する <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> 呼び出す <xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)" />
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public string ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.PromptBuilder.ToXml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトから生成される SSML を返します。</summary>
        <returns>単一行として <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトから生成される SSML を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Synthesis.PromptBuilder.ToXml%2A> メソッドが任意の方法で返される SSML を書式設定操作を行わない。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Speech.Synthesis.PromptBuilder> オブジェクト、テキストを追加し、プロンプトの SSML 相当をメッセージの内容を話し始める前にコンソールに出力します。  
  
```csharp  
  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a PromptBuilder object and add content.  
        PromptBuilder style = new PromptBuilder();  
        style.AppendText("Your order for");  
        style.StartStyle(new PromptStyle(PromptRate.Slow));  
        style.AppendText("one kitchen sink and one faucet");  
        style.EndStyle();  
        style.AppendText("has been confirmed.");  
  
        // Write the contents of the PromptBuilder object to the console as  
        // an SSML-compatible XML file.  
        string myXml = style.ToXml();  
        Console.WriteLine("This is the SSML equivalent of the PromptBuilder: \n\n" + myXml);  
  
        // Speak the contents of the SSML prompt.  
        synth.Speak(style);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendTextWithHint">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加し、テキストのコンテンツ タイプを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AppendSsml">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>SSML ファイルを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> クラスの新しいインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AppendBreak">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトのコンテンツに中断 \(一時停止\) を入れます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AppendText">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>テキストを <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AppendAudio">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Speech.Synthesis.PromptBuilder" /> オブジェクトに指定されたオーディオ ファイルを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>