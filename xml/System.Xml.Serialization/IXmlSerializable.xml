<Type Name="IXmlSerializable" FullName="System.Xml.Serialization.IXmlSerializable">
  <TypeSignature Language="C#" Value="public interface IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.IXmlSerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>XML シリアル化および逆シリアル化のカスタム書式を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このインターフェイスを実装する 2 つの理由があります。 1 つ目は、オブジェクトをシリアル化またはによって逆シリアル化する方法を制御する、 <xref:System.Xml.Serialization.XmlSerializer>です。 たとえば、大きなデータ セットをバッファする代わりにバイトにデータをチャンクでき、また Base64 エンコーディングを使用して、データをエンコードするときに発生するが増加しないようにできます。 シリアル化を制御するには、実装、 <xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A> と <xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A> コントロールにメソッド、 <xref:System.Xml.XmlReader> と <xref:System.Xml.XmlWriter> クラスは、XML を読み書きするために使用します。 この例については、「[How To: Chunk Serialized Data](http://msdn.microsoft.com/ja-jp/22f1b818-7e0d-428a-8680-f17d6ebdd185)」を参照してください。  
  
 2 つ目の理由、スキーマを制御できるためです。 これを有効にするに適用する必要があります、 <xref:System.Xml.Serialization.XmlSchemaProviderAttribute> に、シリアル化可能な型、およびスキーマを返す静的メンバーの名前を指定します。 参照してください、 <xref:System.Xml.Serialization.XmlSchemaProviderAttribute> 例については、です。  
  
 インターフェイスを実装するクラスには、パラメーターなしのコンス トラクターが必要です。 これは、要件、 <xref:System.Xml.Serialization.XmlSerializer> クラスです。  
  
   
  
## 例  
 次のコード例の実装を示しています、 <xref:System.Xml.Serialization.IXmlSerializable> プライベート フィールドをシリアル化するインターフェイスです。  
  
 [!code-cpp[XmlSerialization\_IXmlSerializable\#0](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CPP/person.cpp#0)]
 [!code-csharp[XmlSerialization\_IXmlSerializable\#0](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CS/person.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメソッドは予約されているため、使用できません。<see langword="IXmlSerializable" /> インターフェイスを実装する場合、このメソッドから <see langword="null" /> \(Visual Basic では <see langword="Nothing" />\) を返す必要があります。また、カスタム スキーマの指定が要求されている場合は、このクラスに <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> を適用します。</summary>
        <returns>
          <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> メソッドによって生成され、<see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> メソッドによって処理されるオブジェクトの XML 表現を記述する <see cref="T:System.Xml.Schema.XmlSchema" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オブジェクトを逆シリアル化またはシリアル化するときに、 <xref:System.Xml.Serialization.XmlSerializer> クラスでは、XML の検証は実行されません。 このため、多くの場合も安全ですを返すことによって、このメソッドの単純な実装を次に例を提供することにより、スキーマ情報を省略する `null` \(`Nothing` Visual Basic で\)。  
  
 使用する必要がありますスキーマ情報を提供することが必要な場合、 <xref:System.Xml.Serialization.XmlSchemaProviderAttribute> 属性です。`GetSchema` メソッドが返すまだ `null` \(または `Nothing`\)。  
  
 いくつか [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] を実装するレガシのカスタム型と同じように、型、 `IXmlSerializable` インターフェイスを使用している可能性 `GetSchema` の代わりに `XmlSchemaProvider`します。 によって生成されたオブジェクトの XML 表現を記述する正確な XML スキーマを返しますここで、 <xref:System.Data.DataSet.WriteXml%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public void ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">オブジェクトの逆シリアル化元である <see cref="T:System.Xml.XmlReader" /> ストリーム。</param>
        <summary>オブジェクトの XML 表現からオブジェクトを生成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A> メソッドがによって書き込まれた情報を使用して、オブジェクトを再構成する必要があります、 <xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A> メソッドです。  
  
 このメソッドが呼び出されたときに、型の情報をラップする開始タグにリーダーが配置されています。 つまり、開始タグ上で直接、シリアル化されたオブジェクトの先頭を示します。 このメソッドが戻るとき、読み取りが必要、要素全体最初から最後まで、すべての内容を含みます。 異なり、 <xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A> メソッド、フレームワークにラッパー要素が自動的に処理できません。 実装には、これを実行する必要があります。 これらの配置規則に従わなかった場合と、予期しない実行時例外または破損したデータを生成するコードが生じる場合があります。  
  
 このメソッドを実装する場合は、発生する可能性をする必要がある悪意のあるユーザーが無効にするか、またはそれ以外の場合、アプリケーションの動作を変更するために適切な形式が無効な XML 表現を提供可能性があります。  
  
   
  
## 例  
 次の例では、実装、 <xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A> メソッドです。  
  
 [!code-cpp[XmlSerialization\_IXmlSerializable\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CPP/person.cpp#2)]
 [!code-csharp[XmlSerialization\_IXmlSerializable\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CS/person.cs#2)]  
  
 次の例では、使用する、 <xref:System.Xml.Serialization.XmlSerializer> このオブジェクトを逆シリアル化するクラス。  
  
 [!code-cpp[XmlSerialization\_IXmlSerializable\#20](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CPP/reader.cpp#20)]
 [!code-csharp[XmlSerialization\_IXmlSerializable\#20](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CS/reader.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">オブジェクトのシリアル化先の <see cref="T:System.Xml.XmlWriter" /> ストリーム。</param>
        <summary>オブジェクトを XML 表現に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A>実装を提供するがオブジェクトの XML 表現を記述する必要があります。 フレームワークは、ラッパー要素を書き込み、その開始後に、XML ライターを配置します。 実装には、子要素を含む、その内容を書き込むことがあります。 フレームワークでは、ラッパー要素が閉じられます。  
  
 ための十分な情報を書き込む、<xref:System.Xml.XmlWriter>ストリームを許可する、<xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A>メソッド、オブジェクトを再構成します。  
  
 たとえば、オブジェクトの状態には、配列変数が含まれている場合、配列の長さを書き込むことを確認するまたはオブジェクトが再構成時点を確認する値の数を知ることは、配列の値を説明する要素を格納する親要素を使用します。  
  
   
  
## 例  
 次の例の実装を示しています、<xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A>メソッドです。  
  
 [!code-cpp[XmlSerialization\_IXmlSerializable\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CPP/person.cpp#1)]
 [!code-csharp[XmlSerialization\_IXmlSerializable\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CS/person.cs#1)]  
  
 次の例では、使用、<xref:System.Xml.Serialization.XmlSerializer>このオブジェクトを逆シリアル化するクラス。  
  
 [!code-cpp[XmlSerialization\_IXmlSerializable\#10](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CPP/writer.cpp#10)]
 [!code-csharp[XmlSerialization\_IXmlSerializable\#10](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlSerialization_IXmlSerializable/CS/writer.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>