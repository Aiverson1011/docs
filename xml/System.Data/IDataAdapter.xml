<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>データ アダプターを実装するオブジェクトは、メソッドと入力し、更新に使用されるマッピング操作に関連するプロパティのセットを表す、 <see cref="T:System.Data.DataSet" /> およびデータ ソースを更新します。  
  
 <see cref="T:System.Data.IDbDataAdapter" /> インスタンスは、データ ソースのあるテキスト コマンドでリレーショナル データベースを \(またはのようになります\) \(のように Transact-SQL\)、中に <see cref="T:System.Data.IDataAdapter" /> インスタンスにデータ ソースの種類を使用できます可能性があります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.IDataAdapter> インターフェイスで、継承したクラスをデータ ソース間のブリッジを表す DataAdapter クラスを実装するのには、および <xref:System.Data.DataSet>します。 DataAdapter クラスの詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconpopulatingdatasetfromdataadapter\>&#93;](http://msdn.microsoft.com/ja-jp/3fa0ac7d-e266-4954-bfac-3fbe2f913153)します。  
  
 アプリケーションがのインスタンスを作成していない、 <xref:System.Data.IDataAdapter> を直接インターフェイスしますが、継承するクラスのインスタンスを実装する <xref:System.Data.IDataAdapter>です。  
  
 継承したクラス <xref:System.Data.IDataAdapter> 継承されたメンバーを実装して、一般的にプロバイダー固有の機能を追加するための他のメンバーを定義する必要があります。 たとえば、 <xref:System.Data.IDataAdapter> インターフェイスを定義、 <xref:System.Data.IDataAdapter.Fill%2A> を受け取るメソッド、 <xref:System.Data.DataSet> をパラメーターとして。 さらに、 <xref:System.Data.OleDb.OleDbDataAdapter> クラスは継承、 <xref:System.Data.Common.DbDataAdapter.Fill%2A> メソッド定義のオーバー ロードを 2 つ追加して、 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> を ADO レコード セット オブジェクトをパラメーターとして受け取るメソッドです。  
  
   
  
## 例  
 次のコードの例では、派生クラスでは、 <xref:System.Data.SqlClient.SqlCommand>, 、<xref:System.Data.SqlClient.SqlDataAdapter>, 、および <xref:System.Data.SqlClient.SqlConnection>, 、データベースからレコードを選択します。 塗りつぶされた、 <xref:System.Data.DataSet> 返されます。 これを行うには、メソッドは渡される初期化された <xref:System.Data.DataSet>, 、接続文字列の場合、およびクエリ文字列では、TRANSACT\-SQL SELECT ステートメントです。  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>To promote consistency among .NET Framework data providers, name the inheriting class in the form <paramref name="Prv" /> DataAdapter where <paramref name="Prv" /> is the uniform prefix given to all classes in a specific .NET Framework data provider namespace. For example, <paramref name="Sql" /> is the prefix of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class in the <see langword="System.Data.SqlClient" /> namespace.  
  
 When you inherit from the <see cref="T:System.Data.IDataAdapter" /> interface, you should implement the following constructors:  
  
 <list type="table"><listheader><term> Item  
  
 </term><description> Description  
  
 </description></listheader><item><term> PrvDataAdapter()  
  
 </term><description> Initializes a new instance of the PrvDataAdapter class.  
  
 </description></item><item><term> PrvDataAdapter(PrvCommand selectCommand)  
  
 </term><description> Initializes a new instance of the PrvDataAdapter class by using the specified SQL SELECT statement.  
  
 </description></item><item><term> PrvDataAdapter(string selectCommandText, string selectConnectionString)  
  
 </term><description> Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a connection string.  
  
 </description></item><item><term> PrvDataAdapter(string selectCommandText, PrvConnection selectConnection)  
  
 </term><description> Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a PrvConnection object.  
  
 </description></item></list></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> なレコードを格納して、必要に応じて、スキーマです。</param>
        <summary>追加するかの行を更新、 <see cref="T:System.Data.DataSet" /> 一致するように、データ ソースを使用して、 <see cref="T:System.Data.DataSet" /> 名前、および作成、 <see cref="T:System.Data.DataTable" /> "Table"という名前です。</summary>
        <returns>行の数が正常に追加または内で更新、 <see cref="T:System.Data.DataSet" />です。 これは、行を返さないステートメントの影響を受ける行には含まれません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.IDataAdapter.Fill%2A> 関連付けられている、指定した SELECT ステートメントを使用してデータ ソースから行を取得 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> プロパティです。 SELECT ステートメントに関連付けられている接続オブジェクトは、有効である必要がありますが、開いておく必要はありません。 前に、接続が閉じられた場合 <xref:System.Data.IDataAdapter.Fill%2A> が呼び出されるは、データの取得を開くと、次に終了します。 接続が開いている場合の前に <xref:System.Data.IDataAdapter.Fill%2A> が呼び出されると、未処理のままにします。  
  
 <xref:System.Data.IDataAdapter.Fill%2A> 操作し、変換先に行を追加する <xref:System.Data.DataTable> 内のオブジェクト、 <xref:System.Data.DataSet>, 、作成、 <xref:System.Data.DataTable> オブジェクトのかどうかは、まだ存在しません。 作成するときに <xref:System.Data.DataTable> オブジェクト、 <xref:System.Data.IDataAdapter.Fill%2A> 操作は、通常の列名のメタデータのみを作成します。 ただし場合、 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> にプロパティが設定されている `AddWithKey`, 、適切な主キーおよび制約も作成します。  
  
 `SelectCommand` が OUTER JOIN の結果を返す場合、`DataAdapter` は、生成される <xref:System.Data.DataTable.PrimaryKey%2A> に <xref:System.Data.DataTable> 値を設定しません。 重複する行が正しく反映されるようにする主キーを明示的に定義する必要があります。 詳細については、「[&#91;\<topic:\/\/cpcondefiningprimarykeyfortable\>&#93;](http://msdn.microsoft.com/ja-jp/2ea85959-e763-4669-8bd9-46a9dab894bd)」を参照してください。  
  
 場合、 <xref:System.Data.IDataAdapter> 重複する列を設定中に検出すると、 <xref:System.Data.DataTable>, 、パターン"columnname1"、"columnname2"、"columnname3"などを使用して、連続した列の名前が生成されます。 移行する受信データに名前のない列が含まれている場合、 <xref:System.Data.DataSet> に従ってパターン"Column1"、"Column2"などです。 複数の結果セットが追加されたとき、 <xref:System.Data.DataSet>, 、各結果セットが別のテーブルに格納されます。 整数値を指定したテーブル名 \(たとえば、"Table"、"Table1"、"Table2"およびなど\) に追加することによって追加の結果セットと呼びます。 アプリケーションは、列とテーブルの名前を使用して、これらの名前付けパターンとの競合が発生しないことを確認する場合、警告を使用してください。  
  
 設定に使用される SELECT ステートメント、 <xref:System.Data.DataSet> 複数の結果を返すバッチの SQL ステートメントなど、エラーが含まれる結果のいずれかの場合連続するすべての結果はスキップされに追加されていない、 <xref:System.Data.DataSet>です。  
  
 使用することができます、 <xref:System.Data.IDataAdapter.Fill%2A> メソッドで複数回同じ <xref:System.Data.DataTable>します。 主キーが存在する場合は、受信した行が既に存在する一致する行にマージされます。 受信した行が追加された主キーが存在しない場合、 <xref:System.Data.DataTable>です。  
  
> [!NOTE]
>  実装、複数の結果を返すバッチの SQL ステートメントを処理するときに <xref:System.Data.IDataAdapter.Fill%2A> と <xref:System.Data.IDataAdapter.FillSchema%2A> の .NET Framework データ プロバイダーは最初の結果だけのスキーマ情報を取得します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <see cref="T:System.Data.DataSet" /> データ ソースからスキーマを格納します。</param>
        <param name="schemaType">
          <see cref="T:System.Data.SchemaType" /> 値のいずれか 1 つ。</param>
        <summary>"Table" という名前の <see cref="T:System.Data.DataTable" /> を指定された <see cref="T:System.Data.DataSet" /> に追加し、指定された <see cref="T:System.Data.SchemaType" /> に基づいて、データ ソースにあるスキーマと一致するようにスキーマを構成します。</summary>
        <returns>配列 <see cref="T:System.Data.DataTable" /> データ ソースからスキーマ情報を含むオブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.IDataAdapter.FillSchema%2A> メソッドを使用してデータ ソースからスキーマを取得、 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>です。 接続オブジェクトに関連付けられている、 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 、有効である必要がありますそれを開く必要はありません。 前に、接続が閉じられた場合 <xref:System.Data.IDataAdapter.FillSchema%2A> が呼び出されるは、データの取得を開くと、次に終了します。 接続が開いている場合の前に <xref:System.Data.IDataAdapter.FillSchema%2A> が呼び出されると、未処理のままにします。  
  
 A <xref:System.Data.IDataAdapter.FillSchema%2A> 操作を追加、 <xref:System.Data.DataTable> 変換先に <xref:System.Data.DataSet>します。 これは、後、列を追加、 <xref:System.Data.DataColumnCollection> の <xref:System.Data.DataTable> 、次の構成と <xref:System.Data.DataColumn> プロパティ、データ ソースに存在する場合。  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 設定する必要があります <xref:System.Data.DataColumn.AutoIncrementStep%2A> と <xref:System.Data.DataColumn.AutoIncrementSeed%2A> とは別にします。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> 構成も、 <xref:System.Data.DataTable.PrimaryKey%2A> と <xref:System.Data.DataTable.Constraints%2A> に従って、次の規則のプロパティ。  
  
-   1 つまたは複数の主キー列がによって返された場合、 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, の主キー列として使用されている、 <xref:System.Data.DataTable>です。  
  
-   主キー列が返らない場合でも一意の列を場合は、すべての一意な列が null 非許容の場合、主キーとしての一意の列が使用されます。 任意の列は null を許容すると場合、 <xref:System.Data.UniqueConstraint> に追加、 <xref:System.Data.ConstraintCollection>, が、 <xref:System.Data.DataTable.PrimaryKey%2A> プロパティが設定されていません。  
  
-   主キー列がの主キー列として使用される主キー列と一意の列の両方が返される場合は、 <xref:System.Data.DataTable>です。  
  
 主キーおよび一意の制約に追加されたことに注意してください、 <xref:System.Data.ConstraintCollection> 以前の規則が、その他の制約に従って、型は追加されません。  
  
 一意のクラスター化する場合は、または SQL Server テーブルに複数の列にインデックスが定義されているされ、クラスター化インデックス内の列の名前が返されますが、主キー制約を列の個別のセットを定義します。 、または主キー列の名前を返すには、主キー インデックスの名前を指定する SELECT ステートメントでクエリ ヒントを使用します。 クエリ ヒントを指定する方法の詳細については、次を参照してください。 [Query Hint \(Transact\-SQL\)](http://msdn.microsoft.com/library/ms181714.aspx)します。  
  
 場合、 <xref:System.Data.IDataAdapter> 重複する列を設定中に検出すると、 <xref:System.Data.DataTable>, 、パターン"columnname1"、"columnname2"、"columnname3"などを使用して、連続した列の名前が生成されます。 移行する受信データに名前のない列が含まれている場合、 <xref:System.Data.DataSet> に従ってパターン"Column1"、"Column2"などです。 複数の結果セットが追加されたとき、 <xref:System.Data.DataSet>, 、各結果セットが別のテーブルに格納されます。 整数値を指定したテーブル名 \(たとえば、"Table"、"Table1"、"Table2"およびなど\) に追加することによって追加の結果セットと呼びます。 アプリケーションは、列とテーブルの名前を使用して、これらの名前付けパターンとの競合が発生しないことを確認する場合、警告を使用してください。  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> 行を返しません。 使用して、 <xref:System.Data.IDataAdapter.Fill%2A> 行を追加する方法、 <xref:System.Data.DataTable>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>SQL SELECT ステートメントを実行するときに、ユーザーによって設定パラメーターを取得します。</summary>
        <returns>配列 <see cref="T:System.Data.IDataParameter" /> パラメーターを格納するオブジェクトがユーザーによって設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
```  
private static void GetParameters(String connectiongString) {  
           using (SqlConnection conn = new SqlConnection(connectiongString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits";   
              SqlParameter year = new SqlParameter("@Year", 2012);   
              SqlParameter credits = new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits");   
              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   
              command.Parameters.Add(year);   
              command.Parameters.Add(credits);   
              IDbDataAdapter mySchool = new SqlDataAdapter(command);   
              IDataParameter[] parameters = mySchool.GetFillParameters();  
              Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "ParameterName", "SourceColumn", "Direction", "DbType", "Value");   
              foreach (IDataParameter parameter in parameters) {   
                 Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   
              }  
           }  
        }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示または渡すかどうかマップされていないソース テーブルまたは列はソース名でフィルター処理するために、エラーが発生するかを指定します。</summary>
        <value>
          <see cref="T:System.Data.MissingMappingAction" /> 値のいずれか。 既定値は、<see langword="Passthrough" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.IDataAdapter.TableMappings%2A> プロパティは、返されるレコードの間のマスターのマップを提供し、 <xref:System.Data.DataSet>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定されている値が、 <see cref="T:System.Data.MissingMappingAction" /> 値。</exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示すか、不足しているソース テーブル、列、およびそれらの関係無視され、データセットのスキーマを追加したり、発生するエラーが発生するかどうかを指定します。</summary>
        <value>
          <see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか。 既定値は、<see langword="Add" /> です。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">設定されている値が、 <see cref="T:System.Data.MissingSchemaAction" /> 値。</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ソース テーブルをデータセットのテーブルにマップする方法を示します。</summary>
        <value>返されたレコードの間のマスターのマップを提供するコレクションと <see cref="T:System.Data.DataSet" />です。 既定値は空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.IDataAdapter> "Table"という名前のソース テーブルのマッピングのみを使用します。 すべて選択、INSERT、DELETE、および UPDATE ステートメント データを返す必要がありますは一貫性のある列の名前付けを使用しています。 レコードで返される列名は一意である必要があります、しない場合は重複する名前の列には以前のデータを上書きします。<xref:System.Data.IDataAdapter.Update%2A>, 、"Table"という名前のソース テーブルにマップされているテーブルで、変更の調整はのみです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <see cref="T:System.Data.DataSet" /> データ ソースを更新するために使用します。</param>
        <summary>それぞれの INSERT、UPDATE、または DELETE ステートメントの問い合わせについては、挿入、更新、または削除された、指定した行に各 <see cref="T:System.Data.DataSet" /> から、 <see cref="T:System.Data.DataTable" /> "Table"という名前です。</summary>
        <returns>正常に更新された行の数、 <see cref="T:System.Data.DataSet" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションを呼び出すと、 <xref:System.Data.IDataAdapter.Update%2A> 、メソッド、 <xref:System.Data.IDataAdapter> を調べ、 <xref:System.Data.DataRow.RowState%2A> プロパティで構成されているインデックスの順序に基づいて、各行の繰り返し必要な INSERT、UPDATE、または DELETE ステートメントを実行し、 <xref:System.Data.DataSet>です。 たとえば、 <xref:System.Data.IDataAdapter.Update%2A> 内の行の順序により、DELETE ステートメントの後に、INSERT ステートメントとし、もう 1 つの DELETE ステートメントの実行可能性があります、 <xref:System.Data.DataTable>です。  
  
 これらのステートメントがバッチ処理として実行されていないことに注意してください。各行が個別に更新されます。 アプリケーションが呼び出すことができます、 <xref:System.Data.DataSet.GetChanges%2A> メソッドの場合は、一連のステートメントの種類 \(たとえば、更新する前に挿入\) を制御する必要があります。 詳細については、「[&#91;\<topic:\/\/cpconUpdatingDatabaseWithDataAdapterDataSet\>&#93;](http://msdn.microsoft.com/ja-jp/d1bd9a8c-0e29-40e3-bda8-d89176b72fb1)」を参照してください。  
  
 かどうかには、INSERT、UPDATE、または DELETE ステートメントが指定されていませんが、 <xref:System.Data.Common.DataAdapter.Update%2A> メソッドには、例外が生成されます。 ただし、作成、 <xref:System.Data.SqlClient.SqlCommandBuilder> または <xref:System.Data.OleDb.OleDbCommandBuilder> に設定した場合、単一テーブルの更新の SQL ステートメントを自動的に生成するオブジェクト、 `SelectCommand` .NET Framework データ プロバイダーのプロパティです。 次に、設定しない追加の SQL ステートメントは、CommandBuilder によって生成されます。 この生成ロジックではキー列の情報に含まれる、 <xref:System.Data.DataSet>です。 詳細については、「[&#91;\<topic:\/\/cpconAutomaticallyGeneratedCommands\>&#93;](http://msdn.microsoft.com/ja-jp/6e3fb8b5-373b-4f9e-ab03-a22693df8e91)」を参照してください。  
  
 <xref:System.Data.Common.DataAdapter.Update%2A> メソッドは、更新プログラムを実行する前に最初のマッピングに示されたテーブルから行を取得します。<xref:System.Data.Common.DataAdapter.Update%2A> の値を使用して、行を更新、 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> プロパティです。 返されるその他の行は無視されます。  
  
 すべてのデータが読み込まれた後、 <xref:System.Data.DataSet>, 、 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントを発生すると、ユーザーが、整合性を検査できるようにする <xref:System.Data.DataSet> 行といずれかのコマンドによって返されたパラメーターを出力します。 行が正常に更新した後、その行に対する変更が受け入れられます。  
  
 使用する場合 <xref:System.Data.IDataAdapter.Update%2A>, 、実行の順序を次に示します。  
  
1.  値、 <xref:System.Data.DataRow> パラメーターの値に移動します。  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> イベントが発生します。  
  
3.  コマンドを実行します。  
  
4.  コマンドに設定されている場合 `FirstReturnedRecord`, 、最初に返された結果に保存し、 <xref:System.Data.DataRow>です。  
  
5.  移行する出力パラメーターがある場合、 <xref:System.Data.DataRow>です。  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> イベントが発生します。  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> が呼ばれたとき。  
  
 各コマンドに関連付けられている、 <xref:System.Data.IDataAdapter> 関連付けられているパラメーターのコレクションを持ちます。 パラメーターがを通じて現在の行にマップされて、 `SourceColumn` と `SourceVersion` の .NET Framework データ プロバイダーのプロパティ `Parameter` クラスです。`SourceColumn` 指す、 <xref:System.Data.DataTable> 列を <xref:System.Data.IDataAdapter> 参照を現在の行のパラメーターの値を取得します。  
  
 `SourceColumn` すべてのテーブル マップを適用する前に、マップされていない列の名前を参照します。 場合 `SourceColumn` は存在しない列に、実行されるアクションは、次のいずれかに依存 <xref:System.Data.MissingMappingAction> 値。  
  
|列挙値|実行されるアクション|  
|---------|----------------|  
|`MissingMappingAction.Passthrough`|ソース列名とテーブル名を使用して、 <xref:System.Data.DataSet> マッピングが存在しない場合。|  
|`MissingMappingAction.Ignore`|A <xref:System.SystemException> が生成されます。 マッピングが明示的に設定すると、入力パラメーターのマップが存在しないは通常、エラーが発生します。|  
|`MissingMappingAction.Error`|A <xref:System.SystemException> が生成されます。|  
  
 `SourceColumn` 出力の値にマップするプロパティを使用しても、または入力\/出力パラメーターにバックアップ、 `DataSet`です。 存在しない列を参照する場合、例外が生成されます。  
  
 `SourceVersion` の .NET Framework データ プロバイダーのプロパティ `Parameter` クラスを使用するかどうかを決定、 `Original`, 、`Current`, 、または `Proposed` 列値のバージョン。 この機能は、オプティミスティック同時実行制御違反を確認する UPDATE ステートメントの WHERE 句に元の値を含める頻繁に使用します。  
  
> [!NOTE]
>  行の更新中にエラーが発生する場合は、例外がスローされ、更新プログラムの実行は廃止されました。 エラーが発生した場合に例外を生成せず、更新操作を続行するには、設定、 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> プロパティを `true` 呼び出す前に <xref:System.Data.Common.DbDataAdapter.Update%2A>します。 内の行ごとにエラーに応答することがありますも、 `RowUpdated` DataAdapter のイベントです。 内で例外を生成せず、更新操作を続行する、 `RowUpdated` イベント、設定、 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> のプロパティ、 <xref:System.Data.Common.RowUpdatedEventArgs> に <xref:System.Data.UpdateStatus.Continue>します。  
  
   
  
## 例  
 次のコードの例では、派生クラス <xref:System.Data.OleDb.OleDbDataAdapter>, 、 <xref:System.Data.Common.DataAdapter.Update%2A> データ ソース。 この例では、作成した、 <xref:System.Data.OleDb.OleDbDataAdapter> と <xref:System.Data.DataSet>です。  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">INSERT、UPDATE、または DELETE ステートメントを実行しようとすると、影響を受けた 0 個のレコードが発生しました。</exception>
      </Docs>
    </Member>
  </Members>
</Type>