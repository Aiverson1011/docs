<Type Name="ReaderWriterLock" FullName="System.Threading.ReaderWriterLock">
  <TypeSignature Language="C#" Value="public sealed class ReaderWriterLock : System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReaderWriterLock extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ReaderWriterLock" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>単一ライターと複数リーダーをサポートするロックを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] が 2 つのリーダー ライター ロック <xref:System.Threading.ReaderWriterLockSlim> と <xref:System.Threading.ReaderWriterLock>です。<xref:System.Threading.ReaderWriterLockSlim> すべての新しい開発をお勧めします。<xref:System.Threading.ReaderWriterLockSlim> ような <xref:System.Threading.ReaderWriterLock>, 、再帰およびアップグレードして、ロックの状態をダウン グレードについての規則を簡素化していますが、します。<xref:System.Threading.ReaderWriterLockSlim> 多くの場合の潜在的なデッドロックを回避できます。 さらに、パフォーマンスの <xref:System.Threading.ReaderWriterLockSlim> がよりも大幅に向上 <xref:System.Threading.ReaderWriterLock>します。  
  
 <xref:System.Threading.ReaderWriterLock> リソースへのアクセスを同期するためです。 どの時点において、複数のスレッドの同時実行の読み取りアクセス権か、1 つのスレッドへの書き込みアクセスできます。 まれに、リソースが変更されている状況では、 `ReaderWriterLock` などの単純な時間での 1 つのロックより高いスループットを提供 <xref:System.Threading.Monitor>します。  
  
 `ReaderWriterLock` 多くのアクセスは読み取り、書き込みは頻繁には場所と時間が短くは最適です。 複数のリーダーは、リーダーもライターのどちらが長時間にわたってブロックされているように、単一ライターと代替します。  
  
> [!NOTE]
>  長時間にわたってロックのリーダーまたはライター ロックを保持するいると、他のスレッドが餓死することができます。 最適なパフォーマンスを書き込みの時間を最小限に抑える、アプリケーションを再構築を検討してください。  
  
 スレッドは、ロック、または、ライター ロック両方ではなく、同時に、リーダーを保持できます。 リーダー ロックを解放する、ライター ロックを取得するために、代わりに使用することができます <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> と <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A>です。  
  
 再帰的なロックの要求には、ロックのロック数が増加します。  
  
 リーダーとライターとは別にキューにあります。 スレッドがライター ロックを解放すると、その時点でリーダー キューで待機しているすべてのスレッドは、リーダー ロックが許可されます。ときにリーダー ロックをすべて解放されたライターで次のスレッドの待機中、ライター ロックが許可された場合、キューに表示され、します。 つまり、 `ReaderWriterLock` 交互に 1 つのライターとリーダーなどのコレクション。  
  
 ライター キュー内のスレッドはアクティブなリーダー ロックが解放されるを待機している間、新しいリーダー ロックを要求するスレッドがリーダーのキューに蓄積されます。 自身の要求が許可されていない場合でも、既存のリーダー ロック所有者; での同時アクセスを共有する可能性があります。これにより、リーダーが進行を妨げている不定値に対してライターを保護します。  
  
 ほとんどのメソッドのロックの獲得、 `ReaderWriterLock` タイムアウト値をそのまま使用します。 アプリケーションでデッドロックを回避するのにには、タイムアウトを使用します。 スレッドが 1 つのリソースのライター ロックの取得や第 2 のリソースで、リーダー ロックを要求などそれまでは、別のスレッドは、2 番目のリソースにライター ロックを取得し、最初に、リーダー ロックを要求します。 タイムアウトを使用しない場合、スレッドのデッドロックです。  
  
 メソッドが、スローすることによって、呼び出し元スレッドに制御を戻しますタイムアウト間隔が経過し、ロック要求が許可されていない場合、 <xref:System.ApplicationException>です。 スレッドは、この例外をキャッチし、次に実行するには、どのようなアクションを決定します。  
  
 タイムアウトはミリ秒単位で表されます。 使用する場合、 <xref:System.TimeSpan?displayProperty=fullName> タイムアウトを指定するには使用される値、によって表される整数のミリ秒単位の合計数、 <xref:System.TimeSpan>です。 次の表は、ミリ秒単位で有効なタイムアウト値を表示します。  
  
|値|説明|  
|-------|--------|  
|\-1|スレッドは、時間に関係なく、ロックが取得されるまで待機します。 整数のタイムアウト時間、定数を指定するメソッドの <xref:System.Threading.Timeout.Infinite> 使用できます。|  
|0|スレッドは、ロックの取得を待機しません。 かどうか、ロックをすぐに取得できない、メソッドを返します。|  
|\>0|待機するミリ秒数。|  
  
 \-1 の場合を除き、負のタイムアウト値は許可されません。 \-1 以外の負の整数を指定すると、0 のタイムアウト値が代わりに使用されます。 \(つまり、メソッドを返しますを待たず、すぐにロックを取得できない場合。\) 指定した場合、 <xref:System.TimeSpan> 、負の値は\-1 以外のミリ秒数を表す <xref:System.ArgumentOutOfRangeException> がスローされます。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Threading.ReaderWriterLock> 共有リソースを保護するのには、整数値がという名前 `resource`, 、それが同時に読み取りし、複数のスレッドが排他的書き込みです。 なお、 <xref:System.Threading.ReaderWriterLock> はクラス レベルで宣言されているすべてのスレッドに表示されるようです。  
  
 [!code-cpp[System.Threading.ReaderWriterLock\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Threading.ReaderWriterLock" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例は、<xref:System.Threading.ReaderWriterLock> クラスの新しいインスタンスを作成する方法を示しています。  
  
 このコードは示されている例の一部、 <xref:System.Threading.ReaderWriterLock> クラスです。  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">ミリ秒単位のタイムアウト。</param>
        <summary>タイムアウトに <see cref="T:System.Int32" /> 値を使用して、リーダー ロックを取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> 別のスレッドがあるライター ロックには、少なくとも 1 つのスレッドがライター ロックを待機している場合、またはブロックします。  
  
> [!NOTE]
>  現在のスレッドは、ライター ロックを既に持っている場合、リーダー ロックは取得されません。 代わりに、ライター ロックのロック カウントがインクリメントされます。 これは、スレッドがライター ロックでブロックすることを防止できます。 結果は呼び出すことと同じ <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, 、およびその他の呼び出しを <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> 、ライター ロックを解除するときに必要です。  
  
 `AcquireReaderLock` 再帰的なリーダー ロック要求をサポートしています。 つまり、スレッドできます AcquireReaderLock 複数回呼び、ごとにロック カウントをインクリメントします。 呼び出す必要があります <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> 呼び出すたびに 1 回 `AcquireReaderLock`します。 また、呼び出して <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> をすぐにゼロにロックの数を減らすためにします。  
  
 再帰的なロックの要求は、リーダー キューに要求元のスレッドをかけることがなく、すぐに必ず許可されます。 長時間にわたってライター ロック要求がブロックされないようにするのに再帰的なロックを慎重に使用します。  
  
 有効なタイムアウト値を参照してください。 <xref:System.Threading.ReaderWriterLock>します。  
  
   
  
## 例  
 次のコード例では、取得し、リーダー ロックを解放する方法と、要求がタイムアウトしたときにスローされる例外を処理する方法を示します。  
  
 このコードは示されている例の一部、 <xref:System.Threading.ReaderWriterLock> クラスです。  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <paramref name="millisecondsTimeout" /> ロック要求を許可する前に有効期限です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireReaderLock">
      <MemberSignature Language="C#" Value="public void AcquireReaderLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireReaderLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">タイムアウト期間を指定する <see langword="TimeSpan" />。</param>
        <summary>タイムアウトに <see cref="T:System.TimeSpan" /> 値を使用して、リーダー ロックを取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Threading.ReaderWriterLock.AcquireReaderLock%2A> 別のスレッドがあるライター ロックには、少なくとも 1 つのスレッドがライター ロックを待機している場合、またはブロックします。  
  
> [!NOTE]
>  現在のスレッドは、ライター ロックを既に持っている場合、リーダー ロックは取得されません。 代わりに、ライター ロックのロック カウントがインクリメントされます。 これは、スレッドがライター ロックでブロックすることを防止できます。 結果は呼び出すことと同じ <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, 、およびその他の呼び出しを <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> 、ライター ロックを解除するときに必要です。  
  
 `AcquireReaderLock` 再帰的なリーダー ロック要求をサポートしています。 つまり、スレッドできます AcquireReaderLock 複数回呼び、ごとにロック カウントをインクリメントします。 呼び出す必要があります <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> 呼び出すたびに 1 回 `AcquireReaderLock`します。 また、呼び出して <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> をすぐにゼロにロックの数を減らすためにします。  
  
 再帰的なロックの要求は、リーダー キューに要求元のスレッドをかけることがなく、すぐに必ず許可されます。 長時間にわたってライター ロック要求がブロックされないようにするのに再帰的なロックを慎重に使用します。  
  
 有効なタイムアウト値を参照してください。 <xref:System.Threading.ReaderWriterLock>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <paramref name="timeout" /> ロック要求を許可する前に有効期限です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> \-1 ミリ秒以外の負の値を指定します。</exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">ミリ秒単位のタイムアウト。</param>
        <summary>タイムアウトに <see cref="T:System.Int32" /> 値を使用して、ライター ロックを取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、別のスレッドがリーダー ロックまたはロックをライターをブロックします。 複数の同時実行のリーダー ロックの代わりにライター ロックする方法については、次を参照してください。、 <xref:System.Threading.ReaderWriterLock> クラスです。  
  
 既にリーダー ロックを保持しているスレッドが 2 つの方法のいずれかにライター ロックを取得できます。 呼び出しの前に、リーダー ロックを解放して <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, 、またはを呼び出して <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>します。  
  
> [!CAUTION]
>  スレッドが呼び出す場合 `AcquireWriterLock` リーダー ロックがまだある間は、リーダー ロックでブロックは、スレッドはデッドロック状態が無限のタイムアウトが指定されている場合。 このようなデッドロックを避けるためには、次のように使用します。 <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> を現在のスレッドがリーダー ロックを既にあるかどうかを判断します。  
  
 `AcquireWriterLock` 再帰的なライター ロックの要求をサポートしています。 つまり、スレッドを呼び出すことができます `AcquireWriterLock` 複数回するロック数ごとにインクリメントします。 呼び出す必要があります <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> 呼び出すたびに 1 回 `AcquireWriterLock`します。 また、呼び出して <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> をすぐにゼロにロックの数を減らすためにします。  
  
 再帰的なロックの要求は、ライター キューに要求元のスレッドをかけることがなく、すぐに必ず許可されます。  
  
 有効なタイムアウト値を参照してください。 <xref:System.Threading.ReaderWriterLock>します。  
  
   
  
## 例  
 次のコード例では、取得し、ライター ロックを解放する方法と、要求がタイムアウトしたときにスローされる例外を処理する方法を示します。  
  
 このコードは示されている例の一部、 <xref:System.Threading.ReaderWriterLock> クラスです。  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <paramref name="timeout" /> ロック要求を許可する前に有効期限です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AcquireWriterLock">
      <MemberSignature Language="C#" Value="public void AcquireWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcquireWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">タイムアウト期間を指定する <see langword="TimeSpan" />。</param>
        <summary>タイムアウトに <see cref="T:System.TimeSpan" /> 値を使用して、ライター ロックを取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、別のスレッドがリーダー ロックまたはロックをライターをブロックします。 複数の同時実行のリーダー ロックの代わりにライター ロックする方法については、次を参照してください。、 <xref:System.Threading.ReaderWriterLock> クラスです。  
  
 既にリーダー ロックを保持しているスレッドが 2 つの方法のいずれかにライター ロックを取得できます。 呼び出しの前に、リーダー ロックを解放して <xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A>, 、またはを呼び出して <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>します。  
  
> [!CAUTION]
>  スレッドが呼び出す場合 `AcquireWriterLock` リーダー ロックがまだある間は、リーダー ロックでブロックは、スレッドはデッドロック状態が無限のタイムアウトが指定されている場合。 このようなデッドロックを避けるためには、次のように使用します。 <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> を現在のスレッドがリーダー ロックを既にあるかどうかを判断します。  
  
 `AcquireWriterLock` 再帰的なライター ロックの要求をサポートしています。 つまり、スレッドを呼び出すことができます `AcquireWriterLock` 複数回するロック数ごとにインクリメントします。 呼び出す必要があります <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> 呼び出すたびに 1 回 `AcquireWriterLock`します。 また、呼び出して <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> をすぐにゼロにロックの数を減らすためにします。  
  
 再帰的なロックの要求は、ライター キューに要求元のスレッドをかけることがなく、すぐに必ず許可されます。  
  
 有効なタイムアウト値を参照してください。 <xref:System.Threading.ReaderWriterLock>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <paramref name="timeout" /> ロック要求を許可する前に有効期限です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> \-1 ミリ秒以外の負の値を指定します。</exception>
      </Docs>
    </Member>
    <Member MemberName="AnyWritersSince">
      <MemberSignature Language="C#" Value="public bool AnyWritersSince (int seqNum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AnyWritersSince(int32 seqNum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.AnyWritersSince(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seqNum" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="seqNum">シーケンス番号。</param>
        <summary>シーケンス番号の取得後にライター ロックを取得したスレッドがあったかどうかを示します。</summary>
        <returns>シーケンス番号の取得後にライター ロックを取得したスレッドがあった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> と `AnyWritersSince` アプリケーションのパフォーマンスを向上させるためにします。 たとえば、スレッドは、リーダー ロックを保持しているときに取得した情報をキャッシュする可能性があります。 スレッドを解放した後、ロックを取得した場合、使用できる `AnyWritersSince` にどうを判断するかどうか他のスレッドが、リソース間に書き込まれた場合、キャッシュされた情報を使用できます。 この方法は高価です。 ここでは、ロックで保護された情報を読み取り中に便利たとえば、データベース クエリを実行しています。  
  
 呼び出し元は、シーケンス番号を使用するために、リーダー ロックまたはライター ロック保持する必要があります。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> メソッドおよび <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> 別のスレッドが、現在のスレッドから、保護されたリソースにライター ロックを取得したかどうかを確認するには最終ライター ロックを保持します。  
  
 このコードは示されている例の一部、 <xref:System.Threading.ReaderWriterLock> クラスです。  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DowngradeFromWriterLock">
      <MemberSignature Language="C#" Value="public void DowngradeFromWriterLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DowngradeFromWriterLock(valuetype System.Threading.LockCookie lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie">
          <see cref="T:System.Threading.LockCookie" /> によって戻される <see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />。</param>
        <summary>スレッドのロック ステータスを、<see cref="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" /> を呼び出す前の状態に復元します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> 再帰的なロックの数に関係なく、ライター ロックを解放し、リーダー ロックをライター ロックにアップグレードする前に、スレッドによって保持されたを復元します。 リーダー ロックのロック カウントが復元されます。  
  
> [!NOTE]
>  `DowngradeFromWriterLock` 受け入れる、 <xref:System.Threading.LockCookie> 呼び出すことによって取得 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>します。 使用しないでください、 `LockCookie` によって返される <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>です。  
  
 スレッドをブロックしませんがライター ロックからダウン グレードするとき、ライター ロックが離されると、すべてのリーダー ロック要求が与えられているために、他のスレッドがライター ロックを待機している場合でも。  
  
   
  
## 例  
 次のコード例では、リーダー ロックを要求する、リーダー ロックをライター ロックにアップグレードし、もう一度、リーダー ロックにダウン グレードする方法を示します。  
  
 このコードは示されている例の一部、 <xref:System.Threading.ReaderWriterLock> クラスです。  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">スレッドには、ライター ロックはありません。</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="lockCookie" /> のアドレスは null ポインターです。</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ReaderWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ガベージ コレクターが <see cref="T:System.Threading.ReaderWriterLock" /> を再利用しているときに、リソースが解放され、他のクリーンアップ操作が確実に実行されるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ガベージ コレクター <xref:System.Threading.ReaderWriterLock.Finalize%2A> ときに、現在 <xref:System.Threading.ReaderWriterLock> オブジェクトが完了するを準備します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReaderLockHeld">
      <MemberSignature Language="C#" Value="public bool IsReaderLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReaderLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsReaderLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のスレッドがリーダー ロックを保持しているかどうかを示す値を取得します。</summary>
        <value>現在のスレッドがリーダー ロックを保持している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、使用して `IsReaderLockHeld` デッドロックを回避します。  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriterLockHeld">
      <MemberSignature Language="C#" Value="public bool IsWriterLockHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriterLockHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.IsWriterLockHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のスレッドがライター ロックを保持しているかどうかを示す値を取得します。</summary>
        <value>現在のスレッドがライター ロックを保持している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例を示していますをライター ロックを保持しているスレッドで、リーダー ロックを取得しようと `ReaderWriterLock` リーダー ロックを許可することはありませんが、代わりにライター ロックのロック カウントをインクリメントします。  
  
 [!code-cpp[System.Threading.ReaderWriterLock.IsWriterLockHeld\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ReaderWriterLock.IsWriterLockHeld\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/CS/source.cs#1)]
 [!code-vb[System.Threading.ReaderWriterLock.IsWriterLockHeld\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock.IsWriterLockHeld/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie ReleaseLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie ReleaseLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseLock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>スレッドがロックを取得した回数に関係なく、ロックを解放します。</summary>
        <returns>解放されたロックを表す <see cref="T:System.Threading.LockCookie" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> リーダー ロックまたは再帰的なロックの数に関係なく、ライター ロックを解放します。 ロック数など、ロックの状態を復元するには、渡す、 <xref:System.Threading.LockCookie> に <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>します。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> 後でロックの状態を復元する方法と、スレッドによって取得された回数に関係なく、ロックを解放します。  
  
 このコードは示されている例の一部、 <xref:System.Threading.ReaderWriterLock> クラスです。  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseReaderLock">
      <MemberSignature Language="C#" Value="public void ReleaseReaderLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseReaderLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseReaderLock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ロック カウントをデクリメントします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Threading.ReaderWriterLock.ReleaseReaderLock%2A> ロック カウントをデクリメントします。 カウントが 0 になったときに、ロックが解放されます。  
  
> [!NOTE]
>  スレッドがライター ロックの場合、呼び出す `ReleaseReaderLock` の呼び出しと同じ効果を持ちます <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A>します。 ロックが、スレッドがない場合は、呼び出す `ReleaseReaderLock` スロー、 <xref:System.ApplicationException>です。  
  
   
  
## 例  
 次のコード例では、取得し、リーダー ロックを解放する方法と、要求がタイムアウトしたときにスローされる例外を処理する方法を示します。  
  
 このコードは示されている例の一部、 <xref:System.Threading.ReaderWriterLock> クラスです。  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#3)]
[!code-csharp[System.Threading.ReaderWriterLock#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#3)]
[!code-vb[System.Threading.ReaderWriterLock#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#3)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">スレッドには、すべてのリーダーまたはライター ロックはありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseWriterLock">
      <MemberSignature Language="C#" Value="public void ReleaseWriterLock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseWriterLock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.ReleaseWriterLock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ライター ロックのロック カウントがデクリメントします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Threading.ReaderWriterLock.ReleaseWriterLock%2A> ライター ロック カウントをデクリメントします。 カウントが 0 になったときに、ライター ロックが解放されます。  
  
> [!NOTE]
>  スレッドは、リーダー ロックまたはロックがありませんが、呼び出す `ReleaseWriterLock` スロー、 <xref:System.ApplicationException>です。  
  
   
  
## 例  
 次のコード例では、取得し、ライター ロックを解放する方法と、要求がタイムアウトしたときにスローされる例外を処理する方法を示します。  
  
 このコードは示されている例の一部、 <xref:System.Threading.ReaderWriterLock> クラスです。  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#4)]
[!code-csharp[System.Threading.ReaderWriterLock#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#4)]
[!code-vb[System.Threading.ReaderWriterLock#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#4)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">スレッドには、ライター ロックはありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="RestoreLock">
      <MemberSignature Language="C#" Value="public void RestoreLock (ref System.Threading.LockCookie lockCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RestoreLock(valuetype System.Threading.LockCookie lockCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockCookie" Type="System.Threading.LockCookie&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockCookie">
          <see cref="T:System.Threading.LockCookie" /> によって戻される <see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" />。</param>
        <summary>スレッドのロック ステータスを、<see cref="M:System.Threading.ReaderWriterLock.ReleaseLock" /> を呼び出す前の状態に復元します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって復元状態 `RestoreLock` 再帰的なロックの数が含まれています。  
  
 スレッドがブロックを別のスレッドがライター ロックを取得した後、または別のスレッドがリーダー ロックまたはライター ロック取得された後にライター ロックを復元しようとすると、リーダー ロックを復元しようとするとします。`RestoreLock` 、タイムアウトは受け付けませんしたデッドロックの可能性をしないように注意する必要があります。  
  
> [!CAUTION]
>  呼び出しの前に `RestoreLock`, の呼び出し以降に取得したすべてのロックを解放したことを確認 <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A>します。 たとえば、スレッドはデッドロック状態がリーダー ロックを取得し、以前のライター ロックを復元ましょう。 使用する <xref:System.Threading.ReaderWriterLock.IsReaderLockHeld%2A> と <xref:System.Threading.ReaderWriterLock.IsWriterLockHeld%2A> をこのような新たなロックを検出します。  
  
 使用しないでください、 <xref:System.Threading.LockCookie> から返された <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A>です。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Threading.ReaderWriterLock.ReleaseLock%2A> 後でロックの状態を復元する方法と、スレッドによって取得された回数に関係なく、ロックを解放します。  
  
 このコードは示されている例の一部、 <xref:System.Threading.ReaderWriterLock> クラスです。  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <paramref name="lockCookie" /> のアドレスは null ポインターです。</exception>
      </Docs>
    </Member>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">ミリ秒単位のタイムアウト。</param>
        <summary>タイムアウトに <see langword="Int32" /> 値を使用して、リーダー ロックをライター ロックにアップグレードします。</summary>
        <returns>
          <see cref="T:System.Threading.LockCookie" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スレッドを呼び出すと `UpgradeToWriterLock` ロック カウントに関係なく、リーダー ロックが解放され、スレッドがライター ロックをキューの末尾に移動します。 したがって、他のスレッドがライター ロックが許可されるは、アップグレードを要求したスレッドの前に、リソースに書き込む可能性があります。  
  
> [!IMPORTANT]
>  呼び出したスレッドまでタイムアウトの例外はスローされません、 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> メソッドがリーダー ロックを取得します。 他のスレッドがライター ロックを待機しない場合は、すぐにこの発生します。 ただし、別のスレッドがライター ロックをキューに登録する場合、スレッドを呼び出した関数、 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> すべて現在のリーダーがのロックを解放し、1 つのスレッドが取得され、ライター ロックを解放するまで、メソッドがリーダー ロックを再取得できません。 これは、true の場合でも、ライター ロックを要求したその他のスレッドを要求して、現在のスレッドが呼び出された後に、 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> メソッドです。  
  
 ロックの状態を復元するには、呼び出す <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> を使用して、 <xref:System.Threading.LockCookie> によって返される `UpgradeToWriterLock`です。 これを使用しないで `LockCookie` と <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>です。  
  
 スレッドがリーダー ロックを持たない場合は使用しないで `UpgradeToWriterLock`します。 代わりに、<xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> を使用してください。  
  
 有効なタイムアウト値を参照してください。 <xref:System.Threading.ReaderWriterLock>します。  
  
   
  
## 例  
 次のコード例では、リーダー ロックを要求する、リーダー ロックをライター ロックにアップグレードし、もう一度、リーダー ロックにダウン グレードする方法を示します。  
  
 このコードは示されている例の一部、 <xref:System.Threading.ReaderWriterLock> クラスです。  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#5)]
[!code-csharp[System.Threading.ReaderWriterLock#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#5)]
[!code-vb[System.Threading.ReaderWriterLock#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#5)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <paramref name="millisecondsTimeout" /> ロック要求を許可する前に有効期限です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UpgradeToWriterLock">
      <MemberSignature Language="C#" Value="public System.Threading.LockCookie UpgradeToWriterLock (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.LockCookie UpgradeToWriterLock(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">タイムアウト期間を指定する <see langword="TimeSpan" />。</param>
        <summary>タイムアウトに <see langword="TimeSpan" /> 値を使用して、リーダー ロックをライター ロックにアップグレードします。</summary>
        <returns>
          <see cref="T:System.Threading.LockCookie" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スレッドを呼び出すと `UpgradeToWriterLock` ロック カウントに関係なく、リーダー ロックが解放され、スレッドがライター ロックをキューの末尾に移動します。 したがって、他のスレッドがライター ロックが許可されるは、アップグレードを要求したスレッドの前に、リソースに書き込む可能性があります。  
  
> [!IMPORTANT]
>  呼び出したスレッドまでタイムアウトの例外はスローされません、 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> メソッドは、リーダー ロックを取得できます。 他のスレッドがライター ロックを待機しない場合は、すぐにこの発生します。 ただし、別のスレッドがライター ロックをキューに登録する場合、スレッドを呼び出した関数、 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> すべて現在のリーダーがのロックを解放し、1 つのスレッドが取得され、ライター ロックを解放するまで、メソッドがリーダー ロックを再取得できません。 これは、現在のスレッドが呼び出された後に、他のスレッドがライター ロックを要求した要求する場合でも、 <xref:System.Threading.ReaderWriterLock.UpgradeToWriterLock%2A> メソッドです。  
  
 ロックの状態を復元するには、呼び出す <xref:System.Threading.ReaderWriterLock.DowngradeFromWriterLock%2A> を使用して、 <xref:System.Threading.LockCookie> によって返される `UpgradeToWriterLock`です。 これを使用しないで `LockCookie` と <xref:System.Threading.ReaderWriterLock.RestoreLock%2A>です。  
  
 スレッドがリーダー ロックを持たない場合は使用しないで `UpgradeToWriterLock`します。 代わりに、<xref:System.Threading.ReaderWriterLock.AcquireWriterLock%2A> を使用してください。  
  
 有効なタイムアウト値を参照してください。 <xref:System.Threading.ReaderWriterLock>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException">
          <paramref name="timeout" /> ロック要求を許可する前に有効期限です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> \-1 ミリ秒以外の負の値を指定します。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriterSeqNum">
      <MemberSignature Language="C#" Value="public int WriterSeqNum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriterSeqNum" />
      <MemberSignature Language="DocId" Value="P:System.Threading.ReaderWriterLock.WriterSeqNum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のシーケンス番号を取得します。</summary>
        <value>現在のシーケンス番号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シーケンス番号は、スレッドがライター ロックを取得するたびに増分されます。 シーケンス番号を保存してに渡す <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> は後で、他のスレッドがライター ロックをそれまでは入手したかどうかを決定する場合。  
  
 使用する `WriterSeqNum` アプリケーションのパフォーマンスを向上させるためにします。 たとえば、スレッドは、リーダー ロックを保持しているときに取得した情報をキャッシュする可能性があります。 スレッドを解放した後、ロックを取得した場合、呼び出すことで、他のスレッドがリソースに書き込まれたかどうかを決定できる `AnyWritersSince`場合、キャッシュされた情報を使用できます。 この手法が役立つロックで保護された情報の読み取りが高価です。たとえば、データベース クエリを実行しています。  
  
 呼び出し元は、シーケンス番号を使用するために、リーダー ロックまたはライター ロック保持する必要があります。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Threading.ReaderWriterLock.WriterSeqNum%2A> プロパティおよび <xref:System.Threading.ReaderWriterLock.AnyWritersSince%2A> 別のスレッドが、現在のスレッドから、保護されたリソースにライター ロックを取得したかどうかを決定する方法が最後にライター ロックを保持します。  
  
 このコードは示されている例の一部、 <xref:System.Threading.ReaderWriterLock> クラスです。  
  
 [!code-cpp[System.Threading.ReaderWriterLock#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#2)]
 [!code-csharp[System.Threading.ReaderWriterLock#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#2)]
 [!code-vb[System.Threading.ReaderWriterLock#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#2)]  
[!code-cpp[System.Threading.ReaderWriterLock#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#6)]
[!code-csharp[System.Threading.ReaderWriterLock#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#6)]
[!code-vb[System.Threading.ReaderWriterLock#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#6)]  
[!code-cpp[System.Threading.ReaderWriterLock#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CPP/source.cpp#7)]
[!code-csharp[System.Threading.ReaderWriterLock#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/CS/source.cs#7)]
[!code-vb[System.Threading.ReaderWriterLock#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ReaderWriterLock/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UpgradeToWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>リーダー ロックをライター ロックにアップグレードします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AcquireWriterLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ライター ロックを取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AcquireReaderLock">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>リーダー ロックを取得します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>