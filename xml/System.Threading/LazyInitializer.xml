<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>遅延初期化ルーチンを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 これらのルーチンでは、代わりに参照を使用して、アクセスしたターゲットが初期化されていることを確認する、限定的な初期化の専用インスタンスを割り当てるに必要としないようにします。  
  
   
  
## 例  
 次の例では、EnsureInitialized 遅延初期化が既に過ぎているかどうかを追跡するためにブール値を使用して値を初期化し、相互排除ロックとして使用するオブジェクトを使用する方法を示します。  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
                     bool _dataInitialized = false;  
                     object _dataLock = new object();  
                  //  ...  
  
                    ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>メソッド <see cref="T:System.Threading.LazyInitializer" /> スレッド セーフでは、複数のスレッドから同時に呼び出すことができます。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">初期化される参照の型。</typeparam>
        <param name="target">型の参照 <c>T</c> を既に初期化されていない場合に初期化します。</param>
        <summary>初期化されていない場合は、型の既定のコンス トラクターを持つターゲットの参照型を初期化します。</summary>
        <returns>型の初期化された参照 <paramref name="T" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、参照型でのみ使用可能性があります。 値型の初期化をできるように、EnsureInitialized の他のオーバー ロードを参照してください。  
  
 このメソッドは同時に使用できます複数のスレッドが初期化するために `target`します。  
  
 複数のスレッドがこのメソッドに同時に、複数のインスタンスをアクセスする `T` 作成するには、月はありませんが、1 つだけに格納する `target`です。 このような出来事で、このメソッドは保存されないので、オブジェクトの破棄できません。 このようなオブジェクトを破棄する必要があります、呼び出さない場合は呼び出し元オブジェクトが使用しないかどうかを判断し、オブジェクトを適切に破棄します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">型のコンス トラクターにアクセスする権限 <paramref name="T" /> がありません。</exception>
        <exception cref="T:System.MissingMemberException">型 <paramref name="T" /> 既定のコンス トラクターがありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">初期化される参照の参照型。</typeparam>
        <param name="target">型の参照 <c>T</c> に初期化されていない場合は、初期化します。</param>
        <param name="valueFactory">参照の初期化に呼び出される関数。</param>
        <summary>初期化されていない場合に、指定された関数を使用して、ターゲットの参照型を初期化します。</summary>
        <returns>型の初期化値 <paramref name="T" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、参照型でのみ使用して `valueFactory` null 参照 \(Visual Basic では Nothing\) を返さない場合があります。 値型の初期化できるようにしたり、null 参照の種類を許可するのには、EnsureInitialized の他のオーバー ロードを参照してください。  
  
 このメソッドは同時に使用できます複数のスレッドが初期化するために `target`します。  
  
 複数のスレッドがこのメソッドに同時に、複数のインスタンスをアクセスする `T` 作成するには、月はありませんが、1 つだけに格納する `target`です。 このような出来事で、このメソッドは保存されないので、オブジェクトの破棄できません。 このようなオブジェクトを破棄する必要があります、呼び出さない場合は呼び出し元オブジェクトが使用しないかどうかを判断し、オブジェクトを適切に破棄します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">型 <paramref name="T" /> 既定のコンス トラクターがありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="valueFactory" /> null を返しました \(Visual Basic では Nothing\)。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T target, bool initialized, object syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">初期化される参照の型。</typeparam>
        <param name="target">参照または型の値 <c>T</c> に初期化されていない場合は、初期化します。</param>
        <param name="initialized">ターゲット名は既に初期化されているかどうかを決定するブール値への参照。</param>
        <param name="syncLock">初期化するため、相互に排他的なロックとして使用されるオブジェクトへの参照を <c>target</c>します。 場合 <c>syncLock</c> は <see langword="null" />, 、新しいオブジェクトがインスタンス化されます。</param>
        <summary>初期化されていない場合は、既定のコンス トラクターで、対象の参照または値型を初期化します。</summary>
        <returns>型の初期化値 <paramref name="T" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `intialized` が指定されていると true の場合、初期化は行われません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">型のコンス トラクターにアクセスする権限 <paramref name="T" /> がありません。</exception>
        <exception cref="T:System.MissingMemberException">型 <paramref name="T" /> 既定のコンス トラクターがありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T target, object syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="syncLock">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T target, bool initialized, object syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">初期化される参照の型。</typeparam>
        <param name="target">参照または型の値 <c>T</c> に初期化されていない場合は、初期化します。</param>
        <param name="initialized">ターゲット名は既に初期化されているかどうかを決定するブール値への参照。</param>
        <param name="syncLock">初期化するため、相互に排他的なロックとして使用されるオブジェクトへの参照を <c>target</c>します。 場合 <c>syncLock</c> は <see langword="null" />, 、新しいオブジェクトがインスタンス化されます。</param>
        <param name="valueFactory">参照または値を初期化するために呼び出される関数。</param>
        <summary>初期化されていない場合に、指定された関数を使用して、対象の参照または値の型を初期化します。</summary>
        <returns>型の初期化値 <paramref name="T" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `intialized` が指定されていると true の場合、初期化は行われません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">型のコンス トラクターにアクセスする権限 <paramref name="T" /> がありません。</exception>
        <exception cref="T:System.MissingMemberException">型 <paramref name="T" /> 既定のコンス トラクターがありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初期化されていない場合は、対象の型を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>