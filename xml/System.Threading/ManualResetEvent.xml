<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>イベントが発生したことを、1 つ以上の待機中のスレッドに通知します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 .NET framework version 2.0 では、 <xref:System.Threading.ManualResetEvent> から、新しい派生 <xref:System.Threading.EventWaitHandle> クラスです。 A <xref:System.Threading.ManualResetEvent> に相当する機能は、 <xref:System.Threading.EventWaitHandle> 混ぜ合わせて、 <xref:System.Threading.EventResetMode.ManualReset?displayProperty=fullName>です。  
  
> [!NOTE]
>  異なり、 <xref:System.Threading.ManualResetEvent> 、クラス、 <xref:System.Threading.EventWaitHandle> クラスは、名前付きシステム同期イベントへのアクセスを提供します。  
  
 <xref:System.Threading.ManualResetEvent> 通知することによって、互いに通信するためにスレッドをできるようにします。 通常、このような通信では、他のスレッドを続行する前にあるスレッドが完了する必要がありますタスクに関するものです。  
  
 スレッドが完了しないと他のアクティビティの開始時にスレッドの実行を呼び出す <xref:System.Threading.EventWaitHandle.Reset%2A> に `ManualResetEvent` 非シグナル状態にします。 このスレッドはようなものの制御、 `ManualResetEvent`です。 スレッドの呼び出しに <xref:System.Threading.WaitHandle.WaitOne%2A> 上、 `ManualResetEvent` はブロックすると、シグナルを待機しています。 呼び出しスレッドを制御するには、アクティビティが完了すると、 <xref:System.Threading.EventWaitHandle.Set%2A> を待機しているスレッドが続行できないことを通知します。 すべての待機中のスレッドが解放されます。  
  
 シグナル状態されて `ManualResetEvent` 手動でリセットされるまでシグナル状態のままです。 つまり、するために呼び出す `WaitOne` にすぐに返ります。  
  
 初期状態を制御する、 `ManualResetEvent` ブール値をコンス トラクターに渡すことによって `true` 初期状態がシグナル状態になる場合と `false` それ以外の場合。  
  
 `ManualResetEvent` 使用することもできます、 `static`<xref:System.Threading.WaitHandle.WaitAll%2A> と <xref:System.Threading.WaitHandle.WaitAny%2A> メソッドです。  
  
 スレッドの同期機構の詳細については、次を参照してください。 [Manual Reset Event](http://msdn.microsoft.com/ja-jp/465fdcf9-ba24-4d8d-a43f-d983b7cb0cc6) 概念説明のドキュメントです。  
  
   
  
## 例  
 次の例でどのように <xref:System.Threading.ManualResetEvent> 動作します。 例の先頭で、 <xref:System.Threading.ManualResetEvent> シグナルの状態で \(つまり、 `false` コンス トラクターに渡されます\)。 例 3 つのスレッドでブロックされるので、 <xref:System.Threading.ManualResetEvent> を呼び出してその <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドです。 押されたとき、 **Enter** キーの例では、 <xref:System.Threading.EventWaitHandle.Set%2A> メソッドで、次の 3 つのすべてのスレッドを解放します。 動作と比較してみて、 <xref:System.Threading.AutoResetEvent> クラスは、各リリースの後に自動的にリセットするでは一度に 1 つのスレッドを解放します。  
  
 キーを押して、 **Enter** キーが再度実現する、 <xref:System.Threading.ManualResetEvent> までシグナル状態のままになります、 <xref:System.Threading.EventWaitHandle.Reset%2A> メソッドが呼び出されます: 例では、2 つ以上のスレッドが起動します。 呼び出すとき、これらのスレッドがブロックされない、 <xref:System.Threading.WaitHandle.WaitOne%2A> メソッドが、代わりに完了するまで実行します。  
  
 キーを押して、 **Enter** キーを呼び出す例をもう一度押すと、 <xref:System.Threading.EventWaitHandle.Reset%2A> メソッドを呼び出すときにブロックを 1 つの複数のスレッドを開始して <xref:System.Threading.WaitHandle.WaitOne%2A>です。 キーを押して、 **Enter** キーのいずれかの呼び出しの最後に <xref:System.Threading.EventWaitHandle.Set%2A> リリース最後のスレッドと、プログラムを終了します。  
  
 [!code-cpp[System.Threading.ManualResetEvent\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>このクラスは、スレッド セーフです。</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <see langword="true" /> 初期状態を設定するには、シグナル状態。 <see langword="false" /> を初期状態を非シグナル状態に設定します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Threading.ManualResetEvent" /> クラスに初期状態をシグナル状態に設定するかどうかを示すブール値を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合の初期状態、 <xref:System.Threading.ManualResetEvent> がシグナルを受け取る \(を渡すことによって作成される場合に、 `true` の `initialState`\)、スレッドを待機している、 <xref:System.Threading.ManualResetEvent> はブロックしません。 スレッドがブロックされるまで初期状態が非シグナル状態の場合は、 <xref:System.Threading.EventWaitHandle.Set%2A> メソッドが呼び出されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>