<Type Name="RegisteredWaitHandle" FullName="System.Threading.RegisteredWaitHandle">
  <TypeSignature Language="C#" Value="public sealed class RegisteredWaitHandle : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegisteredWaitHandle extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Threading.RegisteredWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>呼び出すときに登録されているハンドルを表す <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を使用する方法を示しています、 <xref:System.Threading.RegisteredWaitHandle> をなぜコールバック メソッドが呼び出され、待機ハンドルがシグナル状態になるため、コールバックが発生した場合は、タスクを登録解除する方法を決定します。  
  
 使用する方法も示します、 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> メソッドを指定した待機ハンドルがシグナル通知されたときに、指定されたコールバック メソッドを実行します。 コールバック メソッドは、この例では `WaitProc`, 、待機ハンドルは、 <xref:System.Threading.AutoResetEvent>です。  
  
 例では、定義、 `TaskInfo` を実行するときに、コールバックに渡される情報を保持するクラス。 例を作成し、 `TaskInfo` オブジェクトし、文字列データを割り当てます。<xref:System.Threading.RegisteredWaitHandle> によって返される、 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> にメソッドが割り当てられている、 `Handle` のフィールド、 `TaskInfo` オブジェクトのコールバック メソッドにアクセスできるように、 <xref:System.Threading.RegisteredWaitHandle>です。  
  
 指定するだけでなく `TaskInfo` コールバック メソッドの呼び出しに渡されるオブジェクトとして、 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> メソッドは、指定、 <xref:System.Threading.AutoResetEvent> 、タスクが待機する、 <xref:System.Threading.WaitOrTimerCallback> を表すデリゲート、 `WaitProc` コールバック メソッド、1 つの 2 番目のタイムアウト間隔、および複数のコールバック。  
  
 メイン スレッドに通知すると、 <xref:System.Threading.AutoResetEvent> を呼び出してその <xref:System.Threading.EventWaitHandle.Set%2A> 、メソッド、 <xref:System.Threading.WaitOrTimerCallback> デリゲートが呼び出されます。`WaitProc` メソッド テスト <xref:System.Threading.RegisteredWaitHandle> タイムアウトが発生したかどうかを決定します。 待機ハンドルがシグナル状態であるため、コールバックが呼び出された場合、 `WaitProc` メソッドの登録を解除、 <xref:System.Threading.RegisteredWaitHandle>, 、その他のコールバックを停止します。 タイムアウトの場合は、タスクは、待機を続けます。`WaitProc` メソッドは、コンソールにメッセージを印刷することで終了します。  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public bool Unregister (System.Threading.WaitHandle waitObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unregister(class System.Threading.WaitHandle waitObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <see cref="T:System.Threading.WaitHandle" /> シグナル状態になります。</param>
        <summary>によって発行された登録された待機操作をキャンセル、 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> メソッドです。</summary>
        <returns>
          <see langword="true" /> 関数が成功した場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `waitObject` を指定すると、通知を受ける場合にのみ、 <xref:System.Threading.RegisteredWaitHandle> が正常に登録されていません。 コールバック メソッドが実行中である場合と <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> 実行されると、 `waitObject` コールバック メソッドが完了するまでは通知されません。 具体的には、コールバック メソッドを実行する場合に <xref:System.Threading.RegisteredWaitHandle.Unregister%2A>, 、`waitObject` そのコールバック メソッドが完了するまでは通知されません。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Threading.RegisteredWaitHandle.Unregister%2A> 待機ハンドルがシグナル状態になるために、コールバックが発生した場合は、タスクの登録を削除します。  
  
 使用する方法も示します、 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> メソッドを指定した待機ハンドルがシグナル通知されたときに、指定されたコールバック メソッドを実行します。 コールバック メソッドは、この例では `WaitProc`, 、待機ハンドルは、 <xref:System.Threading.AutoResetEvent>です。  
  
 例では、定義、 `TaskInfo` を実行するときに、コールバックに渡される情報を保持するクラス。 例を作成し、 `TaskInfo` オブジェクトし、文字列データを割り当てます。<xref:System.Threading.RegisteredWaitHandle> によって返される、 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> にメソッドが割り当てられている、 `Handle` のフィールド、 `TaskInfo` オブジェクトのコールバック メソッドにアクセスできるように、 <xref:System.Threading.RegisteredWaitHandle>です。  
  
 指定するだけでなく `TaskInfo` コールバック メソッドの呼び出しに渡されるオブジェクトとして、 <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> メソッドは、指定、 <xref:System.Threading.AutoResetEvent> 、タスクが待機する、 <xref:System.Threading.WaitOrTimerCallback> を表すデリゲート、 `WaitProc` コールバック メソッド、1 つの 2 番目のタイムアウト間隔、および複数のコールバック。  
  
 メイン スレッドに通知すると、 <xref:System.Threading.AutoResetEvent> を呼び出してその <xref:System.Threading.EventWaitHandle.Set%2A> 、メソッド、 <xref:System.Threading.WaitOrTimerCallback> デリゲートが呼び出されます。`WaitProc` メソッド テスト <xref:System.Threading.RegisteredWaitHandle> タイムアウトが発生したかどうかを決定します。 待機ハンドルがシグナル状態であるため、コールバックが呼び出された場合、 `WaitProc` メソッドの登録を解除、 <xref:System.Threading.RegisteredWaitHandle>, 、その他のコールバックを停止します。 タイムアウトの場合は、タスクは、待機を続けます。`WaitProc` メソッドは、コンソールにメッセージを印刷することで終了します。  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>