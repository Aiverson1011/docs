<Type Name="Timer" FullName="System.Threading.Timer">
  <TypeSignature Language="C#" Value="public sealed class Timer : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Timer extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Timer" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Timer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定した間隔で、スレッド プール スレッドでメソッドを実行するための機構を提供します。 このクラスは継承できません。  
  
 この型の .NET Framework ソース コードを参照するには、[参照ソース](http://referencesource.microsoft.com/#mscorlib/system/threading/timer.cs#051a39d380760b26)をご覧ください。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/timer.cs#051a39d380760b26). You can browse through the source code online, download the reference for offline viewing, and step through the sources \(including patches and updates\) during debugging; see [instructions](http://referencesource.microsoft.com/).  
  
 Use a <xref:System.Threading.TimerCallback> delegate to specify the method you want the <xref:System.Threading.Timer> to execute. The signature of the <xref:System.Threading.TimerCallback> delegate is:  
  
```csharp  
void TimerCallback(Object state)  
```  
  
```cpp  
void TimerCallback(Object state)  
```  
  
```vb  
Sub TimerCallback(state As Object)  
```  
  
 The timer delegate is specified when the timer is constructed, and cannot be changed. The method does not execute on the thread that created the timer; it executes on a <xref:System.Threading.ThreadPool> thread supplied by the system.  
  
> [!TIP]
>  The .NET Framework Class Library includes four classes named **languageKeyword tag is not supported!!!!**  
> , each of which offers different functionality:  
>   
>  -   <xref:System.Timers.Timer?displayProperty=fullName>, which fires an event and executes the code in one or more event sinks at regular intervals. The class is intended for use as a server\-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  
> -   <xref:System.Threading.Timer?displayProperty=fullName>, which executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the <xref:System.Timers.Timer?displayProperty=fullName> class, this class is intended for use as a server\-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  
> -   <xref:System.Windows.Forms.Timer?displayProperty=fullName>, a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals. The component has no user interface and is designed for use in a single\-threaded environment; it executes on the UI thread.  
> -   <xref:System.Web.UI.Timer?displayProperty=fullName>, an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.  
  
 When you create a timer, you can specify an amount of time to wait before the first execution of the method \(due time\), and an amount of time to wait between subsequent executions \(period\). The <xref:System.Threading.Timer> class has the same resolution as the system clock. This means that if the period is less than the resolution of the system clock, the <xref:System.Threading.TimerCallback> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems. You can change the due time and period, or disable the timer, by using the <xref:System.Threading.Timer.Change%2A> method.  
  
> [!NOTE]
>  As long as you are using a <xref:System.Threading.Timer>, you must keep a reference to it. As with any managed object, a <xref:System.Threading.Timer> is subject to garbage collection when there are no references to it. The fact that a <xref:System.Threading.Timer> is still active does not prevent it from being collected.  
  
 When a timer is no longer needed, use the <xref:System.Threading.Timer.Dispose%2A> method to free the resources held by the timer. Note that callbacks can occur after the <xref:System.Threading.Timer.Dispose> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> method overload to wait until all callbacks have completed.  
  
 The callback method executed by the timer should be reentrant, because it is called on <xref:System.Threading.ThreadPool> threads. The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.  
  
> [!NOTE]
>  <xref:System.Threading.Timer?displayProperty=fullName> is a simple, lightweight timer that uses callback methods and is served by thread pool threads. It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread. <xref:System.Windows.Forms.Timer?displayProperty=fullName> is a better choice for use with Windows Forms. For server\-based timer functionality, you might consider using <xref:System.Timers.Timer?displayProperty=fullName>, which raises events and has additional features.  
  
   
  
## 例  
 The following example defines a `StatusChecker` class  that includes a `CheckStatus` method whose signature is the same as the <xref:System.Threading.TimerCallback> delegate. The  **parameterReference tag is not supported!!!!**  
 argument of the `CheckStatus` method is an <xref:System.Threading.AutoResetEvent> object that is used to synchronize the application thread and the thread pool thread that executes the callback delegate. The `StatusChecker` class also includes two state variables:  
  
 `invokeCount`  
 Indicates the number of times the callback method has been invoked.  
  
 `maxCount`  
 Determines the maximum number of times the callback method should be invoked.  
  
 The application thread creates the timer, which waits one second and then executes  the `CheckStatus` callback method every 250 milliseconds. The application thread then blocks until the <xref:System.Threading.AutoResetEvent> object is signaled. When the `CheckStatus` callback method executes `maxCount` times, it calls the **languageKeyword tag is not supported!!!!**  
 method to set the state of the <xref:System.Threading.AutoResetEvent> object to signaled. The first time this happens, the application thread calls the <xref:System.Threading.Timer.Change%28System.Int32%2CSystem.Int32%29> method so that the callback method now executes every half second. It once again blocks until the <xref:System.Threading.AutoResetEvent> object is signaled. When this happens, the timer is destroyed by calling its <xref:System.Threading.Timer.Dispose%2A> method, and the application terminates.  
  
 [!code-cpp[System.Threading.Timer\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>This type is thread safe.</threadsafe>
    <altmember cref="T:System.Threading.TimerCallback" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
      </Parameters>
      <Docs>
        <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> を実行するメソッドを表すデリゲートします。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Threading.Timer" /> 無限の期間および無制限の期限を時間、新しく作成されたを使用して <see cref="T:System.Threading.Timer" /> 状態オブジェクトとしてオブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する場合に、このコンス トラクターを呼び出す、 <xref:System.Threading.Timer> 状態オブジェクトとしてオブジェクト自体です。 タイマーを作成した後、 <xref:System.Threading.Timer.Change%2A> 間隔と時間の期限を設定します。  
  
 このコンス トラクターは、無制限の期限を指定します。 最初のコールバックとコールバックの最初のコールバックの前に発生しないようにするために、間隔を無制限前、 <xref:System.Threading.Timer> 状態オブジェクトにオブジェクトが割り当てられています。  
  
 指定されたメソッド `callback` で呼び出されるので、再入可能ならない <xref:System.Threading.ThreadPool> スレッドです。 メソッドは、タイマーの間隔は、メソッドの実行に必要な時間よりも小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プールのスレッドで同時に実行できます。  
  
   
  
## 例  
 次のコード例では、状態オブジェクトとしてタイマー自体を使用して、新しいタイマーを作成します。<xref:System.Threading.Timer.Change%2A> タイマーを開始するメソッドを使用します。 タイマーのコールバックが発生すると、タイマーを無効にする状態オブジェクトが使用されます。  
  
 [!code-csharp[TimerSelfCtor\#1](~/samples/snippets/csharp/VS_Snippets_Misc/timerSelfCtor/CS/source.cs#1)]
 [!code-vb[TimerSelfCtor\#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/timerSelfCtor/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> を実行するメソッドを表すデリゲートします。</param>
        <param name="state">コールバック メソッドで使用される情報を格納したオブジェクトまたは <see langword="null" />です。</param>
        <param name="dueTime">前に遅延する時間 <c>callback</c> ミリ秒単位で呼び出されます。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 、タイマーが起動しないようにします。 0 を指定して、タイマーをすぐに開始します。</param>
        <param name="period">呼び出しの間の時間間隔 <c>callback</c>, 、\(ミリ秒単位\)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 周期的なシグナル通知を無効にします。</param>
        <summary>新しいインスタンスを初期化、 <see langword="Timer" /> クラス、32 ビット符号付き整数を使用して時間間隔を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されたデリゲート、 `callback` パラメーターが後に 1 回呼び出される `dueTime` が経過すると、およびたびに、その後、 `period` 間隔が経過するまでの時間します。  
  
 場合 `dueTime` ゼロ \(0\) は、 `callback` 直後に呼び出されます。 場合 `dueTime` は <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, 、`callback` は呼び出されません。 タイマーは無効になりますが、呼び出すことで再び有効にすることができます、 <xref:System.Threading.Timer.Change%2A> メソッドです。  
  
 <xref:System.Threading.Timer> クラスには、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒では、システム時計と同じ解像度、 `callback` 場合システム クロックの分解能によって定義された間隔で実行されるデリゲート `period` システム時計の解像度より小さい。 場合 `period` はゼロ \(0\) または <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> と `dueTime` は <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, 、`callback` が呼び出されます。 タイマーの定期的な動作を無効にしたができる再有効にするを使用して、 <xref:System.Threading.Timer.Change%2A> メソッドです。  
  
 指定されたメソッド `callback` で呼び出されるので、再入可能ならない <xref:System.Threading.ThreadPool> スレッドです。 メソッドは、タイマーの間隔は、メソッドの実行に必要な時間よりも小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プールのスレッドで同時に実行できます。  
  
   
  
## 例  
 次のコード例を作成する方法を示しています、 `TimerCallback` 委任し、の新しいインスタンスを初期化、 `Timer` クラスです。  
  
 [!code-cpp[System.Threading.Timer\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> または <paramref name="period" /> パラメーターが負の値と等しくない <see cref="F:System.Threading.Timeout.Infinite" />します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="callback">A <see cref="T:System.Threading.TimerCallback" /> を実行するメソッドを表すデリゲートします。</param>
        <param name="state">コールバック メソッドで使用される情報を格納したオブジェクトまたは <see langword="null" />です。</param>
        <param name="dueTime">前に遅延する時間 <c>callback</c> ミリ秒単位で呼び出されます。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 、タイマーが起動しないようにします。 0 を指定して、タイマーをすぐに開始します。</param>
        <param name="period">呼び出しの間の時間間隔 <c>callback</c>, 、\(ミリ秒単位\)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 周期的なシグナル通知を無効にします。</param>
        <summary>新しいインスタンスを初期化、 <see langword="Timer" /> クラス、64 ビット符号付き整数を使用して時間間隔を計測します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されたデリゲート、 `callback` パラメーターが後に 1 回呼び出される `dueTime` が経過すると、およびたびに、その後、 `period` 間隔が経過するまでの時間します。  
  
 場合 `dueTime` ゼロ \(0\) は、 `callback` 直後に呼び出されます。 場合 `dueTime` は <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, 、`callback` は呼び出されません。 タイマーは無効になりますが、呼び出すことで再び有効にすることができます、 <xref:System.Threading.Timer.Change%2A> メソッドです。  
  
 <xref:System.Threading.Timer> クラスには、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒では、システム時計と同じ解像度、 `callback` 場合システム クロックの分解能によって定義された間隔で実行されるデリゲート `period` システム時計の解像度より小さい。 場合 `period` はゼロ \(0\) または <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> と `dueTime` は <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, 、`callback` が呼び出されます。 タイマーの定期的な動作を無効にしたができる再有効にするを使用して、 <xref:System.Threading.Timer.Change%2A> メソッドです。  
  
 指定されたメソッド `callback` で呼び出されるので、再入可能ならない <xref:System.Threading.ThreadPool> スレッドです。 メソッドは、タイマーの間隔は、メソッドの実行に必要な時間よりも小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プールのスレッドで同時に実行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> または <paramref name="period" /> パラメーターが負の値と等しくない <see cref="F:System.Threading.Timeout.Infinite" />します。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> または <paramref name="period" /> パラメーターが 4294967294 より大きい。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback">実行するメソッドを表すデリゲート。</param>
        <param name="state">コールバック メソッドで使用される情報を格納したオブジェクトまたは <see langword="null" />です。</param>
        <param name="dueTime">前に遅延する時間数、 <c>callback</c> パラメーターは、メソッドを呼び出します。 \-1 ミリ秒を指定して、タイマーが開始されないようにします。 0 を指定して、タイマーをすぐに開始します。</param>
        <param name="period">によって参照されるメソッドの呼び出し間の時間間隔 <c>callback</c>します。 \-1 ミリ秒を指定して、周期的なシグナル通知を無効にします。</param>
        <summary>新しいインスタンスを初期化、 <see langword="Timer" /> クラスを使用して <see cref="T:System.TimeSpan" /> 時間間隔を測定する値。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されたデリゲート、 `callback` パラメーターが後に 1 回呼び出される `dueTime` が経過すると、およびたびに、その後、 `period` 間隔が経過するまでの時間します。  
  
 場合 `dueTime` ゼロ \(0\) は、 `callback` 直後に呼び出されます。 場合 `dueTime` 負 \(\-1\) 1 つ \(ミリ秒単位\) は、 `callback` は呼び出されません。 タイマーは無効になりますが、呼び出すことで再び有効にすることができます、 <xref:System.Threading.Timer.Change%2A> メソッドです。  
  
 <xref:System.Threading.Timer> クラスには、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒では、システム時計と同じ解像度、 `callback` 場合システム クロックの分解能によって定義された間隔で実行されるデリゲート `period` システム時計の解像度より小さい。 場合 `period` はゼロ \(0\) または負の値の\-1 ミリ秒と `dueTime` が正の値、 `callback` が呼び出されます。 タイマーの定期的な動作を無効にしたができる再有効にするを使用して、 <xref:System.Threading.Timer.Change%2A> メソッドです。  
  
 指定されたメソッド `callback` で呼び出されるので、再入可能ならない <xref:System.Threading.ThreadPool> スレッドです。 メソッドは、タイマーの間隔は、メソッドの実行に必要な時間よりも小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プールのスレッドで同時に実行できます。  
  
   
  
## 例  
 次のコード例を作成する方法を示しています、 `TimerCallback` 委任し、の新しいインスタンスを初期化、 `Timer` クラスです。  
  
 [!code-cpp[System.Threading.Timer2\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値のミリ秒数 <paramref name="dueTime" /> または <paramref name="period" /> は負の値と等しくない <see cref="F:System.Threading.Timeout.Infinite" />, 、またはよりも大きい <see cref="F:System.Int32.MaxValue" />します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.TimerCallback callback, object state, unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.TimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="callback">実行するメソッドを表すデリゲート。</param>
        <param name="state">コールバック メソッドで使用される情報を格納したオブジェクトまたは <see langword="null" />です。</param>
        <param name="dueTime">前に遅延する時間 <c>callback</c> ミリ秒単位で呼び出されます。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 、タイマーが起動しないようにします。 0 を指定して、タイマーをすぐに開始します。</param>
        <param name="period">呼び出しの間の時間間隔 <c>callback</c>, 、\(ミリ秒単位\)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 周期的なシグナル通知を無効にします。</param>
        <summary>新しいインスタンスを初期化、 <see langword="Timer" /> クラス、32 ビット符号なし整数を使用して時間間隔を計測します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されたデリゲート、 `callback` パラメーターが後に 1 回呼び出される `dueTime` が経過すると、およびたびに、その後、 `period` 間隔が経過するまでの時間します。  
  
 場合 `dueTime` ゼロ \(0\) は、 `callback` 直後に呼び出されます。 場合 `dueTime` は <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, 、`callback` は呼び出されません。 タイマーは無効になりますが、呼び出すことで再び有効にすることができます、 <xref:System.Threading.Timer.Change%2A> メソッドです。  
  
 <xref:System.Threading.Timer> クラスには、Windows 7 および Windows 8 のシステムでは、約 15 ミリ秒では、システム時計と同じ解像度、 `callback` 場合システム クロックの分解能によって定義された間隔で実行されるデリゲート `period` システム時計の解像度より小さい。 場合 `period` はゼロ \(0\) または <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> と `dueTime` は <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, 、`callback` が呼び出されます。 タイマーの定期的な動作を無効にしたができる再有効にするを使用して、 <xref:System.Threading.Timer.Change%2A> メソッドです。  
  
 指定されたメソッド `callback` で呼び出されるので、再入可能ならない <xref:System.Threading.ThreadPool> スレッドです。 メソッドは、タイマーの間隔は、メソッドの実行に必要な時間よりも小さい場合、またはすべてのスレッド プールのスレッドが使用されており、メソッドが複数回のキューに置かれた場合、2 つのスレッド プールのスレッドで同時に実行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> または <paramref name="period" /> パラメーターが負の値と等しくない <see cref="F:System.Threading.Timeout.Infinite" />します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (int dueTime, int period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int32 dueTime, int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int32" />
        <Parameter Name="period" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dueTime">時に指定されたコールバック メソッドを呼び出す前に遅延する時間数、 <see cref="T:System.Threading.Timer" /> \(ミリ秒単位\) が作成されました。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> タイマーが再開されないようにします。 0 を指定して、タイマーをすぐに再開します。</param>
        <param name="period">コールバック メソッドの呼び出し間の時間間隔が指定されたときに、 <see cref="T:System.Threading.Timer" /> \(ミリ秒単位\) が作成されました。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 周期的なシグナル通知を無効にします。</param>
        <summary>時間間隔を計るために 32 ビット符号付き整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
        <returns>
          <see langword="true" /> 場合は、タイマーが正常に更新されました。それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コールバック メソッドの呼び出し後に 1 回 `dueTime` が経過すると、および各、それ以降の時間で指定された期間 `period` が経過するとします。  
  
 場合 `dueTime` ゼロ \(0\) は、すぐにコールバック メソッドが呼び出されます。 場合 `dueTime` は <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, ことができますが、コールバック メソッドが呼び出されることはありません。 タイマーを無効にすると、呼び出すことで再び有効にする <xref:System.Threading.Timer.Change%2A> に正の値を指定すると `dueTime`です。  
  
 場合 `period` はゼロ \(0\) または <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, 、および `dueTime` は <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, ことができますが、コールバック メソッドは 1 回呼び出されます。 タイマーの定期的な動作を無効にすると、再度呼び出すことによって有効にする <xref:System.Threading.Timer.Change%2A> に正の値を指定すると `period`です。  
  
 <xref:System.Threading.Timer.Change%2A> からメソッドを呼び出すことができる、 <xref:System.Threading.TimerCallback> を委任します。  
  
   
  
## 例  
 次のコード例では、開始、 `Timer` しの呼び出しのセット数後の期間を変更します。  
  
 [!code-cpp[System.Threading.Timer\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> 既に破棄されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> または <paramref name="period" /> パラメーターが負の値と等しくない <see cref="F:System.Threading.Timeout.Infinite" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (long dueTime, long period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(int64 dueTime, int64 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.Int64,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.Int64" />
        <Parameter Name="period" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dueTime">時に指定されたコールバック メソッドを呼び出す前に遅延する時間数、 <see cref="T:System.Threading.Timer" /> \(ミリ秒単位\) が作成されました。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> タイマーが再開されないようにします。 0 を指定して、タイマーをすぐに再開します。</param>
        <param name="period">コールバック メソッドの呼び出し間の時間間隔が指定されたときに、 <see cref="T:System.Threading.Timer" /> \(ミリ秒単位\) が作成されました。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 周期的なシグナル通知を無効にします。</param>
        <summary>時間間隔を計るために 64 ビット符号付き整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
        <returns>
          <see langword="true" /> 場合は、タイマーが正常に更新されました。それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コールバック メソッドの呼び出し後に 1 回 `dueTime` が経過すると、および各、それ以降の時間で指定された期間 `period` が経過するとします。  
  
 場合 `dueTime` ゼロ \(0\) は、すぐにコールバック メソッドが呼び出されます。 場合 `dueTime` は <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, ことができますが、コールバック メソッドが呼び出されることはありません。 タイマーを無効にすると、呼び出すことで再び有効にする <xref:System.Threading.Timer.Change%2A> に正の値を指定すると `dueTime`です。  
  
 場合 `period` はゼロ \(0\) または <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, 、および `dueTime` は <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, ことができますが、コールバック メソッドは 1 回呼び出されます。 タイマーの定期的な動作を無効にすると、再度呼び出すことによって有効にする <xref:System.Threading.Timer.Change%2A> に正の値を指定すると `period`です。  
  
 <xref:System.Threading.Timer.Change%2A> からメソッドを呼び出すことができる、 <xref:System.Threading.TimerCallback> を委任します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> 既に破棄されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> または <paramref name="period" /> パラメーターは、\-1 より小さくします。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> または <paramref name="period" /> パラメーターが 4294967294 より大きい。</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dueTime">A <see cref="T:System.TimeSpan" /> 時に指定されたコールバック メソッドを呼び出す前に遅延する時間を表す、 <see cref="T:System.Threading.Timer" /> 構築されています。 タイマーが再開されないようにする \-1 を指定します。 0 を指定して、タイマーをすぐに再開します。</param>
        <param name="period">コールバック メソッドの呼び出し間の時間間隔が指定されたときに、 <see cref="T:System.Threading.Timer" /> を構築しました。 \-1 ミリ秒を指定して、周期的なシグナル通知を無効にします。</param>
        <summary>開始時刻とメソッドの呼び出しを使用して、タイマーの間隔を変更 <see cref="T:System.TimeSpan" /> 時間間隔を測定する値。</summary>
        <returns>
          <see langword="true" /> 場合は、タイマーが正常に更新されました。それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コールバック メソッドの呼び出し後に 1 回 `dueTime` が経過すると、および各、それ以降の時間で指定された期間 `period` が経過するとします。  
  
 場合 `dueTime` ゼロ \(0\) は、すぐにコールバック メソッドが呼び出されます。 場合 `dueTime` 負の値の\-1 ミリ秒は、コールバック メソッドが呼び出されることはありません。 タイマーが無効になっていることができますが呼び出すことで再び有効にする <xref:System.Threading.Timer.Change%2A> に正の値を指定すると `dueTime`です。  
  
 場合 `period` はゼロ \(0\) または負 \(\-1\) 1 つ \(ミリ秒単位\) と `dueTime` が正の値、コールバック メソッドが 1 回呼び出される、タイマーの定期的な動作は無効になりますが、呼び出すことで再び有効にすることができます <xref:System.Threading.Timer.Change%2A> 0 より大きい値を指定して `period`です。  
  
 <xref:System.Threading.Timer.Change%2A> からメソッドを呼び出すことができる、 <xref:System.Threading.TimerCallback> を委任します。  
  
   
  
## 例  
 次のコード例では、開始、 `Timer` しの呼び出しのセット数後の期間を変更します。  
  
 [!code-cpp[System.Threading.Timer2\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer2/CPP/source2.cpp#1)]
 [!code-csharp[System.Threading.Timer2\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer2/CS/source2.cs#1)]
 [!code-vb[System.Threading.Timer2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer2/VB/source2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> 既に破棄されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dueTime" /> または <paramref name="period" /> \(ミリ秒単位\) のパラメーターは、\-1 より小さくします。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="dueTime" /> または <paramref name="period" /> \(ミリ秒単位\) のパラメーターが 4294967294 より大きい。</exception>
      </Docs>
    </Member>
    <Member MemberName="Change">
      <MemberSignature Language="C#" Value="public bool Change (uint dueTime, uint period);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Change(unsigned int32 dueTime, unsigned int32 period) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dueTime" Type="System.UInt32" />
        <Parameter Name="period" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="dueTime">時に指定されたコールバック メソッドを呼び出す前に遅延する時間数、 <see cref="T:System.Threading.Timer" /> \(ミリ秒単位\) が作成されました。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> タイマーが再開されないようにします。 0 を指定して、タイマーをすぐに再開します。</param>
        <param name="period">コールバック メソッドの呼び出し間の時間間隔が指定されたときに、 <see cref="T:System.Threading.Timer" /> \(ミリ秒単位\) が作成されました。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 周期的なシグナル通知を無効にします。</param>
        <summary>時間間隔を計るために 32 ビット符号なし整数を使用して、タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
        <returns>
          <see langword="true" /> 場合は、タイマーが正常に更新されました。それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コールバック メソッドの呼び出し後に 1 回 `dueTime` が経過すると、および各、それ以降の時間で指定された期間 `period` が経過するとします。  
  
 場合 `dueTime` ゼロ \(0\) は、すぐにコールバック メソッドが呼び出されます。 場合 `dueTime` は <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, ことができますが、コールバック メソッドが呼び出されることはありません。 タイマーを無効にすると、呼び出すことで再び有効にする <xref:System.Threading.Timer.Change%2A> に正の値を指定すると `dueTime`です。  
  
 場合 `period` はゼロ \(0\) または <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, 、および `dueTime` は <xref:System.Threading.Timeout.Infinite?displayProperty=fullName>, ことができますが、コールバック メソッドは 1 回呼び出されます。 タイマーの定期的な動作を無効にすると、再度呼び出すことによって有効にする <xref:System.Threading.Timer.Change%2A> に正の値を指定すると `period`です。  
  
 <xref:System.Threading.Timer.Change%2A> からメソッドを呼び出すことができる、 <xref:System.Threading.TimerCallback> を委任します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Threading.Timer" /> 既に破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のインスタンスによって使用されているすべてのリソースを解放 <see cref="T:System.Threading.Timer" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す `Dispose` により、リソースで使用される、 <xref:System.Threading.Timer> 他の目的を再割り当ています。`Dispose` の詳細については、「[&#91;\<topic:\/\/cpconCleaningUpUnmanagedResources\>&#93;](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213)」を参照してください。  
  
> [!NOTE]
>  コールバックが後に発生することが、 <xref:System.Threading.Timer.Dispose> メソッドのオーバー ロードが呼び出されたため、タイマー キューにスレッド プールのスレッドでコールバックを実行します。 使用することができます、 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> メソッドのオーバー ロードは、すべてのコールバックが完了するまで待機します。  
  
   
  
## 例  
 次のコード例で保持されているリソースを解放する方法を示しています、 `Timer`です。  
  
 [!code-cpp[System.Threading.Timer\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.Timer/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.Timer\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.Timer/CS/source.cs#1)]
 [!code-vb[System.Threading.Timer\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.Timer/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Dispose(class System.Threading.WaitHandle notifyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyObject" Type="System.Threading.WaitHandle" />
      </Parameters>
      <Docs>
        <param name="notifyObject">
          <see cref="T:System.Threading.WaitHandle" /> シグナル状態になると、 <see langword="Timer" /> 破棄されています。</param>
        <summary>現在のインスタンスによって使用されているすべてのリソースを解放 <see cref="T:System.Threading.Timer" /> と、タイマーが破棄されたと通知します。</summary>
        <returns>
          <see langword="true" /> 関数が成功した場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す `Dispose` により、リソースで使用される、 <xref:System.Threading.Timer> 他の目的を再割り当ています。`Dispose` の詳細については、「[&#91;\<topic:\/\/cpconCleaningUpUnmanagedResources\>&#93;](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213)」を参照してください。  
  
 このメソッドの完了時、通知、 <xref:System.Threading.WaitHandle> によって指定された、 `notifyObject` パラメーター。このオーバー ロードを使用して、 <xref:System.Threading.Timer.Dispose%2A> メソッドが、タイマーが破棄されていないことを確実になるまでブロックしたい場合。 現在キューに置かれたすべてのコールバックが完了するまで、タイマーが破棄されていません。  
  
> [!NOTE]
>  コールバックで使用する場合、 <xref:System.Threading.Timer.Change%2A> を設定するメソッド、 `dueTime` 競合状態が発生するパラメーターを 0 に、ときに、 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> メソッドのオーバー ロードが呼び出されます: 場合は、タイマー キューに配置する前に新しいコールバック、 <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> コールバックがキューないはメソッドのオーバー ロードが検出された <xref:System.Threading.Timer.Dispose%28System.Threading.WaitHandle%29> ; はブロックされます新しいコールバックはキューに配置されているときに、それ以外の場合、タイマーが破棄される <xref:System.ObjectDisposedException> 新しいコールバックを呼び出す場合にスローされる、 <xref:System.Threading.Timer.Change%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="notifyObject" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Change">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>タイマーの開始時刻とメソッドの呼び出しの間隔を変更します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see langword="Timer" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Timer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のインスタンスによって使用されているすべてのリソースを解放 <see cref="T:System.Threading.Timer" />します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>