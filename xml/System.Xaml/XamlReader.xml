<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>XAML 入力を処理し、XAML ノード ストリームを生成するクラスの基本定義を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xaml.XamlReader> 抽象クラスは、実装や作業結果があるすべてのメンバーの定義を提供しません。 必要で、実装がメンバー <xref:System.Xaml.XamlReader> はそのメンバーの「解説」に記載されています。 具体的には、 <xref:System.Xaml.XamlReader> いくつかの抽象メンバーを実装する必要がある、いくつかの仮想メンバーです。  
  
 仮想メンバーの <xref:System.Xaml.XamlReader.ReadSubtree%2A> と <xref:System.Xaml.XamlReader.Skip%2A> 各ほとんどの場合に適した既定の実装を提供します。 ただし、 <xref:System.Xaml.XamlReader.ReadSubtree%2A> と <xref:System.Xaml.XamlReader.Skip%2A> 実装の XAML リーダーの想定されるその他の動作に依存して既定の実装。 具体的には、依存している、 <xref:System.Xaml.XamlReader.Read%2A> をオーバーライドします。<xref:System.Xaml.XamlReader.Dispose%2A> 作業用の既定の実装を持つ仮想メンバーであります。  
  
 次の 2 つのクラスと System.Xaml アセンブリの .NET Framework XAML サービスで最も関連性が実用的な派生クラスがあります。  
  
-   <xref:System.Xaml.XamlObjectReader>, 、実行時にアプリケーションのアクティブなオブジェクト グラフなど、オブジェクト グラフを読み取ります。  
  
-   <xref:System.Xaml.XamlXmlReader>, 、一般的なを使用して XML テキスト ファイルの形式で XAML を読み取ります <xref:System.Xml.XmlReader> 中間ヘルパー クラスとしてファイルを読み込みます。  
  
 その他のフレームワークからの他の XAML リーダーを含める <xref:System.Windows.Baml2006.Baml2006Reader> と <xref:System.Activities.Debugger.XamlDebuggerXmlReader>です。  
  
 <xref:System.Xaml.XamlReader> 異なります [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] と <xref:System.Xml.XmlReader> ためにの設計原則 <xref:System.Xaml.XamlReader> が、 `Create` を基になる既定の XAML リーダーの実装を返すメソッド。 代わりに、そのコンス トラクターまたはその他のクラスに固有のヘルパー Api を呼び出すことによって派生の特定の XAML リーダー クラスをインスタンス化する必要があります。  
  
## サブツリーのリーダー  
 ほとんどの場合を呼び出す <xref:System.Xaml.XamlReader> から派生した XAML リーダーの特定のクラスのコンテキスト内の API <xref:System.Xaml.XamlReader>します。 ただし、特定の 1 つのケースにアクセスする <xref:System.Xaml.XamlReader> パブリックおよびから派生しないのは実用的な XAML リーダー インスタンスの API <xref:System.Xaml.XamlObjectReader> または <xref:System.Xaml.XamlXmlReader>です。 この例は、呼び出すときに <xref:System.Xaml.XamlReader.ReadSubtree%2A>, を返す、 <xref:System.Xaml.XamlReader> インスタンス。 既定の実装で、 <xref:System.Xaml.XamlReader> は内部クラスは、この API によって返されます。  
  
 <xref:System.Xaml.XamlReader> のサブツリーの読み取りがある無効などの Api で有効なアクションを取得した <xref:System.Xaml.XamlReader.Read%2A> と <xref:System.Xaml.XamlReader.NodeType%2A>, 、されそれらのアクションは、親リーダー クラスに基づいています。 この設計により、サブツリーが入力されたフレームのレベルを追跡するために内部クラスです。 機能しているサブツリー <xref:System.Xaml.XamlReader> により、現在のノードの位置は、サブツリーの境界を超えて移動する場合は、特定のサブツリーのリーダー ファイルの終わりと報告されることを確認または `null` 現在のノードにします。  
  
 特定のサブツリーのリーダーの使用率に関する注意事項が含まれている <xref:System.Xaml.XamlReader> Api です。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初期化、 <see cref="T:System.Xaml.XamlReader" /> クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XAML ノード ストリームを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 基底クラスの実装を呼び出す <xref:System.Xaml.XamlReader.Close%2A> 呼び出し <xref:System.Xaml.XamlReader.Dispose%2A> で、 `isDisposing` パラメーターとして `true`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースを解放するには <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>使用されるアンマネージ リソースを解放、 <see cref="T:System.Xaml.XamlReader" />, 、し、必要に応じてマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 取得する基本クラスを呼び出す必要があります <xref:System.Xaml.XamlReader.IsDisposed%2A> \= `true`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得するかどうか <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> が呼び出されています。</summary>
        <value>
          <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> が呼び出されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスとして実装された場合は、リーダーの位置がファイルの終わりにあるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 位置が、XAML ノード ストリームの概念ファイルの末尾にある場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サブツリーのリーダーが呼び出すことができます <xref:System.Xaml.XamlReader.IsEof%2A>, 、入力されたサブツリーの境界を正確に反映動作をします。 詳細については、「サブツリー リーダー」」セクションを参照してください。 <xref:System.Xaml.XamlReader>, 、を参照してくださいまたは <xref:System.Xaml.XamlReader.ReadSubtree%2A>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスとして実装された場合、現在のメンバーを取得、リーダーの位置にあるリーダーの位置がある場合、 <see cref="F:System.Xaml.XamlNodeType.StartMember" />です。</summary>
        <value>現在のメンバー。または <see langword="null" />, リーダーの位置がメンバーでない場合、します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サブツリーのリーダーが呼び出すことができます <xref:System.Xaml.XamlReader.Member%2A>, 、動作の制限があります。 詳細については、「サブツリー リーダー」」セクションを参照してください。 <xref:System.Xaml.XamlReader>, 、を参照してくださいまたは <xref:System.Xaml.XamlReader.ReadSubtree%2A>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスとして実装された場合は、現在のノードから XAML 名前空間情報を取得します。</summary>
        <value>使用可能である場合の XAML 名前空間については、それ以外の場合、 <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この API の設計が null 以外の結果の場合にのみを返すには、 <xref:System.Xaml.XamlReader.NodeType%2A> 、現在のノードは <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>です。 プロパティでは、XAML スキーマ コンテキストで認識されるオブジェクトまたはスコープの一般的な感覚でメンバーに適用される XAML 名前空間は報告されません。 アプリケーションが実行中の情報をキャッシュするための手段を提供する必要がありますのでの XAML 名前空間は、方法、ライターの XAML スキーマ コンテキスト報告する以外の方法では、その情報が必要な場合、XAML ノードを通過する時間します。 参照してください<xref:System.Xaml.XamlXmlReader.Namespace%2A> 参照の実装に関する注意事項にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスとして実装された場合は、現在のノードの種類を取得します。</summary>
        <value>値、 <see cref="T:System.Xaml.XamlNodeType" /> 列挙します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サブツリーのリーダーが呼び出すことができます <xref:System.Xaml.XamlReader.NodeType%2A>, 、動作の制限があります。 詳細については、「サブツリー リーダー」」セクションを参照してください。 <xref:System.Xaml.XamlReader>, 、を参照してくださいまたは <xref:System.Xaml.XamlReader.ReadSubtree%2A>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスとして実装された場合は、ノードがある場合、ソースからの次の XAML ノードを提供します。</summary>
        <returns>
          <see langword="true" /> ノードがある場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サブツリーのリーダーが呼び出すことができます <xref:System.Xaml.XamlReader.Read%2A>, 、動作の制限があります。 詳細については、「サブツリー リーダー」」セクションを参照してください。 <xref:System.Xaml.XamlReader>, 、を参照してくださいまたは <xref:System.Xaml.XamlReader.ReadSubtree%2A>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Xaml.XamlReader" /> 現在を基にした <see cref="T:System.Xaml.XamlReader" />, ここで、返された <see cref="T:System.Xaml.XamlReader" /> XAML ノードの構造のサブツリーを反復処理するために使用します。</summary>
        <returns>サブツリーの新しい XAML リーダー インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、既定の実装、有効な <xref:System.Xaml.XamlReader>です。 返された <xref:System.Xaml.XamlReader> 特定を制限する内部クラスは、 <xref:System.Xaml.XamlReader> アクション。 制限は次元設定されたサブツリーと XAML ノード セットでは、大規模なソースのファイルの終端を返すことのみを読み取り目的に設定された一貫性のあるまたは `null` サブツリーが終了したときに、現在のノードにします。  
  
 一般に、最初から現在のノードを確認する必要があります <xref:System.Xaml.XamlReader.Read%2A> サブツリーのリーダーが必要かどうかを判断します。 これを確認する方法があります実装に固有です。ただし、すべてサブツリーに対して複数のサブツリーのリーダーを作成しないでください。 さらに、場合によりノードのサブツリーのリーダーの呼び出しを回避 \(たとえば、 <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>\) ノードのサブツリーを含めることができません。  
  
 サブツリーのリーダーを取得したらを呼び出す必要があります <xref:System.Xaml.XamlReader.Read%2A> 現在のノードを取得するために \(または <xref:System.Xaml.XamlReader.Skip%2A> を次のノードを取得する\)。 自動的に取得しない最初のノード位置サブツリーのリーダーから作成するときにします。  
  
 呼び出して取得するリーダー <xref:System.Xaml.XamlReader.ReadSubtree%2A> この既定の実装は内部クラス。 内部クラスに基づいて、その動作、 <xref:System.Xaml.XamlReader> 実装されている場合に使用 <xref:System.Xaml.XamlReader.ReadSubtree%2A> が呼び出されます。 内部クラスの目的は、ラップする、 <xref:System.Xaml.XamlReader.Read%2A> および全般的な走査の各動作します。 追跡することによって目的のサブツリー内の検査がまだ <xref:System.Xaml.XamlNodeType.StartMember>\/<xref:System.Xaml.XamlNodeType.EndMember> ペアまたは <xref:System.Xaml.XamlNodeType.StartObject>\/<xref:System.Xaml.XamlNodeType.EndObject> のペアです。 正しくも返す `false` の <xref:System.Xaml.XamlReader.Read%2A> と `true` の <xref:System.Xaml.XamlReader.IsEof%2A> リーダーがあるときは、サブツリーの最後のエントリ ポイントで定義されています。 一般に、想定すること、 <xref:System.Xaml.XamlReader> API サブツリーのリーダーから呼び出しが、全体的な同じ実装 <xref:System.Xaml.XamlReader> 走査の各境界の動作を除く。  
  
 ただし、 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 仮想です。 そのため、特定 <xref:System.Xaml.XamlReader> 実装とは異なる動作を提供できます、 <xref:System.Xaml.XamlReader> 内部ラッパーの動作と <xref:System.Xaml.XamlReader> 実装もを無効にできますサブツリーのリーダーの機能を返すことによって <xref:System.NotImplementedException> またはその他の例外です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスとして実装された場合は、情報セットの XAML スキーマ コンテキスト情報を提供するオブジェクトを取得します。</summary>
        <value>詳細については、XAML スキーマ コンテキスト情報を提供するオブジェクトを設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のノードをスキップし、次のノードにリーダーの位置を進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 1 回スキップ、 <xref:System.Xaml.XamlReader.Read%2A> は既定値によって呼び出されます <xref:System.Xaml.XamlReader.Skip%2A> 実装します。 通常呼び出す必要はありません <xref:System.Xaml.XamlReader.Skip%2A> と <xref:System.Xaml.XamlReader.Read%2A> 順番です。  
  
 既定で <xref:System.Xaml.XamlReader.Skip%2A> 実装では、さまざまなアクションが行なわれますに応じて <xref:System.Xaml.XamlReader.NodeType%2A> リーダーの位置が現在使用中です。 リーダーの位置が現在使用中の場合、 <xref:System.Xaml.XamlNodeType.StartMember> または <xref:System.Xaml.XamlNodeType.StartObject>, 、オブジェクトまたはメンバーがスキップされます。 その他の <xref:System.Xaml.XamlReader.NodeType%2A> 値、何も行われません通話以外 <xref:System.Xaml.XamlReader.Read%2A> 現在の位置から。  
  
 サブツリーのリーダーが呼び出すことができます <xref:System.Xaml.XamlReader.Skip%2A>, 、動作の制限があります。 詳細については、「サブツリー リーダー」」セクションを参照してください。 <xref:System.Xaml.XamlReader>, 、を参照してくださいまたは <xref:System.Xaml.XamlReader.ReadSubtree%2A>です。  
  
 ノード ツリーの動作の <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=fullName> に相当する XML に基づく <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>します。 に基づいて、 <xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName> 動作の等価性 <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=fullName> ノードとそのサブツリーでは、1 つのエントリのノードだけでなくをスキップします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xaml.XamlReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスで実装された場合、取得、 <see cref="T:System.Xaml.XamlType" /> 、現在のノードです。</summary>
        <value>
          <see cref="T:System.Xaml.XamlType" /> の現在のノードまたは <see langword="null" />, オブジェクトの現在のリーダーの位置がない場合、します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サブツリーのリーダーが呼び出すことができます <xref:System.Xaml.XamlReader.Type%2A>, 、動作の制限があります。 詳細については、「サブツリー リーダー」」セクションを参照してください。 <xref:System.Xaml.XamlReader>, 、を参照してくださいまたは <xref:System.Xaml.XamlReader.ReadSubtree%2A>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスとして実装された場合は、現在のノードの値を取得します。</summary>
        <value>現在のノードの値または <see langword="null" />, 、現在のリーダーの位置に含まれていない場合、 <see cref="F:System.Xaml.XamlNodeType.Value" /> ノードの種類。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>