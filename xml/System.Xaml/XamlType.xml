<Type Name="XamlType" FullName="System.Xaml.XamlType">
  <TypeSignature Language="C#" Value="public class XamlType : IEquatable&lt;System.Xaml.XamlType&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlType extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.XamlType&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlType" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.XamlType&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>.NET Framework XAML サービスで実装されている XAML システム全体の一部としての XAML の型に関する情報を報告します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 多くの Api で、 <xref:System.Xaml.XamlType> のについてレポートする概念は、XAML 仕様 \[MS\-XAML\] の特定のセクションと同様、XAML の型に関する情報を提供します。  
  
 <xref:System.Xaml.XamlType> 広く使われて、.NET Framework XAML サービス API の XAML の型に関するレポート情報です。<xref:System.Xaml.XamlType> インスタンスを使用するために、または XAML ノード ストリームでは、やのような XAML 表現からそのメンバーにアクセスする XAML の型について知っておく必要がある情報を報告します。 方法に似ていますが、reporting <xref:System.Type> 入力リフレクション クラスと共にのシステムなど、CLR で <xref:System.Reflection.MemberInfo>, 、CLR 型とその使用状況に関する情報を提供します。  
  
 XAML 型システムを拡張するから派生できます <xref:System.Xaml.XamlType>します。 実効上には、する必要がありますも実装する、 <xref:System.Xaml.Schema.XamlTypeInvoker>です。<xref:System.Xaml.Schema.XamlTypeInvoker> バックアップ呼び出しの動作の一部として指定する型システムを使用する汎用化された XAML 型システムを有効にします。 特定のカスタム <xref:System.Xaml.Schema.XamlTypeInvoker> 、既定で使用される CLR の型システムへの依存関係を軽減する手段を提供 <xref:System.Xaml.XamlType> 動作します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type underlyingType, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="underlyingType" Type="System.Type" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="underlyingType">基になる CLR <see cref="T:System.Type" /> の XAML の種類を作成します。</param>
        <param name="schemaContext">XAML リーダーおよび XAML ライターの XAML スキーマ コンテキスト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlType" /> クラス基になる CLR 型情報に基づいています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">1 つ以上の <paramref name="underlyingType" /> または <paramref name="schemaContext" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlType (string typeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string typeName, class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; typeArguments, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="typeName">作成する型の名前。</param>
        <param name="typeArguments">型引数、 <see cref="T:System.Xaml.XamlType" /> ジェネリック型を表します。 指定できます \(および多くの場合は\) <see langword="null" />, 、表される型がジェネリック型ではないことを示します。</param>
        <param name="schemaContext">XAML リーダーと XAML ライターの XAML スキーマ コンテキスト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlType" /> クラス型の名前を文字列に基づいています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、protected のコンス トラクターです。 現在のパブリック派生クラスが存在しないを構築するため、この特定のパスを使用します。 既存のコンシューマーとして <xref:System.Xaml.XamlType>, 、その他のコンス トラクターのシグネチャを使用する必要があります \(<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29>, 、<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29>, 、または <xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>\) 初期化するために、 <xref:System.Xaml.XamlType> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">1 つ以上の <paramref name="typeName" /> または <paramref name="schemaContext" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlTypeInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type underlyingType, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlTypeInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="underlyingType" Type="System.Type" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlTypeInvoker" />
      </Parameters>
      <Docs>
        <param name="underlyingType">作成する XAML 型の基になる型。</param>
        <param name="schemaContext">XAML リーダーの XAML スキーマ コンテキスト。</param>
        <param name="invoker">
          <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> に対するランタイムのリフレクションを処理する実装を呼び出す、 <see cref="T:System.Xaml.XamlType" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlType" /> クラス型の基になる情報に基づいて、 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 実装します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">1 つ以上の <paramref name="underlyingType" /> または <paramref name="schemaContext" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (string unknownTypeNamespace, string unknownTypeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string unknownTypeNamespace, string unknownTypeName, class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; typeArguments, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="unknownTypeNamespace" Type="System.String" />
        <Parameter Name="unknownTypeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="unknownTypeNamespace">文字列としての型の XAML 名前空間。</param>
        <param name="unknownTypeName">指定された型の名前 <c>unknownTypeNamespace</c> の XAML 名前空間。</param>
        <param name="typeArguments">型引数、 <see cref="T:System.Xaml.XamlType" /> ジェネリック型を表します。 指定できます \(および多くの場合は\) <see langword="null" />, 、表される型がジェネリック型ではないことを示します。</param>
        <param name="schemaContext">XAML リーダーおよび XAML ライターの XAML スキーマ コンテキスト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlType" /> クラス XAML 名前空間と型の文字列名に基づいています。 このコンス トラクターではないバッキングをサポートする型システムと XAML スキーマ コンテキストであると言われる型の使用法の分析および XAML ノード専用にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 基になる型システムにマップされる XAML 型は使用できません「不明」の種類に対してのみ、このコンス トラクターを使用します。 このコンス トラクターが、結果が得られない、 <xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName> は `true`です。 既定のリフレクター ロジックと基になる型を報告する代わりに、 <xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName>です。 ただし、この動作を変更できますのため、 <xref:System.Xaml.XamlType.LookupIsUnknown%2A> をオーバーライドします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">1 つ以上の <paramref name="unknownTypeNamespace" />, 、<paramref name="unknownTypeName" />, 、または <paramref name="schemaContext" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AllowedContentTypes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; AllowedContentTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; AllowedContentTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.AllowedContentTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>として使用可能な型の読み取り専用コレクションを取得、 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 値 <see cref="T:System.Xaml.XamlType" />です。</summary>
        <value>可能なコンテンツの種類の読み取り専用コレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 割り当て可能な型 \(たとえば、許可されているコンテンツ型である基本型に割り当て可能な\) 特定のコンテンツ タイプは考慮されませんの目的での複数の種類 <xref:System.Xaml.XamlType.AllowedContentTypes%2A>します。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A> の上書きを <xref:System.Xaml.XamlType> クラスを派生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xaml.XamlType" /> のこの XAML 型の直接の基本型です。 この値の決定が基になる型に基づいて <see cref="T:System.Xaml.XamlType" /> とスキーマ コンテキスト。</summary>
        <value>
          <see cref="T:System.Xaml.XamlType" /> のこの XAML 型の直接の基本型です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupBaseType%2A> の上書きを <xref:System.Xaml.XamlType> クラスを派生します。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupBaseType%2A> この型にします。 既定では、 <xref:System.Xaml.XamlType.BaseType%2A> 内部の定数を表す、 <xref:System.Object> 場合 <xref:System.Xaml.XamlType.UnderlyingType%2A> は `null`です。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupBaseType%2A> 仮想で、そのため、オーバーライドできます。 オーバーライドされる可能性があります \(悪意のあるものかどうかまたはそれ以外の場合\)、基になる CLR 型の型のシステム情報と予想される方法で整合しなく XAML 型について報告される型情報を変更します。 割り当て操作とアクセスのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAssignTo">
      <MemberSignature Language="C#" Value="public virtual bool CanAssignTo (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAssignTo(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType">現在の照合する種類 <see cref="T:System.Xaml.XamlType" /> します。</param>
        <summary>示す値を返しますこの配列のインスタンスかどうか <see cref="T:System.Xaml.XamlType" /> が、指定した <see cref="T:System.Xaml.XamlType" /> 割り当て可能な型の一覧にします。</summary>
        <returns>
          <see langword="true" /> 場合 <paramref name="xamlType" /> は、割り当てられた型リストには、それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 割り当て可能な型では、参照型のすべての機能はありませんは、割り当てに使用できます。 たとえば、割り当てを使用すると、プロパティの値の型に一致します。 XAML で割り当て可能な型の概念は、CLR 型システムでへのキャストの概念に似ています。 たとえば、CLR 型システムでは、\[すべての型が、 <xref:System.Object> 割り当て可能な型のリストにします。  
  
 場合、2 つのいずれかの <xref:System.Xaml.XamlType> に使用されるインスタンスの比較がある <xref:System.Xaml.XamlType.IsUnknown%2A> に等しい `true`, 、このメソッドは、特殊な不明なモードを返す `true` 場合、2 つ <xref:System.Xaml.XamlType> のインスタンスが等しい。  
  
 既定の実装は、CLR を使用して <xref:System.Type> から <xref:System.Xaml.XamlType.UnderlyingType%2A> この <xref:System.Xaml.XamlType> と、入力 <xref:System.Xaml.XamlType>, 、および呼び出し <xref:System.Type.IsAssignableFrom%2A>します。 割り当てられた型のさまざまな決定をする場合は、このメソッドをオーバーライドします。  
  
 Null 値を渡す `xamlType` 、例外をスローしないと、常に返します `false`します。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.CanAssignTo%2A> 仮想で、そのため、オーバーライドできます。 オーバーライドされる可能性があります \(悪意のあるものかどうかまたはそれ以外の場合\)、基になる CLR 型の型キャストの動作と予想される方法で整合しなくするために、XAML の型ができるかどうかを変更します。 割り当て操作とアクセスのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructionRequiresArguments">
      <MemberSignature Language="C#" Value="public bool ConstructionRequiresArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConstructionRequiresArguments" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ConstructionRequiresArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこれ <see cref="T:System.Xaml.XamlType" /> 引数を持つ必要があります \(全般的な制約を <see langword="x:TypeArguments" />, 、初期化文字列、またはその他の XAML 手法\) 型の有効なインスタンスを構築します。</summary>
        <value>
          <see langword="true" /> インスタンスの作成には、引数値が必要な場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentProperty">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember ContentProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember ContentProperty" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ContentProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xaml.XamlMember" /> このコンテンツのプロパティの情報 <see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>
          <see cref="T:System.Xaml.XamlMember" /> このコンテンツのプロパティの情報 <see cref="T:System.Xaml.XamlType" />します。 あります <see langword="null" /> コンテンツ プロパティが存在しない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに適用することで、型の XAML コンテンツ プロパティを指定できますバインドを使用して、または CLR 型システムのバックアップ、 <xref:System.Windows.Markup.ContentPropertyAttribute> 種類の定義にします。  
  
 このプロパティに合わせて、 `[content property]` \[MS\-XAML\] 仕様内の情報項目。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupContentProperty%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupContentProperty%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentWrappers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; ContentWrappers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; ContentWrappers" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ContentWrappers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>厳密な型が一致する、厳密に型指定された文字列などではない場合は、コンテンツ プロパティのコンテンツをラップする型を取得 <see langword="Collection&lt;T&gt;" />します。</summary>
        <value>可能なコンテンツのラッパー型の読み取り専用コレクションそれ以外の場合、 <see langword="null" />です。 「解説」を参照してください。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、対応する型が一致する低下するため、ラッパーがない場合は、 `null`です。  
  
 型として評価される <xref:System.Xaml.XamlType.CanAssignTo%2A> 特定のコンテンツ タイプは考慮されませんの目的での複数の種類 <xref:System.Xaml.XamlType.ContentWrappers%2A>します。  
  
 CLR バインドで <xref:System.Xaml> と <xref:System.Xaml.XamlType>, と型の XAML コンテンツのラッパー型を指定することができます、 <xref:System.Windows.Markup.ContentWrapperAttribute>です。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupContentWrappers%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupContentWrappers%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeferringLoader">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; DeferringLoader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; DeferringLoader" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.DeferringLoader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> を表す、遅延読み込みこの型の変換動作します。</summary>
        <value>
          <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> と <see cref="T:System.Xaml.XamlDeferringLoader" /> をこの種類の遅延読み込み動作を表す制約です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 WPF の XAML テンプレートの動作は、遅延読み込み動作の例を示します。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このオブジェクトと比較するオブジェクト。</param>
        <summary>現在のオブジェクトが別のオブジェクトと等しいかどうかを示します。</summary>
        <returns>現在のオブジェクトが <paramref name="obj" /> パラメーターと等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.XamlType other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.XamlType other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="other">このオブジェクトと比較するオブジェクト。</param>
        <summary>現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。</summary>
        <returns>現在のオブジェクトが <paramref name="other" /> パラメーターと等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAliasedProperty">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetAliasedProperty (System.Xaml.XamlDirective directive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetAliasedProperty(class System.Xaml.XamlDirective directive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directive" Type="System.Xaml.XamlDirective" />
      </Parameters>
      <Docs>
        <param name="directive">エイリアス化されたメンバーを検索する対象のディレクティブ。</param>
        <summary>この XAML ディレクティブの別名の XAML メンバーを返します <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>エイリアス化されたメンバー場合が見つかりました。それ以外の場合、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このメソッドを呼び出すを呼び出すことができる <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> の上書きを <xref:System.Xaml.XamlType> クラスを派生します。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAttachableMembers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllAttachableMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlMember&gt; GetAllAttachableMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAllAttachableMembers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これによって公開されているすべてのアタッチ可能なプロパティを含むコレクションを返します <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>0 個以上含んだコレクション <see cref="T:System.Xaml.XamlMember" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各 <xref:System.Xaml.XamlMember> 、返されるコレクションの概念をサポートする値を含める必要がありますが、 <xref:System.Xaml.XamlMember> アタッチ可能なメンバーは、です。 たとえば、メンバーを返す必要があります `true` の <xref:System.Xaml.XamlMember.IsAttachable%2A>, 、型を <xref:System.Xaml.XamlMember.TargetType%2A>, 、という具合です。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このメソッドを呼び出すを呼び出すことができる <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> の上書きを <xref:System.Xaml.XamlType> クラスを派生します。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllMembers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlMember&gt; GetAllMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAllMembers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これによって公開されているすべてのメンバーを含むコレクションを返します <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>0 個以上含んだコレクション <see cref="T:System.Xaml.XamlMember" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出すを呼び出すことができる <xref:System.Xaml.XamlType.LookupAllMembers%2A> の上書きを <xref:System.Xaml.XamlType> クラスを派生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachableMember">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetAttachableMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetAttachableMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAttachableMember(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <c>ownerTypeName.MemberName</c> フォームで取得するアタッチ可能メンバーの名前。</param>
        <summary>この <see cref="T:System.Xaml.XamlType" /> の特定の名前の付いたアタッチ可能メンバーを表す <see cref="T:System.Xaml.XamlMember" /> を返します。</summary>
        <returns>要求されたアタッチ可能メンバーの <see cref="T:System.Xaml.XamlMember" /> オブジェクト。その名前のアタッチ可能メンバーが存在しない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Calls to this method can invoke <xref:System.Xaml.XamlType.LookupAttachableMember%2A> overrides on <xref:System.Xaml.XamlType> derived classes.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupAttachableMember%2A> is virtual, and therefore, can be overridden. The override has the potential \(whether for malicious purposes or otherwise\) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type. For any security\-critical checks of member reporting, use the underlying CLR type instead.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このオブジェクトのハッシュ コードを返します。</summary>
        <returns>整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetMember(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">\(文字列\) として取得するメンバーの名前。</param>
        <summary>返します。、 <see cref="T:System.Xaml.XamlMember" /> これからメンバーをという名前の特定の <see cref="T:System.Xaml.XamlType" />です。</summary>
        <returns>
          <see cref="T:System.Xaml.XamlMember" /> 見つかった以外の場合、このようなメンバーがあった場合は、メンバーの情報 <see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値 `name` 修飾する必要があります。 接続されているメンバーを示す修飾型名を送信するか <xref:System.Xaml.XamlType.GetAttachableMember%2A> 代わりにします。 プレフィックス付きのメンバーの名前を使用しない必要があります。プレフィックスが使用状況にあり、XAML 型システムは、このような使用状況のコンテキストとプレフィックスのマッピング方法を知ることはできません。  
  
 このメソッドを呼び出すを呼び出すことができる <xref:System.Xaml.XamlType.LookupMember%2A> の上書きを <xref:System.Xaml.XamlType> クラスを派生します。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupMember%2A> 仮想で、そのため、オーバーライドできます。 オーバーライドされる可能性があります \(悪意のあるものかどうかまたはそれ以外の場合\) と予想される方法で不要になった位置が揃うように XAML 型の報告されたメンバーを変更する、 <xref:System.ComponentModel.TypeDescriptor> `Get*` 基になる CLR 型に関する情報。  メンバーのレポートのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPositionalParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; GetPositionalParameters (int parameterCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; GetPositionalParameters(int32 parameterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterCount">情報を表示する特定の構文またはコンス トラクター モードの数 \(アリティ\)。</param>
        <summary>マークアップ拡張機能の種類の特定のマークアップ拡張機能の使用でサポートされている位置指定パラメーターの型が返されます <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>一連の <see cref="T:System.Xaml.XamlType" /> 値、ここで各 <see cref="T:System.Xaml.XamlType" /> は構文内の位置の型です。 マークアップ拡張機能のマークアップの入力を指定するときに、同じ順序で種類を指定する必要があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この API は、この場合は、関連のみ <xref:System.Xaml.XamlType> マークアップ拡張機能を表します \(<xref:System.Xaml.XamlType.IsMarkupExtension%2A> は `true`\)。  
  
 入力 `parameterCount` を使用しない特定の位置指定パラメーターの型を要求します。 マークアップ拡張機能の使用のアリティを指定することがあります。 多くの場合、マークアップ拡張機能の使用は、複数の「署名」を持つし、区別するために位置指定パラメーターの異なるパラメーター アリティ \(数\) を使用します。 ただし、重複する arities を許可して、差別化のタイプの位置指定パラメーターを使用するスキーマ コンテキストを構成できます。 詳細については、「<xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>」を参照してください。 特定のアリティ \(数\) の場合、パラメーターの位置と種類が異なります。 特定のアリティのマークアップ拡張機能の使用の位置指定の種類を取得するには、まず呼び出して <xref:System.Xaml.XamlType.GetPositionalParameters%2A> アリティ数を指定します。 返されるコレクションからその位置にある項目を取得します。  
  
 このメソッドを呼び出すを呼び出すことができる <xref:System.Xaml.XamlType.LookupPositionalParameters%2A> の上書きを <xref:System.Xaml.XamlType> クラスを派生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetXamlNamespaces" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>XAML 名前空間で型が含まれている文字列識別子の一覧を返します。</summary>
        <returns>各文字列が XAML 名前空間の URI 識別子、文字列値の一覧。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一般的な XAML 名前空間の識別子は、URI 形式の文字列です。  
  
 既定の実装の順序で、次のチェック: 構築で指定されている XAML 名前空間 \(<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> 署名のみ\); とスキーマ コンテキストから使用できる名前空間。 この場合は、各 `null`, 、1 つの空の文字列を含む新しいリストが生成されます。 参照方法を変更するには、このメソッドをオーバーライドすることができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoker">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlTypeInvoker Invoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlTypeInvoker Invoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.Invoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> これに関連付けられている実装 <see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>
          <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> これに関連付けられている実装 <see cref="T:System.Xaml.XamlType" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、呼び出し元 <xref:System.Xaml.XamlType.Invoker%2A> いずれかを呼び出すことができる <xref:System.Xaml.XamlType.LookupInvoker%2A> またはそのメソッドの特定のオーバーライドします。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupInvoker%2A> この型にします。  
  
 場合、 <xref:System.Xaml.XamlType.LookupInvoker%2A> オーバーライド `null`, 、既定の実装を返す場合、または `null` 不足しているのため <xref:System.Xaml.XamlType.UnderlyingType%2A> この <xref:System.Xaml.XamlType>, 、し、 <xref:System.Xaml.XamlType.Invoker%2A> 返します <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAmbient">
      <MemberSignature Language="C#" Value="public bool IsAmbient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAmbient" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsAmbient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> XAML 定義に従ってのアンビエント型を表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> アンビエント型を表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupIsAmbient%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupIsAmbient%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> の配列を表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> の配列を表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupCollectionKind%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupCollectionKind%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCollection">
      <MemberSignature Language="C#" Value="public bool IsCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCollection" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> コレクションを表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> コレクションを表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupCollectionKind%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupCollectionKind%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructible">
      <MemberSignature Language="C#" Value="public bool IsConstructible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructible" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsConstructible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> XAML 定義に従って、構築可能な型を表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> 構築可能な型を表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティに合わせて、 `[is default constructible]` \[MS\-XAML\] 仕様内の情報項目。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupIsConstructible%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupIsConstructible%2A> この型にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlType.ConstructionRequiresArguments" />
      </Docs>
    </Member>
    <Member MemberName="IsDictionary">
      <MemberSignature Language="C#" Value="public bool IsDictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDictionary" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsDictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> XAML 定義に従ってのディクショナリを表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> ディクショナリを表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティに合わせて、 `[is dictionary]` \[MS\-XAML\] 仕様内の情報項目。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupCollectionKind%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupCollectionKind%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGeneric">
      <MemberSignature Language="C#" Value="public bool IsGeneric { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGeneric" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsGeneric" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> ジェネリック型を表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> ジェネリック型を表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは null 値をチェックするヘルパー プロパティ <xref:System.Xaml.XamlType.TypeArguments%2A>します。 固有の仕様がない `Lookup` に関連するメソッド <xref:System.Xaml.XamlType.IsGeneric%2A>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMarkupExtension">
      <MemberSignature Language="C#" Value="public bool IsMarkupExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarkupExtension" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsMarkupExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> マークアップ拡張機能を表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> マークアップ拡張機能を表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 XAML 仕様には、この型に代入する必要があります `x:MarkupExtension` を返すために `true` の <xref:System.Xaml.XamlType.IsMarkupExtension%2A>です。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameScope">
      <MemberSignature Language="C#" Value="public bool IsNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNameScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> XAML 定義に従っての XAML 名前スコープを表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> XAML 名前スコープを表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 XAML 名前スコープ プロパティまたは使用するプロパティの名前の一意性を強制する `x:Name` \/ `[name property]`します。 場合 <xref:System.Xaml.XamlType.IsNameScope%2A> は `true`, 、一意性を適用するための機構が存在し、XAML 名前スコープを所有しているこの種類の観点から評価する必要があります。 XAML 名前スコープは、別の XAML 名前スコープで所有されている型が出現するまで、型のコンテンツを拡張します。  
  
 このプロパティに合わせて、 `[is name scope]` \[MS\-XAML\] 仕様内の情報項目。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupIsNameScope%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameValid">
      <MemberSignature Language="C#" Value="public bool IsNameValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameValid" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNameValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得かどうかこの <see cref="T:System.Xaml.XamlType" /> が有効なを使用して初期化される <see langword="xamlName" /> で文字列をその <see cref="P:System.Xaml.XamlType.Name" />します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> が有効なを使用して初期化される <see langword="xamlName" /> 文字列です。 それ以外の場合、 <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> XAML 定義に従って、null 許容型を表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> null 許容型を表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティに合わせて、 `[is nullable]` \[MS\-XAML\] 仕様内の情報項目。  
  
 既定内部 CLR リフレクション手法を使用していないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupIsNullable%2A> の上書きを <xref:System.Xaml.XamlType> クラスを派生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> 関連の型システムでパブリックな型を表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> パブリック型を表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupIsPublic%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupIsPublic%2A> 仮想で、そのため、オーバーライドできます。 オーバーライドされる可能性があります \(悪意のあるものかどうかまたはそれ以外の場合\)、基になる CLR 型の型システムからの情報と予想される方法で整合しなく XAML 型について報告されるアクセス情報を変更します。 割り当て操作とアクセスのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> 基になる型システムで解決できない型を表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> 解決できない型を表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupIsUnknown%2A> の上書きを <xref:System.Xaml.XamlType>クラスを派生します。  
  
 パスの読み込みの <xref:System.Xaml.XamlObjectWriter>, 、 <xref:System.Xaml.XamlType> を持つ `true` の <xref:System.Xaml.XamlType.IsUnknown%2A> オブジェクト グラフに書き込まれることはできません。 既定の実装 \[ <xref:System.Xaml> , 、 <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName> スローされます、 <xref:System.Xaml.XamlObjectWriterException> ときに、関連する <xref:System.Xaml.XamlType> レポート `true` の <xref:System.Xaml.XamlType.IsUnknown%2A>です。 渡さないでください、 <xref:System.Xaml.XamlType> を持つ <xref:System.Xaml.XamlType.IsUnknown%2A> として `true` から例外を処理する準備を行う場合以外 <xref:System.Xaml.XamlObjectWriter>, 、その他の方法を調整することも、 <xref:System.Xaml.XamlObjectWriter> 動作や、オブジェクト グラフを作成する前に、XAML ノード ストリームします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUsableDuringInitialization">
      <MemberSignature Language="C#" Value="public bool IsUsableDuringInitialization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUsableDuringInitialization" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsUsableDuringInitialization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> は、XAML の初期化時に上から順を作成します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> XAML の初期化中には、トップダウンでない場合はビルド <see langword="false" />します。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 上から順には、オブジェクト グラフを作成するときに、XAML プロセッサの動作を近似するメタファです。 トップダウンをビルドするときに、型がインスタンス化される、親にアタッチされているし、そのプロパティが設定されます。 プロパティ変更ハンドラーを複数回呼び出すトップダウンの構築を回避できます。 このような処理は、オブジェクト グラフに波及し、そのため、複数のハンドラーの呼び出しを排除し、オブジェクト グラフの起動時のパフォーマンスの最適化を提供します。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> この型にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
        <altmember cref="P:System.Windows.FrameworkElement.IsInitialized" />
      </Docs>
    </Member>
    <Member MemberName="IsWhitespaceSignificantCollection">
      <MemberSignature Language="C#" Value="public bool IsWhitespaceSignificantCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWhitespaceSignificantCollection" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> に従って XML 定義の空白文字の重要なコレクションを表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> 空白の重要なコレクションを表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXData">
      <MemberSignature Language="C#" Value="public bool IsXData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsXData" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsXData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> XML を表す <see langword="XDATA" />, 、XAML 定義ごとにします。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> 表す <see langword="XDATA" />。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティに合わせて、 `[is xdata]` \[MS\-XAML\] 仕様内の情報項目。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupIsXData%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupIsXData%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType ItemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType ItemType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ItemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>型情報を提供する値を取得、 <see langword="Items" /> プロパティこの <see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>A <see cref="T:System.Xaml.XamlType" /> コレクション内の項目の型のオブジェクトをそれ以外の場合、 <see langword="null" />, この場合は、 <see cref="T:System.Xaml.XamlType" /> コレクションは表しません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは関連する場合は、こののみ <xref:System.Xaml.XamlType> コレクションを表します \(<xref:System.Xaml.XamlType.IsCollection%2A> は `true`\)。`Items` プロパティは、どのようなプロパティは、その種類のコレクションまたは配列に項目を保持します。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupItemType%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupItemType%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType KeyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType KeyType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.KeyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このキーのプロパティの型情報を提供する値を取得 <see cref="T:System.Xaml.XamlType" />, 場合、 <see cref="T:System.Xaml.XamlType" /> ディクショナリを表します。</summary>
        <value>A <see cref="T:System.Xaml.XamlType" /> のディクショナリの使用、それ以外の場合、キーの型のオブジェクトを <see langword="null" />, この場合は、 <see cref="T:System.Xaml.XamlType" /> ディクショナリではありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは関連する場合は、こののみ <xref:System.Xaml.XamlType> ディクショナリを表します \(<xref:System.Xaml.XamlType.IsDictionary%2A> は `true`\)。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupKeyType%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupKeyType%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAliasedProperty">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupAliasedProperty (System.Xaml.XamlDirective directive);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupAliasedProperty(class System.Xaml.XamlDirective directive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directive" Type="System.Xaml.XamlDirective" />
      </Parameters>
      <Docs>
        <param name="directive">エイリアス化されたメンバーを検索する対象のディレクティブ。</param>
        <summary>この XAML ディレクティブの別名の XAML メンバーを返します <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>エイリアス化されたメンバー場合が見つかりました。それ以外の場合、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが <xref:System.Xaml.XamlType.GetAliasedProperty%2A>です。  
  
 既定の実装は、次の XAML ディレクティブの結果を返すことができます: `Key`; `Name`; `Uid`; と `xml:lang`です。 基になるリフレクションに依存し、まだを返す可能性がありますこれらの値 `null` エイリアス プロパティが存在しない場合。  
  
 既定内部 CLR リフレクションには依存しないと、XAML 型システムの情報または型のスキーマ情報をレポートするので、メタデータやその他の手法を使用する場合は、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xaml.XamlDirective" />
        <altmember cref="T:System.Xaml.XamlLanguage" />
      </Docs>
    </Member>
    <Member MemberName="LookupAllAttachableMembers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllAttachableMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlMember&gt; LookupAllAttachableMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllAttachableMembers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これによって公開されているすべてのアタッチ可能なプロパティを含む列挙可能なセットを返す <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>0 個以上を含む列挙可能なセット <see cref="T:System.Xaml.XamlMember" /> 値はそれ以外の場合、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>です。  
  
 <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A> ジェネリック コレクションを返しますこの `Lookup` メソッドがジェネリックの列挙可能なセットを返します。  
  
 既定の実装では、CLR の内部のリフレクションを使用します。<xref:System.Xaml.XamlType.UnderlyingType%2A> は `null`, 、既定の実装を使用できます <xref:System.Xaml.XamlType.BaseType%2A>, 、利用可能な場合です。 この動作を呼び出す <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 再帰的に有効な基本型を返す検索しようとする `null` 有効な基本データ型が存在しない場合。  
  
 既定内部 CLR リフレクションには依存しないと、XAML 型システム情報または型のスキーマ情報をレポートするので、メタデータやその他の手法を使用する場合は、このメソッドをオーバーライドします。 Null の戻り値は、不足している型システム、またはリフレクションのサポートのための情報を決定できない場合に限定する必要があります。 空を代わりに返す必要がありますが、型が有効でとリフレクションまたはその他の手法が使用可能な型には、アタッチ可能なメンバーはありません、 <xref:System.Collections.Generic.IEnumerable%601> を設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAllMembers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlMember&gt; LookupAllMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllMembers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これによって公開されているすべてのメンバーを含む列挙可能なセットを返す <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>0 個以上を含む列挙可能なセット <see cref="T:System.Xaml.XamlMember" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが <xref:System.Xaml.XamlType.GetAllMembers%2A>です。  
  
 <xref:System.Xaml.XamlType.GetAllMembers%2A> ジェネリック コレクションを返しますこの `Lookup` メソッドがジェネリックの列挙可能なセットを返します。  
  
 既定の実装では、CLR の内部のリフレクションを使用します。 場合、 <xref:System.Xaml.XamlType.UnderlyingType%2A> は `null`, 、既定の実装を使用できます <xref:System.Xaml.XamlType.BaseType%2A>, 表示されている場合、します。 この動作を呼び出す <xref:System.Xaml.XamlType.LookupAllMembers%2A> 再帰的に有効な基本データ型を返す検索しようとする `null` 有効な基本データ型が存在しない場合。  
  
 既定内部 CLR リフレクションには依存しないと、XAML 型システム情報または型のスキーマ情報をレポートするので、メタデータやその他の手法を使用する場合は、このメソッドをオーバーライドします。 Null の戻り値は、不足している型システム、またはリフレクションのサポートのための情報を決定できない場合に限定する必要があります。 リフレクションまたは他の手法は使用できません。 型が有効な場合は、型にメンバーがあるない場合は、空を代わりに返す必要があります <xref:System.Collections.Generic.IEnumerable%601> を設定します。  
  
 値を返す <xref:System.Xaml.XamlType.LookupAllMembers%2A> と <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 相互に排他的にする必要があります。 バッキング型のシステム プロパティがアタッチの使用法と同様に、標準インスタンスの使用をサポートできる場合がある場合と、そのメンバーは 2 つの異なるとして報告されます <xref:System.Xaml.XamlMember> 、アタッチ可能なリストと、標準的なメンバー リスト内の別に表示される 1 つの値での値。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAllowedContentTypes">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupAllowedContentTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupAllowedContentTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllowedContentTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>として使用可能な型の一覧を返す、 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 値 <see cref="T:System.Xaml.XamlType" />です。</summary>
        <returns>可能なコンテンツの種類の一覧。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが <xref:System.Xaml.XamlType.AllowedContentTypes%2A>です。  
  
 型として評価される <xref:System.Xaml.XamlType.CanAssignTo%2A> 特定のコンテンツ タイプは考慮されませんの目的での複数の種類 <xref:System.Xaml.XamlType.AllowedContentTypes%2A>します。  
  
 既定の実装での他のプロパティを使用できます <xref:System.Xaml.XamlType> \(<xref:System.Xaml.XamlType.ContentWrappers%2A>, 、<xref:System.Xaml.XamlType.ContentProperty%2A>, 、または <xref:System.Xaml.XamlType.ItemType%2A>\) 結果を取得します。`Lookup` に対して上記のプロパティの一覧は、この判断を下しますでも呼び出すことがよりも優先されます。  
  
 既定内部 CLR リフレクションには依存しないと、XAML 型システム情報または型のスキーマ情報をレポートするので、メタデータやその他の手法を使用する場合は、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAttachableMember">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupAttachableMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupAttachableMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAttachableMember(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <c>ownerTypeName.MemberName</c> フォームで取得するアタッチ可能メンバーの名前。</param>
        <summary>この <see cref="T:System.Xaml.XamlType" /> から、特定の名前の付いたアタッチ可能なものを表す <see cref="T:System.Xaml.XamlMember" /> を返します。</summary>
        <returns>要求されたアタッチ可能メンバーの <see cref="T:System.Xaml.XamlMember" /> オブジェクト。その名前のアタッチ可能メンバーが存在しない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAttachableMember%2A>.  
  
 The default implementation uses the internal CLR reflection. When <xref:System.Xaml.XamlType.UnderlyingType%2A> is **languageKeyword tag is not supported!!!!**  
, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available. This behavior calls <xref:System.Xaml.XamlType.LookupAttachableMember%2A> recursively to attempt to find a valid base type and returns **languageKeyword tag is not supported!!!!**  
 if no valid base type exists.  
  
 Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupAttachableMember%2A> is virtual, and therefore, can be overridden. The override has the potential \(whether for malicious purposes or otherwise\) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type. For any security\-critical checks of member reporting, use the underlying CLR type instead.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupBaseType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupBaseType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupBaseType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupBaseType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Xaml.XamlType" /> のこの XAML 型の直接の基本型です。 この値の決定が基になる型に基づいて <see cref="T:System.Xaml.XamlType" /> とスキーマ コンテキスト。</summary>
        <returns>
          <see cref="T:System.Xaml.XamlType" /> のこの XAML 型の直接の基本型です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが <xref:System.Xaml.XamlType.BaseType%2A>です。  
  
 既定の実装を表す内部の定数を返す場合があります、 <xref:System.Object> 場合 <xref:System.Xaml.XamlType.UnderlyingType%2A> は `null`です。  
  
 既定内部 CLR リフレクションには依存しないと、XAML 型システム情報または型のスキーマ情報をレポートするので、メタデータやその他の手法を使用する場合は、このメソッドをオーバーライドします。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupBaseType%2A> 仮想で、そのため、オーバーライドできます。 オーバーライドされる可能性があります \(悪意のあるものかどうかまたはそれ以外の場合\)、基になる CLR 型の型のシステム情報と予想される方法で整合しなく XAML 型について報告される型情報を変更します。 割り当て操作とアクセスのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCollectionKind">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlCollectionKind LookupCollectionKind ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Xaml.Schema.XamlCollectionKind LookupCollectionKind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupCollectionKind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlCollectionKind</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>値を返す、 <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> どの特定のコレクションを宣言する列挙型のように入力 <see cref="T:System.Xaml.XamlType" /> を使用します。</summary>
        <returns>値、 <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 列挙します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは内部のプライベート メソッド \(パブリック `CollectionKind` または `GetCollectionKind` に API が存在する <xref:System.Xaml.XamlType>\)。  
  
 既定の実装では、CLR の内部のリフレクションを使用します。 場合、 <xref:System.Xaml.XamlType.UnderlyingType%2A> は `null`, 、既定の実装を使用できます <xref:System.Xaml.XamlType.BaseType%2A>, 表示されている場合、します。 この動作を間接的に呼び出す <xref:System.Xaml.XamlType.LookupCollectionKind%2A> に再帰的に有効な基本型を検索するときに返す <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=fullName> 有効な基本データ型が存在しない場合。 一般に、既定の実装が検索しよう、 `Add` リフレクションによって基になる型のメソッドです。 場合、 <xref:System.Reflection.MethodInfo> の `Add` 方法を決定するのに十分な情報は、 <xref:System.Xaml.Schema.XamlCollectionKind> 値が返されます。 それ以外を返します <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=fullName>します。  
  
 既定内部 CLR リフレクションには依存しないと、XAML 型システム情報または型のスキーマ情報をレポートするので、メタデータやその他の手法を使用する場合は、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupConstructionRequiresArguments">
      <MemberSignature Language="C#" Value="protected virtual bool LookupConstructionRequiresArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupConstructionRequiresArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupConstructionRequiresArguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこれ <see cref="T:System.Xaml.XamlType" /> 引数を持つ必要があります \(使用して、ジェネリック制約 <see langword="x:TypeArguments" />, 、初期化文字列、またはその他の XAML 手法\) 型の有効なインスタンスを構築します。</summary>
        <returns>
          <see langword="true" /> インスタンスの作成には、引数値が必要な場合それ以外の場合は false。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>です。  
  
 既定の実装 `false` 型、CLR での値型と見なされるシステムに入力します。 値型、CLR リフレクション以外の場合 <xref:System.Reflection.ConstructorInfo> 既定のコンス トラクターが存在するかどうかを調べるために使用します。  
  
 既定内部 CLR リフレクションには依存しないと、XAML 型システム情報または型のスキーマ情報をレポートするので、メタデータやその他の手法を使用する場合は、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupContentProperty">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupContentProperty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupContentProperty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupContentProperty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。 <see cref="T:System.Xaml.XamlMember" /> これの content プロパティの情報を <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>
          <see cref="T:System.Xaml.XamlMember" /> このコンテンツのプロパティの情報 <see cref="T:System.Xaml.XamlType" />します。<see langword="null" /> でもかまいません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが <xref:System.Xaml.XamlType.ContentProperty%2A>です。  
  
 既定の実装 <xref:System.Windows.Markup.ContentPropertyAttribute> 型定義にします。 チェック <xref:System.Xaml.XamlType.BaseType%2A> 属性に直接の基になる型の属性が存在しない場合。 既定の実装が返すかどうか、これらのチェックはコンテンツの種類を検出しません、 `null`です。  
  
 既定内部 CLR リフレクションには依存しないと、XAML 型システム情報または型のスキーマ情報をレポートするので、メタデータやその他の手法を使用する場合は、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupContentWrappers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupContentWrappers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupContentWrappers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupContentWrappers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一覧を取得 <see cref="T:System.Xaml.XamlType" /> をこのコンテンツのラッパーを表す値 <see cref="T:System.Xaml.XamlType" />です。</summary>
        <returns>一連の <see cref="T:System.Xaml.XamlType" /> をこのコンテンツのラッパーを表す値 <see cref="T:System.Xaml.XamlType" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コンテンツのラッパーは、そのコレクションで使用される型は、型システムに連続していない場合は、コンテンツのコレクション型を表すクラスです。 コンテンツのラッパーのコレクションの項目の種類を超える何らかの方法で影響を受けますとして予想される <xref:System.Object> または同等のニュートラル オブジェクトです。 ただし、設計や、その型を使用するプロパティの目的は、型システムではなく、この制限は適用のみ。 複数のコンテンツのラッパーは、型に存在できます。  
  
 クラスの例と WPF XAML 実装のシナリオでは、次を参照してください。 <xref:System.Windows.Documents.InlineCollection>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCustomAttributeProvider">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupCustomAttributeProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスで実装された場合、取得、 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 実装します。</summary>
        <returns>
          <see cref="T:System.Reflection.ICustomAttributeProvider" /> の実装。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 CLR 属性の値を取得する代替の方法で内部のリフレクションを提供するのには、このメソッドをオーバーライドします。 上書きがない場合では、内部 reflector は、一般的なロジックで CLR リフレクションを使用します。  
  
 既定の実装では、`null` が返されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupDeferringLoader">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupDeferringLoader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> XAML に宣言されたオブジェクトの遅延読み込みの際に使用されるオブジェクト。</summary>
        <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> を持つ、 <see cref="T:System.Xaml.XamlDeferringLoader" /> のジェネリック制約です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが <xref:System.Xaml.XamlType.DeferringLoader%2A>です。 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.DeferringLoader%2A> をカスタムを既定の内部リフレクションで有効になっても提供するよりも、別の値を返す <xref:System.Xaml.Schema.XamlTypeInvoker> 情報。  
  
 既定の実装は、読み取りに基づいてオブジェクトを返す <xref:System.Windows.Markup.XamlDeferLoadAttribute>します。 チェック <xref:System.Xaml.XamlType.BaseType%2A> 属性に直接の基になる型の属性が存在しない場合。 このメソッドが戻るかどうかは、値は使用できません、 `null`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupInvoker">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlTypeInvoker LookupInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlTypeInvoker LookupInvoker() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupInvoker" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> これに関連付けられている <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>
          <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 情報 <see cref="T:System.Xaml.XamlType" />。 そうしないと、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.Invoker%2A>です。  
  
 既定の実装する必要のない、 <xref:System.Xaml.XamlType> 初期に合格したコンス トラクターのいずれかを使用して構築する <xref:System.Xaml.Schema.XamlTypeInvoker>です。 ただし、 <xref:System.Xaml.XamlType.UnderlyingType%2A> の値が存在する必要があります、 <xref:System.Xaml.XamlType>。 そうしないと、既定の実装 `null`します。  
  
 派生クラスを作成する場合は、このメソッドをオーバーライド <xref:System.Xaml.Schema.XamlTypeInvoker> 派生クラスを返すしようとします。 返された場合 `null`, 、<xref:System.Xaml.XamlType.Invoker%2A> 返します <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName> の呼び出し元にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsAmbient">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsAmbient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsAmbient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsAmbient" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの <see cref="T:System.Xaml.XamlType" /> XAML 定義に従ってのアンビエント型を表します。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> アンビエント型を表します。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.IsAmbient%2A>です。  
  
 既定の実装では、CLR のリフレクションを使用して、上、 <xref:System.Xaml.XamlType.UnderlyingType%2A> 基本型を確認できます。 この実装を確認、 <xref:System.Windows.Markup.AmbientAttribute> をクラス レベルで関連する型の定義に適用して返す `true` ､ ホします。 その他のすべてのケースを返す `false`します。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.IsAmbient%2A> を内部リフレクションの既定で有効になってよりも、別の値を返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsConstructible">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsConstructible ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsConstructible() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsConstructible" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの <see cref="T:System.Xaml.XamlType" /> XAML 定義に従って、構築可能な型を表します。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> 構築可能な型を表します。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.IsConstructible%2A>です。  
  
 既定の実装では、CLR のリフレクションを使用して、上、 <xref:System.Xaml.XamlType.UnderlyingType%2A>です。 具体的なおよび終了した、入れ子にされない型があります。 既定の実装では、型が値型との戻り値がかどうかを確認 <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>します。 Null <xref:System.Xaml.XamlType.UnderlyingType%2A>, 、このメソッドが戻る `true`します。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.IsConstructible%2A> を内部リフレクションの既定で有効になってよりも、別の値を返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsMarkupExtension">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsMarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsMarkupExtension() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsMarkupExtension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの <see cref="T:System.Xaml.XamlType" /> マークアップ拡張機能を表します。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> マークアップ拡張機能を表します。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.IsMarkupExtension%2A>です。  
  
 既定の実装では、この呼び出しののみで構成されます。  
  
 `return CanAssignTo(XamlLanguage.MarkupExtension);`  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.IsMarkupExtension%2A> 異なるロジックを使用します。  
  
 XAML 仕様には、この型に代入する必要があります `x:MarkupExtension` を返すために `true` の <xref:System.Xaml.XamlType.IsMarkupExtension%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsNameScope">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsNameScope ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsNameScope() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsNameScope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの <see cref="T:System.Xaml.XamlType" /> XAML 定義に従っての XAML 名前スコープを表します。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> XAML 名前スコープを表します。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.IsNameScope%2A>です。  
  
 既定の実装、 <xref:System.Xaml.XamlType.CanAssignTo%2A> 型に対して直接呼び出す <xref:System.Windows.Markup.INameScope>します。<xref:System.Windows.Markup.INameScope> WindowsBase アセンブリで定義されているインターフェイス。 XAML 名前スコープ識別するためには、この手法が使用される WPF が両方と [!INCLUDE[TLA#tla_workflow](~/includes/tlasharptla-workflow-md.md)] XAML の実装です。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.IsNameScope%2A> 異なるロジックを使用します。  
  
 XAML 名前スコープで使われるプロパティの名前の一意性を強制する `x:Name` \/ `[name property]`します。 場合 <xref:System.Xaml.XamlType.IsNameScope%2A> は `true`, 、一意性を適用するための機構が存在する必要があり、XAML 名前スコープを所有しているこの種類の観点から評価する必要があります。 XAML 名前スコープは、XAML 名前スコープを所有している別の型が検出されるまで、型のコンテンツを拡張します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsNullable">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsNullable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsNullable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsNullable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの <see cref="T:System.Xaml.XamlType" /> XAML 定義に従って、null 許容型を表します。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> null 許容型を表します。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.IsNullable%2A>です。  
  
 既定の実装は、判断の概念に基づいて CLR コア ライブラリ null 許容型、照合 <xref:System.Xaml.XamlType.UnderlyingType%2A>します。 Null <xref:System.Xaml.XamlType.UnderlyingType%2A>, 、返す `true`します。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.IsNullable%2A> 異なるロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsPublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsPublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsPublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsPublic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの <see cref="T:System.Xaml.XamlType" /> 関連の型システムでパブリックな型を表します。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> パブリック型を表します。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.IsPublic%2A>です。  
  
 既定の実装に対して null 以外の CLR リフレクションを使用して <xref:System.Xaml.XamlType.UnderlyingType%2A>します。 Null <xref:System.Xaml.XamlType.UnderlyingType%2A>, 、返す `true`します。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.IsPublic%2A> 異なるロジックを使用します。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupIsPublic%2A> 仮想で、そのため、オーバーライドできます。 オーバーライドされる可能性があります \(悪意のあるものかどうかまたはそれ以外の場合\)、基になる CLR 型の型のシステムまたはアクセスの情報と予想される方法で整合しなく XAML 型について報告されるアクセス情報を変更します。 割り当て操作とアクセスのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsUnknown">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsUnknown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsUnknown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsUnknown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの <see cref="T:System.Xaml.XamlType" /> 基になる型システムで解決できない型を表します。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> nonresolvable 型を表します。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.IsUnknown%2A>です。  
  
 既定の実装では、CLR のリフレクションを使用できます。 Null <xref:System.Xaml.XamlType.UnderlyingType%2A>, 、返す `true`します。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.IsUnknown%2A> 異なるロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsWhitespaceSignificantCollection">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWhitespaceSignificantCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWhitespaceSignificantCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの <see cref="T:System.Xaml.XamlType" /> に従って XML 定義の空白文字の重要なコレクションを表します。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> 空白の重要なコレクションを表します。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>です。  
  
 既定の実装は、読み取りに基づいた値を返す <xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute>します。 チェックすることも、 <xref:System.Xaml.XamlType.BaseType%2A> 属性に直接の基になる型の属性が存在しない場合。 返すかどうか、値は使用できません、 `false`です。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A> 異なるロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsXData">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsXData ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsXData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsXData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの <see cref="T:System.Xaml.XamlType" /> XML を表す <see langword="XDATA" />, 、XAML 定義ごとにします。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> 表す <see langword="XDATA" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.IsXData%2A>です。  
  
 既定の実装、 <xref:System.Xaml.XamlType.CanAssignTo%2A> 型に対して直接呼び出す <xref:System.Xml.Serialization.IXmlSerializable>します。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.IsXData%2A> 異なるロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupItemType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupItemType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupItemType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupItemType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>型情報を提供する値を返す、 <see langword="Items" /> このプロパティ <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>A <see cref="T:System.Xaml.XamlType" /> コレクション内の項目の型のオブジェクトをそれ以外の場合、 <see langword="null" /> この <see cref="T:System.Xaml.XamlType" /> コレクションは表しません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.ItemType%2A>です。  
  
 既定の実装の確認などの CLR リフレクションの概念を使用できます、 `Add` メソッド <xref:System.Reflection.MethodInfo> を使用して、 <xref:System.Reflection.ParameterInfo>チェック; <xref:System.Xaml.XamlType.IsArray%2A>; とチェック <xref:System.Xaml.XamlType.BaseType%2A> して同じロジックがあります。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.ItemType%2A> 異なるロジックを使用します。 あるケース <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 返します <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=fullName> 返す必要があります `null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupKeyType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupKeyType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupKeyType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupKeyType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このキーのプロパティの型情報を提供する値を返す <see cref="T:System.Xaml.XamlType" />, 場合は、 <see cref="T:System.Xaml.XamlType" /> ディクショナリを表します。</summary>
        <returns>A <see cref="T:System.Xaml.XamlType" /> ディクショナリの使用のキーの型のオブジェクトまたは <see langword="null" /> この <see cref="T:System.Xaml.XamlType" /> 、ディクショナリではありません</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.KeyType%2A>です。  
  
 既定の実装の確認などの CLR リフレクションの概念を使用できます、 `Add` メソッド <xref:System.Reflection.MethodInfo> を使用して、 <xref:System.Reflection.ParameterInfo>; とチェック <xref:System.Xaml.XamlType.BaseType%2A> して同じロジックがあります。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.KeyType%2A> 異なるロジックを使用します。 あるケース <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 返さない <xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=fullName> 返す必要があります `null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupMarkupExtensionReturnType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupMarkupExtensionReturnType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupMarkupExtensionReturnType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返された型情報を提供する値を返します <see langword="ProvideValue" /> この <see cref="T:System.Xaml.XamlType" />, マークアップ拡張機能を表している場合、します。</summary>
        <returns>A <see cref="T:System.Xaml.XamlType" /> マークアップ拡張機能の使用方法の戻り値の型のオブジェクトをそれ以外の場合、 <see langword="null" />, この場合は、 <see cref="T:System.Xaml.XamlType" /> マークアップ拡張機能ではありません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>です。  
  
 既定の実装、 <xref:System.Xaml.XamlType> 読み取りに基づいて <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>します。 チェック <xref:System.Xaml.XamlType.BaseType%2A> 属性に直接の基になる型の属性が存在しない場合。 返すかどうか、値は使用できません、 `null`です。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A> 異なるロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupMember">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupMember (string name, bool skipReadOnlyCheck);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupMember(string name, bool skipReadOnlyCheck) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="skipReadOnlyCheck" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">\(文字列\) として取得するメンバーの名前。</param>
        <param name="skipReadOnlyCheck">
          <see langword="true" /> そのメンバーがある場合でも、メンバーを返す、 <see langword="true" /> の場合は値 <see cref="P:System.Xaml.XamlMember.IsReadOnly" />; <see langword="false" /> 制御を戻さない、 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> メンバーです。 既定値は、<see langword="false" /> です。</param>
        <summary>返します。、 <see cref="T:System.Xaml.XamlMember" /> これからメンバーをという名前の特定の <see cref="T:System.Xaml.XamlType" />です。</summary>
        <returns>
          <see cref="T:System.Xaml.XamlMember" /> メンバーが、それ以外の場合の場合は、メンバーの情報 <see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.GetMember%2A>です。  
  
 既定の実装、 <xref:System.Xaml.XamlType> CLR の内部のリフレクションとスキーマ コンテキストに対して評価に基づいています。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.GetMember%2A> 異なるロジックを使用します。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlType.LookupMember%2A> 仮想で、そのため、オーバーライドできます。 オーバーライドされる可能性があります \(悪意のあるものかどうかまたはそれ以外の場合\) と予想される方法で不要になった位置が揃うように XAML 型の報告されたメンバーを変更する、 <xref:System.ComponentModel.TypeDescriptor> `Get*` 基になる CLR 型に関する情報。  メンバーのレポートのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupPositionalParameters">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupPositionalParameters (int parameterCount);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupPositionalParameters(int32 parameterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterCount">情報を表示する特定の構文またはコンス トラクター モードの数 \(アリティ\)。</param>
        <summary>マークアップ拡張機能の種類の特定のマークアップ拡張機能の使用でサポートされている位置指定パラメーターの型が返されます <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>一連の <see cref="T:System.Xaml.XamlType" /> 値の場所などの各 <see cref="T:System.Xaml.XamlType" /> は構文内の位置の型です。 マークアップ拡張機能のマークアップの入力を指定するとき、同じ順序でそれらの型を指定する必要があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.GetPositionalParameters%2A>です。  
  
 既定の実装では、コンス トラクターの検索とアリティのチェックに基づく内部のリフレクション情報を使用します。 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.GetPositionalParameters%2A> 異なるロジックを使用します。  
  
 この API は、この場合は、関連のみ <xref:System.Xaml.XamlType> マークアップ拡張機能を表します \(<xref:System.Xaml.XamlType.IsMarkupExtension%2A> は `true`\)。  
  
 入力 `parameterCount` を使用しない特定の位置指定パラメーターの型を要求します。 マークアップ拡張機能の使用のアリティを指定することがあります。 多くの場合、マークアップ拡張機能の使用は、複数の署名を持つし、区別するために位置指定パラメーターの異なるパラメーター アリティ \(数\) を使用します。 ただし、重複する arities を許可して、差別化のタイプの位置指定パラメーターを使用するスキーマ コンテキストを構成できます。 詳細については、「<xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>」を参照してください。 特定のアリティ数のパラメーターの位置と種類が異なります。 特定のアリティのマークアップ拡張機能の使用の位置指定の種類を取得するには、まず呼び出して <xref:System.Xaml.XamlType.GetPositionalParameters%2A> アリティ カウントします。 返されるコレクションからその位置にある項目を取得します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupSetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="protected virtual EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; LookupSetMarkupExtensionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; LookupSetMarkupExtensionHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>マークアップ拡張機能の集合演算を使用するハンドラーのコールバックが返されます。</summary>
        <returns>マークアップ拡張機能の集合演算を使用する場合は、ハンドラーのコールバック</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装は、読み取りに基づいた値を返す <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>します。 チェック <xref:System.Xaml.XamlType.BaseType%2A> 属性に直接の基になる型の属性が存在しない場合。 返すかどうか、値は使用できません、 `null`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupSetTypeConverterHandler">
      <MemberSignature Language="C#" Value="protected virtual EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; LookupSetTypeConverterHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; LookupSetTypeConverterHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupSetTypeConverterHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>型コンバーターを設定する場合に使用するハンドラーを返します。</summary>
        <returns>型コンバーターを設定する場合に使用するハンドラー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装は、読み取りに基づいた値を返す <xref:System.Windows.Markup.XamlSetTypeConverterAttribute>します。 チェック <xref:System.Xaml.XamlType.BaseType%2A> 属性に直接の基になる型の属性が存在しない場合。 返すかどうか、値は使用できません、 `null`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTrimSurroundingWhitespace">
      <MemberSignature Language="C#" Value="protected virtual bool LookupTrimSurroundingWhitespace ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupTrimSurroundingWhitespace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの <see cref="T:System.Xaml.XamlType" /> 周囲の空白をトリミングするモードを使用してシリアル化する必要があります。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> 周囲の空白をトリミングするモードでシリアル化された、それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>です。  
  
 既定の実装は、読み取りに基づいた値を返す <xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute>します。 チェック <xref:System.Xaml.XamlType.BaseType%2A> 属性に直接の基になる型の属性が存在しない場合。 返すかどうか、値は使用できません、 `false`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTypeConverter">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; LookupTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; LookupTypeConverter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupTypeConverter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> を持つ、 <see cref="T:System.ComponentModel.TypeConverter" /> 制約で、この値の型変換の動作を表す <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> と <see cref="T:System.ComponentModel.TypeConverter" /> をこの値の型変換の動作を表す制約 <see cref="T:System.Xaml.XamlType" />。 そうしないと、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.TypeConverter%2A>です。  
  
 既定の実装は、読み取りに基づいた値を返す <xref:System.ComponentModel.TypeConverterAttribute>します。 また、既定の実装を確認 <xref:System.Xaml.XamlType.BaseType%2A> 属性に直接の基になる型の属性が存在しない場合。 列挙体、共通の値型およびジェネリックの既定の変換の特別なロジックも含まれています。 返すかどうか、値は使用できません、 `null`です。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.TypeConverter%2A> 異なるロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingType">
      <MemberSignature Language="C#" Value="protected virtual Type LookupUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Type LookupUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupUnderlyingType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>CLR を返す <see cref="T:System.Type" /> この基になっている <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>CLR <see cref="T:System.Type" /> この基になっている <see cref="T:System.Xaml.XamlType" />。 そうしないと、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.UnderlyingType%2A>です。  
  
 既定の実装では、内部フィールドを返します。 構築時にそのフィールドが初期化一般にし、その値がコンス トラクターが呼び出され、入力した情報に基づいています。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.UnderlyingType%2A> 異なるロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUsableDuringInitialization">
      <MemberSignature Language="C#" Value="protected virtual bool LookupUsableDuringInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupUsableDuringInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupUsableDuringInitialization" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を返すかどうかこの <see cref="T:System.Xaml.XamlType" /> は、XAML の初期化時に上から順を作成します。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> XAML の初期化中には、トップダウンでない場合はビルド <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 上から順には、オブジェクト グラフを作成するときに、XAML プロセッサの動作を近似するメタファです。 トップダウンをビルドするときに、親にアタッチされている、型がインスタンス化し、そのプロパティが設定します。 プロパティ変更ハンドラーを複数回呼び出すトップダウンの構築を回避できます。 このような処理は、オブジェクト グラフに波及し、そのため、複数のハンドラーの呼び出しを排除し、オブジェクト グラフの起動時のパフォーマンスの最適化を提供します。  
  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>です。  
  
 既定の実装は、読み取りに基づいた値を返す <xref:System.Windows.Markup.UsableDuringInitializationAttribute>します。 チェック <xref:System.Xaml.XamlType.BaseType%2A> 属性に直接の基になる型の属性が存在しない場合。 返すかどうか、値は使用できません、 `false`です。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A> 異なるロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupValueSerializer">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupValueSerializer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> を持つ、 <see cref="T:System.Windows.Markup.ValueSerializer" /> 制約で、この値の値のシリアル化の動作を表す <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> と <see cref="T:System.Windows.Markup.ValueSerializer" /> これの値のシリアル化動作の値を表す制約 <see cref="T:System.Xaml.XamlType" />。 そうしないと、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドを呼び出すことが <xref:System.Xaml.XamlType.ValueSerializer%2A>です。  
  
 既定の実装は、読み取りに基づいた値を返す <xref:System.Windows.Markup.ValueSerializerAttribute>します。 チェック <xref:System.Xaml.XamlType.BaseType%2A> 属性に直接の基になる型の属性が存在しない場合。 列挙型、共通の値型またはジェネリックの既定のシリアル化の特別なロジックも含まれています。 返すかどうか、値は使用できません、 `null`です。  
  
 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlType.ValueSerializer%2A> 異なるロジックを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkupExtensionReturnType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType MarkupExtensionReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType MarkupExtensionReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.MarkupExtensionReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返された型情報を提供する値を取得 <see langword="ProvideValue" /> この <see cref="T:System.Xaml.XamlType" />, マークアップ拡張機能を表している場合、します。</summary>
        <value>A <see cref="T:System.Xaml.XamlType" /> マークアップ拡張機能の使用方法の戻り値の型のオブジェクトをそれ以外の場合、 <see langword="null" />, この場合は、 <see cref="T:System.Xaml.XamlType" /> マークアップ拡張機能ではありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは関連する場合は、こののみ <xref:System.Xaml.XamlType> マークアップ拡張機能を表します \(`x:MarkupExtension` が割り当てられた型リスト\)。  
  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>型の文字列の名前を取得この <see cref="T:System.Xaml.XamlType" /> を表します。</summary>
        <value>この XAML 型の名前文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、通常、スキーマに作成された名前を取得 \(ごと、 <xref:System.Xaml.XamlType.%23ctor%2A> 署名\)、またはの名前、 <xref:System.Type>, 、これは CLR 型システムの適切なコンス トラクターを使用して作成します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.XamlType xamlType1, class System.Xaml.XamlType xamlType2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType1" Type="System.Xaml.XamlType" />
        <Parameter Name="xamlType2" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType1">
          <see cref="T:System.Xaml.XamlType" /> または <see langword="null" />。</param>
        <param name="xamlType2">
          <see cref="T:System.Xaml.XamlType" /> または <see langword="null" />。</param>
        <summary>指定した 2 つの <see cref="T:System.Xaml.XamlType" /> オブジェクトの値が同一かどうかを判断します。</summary>
        <returns>
          <see langword="true" /> の値が <paramref name="xamlType1" /> の値と同じ場合は <paramref name="xamlType2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.XamlType xamlType1, class System.Xaml.XamlType xamlType2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType1" Type="System.Xaml.XamlType" />
        <Parameter Name="xamlType2" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType1">
          <see cref="T:System.Xaml.XamlType" /> または <see langword="null" />。</param>
        <param name="xamlType2">
          <see cref="T:System.Xaml.XamlType" /> または <see langword="null" />。</param>
        <summary>指定した 2 つあるかどうかを判断 <see cref="T:System.Xaml.XamlType" /> オブジェクトが異なる値を設定します。</summary>
        <returns>
          <see langword="true" /> の値が <paramref name="xamlType1" /> の値と異なる場合は <paramref name="xamlType2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredXamlNamespace">
      <MemberSignature Language="C#" Value="public string PreferredXamlNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreferredXamlNamespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.PreferredXamlNamespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このプライマリの XAML 名前空間は、1 つの XAML 名前空間を取得 <see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>この XAML 型のプライマリの XAML 名前空間の文字列としての識別子です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装の呼び出しと同じ値を提供する <xref:System.Xaml.XamlType.GetXamlNamespaces%2A> や、返された列挙可能なセットから最初の値の文字列を取得します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アクティブな取得 <see cref="T:System.Xaml.XamlSchemaContext" /> これを処理するため <see cref="T:System.Xaml.XamlType" />です。</summary>
        <value>アクティブな <see cref="T:System.Xaml.XamlSchemaContext" /> これを処理するため <see cref="T:System.Xaml.XamlType" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xaml.XamlSchemaContext> 必須パラメーターのエントリを構築するときに、 <xref:System.Xaml.XamlType>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この文字列表現を返します <see cref="T:System.Xaml.XamlType" />します。</summary>
        <returns>この文字列表現 <see cref="T:System.Xaml.XamlType" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xaml.XamlType> の実装 <xref:System.Object.ToString%2A> 返します、 <xref:System.Xaml.XamlType.Name%2A> のプロパティ、 <xref:System.Xaml.XamlType>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimSurroundingWhitespace">
      <MemberSignature Language="C#" Value="public bool TrimSurroundingWhitespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimSurroundingWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TrimSurroundingWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlType" /> が空白のコンテンツ内の周囲の空白をトリムするシリアル化の動作を処理します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlType" /> の空白文字を使用する型を表すトリミング以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> の上書きを <xref:System.Xaml.XamlType> クラスを派生します。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeArguments">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; TypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; TypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>場合の型引数の一覧を取得、この <see cref="T:System.Xaml.XamlType" /> ジェネリック型を表します。</summary>
        <value>型引数の型の一覧それ以外の場合、 <see langword="null" />, この場合は、 <see cref="T:System.Xaml.XamlType" /> ジェネリックではありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 特定のシナリオがある、 <xref:System.Xaml.XamlType> を呼び出す場合、 <xref:System.Xaml.XamlType.TypeArguments%2A> パラメーターは、種類がまだ開いて一覧を返します。 この場合は、1 つでも、返された <xref:System.Xaml.XamlType> 値のプレース ホルダーの値になります <xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName>, など `T`, をジェネリックがまだ開いていることを示します。 このシナリオは、表示された場合に発生する可能性が、 <xref:System.Xaml.XamlType> への呼び出しから <xref:System.Xaml.XamlSchemaContext.GetXamlType%2A>, の代わりに XAML リーダーの実装からです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeConverter">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; TypeConverter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; TypeConverter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TypeConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> と <see cref="T:System.ComponentModel.TypeConverter" /> 制約がこの値の変換の動作の型を表します <see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> と <see cref="T:System.ComponentModel.TypeConverter" /> 制約がこの値の変換の動作の型を表します <see cref="T:System.Xaml.XamlType" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupTypeConverter%2A> の上書きを <xref:System.Xaml.XamlType> クラスを派生します。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupTypeConverter%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingType">
      <MemberSignature Language="C#" Value="public Type UnderlyingType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.UnderlyingType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>CLR の取得 <see cref="T:System.Type" /> この基になっている <see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>CLR <see cref="T:System.Type" /> この基になっている <see cref="T:System.Xaml.XamlType" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSerializer">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; ValueSerializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; ValueSerializer" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ValueSerializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> と <see cref="T:System.Windows.Markup.ValueSerializer" /> これの値のシリアル化動作の値を表す制約 <see cref="T:System.Xaml.XamlType" />します。</summary>
        <value>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> と <see cref="T:System.Windows.Markup.ValueSerializer" /> これの値のシリアル化動作の値を表す制約 <see cref="T:System.Xaml.XamlType" />。 そうしないと、 <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定内部 CLR リフレクション手法を使用しないかどうか、 <xref:System.Xaml.XamlType>, 、このプロパティへの呼び出しを呼び出すことができる <xref:System.Xaml.XamlType.LookupValueSerializer%2A> の上書きを <xref:System.Xaml.XamlType> 派生クラスです。 戻り値およびその他の動作に関する詳細については、ドキュメントを参照して <xref:System.Xaml.XamlType.LookupValueSerializer%2A> この型にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のオブジェクトが別のオブジェクトと等しいかどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Xaml.XamlType" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>