<Type Name="XamlMember" FullName="System.Xaml.XamlMember">
  <TypeSignature Language="C#" Value="public class XamlMember : IEquatable&lt;System.Xaml.XamlMember&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlMember extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.XamlMember&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlMember" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.XamlMember&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>XAML 型のメンバーの XAML 型システム識別子を提供します。 識別子は、メンバー ノードの処理中に XAML リーダーと XAML ライターが使われます \(に XAML リーダーが配置されている場合、 <see cref="F:System.Xaml.XamlNodeType.StartMember" />\) また、一般的な XAML 型システムのロジックのです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xaml.XamlMember> XAML メンバーに関する情報を返すには次の 3 つの方法論を使用できます。 共通言語ランタイム \(CLR\) のリフレクション標準です。Api を使用して最適化ビット フラグの内部を呼び出す、参照専用のリフレクション手法です。または仮想を呼び出すことがのオーバーライド、 `Lookup*` できるだけによって提供される API <xref:System.Xaml.XamlMember> サブクラスです。 .NET Framework XAML サービス Api のほとんどの用途について、 <xref:System.Xaml.XamlMember> 既定の XAML スキーマ コンテキストを使用する API。 .NET Framework XAML サービスの既定の XAML スキーマ コンテキストでは、CLR 型システムのバックアップを使用します。 これにより、XAML リーダーと XAML ライターは、任意の型またはメンバーが定義されているか、それ以外の場合に使用可能な CLR および、リフレクション手法を使用します。  
  
## 参照 \* Api と XamlMember 派生クラス  
 <xref:System.Xaml.XamlMember> いくつかの定義が派生クラスの仮想メンバーが上書きすることがあります。 これらのメンバーが常に、文字列で始まる名前を持つ `Lookup`です。 API の残りの部分では、仮想メソッドに影響するプロパティ参照を名前です。 たとえば、 <xref:System.Xaml.XamlMember> オーバーライドすると、派生クラス <xref:System.Xaml.XamlMember.LookupTargetType%2A> ベースで定義された、どのようなプロパティに影響を与える <xref:System.Xaml.XamlMember.TargetType%2A> 派生クラスでを返します。 このようなプロパティの戻り値を予測する <xref:System.Xaml.XamlMember> や関連するドキュメントを読みの派生クラスの既存の `Lookup*` メソッドです。  
  
 目的、 `Lookup*` メソッドが組み込まれた XAML 型システム拡張技術を提供する、 <xref:System.Xaml.XamlMember> 基本クラスです。 派生することによって <xref:System.Xaml.XamlMember> をオーバーライドして、 `Lookup` 仮想メンバーを定義できます XAML スキーマの XAML メンバーの概念、XAML 型システムで、バッキング型のシステムまたはテクノロジの詳細に拘束されずにします。 このスキームで提供されている XAML スキーマ コンテキストを使用してもし、目的の結果を返すことができます。  
  
 たとえばを検討してください、 <xref:System.Xaml.XamlMember> プロパティ <xref:System.Xaml.XamlMember.IsWritePublic%2A>します。 このプロパティはその操作を使用するなどの呼び出し元を知ること、 <xref:System.Xaml.XamlWriter> のシリアル化は、このメンバーの値をターゲット オブジェクトに書き込むことができます。 バッキング CLR に対してリフレクション手法を使用して既定の実装で、メンバーが書き込み可能かどうかの決定が行われた <xref:System.Type> とそのメンバー \(、 <xref:System.Reflection.MemberInfo>\)。 そのため、既定では、CLR 型システムに XAML 型システムがによって異なります。 ただし、この依存関係を削除、XAML 型システムの報告用 <xref:System.Xaml.XamlMember.IsWritePublic%2A> API をオーバーライドすることで <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>します。 オーバーライド、内では、固定の XAML ボキャブラリや XAML メンバーが XAML ボキャブラリに書き込み可能かどうかを判断するためには、その他の方法のさまざまな用に最適化されているマスター参照テーブル、テクノロジに固有のメタデータなどの他の決定を使用できます。  
  
## XAML スキーマ コンテキストを使用しない XamlMember を構築します。  
 ほとんどのコンス トラクター <xref:System.Xaml.XamlMember> を必要とする <xref:System.Xaml.XamlSchemaContext> 、初期化の一環として。<xref:System.Xaml.XamlSchemaContext> も多くの内部に必要な <xref:System.Xaml.XamlSchemaContext> バッキング型から転送される情報の取得などの操作です。 使用するとき、 <xref:System.Xaml.XamlMember> API では、通常がある場合、 <xref:System.Xaml.XamlSchemaContext> は周囲の構造から利用できるよう、 <xref:System.Xaml.XamlWriter>です。 この場合は、渡すことができます、 <xref:System.Xaml.XamlSchemaContext> を通じて XAML スキーマ コンテキストを必要とするすべての XAML 型システム呼び出しへの参照します。  
  
 特定の 1 つのコンス トラクター <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>, 、しないため、 <xref:System.Xaml.XamlSchemaContext>です。 ただし、 <xref:System.Xaml.XamlMember> を使用して構築されている、 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> 署名を返します `true` の <xref:System.Xaml.XamlMember.IsUnknown%2A>です。  
  
 パスの読み込みの <xref:System.Xaml.XamlObjectWriter>, 、そのようなメンバーは、オブジェクト グラフに書き込まれることはできません。 .NET Framework XAML サービスの実装を使用して、 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName> スローされます、 <xref:System.Xaml.XamlObjectWriterException> ときに、関連する <xref:System.Xaml.XamlMember> レポート `true` の <xref:System.Xaml.XamlMember.IsUnknown%2A>です。  
  
 いない構築する必要があります、 <xref:System.Xaml.XamlMember> の値を持つ `true` の <xref:System.Xaml.XamlMember.IsUnknown%2A> 実装からの例外を処理できる場合を除き、 <xref:System.Xaml.XamlObjectWriter>, 、その他の方法を調整することも、 <xref:System.Xaml.XamlObjectWriter> 動作します。 たとえば、次の 1 つ以上の場合があります、実装の場合は true。。  
  
-   XAML スキーマ コンテキストは後で使用できます。  
  
-   メンバーの呼び出し元のパターンを使用するとします。  
  
-   意図的にオーバーライドする <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName> カスタム XAML ライターにします。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlType" />
    <altmember cref="T:System.Xaml.XamlDirective" />
    <altmember cref="T:System.Xaml.XamlObjectWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.EventInfo eventInfo, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="eventInfo">CLR 型システム <see cref="T:System.Reflection.EventInfo" /> イベント メンバーを表します。</param>
        <param name="schemaContext">
          <see cref="T:System.Xaml.XamlSchemaContext" /> メンバーを修飾するコンテキスト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlMember" /> クラスの CLR 型システムを使用して <see cref="T:System.Reflection.EventInfo" /> と <see cref="T:System.Xaml.XamlSchemaContext" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メンバーは、イベント \(イベント ハンドラーのコネクション ポイントのプロパティ\) を表す場合は、このコンス トラクターを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.PropertyInfo propertyInfo, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="propertyInfo">CLR 型システム <see cref="T:System.Reflection.PropertyInfo" /> を表すプロパティのメンバーです。</param>
        <param name="schemaContext">
          <see cref="T:System.Xaml.XamlSchemaContext" /> メンバーを修飾するコンテキスト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlMember" /> クラスの CLR 型システムを使用して <see cref="T:System.Reflection.PropertyInfo" /> と <see cref="T:System.Xaml.XamlSchemaContext" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メンバー プロパティを表します \(具体的には、イベント ハンドラー接続ではない\) 場合は、このコンス トラクターを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.EventInfo eventInfo, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="eventInfo">CLR 型システム <see cref="T:System.Reflection.EventInfo" /> イベント メンバーを表します。</param>
        <param name="schemaContext">
          <see cref="T:System.Xaml.XamlSchemaContext" /> メンバーを修飾するコンテキスト。</param>
        <param name="invoker">
          <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> に対するランタイムのリフレクションを処理する実装を呼び出す、 <see cref="T:System.Xaml.XamlMember" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlMember" /> クラスの CLR 型システムを使用して <see cref="T:System.Reflection.EventInfo" /> と <see cref="T:System.Xaml.XamlSchemaContext" />, も含め、 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 情報。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メンバーは、イベント \(またはイベント ハンドラーの接続ポイント プロパティ\) を表す場合は、このコンス トラクターを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.PropertyInfo propertyInfo, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="propertyInfo">CLR 型システム <see cref="T:System.Reflection.PropertyInfo" /> を表すプロパティのメンバーです。</param>
        <param name="schemaContext">
          <see cref="T:System.Xaml.XamlSchemaContext" /> メンバーを修飾するコンテキスト。</param>
        <param name="invoker">
          <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> に対して実行時の呼び出しを処理する実装を呼び出す、 <see cref="T:System.Xaml.XamlMember" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlMember" /> リフレクションを使用してクラス <see cref="T:System.Reflection.PropertyInfo" /> と <see cref="T:System.Xaml.XamlSchemaContext" />, も含め、 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 情報。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メンバーがプロパティを表す場合にのみ、およびイベント ハンドラー接続ではない場合は、このコンス トラクターを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachableEventName, class System.Reflection.MethodInfo adder, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachableEventName" Type="System.String" />
        <Parameter Name="adder" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="attachableEventName">アタッチ可能なイベントの名前文字列です。</param>
        <param name="adder">CLR 型システム <see cref="T:System.Reflection.MethodInfo" /> ハンドラーの <see langword="Add" /> アタッチ可能なメンバーのメソッドの実装をバックアップします。</param>
        <param name="schemaContext">
          <see cref="T:System.Xaml.XamlSchemaContext" /> メンバーを修飾するコンテキスト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlMember" /> のクラス、 <see cref="T:System.Xaml.XamlMember" /> アタッチ可能なイベントを表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メンバーがアタッチ可能なイベント メンバーを表す場合は、このコンス トラクターを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string name, System.Xaml.XamlType declaringType, bool isAttachable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Xaml.XamlType declaringType, bool isAttachable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="declaringType" Type="System.Xaml.XamlType" />
        <Parameter Name="isAttachable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">メンバーの名前文字列です。</param>
        <param name="declaringType">
          <see cref="T:System.Xaml.XamlType" /> 宣言の型について説明します。</param>
        <param name="isAttachable">
          <see langword="true" /> メンバーがアタッチ可能であることを示しますそれ以外の場合、 <see langword="false" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlMember" /> 文字列名を使用して、まったく宣言をクラス <see cref="T:System.Xaml.XamlType" /> 情報。 A <see cref="T:System.Xaml.XamlMember" /> がこれで構築されているシグネチャに多くの制限があります。「解説」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Xaml.XamlMember> を使用して構築されている、 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> 署名を返します `true` の <xref:System.Xaml.XamlMember.IsUnknown%2A>です。  
  
 パスの読み込みの <xref:System.Xaml.XamlObjectWriter>, 、そのようなメンバーは、オブジェクト グラフに書き込まれることはできません。 .NET Framework XAML サービス実装を使用して、 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName> スローされます、 <xref:System.Xaml.XamlObjectWriterException> ときに、関連する <xref:System.Xaml.XamlMember> レポート `true` の <xref:System.Xaml.XamlMember.IsUnknown%2A>です。  
  
 いない構築する必要があります、 <xref:System.Xaml.XamlMember> と <xref:System.Xaml.XamlMember.IsUnknown%2A>`true` 実装からの例外を処理できる場合を除き、 <xref:System.Xaml.XamlObjectWriter>, 、その他の方法を調整することも、 <xref:System.Xaml.XamlObjectWriter> 動作します。 たとえば、次の 1 つ以上の場合があります、実装の場合は true。。  
  
-   XAML スキーマ コンテキストは後で使用できます。  
  
-   メンバーの呼び出し元のパターンを使用するとします。  
  
-   意図的にオーバーライドする <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName> カスタム XAML ライターにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> または <paramref name="declaringType" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachablePropertyName, class System.Reflection.MethodInfo getter, class System.Reflection.MethodInfo setter, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachablePropertyName" Type="System.String" />
        <Parameter Name="getter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="setter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="attachablePropertyName">アタッチ可能なプロパティの名前文字列です。</param>
        <param name="getter">CLR 型システム <see cref="T:System.Reflection.MethodInfo" /> の <see langword="get" /> アタッチ可能なメンバーのアクセサーの実装をバックアップします。</param>
        <param name="setter">CLR 型システム <see cref="T:System.Reflection.MethodInfo" /> の <see langword="set" /> アタッチ可能なメンバーのアクセサーの実装をバックアップします。</param>
        <param name="schemaContext">
          <see cref="T:System.Xaml.XamlSchemaContext" /> メンバーを修飾するコンテキスト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlMember" /> のクラス、 <see cref="T:System.Xaml.XamlMember" /> アタッチ可能なプロパティを表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メンバーがアタッチ可能なプロパティを表す場合は、このコンス トラクターを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachableEventName, class System.Reflection.MethodInfo adder, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachableEventName" Type="System.String" />
        <Parameter Name="adder" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="attachableEventName">アタッチ可能なイベントの名前文字列です。</param>
        <param name="adder">CLR 型システム <see cref="T:System.Reflection.MethodInfo" /> ハンドラーの <see langword="Add" /> アタッチ可能なメンバーのメソッドの実装をバックアップします。</param>
        <param name="schemaContext">
          <see cref="T:System.Xaml.XamlSchemaContext" /> メンバーを修飾するコンテキスト。</param>
        <param name="invoker">
          <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> に対して実行時の呼び出しを処理する実装を呼び出す、 <see cref="T:System.Xaml.XamlMember" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlMember" /> のクラス、 <see cref="T:System.Xaml.XamlMember" /> 、アタッチ可能なイベントを表すなど <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 情報。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メンバーがアタッチ可能なイベント メンバーを表す場合は、このコンス トラクターを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachablePropertyName, class System.Reflection.MethodInfo getter, class System.Reflection.MethodInfo setter, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachablePropertyName" Type="System.String" />
        <Parameter Name="getter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="setter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="attachablePropertyName">アタッチ可能なプロパティの名前文字列です。</param>
        <param name="getter">CLR 型システム <see cref="T:System.Reflection.MethodInfo" /> の <see langword="get" /> アタッチ可能なメンバーのアクセサーの実装をバックアップします。</param>
        <param name="setter">CLR 型システム <see cref="T:System.Reflection.MethodInfo" /> の <see langword="set" /> アタッチ可能なメンバーのアクセサーの実装をバックアップします。</param>
        <param name="schemaContext">
          <see cref="T:System.Xaml.XamlSchemaContext" /> メンバーを修飾するコンテキスト。</param>
        <param name="invoker">
          <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> に対して実行時の呼び出しを処理する実装を呼び出す、 <see cref="T:System.Xaml.XamlMember" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlMember" /> のクラス、 <see cref="T:System.Xaml.XamlMember" /> 、アタッチ可能なプロパティを表すなど <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 情報。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メンバーがアタッチ可能なプロパティを持つメンバーを表す場合は、このコンス トラクターを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xaml.XamlType" /> これに関連付けられているメンバーを宣言する型の <see cref="T:System.Xaml.XamlMember" />です。</summary>
        <value>
          <see cref="T:System.Xaml.XamlType" /> これに関連付けられているメンバーを宣言する型の <see cref="T:System.Xaml.XamlMember" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この値は、通常は、初期化中に設定し、は通常ありません `null`します。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlMember.DeclaringType%2A> 情報は、そのコンス トラクターによって初期化で渡すことができます。 基本コンス トラクターの初期化を直接呼び出すことによって <xref:System.Xaml.XamlMember> 派生クラスは、一部の基本クラスで行われる値チェックを省略できます。 そのため、派生の初期化は、基になる CLR 宣言の型のシステム情報と予想される方法で整合しなくように XAML メンバーの型の報告されたメンバーのリレーションシップ情報を変更できます。 セキュリティ クリティカルなチェックの種類の情報を宣言するには、代わりに、基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeferringLoader">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; DeferringLoader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; DeferringLoader" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DeferringLoader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> XAML の遅延読み込みの際に使用されるオブジェクトがオブジェクトを宣言します。</summary>
        <value>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> と <see cref="T:System.Xaml.XamlDeferringLoader" /> のジェネリック制約です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す <xref:System.Xaml.XamlMember.DeferringLoader%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupDeferringLoader%2A> またはそのメソッドの特定のオーバーライドします。 この動作は、初期の内部リフレクション ロジックで、情報がまだ設定されていない場合に発生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DependsOn">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt; DependsOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlMember&gt; DependsOn" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DependsOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Xaml.XamlMember" /> オブジェクトの一覧を取得します。 これらのプロバイダーがこの基準とした初期化の順序の依存関係が存在するメンバー <see cref="T:System.Xaml.XamlMember" />します。</summary>
        <value>
          <see cref="T:System.Xaml.XamlMember" /> オブジェクトの一覧。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す <xref:System.Xaml.XamlMember.DependsOn%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupDependsOn%2A> またはそのメソッドの特定のオーバーライドします。 この動作は、初期の内部リフレクション ロジックで、情報がまだ設定されていない場合に発生します。  
  
 `DependsOn` パターンが意図的に矛盾する一般的な XAML ルール オブジェクト モデルのケースに適用できます。 XAML の一般的な規則は、初期化のテキストとして \(または XAML 2009 のファクトリ メソッド\) は渡されませんが、型のメンバーは任意の順序で割り当てることがある必要があります。 適用することで、 `DependsOn` パターンがメンバーは、XAML ライターを指示することを常にこのメンバーの前に参照されたメンバーを処理します。 現在のメンバーの値にコンテキスト、または、他のメンバーが設定された後にのみ使用可能なその他の情報が必要とする場合に、このパターンを適用することができます。  
  
 `DependsOn` パターンを慎重に適用され、アーキテクチャの目的で使用して、プロパティのシナリオ用に予約する必要があります。 多数の依存関係には、XAML の処理速度が低下する可能性があります。 また、ことも、循環依存関係を作成する XAML の処理の動作が定義されている場合です。  
  
 例 `DependsOn` WPF からのシナリオでは、特定のプロパティを含めるに <xref:System.Windows.Controls.ControlTemplate> と <xref:System.Windows.DataTemplate>, の <xref:System.Windows.Trigger>, 、および <xref:System.Windows.Setter>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.DependsOnAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このオブジェクトと比較するオブジェクト。</param>
        <summary>現在のオブジェクトが別のオブジェクトと等しいかどうかを示します。</summary>
        <returns>現在のオブジェクトが <paramref name="obj" /> パラメーターと等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.XamlMember other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.XamlMember other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="other">このオブジェクトと比較するオブジェクト。</param>
        <summary>現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。</summary>
        <returns>現在のオブジェクトが <paramref name="other" /> パラメーターと等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このオブジェクトのハッシュ コードを返します。</summary>
        <returns>整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.GetXamlNamespaces" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この XAML メンバーが存在できる XAML 名前空間の一覧を返します。</summary>
        <returns>文字列としての XAML 名前空間の識別子の一覧。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装、 <xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName> から結果を呼び出し、 <xref:System.Xaml.XamlMember.DeclaringType%2A> これに関連付けられている <xref:System.Xaml.XamlMember>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoker">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlMemberInvoker Invoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlMemberInvoker Invoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Invoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlMemberInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> これに関連付けられている実装 <see cref="T:System.Xaml.XamlMember" />します。</summary>
        <value>
          <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> これに関連付けられている実装 <see cref="T:System.Xaml.XamlMember" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Invoker` パターンは、高度な XAML 型システム拡張技術です。`Invoker` パターンは、XAML 型システムの定義から .NET Framework XAML サービスを使用中に別のスキーマ型のマッピングの動作を挿入する方法を提供します。  
  
 場合、 <xref:System.Xaml.XamlMember.LookupInvoker%2A> オーバーライド `null`, 、既定の実装を返す場合、または `null` が欠けているため、 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> この <xref:System.Xaml.XamlMember>, 、 <xref:System.Xaml.XamlMember.Invoker%2A> プロパティを返します。 <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>します。  
  
 <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> が既定値です。 これは、ほとんどの処理が .NET Framework XAML サービスと既定の XAML スキーマ コンテキストを使用し、固有の仕様が上書きされない場合は true。 `Invoker` XAML 型システム エンティティを構築するためのパターンが渡されます。  
  
 呼び出す <xref:System.Xaml.XamlMember.Invoker%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupInvoker%2A> またはそのメソッドの特定のオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAmbient">
      <MemberSignature Language="C#" Value="public bool IsAmbient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAmbient" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsAmbient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlMember" /> アンビエント プロパティとして報告されます。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlMember" /> アンビエント プロパティとして報告される以外 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す <xref:System.Xaml.XamlMember.IsAmbient%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> またはそのメソッドの特定のオーバーライドします。 この動作は、初期の内部リフレクション ロジックで、情報がまだ設定されていない実装で発生します。  
  
 アンビエント プロパティのチェックは、通常、オブジェクトと、型の修飾アンビエント使用状況に依存する値が正しく機能できることを確認する XAML の処理ロジックの一部です。 .NET Framework XAML サービス Api と既定の XAML スキーマ コンテキストと属性に基づいてこの値を設定 <xref:System.Windows.Markup.AmbientAttribute>します。 既定の実装 <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> は既存のこの <xref:System.Windows.Markup.AmbientAttribute> 方法では、し、返された `true` 場合 <xref:System.Windows.Markup.AmbientAttribute> メンバー宣言の上に存在します。  
  
 <xref:System.Windows.Markup.AmbientAttribute> を含むいくつかの WPF 型のメンバーである <xref:System.Windows.Application>, 、<xref:System.Windows.Setter>, 、および <xref:System.Windows.Style>です。 見つかったも、 <xref:System.Windows.ResourceDictionary> 型で、使用するすべてのメンバーを伴う <xref:System.Windows.ResourceDictionary> ように、型場合考慮するべきアンビエントでも、メンバーが具体的には属性化されません。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.AmbientAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IsAttachable">
      <MemberSignature Language="C#" Value="public bool IsAttachable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAttachable" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsAttachable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlMember" /> アタッチ可能なメンバーです。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlMember" /> アタッチ可能なメンバーは、しない場合は、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xaml.XamlMember.IsAttachable%2A> どのコンス トラクターは、構築に使用されたに基づいて値が初期化される、 <xref:System.Xaml.XamlMember>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirective">
      <MemberSignature Language="C#" Value="public bool IsDirective { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirective" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsDirective" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlMember" /> は XAML ディレクティブです。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlMember" /> は XAML ディレクティブ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xaml.XamlMember.IsDirective%2A> どのコンス トラクターは、構築に使用されたに基づいて値が初期化される、 <xref:System.Xaml.XamlMember>です。 基本 <xref:System.Xaml.XamlMember> コンス トラクターを初期化できるように <xref:System.Xaml.XamlMember.IsDirective%2A> は `false`です。 ただし、 <xref:System.Xaml.XamlDirective> クラス \(、 <xref:System.Xaml.XamlMember> 派生クラス\) を初期化できるように <xref:System.Xaml.XamlMember.IsDirective%2A> は `true`です。  
  
 レポートを作成する場合は、 <xref:System.Xaml.XamlMember.IsDirective%2A> として `true` XAML メンバーのカスタム XAML スキーマ クラスの呼び出し元にから派生することを確認 <xref:System.Xaml.XamlDirective> その動作を有効にする唯一の方法であるためです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEvent">
      <MemberSignature Language="C#" Value="public bool IsEvent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEvent" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlMember" /> イベント メンバーを表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlMember" /> イベントを表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す <xref:System.Xaml.XamlMember.IsEvent%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupIsEvent%2A> またはそのメソッドの特定のオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameValid">
      <MemberSignature Language="C#" Value="public bool IsNameValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameValid" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsNameValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlMember" /> に有効な初期化 <see langword="xamlName" /> で文字列をその <see cref="P:System.Xaml.XamlMember.Name" />します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlMember" /> に有効な初期化 <see langword="xamlName" /> 文字列です。 それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlMember" /> 読み取り専用のメンバーを表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlMember" /> 読み取り専用のメンバーを表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す <xref:System.Xaml.XamlMember.IsReadOnly%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupIsReadOnly%2A> またはそのメソッドの特定のオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadPublic">
      <MemberSignature Language="C#" Value="public bool IsReadPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadPublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsReadPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlMember" /> 、呼び出し可能なパブリック メンバーを表す <see langword="get" /> アクセサー。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlMember" /> 呼び出し可能なパブリックを表す <see langword="get" /> アクセサー。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xaml.XamlMember.IsReadPublic%2A> 値かどうかのチェック、 <xref:System.Xaml.XamlMember.DeclaringType%2A> はパブリックです。 場合 <xref:System.Xaml.XamlMember.DeclaringType%2A> は、非公開、 `get` 実用的な方法で呼び出すことはないと <xref:System.Xaml.XamlMember.IsReadPublic%2A> を返します `false`します。  
  
 呼び出す <xref:System.Xaml.XamlMember.IsReadPublic%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> またはそのメソッドの特定のオーバーライドします。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> メソッドは仮想であり、そのため、上書きできます。 このオーバーライドでは、情報を変更する \(故意またはそれ以外の場合\)、報告されたアクセス XAML メンバーの基になる CLR 宣言の型システムのアクセス情報と予想される方法で整合しなくように可能性があります。 アクセス レベルのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メンバーの型およびメンバーの解決に使用されているバックアップ システムによって名前解決がないかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> メンバーが解決しない場合 <see langword="false" /> メンバーが解決可能な場合です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Xaml.XamlMember> を使用して構築されている、 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> 署名を返します `true` の <xref:System.Xaml.XamlMember.IsUnknown%2A>です。  
  
 パスの読み込みの <xref:System.Xaml.XamlObjectWriter>, 、 <xref:System.Xaml.XamlMember> と `true` の <xref:System.Xaml.XamlMember.IsUnknown%2A> オブジェクト グラフに書き込まれることはできません。 .NET Framework XAML サービス Api で既定の実装の下、 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName> スローされます、 <xref:System.Xaml.XamlObjectWriterException> ときに、関連する <xref:System.Xaml.XamlMember> レポート `true` の <xref:System.Xaml.XamlMember.IsUnknown%2A>です。  
  
 いない構築する必要があります、 <xref:System.Xaml.XamlMember> の値を持つ `true` の <xref:System.Xaml.XamlMember.IsUnknown%2A> 実装からの例外を処理できる場合を除き、 <xref:System.Xaml.XamlObjectWriter>, 、その他の方法を調整することも、 <xref:System.Xaml.XamlObjectWriter> 動作します。  
  
 呼び出す <xref:System.Xaml.XamlMember.IsUnknown%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupIsUnknown%2A> またはそのメソッドの特定のオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriteOnly">
      <MemberSignature Language="C#" Value="public bool IsWriteOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteOnly" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsWriteOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlMember" /> 書き込み専用のメンバーを表します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlMember" /> 書き込み専用のメンバーを表します。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す <xref:System.Xaml.XamlMember.IsWriteOnly%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A> またはそのメソッドの特定のオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWritePublic">
      <MemberSignature Language="C#" Value="public bool IsWritePublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWritePublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsWritePublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Xaml.XamlMember" /> を呼び出し可能なパブリックを持つメンバーを表す <see langword="set" /> アクセサー。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlMember" /> 呼び出し可能なパブリックを表す <see langword="set" /> アクセサー。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xaml.XamlMember.IsWritePublic%2A> 値を考慮するかどうか、 <xref:System.Xaml.XamlMember.DeclaringType%2A> がパブリック決定の一部として。 場合 <xref:System.Xaml.XamlMember.DeclaringType%2A> は、非公開、 `set` 実用的な方法で呼び出すことはないと <xref:System.Xaml.XamlMember.IsWritePublic%2A> を返します `false`します。  
  
 呼び出す <xref:System.Xaml.XamlMember.IsWritePublic%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> またはそのメソッドの特定のオーバーライドします。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> メソッドは仮想であり、そのため、上書きできます。 このオーバーライドでは、情報を変更する \(故意またはそれ以外の場合\)、報告されたアクセス XAML メンバーの基になる CLR 宣言の型システムのアクセス情報と予想される方法で整合しなくように可能性があります。 アクセス レベルのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCustomAttributeProvider">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupCustomAttributeProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスで実装された場合、取得、 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 実装します。</summary>
        <returns>
          <see cref="T:System.Reflection.ICustomAttributeProvider" /> の実装。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 CLR 属性の値を取得する代替の方法で内部のリフレクションを提供するのには、このメソッドをオーバーライドします。 呼び出しなどの一般的な CLR リフレクション ロジックを使用している内部 reflector の上書きがない場合、 <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>です。  
  
 既定の実装では、`null` が返されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupDeferringLoader">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupDeferringLoader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> XAML の遅延読み込みの際に使用されるオブジェクトがオブジェクトを宣言します。</summary>
        <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> を持つ、 <see cref="T:System.Xaml.XamlDeferringLoader" /> のジェネリック制約です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し元から値を取得するときに、このメソッドが呼び出され、 <xref:System.Xaml.XamlMember.DeferringLoader%2A> プロパティです。 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlMember.DeferringLoader%2A> リフレクションの内部に既定で有効になっている値からは異なる値を返すカスタムも提供する場合と <xref:System.Xaml.Schema.XamlMemberInvoker> 情報。  
  
 既定の実装オブジェクトを取得するかを参照して <xref:System.Windows.Markup.XamlDeferLoadAttribute> またはを使用して、 <xref:System.Xaml.XamlDeferringLoader> 宣言の型からです。 このメソッドを返す場合があるかどうかは、どちらのオブジェクトは、使用、 `null`です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.DeferringLoader" />
      </Docs>
    </Member>
    <Member MemberName="LookupDependsOn">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt; LookupDependsOn ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlMember&gt; LookupDependsOn() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupDependsOn" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一覧を返す <see cref="T:System.Xaml.XamlMember" /> オブジェクトです。 リスト内の項目がこの基準とした初期化の順序の依存関係が存在するメンバーを報告 <see cref="T:System.Xaml.XamlMember" />します。</summary>
        <returns>
          <see cref="T:System.Xaml.XamlMember" /> オブジェクトの一覧。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し元から値を取得するときに、このメソッドが呼び出され、 <xref:System.Xaml.XamlMember.DependsOn%2A> プロパティです。 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlMember.DependsOn%2A> リフレクションの内部に既定で有効になっている値からは異なる値を返すカスタムも提供する場合と <xref:System.Xaml.Schema.XamlMemberInvoker> 情報。  
  
 WPF XAML リーダーとライターの実装では、この場合の属性 <xref:System.Windows.Markup.DependsOnAttribute>します。 既定の実装では、この既存 <xref:System.Windows.Markup.DependsOnAttribute> 手法です。  
  
 使用していない場合は、このメソッドをオーバーライド <xref:System.Windows.Markup.DependsOnAttribute> この目的し、独自の方法ではプロパティの処理順序を示すためには、その手法を置換します。 プロパティの処理順序をサポートする予定がない場合が返されないため、結果は適切な既定の実装を使用することができます。  
  
 リストとは、読み取り専用です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.DependsOn" />
      </Docs>
    </Member>
    <Member MemberName="LookupInvoker">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlMemberInvoker LookupInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlMemberInvoker LookupInvoker() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupInvoker" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlMemberInvoker</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> これに関連付けられている <see cref="T:System.Xaml.XamlMember" />します。</summary>
        <returns>
          <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 情報 <see cref="T:System.Xaml.XamlMember" />; または <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しでこのメソッドが呼び出される <xref:System.Xaml.XamlMember.Invoker%2A>です。  
  
 既定の実装する必要のない、 <xref:System.Xaml.XamlMember> 初期に合格したコンス トラクターのいずれかを使用して構築する <xref:System.Xaml.Schema.XamlMemberInvoker>です。 ただし、 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> の値が存在する必要があります、 <xref:System.Xaml.XamlMember>。 そうしないと、既定の実装 `null`します。  
  
 派生する場合は、このメソッドをオーバーライド <xref:System.Xaml.Schema.XamlMemberInvoker> 派生クラスを返すしようとします。 返された場合 `null`, 、<xref:System.Xaml.XamlMember.Invoker%2A> 返します <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> の呼び出し元にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.Invoker" />
        <altmember cref="T:System.Xaml.Schema.XamlMemberInvoker" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsAmbient">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsAmbient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsAmbient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsAmbient" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。 かどうかこの <see cref="T:System.Xaml.XamlMember" /> アンビエント プロパティとして報告されます。</summary>
        <returns>
          <see langword="true" /> これを報告する <see cref="T:System.Xaml.XamlMember" /> がアンビエント プロパティとそれ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アンビエント XAML プロパティの情報をチェックする内部の呼び出しによって呼び出されます。 アンビエント プロパティの動作は、XAML リーダーと XAML ライターのパブリック API の動作に反映されます。 参照の内部呼び出し <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> オブジェクトと、型の修飾周囲の使用状況に依存する値が正しく機能できることを確認する XAML の処理ロジックの一部は、通常です。 既定の .NET Framework XAML サービス実装では、バッキング型をリフレクションからこの情報を取得する属性を適用する CLR を使用します。 具体的には、既定の実装を確認 <xref:System.Windows.Markup.AmbientAttribute> し、返します `true` の <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> 場合 <xref:System.Windows.Markup.AmbientAttribute> メンバー定義に存在します。  
  
 使用していない場合は、このメソッドをオーバーライド <xref:System.Windows.Markup.AmbientAttribute> この目的し、独自の方法では、XAML のアンビエント プロパティを示すためには、その手法を置換します。  
  
 属性に WPF から Api の使用例 <xref:System.Windows.Markup.AmbientAttribute> は <xref:System.Windows.Trigger.Property%2A?displayProperty=fullName> と <xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.AmbientAttribute" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsEvent">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsEvent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得するかどうかこれ <see cref="T:System.Xaml.XamlMember" /> イベントを表します。</summary>
        <returns>
          <see langword="true" /> レポートにこの <see cref="T:System.Xaml.XamlMember" /> イベントを表します。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装のチェック項目かどうか <xref:System.Xaml.XamlMember.UnderlyingMember%2A> のデータ型 <xref:System.Reflection.EventInfo>, としている場合に返されます `true`します。  
  
 呼び出し元から値を取得するときに、このメソッドが呼び出される <xref:System.Xaml.XamlMember.IsEvent%2A>です。 全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド <xref:System.Xaml.XamlMember> 派生クラスでは、XAML を解釈できるメタデータが特殊なかどうかは、ケースごとにシステムの表現を入力します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsEvent" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsReadOnly">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsReadOnly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。 かどうかこの <see cref="T:System.Xaml.XamlMember" /> 目的の読み取り専用プロパティを表します。</summary>
        <returns>
          <see langword="true" /> これを報告する <see cref="T:System.Xaml.XamlMember" /> 目的読み取り専用プロパティであるとそれ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装 `true` 場合 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 存在しますが、パブリック `set` アクセサーが存在しないため、内部リフレクションによって決定されます。  
  
 呼び出し元から値を取得するときに、このメソッドが呼び出される <xref:System.Xaml.XamlMember.IsReadOnly%2A>です。 全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド <xref:System.Xaml.XamlMember> 派生クラスでは、XAML を解釈できるメタデータが特殊なかどうかは、ケースごとにシステムの表現を入力します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsReadPublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsReadPublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsReadPublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsReadPublic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返すかどうかこれ <see cref="T:System.Xaml.XamlMember" /> を持つパブリック プロパティを表す <see langword="get" /> アクセサー。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlMember" /> を持つパブリック プロパティを表す <see langword="get" /> アクセサー。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装は、内部リフレクションまたは否定のいずれかで結果を返します <xref:System.Xaml.XamlMember.IsWriteOnly%2A>, 、その順序で処理します。  
  
 <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> メンバー自体がパブリックであるかどうかを返します返す `true` 型を宣言する重要な非公開のパブリック メンバーにします。 使用 <xref:System.Xaml.XamlMember.IsReadPublic%2A> 代わりに、宣言型の可視性を検討する場合。  
  
 呼び出し元から値を取得するときに、このメソッドが呼び出される <xref:System.Xaml.XamlMember.IsReadPublic%2A>です。 全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド <xref:System.Xaml.XamlMember> 派生クラス、またはケースごとにこの確認のために使用可能なメタデータが専門的な場合です。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> メソッドは仮想であり、そのため、上書きできます。 このオーバーライドでは、情報を変更する \(故意またはそれ以外の場合\)、報告されたアクセス XAML メンバーの基になる CLR 宣言の型システムのアクセス情報と予想される方法で整合しなくように可能性があります。 アクセス レベルのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsReadPublic" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsUnknown">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsUnknown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsUnknown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsUnknown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返すかどうかこの <see cref="T:System.Xaml.XamlMember" /> 型およびメンバーの解決に使用されているバックアップ システムが解決できないメンバーを表します。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlMember" /> 以外で解決可能なメンバーを表します。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し元から値を取得するときに、このメソッドを呼び出すことが <xref:System.Xaml.XamlMember.IsUnknown%2A>です。 既定の実装は、いずれかの内部リフレクションに基づくかを確認する結果を返します、 `null` の値 <xref:System.Xaml.XamlMember.UnderlyingMember%2A>, 、その順序で処理します。  
  
 全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド <xref:System.Xaml.XamlMember> 派生クラス、またはケースごとにこの確認のために使用可能なメタデータが専門的な場合です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsUnknown" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsWriteOnly">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWriteOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWriteOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsWriteOnly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。 かどうかこの <see cref="T:System.Xaml.XamlMember" /> を持つパブリック メンバーを表す <see langword="set" /> アクセサーがパブリックではない <see langword="get" /> アクセサー。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlMember" /> 書き込み専用のメンバーを表します。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装 `true` 場合、 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> が存在するを持つパブリック `set` アクセサーと、非公開 `get` アクセサー、内部のリフレクションによって決定されます。  
  
 呼び出し元から値を取得するときに、このメソッドが呼び出される <xref:System.Xaml.XamlMember.IsWriteOnly%2A>です。 全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド <xref:System.Xaml.XamlMember> 派生クラス、またはケースごとにこの確認のために使用可能なメタデータが専門的な場合です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsWriteOnly" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsWritePublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWritePublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWritePublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsWritePublic" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。 かどうかこの <see cref="T:System.Xaml.XamlMember" /> を持つパブリック メンバーを表す <see langword="set" /> アクセサー。</summary>
        <returns>
          <see langword="true" /> この場合 <see cref="T:System.Xaml.XamlMember" /> 書き込み可能なメンバーを表します。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装は、内部リフレクションまたはの否定のいずれかに基づく結果を返す <xref:System.Xaml.XamlMember.IsReadOnly%2A>, 、その順序で処理します。  
  
 呼び出し元から値を取得するときに、このメソッドが呼び出される <xref:System.Xaml.XamlMember.IsWritePublic%2A>です。 全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド <xref:System.Xaml.XamlMember> 派生クラス、またはケースごとにこの確認のために使用可能なメタデータが専門的な場合です。  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> メソッドは仮想であり、そのため、上書きできます。 このオーバーライドでは、情報を変更する \(故意またはそれ以外の場合\)、報告されたアクセス XAML メンバーの基になる CLR 宣言の型システムのアクセス情報と予想される方法で整合しなくように可能性があります。 アクセス レベルのセキュリティ クリティカルなチェックには、代わりに基になる CLR 型を使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsWritePublic" />
      </Docs>
    </Member>
    <Member MemberName="LookupMarkupExtensionBracketCharacters">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IReadOnlyDictionary&lt;char,char&gt; LookupMarkupExtensionBracketCharacters ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;char, char&gt; LookupMarkupExtensionBracketCharacters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.Char,System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>マークアップ拡張の左角かっこと右角かっこ文字を返します。</summary>
        <returns>左角かっこと右角かっこ文字を含むコレクション。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTargetType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupTargetType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupTargetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupTargetType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Xaml.XamlType" /> タイプの場所、 <see cref="T:System.Xaml.XamlMember" /> 存在できます。</summary>
        <returns>型で、 <see cref="T:System.Xaml.XamlMember" /> 存在できます。 「解説」を参照してください。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装は、アタッチ可能な不可能なメンバーによって区別します。 非アタッチ可能なメンバーの <xref:System.Xaml.XamlMember.LookupTargetType%2A> は常に返します <xref:System.Xaml.XamlMember.DeclaringType%2A>します。 アタッチ可能なメンバーの <xref:System.Xaml.XamlMember.LookupTargetType%2A> を調べることに基づく結果を返します、 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> アクセサー パラメーターの型の種類は XAML スキーマ コンテキストに基づいて解釈します。  
  
 呼び出し元から値を取得するときに、このメソッドが呼び出される <xref:System.Xaml.XamlMember.TargetType%2A>です。 全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド <xref:System.Xaml.XamlMember> 派生クラス、またはケースごとにこの確認のために使用可能なメタデータが専門的な場合です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.TargetType" />
      </Docs>
    </Member>
    <Member MemberName="LookupType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Xaml.XamlType" /> のメンバーによって使用される型。 「解説」を参照してください。</summary>
        <returns>
          <see cref="T:System.Xaml.XamlType" /> のメンバーによって使用される型。 「解説」を参照してください。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し元から値を取得するときに、このメソッドが呼び出される <xref:System.Xaml.XamlMember.Type%2A>です。 このメソッドをオーバーライドする場合は <xref:System.Xaml.XamlMember.Type%2A> リフレクションの内部に既定で有効になっている値からは異なる値を返すカスタムも提供する場合と <xref:System.Xaml.Schema.XamlMemberInvoker> 情報。  
  
 既定の実装は、異なるコード パスと概念の意味、返された <xref:System.Xaml.XamlType> かどうかに基づくこの <xref:System.Xaml.XamlMember> プロパティ、メソッド、またはイベントを表します。  
  
-   プロパティの場合、返された <xref:System.Xaml.XamlType> プロパティによって返されるプロパティの設定の種類です。  
  
-   返されたイベントの <xref:System.Xaml.XamlType> は、必要なイベント ハンドラー型 \(CLR の実装でのデリゲート\) です。  
  
-   メソッドで <xref:System.Xaml.XamlType> は戻り値の型。  
  
 各ケースでは、XAML スキーマ コンテキストを基になるシステム型から XAML の型を評価する使用されます。  
  
 呼び出し元から値を取得するときに、このメソッドが呼び出される <xref:System.Xaml.XamlMember.Type%2A>です。 全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド <xref:System.Xaml.XamlMember> 派生クラス、またはケースごとにこの確認のために使用可能なメタデータが専門的な場合です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.Type" />
      </Docs>
    </Member>
    <Member MemberName="LookupTypeConverter">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; LookupTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; LookupTypeConverter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupTypeConverter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これに関連付けられている型コンバーターの実装を返す <see cref="T:System.Xaml.XamlMember" />します。</summary>
        <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> インスタンス <see cref="T:System.ComponentModel.TypeConverter" /> は制約または <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装では、次のロジックと処理順序を使用します。  
  
-   メンバー レベルで属性が存在する場合 \(<xref:System.ComponentModel.TypeConverterAttribute>\) を呼び出すのため、属性情報が使用される <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> XAML スキーマ コンテキストに対してです。  
  
-   場合 <xref:System.Xaml.XamlMember.Type%2A> が有効で、型に関連付けられている型コンバーターが返されます。  
  
-   メンバーがイベントの場合は、イベント固有の型コンバーターが返されます。  
  
 呼び出し元から値を取得するときに、このメソッドが呼び出される <xref:System.Xaml.XamlMember.TypeConverter%2A>です。 全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド <xref:System.Xaml.XamlMember> 派生クラス、またはケースごとにこの確認のために使用可能なメタデータが専門的な場合です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingGetter">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo LookupUnderlyingGetter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo LookupUnderlyingGetter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingGetter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see langword="get" /> これに関連付けられているアクセサー <see cref="T:System.Xaml.XamlMember" />します。</summary>
        <returns>
          <see cref="T:System.Reflection.MethodInfo" /> 関連付けられた <see langword="get" /> アクセサーまたは <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装では、解釈、 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> プロパティとして <xref:System.Reflection.PropertyInfo> の値を返します <xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName> \(パラメーターを設定した `true`\)、返されるメソッドを非公開にできることを意味します。 この動作が発生するで `null` 場合にします。 関連付けられているアクセサーが存在しない場合や、メンバーがプロパティではない場合などです。  
  
 呼び出し元から値を取得するときに、このメソッドが呼び出され、 <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A> プロパティに関連付けられている <xref:System.Xaml.Schema.XamlMemberInvoker>します。 全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド <xref:System.Xaml.XamlMember> 派生クラス、またはケースごとにこの確認のために使用可能なメタデータが専門的な場合です。 実装することを確認 <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, 、<xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, 、および <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> 相関関係を持つ結果を返すようにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingMember">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MemberInfo LookupUnderlyingMember ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MemberInfo LookupUnderlyingMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingMember" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>CLR 型システムを返す <see cref="T:System.Reflection.MemberInfo" /> これに関連付けられている <see cref="T:System.Xaml.XamlMember" />します。</summary>
        <returns>CLR 型システム <see cref="T:System.Reflection.MemberInfo" /> これに関連付けられているオブジェクト <see cref="T:System.Xaml.XamlMember" />; または <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装では、コンス トラクターでベースの基になるメンバー情報を返します。 場合、 <xref:System.Reflection.MemberInfo> を基になるメンバーを設定するための十分な情報が得られないのシグネチャを持つオブジェクトを構築すると、このメソッドが戻る `null`します。  
  
 基になるメンバーは、構築時に設定されている場合は、このメソッドを呼び出す必要があります必要はありません。  
  
 呼び出し元から値を取得するときに、このメソッドが呼び出される <xref:System.Xaml.XamlMember.UnderlyingMember%2A>です。 全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド <xref:System.Xaml.XamlMember> 派生クラス、またはケースごとにこの確認のために使用可能なメタデータが専門的な場合です。 実装することを確認 <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, 、<xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, 、および <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> 相関関係を持つ結果を返すようにします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.UnderlyingMember" />
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingSetter">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo LookupUnderlyingSetter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo LookupUnderlyingSetter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingSetter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see langword="set" /> これに関連付けられているアクセサー <see cref="T:System.Xaml.XamlMember" />します。</summary>
        <returns>
          <see cref="T:System.Reflection.MethodInfo" /> 関連付けられた <see langword="set" /> アクセサーまたは <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装では、解釈 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> として <xref:System.Reflection.PropertyInfo> の値を返します <xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName> \(パラメーターを設定した `true`\)、返されるメソッドを非公開にできることを意味します。 これにより、 `null` 特定の場合は、このようなアクセサーはありませんかメンバーがプロパティではない場合などです。  
  
 呼び出し元から値を取得するときに、このメソッドが呼び出される <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A> に関連付けられている <xref:System.Xaml.Schema.XamlMemberInvoker>します。全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド <xref:System.Xaml.XamlMember> 派生クラス、またはケースごとにこの確認のために使用可能なメタデータが専門的な場合です。 実装することを確認 <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, 、<xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, 、および <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> 相関関係を持つ結果を返すようにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupValueSerializer">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupValueSerializer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これに関連付けられている値シリアライザーの実装を返す <see cref="T:System.Xaml.XamlMember" />します。</summary>
        <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> インスタンス <see cref="T:System.Windows.Markup.ValueSerializer" /> 制約、または <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装では、次のロジックと処理順序を使用します。  
  
-   メンバー レベルで属性が存在する場合 \(<xref:System.Windows.Markup.ValueSerializerAttribute>\) を呼び出すのため、属性情報が使用される <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> XAML スキーマ コンテキストに対してです。  
  
-   場合 <xref:System.Xaml.XamlMember.Type%2A> が有効で、型に関連付けられている値コンバーターが返されます。  
  
-   上記の条件が該当しない場合は `null` が返されます。  
  
 呼び出し元から値を取得するときに、このメソッドが呼び出される <xref:System.Xaml.XamlMember.ValueSerializer%2A>です。 全体の一貫した結果をレポートする場合は、このメソッドをオーバーライド <xref:System.Xaml.XamlMember> 派生クラス、またはケースごとにこの確認のために使用可能なメタデータが専門的な場合です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.ValueSerializer" />
      </Docs>
    </Member>
    <Member MemberName="MarkupExtensionBracketCharacters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;char,char&gt; MarkupExtensionBracketCharacters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;char, char&gt; MarkupExtensionBracketCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.Char,System.Char&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マークアップ拡張の左角かっこと右角かっこ文字を定義します。</summary>
        <value>左角かっこと右角かっこ文字を含むコレクション。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see langword="xamlName" /> これを宣言して文字列を名前 <see cref="T:System.Xaml.XamlMember" />します。</summary>
        <value>
          <see langword="xamlName" /> これを宣言して文字列を名前 <see cref="T:System.Xaml.XamlMember" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この値は常に、構築時に設定します。 コンス トラクターによって実装される <xref:System.Xaml.XamlMember> 通常は例外をスロー場合は、最初の名前が指定されていない。 そのため、予期しないプロパティをする `null` または、.NET Framework XAML サービスの既定の実装を使用している場合は、空の文字列です。  
  
 [XamlName](http://msdn.microsoft.com/ja-jp/11e4cada-41d2-494d-9531-0d3df4dfcbe3) CLR 型とメンバーの名前付け規則は、正確な intersect ではありません。 CLR で有効なメンバー名を宣言することも XAML 名前付けを無効になります。 可能であれば、この状況を回避する必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.XamlMember xamlMember1, class System.Xaml.XamlMember xamlMember2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlMember1" Type="System.Xaml.XamlMember" />
        <Parameter Name="xamlMember2" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="xamlMember1">
          <see cref="T:System.Xaml.XamlMember" /> または <see langword="null" />。</param>
        <param name="xamlMember2">
          <see cref="T:System.Xaml.XamlMember" /> または <see langword="null" />。</param>
        <summary>指定した 2 つの <see cref="T:System.Xaml.XamlMember" /> オブジェクトの値が同一かどうかを判断します。</summary>
        <returns>
          <see langword="true" /> の値が <paramref name="xamlMember1" /> の値と同じ場合は <paramref name="xamlMember2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.XamlMember xamlMember1, class System.Xaml.XamlMember xamlMember2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlMember1" Type="System.Xaml.XamlMember" />
        <Parameter Name="xamlMember2" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="xamlMember1">
          <see cref="T:System.Xaml.XamlMember" /> または <see langword="null" />。</param>
        <param name="xamlMember2">
          <see cref="T:System.Xaml.XamlMember" /> または <see langword="null" />。</param>
        <summary>指定した 2 つあるかどうかを判断 <see cref="T:System.Xaml.XamlMember" /> オブジェクトが異なる値を設定します。</summary>
        <returns>
          <see langword="true" /> 場合の値 <paramref name="xamlMember1" /> の値と異なる <paramref name="xamlMember2" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredXamlNamespace">
      <MemberSignature Language="C#" Value="public string PreferredXamlNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreferredXamlNamespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.PreferredXamlNamespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>1 つの XAML 名前空間のプライマリの XAML 名前空間を識別する URI を取得 <see cref="T:System.Xaml.XamlMember" />します。</summary>
        <value>このプライマリの XAML 名前空間の識別子 <see cref="T:System.Xaml.XamlMember" />, 、文字列として。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A> プロパティの呼び出しと同じ値を提供する <xref:System.Xaml.XamlMember.GetXamlNamespaces%2A> と返された一覧から最初の値の文字列を取得します。 テキストに戻るか、XAML 名前空間情報を保持する他の表現にメンバーを記述する場合は、任意の XAML 名前空間を使用してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializationVisibility">
      <MemberSignature Language="C#" Value="public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.DesignerSerializationVisibility SerializationVisibility" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.SerializationVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DesignerSerializationVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 値で、ビジュアル デザイナーが、メンバーを処理する方法を示します。</summary>
        <value>値、 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 列挙します。 既定値は、<see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType TargetType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xaml.XamlType" /> タイプの場所、 <see cref="T:System.Xaml.XamlMember" /> 存在できます。</summary>
        <value>型で、 <see cref="T:System.Xaml.XamlMember" /> 存在できます。 「解説」を参照してください。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返される値は、アタッチ可能な不可能なメンバーに異なります。 非アタッチ可能なメンバーの <xref:System.Xaml.XamlMember.TargetType%2A> 返します <xref:System.Xaml.XamlMember.DeclaringType%2A>します。 アタッチ可能なメンバーの <xref:System.Xaml.XamlMember.LookupTargetType%2A> このロジックに基づいている結果が返されます。  
  
-   リフレクションは、バッキングを解決できない場合 \(<xref:System.Xaml.XamlMember.IsUnknown%2A> `true`\)、このメソッドは、汎用オブジェクトの種類を表す内部の定数を返します。  
  
-   前の状態が該当しない場合は <xref:System.Xaml.XamlMember.LookupTargetType%2A> と呼びます。 既定の実装、 <xref:System.Xaml.XamlType> を実装するメソッドを調べることに基づく、 `get` と `set` アクセサー。 クラスをオーバーライドすると、 <xref:System.Xaml.XamlMember.LookupTargetType%2A> フォームの他のメタデータなど、別の動作を使用する場合がありますターゲット タイプについてレポート アタッチ可能なメンバーです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この文字列表現を返します <see cref="T:System.Xaml.XamlMember" />します。</summary>
        <returns>この文字列表現 <see cref="T:System.Xaml.XamlMember" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装は <xref:System.Xaml.XamlMember.Name%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xaml.XamlType" /> のメンバーによって使用される型。</summary>
        <value>
          <see cref="T:System.Xaml.XamlType" /> のメンバーによって使用される型。 「解説」を参照してください。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す <xref:System.Xaml.XamlMember.Type%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupType%2A> またはそのメソッドの特定のオーバーライドします。 これは、初期の内部リフレクション ロジックで情報が既に設定されていない場合に発生します。  
  
 既定の動作 \(ありません <xref:System.Xaml.XamlMember.LookupType%2A> オーバーライド\)、返された <xref:System.Xaml.XamlType> 異なる概念の意味を持つことができます。 かどうかに依存する意味が適用されるこの <xref:System.Xaml.XamlMember> \] ボックスの一覧を次に示すようにプロパティ、メソッド、またはイベントを表します。  
  
-   プロパティの場合、返された <xref:System.Xaml.XamlType> プロパティによって返されるプロパティの設定の種類です。  
  
-   返されたイベントの <xref:System.Xaml.XamlType> は、必要なイベント ハンドラー型 \(CLR の実装でのデリゲート\) です。  
  
-   メソッドで <xref:System.Xaml.XamlType> 、可能性のあるメソッドの戻り値の型は、 `null`です。  
  
 いずれの場合、XAML スキーマ コンテキストを使用して、バッキング型の XAML の型を評価します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeConverter">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; TypeConverter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; TypeConverter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.TypeConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> XAML オブジェクトを宣言の型変換の構築のために使用するオブジェクト。</summary>
        <value>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 値で、 <see cref="T:System.ComponentModel.TypeConverter" /> のジェネリック制約です。 「解説」を参照してください。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す <xref:System.Xaml.XamlMember.TypeConverter%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupTypeConverter%2A> またはそのメソッドの特定のオーバーライドします。 この動作は、初期の内部リフレクション ロジックで、情報が既に設定されていない場合に発生します。  
  
 値として null 以外のプロパティを返す実装 <xref:System.Xaml.XamlMember.TypeConverter%2A> 、作業中は、必ずしも <xref:System.ComponentModel.TypeConverter>します。 Null に対する戻り値の一覧を次に示します <xref:System.Xaml.XamlMember.TypeConverter%2A> 、およびこれらの値が表す内容。  
  
-   戻り値は、そのメンバーを具体的にはまたはより一般的には、コンバーターのターゲット型に指定される型コンバーターを報告します。 この動作は、ほとんどどのような XAML 型システムでは通常、XAML プロセッサが型コンバーターのインスタンスを作成し、そのメソッドを呼び出すために探します。  
  
-   戻り値は、組み込みの値コンバーターを報告します。 このようなコンバーターは、XAML ライターによって実行される特定の内部処理に存在します。 具体的には、これらの組み込みの値コンバーターは、生の属性の文字列値を XAML 言語レベル プリミティブに変換します。 .NET Framework XAML サービス実装では、これらの組み込み型の変換は、多くの場合、システム アセンブリで定義されている型コンバーターに転送します。 変換など、 <xref:System.Int32> 値が組み込みの変換を転送し、そのため、 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A> 値の参照 <xref:System.ComponentModel.Int32Converter>します。  
  
-   戻り値は、制約のないオブジェクト モデルの特殊なケースを報告します。つまり、 <xref:System.Xaml.XamlMember> が、 <xref:System.Xaml.XamlMember.Type%2A> の値 <xref:System.Object>です。 ここで、 <xref:System.Xaml.Schema.XamlValueConverter%601> で提供されるレポート、 <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName> は {`Object}`します。 ただし、 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> は `null` 実際の型またはインスタンスがないのでこの変換を実行します。 代わりに、オブジェクト モデルの動作は、特定のテクノロジのランタイムがオブジェクト グラフの処理を決定すると、実行時まで判断できません。  
  
 作業にアクセスできる場合 <xref:System.ComponentModel.TypeConverter> から <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>, 、その変換メソッドを呼び出すことができます。 ただし、多くの変換メソッドは、サービスのコンテキストに依存します。 型コンバーターがオブジェクト グラフのオブジェクトを作成する一般的な役割が必要ですが利用可能な同じサービス コンテキストがない、コンバーターのメソッドで例外がスローすることができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo UnderlyingMember { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MemberInfo UnderlyingMember" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.UnderlyingMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>CLR 型システムを取得 <see cref="T:System.Reflection.MemberInfo" /> を構築するメンバーに対して用意されている <see cref="T:System.Reflection.PropertyInfo" />, 、<see cref="T:System.Reflection.MethodInfo" />, 、または <see cref="T:System.Reflection.EventInfo" />です。</summary>
        <value>CLR 型システム <see cref="T:System.Reflection.MemberInfo" /> については、最初のコンス トラクターのパラメーターからのキャストとします。 A <see cref="T:System.Xaml.XamlMember" /> を使用して構築されている、 <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> 署名を返します <see langword="null" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> またはそのメソッドの特定のオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSerializer">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; ValueSerializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; ValueSerializer" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.ValueSerializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> XAML オブジェクトを宣言の値のシリアル化に使用されるオブジェクト。</summary>
        <value>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> と <see cref="T:System.Windows.Markup.ValueSerializer" /> のジェネリック制約です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す <xref:System.Xaml.XamlMember.ValueSerializer%2A> 呼び出します <xref:System.Xaml.XamlMember.LookupValueSerializer%2A> またはそのメソッドの特定のオーバーライドします。 この動作は、初期の内部リフレクション ロジックで、情報が既に設定されていない場合に発生します。  
  
 値として null 以外のプロパティを返す場合はすべて <xref:System.Xaml.XamlMember.ValueSerializer%2A> 作業では必ずしも <xref:System.Windows.Markup.ValueSerializer>します。 「解説」を参照してください <xref:System.Xaml.XamlMember.TypeConverter%2A>; に、同じ考慮事項が適用 <xref:System.Xaml.XamlMember.ValueSerializer%2A>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のオブジェクトが別のオブジェクトと等しいかどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Xaml.XamlMember" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>