<Type Name="XamlObjectWriter" FullName="System.Xaml.XamlObjectWriter">
  <TypeSignature Language="C#" Value="public class XamlObjectWriter : System.Xaml.XamlWriter, System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlObjectWriter extends System.Xaml.XamlWriter implements class System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlObjectWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xaml.XamlWriter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xaml.IXamlLineInfoConsumer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>ソース XAML ノード ストリームからオブジェクト グラフを作成します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Write` 方法 <xref:System.Xaml.XamlObjectWriter> パターンを実装するように、 <xref:System.Xaml.XamlObjectWriter> を使用して、 <xref:System.Xaml.XamlWriter> で定義されている、 <xref:System.Xaml.XamlWriter.WriteNode%2A> メソッドです。<xref:System.Xaml.XamlWriter.WriteNode%2A> 間の切り替えのロジック、 `Write` メソッド、型が、リーダーの現在位置にあるがどのノードによって異なります。  
  
## スコープ  
 A <xref:System.Xaml.XamlObjectWriter> ; であるスコープの概念を持つ、 <xref:System.Xaml.XamlObjectWriter> 出力オブジェクト グラフ内の参照の概念的な点が維持されます。 特定のスコープの特定の操作では、有効または無効にするか非操作の結果を生成可能性があります。 呼び出す場合など <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> ディレクティブを記述するインスタンスとして既にオブジェクトで初期化が存在するため、既定の実装が例外をスローします。  
  
 カスタムのスコープを追跡する方法 <xref:System.Xaml.XamlObjectWriter> はスタックまたはフレーム クラスを使用してノードのアクションを配置します。 スタックまたはフレームを監視できるプッシュおよびポップが入力または終了しているオブジェクト モデル階層の各レベルの中に、 <xref:System.Xaml.XamlObjectWriter> オブジェクト グラフを書き込みます。  
  
## コールバック  
 中級および上級をサポートするために <xref:System.Xaml.XamlObjectWriter> シナリオでは、オブジェクト グラフを作成するメカニズムはコールバックが提供されるエントリ ポイントと、 <xref:System.Xaml.XamlObjectWriter> がコミットまたは特定の操作をコミットしようとしています。 コールバックの一部の設定で有効になっているし、オブジェクト型またはメンバーの書き込み対象固有ではありません。ただし、コールバック情報は、コンテキストで使用できる、多くの場合、または、コールバックを通じて送信されるデータでは、イベント。 関連するコールバックの一覧を次に示します。  
  
-   宣言されているコールバック <xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A> スコープに新しいオブジェクトになったときに呼び出される、 <xref:System.ComponentModel.ISupportInitialize.BeginInit%2A> に作成されたオブジェクトごとにオブジェクトの有効期間のフェーズです。  
  
-   宣言されているコールバック <xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A> スコープに新しいオブジェクトになったときに呼び出される、 <xref:System.ComponentModel.ISupportInitialize.EndInit%2A> に作成されたオブジェクトごとにオブジェクトの有効期間のフェーズです。  
  
-   宣言されているコールバック <xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A> スコープが、オブジェクトで開始し、発生したときに呼び出されるときに最初の <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> そのオブジェクトのスコープへの呼び出しが行われたが、まだコミットします。  
  
-   宣言されているコールバック <xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A> スコープは、オブジェクトで開始し、発生するときに呼び出されるときに、 <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> そのオブジェクトのスコープへの呼び出しが行われたが、まだコミットします。  
  
-   宣言されているコールバック <xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> ときに呼び出される <xref:System.Xaml.XamlObjectWriter.OnSetValue%2A> が呼び出されます。  
  
## ディクショナリ キーの記述  
 既定の実装 <xref:System.Xaml.XamlObjectWriter> の制約の種類の変換のサポート、 <xref:System.Collections.Generic.Dictionary%602> ディクショナリの前に、内容が、オブジェクト グラフに追加されます。 この方法でジェネリック ディクショナリが実行時にオブジェクトがキーに入力するおり、関連するジェネリックに適合する `Add` とインデクサーの動作です。 ただし、ベースの実装として <xref:System.Xaml.XamlObjectWriter>, 、ベースからオブジェクト グラフの作成にのみ、この機能が存在する <xref:System.Collections.Generic.Dictionary%602> クラスの派生クラスではなく <xref:System.Collections.Generic.Dictionary%602>です。  
  
## チェックが破棄されます。  
 XAML ライターは、可能性のある、遅延操作または間に破棄されている XAML ライターのインスタンスに対して呼び出しが行われる場所に使用されます。 さまざまな Api <xref:System.Xaml.XamlObjectWriter> が発生する <xref:System.ObjectDisposedException> このような場合です。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlWriter" />
    <altmember cref="T:System.Xaml.XamlObjectReader" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="schemaContext">書き込み用のノードを提供する XAML リーダーと共有されている XAML スキーマ コンテキスト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlObjectWriter" /> クラスによって使用される XAML スキーマ コンテキストを使用して、 <see cref="T:System.Xaml.XamlReader" />です。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaContext" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlObjectWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.XamlObjectWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="settings" Type="System.Xaml.XamlObjectWriterSettings" />
      </Parameters>
      <Docs>
        <param name="schemaContext">書き込み用のノードを提供する XAML リーダーと共有されている XAML スキーマ コンテキスト。</param>
        <param name="settings">特定のオプションを指定する設定オブジェクト <see cref="T:System.Xaml.XamlObjectWriter" /> 動作と出力します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.XamlObjectWriter" /> クラスによって使用されるコンテキストを使用して、 <see cref="T:System.Xaml.XamlReader" /> とその設定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaContext" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用可能なすべてのフレームをリセットし、オブジェクト グラフをクリアします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースを解放するには <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>使用されるアンマネージ リソースを解放、 <see cref="T:System.Xaml.XamlObjectWriter" />, 、し、必要に応じてマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterBeginInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterBeginInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterBeginInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">レポートするオブジェクト。 オブジェクトがパッケージ化されている <see cref="T:System.Xaml.XamlObjectEventArgs" /> 、ハンドラーが呼び出されるとき。</param>
        <summary>いずれかを呼び出す <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> メソッドに関連付けられている <see cref="T:System.Xaml.XamlObjectWriterSettings" /> この <see cref="T:System.Xaml.XamlObjectWriter" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterEndInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterEndInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterEndInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">レポートするオブジェクト。 値にパッケージ化 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 、ハンドラーが呼び出されるとき。</param>
        <summary>いずれかを呼び出す <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> メソッドに関連付けられている <see cref="T:System.Xaml.XamlObjectWriterSettings" /> この <see cref="T:System.Xaml.XamlObjectWriter" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">レポートするオブジェクト。 これにパッケージ化 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 、ハンドラーが呼び出されるとき。</param>
        <summary>いずれかを呼び出す <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> に関連付けられているメソッドが参照されている <see cref="T:System.Xaml.XamlObjectWriterSettings" /> この <see cref="T:System.Xaml.XamlObjectWriter" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">値を渡す <see cref="T:System.Xaml.XamlObjectEventArgs" /> 、ハンドラーが呼び出されるとき。</param>
        <summary>いずれかを呼び出す <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> に関連付けられているメソッドが参照されている <see cref="T:System.Xaml.XamlObjectWriterSettings" /> この <see cref="T:System.Xaml.XamlObjectWriter" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSetValue">
      <MemberSignature Language="C#" Value="protected virtual bool OnSetValue (object eventSender, System.Xaml.XamlMember member, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnSetValue(object eventSender, class System.Xaml.XamlMember member, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSender" Type="System.Object" />
        <Parameter Name="member" Type="System.Xaml.XamlMember" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventSender">ハンドラーへのソースとしてレポートするオブジェクト。</param>
        <param name="member">一部として、ハンドラーに渡されるを設定するプロパティの名前 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />します。</param>
        <param name="value">名前が付けられたプロパティに提供する値 <c>property</c>です。 一部としてハンドラーに渡される値 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />です。</param>
        <summary>いずれかを呼び出す <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> に関連付けられているメソッドを参照 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> と同じくらいに、このライターの <paramref name="handled" /> で <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> イベント データが <see langword="true" />です。</summary>
        <returns>ハンドラー; によって設定されるブール値それ以外の場合、 <see langword="false" />です。 「解説」を参照してください。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `SetValue` XAML ライターのこの操作に関連付けられたハンドラーが必要がある \(、 <xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> で宣言された <xref:System.Xaml.XamlObjectWriterSettings>\)、このメソッドを新規作成 <xref:System.Windows.Markup.XamlSetValueEventArgs> ハンドラーに渡します。 読み取ることによって、戻り値を設定、 <xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A> イベント データを通じて渡される値。 呼び出しが返すかどうかは、ハンドラーが存在しないと、このメソッドが呼び出され、 `false`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>書き込まれた最後のオブジェクトを取得します。 通常のみと呼ばれるノード ストリームがの末尾にあると、オブジェクト グラフが完了します。</summary>
        <value>最後に書き込まれると、オブジェクトまたは <see langword="null" />です。 「解説」を参照してください。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 最も一般的な使用 <xref:System.Xaml.XamlObjectWriter.Result%2A> その end に存在するノード ストリームが確認されており、オブジェクト グラフは完全な場合にのみ呼び出すことです。 それ以外の場合、オブジェクト グラフは不完全になる可能性がありますしはほとんどのプラットフォーム シナリオに適していません。  
  
 <xref:System.Xaml.XamlObjectWriter.Result%2A> 通常の呼び出しの直後に呼び出された場合のみ null 以外の値を含む <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>, 、し、現在のスコープが、メンバー オブジェクトが値を提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNameScope">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.INameScope RootNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.INameScope RootNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.INameScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Windows.Markup.INameScope" /> XAML オブジェクト ライターのノードの絶対ルートの XAML 名前スコープを維持するサービスです。</summary>
        <value>
          <see cref="T:System.Windows.Markup.INameScope" /> オブジェクト ライターの現在のルートの XAML 名前スコープを維持するサービスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの値は、オブジェクト ライター コンテキストから得られる可能性があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public override System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アクティブな XAML スキーマ コンテキストを取得します。</summary>
        <value>XAML スキーマ コンテキスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 XAML スキーマ コンテキストは、オブジェクト記述の実際のほとんどのシナリオに必要な情報源です。 XAML スキーマ コンテキストでは、バッキング型の型の照合に影響し、アセンブリに関する情報を保持するには、バッキング型が存在します。 既定の XAML スキーマ コンテキストは、CLR 型マッピングの規則に基づきます。 通常、フレームワークは、アセンブリの読み込みメカニズムが、framework のプログラミングの amd アプリケーション モデルと一致することを保証するために、独自の XAML スキーマ コンテキストを提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineInfo">
      <MemberSignature Language="C#" Value="public void SetLineInfo (int lineNumber, int linePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLineInfo(int32 lineNumber, int32 linePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
        <Parameter Name="linePosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">リーダーからの行番号。</param>
        <param name="linePosition">リーダーからの行の位置。</param>
        <summary>実装して <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> し、例外の行の情報を提供します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このサービス メソッドは、コードから直接呼び出されるものでありません。 ただし、派生クラスを作成する場合は <xref:System.Xaml.XamlObjectWriter> と行番号が使用可能なコンテキストを報告する予想または有効ではない、このメソッド呼び出すことができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProvideLineInfo">
      <MemberSignature Language="C#" Value="public bool ShouldProvideLineInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldProvideLineInfo" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>値でありそのため、呼び出す必要がありますも行情報サービスを提供する必要があるかどうかを示す値を取得、 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> メソッドは関連があるとします。</summary>
        <value>
          <see langword="true" /> 行の情報は、ライターが使用する場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装は常に `true` を返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndMember">
      <MemberSignature Language="C#" Value="public override void WriteEndMember ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndMember" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のメンバーのスコープを閉じ、終了中に、メンバーのスコープの値を書き込む場合があります。 新しいスコープでは、メンバーの親オブジェクトのスコープになります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">この呼び出しと以前の間で発生した値のノードからのメンバーの値の作成に失敗しました <see langword="StartMember" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public override void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ライターの現在のオブジェクトのスコープを閉じます。 新しいオブジェクトのスコープでは、親メンバーのスコープになります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この場合 `EndObject` 位置のスコープがルート オブジェクトを閉じて、新しいオブジェクトのスコープのルート スコープになります。  
  
 呼び出し <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> がまだ作成していないオブジェクトのオブジェクト メンバーの初期化のテキストや初期化パラメーターなどの必要な初期化経路可能性があるためです。 このような場合、呼び出しを <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> 実際には、オブジェクトを書き込みます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteGetObject">
      <MemberSignature Language="C#" Value="public override void WriteGetObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteGetObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteGetObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>概念書き込みます <see langword="StartObject" /> 指定したオブジェクトが既定値または親のプロパティの暗黙の型の値である場合は、オブジェクト グラフにします。 暗黙の型の値は、XAML スキーマ コンテキストから取得される情報とバックアップの種類については、入力の XAML ノード セット内のオブジェクトの値として指定されているのではなくから取得されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 書き込みの違い <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> と書き込みの <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> 生成されたオブジェクト グラフに表示できます。<xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> 型のインスタンスを作成しないため、 <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> API には、オブジェクト グラフを構築する内容を通知する情報はありません。 代わりに、親プロパティを初期化したとき、オブジェクトの作成 <xref:System.Xaml.XamlObjectWriter> 構築する必要はありません。 これに対し、 <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> その型のインスタンスを構築し、オブジェクト グラフに挿入されたことを指定します。  
  
 XAML ノード ストリームの一連のフレームとして考えられる場合、 <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> に分散された、 <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> を呼び出します。 そのため、数 <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> plus <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> 呼び出しの数に一致する必要があります <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> XAML ノード ストリームの完全なオブジェクトの記述評価の一部として呼び出しです。  
  
 概念 `StartObject` オブジェクト グラフ内の暗黙の型のオブジェクトが必要なオブジェクトの値自体には、暗黙の既定値が、そのオブジェクトに書き込む必要があるに基づいて XAML ノード ストリームのメンバーをまだ持って可能性があるを配置します。 これが典型的なシナリオは <xref:System.Xaml.XamlObjectWriter> コレクション プロパティ、およびコレクションの初期化メンバー ノードの書き込みはコレクション プロパティを所有するオブジェクトの作成に暗黙的にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNamespace">
      <MemberSignature Language="C#" Value="public override void WriteNamespace (System.Xaml.NamespaceDeclaration namespaceDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteNamespace(class System.Xaml.NamespaceDeclaration namespaceDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceDeclaration" Type="System.Xaml.NamespaceDeclaration" />
      </Parameters>
      <Docs>
        <param name="namespaceDeclaration">書き込む名前空間宣言します。</param>
        <summary>次のオブジェクトのスコープまたはメンバーのスコープに適用される名前空間宣言を定義します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のスコープは、ルート スコープ、オブジェクトのスコープ、またはメンバーのスコープ、名前空間宣言を記述できます。 ただし、 <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> 、次のいずれかの呼び出しの直前にのみ呼び出すことができます: <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>, 、<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>, 、または <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>です。 連続した <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> ケースは、同じノードに複数の名前空間宣言を記述します。 最終的には、いずれか <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> または <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> 呼び出す必要があります。  
  
 <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> 使用しない、 `Start`\/`End` メタファです。 XAML 名前空間には、CLR の表現意味内のメンバーがありますが、メンバーが呼ばれ、特殊な種類の表現されている必要はありません <xref:System.Xaml.XamlMember> に機能を拡張します。 値にアクセスする、 <xref:System.Xaml.NamespaceDeclaration>, にアクセスするその <xref:System.Xaml.NamespaceDeclaration.Namespace%2A> と <xref:System.Xaml.NamespaceDeclaration.Prefix%2A> プロパティです。  
  
 名前空間宣言があります、 <xref:System.String.Empty?displayProperty=fullName> プレフィックスの値。 A <xref:System.String.Empty?displayProperty=fullName> プレフィックスが既定の XAML 名前空間の宣言を表します。 既定のプレフィックスを表すために null を使用しようとはしないでください。 この api は、例外をスローします。 詳細については、「<xref:System.Xaml.NamespaceDeclaration>」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="namespaceDeclaration" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">コンポーネント <paramref name="namespaceDeclaration" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.Xaml.XamlObjectReaderException">無効なスコープで XAML 名前空間ノードを記述しようとしています。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartMember">
      <MemberSignature Language="C#" Value="public override void WriteStartMember (System.Xaml.XamlMember property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartMember(class System.Xaml.XamlMember property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="property">書き込む XAML プロパティです。 通常、この値は、XAML ノード ストリームで XAML リーダーから取得します。</param>
        <summary>現在のオブジェクトのスコープに新しいメンバー ノードを書き込みますスコープが新しいメンバーのスコープとします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!TIP]
>  監視、 <xref:System.Xaml.XamlDuplicateMemberException>, 、XAML 入力の 2 回同じ XAML プロパティが設定されている場合に発生します。 属性構文とプロパティ要素構文の両方に同じプロパティを設定する場合などの単純なケースで入力のマークアップでこの例外を簡単に参照してくださいことができます。 ただしを見つけにくい微妙な多くの場合に発生します。 たとえば、XAML のアンビエント プロパティが含まれる場合、XAML のコンテンツ プロパティを設定した場合、およびアタッチの使用法と、インスタンスの使用率の両方にプロパティが有効にした場合、この例外が発生する可能性がします。 開発のデバッグの段階で、マークアップを読み取ると、オブジェクト グラフの書き込みを接続する中間の XAML ノードの表現を表示することによって、多くの場合、この例外を検索できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">
          <paramref name="property" /> <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 設定 <see langword="true" />します。  
  
 または  
  
 <see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> XAML ノード ストリームにコンテンツをサポートしていないオブジェクトのコンテンツが含まれていることを示すが渡されると、します。  
  
 または  
  
 無効なスコープで開始メンバーを記述しようとしています。</exception>
        <exception cref="T:System.Xaml.XamlDuplicateMemberException">
          <paramref name="property" /> 親オブジェクトのスコープで既に明示的に設定されているプロパティを指定します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="property" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public override void WriteStartObject (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartObject(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType">記述する型。 通常この値は、XAML リーダーから取得します。</param>
        <summary>オブジェクト ノードを現在のスコープに書き込み、スコープを新しいオブジェクトのスコープに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">処理、 <see cref="P:System.Xaml.XamlType.IsUnknown" /> 入力し、オブジェクトを作成することはできません。  
  
 または  
  
 無効なスコープで開始オブジェクトを記述しようとしています。</exception>
        <exception cref="T:System.Xaml.XamlParseException">ルート オブジェクトが既に設定で提供されている場合、ルート オブジェクトを記述しようとしています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlType" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="overrides">
          <para>If the current scope is inside a collection, dictionary, or array, the new instance should be added to the collection, dictionary, or array by using the <see langword="Add" /> method of the relevant type. Otherwise, the member should be assigned to the new instance.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public override void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">書き込む値。</param>
        <summary>現在のメンバーのスコープを書き込みます。 現在のスコープが、コレクション、ディクショナリ、または配列オブジェクトの内側にある場合は、コレクション、ディクショナリ、または配列に値を追加してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">無効なスコープで値を記述しようとしています。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Xaml.XamlObjectWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>