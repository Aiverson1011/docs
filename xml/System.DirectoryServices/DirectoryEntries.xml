<Type Name="DirectoryEntries" FullName="System.DirectoryServices.DirectoryEntries">
  <TypeSignature Language="C#" Value="public class DirectoryEntries : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DirectoryEntries extends System.Object implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.DirectoryEntries" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <see cref="T:System.DirectoryServices.DirectoryEntry" /> オブジェクトのコレクションを含んでいます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
    </remarks>
    <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">
      <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />
    </permission>
    <altmember cref="T:System.DirectoryServices.DirectoryEntry" />
    <altmember cref="P:System.DirectoryServices.DirectoryEntry.Children" />
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry Add (string name, string schemaClassName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry Add(string name, string schemaClassName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.Add(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schemaClassName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">新しいエントリの名前。</param>
        <param name="schemaClassName">新しいエントリに使用されるスキーマの名前。</param>
        <summary>コンテナー内には、新しいエントリを作成します。</summary>
        <returns>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> 新しいエントリを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す必要があります、 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> メソッドを新しいエントリを永続的な作成できるようにします。 このメソッドを呼び出すと、新しいエントリで、必須プロパティの値を設定できます。 各プロバイダーを呼び出す前に設定する必要があるプロパティのさまざまな要件がある、 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> メソッドを作成します。 これらの要件が満たされない場合、プロバイダーは例外をスローします。 変更をコミットする前にプロパティを設定する必要があります、プロバイダーに問い合わせてください。  
  
   
  
## 例  
 次の Visual Basic .NET の例が、新たに作成 <xref:System.DirectoryServices.DirectoryEntry> オブジェクトのパスを指定して、\[コンテナーに新しいエントリを作成して保存します。  
  
```vb  
Dim strPath As String = "IIS://localhost/W3SVC/1/Root"  
' Create a new 'DirectoryEntry' object with the given path.  
Dim myDE As New DirectoryEntry(strPath)  
Dim myEntries As DirectoryEntries = myDE.Children  
' Create a new entry 'Sample' in the container.  
Dim myDirectoryEntry As DirectoryEntry = myEntries.Add("CN=Sample", myDE.SchemaClassName)  
' Save changes of entry in the 'Active Directory Domain Services'.  
myDirectoryEntry.CommitChanges()  
Console.WriteLine(myDirectoryEntry.Name + " entry is created in container.")  
```  
  
 次の c\# の例が、新たに作成 <xref:System.DirectoryServices.DirectoryEntry> オブジェクトのパスを指定して、\[コンテナーに新しいエントリを作成して保存します。  
  
 \[C\#\]  
  
```  
String strPath = "IIS://localhost/W3SVC/1/Root";  
  
// Create a new 'DirectoryEntry' object with the given path.  
DirectoryEntry myDE = new DirectoryEntry(strPath);  
DirectoryEntries myEntries = myDE.Children;  
  
// Create a new entry 'Sample' in the container.  
DirectoryEntry myDirectoryEntry =   
   myEntries.Add("CN=Sample", myDE.SchemaClassName);  
// Save changes of entry in the 'Active Directory Domain Services'.  
myDirectoryEntry.CommitChanges();  
Console.WriteLine (myDirectoryEntry.Name + " entry is created in container.");  
```  
  
 次の C\+\+ の例が、新たに作成 <xref:System.DirectoryServices.DirectoryEntry> オブジェクトのパスを指定して、\[コンテナーに新しいエントリを作成して保存します。  
  
```  
String* strPath = S"IIS://localhost/W3SVC/1/Root";  
  
// Create a new 'DirectoryEntry' object with the given path.  
DirectoryEntry* myDE = new DirectoryEntry(strPath);  
DirectoryEntries* myEntries = myDE->Children;  
  
// Create a new entry 'Sample' in the container.  
DirectoryEntry* myDirectoryEntry = myEntries->Add(S"CN=Sample", myDE->SchemaClassName);  
// Save changes of entry in the 'Active Directory Domain Services'.  
myDirectoryEntry->CommitChanges();  
Console::WriteLine("{0} entry is created in container.", myDirectoryEntry->Name);  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.COMException">基になるインターフェイスへの呼び出し中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry Find (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry Find(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.Find(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">検索対象の子オブジェクトの名前が含まれています。</param>
        <summary>指定した名前には、このコレクションのメンバーを返します。</summary>
        <returns>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> を表すことが検出された子オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 さまざまな種類の子オブジェクトが同じ名前である場合は、一致する最初の子オブジェクトが返されます。  
  
> [!NOTE]
>  インターネット インフォメーション サービス \(IIS\) プロバイダーでは、このメソッドはサポートされません。 オーバー ロードされたを使用して <xref:System.DirectoryServices.DirectoryEntries.Find%2A> メソッド空の文字列を指定します \(""\) の `schemaClassName` パラメーター。  
>   
>  一致する結果が見つからない場合、 <xref:System.DirectoryServices.DirectoryServicesCOMException> エラー コード 0x2030 がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Active Directory ドメイン サービス オブジェクトは、コンテナーではありません。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">基になるインターフェイスへの呼び出し中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.DirectoryEntry Find (string name, string schemaClassName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.DirectoryEntry Find(string name, string schemaClassName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.Find(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="schemaClassName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">検索対象の子ディレクトリ オブジェクトの名前。</param>
        <param name="schemaClassName">検索対象の子ディレクトリ オブジェクトのクラス名。</param>
        <summary>指定した名前には、このコレクションの指定した型のメンバーを返します。</summary>
        <returns>A <see cref="T:System.DirectoryServices.DirectoryEntry" /> 見つかった子オブジェクトを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一致する結果が見つからない場合、 <xref:System.DirectoryServices.DirectoryServicesCOMException> エラー コード 0x2030 がスローされます。  
  
   
  
## 例  
 次の Visual Basic .NET の例が、新たに作成 <xref:System.DirectoryServices.DirectoryEntry> オブジェクトのパスを指定して、\[コンテナーに新しいエントリを作成して保存します。 新しく作成されたエントリを取得しようとします。  
  
```vb  
Try  
     Dim myEntry1 As DirectoryEntry  
     Dim myEntry2 As DirectoryEntry  
     Dim strPath As String = "LDAP://DC=fabrikam,DC=com"  
  
     ' Create a 'DirectoryEntry' object with the given path.  
     Dim myDE As New DirectoryEntry(strPath)  
     Dim myEntries As DirectoryEntries = myDE.Children  
  
     ' Create a new entry in the container.  
     myEntry1 = myEntries.Add("CN=Sample Entry", myDE.SchemaClassName)  
     ' Save changes in the 'Active Directory Domain Services' store.  
     myEntry1.CommitChanges()  
  
     ' Find a child in the 'DirectoryEntries' collection which has the   
     ' specified name and type.  
     myEntry2 = myEntries.Find("CN=Sample Entry", myDE.SchemaClassName)  
     Console.WriteLine(myEntry2.Name + " is found in container.")  
  
     Catch e As Exception  
          Console.WriteLine("The following exception was raised : {0}", e.Message.ToString())  
     End Try  
```  
  
 次の c\# の例は、新しいを作成する方法を示しています。 <xref:System.DirectoryServices.DirectoryEntry> オブジェクトのパスを指定して、\[コンテナーに新しいエントリを作成して保存します。 取得しようと、新しくのエントリを作成します。  
  
```csharp  
using System;  
using System.DirectoryServices;   
  
class MyClass1  
{  
   static void Main()  
   {  
      try  
      {          
         DirectoryEntry myEntry1;  
         DirectoryEntry myEntry2;  
         String strPath = "LDAP://DC=fabrikam,DC=com";  
  
         // Create a 'DirectoryEntry' object with the given path.  
         DirectoryEntry myDE = new DirectoryEntry(strPath);  
         DirectoryEntries myEntries = myDE.Children;  
  
         // Create a new entry in the container.  
         myEntry1 = myEntries.Add("CN=Sample Entry",myDE.SchemaClassName);  
         // Save changes in the 'Active Directory Domain Services' store.  
         myEntry1.CommitChanges();  
  
         // Find a child in the 'DirectoryEntries' collection which has the   
         // specified name and type.  
         myEntry2 = myEntries.Find("CN=Sample Entry",myDE.SchemaClassName);  
         Console.WriteLine (myEntry2.Name + " is found in container.");  
  
      }  
      catch(Exception e)  
      {  
         Console.WriteLine("The following exception was raised : {0}",e.Message);  
      }  
   }  
}  
  
```  
  
 次の C\+\+ の例が、新たに作成 <xref:System.DirectoryServices.DirectoryEntry> オブジェクトのパスを指定して、\[コンテナーに新しいエントリを作成して保存します。 新しいエントリを取得しようとします。  
  
```cpp#  
#using <mscorlib.dll>  
#using <System.dll>  
#using <System.Directoryservices.dll>  
  
using namespace System;  
using namespace System::DirectoryServices;   
  
int main() {  
    try {          
        DirectoryEntry* myEntry1;  
        DirectoryEntry* myEntry2;  
        String* strPath = S"LDAP://DC=fabrikam,DC=com";  
  
        // Create a 'DirectoryEntry' object with the given path.  
        DirectoryEntry* myDE = new DirectoryEntry(strPath);  
        DirectoryEntries* myEntries = myDE->Children;  
  
        // Create a new entry in the container.  
        myEntry1 = myEntries->Add(S"CN=Sample Entry", myDE->SchemaClassName);  
        // Save changes in the 'Active Directory Domain Services' store.  
        myEntry1->CommitChanges();  
  
        // Find a child in the 'DirectoryEntries' collection which has the   
        // specified name and type.  
        myEntry2 = myEntries->Find(S"CN=Sample Entry", myDE->SchemaClassName);  
        Console::WriteLine ("{0} is found in container.", myEntry2->Name);  
    } catch(Exception* e) {  
        Console::WriteLine("The following exception was raised : {0}", e->Message);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Active Directory ドメイン サービス オブジェクトは、コンテナーではありません。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">基になるインターフェイスへの呼び出し中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理する列挙子を返します。</summary>
        <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.DirectoryServices.DirectoryEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.DirectoryServices.DirectoryEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.DirectoryEntries.Remove(System.DirectoryServices.DirectoryEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.DirectoryServices.DirectoryEntry" />
      </Parameters>
      <Docs>
        <param name="entry">名前、 <see cref="T:System.DirectoryServices.DirectoryEntry" /> を削除するオブジェクト。</param>
        <summary>このコレクションのメンバーを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 削除するエントリが、コンテナーの場合は、コンテナーを空にする必要があります。 コンテナーとそのすべての子を削除する、 <xref:System.DirectoryServices.DirectoryEntry.DeleteTree%2A> メソッドです。  
  
   
  
## 例  
 次の Visual Basic .NET の例が、新たに作成 <xref:System.DirectoryServices.DirectoryEntry> オブジェクトのパスを指定して、\[コンテナーに新しいエントリを作成して保存します。 最後に、新しいエントリを取得し、それを削除します。  
  
```vb  
Imports System  
Imports System.DirectoryServices  
  
Class MyClass1  
   Shared Sub Main()  
      Try  
         Dim strPath As String = "IIS://localhost/W3SVC/1/Root"  
         Dim strName As String = ""  
  
         ' Create a new 'DirectoryEntry' object with the given path.  
         Dim myDE As New DirectoryEntry(strPath)  
         Dim myEntries As DirectoryEntries = myDE.Children  
  
         ' Create a new entry 'Sample' in the container.  
         Dim myDirectoryEntry As DirectoryEntry = myEntries.Add("Sample", myDE.SchemaClassName)  
         ' Save changes of entry in the 'Active Directory Domain Services'.  
         myDirectoryEntry.CommitChanges()  
         Console.WriteLine(myDirectoryEntry.Name + " entry is created in container.")  
  
         ' Find 'Sample' entry in container.  
         myDirectoryEntry = myEntries.Find("Sample", myDE.SchemaClassName)  
         Console.WriteLine(myDirectoryEntry.Name + " found in container.")  
         ' Remove 'Sample' entry from container.  
         strName = myDirectoryEntry.Name  
         myEntries.Remove(myDirectoryEntry)  
         Console.WriteLine(strName + " entry is removed from container.")  
  
      Catch e As Exception  
         Console.WriteLine("The following exception was raised : {0}", e.Message.ToString())  
      End Try  
   End Sub 'Main  
End Class 'MyClass1  
  
```  
  
 次の c\# の例が、新たに作成 <xref:System.DirectoryServices.DirectoryEntry> オブジェクトのパスを指定して、\[コンテナーに新しいエントリを作成して保存します。 最後に、新しいエントリを取得し、それを削除します。  
  
```csharp  
using System;  
using System.DirectoryServices;   
  
class MyClass1  
{  
   static void Main()  
   {  
      try  
      {  
         String strPath = "IIS://localhost/W3SVC/1/Root";  
         String strName = "";  
  
         // Create a new 'DirectoryEntry' object with the given path.  
         DirectoryEntry myDE = new DirectoryEntry(strPath);  
         DirectoryEntries myEntries = myDE.Children;  
  
         // Create a new entry 'Sample' in the container.  
         DirectoryEntry myDirectoryEntry =   
            myEntries.Add("Sample", myDE.SchemaClassName);  
         // Save changes of entry in the 'Active Directory Domain Services'.  
         myDirectoryEntry.CommitChanges();  
         Console.WriteLine (myDirectoryEntry.Name +   
            " entry is created in container.");  
  
         // Find 'Sample' entry in container.  
         myDirectoryEntry = myEntries.Find("Sample", myDE.SchemaClassName);  
         Console.WriteLine(myDirectoryEntry.Name + " found in container.");  
         // Remove 'Sample' entry from container.  
         strName = myDirectoryEntry.Name;  
         myEntries.Remove(myDirectoryEntry);  
         Console.WriteLine(strName+ " entry is removed from container.");  
  
      }  
      catch(Exception e)  
      {  
         Console.WriteLine("The following exception was raised : {0}",  
            e.Message);  
      }  
   }  
}  
  
```  
  
 次の C\+\+ の例が、新たに作成 <xref:System.DirectoryServices.DirectoryEntry> オブジェクトのパスを指定して、\[コンテナーに新しいエントリを作成して保存します。 最後に、新しいエントリを取得し、それを削除します。  
  
```cpp#  
#using <mscorlib.dll>  
#using <System.dll>  
#using <System.Directoryservices.dll>  
  
using namespace System;  
using namespace System::DirectoryServices;   
  
int main() {  
    try {  
        String* strPath = S"IIS://localhost/W3SVC/1/Root";  
        String* strName = S"";  
  
        // Create a new 'DirectoryEntry' object with the given path.  
        DirectoryEntry* myDE = new DirectoryEntry(strPath);  
        DirectoryEntries* myEntries = myDE->Children;  
  
        // Create a new entry 'Sample' in the container.  
        DirectoryEntry* myDirectoryEntry =  myEntries->Add(S"Sample", myDE->SchemaClassName);  
        // Save changes of entry in the 'Active Directory Domain Services'.  
        myDirectoryEntry->CommitChanges();  
        Console::WriteLine(S"{0} entry is created in container.", myDirectoryEntry->Name);  
  
        // Find 'Sample' entry in container.  
        myDirectoryEntry = myEntries->Find(S"Sample", myDE->SchemaClassName);  
        Console::WriteLine(S"{0} found in container.", myDirectoryEntry->Name);  
        // Remove 'Sample' entry from container.  
        strName = myDirectoryEntry->Name;  
        myEntries->Remove(myDirectoryEntry);  
        Console::WriteLine(S"{0} entry is removed from container.", strName);  
    } catch(Exception* e) {  
        Console::WriteLine(S"The following exception was raised : {0}", e->Message);  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.COMException">基になるインターフェイスへの呼び出し中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SchemaFilter">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.SchemaNameCollection SchemaFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.SchemaNameCollection SchemaFilter" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.DirectoryEntries.SchemaFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.SchemaNameCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定する子オブジェクトがコレクションに含まれるスキーマを取得します。</summary>
        <value>A <see cref="T:System.DirectoryServices.SchemaNameCollection" /> に含まれている子オブジェクトを指定する、 <see cref="T:System.DirectoryServices.DirectoryEntries" /> インスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.DirectoryServices.DirectoryEntries.SchemaFilter%2A> プロパティが空、すべての種類の子オブジェクトは、コレクションに表示されない場合は、指定された型がのみ表示されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Find">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このコレクションのメンバーを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>