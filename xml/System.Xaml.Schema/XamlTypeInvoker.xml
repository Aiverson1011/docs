<Type Name="XamlTypeInvoker" FullName="System.Xaml.Schema.XamlTypeInvoker">
  <TypeSignature Language="C#" Value="public class XamlTypeInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlTypeInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.Schema.XamlTypeInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>リフレクションとコンス トラクター以外の方法で XAML 型のインスタンスを構築できる拡張ポイントを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 目的は、 <xref:System.Xaml.Schema.XamlTypeInvoker> 拡張の XAML 型システム、スキーマ、および、動作中の CLR 属性を使用してリフレクション情報などの CLR 機能に完全に依存せずに実行を有効にするのには、 <xref:System.Type> と <xref:System.Reflection.MemberInfo>, 、という具合です。 サブクラス <xref:System.Xaml.Schema.XamlTypeInvoker> などの XAML スキーマのクラスのコンス トラクターの代替入力パラメーターとして使用される <xref:System.Xaml.XamlType>します。 サブクラス <xref:System.Xaml.XamlType> を渡すと、 <xref:System.Xaml.Schema.XamlTypeInvoker> を通じて基本コンス トラクターにします。 定義すると共に、 <xref:System.Xaml.Schema.XamlTypeInvoker> コンス トラクターでも指定してくださいの上書きには、少なくともいくつかの `Lookup` 方法 <xref:System.Xaml.XamlType>します。  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> 既定の実装があります。 既定の実装では、類似のモデルを XAML スキーマの型の既定の実装に依存 <xref:System.Xaml.XamlType> と <xref:System.Xaml.XamlMember>: インスタンス化、値、および CLR 属性の使用を含め、参照の CLR 型システムが使用される <xref:System.Type> と <xref:System.Reflection.MemberInfo>, 、という具合です。  
  
 <xref:System.Xaml.Schema.XamlTypeInvoker> 基本的なインスタンス化するメソッドを提供 \(<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>\) とメソッドの種類に関連する場所、 <xref:System.Xaml.XamlType> コレクション、ディクショナリまたは配列を表します \(<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>; <xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>\)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlTypeInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装は、空です。  
  
 値を指定するこのコンス トラクターが内部的に呼び出される <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>です。<xref:System.Xaml.Schema.XamlTypeInvoker> サブクラスでは、いずれかを使用することを想定して、 <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> 構築するための署名を呼び出すオーバーライドを提供または <xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> 基本です。 提供する、 <xref:System.Xaml.XamlType> 既定の実装パターン where <xref:System.Xaml.Schema.XamlTypeInvoker> は変更できません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlTypeInvoker (System.Xaml.XamlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Xaml.XamlType" /> これに関連する特定の XAML 型の値 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> に基づいて、指定されたクラス <see cref="T:System.Xaml.XamlType" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは内部でに基づいてと呼ばれる、 <xref:System.Xaml.XamlType> 場所、 <xref:System.Xaml.Schema.XamlTypeInvoker> 構築に使用します。`type` ここでに関連の他のすべてのメソッドを呼び出します <xref:System.Xaml.Schema.XamlTypeInvoker>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddToCollection">
      <MemberSignature Language="C#" Value="public virtual void AddToCollection (object instance, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToCollection(object instance, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> を構築するために使用した <see cref="T:System.Xaml.XamlType" /> によって指定された型のインスタンス。</param>
        <param name="item">追加する項目。</param>
        <summary>指定した項目を、この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> に関連する型のインスタンスに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You should only call this method on a <xref:System.Xaml.XamlType> that represents a collection.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">不明な <see cref="T:System.Xaml.XamlType" /> に基づく <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> で、このメソッドを呼び出しました。  
  
 **\-または\-**  
  
 関連する型がコレクションではない <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> で、このメソッドを呼び出しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> の <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> は、<see langword="null" /> を返します。</exception>
        <block subset="none" type="overrides">
          <para>The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>. This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.  
  
 Internally, the base implementation calls <see cref="P:System.Xaml.XamlType.IsCollection" />, and throws if the result is <see langword="false" />.  
  
 The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementation. First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IList" /> is attempted. If this succeeds, a call to <see cref="M:System.Collections.IList.Add(System.Object)" /> is made and the method returns. Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="Add" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  
  
 In the base implementation no exception is raised at this level if <paramref name="item" /> is <see langword="null" />. It is still possible that the underlying <see langword="Add" /> method will raise an exception when invoked. Other run time exceptions are possible if <see cref="P:System.Xaml.XamlType.ItemType" /> does not return a valid result.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AddToDictionary">
      <MemberSignature Language="C#" Value="public virtual void AddToDictionary (object instance, object key, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToDictionary(object instance, object key, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> を構築するために使用した <see cref="T:System.Xaml.XamlType" /> によって指定された型のインスタンス。</param>
        <param name="key">追加するアイテムのディクショナリ キー。</param>
        <param name="item">加算する項目値。</param>
        <summary>指定したキーと項目の値を、この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> に関連する型のインスタンスに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You should only call this method on a <xref:System.Xaml.XamlType> that represents a dictionary.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">不明な <see cref="T:System.Xaml.XamlType" /> に基づく <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> で、このメソッドを呼び出しました。  
  
 **\-または\-**  
  
 関連する型がディクショナリではない <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> で、このメソッドを呼び出しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Xaml.XamlSchemaException">この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> の <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> は、<see langword="null" /> を返します。</exception>
        <block subset="none" type="overrides">
          <para>The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>. This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.  
  
 Internally, the base implementation calls <see cref="P:System.Xaml.XamlType.IsDictionary" />, and throws if the result is <see langword="false" />.  
  
 The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> implementation. First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IDictionary" /> is attempted. If this succeeds, a call to <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" /> is made and the method returns. Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="Add" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.  
  
 In the base implementation no exception is raised at this level if <paramref name="item" /> or <paramref name="key" /> are <see langword="null" />. It is still possible that the underlying <see langword="Add" /> method will raise an exception when invoked. Other run time exceptions are possible if <see cref="P:System.Xaml.XamlType.ItemType" /> does not return a valid result.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(object[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="arguments">提供するオブジェクトの配列、 <see langword="x:ConstructorArgs" /> のインスタンス。 あります <see langword="null" /> の使用または必要としない種類 <see langword="x:ConstructorArgs" />します。</param>
        <summary>構築によるに基づいてオブジェクト インスタンスを作成 <see cref="T:System.Xaml.XamlType" /> この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />します。</summary>
        <returns>作成されたインスタンスが構築によるに基づいて <see cref="T:System.Xaml.XamlType" /> この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMethodException">コンス トラクターを解決できませんでした。</exception>
        <block subset="none" type="overrides">
          <para>The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>. This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(class System.Xaml.XamlType contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="contentType">
          <see cref="T:System.Xaml.XamlType" /> 項目の種類で使用される、 <see langword="Add" /> メソッドです。</param>
        <summary>関連する返します <see langword="Add" /> のメソッド、 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> コレクションまたはディクショナリに関係のあります。</summary>
        <returns>CLR <see cref="T:System.Reflection.MethodInfo" /> について、 <see langword="Add" /> メソッド、または null。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが返す `null` の場合で、 <xref:System.Xaml.XamlType> この <xref:System.Xaml.Schema.XamlTypeInvoker> 書き込み可能なコレクションまたはディクショナリではありません。 具体的には、返す必要があります `null` の場合、 <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=fullName> 返します `None`します。  
  
> [!IMPORTANT]
>  このメソッドにレポート false する可能性がある場合は、完全に信頼された XAML 型システムにアクセスしている場合、 <xref:System.Reflection.MethodInfo> 呼び出し元情報です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="contentType" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="overrides">
          <para>The base implementation returns <see langword="null" /> for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />. It also returns <see langword="null" /> if <see cref="P:System.Xaml.XamlType.ItemType" /> is <see langword="null" />.  
  
 XAML collections potentially have more than one <see langword="Add" /> method, because a XAML collection can potentially support more than one content type (see <see cref="P:System.Xaml.XamlType.AllowedContentTypes" />, or see <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> for information about one implementation of this concept in WPF). The default implementation uses internal logic to return the best match based on the signatures and the type of the supplied <paramref name="contentType" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetEnumeratorMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetEnumeratorMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アイテムのアイテムを列挙できるメソッドを表すオブジェクトを返します。</summary>
        <returns>
          <see cref="T:System.Reflection.MethodInfo" /> 列挙子メソッドの場合、または <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返す必要があります `null` の場合、 <xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=fullName> 返します `None`します。  
  
> [!IMPORTANT]
>  このメソッドにレポート false する可能性がある場合は、完全に信頼された XAML 型システムにアクセスしている場合、 <xref:System.Reflection.MethodInfo> 呼び出し元情報です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The base implementation calls an internal helper method. That helper returns <see langword="null" /> for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />. It also returns <see langword="null" /> for cases where <see cref="M:System.Xaml.XamlType.LookupCollectionKind" /> returns <see langword="None" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetItems">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetItems (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetItems(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">指定された型のインスタンス、 <see cref="T:System.Xaml.XamlType" /> これを構築するために使用される <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />します。</param>
        <summary>返します。、 <see cref="T:System.Collections.IEnumerator" /> 項目のセットを表すオブジェクト。</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" /> オブジェクト、または <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このメソッドを呼び出す、 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 不明を基にした <see cref="T:System.Xaml.XamlType" />します。  
  
 **または**  
  
 このメソッドを呼び出す、 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 、関連する型が行われていないコレクションまたはディクショナリ。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="overrides">
          <para>The base implementation includes a call to the internal helper <c>ThrowIfUnknown</c>. This helper always throws for cases where a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> is based on an unknown <see cref="T:System.Xaml.XamlType" />, which includes cases where the <see cref="P:System.Xaml.XamlType.UnderlyingType" /> of the <see cref="T:System.Xaml.XamlType" /> is <see langword="null" />.  
  
 The base implementation does not necessarily use its own <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> implementation. First, a cast of <paramref name="instance" /> to <see cref="T:System.Collections.IEnumerable" /> is attempted. If this succeeds, a call to <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> is made and the method returns that return value. Otherwise, the base implementation uses CLR <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])" /> to invoke the underlying <see langword="GetEnumerator" /> method, as obtained from a call to <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod" /> for this <paramref name="" /><see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; SetMarkupExtensionHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ときに使用するハンドラーを取得、 <see cref="T:System.Xaml.XamlObjectWriter" /> 、実装への呼び出し <see cref="T:System.Windows.Markup.MarkupExtension" />します。</summary>
        <value>このケースを処理するハンドラーの実装です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント ハンドラーがに基づいて <xref:System.EventHandler%601> で制約 <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> イベント データ。  
  
 返される値を呼び出す、 <xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A> の動作、 <xref:System.Xaml.XamlType> を <xref:System.Xaml.Schema.XamlTypeInvoker> に基づきます。  
  
 戻り値は `null` の <xref:System.Xaml.Schema.XamlTypeInvoker> 不明を基にした <xref:System.Xaml.XamlType>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTypeConverterHandler">
      <MemberSignature Language="C#" Value="public EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; SetTypeConverterHandler" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ときに使用するハンドラーを取得、 <see cref="T:System.Xaml.XamlObjectWriter" /> CLR 実装への呼び出し <see cref="T:System.ComponentModel.TypeConverter" />します。</summary>
        <value>このケースを処理するハンドラーの実装です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント ハンドラーがに基づいて <xref:System.EventHandler%601> で制約 <xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> イベント データ。  
  
 返される値を呼び出す、 <xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A> の動作、 <xref:System.Xaml.XamlType> を <xref:System.Xaml.Schema.XamlTypeInvoker> に基づきます。  
  
 戻り値は `null` の <xref:System.Xaml.Schema.XamlTypeInvoker> 不明を基にした <xref:System.Xaml.XamlType>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownInvoker">
      <MemberSignature Language="C#" Value="public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xaml.Schema.XamlTypeInvoker UnknownInvoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>不明な完全に実装を表す静的な値は、 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />です。</summary>
        <value>静的な値を表す完全に実装されている、不明な <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この値を指定して、 <xref:System.Xaml.Schema.XamlTypeInvoker> System.Xaml のパラメーターには、API が定義されている例外をスローする呼び出されたコードと、通常です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>