<Type Name="StripLine" FullName="System.Windows.Forms.DataVisualization.Charting.StripLine">
  <TypeSignature Language="C#" Value="public class StripLine : System.Windows.Forms.DataVisualization.Charting.ChartElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StripLine extends System.Windows.Forms.DataVisualization.Charting.ChartElement" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataVisualization.Charting.StripLine" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.DataVisualization.Charting.ChartElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("IntervalOffset")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>グラフにストリップ ラインを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ストリップ ラインは、標準またはカスタムの間隔でグラフの背景に影を付ける水平または垂直の範囲です。 ストリップ ラインを使用することができます。  
  
-   グラフ上の個々 の値を検索するためには、読みやすさを向上します。  
  
-   グラフをわかりやすくときは、データ ポイントを分割します。  
  
-   一定間隔で実行する日付を強調表示、たとえば、週末のデータを識別するために参照します。  
  
-   データの特定のキー範囲を強調表示します。  
  
-   特定の定数値にしきい値を表す線を追加します。  
  
 単一の <xref:System.Windows.Forms.DataVisualization.Charting.StripLine> オブジェクトのいずれかに描画できる、1 回または繰り返し間隔を指定します。 このアクションはによって制御されます、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.Interval%2A> プロパティです。 値 0 が割り当てられるとき、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.Interval%2A> プロパティ、1 つのストリップ ラインが描画されます。 0 以外の値が割り当てられるとき、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.Interval%2A> プロパティには、指定した間隔でストリップ線が繰り返し表示されます。 ストリップ ラインが描画される場所も影響を受けました、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.IntervalOffset%2A> と <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.IntervalOffsetType%2A> ストリップ ラインのプロパティです。  
  
 ストリップ ラインの関連付けは常に、 <xref:System.Windows.Forms.DataVisualization.Charting.Axis> オブジェクトです。 デザイン時と実行時の両方に追加できます。  
  
 しきい値を表示する水平または垂直の線を追加するには、設定、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> プロパティを 0.0 の値にします。 これにより、線が描画が発生します。 使用することができます、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderColor%2A>, 、<xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderDashStyle%2A> と <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderWidth%2A> 色、幅、および線のスタイルのプロパティです。 グラフの背景のプロパティはありません \(`Back*`\) ときに使用されて、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> を 0.0 に設定されます。  
  
 使用して、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.Text%2A> にテキストを関連付けるストリップ ラインのストリップ ラインのプロパティです。 位置やこのテキストの方向を制御すること、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.TextAlignment%2A> プロパティです。  
  
 同じ軸に複数のストリップ ラインを定義する場合は、ストリップ ラインが重複していることが可能です。 Z オーダー <xref:System.Windows.Forms.DataVisualization.Charting.StripLine> オブジェクトが内に見つかった位置の順序によって決まり、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLinesCollection> オブジェクトです。 つまり、最初に見つかった位置が最初に描画2 つ目は、2 つ目に描画されます。  
  
 ストリップ ラインは、次のグラフの種類でサポートされていません。 円グラフ、ドーナツ グラフ、じょうご、ピラミッド、かぎ足、ThreeLineBreak、PointAndFigure、極座標、レーダーします。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StripLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.StripLine.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.DataVisualization.Charting.StripLine" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインの背景色を設定します。</summary>
        <value>A <see cref="T:System.Drawing.Color" /> 構造体。 既定の色は <see cref="P:System.Drawing.Color.White" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効な ARGB \(アルファ、赤、緑、青\) 値には、このプロパティを設定することができます。  
  
 ストリップ ラインのグラデーションを設定するには、設定、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackColor%2A> と <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> プロパティです。  
  
 この色を"transparent"に設定した場合、つまり、アルファ値を 0 に設定: 要素の背景に色が割り当てられません。 その結果、バック グラウンドは透明になります。  
  
 場合、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> を 0.0 に設定されているプロパティ、線が描画され、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderColor%2A> プロパティには、このプロパティではなく、行の色が決まります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackGradientStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.GradientStyle BackGradientStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.GradientStyle BackGradientStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackGradientStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.GradientEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.GradientStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインのグラデーションのスタイルを設定します。</summary>
        <value>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.GradientStyle" /> 列挙します。 既定値は <see cref="F:System.Windows.Forms.DataVisualization.Charting.GradientStyle.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackGradientStyle%2A> プロパティを決定するかどうかグラフ要素は、グラデーションの方向と同様に、グラデーション使用すると表示されます。  
  
 グラデーションの色を使用します。  
  
-   使用して、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackColor%2A> プロパティを基本色を設定します。  
  
-   使用して、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> プロパティを 2 番目の色を設定します。  
  
-   この設定 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackGradientStyle%2A> 目的のグラデーションのスタイルをグラフ要素のプロパティです。  
  
 このプロパティは該当しない場合、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> プロパティが 0.0 の値に設定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackHatchStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle BackHatchStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle BackHatchStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackHatchStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.HatchStyleEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインの陰影のスタイルを設定します。</summary>
        <value>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle" /> 列挙します。 既定値は <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ハッチ パターンは、単色の背景色と線が描かれて、バック グラウンドで構成されます。 陰影のスタイルで使用する 2 つの色がによって設定された、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackColor%2A> と <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> プロパティです。 このプロパティは該当しない場合、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> プロパティが 0.0 の値に設定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImage">
      <MemberSignature Language="C#" Value="public string BackImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BackImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ImageValueEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインの背景イメージを設定します。</summary>
        <value>A <see langword="string" /> イメージ ファイルの URL を表す値。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImage%2A> プロパティは、多くのグラフ要素の背景画像にパスを定義し、絶対または相対 url です。  
  
 このイメージを配置するを使用して、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImageAlignment%2A> と <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> プロパティです。  
  
 1 つの色が「透過」として画像を設定して表示されることを指定することも、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImageTransparentColor%2A> プロパティです。  
  
 イメージは、アイコンを含む、.NET Framework でサポートされている任意の有効な画像ファイルを指定できます。  
  
 このプロパティは該当しない場合、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> プロパティが 0.0 の値に設定します。  
  
 背景画像は、グラデーションの色など、他の背景のプロパティよりも優先されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImageAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle BackImageAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImageAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または背景画像の配置を設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle" /> 列挙値。 既定値は <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle.TopLeft" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、縞模様の背景イメージの配置を決定します。適用されている場合にのみ、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> にプロパティが設定されている <xref:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Unscaled>します。  
  
 使用可能な配置の詳細については、次を参照してください。、 <xref:System.Windows.Forms.DataVisualization.Charting.ChartImageAlignmentStyle> トピックを列挙します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImageTransparentColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackImageTransparentColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackImageTransparentColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImageTransparentColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または背景画像が描画されるときに、透明色で置き換える必要が色を設定します。</summary>
        <value>A <see cref="T:System.Drawing.Color" /> 透明色として表示される値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは該当しない場合、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> プロパティが 0.0 の値に設定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImageWrapMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode BackImageWrapMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImageWrapMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインの背景画像の描画モードを設定します。</summary>
        <value>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode" /> 整数列挙します。 既定値は、<see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Tile" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、イメージの表示方法を決定します。つまり、並べて表示したり、拡大\/縮小されたなどです。  
  
 イメージをスケーリングすると、境界のストリップ ライン内に収まる伸縮されます。 イメージを並べて表示したりが繰り返し描画、左上隅から開始します。  
  
 詳細については、使用可能な折り返しモードを参照してください、 <xref:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode> 列挙体のトピックです。  
  
 場合、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImageWrapMode%2A> にプロパティが設定されている <xref:System.Windows.Forms.DataVisualization.Charting.ChartImageWrapMode.Unscaled>, 、イメージを描画する場所によって決まります、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackImageAlignment%2A> プロパティの設定です。  
  
 このプロパティは該当しない場合は <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> が 0.0 の値に設定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackSecondaryColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackSecondaryColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackSecondaryColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BackSecondaryColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインの背景の 2 番目の色を設定します。</summary>
        <value>A <see cref="T:System.Drawing.Color" /> 陰影とグラデーションの背景の 2 番目の色に使用する値。 既定の色は <see cref="F:System.Drawing.Color.Empty" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、多くのグラフ オブジェクトの第 2 背景色を決定し、グラデーションの色を適用するときに使用します。  
  
 有効な ARGB \(アルファ、赤、緑、青\) 値に、バック グラウンドの 2 番目の色を設定できます。  
  
 陰影を使用する場合、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> 陰影線の色が決まります。  
  
 グラフ要素の背景のグラデーションの色を使用。  
  
-   使用して、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackColor%2A> プロパティを基本色を設定します。  
  
-   これを使用して <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackSecondaryColor%2A> プロパティを 2 番目の色を設定します。  
  
-   設定、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackGradientStyle%2A> プロパティを目的のグラデーションのスタイル。  
  
 このプロパティは該当しない場合、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> プロパティが 0.0 の値に設定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BorderColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BorderColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインの罫線の色を設定します。</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> 値。 既定の色は <see cref="F:System.Drawing.Color.Empty" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効な ARGB \(アルファ、赤、緑、青\) 値には、このプロパティを設定することができます。  
  
 場合、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> のプロパティ、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine> オブジェクトが 0.0 に設定されているで線を描画、およびこのプロパティはなく、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BackColor%2A> プロパティを設定するには、線の色が決まります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderDashStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ChartDashStyle BorderDashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.ChartDashStyle BorderDashStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderDashStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ChartDashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインの罫線のスタイルを設定します。</summary>
        <value>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> ストリップ ラインの罫線のスタイルを決定する列挙値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、境界に使用する線のスタイルを指定します。 線には、実線、ピリオドで区切られた、またはいくつかのバリエーションをピリオドで区切られたのです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderWidth">
      <MemberSignature Language="C#" Value="public int BorderWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BorderWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインの罫線の幅を設定します。</summary>
        <value>
          <see langword="integer" /> \(ピクセル単位\) のストリップ ラインの罫線の幅を決定する値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、ピクセル単位で計測されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.StripLine.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="True" />。アンマネージ リソースだけを解放する場合は <see langword="False" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.DataVisualization.Charting.StripLine" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Font), "Microsoft Sans Serif, 8pt")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または縞模様のテキストに使用するフォントを設定します。</summary>
        <value>A <see cref="T:System.Drawing.Font" /> 縞模様のテキストのフォントを表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Black")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または縞模様のテキストの色を設定します。</summary>
        <value>A <see cref="T:System.Drawing.Color" /> ストリップ ラインのテキストの色を表す値。 既定値は <see cref="P:System.Drawing.Color.Black" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの任意の有効な ARGB 色を指定できます。 このプロパティは、\[ストリップ ラインのテキスト値が指定されている場合にのみ適用されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得し、ストリップ ラインの間隔を設定または 1 回または繰り返し、ストリップ ラインが描画されるかどうかを判断します。</summary>
        <value>A <see langword="double" /> ストリップ ラインの間隔を表す値。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定すると、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.Interval%2A> で指定された幅とプロパティを 0、1 つのストリップ ラインの値にも表示されますが、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> プロパティです。 設定すると <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.Interval%2A> のゼロ以外の値に複数のストリップ ラインが表示されます。 使用される単位、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.Interval%2A> によってプロパティが定義されている、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.IntervalType%2A> プロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffset">
      <MemberSignature Language="C#" Value="public double IntervalOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 IntervalOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.IntervalOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.AxisLabelDateValueConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはグリッド線、目盛りは、ストリップ ライン、および軸ラベルのオフセットを設定します。</summary>
        <value>A <see langword="double" /> 間隔のオフセットを表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値によって補助目盛りとグリッド線の間隔のオフセットが影響を受けることはありません、 <xref:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalOffset%2A> のプロパティ、 <xref:System.Windows.Forms.DataVisualization.Charting.Axis> オブジェクトです。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.IntervalOffset%2A> プロパティの設定は、オフセットの測定単位を定義します。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.Interval%2A> 負の値を指定できます。  
  
 既定値は `Auto` \(`0`\)。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffsetType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.IntervalOffsetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインの間隔のオフセットの種類を設定します。</summary>
        <value>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> 間隔の種類を示す列挙値。 既定値は <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、このプロパティに設定 <xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto>; によってこのプロパティの実際の値を決定、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.IntervalType%2A> プロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.IntervalType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の間隔の種類、 <see cref="T:System.Windows.Forms.DataVisualization.Charting.StripLine" /> オブジェクトです。</summary>
        <value>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> 間隔の種類を示す列挙値。 既定値は <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 間隔の種類に設定することができます <xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto>, 、その場合、種類によって異なります。 プロットの X 値または Y 値の型 <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint> オブジェクト\-軸によって、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine> にオブジェクトが属している — と軸のスケール。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.Interval%2A> プロパティは、ストリップまたは線の描画頻度を決定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("StripLine")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ストリップ ラインの名前を取得します。</summary>
        <value>A <see langword="string" /> ストリップ ラインの名前を表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StripWidth">
      <MemberSignature Language="C#" Value="public double StripWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 StripWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインの幅を設定します。</summary>
        <value>A <see langword="double" /> ストリップまたは線を描画するかどうかを決定する値。 既定値は 0.0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定することはできませんに値が 0 未満、それ以外の場合、例外が発生します。  
  
 0.0 に設定と、線が描画します。この行を使用して、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderColor%2A>, 、<xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderDashStyle%2A> と <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderWidth%2A> 、色、幅とスタイルのプロパティ設定します。 いずれも、 `Back*` このクラスのプロパティが提供するときの値 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> 0.0 です。  
  
 設定した場合、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> プロパティを 0 より大きい値は、ストリップが作成されます。<xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderColor%2A>, 、<xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderDashStyle%2A> と <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.BorderWidth%2A> プロパティ; ストリップの枠線にしか適用できないすべての `Back*` ストリップの背景のプロパティのプロパティを使用しています。  
  
 場合の値、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> プロパティは 0.0 より大きく、単位は、関連する軸スケールによって決まります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StripWidthType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType StripWidthType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType StripWidthType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidthType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の測定単位、 <see cref="P:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth" /> プロパティです。</summary>
        <value>A <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> 幅の種類を示す列挙値。 既定値は <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティに使用する単位を決定する、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> プロパティです。 たとえば、"week"の 1 つを表すためのストリップ ラインを設定するにすることがこのプロパティを設定 <xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Weeks> し、設定、 <xref:System.Windows.Forms.DataVisualization.Charting.StripLine.StripWidth%2A> プロパティのいずれか \(1.0\) です。  
  
 このプロパティの値を変更する <xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto> に、 <xref:System.DateTime> 値の関連する軸のスケールを使用する場合、 <xref:System.DateTime> 値。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインのテキストを設定します。</summary>
        <value>A <see langword="string" /> ストリップ ラインのテキストを表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、ストリップ ラインにテキストを追加します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public System.Drawing.StringAlignment TextAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.StringAlignment TextAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.TextAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.StringAlignment), "Far")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.StringAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインのテキストの配置を設定します。</summary>
        <value>A <see cref="T:System.Drawing.StringAlignment" /> 縞模様のテキストの配置を表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLineAlignment">
      <MemberSignature Language="C#" Value="public System.Drawing.StringAlignment TextLineAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.StringAlignment TextLineAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.TextLineAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.StringAlignment), "Near")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.StringAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインのテキスト行の配置を設定します。</summary>
        <value>A <see cref="T:System.Drawing.StringAlignment" /> テキスト行の位置を表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOrientation">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.TextOrientation TextOrientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.TextOrientation TextOrientation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.TextOrientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.TextOrientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはテキストの向きを設定します。</summary>
        <value>A <see cref="P:System.Windows.Forms.DataVisualization.Charting.StripLine.TextOrientation" /> テキストの方向の配置を表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値にこのプロパティを設定すると <xref:System.Windows.Forms.DataVisualization.Charting.TextOrientation.Auto>, 、テキストは、グラフの種類に基づいて指向です。 すべての X と Y グラフの種類が以外のバーは、x 軸のストリップ ラインのテキストは左から水平方向にストリップ ラインの下部にある右方向です。 横棒グラフの場合は、x 軸のストリップ ラインのテキストはストリップ ラインの右下に上から縦方向です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public string ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.StripLine.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリップ ラインのツールヒントを設定します。</summary>
        <value>A <see langword="string" /> ストリップ ラインのツールヒントを表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>