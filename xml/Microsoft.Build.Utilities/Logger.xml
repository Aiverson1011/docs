<Type Name="Logger" FullName="Microsoft.Build.Utilities.Logger">
  <TypeSignature Language="C#" Value="public abstract class Logger : Microsoft.Build.Framework.ILogger" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Logger extends System.Object implements class Microsoft.Build.Framework.ILogger" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Utilities.Logger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Build.Framework.ILogger</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>派生フォームでオーバーライドされると、MSBuild エンジンで発生するイベントを処理するロガーに機能を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 この抽象クラスのメソッドとプロパティの既定の実装を提供する、 <xref:Microsoft.Build.Framework.ILogger> インターフェイスです。  
  
 このクラスは、派生フォームでのみインスタンス化できます。  
  
   
  
## 例  
 次の例では、ビルド イベントに応答する基本的なロガーを作成する方法を示します。  
  
 [!code-csharp[msbuild\_BasicLogger\#1](~/samples/snippets/csharp/VS_Snippets_Misc/msbuild_BasicLogger/CS/msbuild_BasicLogger.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Logger ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.Logger.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:Microsoft.Build.Utilities.Logger" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatErrorEvent">
      <MemberSignature Language="C#" Value="public virtual string FormatErrorEvent (Microsoft.Build.Framework.BuildErrorEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string FormatErrorEvent(class Microsoft.Build.Framework.BuildErrorEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.Logger.FormatErrorEvent(Microsoft.Build.Framework.BuildErrorEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="Microsoft.Build.Framework.BuildErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">エラー イベントの引数。</param>
        <summary>
          <see cref="T:Microsoft.Build.Framework.BuildErrorEventArgs" /> オブジェクトから、既定の形式でエラー メッセージを生成します。</summary>
        <returns>正規の形式でエラー メッセージを表す <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatWarningEvent">
      <MemberSignature Language="C#" Value="public virtual string FormatWarningEvent (Microsoft.Build.Framework.BuildWarningEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string FormatWarningEvent(class Microsoft.Build.Framework.BuildWarningEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.Logger.FormatWarningEvent(Microsoft.Build.Framework.BuildWarningEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="Microsoft.Build.Framework.BuildWarningEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">警告イベントの引数。</param>
        <summary>
          <see cref="T:Microsoft.Build.Framework.BuildWarningEventArgs" /> オブジェクトから、既定の形式で警告メッセージを生成します。</summary>
        <returns>正規の形式の警告メッセージを表す <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize (Microsoft.Build.Framework.IEventSource eventSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class Microsoft.Build.Framework.IEventSource eventSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.Logger.Initialize(Microsoft.Build.Framework.IEventSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="Microsoft.Build.Framework.IEventSource" />
      </Parameters>
      <Docs>
        <param name="eventSource">ロガーをサブスクライブできる使用可能なイベント。</param>
        <summary>派生クラスでオーバーライドされている場合は、特定のイベントにロガーをサブスクライブします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、初期化ロジックを実行し、ビルドして発行されたイベントを購読は、派生クラスでオーバーライドする必要があります <xref:Microsoft.Build.Framework.IEventSource>します。  
  
   
  
## 例  
 次の例では、ビルド イベントに応答する基本的なロガーを作成する方法を示します。  
  
 [!code-csharp[msbuild\_BasicLogger\#1](~/samples/snippets/csharp/VS_Snippets_Misc/msbuild_BasicLogger/CS/msbuild_BasicLogger.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVerbosityAtLeast">
      <MemberSignature Language="C#" Value="public bool IsVerbosityAtLeast (Microsoft.Build.Framework.LoggerVerbosity checkVerbosity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVerbosityAtLeast(valuetype Microsoft.Build.Framework.LoggerVerbosity checkVerbosity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.Logger.IsVerbosityAtLeast(Microsoft.Build.Framework.LoggerVerbosity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkVerbosity" Type="Microsoft.Build.Framework.LoggerVerbosity" />
      </Parameters>
      <Docs>
        <param name="checkVerbosity">渡されたロガーの詳細度の設定。</param>
        <summary>現在の <see cref="P:Microsoft.Build.Utilities.Logger.Verbosity" /> 設定値が渡された値以上であるかどうかを確認します。</summary>
        <returns>現在のロガー詳細度の設定が渡された値以上の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、ビルド イベントに応答する基本的なロガーを作成する方法を示します。  
  
 [!code-csharp[msbuild\_BasicLogger\#1](~/samples/snippets/csharp/VS_Snippets_Misc/msbuild_BasicLogger/CS/msbuild_BasicLogger.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public virtual string Parameters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Parameters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Utilities.Logger.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>logger のユーザー定義パラメーターを取得または設定します。</summary>
        <value>logger パラメーター。 この値は、<see langword="null" /> の場合もあります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生クラスがパラメーターを受け取らない場合、このプロパティを無視できます。  
  
   
  
## 例  
 次の例では、ビルド イベントに応答する基本的なロガーを作成する方法を示します。  
  
 [!code-csharp[msbuild\_BasicLogger\#1](~/samples/snippets/csharp/VS_Snippets_Misc/msbuild_BasicLogger/CS/msbuild_BasicLogger.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public virtual void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.Logger.Shutdown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされた場合、初期化時またはビルド時にロガーに割り当てられたリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、取得したリソースを解放するなどのシャット ダウン ロジックを実行する派生クラスでオーバーライドできます。  
  
   
  
## 例  
 次の例では、ビルド イベントに応答する基本的なロガーを作成する方法を示します。  
  
 [!code-csharp[msbuild\_BasicLogger\#1](~/samples/snippets/csharp/VS_Snippets_Misc/msbuild_BasicLogger/CS/msbuild_BasicLogger.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Verbosity">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Build.Framework.LoggerVerbosity Verbosity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Build.Framework.LoggerVerbosity Verbosity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Utilities.Logger.Verbosity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Framework.LoggerVerbosity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベント ログに表示される詳細レベルを取得または設定します。</summary>
        <value>列挙値の 1 つ。 既定値は、<see cref="F:Microsoft.Build.Framework.LoggerVerbosity.Normal" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ロガーはログに記録するイベントを選択する自由ですが、詳細度のガイドラインに従うは一貫したユーザー エクスペリエンスを作成します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>