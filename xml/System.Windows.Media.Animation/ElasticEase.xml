<Type Name="ElasticEase" FullName="System.Windows.Media.Animation.ElasticEase">
  <TypeSignature Language="C#" Value="public class ElasticEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ElasticEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.ElasticEase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>伸び縮みするまで春のようなアニメーションを作成するイージング関数を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 「スプリング」の動作が発生すると、アニメーションを指定して、制御することができます、 <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> プロパティの値。 次のグラフのそれぞれの値を示します <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>, ここで、 *f*\(*t*\) アニメーションの進行状況を表すと *t* 時間を表します。  
  
 f06e802e-7665-49e8-9aa9-4942e2dced3b  
  
 使用して、アニメーションの振動する回数を指定する、 <xref:System.Windows.Media.Animation.ElasticEase.Oscillations%2A> プロパティと、回の springiness が密着したまま入れる方法を使用しているか、 <xref:System.Windows.Media.Animation.ElasticEase.Springiness%2A> プロパティです。  
  
> [!NOTE]
>  このアニメーションでは、双方向に変化する値が発生するためが予期せずにアニメーションの補間が負の数値にで行わ可能性があります。 これにより、負の値は許可されていないプロパティをアニメーション化するときにエラーが発生することができます。 このアニメーションを適用する場合など、 <xref:System.Windows.FrameworkElement.Height%2A> オブジェクトの \(たとえば、200 をする場合は 0 から、 <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> の <xref:System.Windows.Media.Animation.EasingMode.EaseIn>\) の負の値を補間するアニメーションを試みます <xref:System.Windows.FrameworkElement.Height%2A> するエラーがスローされます。  
  
 だけでなく他のいくつかのイージング関数は <xref:System.Windows.Media.Animation.ElasticEase> これを確認する次の Silverlight サンプルを使用します。  
  
 [Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  
  
 継承することで、独自のイージング関数を作成する実行時に含まれるイージング関数を使用するだけでなく <xref:System.Windows.Media.Animation.EasingFunctionBase>です。  
  
<a name="xamlObjectElementUsage_ElasticEase"></a>   
## XAML オブジェクト要素の使用方法  
  
```  
<ElasticEase .../>  
```  
  
   
  
## 例  
 次の例では、適用、 <xref:System.Windows.Media.Animation.ElasticEase> イージング関数を <xref:System.Windows.Media.Animation.DoubleAnimation> 伸び縮みするまで春のようなアニメーションを作成します。  
  
 [!code-xml[ElasticEase\#ElasticEase](~/samples/snippets/csharp/VS_Snippets_Wpf/elasticease/CS/window1.xaml#elasticease)]
 [!code-xml[ElasticEase\#ElasticEase](~/samples/snippets/xaml/VS_Snippets_Wpf/elasticease/xaml/window1.xaml#elasticease)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.PowerEase" />
    <altmember cref="T:System.Windows.Media.Animation.BackEase" />
    <altmember cref="T:System.Windows.Media.Animation.BounceEase" />
    <altmember cref="T:System.Windows.Media.Animation.CircleEase" />
    <altmember cref="T:System.Windows.Media.Animation.CubicEase" />
    <altmember cref="T:System.Windows.Media.Animation.ExponentialEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuadraticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuarticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuinticEase" />
    <altmember cref="T:System.Windows.Media.Animation.SineEase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ElasticEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ElasticEase.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.Animation.ElasticEase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ElasticEase.CreateInstanceCore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Freezable" /> 派生クラスの新しいインスタンスを作成します。 派生クラスを作成するときには、このメソッドをオーバーライドする必要があります。</summary>
        <returns>新しいインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アニメーション クラス間接的に継承 <xref:System.Windows.Freezable>します。 このため、オーバーライドする必要があります。、 <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> アニメーション オブジェクトを構築するメソッドです。  
  
   
  
## 例  
 次の例では、一般的な実装の <xref:System.Windows.Freezable.CreateInstanceCore%2A>です。  
  
 [!code-csharp[freezablesample\_procedural\#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample\_procedural\#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ElasticEase.EaseInCore(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">アニメーションの正規化された時間 \(進行状況\)。</param>
        <summary>カスタム イージング関数の <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> モードを生成するためにオーバーライドできるイージング関数のロジック部分を提供します。</summary>
        <returns>変換された進行状況を表す double 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method transforms normalized time to control the pace of an animation for the <xref:System.Windows.Media.Animation.EasingMode.EaseIn> case of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  
  
 You only have to specify your easing function for the <xref:System.Windows.Media.Animation.EasingMode.EaseIn> case because the implementation of the <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> method transforms **parameterReference tag is not supported!!!!**  
 for the <xref:System.Windows.Media.Animation.EasingMode.EaseOut> and <xref:System.Windows.Media.Animation.EasingMode.EaseInOut> cases.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Oscillations">
      <MemberSignature Language="C#" Value="public int Oscillations { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Oscillations" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ElasticEase.Oscillations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはアニメーションの終点を回数の合計のターゲット スライドを双方向に設定します。</summary>
        <value>ターゲットのアニメーションの終点を双方向にスライド時間数。 この値は、0 以上でなければなりません。 既定値は 3 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[DP_ID_field_label](~/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.ElasticEase.OscillationsProperty>  
  
<a name="xamlAttributeUsage_Occilations"></a>   
## XAML 属性の使用方法  
  
```  
<ElasticEase Oscillations="int"/>  
```  
  
   
  
## 例  
 次の例では、適用、 <xref:System.Windows.Media.Animation.ElasticEase> イージング関数を <xref:System.Windows.Media.Animation.DoubleAnimation> 伸び縮みするまで春のようなアニメーションを作成します。  
  
 [!code-xml[ElasticEase\#ElasticEase](~/samples/snippets/csharp/VS_Snippets_Wpf/elasticease/CS/window1.xaml#elasticease)]
 [!code-xml[ElasticEase\#ElasticEase](~/samples/snippets/xaml/VS_Snippets_Wpf/elasticease/xaml/window1.xaml#elasticease)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OscillationsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OscillationsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OscillationsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.ElasticEase.OscillationsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Media.Animation.ElasticEase.Oscillations" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Springiness">
      <MemberSignature Language="C#" Value="public double Springiness { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Springiness" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ElasticEase.Springiness" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはスプリングの剛性を設定します。 値が小さいほど Springiness の値、電流形のスプリングいて、各振幅を強度でが速ければ速いほどの柔軟性は減少します。</summary>
        <value>スプリングの剛性を指定する正の数値。 既定値は 3 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 いずれか小さい方、 <xref:System.Windows.Media.Animation.ElasticEase.Springiness%2A> 値は、電流形のスプリングおよび強度で各振幅が速ければ速いほどの柔軟性は減少します。  
  
 [!INCLUDE[DP_ID_field_label](~/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.ElasticEase.SpringinessProperty>  
  
 次の図は、の別の値の効果を示しています。 <xref:System.Windows.Media.Animation.ElasticEase.Springiness%2A>します。  
  
 6ce5123f-dced-4e08-a48e-690cac994c8f  
  
<a name="xamlAttributeUsage_Springiness"></a>   
## XAML 属性の使用方法  
  
```  
<ElasticEase Springiness="double"/>  
```  
  
   
  
## 例  
 次の例では、適用、 <xref:System.Windows.Media.Animation.ElasticEase> イージング関数を <xref:System.Windows.Media.Animation.DoubleAnimation> 伸び縮みするまで春のようなアニメーションを作成します。  
  
 [!code-xml[ElasticEase\#ElasticEase](~/samples/snippets/csharp/VS_Snippets_Wpf/elasticease/CS/window1.xaml#elasticease)]
 [!code-xml[ElasticEase\#ElasticEase](~/samples/snippets/xaml/VS_Snippets_Wpf/elasticease/xaml/window1.xaml#elasticease)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpringinessProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpringinessProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpringinessProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.ElasticEase.SpringinessProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Media.Animation.ElasticEase.Springiness" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>