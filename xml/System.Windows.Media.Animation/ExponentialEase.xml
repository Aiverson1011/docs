<Type Name="ExponentialEase" FullName="System.Windows.Media.Animation.ExponentialEase">
  <TypeSignature Language="C#" Value="public class ExponentialEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExponentialEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.ExponentialEase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>加速または減速指数の式を使用してアニメーションを作成するイージング関数を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 制御することができます、アニメーションが迅速化するかどうかが減速またはその両方を指定して、 <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>です。 次のグラフのそれぞれの値を示します <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> 、 *f*\(*t*\) アニメーションの進行状況を表すと *t* 時間を表します。  
  
 0360ba37-6355-45ae-9bed-f40da6a8713b  
  
 この関数で使用される数式は、以下のようです。  
  
 aca943ff-3803-45a7-970d-5e76914ab8dc  
  
 上記の式を使用して、次のグラフはに対して複数の値の効果を示しています、 <xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A> プロパティ。  
  
 71123939-c485-4e27-86a5-1f218f3ba69a  
  
 だけでなく他のいくつかのイージング関数は <xref:System.Windows.Media.Animation.ExponentialEase> これを確認する次の Silverlight サンプルを使用します。  
  
 [Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  
  
 継承することで、独自のイージング関数を作成する実行時に含まれるイージング関数を使用するだけでなく <xref:System.Windows.Media.Animation.EasingFunctionBase>です。  
  
<a name="xamlObjectElementUsage_ExponentialEase"></a>   
## XAML オブジェクト要素の使用方法  
  
```  
<ExponentialEase .../>  
```  
  
   
  
## 例  
 次の例では、適用、 <xref:System.Windows.Media.Animation.ExponentialEase> イージング関数を <xref:System.Windows.Media.Animation.DoubleAnimation> decelerating アニメーションを作成します。  
  
 [!code-xml[ExponentialEase\#ExponentialEase](~/samples/snippets/csharp/VS_Snippets_Wpf/exponentialease/CS/window1.xaml#exponentialease)]
 [!code-xml[ExponentialEase\#ExponentialEase](~/samples/snippets/xaml/VS_Snippets_Wpf/exponentialease/xaml/window1.xaml#exponentialease)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExponentialEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.Animation.ExponentialEase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.CreateInstanceCore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Freezable" /> 派生クラスの新しいインスタンスを作成します。 派生クラスを作成するときには、このメソッドをオーバーライドする必要があります。</summary>
        <returns>新しいインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アニメーション クラス間接的に継承 <xref:System.Windows.Freezable>します。 このため、オーバーライドする必要があります。、 <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> アニメーション オブジェクトを構築するメソッドです。  
  
   
  
## 例  
 次の例では、一般的な実装の <xref:System.Windows.Freezable.CreateInstanceCore%2A>です。  
  
 [!code-csharp[freezablesample\_procedural\#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample\_procedural\#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.EaseInCore(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">アニメーションの正規化された時間 \(進行状況\)。</param>
        <summary>カスタム イージング関数の <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> モードを生成するためにオーバーライドできるイージング関数のロジック部分を提供します。</summary>
        <returns>変換された進行状況を表す double 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method transforms normalized time to control the pace of an animation for the <xref:System.Windows.Media.Animation.EasingMode.EaseIn> case of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  
  
 You only have to specify your easing function for the <xref:System.Windows.Media.Animation.EasingMode.EaseIn> case because the implementation of the <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> method transforms **parameterReference tag is not supported!!!!**  
 for the <xref:System.Windows.Media.Animation.EasingMode.EaseOut> and <xref:System.Windows.Media.Animation.EasingMode.EaseInOut> cases.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exponent">
      <MemberSignature Language="C#" Value="public double Exponent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Exponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ExponentialEase.Exponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはアニメーションの補間を決定するために使用する指数を設定します。</summary>
        <value>アニメーションの補間を決定するために使用する指数。 既定値は 2 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[DP_ID_field_label](~/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.ExponentialEase.ExponentProperty>  
  
 によって使用される数式 <xref:System.Windows.Media.Animation.ExponentialEase> 以下です。  
  
 aca943ff-3803-45a7-970d-5e76914ab8dc  
  
 前の公式を使用して、次のグラフはに対して複数の値の効果を示しています、 <xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A> プロパティ。  
  
 71123939-c485-4e27-86a5-1f218f3ba69a  
  
<a name="xamlAttributeUsage_Exponent"></a>   
## XAML 属性の使用方法  
  
```  
<object Exponent="double" .../>  
```  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ExponentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ExponentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.ExponentialEase.ExponentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Media.Animation.ExponentialEase.Exponent" /> 依存関係プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>