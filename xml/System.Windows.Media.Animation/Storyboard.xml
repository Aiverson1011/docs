<Type Name="Storyboard" FullName="System.Windows.Media.Animation.Storyboard">
  <TypeSignature Language="C#" Value="public class Storyboard : System.Windows.Media.Animation.ParallelTimeline" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Storyboard extends System.Windows.Media.Animation.ParallelTimeline" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.Storyboard" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.ParallelTimeline</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>子アニメーションのオブジェクトやプロパティの対象化情報を提供するコンテナ タイムライン。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
## ストーリー ボードを対話的に制御します。  
 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをマークアップで制御するためには、指定した、 <xref:System.Windows.Media.Animation.BeginStoryboard.Name%2A> のプロパティ、 <xref:System.Windows.Media.Animation.BeginStoryboard> オブジェクトを作成する。 例については、次を参照してください。 [方法: イベント トリガーを使用して、ストーリー ボードの後に起動を制御する](http://msdn.microsoft.com/ja-jp/3b115594-6a93-4972-b24d-61aa16f1c15f)します。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
## データ バインドおよびアニメーションのタイムライン  
 ほとんどのタイムラインのプロパティは、データ バインドやアニメーション化を指定できます。ただし、タイミング システムが動作する方法のため、データ バインドやアニメーション タイムラインが他のデータと同様に動作しない場合はバインドされているか、オブジェクトをアニメーション化します。 その動作を理解するには、タイムラインをアクティブ化の意味を理解すると役立ちます。  
  
 タイムラインをアクティブになると、タイムラインとその子タイムラインのコピーが作成されます。 これらのコピーが固定されている \(読み取り専用に行われます\) と <xref:System.Windows.Media.Animation.Clock> からオブジェクトが作成されます。 これらのクロックは、対象のプロパティをアニメーション化する実際の作業を実行します。 タイムラインは、データ バインディングまたはアニメーション化すると、現在の値のスナップショットが行われたクロックが作成されるとします。 元のタイムラインは、変更を続ける可能性があります、にもかかわらず、クロックはありません。  
  
 タイムラインにデータ バインドやアニメーションの変更を反映するには、クロックを再作成する必要があります。 クロックがない再が自動的に作成します。 タイムラインの変更を適用するいくつかの方法を次に示します。  
  
-   タイムラインがまたはに属している場合、 <xref:System.Windows.Media.Animation.Storyboard>, 、そのストーリー ボードを使用して再適用して変更を反映することができます、 <xref:System.Windows.Media.Animation.BeginStoryboard> または <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドです。 これには、アニメーションが再起動されるという副作用が発生します。 コードでは、使用することができます、 <xref:System.Windows.Media.Animation.Storyboard.Seek%2A> ストーリー ボードを進めるメソッドは、前の位置にバックアップします。  
  
-   プロパティを使用して、直接には、アニメーションを適用したかどうか、 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A> メソッドを呼び出し、 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A> メソッドを再度が変更されたアニメーションを渡すとします。  
  
-   クロック レベルで直接作業している場合作成しクロックの新しいセットを適用し、それらを使用して作成済みのクロックの前のセットを置換します。  
  
 データの例には、アニメーションがバインドされている、参照してください [Key Spline Animation Sample](http://go.microsoft.com/fwlink/?LinkID=160011) します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Storyboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.Animation.Storyboard" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Begin">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>これに関連付けられているアニメーションのセットを開始する <see cref="T:System.Windows.Media.Animation.Storyboard" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションをターゲットに適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。<see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションをターゲットに適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象のプロパティが既にアニメーションには置き換えを使用して、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> ハンドオフ動作します。  
  
 このメソッドを使用して開始されたストーリー ボードは、一時停止、再開、またはそれ以外の場合は、起動された後に対話的に制御できません。 ストーリー ボードを制御するためを使用して、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> または <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドです。  
  
 ストーリー ボードのトリガーを開始、 <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
   
  
## 例  
 次の例では、ストーリーを使用して、 <xref:System.Windows.Media.TextEffect>です。<xref:System.Windows.Media.TextEffect> 内に含まれる、 <xref:System.Windows.FrameworkContentElement>のスコープの名前します。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementStoryboardExample.cs#frameworkcontentelementstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementstoryboardexample.vb#frameworkcontentelementstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。<see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションをターゲットに適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象のプロパティが既にアニメーションには置き換えを使用して、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> ハンドオフ動作します。  
  
 このメソッドを使用して開始されたストーリー ボードは、一時停止、再開、またはそれ以外の場合は、起動された後に対話的に制御できません。 ストーリー ボードを制御するためを使用して、 <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Boolean%29> または <xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Windows.Media.Animation.HandoffBehavior%2CSystem.Boolean%29> メソッドです。  
  
 ストーリー ボードのトリガーを開始、 <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkContentElement containingObject, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkContentElement containingObject, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。<see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="isControllable">ストーリー ボードが対話的に制御可能である必要がある場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションをターゲットに適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象のプロパティが既にアニメーションには置き換えを使用して、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> ハンドオフ動作します。  
  
 このストーリー ボードを対話的に制御するには、同じ指定する必要があります `containingObject` する対話型のメソッドを呼び出す際は、ストーリー ボードを開始します。  
  
 このメソッドが呼び出されると、 <xref:System.Windows.Media.Animation.Clock> 、ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックは `containingObject`です。  
  
 ストーリー ボードのトリガーを開始、 <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
   
  
## 例  
 次の例では、制御可能なストーリーを使用して、 <xref:System.Windows.Media.TextEffect>です。<xref:System.Windows.Media.TextEffect> 内に含まれる、 <xref:System.Windows.FrameworkContentElement>のスコープの名前します。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkContentElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkContentElement containingObject, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。<see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="handoffBehavior">新しいアニメーションの動作は、現在のアニメーションとの対話を使用してください。</param>
        <summary>これに関連付けられているアニメーションを適用 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 、ターゲットに指定して、それらを開始して <see cref="T:System.Windows.Media.Animation.HandoffBehavior" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>, 、<xref:System.Windows.Media.Animation.AnimationTimeline>, 、または <xref:System.Windows.Media.Animation.AnimationClock> を使用してプロパティを <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, 、 <xref:System.Windows.Media.Animation.Clock> 以前そのプロパティに関連付けられているオブジェクトがシステム リソースの使用を継続; タイミング システムがこれらの時計を自動的に削除されません。  
  
 使用して時刻の数が多いを適用すると、パフォーマンスの問題を回避する <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, 、完了した後、アニメーション化されたプロパティからクロックを構成することを削除する必要があります。 クロックを削除するいくつかの方法があります。  
  
-   プロパティからすべてのクロックを削除するには、使用、 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> または <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> アニメーション オブジェクトのメソッドです。 アニメーション化する最初のパラメーターとしてプロパティを指定し、 `null` 、2 つ目です。 これにより、すべてのアニメーション クロックがプロパティから削除されます。  
  
-   固有の仕様を削除する <xref:System.Windows.Media.Animation.AnimationClock> にクロックのリストを使用して、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> のプロパティ、 <xref:System.Windows.Media.Animation.AnimationClock> を取得する、 <xref:System.Windows.Media.Animation.ClockController>, 、まず、 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> のメソッド、 <xref:System.Windows.Media.Animation.ClockController>です。 これは、通常、 <xref:System.Windows.Media.Animation.Clock.Completed> クロックのイベント ハンドラーです。 唯一のルート クロックを使用して制御できることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 子クロックのプロパティを返します `null`します。 なお、 <xref:System.Windows.Media.Animation.Clock.Completed> イベントは、クロックの有効期間が無限の場合は呼び出されません。  その場合は、ユーザーを決定する必要がありますを呼び出すタイミング <xref:System.Windows.Media.Animation.ClockController.Remove%2A>します。  
  
 これは、主に有効期間が長いオブジェクトにおけるアニメーションの問題です。  オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。  
  
 クロック オブジェクトに関する詳細については、次を参照してください。 [アニメーションおよびタイミング システムの概要](http://msdn.microsoft.com/ja-jp/172cd5a8-a333-4c81-9456-fafccc19f382)します。  
  
   
  
## 例  
 次の例で、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> <xref:System.Windows.Media.Animation.HandoffBehavior> ユーザーを左クリックしたときにアニメーション化する、および <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior> ユーザーが右クリックします。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementStoryboardWithHandoffBehaviorExample.cs#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementstoryboardwithhandoffbehaviorexample.vb#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。<see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="isControllable">ストーリー ボードが対話的に制御可能である必要がある場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションをターゲットに適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象のプロパティが既にアニメーションには置き換えを使用して、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> ハンドオフ動作します。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター  
  
 このメソッドが呼び出されると、 <xref:System.Windows.Media.Animation.Clock> 、ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックは `containingObject`です。  
  
 ストーリー ボードのトリガーを開始、 <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, class System.Windows.FrameworkTemplate frameworkTemplate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="frameworkTemplate" Type="System.Windows.FrameworkTemplate" />
      </Parameters>
      <Docs>
        <param name="containingObject">オブジェクトを指定した <c>frameworkTemplate</c> が適用されています。<see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="frameworkTemplate">アニメーション化するテンプレートです。</param>
        <summary>これに関連付けられているアニメーションを適用 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 、指定されたテンプレート内で、ターゲットにし、それらを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象のプロパティが既にアニメーションには置き換えを使用して、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> ハンドオフ動作します。  
  
 このメソッドが呼び出されると、 <xref:System.Windows.Media.Animation.Clock> 、ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックは `containingObject`です。  
  
 ストーリー ボードのトリガーを開始、 <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。 せず、指定したアニメーション <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> に適用される <c>containingObject</c>します。</param>
        <param name="handoffBehavior">新しいアニメーションの動作は、現在のアニメーションとの対話を使用してください。</param>
        <summary>これに関連付けられているアニメーションを適用 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 、ターゲットに指定して、それらを開始して <see cref="T:System.Windows.Media.Animation.HandoffBehavior" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例で、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> <xref:System.Windows.Media.Animation.HandoffBehavior> ユーザーを左クリックしたときにアニメーション化する、および <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior> ユーザーが右クリックします。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkElementStoryboardHandoffBehaviorExample.cs#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkelementstoryboardhandoffbehaviorexample.vb#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkContentElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkContentElement containingObject, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。 せず、指定したアニメーション <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> に適用される <c>containingObject</c>します。</param>
        <param name="handoffBehavior">新しいアニメーションの動作は、現在のアニメーションとの対話を使用してください。</param>
        <param name="isControllable">アニメーションが制御できるかどうかを宣言 \(一時停止できる\) 1 回開始されます。</param>
        <summary>これに関連付けられているアニメーションを適用 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 、ターゲットに指定して、それらを開始して <see cref="T:System.Windows.Media.Animation.HandoffBehavior" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象のプロパティが既にアニメーションされている場合、指定したハンドオフ動作を使用してに置換されます。  
  
 このストーリー ボードを対話的に制御するには、同じ指定する必要があります `containingObject` する対話型のメソッドを呼び出す際は、ストーリー ボードを開始します。  
  
 このメソッドが呼び出されると、 <xref:System.Windows.Media.Animation.Clock> 、ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックは `containingObject`です。  
  
 ストーリー ボードのトリガーを開始、 <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
## 使用して、HandoffBehavior の作成  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>, 、<xref:System.Windows.Media.Animation.AnimationTimeline>, 、または <xref:System.Windows.Media.Animation.AnimationClock> を使用してプロパティを <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, 、 <xref:System.Windows.Media.Animation.Clock> 以前そのプロパティに関連付けられているオブジェクトがシステム リソースの使用を継続; タイミング システムがこれらの時計を自動的に削除されません。  
  
 使用して時刻の数が多いを適用すると、パフォーマンスの問題を回避する <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, 、完了した後、アニメーション化されたプロパティからクロックを構成することを削除する必要があります。 クロックを削除するいくつかの方法があります。  
  
-   プロパティからすべてのクロックを削除するには、使用、 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> または <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> アニメーション オブジェクトのメソッドです。 アニメーション化する最初のパラメーターとしてプロパティを指定し、 `null` 、2 つ目です。 これにより、すべてのアニメーション クロックがプロパティから削除されます。  
  
-   固有の仕様を削除する <xref:System.Windows.Media.Animation.AnimationClock> にクロックのリストを使用して、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> のプロパティ、 <xref:System.Windows.Media.Animation.AnimationClock> を取得する、 <xref:System.Windows.Media.Animation.ClockController>, 、まず、 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> のメソッド、 <xref:System.Windows.Media.Animation.ClockController>です。 これは、通常、 <xref:System.Windows.Media.Animation.Clock.Completed> クロックのイベント ハンドラーです。 唯一のルート クロックを使用して制御できることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 子クロックのプロパティを返します `null`します。 なお、 <xref:System.Windows.Media.Animation.Clock.Completed> イベントは、クロックの有効期間が無限の場合は呼び出されません。  その場合は、ユーザーを決定する必要がありますを呼び出すタイミング <xref:System.Windows.Media.Animation.ClockController.Remove%2A>します。  
  
 これは、主に有効期間が長いオブジェクトにおけるアニメーションの問題です。  オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。  
  
 クロック オブジェクトに関する詳細については、次を参照してください。 [アニメーションおよびタイミング システムの概要](http://msdn.microsoft.com/ja-jp/172cd5a8-a333-4c81-9456-fafccc19f382)します。  
  
   
  
## 例  
 次の例では、制御可能なストーリーを使用して、 <xref:System.Windows.Media.TextEffect>です。<xref:System.Windows.Media.TextEffect> 内に含まれる、 <xref:System.Windows.FrameworkContentElement>のスコープの名前します。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 次の例では、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> <xref:System.Windows.Media.Animation.HandoffBehavior> ユーザーを左クリックしたときにアニメーション化する、および <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior> ユーザーが右クリックします。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementStoryboardWithHandoffBehaviorExample.cs#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementstoryboardwithhandoffbehaviorexample.vb#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, class System.Windows.FrameworkTemplate frameworkTemplate, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="frameworkTemplate" Type="System.Windows.FrameworkTemplate" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">オブジェクトを指定した <c>frameworkTemplate</c> が適用されています。<see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="frameworkTemplate">アニメーション化するテンプレートです。</param>
        <param name="isControllable">ストーリー ボードが対話的に制御可能である必要がある場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</param>
        <summary>これに関連付けられているアニメーションを適用 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 、指定されたテンプレート内で、ターゲットにし、それらを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象のプロパティが既にアニメーションには置き換えを使用して、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> ハンドオフ動作します。  
  
 このストーリー ボードを対話的に制御するには、同じ指定する必要があります `containingObject` する対話型のメソッドを呼び出す際は、ストーリー ボードを開始します。  
  
 このメソッドが呼び出されると、 <xref:System.Windows.Media.Animation.Clock> 、ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックは `containingObject`です。  
  
 ストーリー ボードのトリガーを開始、 <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, class System.Windows.FrameworkTemplate frameworkTemplate, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="frameworkTemplate" Type="System.Windows.FrameworkTemplate" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="containingObject">オブジェクトを指定した <c>frameworkTemplate</c> が適用されています。<see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="frameworkTemplate">アニメーション化するテンプレートです。</param>
        <param name="handoffBehavior">新しいアニメーションの動作は、現在のアニメーションとの対話を使用してください。</param>
        <summary>これに関連付けられているアニメーションを適用 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 、指定されたテンプレート内で、ターゲットにし、それらを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが呼び出されると、 <xref:System.Windows.Media.Animation.Clock> 、ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックは `containingObject`です。  
  
 ストーリー ボードのトリガーを開始、 <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
## 使用して、HandoffBehavior の作成  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>, 、<xref:System.Windows.Media.Animation.AnimationTimeline>, 、または <xref:System.Windows.Media.Animation.AnimationClock> を使用してプロパティを <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, 、 <xref:System.Windows.Media.Animation.Clock> 以前そのプロパティに関連付けられているオブジェクトがシステム リソースの使用を継続; タイミング システムがこれらの時計を自動的に削除されません。  
  
 使用して時刻の数が多いを適用すると、パフォーマンスの問題を回避する <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, 、完了した後、アニメーション化されたプロパティからクロックを構成することを削除する必要があります。 クロックを削除するいくつかの方法があります。  
  
-   プロパティからすべてのクロックを削除するには、使用、 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> または <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> アニメーション オブジェクトのメソッドです。 アニメーション化する最初のパラメーターとしてプロパティを指定し、 `null` 、2 つ目です。 これにより、すべてのアニメーション クロックがプロパティから削除されます。  
  
-   固有の仕様を削除する <xref:System.Windows.Media.Animation.AnimationClock> にクロックのリストを使用して、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> のプロパティ、 <xref:System.Windows.Media.Animation.AnimationClock> を取得する、 <xref:System.Windows.Media.Animation.ClockController>, 、まず、 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> のメソッド、 <xref:System.Windows.Media.Animation.ClockController>です。 これは、通常、 <xref:System.Windows.Media.Animation.Clock.Completed> クロックのイベント ハンドラーです。 唯一のルート クロックを使用して制御できることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 子クロックのプロパティを返します `null`します。 なお、 <xref:System.Windows.Media.Animation.Clock.Completed> イベントは、クロックの有効期間が無限の場合は呼び出されません。  その場合は、ユーザーを決定する必要がありますを呼び出すタイミング <xref:System.Windows.Media.Animation.ClockController.Remove%2A>します。  
  
 これは、主に有効期間が長いオブジェクトにおけるアニメーションの問題です。  オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。  
  
 クロック オブジェクトに関する詳細については、次を参照してください。 [アニメーションおよびタイミング システムの概要](http://msdn.microsoft.com/ja-jp/172cd5a8-a333-4c81-9456-fafccc19f382)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">このストーリーボードのアニメーションのターゲットと同じ名前のスコープ内に含まれるオブジェクト。 せず、指定したアニメーション <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> に適用される <c>containingObject</c>します。</param>
        <param name="handoffBehavior">新しいアニメーションの動作は、現在のアニメーションとの対話を使用してください。</param>
        <param name="isControllable">アニメーションが制御できるかどうかを宣言 \(一時停止できる\) 1 回開始されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に関連付けられているアニメーションをターゲットに適用して開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター  
  
 このメソッドが呼び出されると、 <xref:System.Windows.Media.Animation.Clock> 、ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックは `containingObject`です。  
  
 ストーリー ボードのトリガーを開始、 <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
## 使用して、HandoffBehavior の作成  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>, 、<xref:System.Windows.Media.Animation.AnimationTimeline>, 、または <xref:System.Windows.Media.Animation.AnimationClock> を使用してプロパティを <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, 、 <xref:System.Windows.Media.Animation.Clock> 以前そのプロパティに関連付けられているオブジェクトがシステム リソースの使用を継続; タイミング システムがこれらの時計を自動的に削除されません。  
  
 使用して時刻の数が多いを適用すると、パフォーマンスの問題を回避する <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, 、完了した後、アニメーション化されたプロパティからクロックを構成することを削除する必要があります。 クロックを削除するいくつかの方法があります。  
  
-   プロパティからすべてのクロックを削除するには、使用、 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> または <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> アニメーション オブジェクトのメソッドです。 アニメーション化する最初のパラメーターとしてプロパティを指定し、 `null` 、2 つ目です。 これにより、すべてのアニメーション クロックがプロパティから削除されます。  
  
-   固有の仕様を削除する <xref:System.Windows.Media.Animation.AnimationClock> にクロックのリストを使用して、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> のプロパティ、 <xref:System.Windows.Media.Animation.AnimationClock> を取得する、 <xref:System.Windows.Media.Animation.ClockController>, 、まず、 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> のメソッド、 <xref:System.Windows.Media.Animation.ClockController>です。 これは、通常、 <xref:System.Windows.Media.Animation.Clock.Completed> クロックのイベント ハンドラーです。 唯一のルート クロックを使用して制御できることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 子クロックのプロパティを返します `null`します。 なお、 <xref:System.Windows.Media.Animation.Clock.Completed> イベントは、クロックの有効期間が無限の場合は呼び出されません。  その場合は、ユーザーを決定する必要がありますを呼び出すタイミング <xref:System.Windows.Media.Animation.ClockController.Remove%2A>します。  
  
 これは、主に有効期間が長いオブジェクトにおけるアニメーションの問題です。  オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。  
  
 クロック オブジェクトに関する詳細については、次を参照してください。 [アニメーションおよびタイミング システムの概要](http://msdn.microsoft.com/ja-jp/172cd5a8-a333-4c81-9456-fafccc19f382)します。  
  
   
  
## 例  
 次の例では、制御可能なストーリー ボードを作成する方法を示します。  
  
 [!code-csharp[animation\_ovws\_procedural\_snip\#ControllableStoryboardExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws_procedural_snip/CSharp/ControllableStoryboardExample.cs#controllablestoryboardexamplewholepage)]
 [!code-vb[animation\_ovws\_procedural\_snip\#ControllableStoryboardExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws_procedural_snip/visualbasic/controllablestoryboardexample.vb#controllablestoryboardexamplewholepage)]  
  
 次の例では、 <xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace> <xref:System.Windows.Media.Animation.HandoffBehavior> ユーザーを左クリックしたときにアニメーション化する、および <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior> ユーザーが右クリックします。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkElementStoryboardHandoffBehaviorExample.cs#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkelementstoryboardhandoffbehaviorexample.vb#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, class System.Windows.FrameworkTemplate frameworkTemplate, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="frameworkTemplate" Type="System.Windows.FrameworkTemplate" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">オブジェクトを指定した <c>frameworkTemplate</c> が適用されています。<see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> が指定されていないアニメーションは、<c>containingObject</c> に適用されます。</param>
        <param name="frameworkTemplate">アニメーション化するテンプレートです。</param>
        <param name="handoffBehavior">新しいアニメーションの動作は、現在のアニメーションとの対話を使用してください。</param>
        <param name="isControllable">ストーリー ボードが対話的に制御可能である必要がある場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</param>
        <summary>これに関連付けられているアニメーションを適用 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 、指定されたテンプレート内で、ターゲットにし、それらを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このストーリー ボードを対話的に制御するには、同じ指定する必要があります `containingObject` する対話型のメソッドを呼び出す際は、ストーリー ボードを開始します。  
  
 このメソッドが呼び出されると、 <xref:System.Windows.Media.Animation.Clock> 、ストーリー ボードとが含まれているすべてのタイムラインのオブジェクトが作成されます。 これらのクロックは `containingObject`です。  
  
 ストーリー ボードのトリガーを開始、 <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
## 使用して、HandoffBehavior の作成  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>, 、<xref:System.Windows.Media.Animation.AnimationTimeline>, 、または <xref:System.Windows.Media.Animation.AnimationClock> を使用してプロパティを <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, 、 <xref:System.Windows.Media.Animation.Clock> 以前そのプロパティに関連付けられているオブジェクトがシステム リソースの使用を継続; タイミング システムがこれらの時計を自動的に削除されません。  
  
 使用して時刻の数が多いを適用すると、パフォーマンスの問題を回避する <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, 、完了した後、アニメーション化されたプロパティからクロックを構成することを削除する必要があります。 クロックを削除するいくつかの方法があります。  
  
-   プロパティからすべてのクロックを削除するには、使用、 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> または <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> アニメーション オブジェクトのメソッドです。 アニメーション化する最初のパラメーターとしてプロパティを指定し、 `null` 、2 つ目です。 これにより、すべてのアニメーション クロックがプロパティから削除されます。  
  
-   固有の仕様を削除する <xref:System.Windows.Media.Animation.AnimationClock> にクロックのリストを使用して、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> のプロパティ、 <xref:System.Windows.Media.Animation.AnimationClock> を取得する、 <xref:System.Windows.Media.Animation.ClockController>, 、まず、 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> のメソッド、 <xref:System.Windows.Media.Animation.ClockController>です。 これは、通常、 <xref:System.Windows.Media.Animation.Clock.Completed> クロックのイベント ハンドラーです。 唯一のルート クロックを使用して制御できることに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 子クロックのプロパティを返します `null`します。 なお、 <xref:System.Windows.Media.Animation.Clock.Completed> イベントは、クロックの有効期間が無限の場合は呼び出されません。  その場合は、ユーザーを決定する必要がありますを呼び出すタイミング <xref:System.Windows.Media.Animation.ClockController.Remove%2A>します。  
  
 これは、主に有効期間が長いオブジェクトにおけるアニメーションの問題です。  オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。  
  
 クロック オブジェクトに関する詳細については、次を参照してください。 [アニメーションおよびタイミング システムの概要](http://msdn.microsoft.com/ja-jp/172cd5a8-a333-4c81-9456-fafccc19f382)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Storyboard Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Animation.Storyboard Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Storyboard</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> の変更可能な複製を作成し、このオブジェクトの値の詳細コピーを作成します。 このメソッドは、依存関係プロパティをコピーするときにリソース参照とデータ バインディングをコピーしますが \(ただし、これらは解決されなくなる場合があります\)、アニメーションやその現在の値はコピーしません。</summary>
        <returns>現在のオブジェクトの変更可能な複製。 複製されたオブジェクトの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは、ソースの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティが <see langword="true." /> である場合でも、<see langword="false" /> になります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの使用の変更可能なコピーの作成をフリーズした <xref:System.Windows.Freezable> オブジェクト \(または任意 <xref:System.Windows.Freezable> オブジェクト\)。 便利な場合は、このメソッドは、厳密に型指定の実装と継承したバージョンをシャドウします。  
  
 詳細については、「<xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName>」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.CreateInstanceCore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.Animation.Storyboard" /> クラスの新しいインスタンスを作成します。</summary>
        <returns>新しい <see cref="T:System.Windows.Media.Animation.Storyboard" /> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called internally by <xref:System.Windows.Freezable.CreateInstance%2A> when creating new instances of the <xref:System.Windows.Media.Animation.Storyboard> class for the various cloning methods \(such as <xref:System.Windows.Freezable.Clone%2A> and <xref:System.Windows.Freezable.CloneCurrentValue%2A>\).  
  
   
  
## 例  
 The following example shows a typical implementation of <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  
  
 [!code-csharp[freezablesample\_procedural\#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample\_procedural\#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Every <see cref="T:System.Windows.Media.Animation.Storyboard" /> subclass must implement this method. Typical implementation is to simply call the class default constructor and return the result.</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.CreateInstanceCore" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrentGlobalSpeed">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クロックの <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A> 速度は、実際の時間と比較したが、時間の現在の進行速度。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCurrentGlobalSpeed">
      <MemberSignature Language="C#" Value="public double GetCurrentGlobalSpeed ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetCurrentGlobalSpeed() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>現在のグローバル速度、または、クロックが停止している場合は 0 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentGlobalSpeed">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; GetCurrentGlobalSpeed (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;float64&gt; GetCurrentGlobalSpeed(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkContentElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>現在のグローバル速度または <see langword="null" /> クロックが停止している場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クロックの <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A> 速度は、実際の時間と比較したが、時間の現在の進行速度。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentGlobalSpeed">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; GetCurrentGlobalSpeed (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;float64&gt; GetCurrentGlobalSpeed(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>現在のグローバル速度または <see langword="null" /> クロックが停止している場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クロックの <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A> 速度は、実際の時間と比較したが、時間の現在の進行速度。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentIteration">
      <MemberSignature Language="C#" Value="public int GetCurrentIteration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetCurrentIteration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentIteration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>現在アクティブな期間内でこのクロックの現在のイテレーションまたは <see langword="null" /> このクロックが停止している場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クロックの最初のイテレーションでは、1 の値を持ちます。  
  
 このストーリー ボードがある場合、 <xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A> 設定 `true`, セグメントを次のいずれかだけでなく、全体の反復処理は、順方向リバース ペアで構成します。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; GetCurrentIteration (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;int32&gt; GetCurrentIteration(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkContentElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>現在アクティブな期間内でこのクロックの現在のイテレーションまたは <see langword="null" /> このクロックが停止している場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クロックの最初のイテレーションでは、1 の値を持ちます。  
  
 このストーリー ボードがある場合、 <xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A> 設定 `true`, セグメントを次のいずれかだけでなく、全体の反復処理は、順方向リバース ペアで構成します。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; GetCurrentIteration (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;int32&gt; GetCurrentIteration(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>現在アクティブな期間内でこのクロックの現在のイテレーションまたは <see langword="null" /> このクロックが停止している場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クロックの最初のイテレーションでは、1 の値を持ちます。  
  
 このクロックのタイムラインがある場合、 <xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A> 設定 `true`, セグメントを次のいずれかだけでなく、全体の反復処理は、順方向リバース ペアで構成します。  
  
 現在の反復に関係なく、クロックをシークと 1 にも、現在のイテレーションを返します。 また、クロックを再起動すると、1 に現在の反復も返します。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProgress">
      <MemberSignature Language="C#" Value="public double GetCurrentProgress ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetCurrentProgress() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentProgress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>
          <see langword="null" /> このクロックが場合 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />, 、またはこのクロックがアクティブな場合は 0.0 とその <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> が、 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> の <see cref="P:System.Windows.Duration.Forever" />。 そうしないと、0.0 ~ 1.0 の現在のイテレーションにおけるこのクロックの現在の進行状況を示す値。 値が 0.0 のなし、進行状況を示し値 1.0 では、時計が、その現在のイテレーションの終了を示します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProgress">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; GetCurrentProgress (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;float64&gt; GetCurrentProgress(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkContentElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>
          <see langword="null" /> このクロックが場合 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />, 、またはこのクロックがアクティブな場合は 0.0 とその <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> が、 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> の <see cref="P:System.Windows.Duration.Forever" />。 そうしないと、0.0 ~ 1.0 の現在のイテレーションにおけるこのクロックの現在の進行状況を示す値。 値が 0.0 のなし、進行状況を示し値 1.0 では、時計が、その現在のイテレーションの終了を示します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProgress">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; GetCurrentProgress (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;float64&gt; GetCurrentProgress(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>
          <see langword="null" /> このクロックが場合 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />, 、またはこのクロックがアクティブな場合は 0.0 とその <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> が、 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> の <see cref="P:System.Windows.Duration.Forever" />。 そうしないと、0.0 ~ 1.0 の現在のイテレーションにおけるこのクロックの現在の進行状況を示す値。 値が 0.0 のなし、進行状況を示し値 1.0 では、時計が、その現在のイテレーションの終了を示します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.Animation.ClockState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>このストーリー ボードの作成、クロックの現在の状態: <see cref="F:System.Windows.Media.Animation.ClockState.Active" />, 、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" />, 、または <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドはわかりません、ストーリー ボードが一時停止しているかどうか。 ストーリー ボードが一時停止しているかどうかを確認するのには、使用、 <xref:System.Windows.Media.Animation.Storyboard.GetIsPaused%2A> メソッドです。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockState GetCurrentState (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.Animation.ClockState GetCurrentState(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkContentElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>このストーリー ボードの作成、クロックの現在の状態: <see cref="F:System.Windows.Media.Animation.ClockState.Active" />, 、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" />, 、または <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドはわかりません、ストーリー ボードが一時停止しているかどうか。 ストーリー ボードが一時停止しているかどうかを確認するのには、使用、 <xref:System.Windows.Media.Animation.Storyboard.GetIsPaused%2A> メソッドです。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockState GetCurrentState (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.Animation.ClockState GetCurrentState(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>このストーリー ボードの作成、クロックの現在の状態: <see cref="F:System.Windows.Media.Animation.ClockState.Active" />, 、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" />, 、または <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドはわかりません、ストーリー ボードが一時停止しているかどうか。 ストーリー ボードが一時停止しているかどうかを確認するのには、使用、 <xref:System.Windows.Media.Animation.Storyboard.GetIsPaused%2A> メソッドです。  
  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentTime">
      <MemberSignature Language="C#" Value="public TimeSpan GetCurrentTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetCurrentTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>
          <see langword="null" /> このストーリー ボードの時計が場合 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />。 そうしないと、ストーリー ボードのクロックの現在の時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentTime">
      <MemberSignature Language="C#" Value="public Nullable&lt;TimeSpan&gt; GetCurrentTime (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; GetCurrentTime(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkContentElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>
          <see langword="null" /> このストーリー ボードの時計が場合 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />。 そうしないと、ストーリー ボードのクロックの現在の時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentTime">
      <MemberSignature Language="C#" Value="public Nullable&lt;TimeSpan&gt; GetCurrentTime (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; GetCurrentTime(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <returns>
          <see langword="null" /> このストーリー ボードの時計が場合 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />。 そうしないと、ストーリー ボードのクロックの現在の時刻。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      </Docs>
    </Member>
    <Member MemberName="GetIsPaused">
      <MemberSignature Language="C#" Value="public bool GetIsPaused ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetIsPaused() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetIsPaused" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止します。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止している場合、それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="GetIsPaused">
      <MemberSignature Language="C#" Value="public bool GetIsPaused (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetIsPaused(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkContentElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止します。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止している場合、それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="GetIsPaused">
      <MemberSignature Language="C#" Value="public bool GetIsPaused (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetIsPaused(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止します。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止している場合、それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、ストーリー ボードのクロックに関する情報を取得して、ストーリー ボードを制御する必要があります。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="GetTarget">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetTarget (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetTarget(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetTarget(System.Windows.DependencyObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">取得するタイムライン、 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />です。</param>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Storyboard.Target" /> の指定した値 <see cref="T:System.Windows.Media.Animation.Timeline" />です。</summary>
        <returns>依存関係オブジェクトの対象となる <paramref name="element" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Media.Animation.Storyboard.Target%2A> を対象にできるオブジェクトを示すためにアニメーション タイムラインでプロパティをアタッチします。 ストーリー ボードを対象とするしくみの詳細については、次を参照してください。 <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>します。 添付プロパティの機能の詳細については、次を参照してください。 [添付プロパティの概要](http://msdn.microsoft.com/ja-jp/75928354-dc01-47e8-a018-8409aec1f32d)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="GetTargetName">
      <MemberSignature Language="C#" Value="public static string GetTargetName (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTargetName(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetTargetName(System.Windows.DependencyObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">取得するタイムライン、 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />です。</param>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> の指定した値 <see cref="T:System.Windows.Media.Animation.Timeline" />です。</summary>
        <returns>対象となる依存関係オブジェクトの名前 <paramref name="element" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、取得、 <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> 指定したオブジェクトのプロパティをアタッチします。 ストーリー ボードを対象とするしくみの詳細については、次を参照してください。 <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>します。 添付プロパティの機能の詳細については、次を参照してください。 [添付プロパティの概要](http://msdn.microsoft.com/ja-jp/75928354-dc01-47e8-a018-8409aec1f32d)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="GetTargetProperty">
      <MemberSignature Language="C#" Value="public static System.Windows.PropertyPath GetTargetProperty (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.PropertyPath GetTargetProperty(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetTargetProperty(System.Windows.DependencyObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">取得する依存関係オブジェクト、 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" />です。</param>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> の指定した値 <see cref="T:System.Windows.Media.Animation.Timeline" />です。</summary>
        <returns>対象となるプロパティ <paramref name="element" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、取得、 <xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A> 指定したオブジェクトのプロパティをアタッチします。 ストーリー ボードを対象とするしくみの詳細については、次を参照してください。 <xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A> 添付プロパティです。 添付プロパティの機能の詳細については、次を参照してください。 [添付プロパティの概要](http://msdn.microsoft.com/ja-jp/75928354-dc01-47e8-a018-8409aec1f32d)します。  
  
 場合、 <xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A> 設定された、マークアップでは、このメソッドは、空を返します。 <xref:System.Windows.PropertyPath> プロパティの参照が解決され、解析時に内部的に格納されているためです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Pause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一時停止、 <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ストーリー ボードを一時停止しますが、アクティブまたは現在一時停止中でない場合は、目に見える効果がありません。 副次効果と関連付けられているすべての子も一時停止します。  
  
 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
## 一時停止中のストーリー ボードの開始  
 ときに、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> 一時停止されたストーリー ボード、再開、再起動して表示されます。 ただし、これは実際には発生しません。<xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドは実際には、一時停止した置き換えます <xref:System.Windows.Media.Animation.Storyboard> 新しい一時停止されていないバージョンです。 毎回、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドが呼び出されると、ストーリー ボードに対してクロック オブジェクトを作成します。 これらのクロックは、アニメーション化するプロパティに分散されます。 ため、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドは、そのクロックを再起動することはできません。 新しい時計と置き換えることです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkContentElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>一時停止、 <see cref="T:System.Windows.Media.Animation.Clock" /> の指定した <see cref="T:System.Windows.FrameworkContentElement" /> に関連付けられた <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ストーリー ボードを一時停止しますが、アクティブまたは現在一時停止中でない場合は、目に見える効果がありません。 副次効果と関連付けられているすべての子も一時停止します。  
  
 一時停止中のストーリー ボードをシークは再開されません。 一時停止中のストーリー ボードを再開する唯一の方法が使用するには、 <xref:System.Windows.Media.Animation.Storyboard.Resume%2A> メソッドです。 呼び出す、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドでは、再開の外観を持つ新しい 1 つに、一時停止中のストーリー ボードをもう一度置き換えます。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 顧客から受け取った例についてを参照してください [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ストーリー ボードのクロックを一時停止、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
## 一時停止中のストーリー ボードの開始  
 ときに、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> 一時停止されたストーリー ボード、再開、再起動して表示されます。 ただし、これは実際には発生しません。<xref:System.Windows.Media.Animation.Storyboard.Begin%2A> 実際には、です。 毎回、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドが呼び出されると、ストーリー ボードに対してクロック オブジェクトを作成します。 これらのクロックは、アニメーション化するプロパティに分散されます。 ため、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドは、そのクロックを再起動することはできません。 新しい時計と置き換えることです。  
  
   
  
## 例  
 次の例では、制御可能なストーリーを使用して、 <xref:System.Windows.Media.TextEffect>です。<xref:System.Windows.Media.TextEffect> 内に含まれる、 <xref:System.Windows.FrameworkContentElement>のスコープの名前します。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkContentElement)" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>一時停止、 <see cref="T:System.Windows.Media.Animation.Clock" /> の指定した <see cref="T:System.Windows.FrameworkElement" /> に関連付けられた <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ストーリー ボードを一時停止しますが、アクティブまたは現在一時停止中でない場合は、目に見える効果がありません。 副次効果と関連付けられているすべての子も一時停止します。  
  
 一時停止中のストーリー ボードをシークは再開されません。 一時停止中のストーリー ボードを再開する唯一の方法が使用するには、 <xref:System.Windows.Media.Animation.Storyboard.Resume%2A> メソッドです。 呼び出す、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドでは、再開の外観を持つ新しい 1 つに、一時停止中のストーリー ボードをもう一度置き換えます。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ストーリー ボードのクロックを一時停止、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
## 一時停止中のストーリー ボードの開始  
 ときに、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> 一時停止されたストーリー ボード、再開、再起動して表示されます。 ただし、これは実際には発生しません。<xref:System.Windows.Media.Animation.Storyboard.Begin%2A> 実際には、です。 毎回、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドが呼び出されると、ストーリー ボードに対してクロック オブジェクトを作成します。 これらのクロックは、アニメーション化するプロパティに分散されます。 ため、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドは、そのクロックを再起動することはできません。 新しい時計と置き換えることです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Remove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトを削除します。 この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に属するアニメーションは、いったんアニメーション化された後は、<see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> の設定には関係なく、このプロパティに影響しなくなります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 行われたすべての対話型操作、 <xref:System.Windows.Media.Animation.Clock>, 、ためでも、 <xref:System.Windows.Media.Animation.Storyboard>, 、タイミング エンジンは、直前に次のレンダリングの動作の次のタイマー刻みで発生します。 つまり、 <xref:System.Windows.Media.Animation.Storyboard.Remove%2A> メソッドは、この時点までのアニメーション化されたプロパティをまだに影響します。 言い換えると、次にフレームを表示すると、ストーリー ボードが削除されます。 この時刻より前に、プロパティからアニメーションの関連付けを解除する必要がある場合、 <xref:System.Windows.UIElement.BeginAnimation%2A> メソッドを `animation` のパラメーター値 `null`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkContentElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトを削除します。 この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に属するアニメーションは、いったんアニメーション化された後は、<see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> の設定には関係なく、このプロパティに影響しなくなります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ストーリー ボードのクロックのトリガーを削除する、 <xref:System.Windows.Media.Animation.Timeline.RemoveRequested> イベントです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトを削除します。 この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に属するアニメーションは、いったんアニメーション化された後は、<see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> の設定には関係なく、このプロパティに影響しなくなります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ストーリー ボードのクロックのトリガーを削除する、 <xref:System.Windows.Media.Animation.Timeline.RemoveRequested> イベントです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Resume" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkContentElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一時停止されていないストーリー ボードを再開しても効果はありません。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 一時停止中のストーリー ボードをシークは再開されません。 一時停止中のストーリー ボードを再開する唯一の方法が使用するには、 <xref:System.Windows.Media.Animation.Storyboard.Resume%2A> メソッドです。 呼び出す、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> ストーリー ボードが開始された後に再開の外観を備えた古いストーリー ボードが置き換えられます。  
  
 一時停止したストーリー ボードのクロックを再開する、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
   
  
## 例  
 次の例では、制御可能なストーリーを使用して、 <xref:System.Windows.Media.TextEffect>です。<xref:System.Windows.Media.TextEffect> 内に含まれる、 <xref:System.Windows.FrameworkContentElement>のスコープの名前します。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkContentElement)" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一時停止されていないストーリー ボードを再開しても効果はありません。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 一時停止中のストーリー ボードをシークは再開されません。 一時停止中のストーリー ボードを再開する唯一の方法が使用するには、 <xref:System.Windows.Media.Animation.Storyboard.Resume%2A> メソッドです。 呼び出す、 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> ストーリー ボードが開始された後に再開の外観を備えた古いストーリー ボードが置き換えられます。  
  
 一時停止したストーリー ボードのクロックを再開する、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">タイムラインが前方または後方の量を示す正または負の値。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を指定した位置までシークします。<see cref="T:System.Windows.Media.Animation.Storyboard" /> は、クロックが次の目盛りを刻んだときに、要求されたシークを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シーク操作では、ストーリー ボードの受け取らない <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> または <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> アカウントに設定します。 ストーリー ボードがものとして扱われる、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">タイムラインが、指定した <c>origin</c> から前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <param name="origin">
          <c>offset</c> の適用元の位置。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を指定した位置までシークします。<see cref="T:System.Windows.Media.Animation.Storyboard" /> は、クロックが次の目盛りを刻んだときに、要求されたシークを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シーク操作では、ストーリー ボードの受け取らない <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> または <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> アカウントに設定します。 ストーリー ボードがものとして扱われる、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (System.Windows.FrameworkContentElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(class System.Windows.FrameworkContentElement containingObject, valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="containingObject">指定されたオブジェクト、 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドが呼び出されました。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <param name="offset">タイムラインが、指定した <c>origin</c> から前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <param name="origin">
          <c>offset</c> の適用元の位置。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を指定した位置までシークします。<see cref="T:System.Windows.Media.Animation.Storyboard" /> は、クロックが次の目盛りを刻んだときに、要求されたシークを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シーク操作では、ストーリー ボードの受け取らない <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> または <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> アカウントに設定します。 ストーリー ボードがものとして扱われる、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 このメソッドは、ストーリー ボードの時計を変更 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> に <xref:System.Windows.Media.Animation.ClockState.Active>します。 このメソッドには、次のチェック マークが処理されるまで、タイミング ツリーに影響がありません。 副次効果と適切なイベントも発生しないそれまでです。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ストーリー ボードのトリガーをシーク、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> イベントです。  
  
   
  
## 例  
 次の例では両方とも、 <xref:System.Windows.Media.Animation.Storyboard.Seek%2A> と <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> メソッドです。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementSeekExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementSeekExample.cs#frameworkcontentelementseekexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementSeekExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementseekexample.vb#frameworkcontentelementseekexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (System.Windows.FrameworkElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(class System.Windows.FrameworkElement containingObject, valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="containingObject">指定されたオブジェクト、 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドが呼び出されました。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <param name="offset">タイムラインが、指定した <c>origin</c> から前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <param name="origin">
          <c>offset</c> の適用元の位置。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を指定した位置までシークします。<see cref="T:System.Windows.Media.Animation.Storyboard" /> は、クロックが次の目盛りを刻んだときに、要求されたシークを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シーク操作では、ストーリー ボードの受け取らない <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> または <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> アカウントに設定します。 ストーリー ボードがものとして扱われる、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 このメソッドは、ストーリー ボードの時計を変更 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> に <xref:System.Windows.Media.Animation.ClockState.Active>します。 このメソッドには、次のチェック マークが処理されるまで、タイミング ツリーに影響がありません。 副次効果と適切なイベントも発生しないそれまでです。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、制御することが行われた場合に削除されます。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ストーリー ボードのトリガーをシーク、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> イベントです。  
  
   
  
## 例  
 次の例では、ストーリー ボードが開始された後、1 秒間に \(スキップしてください\) を移動する方法を示します。  
  
 [!code-csharp[timingbehaviors\_procedural\_snip\#SeekStoryboardExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/SeekStoryboardExample.cs#seekstoryboardexamplewholepage)]
 [!code-vb[timingbehaviors\_procedural\_snip\#SeekStoryboardExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/seekstoryboardexample.vb#seekstoryboardexamplewholepage)]  
  
 次の例では、両方を示しています、 <xref:System.Windows.Media.Animation.Storyboard.Seek%2A> と <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> メソッドです。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#SeekExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/SeekExample.cs#seekexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#SeekExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/seekexample.vb#seekexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">タイムラインが前方または後方の量を示す正または負の値。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を新しい位置まで即座 \(同期的\) にシークします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> 検索する時刻を揃えて配置、 <xref:System.Windows.Media.Animation.Storyboard> 最後のクロック刻みとします。 値は直ちに期限の変更を反映するように更新される <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>, 画面が画面の更新されるまで変更内容を反映していない場合でも、します。  
  
 シーク操作では、ストーリー ボードの受け取らない <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> または <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> アカウントに設定します。 ストーリー ボードがものとして扱われる、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">タイムラインが、指定した <c>origin</c> から前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <param name="origin">
          <c>offset</c> の適用元の位置。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を新しい位置まで即座 \(同期的\) にシークします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> 検索する時刻を揃えて配置、 <xref:System.Windows.Media.Animation.Storyboard> 最後のクロック刻みとします。 値は直ちに期限の変更を反映するように更新される <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>, 画面が画面の更新されるまで変更内容を反映していない場合でも、します。  
  
 シーク操作では、ストーリー ボードの受け取らない <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> または <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> アカウントに設定します。 ストーリー ボードがものとして扱われる、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (System.Windows.FrameworkContentElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(class System.Windows.FrameworkContentElement containingObject, valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <param name="offset">タイムラインが、指定した <c>origin</c> から前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <param name="origin">
          <c>offset</c> の適用元の位置。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を新しい位置まで即座 \(同期的\) にシークします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> 検索する時刻を揃えて配置、 <xref:System.Windows.Media.Animation.Storyboard> 最後のクロック刻みとします。 値は直ちに期限の変更を反映するように更新される <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>, 画面が画面の更新されるまで変更内容を反映していない場合でも、します。  
  
 シーク操作では、ストーリー ボードの受け取らない <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> または <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> アカウントに設定します。 ストーリー ボードがものとして扱われる、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 このメソッドは、ストーリー ボードの時計を変更 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> に  
  
 <xref:System.Windows.Media.Animation.ClockState.Active>。  
  
 ストーリー ボードのトリガーをシーク、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> イベントです。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 次の例では両方とも、 <xref:System.Windows.Media.Animation.Storyboard.Seek%2A> と <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> メソッドです。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementSeekExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementSeekExample.cs#frameworkcontentelementseekexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementSeekExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementseekexample.vb#frameworkcontentelementseekexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (System.Windows.FrameworkElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(class System.Windows.FrameworkElement containingObject, valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <param name="offset">タイムラインが、指定した <c>origin</c> から前方または後方にどれだけ移動するかを示す正の値または負の値。</param>
        <param name="origin">
          <c>offset</c> の適用元の位置。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を新しい位置まで即座 \(同期的\) にシークします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> 検索する時刻を揃えて配置、 <xref:System.Windows.Media.Animation.Storyboard> 最後のクロック刻みとします。 値は直ちに期限の変更を反映するように更新される <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>, 画面が画面の更新されるまで変更内容を反映していない場合でも、します。  
  
 シーク操作では、ストーリー ボードの受け取らない <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> または <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> アカウントに設定します。 ストーリー ボードがものとして扱われる、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 このメソッドは、ストーリー ボードの時計を変更 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> に  
  
 <xref:System.Windows.Media.Animation.ClockState.Active>。  
  
 ストーリー ボードのトリガーをシーク、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> イベントです。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 次の例では両方とも、 <xref:System.Windows.Media.Animation.Storyboard.Seek%2A> と <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> メソッドです。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#SeekExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/SeekExample.cs#seekexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#SeekExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/seekexample.vb#seekexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpeedRatio">
      <MemberSignature Language="C#" Value="public void SetSpeedRatio (double speedRatio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSpeedRatio(float64 speedRatio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speedRatio" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="speedRatio">ストーリーボードの新しい対話型速度比である 0 より大きい有限値。 この値をストーリーボードの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 値に掛けると、ストーリーボードの実効速度が決まります。 この値は、ストーリーボードの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> プロパティを上書きしません。 たとえば、<see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> が 0.5 のストーリーボードに対してこのメソッドを呼び出して、対話型速度比を 3 と指定すると、このストーリーボードの実効速度は 1.5 になります。</param>
        <summary>対話型の速度比を設定、 <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpeedRatio">
      <MemberSignature Language="C#" Value="public void SetSpeedRatio (System.Windows.FrameworkContentElement containingObject, double speedRatio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSpeedRatio(class System.Windows.FrameworkContentElement containingObject, float64 speedRatio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkContentElement,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="speedRatio" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <param name="speedRatio">ストーリーボードの新しい対話型速度比である 0 より大きい有限値。 この値をストーリーボードの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 値に掛けると、ストーリーボードの実効速度が決まります。 この値は、ストーリーボードの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> プロパティを上書きしません。 たとえば、<see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> が 0.5 のストーリーボードに対してこのメソッドを呼び出して、対話型速度比を 3 と指定すると、このストーリーボードの実効速度は 1.5 になります。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の対話型速度比を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 このメソッドの呼び出しをトリガー、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
   
  
## 例  
 次の例では、制御可能なストーリーを使用して、 <xref:System.Windows.Media.TextEffect>です。<xref:System.Windows.Media.TextEffect> 内に含まれる、 <xref:System.Windows.FrameworkContentElement>のスコープの名前します。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpeedRatio">
      <MemberSignature Language="C#" Value="public void SetSpeedRatio (System.Windows.FrameworkElement containingObject, double speedRatio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSpeedRatio(class System.Windows.FrameworkElement containingObject, float64 speedRatio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkElement,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="speedRatio" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <param name="speedRatio">ストーリーボードの新しい対話型速度比である 0 より大きい有限値。 この値をストーリーボードの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 値に掛けると、ストーリーボードの実効速度が決まります。 この値は、ストーリーボードの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> プロパティを上書きしません。 たとえば、<see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> が 0.5 のストーリーボードに対してこのメソッドを呼び出して、対話型速度比を 3 と指定すると、このストーリーボードの実効速度は 1.5 になります。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> の対話型速度比を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 このメソッドの呼び出しをトリガー、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTarget">
      <MemberSignature Language="C#" Value="public static void SetTarget (System.Windows.DependencyObject element, System.Windows.DependencyObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTarget(class System.Windows.DependencyObject element, class System.Windows.DependencyObject value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetTarget(System.Windows.DependencyObject,System.Windows.DependencyObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">指定した依存関係オブジェクトを対象とする <see cref="T:System.Windows.Media.Animation.Timeline" />。</param>
        <param name="value">ターゲットへの依存関係オブジェクト。</param>
        <summary>指定した <see cref="T:System.Windows.Media.Animation.Timeline" /> 対象とした依存関係オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、設定、 <xref:System.Windows.Media.Animation.Storyboard.Target%2A> 指定したオブジェクトのプロパティをアタッチします。 ストーリー ボードを対象とするしくみの詳細については、次を参照してください。 <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>します。 添付プロパティの機能の詳細については、次を参照してください。 [添付プロパティの概要](http://msdn.microsoft.com/ja-jp/75928354-dc01-47e8-a018-8409aec1f32d)します。  
  
> [!NOTE]
>  <xref:System.Windows.Media.Animation.Storyboard.Target%2A> プロパティはいずれかに設定できるため、シリアル化は <xref:System.Windows.DependencyObject>です。 このオブジェクトを正しく XAML から参照できることは保証されません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="SetTargetName">
      <MemberSignature Language="C#" Value="public static void SetTargetName (System.Windows.DependencyObject element, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTargetName(class System.Windows.DependencyObject element, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetTargetName(System.Windows.DependencyObject,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="element">指定した依存関係オブジェクトを対象とする <see cref="T:System.Windows.Media.Animation.Timeline" />。</param>
        <param name="name">対象とする依存関係オブジェクトの名前。</param>
        <summary>指定した <see cref="T:System.Windows.Media.Animation.Timeline" /> が指定した名前の依存関係オブジェクトを対象とするように指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、設定、 <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> 指定したオブジェクトのプロパティをアタッチします。 ストーリー ボードを対象とするしくみの詳細については、次を参照してください。 <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>します。 添付プロパティの機能の詳細については、次を参照してください。 [添付プロパティの概要](http://msdn.microsoft.com/ja-jp/75928354-dc01-47e8-a018-8409aec1f32d)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="SetTargetProperty">
      <MemberSignature Language="C#" Value="public static void SetTargetProperty (System.Windows.DependencyObject element, System.Windows.PropertyPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTargetProperty(class System.Windows.DependencyObject element, class System.Windows.PropertyPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetTargetProperty(System.Windows.DependencyObject,System.Windows.PropertyPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="path" Type="System.Windows.PropertyPath" />
      </Parameters>
      <Docs>
        <param name="element">指定した依存関係プロパティを関連付ける <see cref="T:System.Windows.Media.Animation.Timeline" />。</param>
        <param name="path">アニメーション化する依存関係プロパティを示すパス。</param>
        <summary>指定した <see cref="T:System.Windows.Media.Animation.Timeline" /> が、指定した依存関係プロパティを対象にするようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、設定、 <xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A> 指定したオブジェクトのプロパティをアタッチします。 ストーリー ボードを対象とするしくみの詳細については、次を参照してください。 <xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A>します。 添付プロパティの機能の詳細については、次を参照してください。 [添付プロパティの概要](http://msdn.microsoft.com/ja-jp/75928354-dc01-47e8-a018-8409aec1f32d)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" />
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SkipToFill" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このストーリーボードの <see cref="T:System.Windows.Media.Animation.Clock" /> の現在の時間をそのアクティブな期間の終わりに進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkContentElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>このストーリーボードの <see cref="T:System.Windows.Media.Animation.Clock" /> の現在の時間をそのアクティブな期間の終わりに進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドに進めます storyboard の現在のアクティブな期間の終了時刻この時点でストーリー ボードの動作がで指定されたその <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> 設定します。 場合 <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> に設定されている <xref:System.Windows.Media.Animation.FillBehavior.HoldEnd>, プロパティが設定されている場合、ストーリー ボードを塗りつぶします; <xref:System.Windows.Media.Animation.FillBehavior.Stop>, 、ストーリー ボードが停止します。  
  
 無限の期間を含むストーリー ボードには、このメソッドを呼び出す、無限数の影響はありません。 非アクティブなストーリー ボードにこのメソッドを呼び出しても効果はありません。  
  
 期間のトリガーの塗りつぶしまでのクロックを進んで、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> イベントです。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 次の例では、制御可能なストーリーを使用して、 <xref:System.Windows.Media.TextEffect>です。<xref:System.Windows.Media.TextEffect> 内に含まれる、 <xref:System.Windows.FrameworkContentElement>のスコープの名前します。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>このストーリーボードの <see cref="T:System.Windows.Media.Animation.Clock" /> の現在の時間をそのアクティブな期間の終わりに進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドに進めます storyboard の現在のアクティブな期間の終了時刻この時点でストーリー ボードの動作がで指定されたその <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> 設定します。 場合 <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> に設定されている <xref:System.Windows.Media.Animation.FillBehavior.HoldEnd>, プロパティが設定されている場合、ストーリー ボードを塗りつぶします; <xref:System.Windows.Media.Animation.FillBehavior.Stop>, 、ストーリー ボードが停止します。  
  
 無限の期間を含むストーリー ボードには、このメソッドを呼び出す、無限数の影響はありません。 非アクティブなストーリー ボードにこのメソッドを呼び出しても効果はありません。  
  
 期間のトリガーの塗りつぶしまでのクロックを進んで、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> イベントです。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ストーリー ボードを停止するには発生しません。、 <xref:System.Windows.Media.Animation.Timeline.Completed> イベントです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkContentElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Media.Animation.ClockState.Stopped> ストーリー ボードは、そのターゲットのプロパティを不要になったに影響します。 前回の値をアニメーション化されたプロパティを元に戻します。  
  
 クロックを停止する、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> イベント、ではなく、 <xref:System.Windows.Media.Animation.Timeline.Completed> イベントです。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
   
  
## 例  
 次の例では、制御可能なストーリーを使用して、 <xref:System.Windows.Media.TextEffect>です。<xref:System.Windows.Media.TextEffect> 内に含まれる、 <xref:System.Windows.FrameworkContentElement>のスコープの名前します。  
  
 [!code-csharp[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation\_procedural\_snip\#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">
          <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> メソッドの呼び出し時に指定されたオブジェクト。 このオブジェクトには、このストーリーボードとその子のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが格納されます。</param>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Media.Animation.ClockState.Stopped> ストーリー ボードは、そのターゲットのプロパティを不要になったに影響します。 前回の値をアニメーション化されたプロパティを元に戻します。  
  
 クロックを停止する、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> イベント、ではなく、 <xref:System.Windows.Media.Animation.Timeline.Completed> イベントです。  
  
 このストーリー ボードを対話的に制御するには、同じ使用する必要があります `containingObject` 、ストーリー ボードを開始するために使用した対話型のメソッドを呼び出すときにパラメーター。 ストーリー ボードが制御可能なことができますを一時停止、再開、シーク、停止、削除するとします。 ストーリー ボードをコードで制御するためには、ストーリー ボードの適切なオーバー ロードを使用する必要があります <xref:System.Windows.Media.Animation.Storyboard.Begin%2A> メソッドを指定して `true` 制御可能です。 例については、次を参照してください。 [方法: 制御、ストーリー ボードは](http://msdn.microsoft.com/ja-jp/040f13f0-69f9-4ab5-be2b-079f4f80c7c0)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetNameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetNameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetNameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.Storyboard.TargetNameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 添付プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.Storyboard.TargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別、 <see cref="P:System.Windows.Media.Animation.Storyboard.Target" /> 添付プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="TargetPropertyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetPropertyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetPropertyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.Storyboard.TargetPropertyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> 添付プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrentProgress">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetCurrentTime">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetIsPaused">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" /> が一時停止します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetCurrentIteration">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetSpeedRatio">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>対話型の速度比を設定、 <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Resume">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> を再開します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SkipToFill">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このストーリーボードの <see cref="T:System.Windows.Media.Animation.Clock" /> の現在の時間をそのアクティブな期間の終わりに進めます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SeekAlignedToLastTick">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> を新しい位置まで即座 \(同期的\) にシークします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Pause">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>一時停止、 <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Stop">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> のために作成された <see cref="T:System.Windows.Media.Animation.Clock" /> を停止します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>これをシーク <see cref="T:System.Windows.Media.Animation.Storyboard" /> 次のクロック ティックが発生したときに、新しい位置にします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetCurrentState">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> の <see cref="T:System.Windows.Media.Animation.Clock" /> これに作成された <see cref="T:System.Windows.Media.Animation.Storyboard" />します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Storyboard" /> 用に作成された <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトを削除します。 この <see cref="T:System.Windows.Media.Animation.Storyboard" /> に属するアニメーションは、いったんアニメーション化された後は、<see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> の設定には関係なく、このプロパティに影響しなくなります。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>