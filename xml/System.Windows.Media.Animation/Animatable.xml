<Type Name="Animatable" FullName="System.Windows.Media.Animation.Animatable">
  <TypeSignature Language="C#" Value="public abstract class Animatable : System.Windows.Freezable, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Animatable extends System.Windows.Freezable implements class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.Animatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>アニメーションのサポートを提供する抽象クラスです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Animatable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.Animation.Animatable" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">アニメーション化するプロパティ。</param>
        <param name="clock">指定したプロパティをアニメーション化する際に使用するクロック。<c>clock</c> が <see langword="null" /> の場合は、すべてのアニメーションが指定したプロパティから削除されます \(ただし停止されません\)。</param>
        <summary>
          <see cref="T:System.Windows.Media.Animation.AnimationClock" /> を指定した <see cref="T:System.Windows.DependencyProperty" /> に適用します。 プロパティが既にアニメーション化されている場合は、<see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> ハンドオフ動作が使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、クロックをプロパティから削除しても、クロックは停止しませんに注意してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">アニメーション化するプロパティ。</param>
        <param name="clock">指定したプロパティをアニメーション化する際に使用するクロック。 場合 <c>handoffBehavior</c> は <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> と <c>clock</c> は <see langword="null" />, 、すべてのアニメーションは、指定したプロパティから削除 \(ですが停止していない\)。 場合 <c>handoffBehavior</c> は <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" /> クロックと <see langword="null" />, 、このメソッドは影響を与えません。</param>
        <param name="handoffBehavior">新しいアニメーションが既にプロパティの値に影響する現在のアニメーションと対話する方法を指定する値。</param>
        <summary>
          <see cref="T:System.Windows.Media.Animation.AnimationClock" /> を指定した <see cref="T:System.Windows.DependencyProperty" /> に適用します。 プロパティは既にアニメーション化される場合、指定した <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、クロックをプロパティから削除しても、クロックは停止しませんに注意してください。  
  
## 使用して、HandoffBehavior の作成  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>, 、<xref:System.Windows.Media.Animation.AnimationTimeline>, 、または <xref:System.Windows.Media.Animation.AnimationClock> を使用してプロパティを <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, 、 <xref:System.Windows.Media.Animation.Clock> 以前そのプロパティに関連付けられているオブジェクトがシステム リソースの使用を継続; タイミング システムはこれらの時計を自動的に削除されません。  
  
 使用して時刻の数が多いを適用すると、パフォーマンスの問題を回避する <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, 、完了した後、アニメーション化されたプロパティからクロックを構成することを削除する必要があります。 クロックを削除するいくつかの方法があります。  
  
-   プロパティからすべてのクロックを削除するには、使用、 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> または <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> アニメーション オブジェクトのメソッドです。 アニメーション化する最初のパラメーターとしてプロパティを指定し、 `null` 、2 つ目です。 これにより、すべてのアニメーション クロックがプロパティから削除されます。  
  
-   固有の仕様を削除する <xref:System.Windows.Media.Animation.AnimationClock> にクロックのリストを使用して、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> のプロパティ、 <xref:System.Windows.Media.Animation.AnimationClock> を取得する、 <xref:System.Windows.Media.Animation.ClockController>, 、まず、 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> のメソッド、 <xref:System.Windows.Media.Animation.ClockController>です。 これは、通常、 <xref:System.Windows.Media.Animation.Clock.Completed> クロックのイベント ハンドラーです。 唯一のルート クロックを制御することに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 子クロックのプロパティが返す `null`します。 なお、 <xref:System.Windows.Media.Animation.Clock.Completed> クロックの有効期間が無限の場合、イベントは呼び出されません。  その場合は、ユーザーを呼び出すタイミングを決定する必要が <xref:System.Windows.Media.Animation.ClockController.Remove%2A>です。  
  
 これは、主に有効期間が長いオブジェクトにおけるアニメーションの問題です。  オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。  
  
 クロック オブジェクトに関する詳細については、次を参照してください。、 [アニメーションおよびタイミング システムの概要](http://msdn.microsoft.com/ja-jp/172cd5a8-a333-4c81-9456-fafccc19f382)します。  
  
   
  
## 例  
 次の例は、異なるアニメーション クロックを適用する方法を示しています。 <xref:System.Windows.Media.Animation.HandoffBehavior> 設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">アニメーション化するプロパティ。</param>
        <param name="animation">指定したプロパティをアニメーション化するために使用するアニメーション。  
  
 アニメーションの <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> が <see langword="null" /> の場合、現在のアニメーションは削除され、プロパティの現在の値は保持されます。  
  
 <c>animation</c> が <see langword="null" /> の場合、すべてのアニメーションがプロパティから削除され、プロパティの値は、その基本値に戻ります。</param>
        <summary>指定された <see cref="T:System.Windows.DependencyProperty" /> にアニメーションを適用します。 アニメーションは、次のフレームがレンダリングされるときに開始されます。 指定されたプロパティが既にアニメーション化されている場合は、<see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> ハンドオフ動作が使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アニメーションがある場合、 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 0 より大きく、その時間が次のフレームがレンダリング時間から経過した後に、アニメーションが開始します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">アニメーション化するプロパティ。</param>
        <param name="animation">指定したプロパティをアニメーション化するために使用するアニメーション。  
  
 場合 <c>handoffBehavior</c> は <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> とアニメーションの <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> は <see langword="null" />, と、現在のアニメーションが削除され、プロパティの現在の値が保持されます。  
  
 場合 <c>handoffBehavior</c> は <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> と <c>animation</c> は、 <see langword="null" /> 参照、すべてのアニメーションは、プロパティから削除してプロパティの値は、ベース値に戻ります。  
  
 場合 <c>handoffBehavior</c> は <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" />, 、このメソッドは影響ない場合は、アニメーションやその <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> は <see langword="null" />です。</param>
        <param name="handoffBehavior">新しいアニメーションが既にプロパティの値に影響する現在のアニメーションと対話する方法を指定する値。</param>
        <summary>指定された <see cref="T:System.Windows.DependencyProperty" /> にアニメーションを適用します。 アニメーションは、次のフレームがレンダリングされるときに開始されます。 指定したプロパティは既にアニメーション化される場合、指定した <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アニメーションがある場合、 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 0 より大きく、その時間が次のフレームがレンダリング時間から経過した後に、アニメーションが開始します。  
  
## 使用して、HandoffBehavior の作成  
 適用すると、 <xref:System.Windows.Media.Animation.Storyboard>, 、<xref:System.Windows.Media.Animation.AnimationTimeline>, 、または <xref:System.Windows.Media.Animation.AnimationClock> を使用してプロパティを <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, 、 <xref:System.Windows.Media.Animation.Clock> 以前そのプロパティに関連付けられているオブジェクトがシステム リソースの使用を継続; タイミング システムはこれらの時計を自動的に削除されません。  
  
 使用して時刻の数が多いを適用すると、パフォーマンスの問題を回避する <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, 、完了した後、アニメーション化されたプロパティからクロックを構成することを削除する必要があります。 クロックを削除するいくつかの方法があります。  
  
-   プロパティからすべてのクロックを削除するには、使用、 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> または <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> アニメーション オブジェクトのメソッドです。 アニメーション化する最初のパラメーターとしてプロパティを指定し、 `null` 、2 つ目です。 これにより、すべてのアニメーション クロックがプロパティから削除されます。  
  
-   固有の仕様を削除する <xref:System.Windows.Media.Animation.AnimationClock> にクロックのリストを使用して、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> のプロパティ、 <xref:System.Windows.Media.Animation.AnimationClock> を取得する、 <xref:System.Windows.Media.Animation.ClockController>, 、まず、 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> のメソッド、 <xref:System.Windows.Media.Animation.ClockController>です。 これは、通常、 <xref:System.Windows.Media.Animation.Clock.Completed> クロックのイベント ハンドラーです。 唯一のルート クロックを制御することに注意してください、 <xref:System.Windows.Media.Animation.ClockController>、 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 子クロックのプロパティが返す `null`します。 なお、 <xref:System.Windows.Media.Animation.Clock.Completed> クロックの有効期間が無限の場合、イベントは呼び出されません。  その場合は、ユーザーを呼び出すタイミングを決定する必要が <xref:System.Windows.Media.Animation.ClockController.Remove%2A>です。  
  
 これは、主に有効期間が長いオブジェクトにおけるアニメーションの問題です。  オブジェクトがガベージ コレクションである場合は、そのクロックが切断されても、ガベージ コレクションします。  
  
 クロック オブジェクトに関する詳細については、次を参照してください。、 [アニメーションおよびタイミング システムの概要](http://msdn.microsoft.com/ja-jp/172cd5a8-a333-4c81-9456-fafccc19f382)します。  
  
   
  
## 例  
 次の例は、異なるアニメーションを適用する方法を示しています。 <xref:System.Windows.Media.Animation.HandoffBehavior> 設定します。  
  
 [!code-cpp[animateproperty\#InteractiveAnimationExampleWholePage](~/samples/snippets/cpp/VS_Snippets_Wpf/animateproperty/CPP/InteractiveExample.cpp#interactiveanimationexamplewholepage)]
 [!code-csharp[animateproperty\#InteractiveAnimationExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/animateproperty/CSharp/InteractiveExample.cs#interactiveanimationexamplewholepage)]
 [!code-vb[animateproperty\#InteractiveAnimationExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateproperty/VisualBasic/InteractiveExample.vb#interactiveanimationexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Animatable Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Animation.Animatable Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Animatable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これの変更可能な複製を作成 <see cref="T:System.Windows.Media.Animation.Animatable" />, 、このオブジェクトの値の詳細コピーを作成します。 このオブジェクトの依存関係プロパティをコピーするときにこのメソッドは、リソースの参照とデータ バインディングをコピー \(ただし、解決できなくなる可能性があります\)、アニメーションやその現在の値ではありません。</summary>
        <returns>このインスタンスの変更可能な複製。 返される複製は、事実上、現在のオブジェクトの詳細コピーです。 複製の <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは、 **false**します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Media.Animation.Animatable.Clone%2A> の変更可能なコピーを作成するメソッドを使用できる固定 <xref:System.Windows.Freezable> オブジェクトです。 便宜上、このメソッドは、継承されたシャドウ <xref:System.Windows.Freezable.Clone%2A> メソッドは、厳密に型指定の実装を提供します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Freezable.Clone" />
      </Docs>
    </Member>
    <Member MemberName="FreezeCore">
      <MemberSignature Language="C#" Value="protected override bool FreezeCore (bool isChecking);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool FreezeCore(bool isChecking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isChecking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isChecking">このメソッドが、このインスタンスが固定可能にできるかどうかを判断するだけである場合は <see langword="true" />。 このメソッドが呼び出されたときに、このインスタンスが自分自身を実際に固定する場合は <see langword="false" />。</param>
        <summary>これにより、 <see cref="T:System.Windows.Media.Animation.Animatable" /> 不可能な状態のオブジェクトをできるかどうか、不可能な状態を決定したりします。</summary>
        <returns>場合 <paramref name="isChecking" /> は <see langword="true" />, 、このメソッドが戻る <see langword="true" /> この <see cref="T:System.Windows.Media.Animation.Animatable" /> 可能である不可能な状態、または <see langword="false" /> それを実行できない場合も変更もできません。  
  
 場合 <paramref name="isChecking" /> は <see langword="false" />, 、このメソッドが戻る <see langword="true" /> 場合場合に、この <see cref="T:System.Windows.Media.Animation.Animatable" /> は変更できますが、または <see langword="false" /> 場合は、このオブジェクトの固定された状態の変更を開始したことの副作用を伴うも変更もできないことにすることはできません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは **false** と <xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A> は **true**します。  
  
 直接 \(呼び出す場合を除きますベースの実装における\) には、このメソッドを呼び出す必要はありません。 内部でこのメソッドが呼び出されます <xref:System.Windows.Freezable.CanFreeze%2A> \(で `isChecking` と等しい `true`\) と  <xref:System.Windows.Freezable.Freeze%2A> \(で `isChecking` と等しい `false`\)。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Classes that derive from <see cref="T:System.Windows.Media.Animation.Animatable" /> must override this method when the class contains data that is not stored using dependency properties.  
  
 A typical implementation would call the base implementation, then call the static <see cref="M:System.Windows.Freezable.Freeze" /> method on all <see cref="T:System.Windows.Freezable" /> typed properties that the class contains, returning <see langword="true" /> only if all properties were frozen (or could have been frozen, in the case of passing through a <see langword="false" /> value for <paramref name="isChecking" />).</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">基本 \(アニメーション化されていない\) 値を取得するプロパティを識別します。</param>
        <summary>指定したアニメーション化されていない値を返す <see cref="T:System.Windows.DependencyProperty" />します。</summary>
        <returns>指定したプロパティがアニメーション化されていない場合に返される値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定したプロパティをアニメーション化しない場合と同じ結果が返されます <xref:System.Windows.DependencyObject.GetValue%2A>します。  
  
   
  
## 例  
 次の例では、アニメーション化されたプロパティのアニメーション化されていない値が取得され表示されます。  
  
 [!code-csharp[timingbehaviors\_procedural\_snip\#GetAnimationBaseValueExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalueexamplewholepage)]
 [!code-vb[timingbehaviors\_procedural\_snip\#GetAnimationBaseValueExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalueexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Animatable.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか 1 つまたは複数 <see cref="T:System.Windows.Media.Animation.AnimationClock" /> オブジェクトがこのオブジェクトの依存関係プロパティのいずれかに関連付けられています。</summary>
        <value>**true** 場合は 1 つまたは複数 <see cref="T:System.Windows.Media.Animation.AnimationClock" /> オブジェクトは、このオブジェクトの依存関係プロパティのいずれかと関連付けられている以外の場合、 **false**します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、このオブジェクトがアニメーション化されたサブオブジェクトを含むかどうかを示すものではありません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStoredWeakReference">
      <MemberSignature Language="C#" Value="public static bool ShouldSerializeStoredWeakReference (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ShouldSerializeStoredWeakReference(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">依存関係プロパティ システムに参加しているオブジェクトを表します。</param>
        <summary>依存関係オブジェクトをシリアル化するかどうかを指定します。</summary>
        <returns>
          <see langword="true" /> シリアル化する <paramref name="target" />。 そうしないと、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.TypeDescriptor> クラスは、 <xref:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference%2A> プロパティをシリアル化するかどうかを決定する方法です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したアニメーション <see cref="T:System.Windows.DependencyProperty" /> 指定して <see cref="T:System.Windows.Media.Animation.AnimationClock" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された <see cref="T:System.Windows.DependencyProperty" /> にアニメーションを適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>