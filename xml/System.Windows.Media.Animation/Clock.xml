<Type Name="Clock" FullName="System.Windows.Media.Animation.Clock">
  <TypeSignature Language="C#" Value="public class Clock : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Clock extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.Clock" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Windows.Media.Animation.Timeline" /> の実行時のタイミング状態を維持します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Media.Animation.Timeline>, 、自体は、実際に何もしない以外の時間のセグメントについて説明します。 タイムラインの <xref:System.Windows.Media.Animation.Clock> 実際の処理を行うオブジェクト: タイムラインのスペースを実行時のタイミングに関連する状態を維持します。  
  
 ほとんどの場合、クロックは、タイムラインのスペースを自動的に作成されます。 使用してアニメーション化するときに、 <xref:System.Windows.Media.Animation.Storyboard> または <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A> メソッド、クロックは自動的にタイムラインとアニメーションの作成され、その対象となるプロパティに適用します。 例については、次を参照してください。 [方法: ストーリー ボードを使用して、プロパティをアニメーション化](http://msdn.microsoft.com/ja-jp/f4a314e9-1da2-4367-85fc-1232487efa7a) と [方法: プロパティなしを使用して、ストーリー ボード アニメーション化する](http://msdn.microsoft.com/ja-jp/d411db70-4df7-487d-82bc-95a7c1b2e7f8)します。  
  
 作成することも、 <xref:System.Windows.Media.Animation.Clock> を使用して明示的に、 <xref:System.Windows.Media.Animation.Timeline.CreateClock%2A> メソッドです。 多数のようなオブジェクトをアニメーション化など、負荷の高いシナリオで管理する独自 <xref:System.Windows.Media.Animation.Clock> を使用して、パフォーマンスが向上します。  
  
 ツリーの構造に合ったで時計が配置された、 <xref:System.Windows.Media.Animation.Timeline> オブジェクト\] ツリーから作成されます。 \(一時停止、再開、停止、およびなどの\)、このようなタイミング ツリーのルート クロックを対話的に操作できることができますを取得してその <xref:System.Windows.Media.Animation.Clock.Controller%2A>します。 ルート以外のクロックを直接制御できません。  
  
 いったん作成されると、クロックは変更できません \(ただし、操作することができます\)。  
  
## タイムラインを使用して、タイマーとして  
 タイムラインのクロックは、関連付けられているイベント ハンドラーがある場合にのみ進行または \(の場合、 <xref:System.Windows.Media.Animation.AnimationClock> オブジェクト\) プロパティに関連付けられています。 この理由 \(および他のユーザー\)、これは使用しないで使用すること、 <xref:System.Windows.Media.Animation.Timeline> タイマーとして。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Derived classes should implement <see cref="M:System.Windows.Media.Animation.Clock.GetCurrentTimeCore" /> if they want to modify how time flows for this clock. Derived classes can be made to do additional work when the clock repeats, skips, seeks, begins, pauses, resumes, or stops by overriding the <see cref="M:System.Windows.Media.Animation.Clock.DiscontinuousTimeMovement" />, <see cref="M:System.Windows.Media.Animation.Clock.SpeedChanged" />, and <see cref="M:System.Windows.Media.Animation.Clock.Stopped" /> methods.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Clock (System.Windows.Media.Animation.Timeline timeline);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class System.Windows.Media.Animation.Timeline timeline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.#ctor(System.Windows.Media.Animation.Timeline)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="timeline" Type="System.Windows.Media.Animation.Timeline" />
      </Parameters>
      <Docs>
        <param name="timeline">
          <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> からこのクロックを構築する必要があります。 すべての子に対してクロックは作成されません <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> オブジェクト、存在する場合。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Media.Animation.Clock" /> クラスを指定して <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> をテンプレートとして。 新しい <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトが子を持っていません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public event EventHandler Completed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Completed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.Completed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクロックの再生が完全に完了と発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクロックがクロック ツリーのルートのクロックの場合は、再生がアクティブの期間 \(をクラッシュの回数を含む\) の末尾に達するし、そのすべての子はそれぞれのアクティブ期間の末尾に達した後に完了しました。 このクロックが子クロックの場合が属するに達するとクロック ツリーのルートのクロックのアクティブな期間とそのすべての子のクロックの終了したら、再生の再生を完全に終了したと見なされます。  
  
 クロックを停止しても、その completed イベントは発生しませんが、保留期間に進みます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Controller">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockController Controller { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.ClockController Controller" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.Controller" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Media.Animation.Clock" /> を開始、一時停止、再開、シーク、スキップ、停止、削除するために使用できる <see cref="T:System.Windows.Media.Animation.ClockController" /> を取得します。</summary>
        <value>これがルート クロックである場合は <see cref="T:System.Windows.Media.Animation.ClockController" />。それ以外の場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Only root clocks can be interactively controlled.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Begin" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Pause" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Resume" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Stop" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Remove" />
      </Docs>
    </Member>
    <Member MemberName="CurrentGlobalSpeed">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; CurrentGlobalSpeed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;float64&gt; CurrentGlobalSpeed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現実世界の時間と比較したときの、クロックの時間が現在進行しているレートを取得します。</summary>
        <value>現実世界の時間と比較したときの、クロックの時間が現在進行しているレート。 クロックが停止している場合、このプロパティは <see langword="null" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentGlobalSpeedInvalidated">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentGlobalSpeedInvalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentGlobalSpeedInvalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クロックの速度が更新されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Pausing, resuming, reversing, accelerating, decelerating, seeking, stopping, or changing a clock's interactive speed using a <xref:System.Windows.Media.Animation.ClockController> triggers this event.  
  
 Although this event occurs when the <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A> property becomes invalid, that doesn't necessarily mean the property changed.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
        <altmember cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" />
        <altmember cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" />
        <altmember cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio" />
        <altmember cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio" />
      </Docs>
    </Member>
    <Member MemberName="CurrentGlobalTime">
      <MemberSignature Language="C#" Value="protected TimeSpan CurrentGlobalTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan CurrentGlobalTime" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentGlobalTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>によって確立されるように、現在グローバル時間を取得、 WPF タイミング システムです。</summary>
        <value>現在のグローバル時間、 WPF タイミング システムです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; CurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; CurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクロックの現在のイテレーションを取得します。</summary>
        <value>現在アクティブな期間内でこのクロックの現在のイテレーションまたは <see langword="null" /> このクロックが停止している場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クロックの最初のイテレーションでは、1 の値を持ちます。  
  
 このクロックのタイムラインがある場合、 <xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A> 設定 `true`, セグメントを次のいずれかだけでなく、全体の反復処理は、順方向リバース ペアで構成します。  
  
 現在の反復に関係なく、クロックをシークと 1 にも、現在のイテレーションを返します。 また、クロックを再起動すると、1 に現在の反復も返します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" />
      </Docs>
    </Member>
    <Member MemberName="CurrentProgress">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; CurrentProgress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;float64&gt; CurrentProgress" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentProgress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この現在の進行状況を取得 <see cref="T:System.Windows.Media.Animation.Clock" /> の現在のイテレーションごとにします。</summary>
        <value>
          <see langword="null" /> このクロックが場合 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />, 、またはこのクロックがアクティブな場合は 0.0 とその <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> が、 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> の <see cref="P:System.Windows.Duration.Forever" />。 そうしないと、0.0 ~ 1.0 の現在のイテレーションにおけるこのクロックの現在の進行状況を示す値。 値が 0.0 のなし、進行状況を示し値 1.0 では、時計が、その現在のイテレーションの終了を示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの値を示す、 <xref:System.Windows.Media.Animation.Clock.CurrentTime%2A> で正規化された、 <xref:System.Windows.Media.Animation.Timeline.Duration%2A> このクロックの <xref:System.Windows.Media.Animation.Clock.Timeline%2A>です。  
  
 あるクロック <xref:System.Windows.Media.Animation.ClockState.Filling> が、 <xref:System.Windows.Media.Animation.Clock.CurrentProgress%2A> 1.0 です。  
  
## タイムラインを使用して、タイマーとして  
 タイムラインのクロックは、関連付けられているイベント ハンドラーがある場合にのみ進行または \(の場合、 <xref:System.Windows.Media.Animation.AnimationClock> オブジェクト\) プロパティに関連付けられています。 この理由 \(および他のユーザー\)、これは使用しないで使用すること、 <xref:System.Windows.Media.Animation.Timeline> タイマーとして。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Animation.ClockState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クロックが現在 <see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" />、または <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" /> であるかどうかを示す値を取得します。</summary>
        <value>クロックの現在の状態。<see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" />、または <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Note the clock's <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> property doesn't tell you whether it's paused. To determine whether a clock is paused, use the <xref:System.Windows.Media.Animation.Clock.IsPaused%2A> property.  
  
 The <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> occurs whenever the value of this property changes.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Media.Animation.Clock.CurrentStateInvalidated" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalTime" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="CurrentStateInvalidated">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentStateInvalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentStateInvalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.CurrentStateInvalidated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クロックの <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> プロパティが更新されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use the <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> event when you want to be notified if when the clock starts, stops, or fills. The <xref:System.Object> parameter of the <xref:System.EventHandler> event handler is the <xref:System.Windows.Media.Animation.Clock> whose state was invalidated.  
  
 Pausing a <xref:System.Windows.Media.Animation.Clock> does not change its <xref:System.Windows.Media.Animation.Clock.CurrentState%2A>. To be notified when a clock becomes paused, use the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> event.  
  
 Although this event occurs when the <xref:System.Windows.Media.Animation.ClockState> becomes invalid, that doesn't necessarily mean the <xref:System.Windows.Media.Animation.ClockState> changed: a <xref:System.Windows.Media.Animation.Clock> that switches from <xref:System.Windows.Media.Animation.ClockState.Active> to <xref:System.Windows.Media.Animation.ClockState.Filling> and then back to <xref:System.Windows.Media.Animation.ClockState.Active> in the same tick will cause this event to fire, but its <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> property won't actually change.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentState" />
        <altmember cref="T:System.Windows.Media.Animation.ClockState" />
        <altmember cref="E:System.Windows.Media.Animation.Clock.CurrentTimeInvalidated" />
      </Docs>
    </Member>
    <Member MemberName="CurrentTime">
      <MemberSignature Language="C#" Value="public Nullable&lt;TimeSpan&gt; CurrentTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; CurrentTime" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得このクロックの現在の現在のイテレーションにおける現在の時刻。</summary>
        <value>
          <see langword="null" /> このクロックが場合 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />。 そうしないと、このクロックの現在の時刻。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
## タイムラインを使用して、タイマーとして  
 タイムラインのクロックは、関連付けられているイベント ハンドラーがある場合にのみ進行または \(の場合、 <xref:System.Windows.Media.Animation.AnimationClock> オブジェクト\) プロパティに関連付けられています。 この理由 \(および他のユーザー\)、これは使用しないで使用すること、 <xref:System.Windows.Media.Animation.Timeline> タイマーとして。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" />
      </Docs>
    </Member>
    <Member MemberName="CurrentTimeInvalidated">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentTimeInvalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentTimeInvalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.CurrentTimeInvalidated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときにこのクロックの <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> は無効になります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クロックの <xref:System.Windows.Media.Animation.Clock.CurrentTime%2A> 無効になったときにクロックが進行します。 次の対話型操作 CurrentTimeInvalidated イベントをトリガーも: <xref:System.Windows.Media.Animation.ClockController.Begin%2A>, 、<xref:System.Windows.Media.Animation.ClockController.SkipToFill%2A>, 、<xref:System.Windows.Media.Animation.ClockController.Seek%2A>, 、<xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A>, 、および <xref:System.Windows.Media.Animation.ClockController.Stop%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscontinuousTimeMovement">
      <MemberSignature Language="C#" Value="protected virtual void DiscontinuousTimeMovement ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DiscontinuousTimeMovement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.DiscontinuousTimeMovement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クロックが繰り返し、スキップ、またはシークされるたびに派生クラスとして実装された場合は呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCanSlip">
      <MemberSignature Language="C#" Value="protected virtual bool GetCanSlip ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetCanSlip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.GetCanSlip" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。 かどうか、 <see cref="T:System.Windows.Media.Animation.Clock" /> が自身の外部のタイム ソースがタイミング システムとの同期が必要な場合があります。</summary>
        <returns>返します。 **true** 場合、 <see cref="T:System.Windows.Media.Animation.Clock" /> タイミング システムとの同期にかかる時間の外部のソースを、それ以外の場合、 **false**します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メディアを使用して再生される <xref:System.Windows.Media.MediaTimeline> 内で、 <xref:System.Windows.Media.Animation.Storyboard> を作成する例は、 <xref:System.Windows.Media.Animation.Clock> 外部時刻ソース \(ビデオ クリップなど\) と他のタイムライン内で同期が必要な場合がありますがあるでしょう、 <xref:System.Windows.Media.Animation.Storyboard>です。 詳細については、「<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentTimeCore">
      <MemberSignature Language="C#" Value="protected virtual TimeSpan GetCurrentTimeCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.TimeSpan GetCurrentTimeCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.GetCurrentTimeCore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得このクロックの現在の現在のイテレーションにおける現在の時刻。</summary>
        <returns>アクティブまたは保留されている場合は、このクロックの現在の時刻それ以外の場合、 <see cref="F:System.TimeSpan.Zero" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドがの実装で使用される、 <xref:System.Windows.Media.Animation.Clock.CurrentTime%2A> メソッド、コードから直接呼び出さないでいます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Derived classes should override this method if they want to modify how they determine the current time.</para>
        </block>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      </Docs>
    </Member>
    <Member MemberName="HasControllableRoot">
      <MemberSignature Language="C#" Value="public bool HasControllableRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasControllableRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.HasControllableRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Windows.Media.Animation.Clock" /> 制御可能なクロック ツリーの一部です。</summary>
        <value>
          <see langword="true" /> このクロックが制御可能なルートのクロックとクロック ツリーに属している場合、またはこのクロック自体が制御可能なルートです。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.IsPaused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうかこの <see cref="T:System.Windows.Media.Animation.Clock" />, 、またはその親のいずれかが一時停止します。</summary>
        <value>
          <see langword="true" /> この場合 <see cref="T:System.Windows.Media.Animation.Clock" /> または一時停止している以外の場合、その親のいずれかが <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Pause" />
      </Docs>
    </Member>
    <Member MemberName="NaturalDuration">
      <MemberSignature Language="C#" Value="public System.Windows.Duration NaturalDuration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Duration NaturalDuration" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.NaturalDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Duration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクロックの自然な長さを取得 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" />します。</summary>
        <value>によって決定されるこのクロックの自然な長さの <see cref="P:System.Windows.Media.Animation.Clock.Timeline" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 自然な長さの詳細については、次を参照してください。、 <xref:System.Windows.Media.Animation.Timeline.GetNaturalDuration%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Timeline.GetNaturalDuration(System.Windows.Media.Animation.Clock)" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Clock Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Clock Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Clock</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクロックの親である時刻を取得します。</summary>
        <value>このクロックの親または <see langword="null" /> このクロックがルートである場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRequested">
      <MemberSignature Language="C#" Value="public event EventHandler RemoveRequested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RemoveRequested" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.RemoveRequested" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="M:System.Windows.Media.Animation.ClockController.Remove" /> このメソッドが呼び出された <see cref="T:System.Windows.Media.Animation.Clock" /> またはその親のクロックのいずれかです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeedChanged">
      <MemberSignature Language="C#" Value="protected virtual void SpeedChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SpeedChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.SpeedChanged" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスで実装される、時計のたびに呼び出されるときに開始、スキップを一時停止、再開すると、または時計の <see cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" /> を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stopped">
      <MemberSignature Language="C#" Value="protected virtual void Stopped ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Stopped() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.Stopped" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスで実装された場合、呼び出されるを使用して、クロックを停止するたびに、 <see cref="M:System.Windows.Media.Animation.ClockController.Stop" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeline">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Timeline Timeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Timeline Timeline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.Timeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Timeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> この <see cref="T:System.Windows.Media.Animation.Clock" /> が作成されました。</summary>
        <value>
          <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> この <see cref="T:System.Windows.Media.Animation.Clock" /> が作成されました。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クロックの変更 <xref:System.Windows.Media.MediaTimeline> ; 時計を更新できません新しいクロックを作成する必要がありますから、変更された <xref:System.Windows.Media.Animation.Timeline>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>