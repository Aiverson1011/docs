<Type Name="ClockController" FullName="System.Windows.Media.Animation.ClockController">
  <TypeSignature Language="C#" Value="public sealed class ClockController : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClockController extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.ClockController" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Windows.Media.Animation.Clock" /> を対話的に制御します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、<xref:System.Windows.Media.Animation.ClockController>対話形式で作業を開始、一時停止、再開、シーク、スキップ、停止、および削除する、<xref:System.Windows.Media.Animation.Clock>です。 ルート レベルのクロックのみ対話的に制御できます。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.Clock" />
    <altmember cref="P:System.Windows.Media.Animation.Clock.Controller" />
  </Docs>
  <Members>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Begin" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>対象の <see cref="P:System.Windows.Media.Animation.ClockController.Clock" /> を次のタイマー刻みで開始するように設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドにより、ターゲット <xref:System.Windows.Media.Animation.Clock> かのように動作する、 <xref:System.Windows.Media.Animation.Timeline> オブジェクトの <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 次のタイマー刻みの時刻に設定されています。 タイムラインの実際 <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> 設定が無視されます \(が変更されません\)。  
  
 このメソッドは変更対象のクロックの <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> に <xref:System.Windows.Media.Animation.ClockState.Active>します。<xref:System.Windows.Media.Animation.ClockController.Begin%2A> メソッドは一時停止しているクロックを再開しません。  
  
 このメソッドには、次のチェック マークが処理されるまで、タイミング ツリーに影響がありません。 副次効果と適切なイベントも発生しませんそれまでです。 このメソッドの呼び出しをトリガー、 <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> と <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Clock">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Clock Clock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Clock Clock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.Clock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Clock</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Windows.Media.Animation.Clock" /> これによって制御される <see cref="T:System.Windows.Media.Animation.ClockController" />します。</summary>
        <value>
          <see cref="T:System.Windows.Media.Animation.Clock" /> これによって制御される <see cref="T:System.Windows.Media.Animation.ClockController" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Pause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ターゲットの <see cref="T:System.Windows.Media.Animation.Clock" /> の進行を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一時停止すること、 <xref:System.Windows.Media.Animation.Clock> の現在の状態、および一時停止に関係なく、クロック変わらないので、現在の状態。 クロックを一時停止中に <xref:System.Windows.Media.Animation.ClockState.Active>, 、<xref:System.Windows.Media.Animation.ClockState.Stopped>, 、または <xref:System.Windows.Media.Animation.ClockState.Filling>です。 クロックを再開する唯一の方法を使用して、 <xref:System.Windows.Media.Animation.ClockController.Resume%2A> メソッドです。 クロックを暗黙的に一時停止するには、その子が一時停止します。  
  
 対象のクロックが既に一時停止されると、このメソッドを呼び出しても効果はありません。  
  
 クロックを一時停止、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Resume" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Remove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>削除、 <see cref="T:System.Windows.Media.Animation.Clock" /> に関連付けられた <see cref="T:System.Windows.Media.Animation.ClockController" /> プロパティをアニメーション化します。 時計とその子クロックでは、これらのプロパティは反映されなくなります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.Windows.Media.Animation.Clock.RemoveRequested> イベントです。  
  
   
  
## 例  
 次の例では、削除し、それ以外の場合、クロックを対話的に制御する方法を示します。  
  
 [!code-csharp[ClockController\_procedural\_snip\#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController\_procedural\_snip\#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Resume" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一時停止されている <see cref="T:System.Windows.Media.Animation.Clock" /> を有効にして、進行を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一時停止または再開できる、 <xref:System.Windows.Media.Animation.Clock> の現在の状態、および一時停止または再開に関係なく、クロック変わらないので、現在の状態。 クロックを一時停止中に <xref:System.Windows.Media.Animation.ClockState.Active>, 、<xref:System.Windows.Media.Animation.ClockState.Stopped>, 、または <xref:System.Windows.Media.Animation.ClockState.Filling>です。 一時停止しているクロックを再開する唯一の方法を使用して、 <xref:System.Windows.Media.Animation.ClockController.Resume%2A> メソッドです。 クロックを暗黙的に再開するには、その子が再開されます。 一時停止されていない時計にこのメソッドを呼び出しても効果はありません。  
  
 一時停止しているクロックを再開する、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Pause" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">シーク オフセットを、対象のクロックの時間で表した値。 このオフセットは、クロックの <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> または <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> に対して相対的で、<c>origin</c> の値に応じて決まります。</param>
        <param name="origin">指定したオフセットが対象のクロックの <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> または <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> に対して相対的かどうかを示す値。</param>
        <summary>次のティックが発生した時点で、ターゲット <see cref="P:System.Windows.Media.Animation.ClockController.Clock" /> を指定された量だけシークします。 対象のクロックが停止している場合は、このシークによって再びアクティブになります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シーク操作を取らない、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> または <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> アカウントにこのクロックのタイムラインの設定: 時計が値として処理のタイムラインがある、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 このメソッドは、クロックの変更 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> に <xref:System.Windows.Media.Animation.ClockState.Active>します。 このメソッドには、次のチェック マークが処理されるまで、タイミング ツリーに影響がありません。 副次効果と適切なイベントもは発生しませんそれまでです。  
  
 ストーリー ボードのトリガーをシーク、 <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> と <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> イベントです。  
  
 対象のクロックは、子を持つ、現在の時刻も更新されます。  
  
   
  
## 例  
 次の例では、シークを使用する方法、 <xref:System.Windows.Media.Animation.ClockController>です。  
  
 [!code-csharp[ClockController\_procedural\_snip\#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController\_procedural\_snip\#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Animation.TimeSeekOrigin" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">シーク オフセットを、対象のクロックの時間で表した値。 このオフセットは、クロックの <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> または <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> に対して相対的で、<c>origin</c> の値に応じて決まります。</param>
        <param name="origin">指定したオフセットが対象のクロックの <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> または <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> に対して相対的かどうかを示す値。</param>
        <summary>ターゲットをシーク <see cref="T:System.Windows.Media.Animation.Clock" /> をすぐに指定の量。 対象のクロックが停止している場合は、このシークによって再びアクティブになります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シーク操作を取らない、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> または <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> アカウントにこのクロックのタイムラインの設定: 時計が値として処理のタイムラインがある、 <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A> 1 およびいない <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>します。  
  
 <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> 最後のクロック刻みとクロックの検索する時間を揃えて配置します。 値は直ちに期限の変更を反映するように更新される <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A>, 画面は画面の更新されるまで変更内容を反映しない場合でも、します。  
  
 対象のクロックは、子を持つ、現在の時刻も更新されます。  
  
 このメソッドは、クロックの変更 <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> に <xref:System.Windows.Media.Animation.ClockState.Active>します。  
  
 ストーリー ボードのトリガーをシーク、 <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> と <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> イベントです。  
  
   
  
## 例  
 次の例では両方とも、 <xref:System.Windows.Media.Animation.ClockController.Seek%2A> と <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> のメソッド、 <xref:System.Windows.Media.Animation.ClockController>です。  
  
 [!code-csharp[ClockController\_procedural\_snip\#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController\_procedural\_snip\#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ターゲット <see cref="T:System.Windows.Media.Animation.Clock" /> の現在の時間をそのアクティブ期間の最後まで進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドに進めます対象のクロックの現在のアクティブな期間の終了時刻この時点で、クロックの動作がで指定された、 <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> の設定、 <xref:System.Windows.Media.Animation.Timeline>です。 場合、タイムラインの <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> にプロパティが設定されている <xref:System.Windows.Media.Animation.FillBehavior.HoldEnd>, 、時計を塗りつぶします;、プロパティが設定されている場合 <xref:System.Windows.Media.Animation.FillBehavior.Stop>, 、クロックが停止します。  
  
 このメソッドの場合のみ有効対象のクロックの <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> は <xref:System.Windows.Media.Animation.ClockState.Active>です。  
  
 このメソッドには、次のチェック マークが処理されるまで、タイミング ツリーに影響がありません。 副次効果と適切なイベントもは発生しませんそれまでです。  
  
 塗りつぶしに期間のトリガーにストーリー ボードが始まり、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> と <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> イベントです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeedRatio">
      <MemberSignature Language="C#" Value="public double SpeedRatio { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 SpeedRatio" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.SpeedRatio" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>対象の <see cref="T:System.Windows.Media.Animation.Clock" /> の対話速度を取得または設定します。</summary>
        <value>対象のクロックの対話速度を記述するゼロより大きい有限値。 この値は、クロックの <see cref="T:System.Windows.Media.Animation.Timeline" /> の <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> の値に対して乗算されます。 たとえば、タイムラインの <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> が 0.5 で、<see cref="T:System.Windows.Media.Animation.ClockController" /> オブジェクトの <see cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" /> が 3.0 の場合、タイムラインは通常速度の 1.5 倍 \(0.5 \* 3.0\) で移動します。 既定値は 1.0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定しても次の目盛りまでは影響しません。 このプロパティを設定する前にその値を取得した場合は、古い値を取得します次のタイマー刻みが発生します。 このプロパティは、次のタイマー刻みの後に新しい値に戻ります。  
  
 このプロパティの設定は、基になるタイムラインの値を変更しない <xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>します。  
  
 対象のクロックのこのプロパティを設定するトリガー <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated> イベントです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ターゲットの <see cref="T:System.Windows.Media.Animation.Clock" /> を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは変更対象のクロックの <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> に <xref:System.Windows.Media.Animation.Clock.Stopped%2A>します。  
  
 A <xref:System.Windows.Media.Animation.Clock.Stopped%2A> を使用して、クロックを再起動することができます、 <xref:System.Windows.Media.Animation.ClockController.Begin%2A>, 、<xref:System.Windows.Media.Animation.ClockController.Seek%2A>, 、または <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> メソッドです。  
  
 このメソッドには、次のチェック マークが処理されるまで、タイミング ツリーに影響がありません。 副次効果と適切なイベントもは発生しませんそれまでです。  
  
 クロックを停止する、 <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> と <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> イベント、ではなく、 <xref:System.Windows.Media.Animation.Clock.Completed> イベントです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>