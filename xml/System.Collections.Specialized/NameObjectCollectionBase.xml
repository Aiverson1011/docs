<Type Name="NameObjectCollectionBase" FullName="System.Collections.Specialized.NameObjectCollectionBase">
  <TypeSignature Language="C#" Value="public abstract class NameObjectCollectionBase : System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit NameObjectCollectionBase extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Specialized.NameObjectCollectionBase" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Specialized</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <see cref="T:System.String" /> キーと、キーまたはインデックスを使用してアクセスできる <see cref="T:System.Object" /> 値が関連付けられたコレクションの <see langword="abstract" /> 基本クラスを指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスの基になる構造体は、ハッシュ テーブルです。  
  
 各要素は、キー\/値ペアです。  
  
 容量、 <xref:System.Collections.Specialized.NameObjectCollectionBase> 要素の数が、 <xref:System.Collections.Specialized.NameObjectCollectionBase> を保持できます。 要素が追加されると、 <xref:System.Collections.Specialized.NameObjectCollectionBase>, 、容量が増加すると自動的に再割り当て、必要に応じて。  
  
 ハッシュ コード プロバイダーのキーのハッシュ コードを省き、 <xref:System.Collections.Specialized.NameObjectCollectionBase> インスタンス。 既定のハッシュ コード プロバイダーは、 <xref:System.Collections.CaseInsensitiveHashCodeProvider>です。  
  
 比較演算子は、2 つのキーが等しいかどうかを決定します。 既定の比較子は、 <xref:System.Collections.CaseInsensitiveComparer>です。  
  
 .NET framework version 1.0 では、このクラスは、カルチャに依存した文字列比較を使用します。 ただし、.NET framework version 1.1 以降では、このクラスを使用して <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> 文字列を比較するときにします。 比較と並べ替えのカルチャのしくみの詳細については、次を参照してください。 [Performing Culture\-Insensitive String Operations](http://msdn.microsoft.com/ja-jp/579ef891-1f83-4c63-9ebd-2f40406b5b91)します。  
  
 `null` キーまたは値を許可します。  
  
> [!CAUTION]
>  <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGet%2A> メソッドを区別しません `null` 指定したキーが見つからないためどちらが返されると `null` キーに関連付けられている値が返される `null`です。  
  
   
  
## 例  
 次のコード例は、実装して使用する方法を示しています、 <xref:System.Collections.Specialized.NameObjectCollectionBase> クラスです。  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase/CPP/nameobjectcollectionbase.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase/CS/nameobjectcollectionbase.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase/VB/nameobjectcollectionbase.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>パブリック静的 \(<see langword="Shared" /> Visual Basic では\) この型のメンバーは、スレッド セーフであります。 インスタンス メンバーの場合は、スレッド セーフであるとは限りません。  
  
 この実装は同期済み達しませんの \(スレッド セーフな\) ラッパー、 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />, 、派生クラスは、独自の同期バージョンを作成できますが、 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> を使用して、 <see cref="P:System.Collections.ICollection.SyncRoot" /> プロパティです。  
  
 コレクションの列挙は本質的にスレッド セーフな方法です。 コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。 列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。</threadsafe>
    <altmember cref="T:System.Collections.Hashtable" />
    <altmember cref="T:System.Collections.Specialized.NameValueCollection" />
    <altmember cref="T:System.String" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NameObjectCollectionBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> クラスの新しい空のインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 容量、 <xref:System.Collections.Specialized.NameObjectCollectionBase> は要素の数を <xref:System.Collections.Specialized.NameObjectCollectionBase> を保持できます。 要素が追加されると、 <xref:System.Collections.Specialized.NameObjectCollectionBase>, 、容量が増加すると自動的に内部の配列を再割り当てすることで必要とします。  
  
 初期量を指定する、さまざまな要素を追加するときにサイズ変更操作を実行する必要があるコレクションのサイズを推定できる場合、 <xref:System.Collections.Specialized.NameObjectCollectionBase>です。  
  
 ハッシュ コード プロバイダーのキーのハッシュ コードを省き、 <xref:System.Collections.Specialized.NameObjectCollectionBase> インスタンス。 既定のハッシュ コード プロバイダーは、 <xref:System.Collections.CaseInsensitiveHashCodeProvider>です。  
  
 比較演算子は、2 つのキーが等しいかどうかを決定します。 既定の比較子は、 <xref:System.Collections.CaseInsensitiveComparer>です。  
  
 このコンス トラクターは、o \(1\) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
        <altmember cref="T:System.Collections.CaseInsensitiveComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NameObjectCollectionBase (System.Collections.IEqualityComparer equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.IEqualityComparer equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IEqualityComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="equalityComparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="equalityComparer">2 つのキーが等しいかどうかを判断し、コレクション内のキーのハッシュ コードを生成するために使用する <see cref="T:System.Collections.IEqualityComparer" /> オブジェクト。</param>
        <summary>空で、既定の初期量を備え、指定した <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトを使用する、<see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 容量、 <xref:System.Collections.Specialized.NameObjectCollectionBase> オブジェクトは、要素の数を <xref:System.Collections.Specialized.NameObjectCollectionBase> を保持できます。 要素が追加されると、 <xref:System.Collections.Specialized.NameObjectCollectionBase>, 、容量が増加すると自動的に内部の配列を再割り当てすることで必要とします。  
  
 初期量を指定する、さまざまな要素を追加するときにサイズ変更操作を実行する必要があるコレクションのサイズを推定できる場合、 <xref:System.Collections.Specialized.NameObjectCollectionBase>です。  
  
 <xref:System.Collections.IEqualityComparer> オブジェクトは、比較演算子と、ハッシュ コード プロバイダーを結合します。  ハッシュ コード プロバイダーのキーのハッシュ コードを省き、 <xref:System.Collections.Specialized.NameObjectCollectionBase>です。  比較演算子は、2 つのキーが等しいかどうかを決定します。  
  
 このコンス トラクターは、o \(1\) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NameObjectCollectionBase (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスが初期状態で格納できるエントリの概数。</param>
        <summary>空で、指定した初期量を備え、既定のハッシュ コード プロバイダーと既定の比較子を使用する、<see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 容量、 <xref:System.Collections.Specialized.NameObjectCollectionBase> は要素の数を <xref:System.Collections.Specialized.NameObjectCollectionBase> を保持できます。 要素が追加されると、 <xref:System.Collections.Specialized.NameObjectCollectionBase>, 、容量が増加すると自動的に内部の配列を再割り当てすることで必要とします。  
  
 初期量を指定する、さまざまな要素を追加するときにサイズ変更操作を実行する必要があるコレクションのサイズを推定できる場合、 <xref:System.Collections.Specialized.NameObjectCollectionBase>です。  
  
 ハッシュ コード プロバイダーのキーのハッシュ コードを省き、 <xref:System.Collections.Specialized.NameObjectCollectionBase> インスタンス。 既定のハッシュ コード プロバイダーは、 <xref:System.Collections.CaseInsensitiveHashCodeProvider>です。  
  
 比較演算子は、2 つのキーが等しいかどうかを決定します。 既定の比較子は、 <xref:System.Collections.CaseInsensitiveComparer>です。  
  
 このコンス トラクターは、O \(`n`\) 操作の場合、 `n` は `capacity`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> が 0 未満です。</exception>
        <altmember cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
        <altmember cref="T:System.Collections.CaseInsensitiveComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NameObjectCollectionBase (System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.IHashCodeProvider hashProvider, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Please use NameObjectCollectionBase(IEqualityComparer) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="hashProvider" Type="System.Collections.IHashCodeProvider" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="hashProvider">
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンス内のすべてのキーのハッシュ コードを提供する <see cref="T:System.Collections.IHashCodeProvider" />。</param>
        <param name="comparer">2 つのキーが等しいかどうかを判断するために使用する <see cref="T:System.Collections.IComparer" />。</param>
        <summary>空で、既定の初期量を備え、指定したハッシュ コード プロバイダーと指定した比較子を使用する、<see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 容量、 <xref:System.Collections.Specialized.NameObjectCollectionBase> は要素の数を <xref:System.Collections.Specialized.NameObjectCollectionBase> を保持できます。 要素が追加されると、 <xref:System.Collections.Specialized.NameObjectCollectionBase>, 、容量が増加すると自動的に内部の配列を再割り当てすることで必要とします。  
  
 初期量を指定する、さまざまな要素を追加するときにサイズ変更操作を実行する必要があるコレクションのサイズを推定できる場合、 <xref:System.Collections.Specialized.NameObjectCollectionBase>です。  
  
 ハッシュ コード プロバイダーのキーのハッシュ コードを省き、 <xref:System.Collections.Specialized.NameObjectCollectionBase> インスタンス。 既定のハッシュ コード プロバイダーは、 <xref:System.Collections.CaseInsensitiveHashCodeProvider>です。  
  
 比較演算子は、2 つのキーが等しいかどうかを決定します。 既定の比較子は、 <xref:System.Collections.CaseInsensitiveComparer>です。  
  
 このコンス トラクターは、o \(1\) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IHashCodeProvider" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
        <altmember cref="T:System.Collections.CaseInsensitiveComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NameObjectCollectionBase (int capacity, System.Collections.IEqualityComparer equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 capacity, class System.Collections.IEqualityComparer equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IEqualityComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> オブジェクトが初期状態で格納できるエントリの概数。</param>
        <param name="equalityComparer">2 つのキーが等しいかどうかを判断し、コレクション内のキーのハッシュ コードを生成するために使用する <see cref="T:System.Collections.IEqualityComparer" /> オブジェクト。</param>
        <summary>空で、指定した初期量を備え、指定した <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトを使用する、<see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 容量、 <xref:System.Collections.Specialized.NameObjectCollectionBase> オブジェクトは、要素の数を <xref:System.Collections.Specialized.NameObjectCollectionBase> を保持できます。 要素が追加されると、 <xref:System.Collections.Specialized.NameObjectCollectionBase>, 、容量が増加すると自動的に内部の配列を再割り当てすることで必要とします。  
  
 初期量を指定する、さまざまな要素を追加するときにサイズ変更操作を実行する必要があるコレクションのサイズを推定できる場合、 <xref:System.Collections.Specialized.NameObjectCollectionBase>です。  
  
 <xref:System.Collections.IEqualityComparer> オブジェクトは、比較演算子と、ハッシュ コード プロバイダーを結合します。  ハッシュ コード プロバイダーのキーのハッシュ コードを省き、 <xref:System.Collections.Specialized.NameObjectCollectionBase>です。  比較演算子は、2 つのキーが等しいかどうかを決定します。  
  
 このコンス トラクターは、O \(`n`\) 操作の場合、 `n` は、 `capacity` パラメーター。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> が 0 未満です。</exception>
        <altmember cref="T:System.Collections.IEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NameObjectCollectionBase (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">新しい <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
        <param name="context">新しい <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
        <summary>シリアル化でき、指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> と <see cref="T:System.Runtime.Serialization.StreamingContext" /> を使用する、<see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、o \(1\) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NameObjectCollectionBase (int capacity, System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 capacity, class System.Collections.IHashCodeProvider hashProvider, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Please use NameObjectCollectionBase(Int32, IEqualityComparer) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="hashProvider" Type="System.Collections.IHashCodeProvider" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスが初期状態で格納できるエントリの概数。</param>
        <param name="hashProvider">
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンス内のすべてのキーのハッシュ コードを提供する <see cref="T:System.Collections.IHashCodeProvider" />。</param>
        <param name="comparer">2 つのキーが等しいかどうかを判断するために使用する <see cref="T:System.Collections.IComparer" />。</param>
        <summary>空で、指定した初期量を備え、指定したハッシュ コード プロバイダーと指定した比較子を使用する、<see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 容量、 <xref:System.Collections.Specialized.NameObjectCollectionBase> は要素の数を <xref:System.Collections.Specialized.NameObjectCollectionBase> を保持できます。 要素が追加されると、 <xref:System.Collections.Specialized.NameObjectCollectionBase>, 、容量が増加すると自動的に内部の配列を再割り当てすることで必要とします。  
  
 初期量を指定する、さまざまな要素を追加するときにサイズ変更操作を実行する必要があるコレクションのサイズを推定できる場合、 <xref:System.Collections.Specialized.NameObjectCollectionBase>です。  
  
 ハッシュ コード プロバイダーのキーのハッシュ コードを省き、 <xref:System.Collections.Specialized.NameObjectCollectionBase> インスタンス。 既定のハッシュ コード プロバイダーは、 <xref:System.Collections.CaseInsensitiveHashCodeProvider>です。  
  
 比較演算子は、2 つのキーが等しいかどうかを決定します。 既定の比較子は、 <xref:System.Collections.CaseInsensitiveComparer>です。  
  
 このコンス トラクターは、O \(`n`\) 操作の場合、 `n` は `capacity`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> が 0 未満です。</exception>
        <altmember cref="T:System.Collections.IHashCodeProvider" />
        <altmember cref="T:System.Collections.CaseInsensitiveHashCodeProvider" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.Collections.CaseInsensitiveComparer" />
      </Docs>
    </Member>
    <Member MemberName="BaseAdd">
      <MemberSignature Language="C#" Value="protected void BaseAdd (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void BaseAdd(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">追加するエントリの <see cref="T:System.String" /> キー。 キーとして <see langword="null" /> を指定できます。</param>
        <param name="value">追加するエントリの <see cref="T:System.Object" /> 値。 値として <see langword="null" /> を指定できます。</param>
        <summary>指定したキーと値を持つエントリを <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A> 容量の容量と既に同じ、 <xref:System.Collections.Specialized.NameObjectCollectionBase> が増加すると、内部の配列を自動的に再割り当てによって、新しい要素が追加される前に、新しい配列に既存の要素がコピーされるとします。  
  
 場合 <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A> が小さい、容量よりも、このメソッドは、o \(1\) 操作になります。 容量は、新しい要素を格納するためにする必要がある、このメソッドが O \(`n`\) 操作、 `n` は <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>です。  
  
   
  
## 例  
 次のコード例では <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseAdd%2A> を新規に作成 <xref:System.Collections.Specialized.NameObjectCollectionBase> から要素を持つ、 <xref:System.Collections.IDictionary>です。  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseAdd\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseAdd/CPP/nocb_baseadd.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.BaseAdd\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseAdd/CS/nocb_baseadd.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseAdd\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseAdd/VB/nocb_baseadd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseClear">
      <MemberSignature Language="C#" Value="protected void BaseClear ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void BaseClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.BaseClear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスからすべてのエントリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  
  
 This method is an O\(1\) operation.  
  
   
  
## 例  
 The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseClear%2A> to remove all elements from a <xref:System.Collections.Specialized.NameObjectCollectionBase>.  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseClear\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseClear/CPP/nocb_baseclear.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.BaseClear\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseClear/CS/nocb_baseclear.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseClear\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseClear/VB/nocb_baseclear.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseGet">
      <MemberSignature Language="C#" Value="protected object BaseGet (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object BaseGet(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">取得する値の 0 から始まるインデックス。</param>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスの指定したインデックスにあるエントリの値を取得します。</summary>
        <returns>指定したインデックスにあるエントリの値を表す <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、o \(1\) 操作です。  
  
   
  
## 例  
 次のコード例では <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey%2A> と <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGet%2A> を特定のキーと値を取得します。  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGet\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGet/CPP/nocb_baseget.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.BaseGet\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGet/CS/nocb_baseget.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGet\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGet/VB/nocb_baseget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、コレクションのインデックスの正しい範囲から外れています。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseGet">
      <MemberSignature Language="C#" Value="protected object BaseGet (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object BaseGet(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">取得するエントリの <see cref="T:System.String" /> キー。 キーとして <see langword="null" /> を指定できます。</param>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスから、指定したキーを持つ最初のエントリの値を取得します。</summary>
        <returns>指定したキーを持つエントリが存在する場合は、その最初のエントリの値を表す <see cref="T:System.Object" />。それ以外の場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the collection contains multiple entries with the specified key, this method returns only the first entry. To get the values of subsequent entries with the same key, use the enumerator to iterate through the collection and compare the keys.  
  
> [!CAUTION]
>  This method returns **languageKeyword tag is not supported!!!!**  
>  in the following cases: 1\) if the specified key is not found; and 2\) if the specified key is found and its associated value is **languageKeyword tag is not supported!!!!**  
> . This method does not distinguish between the two cases.  
  
 This method is an O\(1\) operation.  
  
   
  
## 例  
 The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey%2A> and <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGet%2A> to get specific keys and values.  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGet\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGet/CPP/nocb_baseget.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.BaseGet\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGet/CS/nocb_baseget.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGet\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGet/VB/nocb_baseget.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="BaseGetAllKeys">
      <MemberSignature Language="C#" Value="protected string[] BaseGetAllKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string[] BaseGetAllKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンス内のすべてのキーを格納する <see cref="T:System.String" /> 配列を返します。</summary>
        <returns>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンス内のすべてのキーを格納する <see cref="T:System.String" /> 配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>です。  
  
   
  
## 例  
 次のコード例では <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys%2A> と <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues%2A> 、キーの配列または値の配列を取得します。  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGetAll/CPP/nocb_basegetall.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGetAll/CS/nocb_basegetall.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGetAll/VB/nocb_basegetall.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseGetAllValues">
      <MemberSignature Language="C#" Value="protected object[] BaseGetAllValues ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] BaseGetAllValues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンス内のすべての値を格納する <see cref="T:System.Object" /> 配列を返します。</summary>
        <returns>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンス内のすべての値を格納する <see cref="T:System.Object" /> 配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>です。  
  
   
  
## 例  
 次のコード例では <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys%2A> と <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues%2A> 、キーの配列または値の配列を取得します。  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGetAll/CPP/nocb_basegetall.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGetAll/CS/nocb_basegetall.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGetAll/VB/nocb_basegetall.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseGetAllValues">
      <MemberSignature Language="C#" Value="protected object[] BaseGetAllValues (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] BaseGetAllValues(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">返される配列の型を表す <see cref="T:System.Type" />。</param>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンス内のすべての値を格納する、指定した型の配列を返します。</summary>
        <returns>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンス内のすべての値を格納する、指定した型の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" /> 無効な <see cref="T:System.Type" />です。</exception>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="BaseGetKey">
      <MemberSignature Language="C#" Value="protected string BaseGetKey (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string BaseGetKey(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">取得するキーの 0 から始まるインデックス。</param>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスの指定したインデックスにあるエントリのキーを取得します。</summary>
        <returns>指定したインデックスにあるエントリのキーを表す <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is an O\(1\) operation.  
  
   
  
## 例  
 The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey%2A> and <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGet%2A> to get specific keys and values.  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGet\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGet/CPP/nocb_baseget.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.BaseGet\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGet/CS/nocb_baseget.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGet\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseGet/VB/nocb_baseget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、コレクションのインデックスの正しい範囲から外れています。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseHasKeys">
      <MemberSignature Language="C#" Value="protected bool BaseHasKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool BaseHasKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスが、キーが <see langword="null" /> ではないエントリを格納しているかどうかを示す値を取得します。</summary>
        <returns>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスが、キーが <see langword="null" /> ではないエントリを格納している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、o \(1\) 操作です。  
  
   
  
## 例  
 次のコード例では <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys%2A> されているキーがコレクションに含まれるかどうかを判断する `null`です。  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys/CPP/nocb_basehaskeys.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys/CS/nocb_basehaskeys.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys/VB/nocb_basehaskeys.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseRemove">
      <MemberSignature Language="C#" Value="protected void BaseRemove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void BaseRemove(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">削除するエントリの <see cref="T:System.String" /> キー。 キーとして <see langword="null" /> を指定できます。</param>
        <summary>指定したキーを持つエントリを <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Collections.Specialized.NameObjectCollectionBase> 指定のキーを持つ要素が含まれていない、 <xref:System.Collections.Specialized.NameObjectCollectionBase> は変更されません。 例外をスローすることはありません。  
  
 リストなどの連続する要素のコレクションでは、空白になった位置を埋めるために、削除された要素の後にある要素の位置が繰り上げられます。 コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。 この動作は、要素が概念的にバケットにグループ化されているハッシュ テーブルなどのコレクションには適用されません。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>です。  
  
   
  
## 例  
 次のコード例では <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseRemove%2A> と <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt%2A> 要素を削除する、 <xref:System.Collections.Specialized.NameObjectCollectionBase>です。  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseRemove/CPP/nocb_baseremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseRemove/CS/nocb_baseremove.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseRemove/VB/nocb_baseremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseRemoveAt">
      <MemberSignature Language="C#" Value="protected void BaseRemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void BaseRemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">削除するエントリの 0 から始まるインデックス。</param>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスの指定したインデックスにあるエントリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リストなどの連続する要素のコレクションでは、空白になった位置を埋めるために、削除された要素の後にある要素の位置が繰り上げられます。 コレクションにインデックスがある場合、移動した要素のインデックスも更新されます。 この動作は、要素が概念的にバケットにグループ化されているハッシュ テーブルなどのコレクションには適用されません。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>です。  
  
   
  
## 例  
 次のコード例では <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseRemove%2A> と <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt%2A> 要素を削除する、 <xref:System.Collections.Specialized.NameObjectCollectionBase>です。  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseRemove/CPP/nocb_baseremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseRemove/CS/nocb_baseremove.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseRemove/VB/nocb_baseremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、コレクションのインデックスの正しい範囲から外れています。</exception>
        <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseSet">
      <MemberSignature Language="C#" Value="protected void BaseSet (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void BaseSet(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">設定するエントリの 0 から始まるインデックス。</param>
        <param name="value">設定するエントリの新しい値を表す <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスの指定したインデックスにあるエントリの値を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is an O\(1\) operation.  
  
   
  
## 例  
 The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseSet%2A> to set the value of a specific element.  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseSet\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseSet/CPP/nocb_baseset.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.BaseSet\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseSet/CS/nocb_baseset.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseSet\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseSet/VB/nocb_baseset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が、コレクションのインデックスの正しい範囲から外れています。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseSet">
      <MemberSignature Language="C#" Value="protected void BaseSet (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void BaseSet(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">設定するエントリの <see cref="T:System.String" /> キー。 キーとして <see langword="null" /> を指定できます。</param>
        <param name="value">設定するエントリの新しい値を表す <see cref="T:System.Object" />。 値として <see langword="null" /> を指定できます。</param>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンス内に指定したキーを持つエントリが存在する場合は、その最初のエントリの値を設定します。存在しない場合は、指定したキーと値を持つエントリを <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コレクションには、指定のキーを持つ複数のエントリが含まれる、このメソッドは、最初のエントリのみを設定します。 同じキーを持つ後続エントリの値を設定するには、コレクションを反復処理し、キーの比較、列挙子を使用します。  
  
 このメソッドは、o \(1\) 操作です。  
  
   
  
## 例  
 次のコード例では <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseSet%2A> の特定の要素の値を設定します。  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseSet\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseSet/CPP/nocb_baseset.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.BaseSet\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseSet/CS/nocb_baseset.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseSet\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.BaseSet/VB/nocb_baseset.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
        <altmember cref="M:System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.NameObjectCollectionBase.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスに格納されているキーと値のペアの数を取得します。</summary>
        <value>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスに格納されているキーと値のペアの数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The capacity is the number of elements that the <xref:System.Collections.Specialized.NameObjectCollectionBase> can store. <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Specialized.NameObjectCollectionBase>.  
  
 The capacity is always greater than or equal to <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>. If <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  
  
 Retrieving the value of this property is an O\(1\) operation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> を反復処理する列挙子を返します。</summary>
        <returns>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスの <see cref="T:System.Collections.IEnumerator" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この列挙子は、文字列としてコレクションのキーを返します。  
  
 C\# 言語の `foreach` ステートメント \(Visual Basic の場合は `for each`\) を使用することで列挙子の複雑さを回避できます。  したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。  
  
 列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。<xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。  この位置では、<xref:System.Collections.IEnumerator.Current%2A> が未定義です。 そのため、<xref:System.Collections.IEnumerator.MoveNext%2A> の値を読み取る前に、<xref:System.Collections.IEnumerator.Current%2A> を呼び出して列挙子をコレクションの最初の要素に進める必要があります。  
  
 <xref:System.Collections.IEnumerator.Current%2A> は、<xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されるまでは同じオブジェクトを返します。<xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。  
  
 場合 <xref:System.Collections.IEnumerator.MoveNext%2A> コレクション、列挙子の末尾が、コレクション内の最後の要素の後に配置されているパスと <xref:System.Collections.IEnumerator.MoveNext%2A> 返します `false`します。 列挙子があるときはこの位置にある場合、それ以降の呼び出しは、 <xref:System.Collections.IEnumerator.MoveNext%2A> を返すことも `false`です。 最後の呼び出しの場合 <xref:System.Collections.IEnumerator.MoveNext%2A> 返される `false`, 、<xref:System.Collections.IEnumerator.Current%2A> は定義されていません。<xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。  
  
 コレクションが変更されない限り、列挙子は有効です。 コレクションに対して変更 \(要素の追加、変更、削除など\) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。  
  
 列挙子には、コレクションへの排他アクセスがありません。したがって、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。  列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 このメソッドは、o \(1\) 操作です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> オブジェクト。</param>
        <param name="context">
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
        <summary>
          <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスをシリアル化するために必要なデータを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration:   <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /> Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="protected bool IsReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスが読み取り専用かどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。  
  
 読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
   
  
## 例  
 次のコード例では、読み取り専用コレクションを作成します。  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.IsReadOnly/CPP/nocb_isreadonly.cpp#1)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.IsReadOnly/CS/nocb_isreadonly.cs#1)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase.IsReadOnly/VB/nocb_isreadonly.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameObjectCollectionBase/KeysCollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.NameObjectCollectionBase.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンス内のすべてのキーを格納する <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> インスタンスを取得します。</summary>
        <value>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンス内のすべてのキーを格納する <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> インスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeserialization">
      <MemberSignature Language="C#" Value="public virtual void OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">逆シリアル化イベントのソース。</param>
        <summary>
          <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 中に、 <xref:System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization%2A> メソッドは、既定では、COM クライアントから参照することはありませんを継承する、 <xref:System.Collections.Specialized.NameObjectCollectionBase> クラスが公開することし、COM クライアントの望ましくない動作が発生することができます。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに現在関連付けられている <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスが無効です。</exception>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="M:System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />。<see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <param name="index">コピーの開始位置とする <c>array</c> のインデックス \(0 から始まる\)。</param>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 全体を、互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まる部分に行います。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定された配列は、互換性のある型でなければなりません。  
  
 このメソッドを使用して <xref:System.Array.Copy%2A?displayProperty=fullName> 、要素をコピーします。  
  
 中に、 <xref:System.Collections.Specialized.NameObjectCollectionBase.System%23Collections%23ICollection%23CopyTo%2A> メソッドは、既定では、COM クライアントから参照することはありませんを継承する、 <xref:System.Collections.Specialized.NameObjectCollectionBase> クラスが公開することし、COM クライアントの望ましくない動作が発生することができます。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> が多次元です。  
  
 または  
  
 ソース内の要素の数 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> から使用可能な領域よりも大きい <paramref name="index" /> 変換先の末尾に <paramref name="array" />します。</exception>
        <exception cref="T:System.InvalidCastException">ソースの種類 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 先の型に自動的にキャストできない <paramref name="array" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> オブジェクトへのアクセスが同期されている \(スレッド セーフである\) かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> オブジェクトへのアクセスが同期されている \(スレッド セーフである\) 場合は <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Collections.Specialized.NameObjectCollectionBase> オブジェクトが同期されていません。 派生クラスでの同期されたバージョンを提供できる、 <xref:System.Collections.Specialized.NameObjectCollectionBase> を使用して、 <xref:System.Collections.ICollection.SyncRoot%2A> プロパティです。  
  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。 コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。 列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。  
  
 次のコード例を使用してコレクションをロックする方法を示しています、 <xref:System.Collections.ICollection.SyncRoot%2A> 列挙中にプロパティです。  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase/CPP/remarks.cpp#2)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase/CS/remarks.cs#2)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase/VB/remarks.vb#2)]  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> オブジェクトへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
        <value>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> オブジェクトへのアクセスを同期するために使用できるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生クラスが、独自の同期のバージョンを提供、 <xref:System.Collections.Specialized.NameObjectCollectionBase> クラスを使用して、 <xref:System.Collections.ICollection.SyncRoot%2A> プロパティです。 同期されたコードに対して操作を実行、 <xref:System.Collections.ICollection.SyncRoot%2A> のプロパティ、 <xref:System.Collections.Specialized.NameObjectCollectionBase> オブジェクト上で直接、 <xref:System.Collections.Specialized.NameObjectCollectionBase> オブジェクトです。 これにより、他のオブジェクトから派生したコレクションを適切に操作できるようになります。 具体的には、同時に変更する可能性があるその他のスレッドと、正常な同期を維持、 <xref:System.Collections.Specialized.NameObjectCollectionBase> オブジェクトです。  
  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。 コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。 列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。  
  
 次のコード例を使用してコレクションをロックする方法を示しています、 <xref:System.Collections.ICollection.SyncRoot%2A> 列挙中にします。  
  
 [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase\#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase/CPP/remarks.cpp#2)]
 [!code-csharp[System.Collections.Specialized.NameObjectCollectionBase\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase/CS/remarks.cs#2)]
 [!code-vb[System.Collections.Specialized.NameObjectCollectionBase\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.NameObjectCollectionBase/VB/remarks.vb#2)]  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BaseSet">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンス内のエントリの値を設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BaseGetAllValues">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンス内のすべての値を格納する配列を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BaseGet">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> インスタンスから、指定したエントリの値を取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>