<Type Name="KeyBinding" FullName="System.Windows.Input.KeyBinding">
  <TypeSignature Language="C#" Value="public class KeyBinding : System.Windows.Input.InputBinding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyBinding extends System.Windows.Input.InputBinding" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyBinding" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputBinding</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>バインド、 <see cref="T:System.Windows.Input.KeyGesture" /> に、 <see cref="T:System.Windows.Input.RoutedCommand" /> \(またはその他  <see cref="T:System.Windows.Input.ICommand" /> 実装\)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Input.KeyBinding> 関連付けます、 <xref:System.Windows.Input.KeyGesture> で、 <xref:System.Windows.Input.ICommand>, など、 <xref:System.Windows.Input.RoutedCommand>です。<xref:System.Windows.Input.RoutedCommand> プライマリの実装、 <xref:System.Windows.Input.ICommand> のためのインターフェイス、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] システムのコマンドを実行します。  通常、 <xref:System.Windows.Input.KeyGesture> が実行されるコマンドの動作はさらに影響を受けるコマンド固有の要素などが、コマンドが呼び出された、 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 値。  コマンド実行の詳細については、次を参照してください。、 [コマンドの実行の概要](http://msdn.microsoft.com/ja-jp/bc208dfe-367d-426a-99de-52b7e7511e81)します。  
  
 ファンクション キーと、有効な数値キーパッド キーを除いて <xref:System.Windows.Input.KeyGesture> を 1 つだけ含める必要があります <xref:System.Windows.Input.Key> と 1 つ以上 <xref:System.Windows.Input.ModifierKeys>します。  ファンクション キーとテンキーのキーは必要とせずに修飾子キーは有効な <xref:System.Windows.Input.KeyGesture>です。 無効なを指定することは <xref:System.Windows.Input.KeyGesture> と <xref:System.Windows.Input.KeyBinding> 関連付けジェスチャを使用するか、無効な [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] またはコード。 インスタンスを作成してバインドしないように検証は行われません、 <xref:System.Windows.Input.KeyGesture> を含む以外キーのみまたはのみ修飾子が、キーがありません。 このような <xref:System.Windows.Input.KeyBinding> 、関連付けられているコマンドを呼び出すことはありませんを試みます。  
  
 定義するときに、 <xref:System.Windows.Input.KeyBinding> で [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] を指定する 2 つの方法がある、 <xref:System.Windows.Input.KeyGesture>です。 最初の方法を確立するために、 <xref:System.Windows.Input.KeyBinding> で [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] を定義するのには、 <xref:System.Windows.Input.KeyBinding.Gesture%2A> の属性、 <xref:System.Windows.Input.KeyBinding> 要素は、たとえば"ctrl キーを押しながら P"の 1 つの文字列としてキーと修飾子を指定する構文を使用します。 2 番目の方法は、定義する、 <xref:System.Windows.Input.KeyBinding.Key%2A> 属性および <xref:System.Windows.Input.KeyBinding.Modifiers%2A> の属性、 <xref:System.Windows.Input.KeyBinding> 要素。 設定のどちらの方法、 <xref:System.Windows.Input.KeyGesture> は同等ですし、同一の基になるオブジェクトの変更がある場合は、両方の競合を使用します。  場合と、 <xref:System.Windows.Input.KeyBinding.Key%2A>, 、<xref:System.Windows.Input.KeyBinding.Modifiers%2A>, 、および <xref:System.Windows.Input.KeyBinding.Gesture%2A> 属性は、すべての設定は定義されている属性最後は使用する、 <xref:System.Windows.Input.KeyGesture>です。 たとえば、状況を持つことがあります、 <xref:System.Windows.Input.KeyBinding.Key%2A> セット最後は上書きしますジェスチャを上記のキー コンポーネントだけが、同じジェスチャの修飾子のままにします。 一般に、お勧めのみに使用する、 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 属性 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; このあいまいさを避ける、最も簡潔な構文を提供およびシリアル化の最も簡単な表現を提供します。  
  
 A <xref:System.Windows.Input.KeyBinding> 登録することによって、特定のオブジェクトまたはクラス レベルで定義できます、 <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> 上、 <xref:System.Windows.Input.CommandManager> クラスです。 定義する最も一般的な方法、 <xref:System.Windows.Input.KeyBinding> 設定、コントロール テンプレート内では、 <xref:System.Windows.UIElement.InputBindings%2A> プロパティ [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 1 つまたは複数を宣言することで <xref:System.Windows.Input.MouseBinding> または <xref:System.Windows.Input.KeyBinding> 要素。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Windows.Input.KeyBinding> に追加し、 <xref:System.Windows.Input.InputBindingCollection> ルート ウィンドウのです。  
  
 [!code-xml[commandWithHandler\#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 [!code-csharp[CommandHandlerProcedural\#CommandHandlerKeyBindingCodeBehind](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerkeybindingcodebehind)]
 [!code-vb[CommandHandlerProcedural\#CommandHandlerKeyBindingCodeBehind](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerkeybindingcodebehind)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
    <altmember cref="T:System.Windows.Input.InputGesture" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Input.KeyBinding" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.KeyGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.KeyGesture" />
      </Parameters>
      <Docs>
        <param name="command">関連付けるコマンド <c>gesture</c>します。</param>
        <param name="gesture">キーの組み合わせに関連付ける <c>command</c>します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Input.KeyBinding" /> クラスの指定して <see cref="T:System.Windows.Input.ICommand" /> と <see cref="T:System.Windows.Input.KeyGesture" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="command" /> または <paramref name="gesture" /> が <see langword="null" /> です。</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="command">起動するコマンドです。</param>
        <param name="key">関連付けられるキー <c>command</c>します。</param>
        <param name="modifiers">関連付けられる修飾子 <c>command</c>します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Input.KeyBinding" /> クラスの指定して <see cref="T:System.Windows.Input.ICommand" /> と、指定した <see cref="T:System.Windows.Input.Key" /> と <see cref="T:System.Windows.Input.ModifierKeys" /> に変換される、 <see cref="T:System.Windows.Input.KeyGesture" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.CreateInstanceCore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>インスタンスを作成、 <see cref="T:System.Windows.Input.KeyBinding" />です。</summary>
        <returns>新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public override System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyBinding.Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に関連付けられたジェスチャ <see cref="T:System.Windows.Input.KeyBinding" />します。</summary>
        <value>キーのシーケンス。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ファンクション キーと、テンキーを除いて、 <xref:System.Windows.Input.KeyGesture> 含める必要があります、 <xref:System.Windows.Input.Key> と 1 つ以上 <xref:System.Windows.Input.ModifierKeys>します。  
  
   
  
## 例  
 次の例では、バインドする方法、 <xref:System.Windows.Input.KeyGesture> に、 <xref:System.Windows.Input.RoutedCommand> を使用して、 <xref:System.Windows.Input.KeyBinding> \(マークアップとコード例は、異なるキーを指定するがそれ以外の場合と同じ\)。  
  
 [!code-xml[commandWithHandler\#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 [!code-csharp[commandlibrarysnippets\#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets\#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">値 <paramref name="gesture" /> に設定されているが、 <see cref="T:System.Windows.Input.KeyGesture" />です。</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyBinding.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Windows.Input.Key" /> の <see cref="T:System.Windows.Input.KeyGesture" /> に関連付けられた <see cref="T:System.Windows.Input.KeyBinding" />します。</summary>
        <value>重要な部分、 <see cref="T:System.Windows.Input.KeyGesture" />です。 既定値は <see cref="F:System.Windows.Input.Key.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ファンクション キーと、テンキーを除いて、 <xref:System.Windows.Input.KeyGesture> 含める必要があります、 <xref:System.Windows.Input.Key> と 1 つ以上 <xref:System.Windows.Input.ModifierKeys>します。  
  
 定義するときに、 <xref:System.Windows.Input.KeyBinding> で [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] を指定する 2 つの方法がある、 <xref:System.Windows.Input.KeyGesture>です。 最初の方法を確立するために、 <xref:System.Windows.Input.KeyBinding> で [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] を定義するのには、 <xref:System.Windows.Input.KeyBinding.Gesture%2A> の属性、 <xref:System.Windows.Input.KeyBinding> 要素は、たとえば"ctrl キーを押しながら P"の 1 つの文字列としてキーと修飾子を指定する構文を使用します。 2 番目の方法は、定義する、 <xref:System.Windows.Input.KeyBinding.Key%2A> 属性および <xref:System.Windows.Input.KeyBinding.Modifiers%2A> の属性、 <xref:System.Windows.Input.KeyBinding> 要素。 設定のどちらの方法、 <xref:System.Windows.Input.KeyGesture> は同等ですし、同一の基になるオブジェクトの変更がある場合は、両方の競合を使用します。  場合と、 <xref:System.Windows.Input.KeyBinding.Key%2A>, 、<xref:System.Windows.Input.KeyBinding.Modifiers%2A>, 、および <xref:System.Windows.Input.KeyBinding.Gesture%2A> 属性は、すべての設定は定義されている属性最後は使用する、 <xref:System.Windows.Input.KeyGesture>です。 たとえば、状況を持つことがあります、 <xref:System.Windows.Input.KeyBinding.Key%2A> セット最後は上書きしますジェスチャを上記のキー コンポーネントだけが、同じジェスチャの修飾子のままにします。 一般に、お勧めのみに使用する、 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 属性 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; このあいまいさを避ける、最も簡潔な構文を提供およびシリアル化の最も簡単な表現を提供します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="KeyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty KeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty KeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.KeyBinding.KeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Input.KeyBinding.Key" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyBinding.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Windows.Input.ModifierKeys" /> の <see cref="T:System.Windows.Input.KeyGesture" /> に関連付けられた <see cref="T:System.Windows.Input.KeyBinding" />します。</summary>
        <value>修飾子キー、 <see cref="T:System.Windows.Input.KeyGesture" />です。  既定値は <see cref="F:System.Windows.Input.ModifierKeys.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ファンクション キーと、テンキーを除いて、 <xref:System.Windows.Input.KeyGesture> 含める必要があります、 <xref:System.Windows.Input.Key> と 1 つ以上 <xref:System.Windows.Input.ModifierKeys>します。  
  
 定義するときに、 <xref:System.Windows.Input.KeyBinding> で [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] を指定する 2 つの方法がある、 <xref:System.Windows.Input.KeyGesture>です。 最初の方法を確立するために、 <xref:System.Windows.Input.KeyBinding> で [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] を定義するのには、 <xref:System.Windows.Input.KeyBinding.Gesture%2A> の属性、 <xref:System.Windows.Input.KeyBinding> 要素は、たとえば"ctrl キーを押しながら P"の 1 つの文字列としてキーと修飾子を指定する構文を使用します。 2 番目の方法は、定義する、 <xref:System.Windows.Input.KeyBinding.Key%2A> 属性および <xref:System.Windows.Input.KeyBinding.Modifiers%2A> の属性、 <xref:System.Windows.Input.KeyBinding> 要素。 設定のどちらの方法、 <xref:System.Windows.Input.KeyGesture> は同等ですし、同一の基になるオブジェクトの変更がある場合は、両方の競合を使用します。  場合と、 <xref:System.Windows.Input.KeyBinding.Key%2A>, 、<xref:System.Windows.Input.KeyBinding.Modifiers%2A>, 、および <xref:System.Windows.Input.KeyBinding.Gesture%2A> 属性は、すべての設定は定義されている属性最後は使用する、 <xref:System.Windows.Input.KeyGesture>です。 たとえば、状況を持つことがあります、 <xref:System.Windows.Input.KeyBinding.Key%2A> セット最後は上書きしますジェスチャを上記のキー コンポーネントだけが、同じジェスチャの修飾子のままにします。 一般に、お勧めのみに使用する、 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 属性 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; このあいまいさを避ける、最も簡潔な構文を提供およびシリアル化の最も簡単な表現を提供します。  
  
<a name="xamlAttributeUsage_Modifiers"></a>   
## XAML 属性の使用方法  
  
```  
<object Modifiers="oneOrMoreModifierKeys"/>  
  
```  
  
<a name="xamlValues_Modifiers"></a>   
## XAML 値  
 *oneOrMoreModifierKeys*  
 によって定義された 1 つ以上の修飾子キー、 <xref:System.Windows.Input.ModifierKeys> 列挙型、「\+」文字で区切られます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="ModifiersProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ModifiersProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ModifiersProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.KeyBinding.ModifiersProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Input.KeyBinding.Modifiers" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Input.KeyBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>