<Type Name="NavigationCommands" FullName="System.Windows.Input.NavigationCommands">
  <TypeSignature Language="C#" Value="public static class NavigationCommands" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit NavigationCommands extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.NavigationCommands" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ナビゲーション関連のコマンドの標準セットを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Input.NavigationCommands> クラスは、ブラウザー、およびドキュメントのナビゲーションを含むナビゲーションに関連するコマンドの標準セットを公開します。  
  
 コマンドとコマンド処理の詳細については、次を参照してください。 [コマンドの実行の概要](http://msdn.microsoft.com/ja-jp/bc208dfe-367d-426a-99de-52b7e7511e81)します。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MediaCommands" />
    <altmember cref="T:System.Windows.Input.ApplicationCommands" />
    <altmember cref="T:System.Windows.Input.ComponentCommands" />
    <altmember cref="T:System.Windows.Documents.EditingCommands" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="BrowseBack">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand BrowseBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand BrowseBack" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.BrowseBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="Browse Back" /> コマンドを表す値を取得します。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> ALT \+ 左  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> 戻る  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、履歴に前のページに戻るという意図を示しています。  
  
 <xref:System.Windows.Controls.Frame> <xref:System.Windows.Navigation.NavigationWindow> に対応するためのサポートを実装、 <xref:System.Windows.Input.NavigationCommands.BrowseBack%2A>, いますが、それを使用する必要はありません; は、アプリケーションの作成者の責任において、多くの場合そのコマンドに対する応答として実装します。  
  
<a name="xamlAttributeUsage_BrowseBack"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.BrowseBack"/>  
```  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Input.NavigationCommands.BrowseBack%2A> と組み合わせて、 <xref:System.Windows.Controls.Frame>です。<xref:System.Windows.Controls.Frame> に対応する実装を提供、 <xref:System.Windows.Input.NavigationCommands.BrowseBack%2A> コマンドを移動して、 <xref:System.Windows.Controls.Frame> バック スタックの履歴エントリがある場合は、バックアップします。  
  
 [!code-xml[NavigationCommandsSnippets#BrowseBackMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseBack.xaml#browsebackmarkup1)]  
[!code-xml[NavigationCommandsSnippets#BrowseBackMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseBack.xaml#browsebackmarkup2)]  
[!code-xml[NavigationCommandsSnippets#BrowseBackMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseBack.xaml#browsebackmarkup3)]  
[!code-xml[NavigationCommandsSnippets#BrowseBackMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseBack.xaml#browsebackmarkup4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="BrowseForward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand BrowseForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand BrowseForward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.BrowseForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="Browse Forward" /> コマンドを表す値を取得します。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> ALT キーを押しながら右  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> 進む  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、前方、journal では、次のページに移動するという意図を示しています。  
  
 <xref:System.Windows.Controls.Frame> <xref:System.Windows.Navigation.NavigationWindow> に対応するためのサポートを実装、 <xref:System.Windows.Input.NavigationCommands.BrowseForward%2A> コマンドを使用する必要はありませんが、そのコマンドへの応答での実装が、アプリケーションの作成者の責任は多くの場合。  
  
<a name="xamlAttributeUsage_BrowseForward"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.BrowseForward"/>  
```  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Input.NavigationCommands.BrowseForward%2A> と組み合わせて、 <xref:System.Windows.Controls.Frame>です。<xref:System.Windows.Controls.Frame> に対応する実装を提供、 <xref:System.Windows.Input.NavigationCommands.BrowseForward%2A> コマンドを移動して、 <xref:System.Windows.Controls.Frame> 前方のスタックの仕分記入がある場合に転送します。  
  
 [!code-xml[NavigationCommandsSnippets#BrowseForwardMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseForward.xaml#browseforwardmarkup1)]  
[!code-xml[NavigationCommandsSnippets#BrowseForwardMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseForward.xaml#browseforwardmarkup2)]  
[!code-xml[NavigationCommandsSnippets#BrowseForwardMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseForward.xaml#browseforwardmarkup3)]  
[!code-xml[NavigationCommandsSnippets#BrowseForwardMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseForward.xaml#browseforwardmarkup4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="BrowseHome">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand BrowseHome { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand BrowseHome" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.BrowseHome" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="Browse Home" /> コマンドです。</summary>
        <value>ルーティングされた、 UI コマンドです。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> Alt \+ Home  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> Home  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、ホームに移動するという意図を示しています。  
  
 対応するための実装はありません、 <xref:System.Windows.Input.NavigationCommands.BrowseHome%2A> コマンドを与えられた [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] クラスです。 そのため、例に示す、適切な実装を提供する必要があります。  
  
<a name="xamlAttributeUsage_BrowseHome"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.BrowseHome"/>  
```  
  
   
  
## 例  
 次の例に応答するコードを実装する方法を示しています、 <xref:System.Windows.Input.NavigationCommands.BrowseHome%2A> コマンドと組み合わせて、 <xref:System.Windows.Controls.Frame>です。  
  
 [!code-xml[NavigationCommandsSnippets#BrowseHomeMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseHome.xaml#browsehomemarkup1)]  
[!code-xml[NavigationCommandsSnippets#BrowseHomeMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseHome.xaml#browsehomemarkup2)]  
[!code-xml[NavigationCommandsSnippets#BrowseHomeMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseHome.xaml#browsehomemarkup3)]  
[!code-xml[NavigationCommandsSnippets#BrowseHomeMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseHome.xaml#browsehomemarkup4)]  
  
 [!code-csharp[NavigationCommandsSnippets\#BrowseHomeCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseHome.xaml.cs#browsehomecodebehind)]
 [!code-vb[NavigationCommandsSnippets\#BrowseHomeCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationCommandsSnippets/visualbasic/browsehome.xaml.vb#browsehomecodebehind)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="BrowseStop">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand BrowseStop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand BrowseStop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.BrowseStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="Browse Stop" /> コマンドです。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> ALT キーを押しながら ESC キー  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> 停止  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、ブラウザーの読み込みを停止するという意図を示しています。  
  
 <xref:System.Windows.Controls.Frame> <xref:System.Windows.Navigation.NavigationWindow> に対応するためのサポートを実装、 <xref:System.Windows.Input.NavigationCommands.BrowseStop%2A> コマンドを使用する必要はありませんが、そのコマンドへの応答での実装が、アプリケーションの作成者の責任は多くの場合。  
  
<a name="xamlAttributeUsage_BrowseStop"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.BrowseStop"/>  
```  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Input.NavigationCommands.BrowseStop%2A> と組み合わせて、 <xref:System.Windows.Controls.Frame>です。<xref:System.Windows.Controls.Frame> に対応する実装を提供、 <xref:System.Windows.Input.NavigationCommands.BrowseStop%2A> 現在を停止するコマンド <xref:System.Windows.Controls.Frame> ナビゲーションします。  
  
 [!code-xml[NavigationCommandsSnippets#BrowseStopMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseStop.xaml#browsestopmarkup1)]  
[!code-xml[NavigationCommandsSnippets#BrowseStopMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseStop.xaml#browsestopmarkup2)]  
[!code-xml[NavigationCommandsSnippets#BrowseStopMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseStop.xaml#browsestopmarkup3)]  
[!code-xml[NavigationCommandsSnippets#BrowseStopMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/BrowseStop.xaml#browsestopmarkup4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseZoom">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseZoom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseZoom" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.DecreaseZoom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="Decrease Zoom" /> コマンドです。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> N\/A  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> ズームを縮小します。  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、ズームを縮小するという意図を示しています。  
  
 <xref:System.Windows.Controls.DocumentViewer>, 、<xref:System.Windows.Controls.FlowDocumentReader>, 、<xref:System.Windows.Controls.FlowDocumentScrollViewer>, 、および <xref:System.Windows.Controls.FlowDocumentPageViewer> に対応するためのサポートを実装、 <xref:System.Windows.Input.NavigationCommands.DecreaseZoom%2A> コマンドを使用する必要はありませんが、そのコマンドへの応答での実装が、アプリケーションの作成者の責任は多くの場合。  
  
<a name="xamlAttributeUsage_DecreaseZoom"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.DecreaseZoom"/>  
```  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Input.NavigationCommands.DecreaseZoom%2A> と組み合わせて、 <xref:System.Windows.Controls.FlowDocumentPageViewer>です。<xref:System.Windows.Controls.FlowDocumentPageViewer> に対応する実装を提供、 <xref:System.Windows.Input.NavigationCommands.DecreaseZoom%2A> ズームの比率を減らすことでコマンドです。  
  
 [!code-xml[NavigationCommandsSnippets#DecreaseZoomMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/DecreaseZoom.xaml#decreasezoommarkup1)]  
[!code-xml[NavigationCommandsSnippets#DecreaseZoomMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/DecreaseZoom.xaml#decreasezoommarkup2)]  
[!code-xml[NavigationCommandsSnippets#DecreaseZoomMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/DecreaseZoom.xaml#decreasezoommarkup3)]  
[!code-xml[NavigationCommandsSnippets#DecreaseZoomMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/DecreaseZoom.xaml#decreasezoommarkup4)]  
[!code-xml[NavigationCommandsSnippets#DecreaseZoomMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/DecreaseZoom.xaml#decreasezoommarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Favorites">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Favorites { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Favorites" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.Favorites" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="Favorites" /> コマンドです。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> Ctrl \+ I  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> お気に入り  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、管理し、\[お気に入り\] に移動するという意図を示しています。  
  
 対応するための実装はありません、 <xref:System.Windows.Input.NavigationCommands.Favorites%2A> コマンドを与えられた [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] クラスです。 そのため、例に示す、適切な実装を提供する必要があります。  
  
<a name="xamlAttributeUsage_Favorites"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.Favorites"/>  
```  
  
   
  
## 例  
 次の例に応答するコードを実装する方法を示しています、 <xref:System.Windows.Input.NavigationCommands.Favorites%2A> コマンドと組み合わせて、 <xref:System.Windows.Controls.Frame>です。  
  
 [!code-xml[NavigationCommandsSnippets#FavoritesMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Favorites.xaml#favoritesmarkup1)]  
[!code-xml[NavigationCommandsSnippets#FavoritesMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Favorites.xaml#favoritesmarkup2)]  
[!code-xml[NavigationCommandsSnippets#FavoritesMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Favorites.xaml#favoritesmarkup3)]  
[!code-xml[NavigationCommandsSnippets#FavoritesMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Favorites.xaml#favoritesmarkup4)]  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="FirstPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand FirstPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand FirstPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.FirstPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="First Page" /> コマンドです。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> N\/A  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> 最初のページ  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、最初のページに移動するという意図を示しています。  
  
 <xref:System.Windows.Controls.DocumentViewer>, 、<xref:System.Windows.Controls.FlowDocumentReader>, 、<xref:System.Windows.Controls.FlowDocumentScrollViewer>, 、および <xref:System.Windows.Controls.FlowDocumentPageViewer> に対応するためのサポートを実装、 <xref:System.Windows.Input.NavigationCommands.FirstPage%2A> コマンドを使用する必要はありませんが、そのコマンドへの応答での実装が、アプリケーションの作成者の責任は多くの場合。  
  
<a name="xamlAttributeUsage_FirstPage"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.FirstPage"/>  
```  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Input.NavigationCommands.FirstPage%2A> と組み合わせて、 <xref:System.Windows.Controls.FlowDocumentPageViewer>です。<xref:System.Windows.Controls.FlowDocumentPageViewer> に対応する実装を提供、 <xref:System.Windows.Input.NavigationCommands.FirstPage%2A> コマンドを最初のページに移動します。  
  
 [!code-xml[NavigationCommandsSnippets#FirstPageMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/FirstPage.xaml#firstpagemarkup1)]  
[!code-xml[NavigationCommandsSnippets#FirstPageMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/FirstPage.xaml#firstpagemarkup2)]  
[!code-xml[NavigationCommandsSnippets#FirstPageMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/FirstPage.xaml#firstpagemarkup3)]  
[!code-xml[NavigationCommandsSnippets#FirstPageMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/FirstPage.xaml#firstpagemarkup4)]  
[!code-xml[NavigationCommandsSnippets#FirstPageMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/FirstPage.xaml#firstpagemarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="GoToPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand GoToPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand GoToPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.GoToPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="Go To Page" /> コマンドです。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> N\/A  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> ページに移動します。  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、ズームを変更するという意図を示しています。  
  
 <xref:System.Windows.Controls.DocumentViewer> <xref:System.Windows.Controls.FlowDocumentPageViewer> に対応するためのサポートを実装、 <xref:System.Windows.Input.NavigationCommands.GoToPage%2A> コマンドを使用する必要はありませんが、そのコマンドへの応答での実装が、アプリケーションの作成者の責任は多くの場合。  
  
<a name="xamlAttributeUsage_GoToPage"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.GoToPage"/>  
```  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Windows.Input.NavigationCommands.GoToPage%2A> コマンドと組み合わせて、 <xref:System.Windows.Controls.FlowDocumentPageViewer>です。<xref:System.Windows.Controls.FlowDocumentPageViewer> に対応する実装を提供、 <xref:System.Windows.Input.NavigationCommands.GoToPage%2A> コマンドのテキスト値で指定されたページに移動して、 <xref:System.Windows.Controls.TextBox> コントロールです。  
  
 [!code-xml[NavigationCommandsSnippets#GoToPageMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/GoToPage.xaml#gotopagemarkup1)]  
[!code-xml[NavigationCommandsSnippets#GoToPageMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/GoToPage.xaml#gotopagemarkup2)]  
[!code-xml[NavigationCommandsSnippets#GoToPageMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/GoToPage.xaml#gotopagemarkup3)]  
[!code-xml[NavigationCommandsSnippets#GoToPageMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/GoToPage.xaml#gotopagemarkup4)]  
[!code-xml[NavigationCommandsSnippets#GoToPageMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/GoToPage.xaml#gotopagemarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseZoom">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseZoom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseZoom" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.IncreaseZoom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="Increase Zoom" /> コマンドです。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> N\/A  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> ズームを拡大します。  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、ズームを拡大するという意図を示しています。  
  
 <xref:System.Windows.Controls.DocumentViewer>, 、<xref:System.Windows.Controls.FlowDocumentReader>, 、<xref:System.Windows.Controls.FlowDocumentScrollViewer>, 、および <xref:System.Windows.Controls.FlowDocumentPageViewer> に対応するためのサポートを実装、 <xref:System.Windows.Input.NavigationCommands.IncreaseZoom%2A> コマンドを使用する必要はありませんが、そのコマンドへの応答での実装が、アプリケーションの作成者の責任は多くの場合。  
  
<a name="xamlAttributeUsage_IncreaseZoom"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.IncreaseZoom"/>  
```  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Input.NavigationCommands.IncreaseZoom%2A> と組み合わせて、 <xref:System.Windows.Controls.FlowDocumentPageViewer>です。<xref:System.Windows.Controls.FlowDocumentPageViewer> に対応する実装を提供、 <xref:System.Windows.Input.NavigationCommands.IncreaseZoom%2A> ズームの比率を減らすことでコマンドです。  
  
 [!code-xml[NavigationCommandsSnippets#IncreaseZoomMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/IncreaseZoom.xaml#increasezoommarkup1)]  
[!code-xml[NavigationCommandsSnippets#IncreaseZoomMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/IncreaseZoom.xaml#increasezoommarkup2)]  
[!code-xml[NavigationCommandsSnippets#IncreaseZoomMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/IncreaseZoom.xaml#increasezoommarkup3)]  
[!code-xml[NavigationCommandsSnippets#IncreaseZoomMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/IncreaseZoom.xaml#increasezoommarkup4)]  
[!code-xml[NavigationCommandsSnippets#IncreaseZoomMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/IncreaseZoom.xaml#increasezoommarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="LastPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand LastPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand LastPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.LastPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="Last Page" /> コマンドです。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> N\/A  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> 最後のページ  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、最後のページに移動するという意図を示しています。  
  
 <xref:System.Windows.Controls.DocumentViewer>, 、<xref:System.Windows.Controls.FlowDocumentReader>, 、<xref:System.Windows.Controls.FlowDocumentScrollViewer>, 、および <xref:System.Windows.Controls.FlowDocumentPageViewer> に対応するためのサポートを実装、 <xref:System.Windows.Input.NavigationCommands.LastPage%2A> コマンドを使用する必要はありませんが、そのコマンドへの応答での実装が、アプリケーションの作成者の責任は多くの場合。  
  
<a name="xamlAttributeUsage_LastPage"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.LastPage"/>  
```  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Input.NavigationCommands.LastPage%2A> と組み合わせて、 <xref:System.Windows.Controls.FlowDocumentPageViewer>です。<xref:System.Windows.Controls.FlowDocumentPageViewer> に対応する実装を提供、 <xref:System.Windows.Input.NavigationCommands.LastPage%2A> コマンドを最後のページに移動します。  
  
 [!code-xml[NavigationCommandsSnippets#LastPageMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/LastPage.xaml#lastpagemarkup1)]  
[!code-xml[NavigationCommandsSnippets#LastPageMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/LastPage.xaml#lastpagemarkup2)]  
[!code-xml[NavigationCommandsSnippets#LastPageMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/LastPage.xaml#lastpagemarkup3)]  
[!code-xml[NavigationCommandsSnippets#LastPageMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/LastPage.xaml#lastpagemarkup4)]  
[!code-xml[NavigationCommandsSnippets#LastPageMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/LastPage.xaml#lastpagemarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="NavigateJournal">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand NavigateJournal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand NavigateJournal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.NavigateJournal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="Navigate Journal" /> コマンドです。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> N\/A  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> ナビゲーション履歴  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、履歴に移動するという意図を示しています。  
  
 <xref:System.Windows.Controls.Frame> <xref:System.Windows.Navigation.NavigationWindow> に対応するためのサポートを実装、 <xref:System.Windows.Input.NavigationCommands.NavigateJournal%2A> コマンドを使用する必要はありませんが、そのコマンドへの応答での実装が、アプリケーションの作成者の責任は多くの場合。  
  
<a name="xamlAttributeUsage_NavigateJournal"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.NavigateJournal"/>  
```  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Input.NavigationCommands.NavigateJournal%2A> と組み合わせて、 <xref:System.Windows.Controls.Frame>です。<xref:System.Windows.Controls.Frame> に対応する実装を提供、 <xref:System.Windows.Input.NavigationCommands.NavigateJournal%2A> コマンドの前後のスタックで指定した履歴項目に移動して、 <xref:System.Windows.Controls.Frame>です。 仕分記入がによって提供される、 <xref:System.Windows.Navigation.JournalEntryUnifiedViewConverter> トップレベル `Navigate Journal` <xref:System.Windows.Controls.MenuItem>します。  各履歴項目が子にバインドされた <xref:System.Windows.Controls.MenuItem> を使用して、 <xref:System.Windows.Input.NavigationCommands.NavigateJournal%2A> コマンドです。  
  
 [!code-xml[NavigationCommandsSnippets#NavigateJournalMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NavigateJournal.xaml#navigatejournalmarkup1)]  
[!code-xml[NavigationCommandsSnippets#NavigateJournalMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NavigateJournal.xaml#navigatejournalmarkup2)]  
[!code-xml[NavigationCommandsSnippets#NavigateJournalMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NavigateJournal.xaml#navigatejournalmarkup3)]  
[!code-xml[NavigationCommandsSnippets#NavigateJournalMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NavigateJournal.xaml#navigatejournalmarkup4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="NextPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand NextPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand NextPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.NextPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="Next Page" /> コマンドです。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> N\/A  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> 次のページ  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、次のページに移動するという意図を示しています。  
  
 <xref:System.Windows.Controls.DocumentViewer>, 、<xref:System.Windows.Controls.FlowDocumentReader>, 、<xref:System.Windows.Controls.FlowDocumentScrollViewer>, 、および <xref:System.Windows.Controls.FlowDocumentPageViewer> に対応するためのサポートを実装、 <xref:System.Windows.Input.NavigationCommands.NextPage%2A> コマンドを使用する必要はありませんが、そのコマンドへの応答での実装が、アプリケーションの作成者の責任は多くの場合。  
  
<a name="xamlAttributeUsage_NextPage"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.NextPage"/>  
```  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Input.NavigationCommands.NextPage%2A> と組み合わせて、 <xref:System.Windows.Controls.FlowDocumentPageViewer>です。<xref:System.Windows.Controls.FlowDocumentPageViewer> に対応する実装を提供、 <xref:System.Windows.Input.NavigationCommands.NextPage%2A> コマンドを次のページに移動します。  
  
 [!code-xml[NavigationCommandsSnippets#NextPageMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NextPage.xaml#nextpagemarkup1)]  
[!code-xml[NavigationCommandsSnippets#NextPageMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NextPage.xaml#nextpagemarkup2)]  
[!code-xml[NavigationCommandsSnippets#NextPageMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NextPage.xaml#nextpagemarkup3)]  
[!code-xml[NavigationCommandsSnippets#NextPageMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NextPage.xaml#nextpagemarkup4)]  
[!code-xml[NavigationCommandsSnippets#NextPageMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/NextPage.xaml#nextpagemarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviousPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand PreviousPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand PreviousPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.PreviousPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="Previous Page" /> コマンドです。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> N\/A  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> 前のページ  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、前のページに移動するという意図を示しています。  
  
 <xref:System.Windows.Controls.DocumentViewer>, 、<xref:System.Windows.Controls.FlowDocumentReader>, 、<xref:System.Windows.Controls.FlowDocumentScrollViewer>, 、および <xref:System.Windows.Controls.FlowDocumentPageViewer> に対応するためのサポートを実装、 <xref:System.Windows.Input.NavigationCommands.PreviousPage%2A> コマンドを使用する必要はありませんが、そのコマンドへの応答での実装が、アプリケーションの作成者の責任は多くの場合。  
  
<a name="xamlAttributeUsage_PreviousPage"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.PreviousPage"/>  
```  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Input.NavigationCommands.PreviousPage%2A> と組み合わせて、 <xref:System.Windows.Controls.FlowDocumentPageViewer>です。<xref:System.Windows.Controls.FlowDocumentPageViewer> に対応する実装を提供、 <xref:System.Windows.Input.NavigationCommands.PreviousPage%2A> コマンドを前のページに移動します。  
  
 [!code-xml[NavigationCommandsSnippets#PreviousPageMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/PreviousPage.xaml#previouspagemarkup1)]  
[!code-xml[NavigationCommandsSnippets#PreviousPageMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/PreviousPage.xaml#previouspagemarkup2)]  
[!code-xml[NavigationCommandsSnippets#PreviousPageMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/PreviousPage.xaml#previouspagemarkup3)]  
[!code-xml[NavigationCommandsSnippets#PreviousPageMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/PreviousPage.xaml#previouspagemarkup4)]  
[!code-xml[NavigationCommandsSnippets#PreviousPageMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/PreviousPage.xaml#previouspagemarkup5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Refresh { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Refresh" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.Refresh" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="Refresh" /> コマンドです。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> F5  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> Refresh  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、現在のページを更新するという意図を示しています。  
  
 <xref:System.Windows.Controls.Frame> <xref:System.Windows.Navigation.NavigationWindow> に対応するためのサポートを実装、 <xref:System.Windows.Input.NavigationCommands.Refresh%2A> コマンドを使用する必要はありませんが、そのコマンドへの応答での実装が、アプリケーションの作成者の責任は多くの場合。  
  
<a name="xamlAttributeUsage_Refresh"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.Refresh"/>  
```  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Input.NavigationCommands.Refresh%2A> と組み合わせて、 <xref:System.Windows.Controls.Frame>です。<xref:System.Windows.Controls.Frame> に対応する実装を提供、 <xref:System.Windows.Input.NavigationCommands.Refresh%2A> コマンド、現在の再読み込みを <xref:System.Windows.Controls.Frame> コンテンツです。  
  
 [!code-xml[NavigationCommandsSnippets#RefreshMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Refresh.xaml#refreshmarkup1)]  
[!code-xml[NavigationCommandsSnippets#RefreshMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Refresh.xaml#refreshmarkup2)]  
[!code-xml[NavigationCommandsSnippets#RefreshMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Refresh.xaml#refreshmarkup3)]  
[!code-xml[NavigationCommandsSnippets#RefreshMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Refresh.xaml#refreshmarkup4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Search { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Search" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.Search" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="Search" /> コマンドです。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> F3  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> 検索  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、検索するという意図を示しています。  
  
 対応するための実装はありません、 <xref:System.Windows.Input.NavigationCommands.Search%2A> コマンドを与えられた [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] クラスです。 そのため、例に示す、適切な実装を提供する必要があります。  
  
<a name="xamlAttributeUsage_Search"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.Search"/>  
```  
  
   
  
## 例  
 次の例に応答するコードを実装する方法を示しています、 <xref:System.Windows.Input.NavigationCommands.Search%2A> コマンドと組み合わせて、 <xref:System.Windows.Controls.FlowDocumentPageViewer>です。  
  
 [!code-xml[NavigationCommandsSnippets#SearchMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Search.xaml#searchmarkup1)]  
[!code-xml[NavigationCommandsSnippets#SearchMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Search.xaml#searchmarkup2)]  
[!code-xml[NavigationCommandsSnippets#SearchMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Search.xaml#searchmarkup3)]  
[!code-xml[NavigationCommandsSnippets#SearchMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Search.xaml#searchmarkup4)]  
[!code-xml[NavigationCommandsSnippets#SearchMARKUP5](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Search.xaml#searchmarkup5)]  
  
 [!code-csharp[NavigationCommandsSnippets\#SearchCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Search.xaml.cs#searchcodebehind)]
 [!code-vb[NavigationCommandsSnippets\#SearchCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/NavigationCommandsSnippets/visualbasic/search.xaml.vb#searchcodebehind)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Zoom">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Zoom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Zoom" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.NavigationCommands.Zoom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see langword="Zoom" /> コマンドです。</summary>
        <value>ルーティングされた UI コマンド。  
  
 <list type="table">  
<listheader>  
<term> 既定値  
  
 </term>  
<description></description>  
</listheader>  
<item>  
<term> キーのジェスチャ  
  
 </term>  
<description> N\/A  
  
 </description>  
</item>  
<item>  
<term> UI テキスト  
  
 </term>  
<description> ズーム  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコマンドは、ズーム レベルを設定するという意図を示しています。  
  
 対応するための実装はありません、 <xref:System.Windows.Input.NavigationCommands.Zoom%2A> コマンドを与えられた [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] クラスです。 そのため、例に示す、適切な実装を提供する必要があります。  
  
<a name="xamlAttributeUsage_Zoom"></a>   
## XAML 属性の使用方法  
  
```  
<object property="NavigationCommands.Zoom"/>  
```  
  
   
  
## 例  
 次の例に応答するコードを実装する方法を示しています、 <xref:System.Windows.Input.NavigationCommands.Zoom%2A> コマンドと組み合わせて、 <xref:System.Windows.Controls.FlowDocumentPageViewer>です。  
  
 [!code-xml[NavigationCommandsSnippets#ZoomMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Zoom.xaml#zoommarkup1)]  
[!code-xml[NavigationCommandsSnippets#ZoomMARKUP2](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Zoom.xaml#zoommarkup2)]  
[!code-xml[NavigationCommandsSnippets#ZoomMARKUP3](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Zoom.xaml#zoommarkup3)]  
[!code-xml[NavigationCommandsSnippets#ZoomMARKUP4](~/samples/snippets/csharp/VS_Snippets_Wpf/NavigationCommandsSnippets/CSharp/Zoom.xaml#zoommarkup4)]  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MediaCommands" />
        <altmember cref="T:System.Windows.Input.ApplicationCommands" />
        <altmember cref="T:System.Windows.Input.ComponentCommands" />
        <altmember cref="T:System.Windows.Documents.EditingCommands" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.RoutedUICommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>