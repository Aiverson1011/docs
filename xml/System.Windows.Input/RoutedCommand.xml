<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.Windows.Input.ICommand" /> を実装し、要素ツリーを通じてルーティングされるコマンドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> と <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> のメソッド、 <xref:System.Windows.Input.RoutedCommand> で標準的な場合と同様のコマンドは、アプリケーション ロジックを含まない <xref:System.Windows.Input.ICommand>, 、これらのメソッドが、オブジェクトを参照して、要素ツリーを走査するイベントを生成する代わりが、 <xref:System.Windows.Input.CommandBinding>です。  接続されているイベント ハンドラー、 <xref:System.Windows.Input.CommandBinding> コマンド ロジックが含まれています。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドを発生させる、 <xref:System.Windows.Input.CommandManager.PreviewExecuted> と <xref:System.Windows.Input.CommandManager.Executed> イベントです。<xref:System.Windows.Input.RoutedCommand.CanExecute%2A> メソッドを発生させる、 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> と <xref:System.Windows.Input.CommandManager.CanExecute> イベントです。  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## XAML 属性の使用方法  
 \<*オブジェクト* *プロパティ*\="*predefinedCommandName*"\/\>  
  
 または  
  
 \<*オブジェクト* *プロパティ*\="*predefinedClassName*.*predefinedCommandName*"\/\>  
  
 または  
  
 \<*オブジェクト* *プロパティ*\="{ *customClassName*.*customCommandName*}"\/\>  
  
<a name="xamlValues_RoutedCommand"></a>   
## XAML 値  
 *predefinedClassName*  
 定義済みのコマンド クラスのいずれかです。  
  
 *predefinedCommandName*  
 定義済みのコマンドのいずれかです。  
  
 *customClassName*  
 カスタム コマンドが含まれるカスタム クラスです。 カスタム クラスは一般に必要な `xlmns` プレフィックスのマッピングは [XAML 名前空間および WPF XAML の名前空間マッピング](http://msdn.microsoft.com/ja-jp/5c0854e3-7470-435d-9fe2-93eec9d3634e)します。  
  
 *customCommandName*  
 カスタム コマンドです。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Input.RoutedCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">シリアル化のための宣言名。</param>
        <param name="ownerType">このコマンドを登録するタイプ。</param>
        <summary>指定した名前および所有者タイプで、<see cref="T:System.Windows.Input.RoutedCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ownerType" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">シリアル化のための宣言名。</param>
        <param name="ownerType">このコマンドを登録する型。</param>
        <param name="inputGestures">このコマンドに関連付けられている入力ジェスチャを既定値です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Input.RoutedCommand" /> クラスを指定した名前、所有者型、およびジェスチャのコレクションを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">長さ <paramref name="name" /> ゼロ  
  
 または  
  
 <paramref name="ownerType" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">ユーザーは、データ型を定義します。</param>
        <param name="target">コマンド ターゲットです。</param>
        <summary>指定するかどうかこれ <see cref="T:System.Windows.Input.RoutedCommand" /> の現在の状態で実行できます。</summary>
        <returns>
          <see langword="true" /> 現在のコマンドのターゲットでコマンドを実行できる場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 かどうかを実際のロジック、 <xref:System.Windows.Input.RoutedCommand> 現在上で実行できるコマンドの対象に含まれていない、 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> メソッドではなく <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> を発生させます、 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> と <xref:System.Windows.Input.CommandManager.CanExecute> トンネルおよび要素を介してバブル ツリーを使用してオブジェクトを検索するイベントを <xref:System.Windows.Input.CommandBinding>です。  場合、 <xref:System.Windows.Input.CommandBinding> その <xref:System.Windows.Input.RoutedCommand> が見つかると、 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> に接続されている <xref:System.Windows.Input.CommandBinding> が呼び出されます。  これらのハンドラーを判断する際のプログラミング ロジックを提供する、 <xref:System.Windows.Input.RoutedCommand> かを実行できます。  
  
 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> と <xref:System.Windows.Input.CommandManager.PreviewExecuted> 上のイベントが発生する、 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>です。  場合、 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> では設定されず、 <xref:System.Windows.Input.ICommandSource>, 、 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> と <xref:System.Windows.Input.CommandManager.CanExecute> キーボード フォーカスを持つ要素のイベントが発生します。  
  
   
  
## 例  
 次の例は、 <xref:System.Windows.Input.ICommand.CanExecuteChanged> イベント ハンドラーのカスタム実装から <xref:System.Windows.Input.ICommandSource>します。  
  
 `this.Command` この例では、 <xref:System.Windows.Input.ICommandSource.Command%2A> プロパティを <xref:System.Windows.Input.ICommandSource>です。  コマンドがない場合 `null`, にコマンドがキャスト、 <xref:System.Windows.Input.RoutedCommand>です。  コマンドの場合、 <xref:System.Windows.Input.RoutedCommand>, 、 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> を渡すメソッドが呼び出される、 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> と <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。  コマンドがない場合、 <xref:System.Windows.Input.RoutedCommand>, にキャストされた、 <xref:System.Windows.Input.ICommand> と <xref:System.Windows.Input.ICommand.CanExecute%2A> を渡すメソッドが呼び出される、 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。  
  
 場合、 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> メソッドが返す `true`, 、コントロールが有効では、コントロールが無効にするにはそれ以外の場合、それです。  
  
 [!code-csharp[ImplementICommandSource\#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource\#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コマンド ソースへの変更がコマンド マネージャーによって検出されたときに発生します。 これらの変更は、多くの場合、現在のコマンドの対象に対してコマンドを実行するかどうかに影響します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Input.RoutedCommand> リッスン、 <xref:System.Windows.Input.CommandManager.RequerySuggested> によって発生するイベント、 <xref:System.Windows.Input.CommandManager>です。<xref:System.Windows.Input.CommandManager.RequerySuggested> 条件が満たされたときにイベントが発生したかどうかに変更されるかもしれませんがキーボード フォーカスの変更など、コマンドを実行する必要があります。  コマンドを受信すると、 <xref:System.Windows.Input.CommandManager.RequerySuggested> を生成、イベント、 <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> イベントです。  一般に、コマンド ソースがこのイベントとクエリの待機、 <xref:System.Windows.Input.RoutedCommand> による、 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> メソッドです。  多くのコマンド ソースが無効になります自体、コマンド バインディングの一部としてのコマンドを実行できない場合。  この例は、 <xref:System.Windows.Controls.MenuItem> できないコマンドの実行時にそれ自体を淡色表示されます。  
  
 いくつかの状況で、 <xref:System.Windows.Input.CommandManager> は実行するコマンドの機能を変更する条件の変化を認識しません。  このような場合は、強制実行できます、 <xref:System.Windows.Input.CommandManager> が発生する、 <xref:System.Windows.Input.CommandManager.RequerySuggested> を呼び出してイベント、 <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> メソッド、さらにこうと、 <xref:System.Windows.Input.RoutedCommand> を発生させる、 <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> イベントです。  
  
   
  
## 例  
 次の例は、 <xref:System.Windows.Input.ICommand.CanExecuteChanged> イベント ハンドラーのカスタム実装から <xref:System.Windows.Input.ICommandSource>します。  
  
 `this.Command` この例では、 <xref:System.Windows.Input.ICommandSource.Command%2A> プロパティを <xref:System.Windows.Input.ICommandSource>です。  コマンドがない場合 `null`, にコマンドがキャスト、 <xref:System.Windows.Input.RoutedCommand>です。  コマンドの場合、 <xref:System.Windows.Input.RoutedCommand>, 、 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> を渡すメソッドが呼び出される、 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> と <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。  コマンドがない場合、 <xref:System.Windows.Input.RoutedCommand>, にキャストされた、 <xref:System.Windows.Input.ICommand> と <xref:System.Windows.Input.ICommand.CanExecute%2A> を渡すメソッドが呼び出される、 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。  
  
 場合、 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> メソッドが返す `true`, 、し、コントロールが有効になります。 それ以外の場合、コントロールが無効にします。  
  
 [!code-csharp[ImplementICommandSource\#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource\#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">ユーザーは、ハンドラーに渡されるパラメーターを定義します。</param>
        <param name="target">コマンド ハンドラーの検索を開始する位置を示す要素。</param>
        <summary>実行、 <see cref="T:System.Windows.Input.RoutedCommand" /> 現在のコマンドの対象にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実行される実際のロジック、 <xref:System.Windows.Input.RoutedCommand> に含まれていない、 <xref:System.Windows.Input.RoutedCommand.Execute%2A> メソッドです。<xref:System.Windows.Input.RoutedCommand.Execute%2A> 発生させる、 <xref:System.Windows.Input.CommandManager.PreviewExecuted> と <xref:System.Windows.Input.CommandManager.Executed> イベントでは、トンネルおよび要素を介してバブル ツリーを持つオブジェクトを探して、 <xref:System.Windows.Input.CommandBinding>です。  場合、 <xref:System.Windows.Input.CommandBinding> その <xref:System.Windows.Input.RoutedCommand> が見つかると、 <xref:System.Windows.Input.ExecutedRoutedEventHandler> に接続されている <xref:System.Windows.Input.CommandBinding> が呼び出されます。  これらのハンドラーを実行するプログラミング ロジックを提供する、 <xref:System.Windows.Input.RoutedCommand>です。  
  
 <xref:System.Windows.Input.CommandManager.PreviewExecuted> と <xref:System.Windows.Input.CommandManager.Executed> 上のイベントが発生する、 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>です。  場合、 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> では設定されず、 <xref:System.Windows.Input.ICommandSource>, 、 <xref:System.Windows.Input.CommandManager.PreviewExecuted> と <xref:System.Windows.Input.CommandManager.Executed> キーボード フォーカスを持つ要素のイベントが発生します。  
  
   
  
## 例  
 カスタム実装から次の例は、 <xref:System.Windows.Input.ICommandSource> サンプルです。  
  
 `this.Command` Command プロパティは、この例では、 <xref:System.Windows.Input.ICommandSource>です。  コマンドにキャストして、コマンドが null でない場合、 <xref:System.Windows.Input.RoutedCommand>です。  ある場合、 <xref:System.Windows.Input.RoutedCommand>, 、 <xref:System.Windows.Input.RoutedCommand.Execute%2A> を渡すメソッドが呼び出される、 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> と <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。  コマンドがない場合、 <xref:System.Windows.Input.RoutedCommand>, にキャストされた、 <xref:System.Windows.Input.ICommand> と <xref:System.Windows.Input.ICommand.Execute%2A> を渡すメソッドが呼び出される、 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>です。  
  
 [!code-csharp[ImplementICommandSource\#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource\#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="target" /> <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションを取得 <see cref="T:System.Windows.Input.InputGesture" /> このコマンドに関連付けられているオブジェクト。</summary>
        <value>入力ジェスチャ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、新しいを追加する方法を示しています。 <xref:System.Windows.Input.MouseGesture> に、 <xref:System.Windows.Input.RoutedCommand>です。  
  
 [!code-csharp[commandlibrarysnippets\#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets\#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コマンド名を取得します。</summary>
        <value>コマンドの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 参照するときに、このプロパティを使用することができます、 <xref:System.Windows.Input.RoutedCommand> で [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コマンドを使用して登録されている型を取得します。</summary>
        <value>コマンドの所有者の型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">コマンドにより使用されるデータです。  コマンドにデータを渡す必要がない場合は、このオブジェクトを <see langword="null" /> に設定できます。</param>
        <summary>このメンバーの説明は、次を参照してください。 <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />します。</summary>
        <returns>このコマンドを実行できる場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Input.RoutedCommand> のインスタンスが <xref:System.Windows.Input.ICommand> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">コマンドにより使用されるデータです。  コマンドにデータを渡す必要がない場合は、このオブジェクトを <see langword="null" /> に設定できます。</param>
        <summary>このメンバーの説明は、次を参照してください。 <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Input.RoutedCommand> のインスタンスが <xref:System.Windows.Input.ICommand> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 参照  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Input.RoutedCommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>