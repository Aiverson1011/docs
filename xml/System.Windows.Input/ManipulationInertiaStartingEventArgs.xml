<Type Name="ManipulationInertiaStartingEventArgs" FullName="System.Windows.Input.ManipulationInertiaStartingEventArgs">
  <TypeSignature Language="C#" Value="public sealed class ManipulationInertiaStartingEventArgs : System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManipulationInertiaStartingEventArgs extends System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ManipulationInertiaStartingEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs> の操作の慣性の動作を指定するオブジェクト。 操作の種類ごとに慣性の動作を個別に指定するにを使用して、 <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.TranslationBehavior%2A>, 、<xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.ExpansionBehavior%2A>, 、および <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.RotationBehavior%2A> プロパティです。 いずれの場合、慣性の動作を表すオブジェクトの型の各プロパティは、次を指定できます。  
  
-   開始すると、慣性の初期速度。  
  
-   慣性が終了したときの操作の目的の位置。  
  
-   慣性の必要な減速します。  
  
 通常、いずれかの慣性が終了したときの操作の目的の位置や、慣性が、両方の必要な減速を指定します。  
  
 操作の詳細については、次を参照してください。、 [入力概要](http://msdn.microsoft.com/ja-jp/ee5258b7-6567-415a-9b1c-c0cbe46e79ef)します。  
  
   
  
## 例  
 例を次に、 <xref:System.Windows.UIElement.ManipulationInertiaStarting> イベント ハンドラーおよび平行移動、拡大、および回転慣性中に使用されるため、必要な減速を設定します。 この例のサンプルが大きくの一部である [チュートリアル: 初めてのタッチ アプリケーションの作成](http://msdn.microsoft.com/ja-jp/d69e602e-9a25-4e24-950b-e89eaa2a906b)します。  
  
 [!code-csharp[BasicManipulation\#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation\#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public bool Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationInertiaStartingEventArgs.Cancel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>操作をキャンセルします。</summary>
        <returns>
          <see langword="true" /> 操作が正常に取り消された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メソッドが成功すると、既定値 <xref:System.Windows.Input.TouchDevice> 将来操作イベントが発生しないとタッチとマウスの移動、下のマウス イベントまたはイベント要素をマウスの前に送信します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpansionBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InertiaExpansionBehavior ExpansionBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InertiaExpansionBehavior ExpansionBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.ExpansionBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InertiaExpansionBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または拡張慣性の動きの速度の低下率を設定します。</summary>
        <value>拡張慣性の動きの速度の低下率</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.ExpansionBehavior%2A> プロパティを次の操作します。  
  
-   設定して開始すると、慣性の初期速度を指定、 <xref:System.Windows.Input.InertiaExpansionBehavior.InitialVelocity%2A> プロパティです。  
  
-   操作の必要な拡張を設定して慣性の終了時に指定、 <xref:System.Windows.Input.InertiaExpansionBehavior.DesiredExpansion%2A> プロパティです。  
  
-   設定して慣性の必要な減速を指定する、 <xref:System.Windows.Input.InertiaExpansionBehavior.DesiredDeceleration%2A> プロパティです。  
  
 通常はいずれかの設定、 <xref:System.Windows.Input.InertiaExpansionBehavior.DesiredExpansion%2A> または <xref:System.Windows.Input.InertiaExpansionBehavior.DesiredDeceleration%2A>, 、両方ではないです。  
  
 操作の詳細については、次を参照してください。、 [入力概要](http://msdn.microsoft.com/ja-jp/ee5258b7-6567-415a-9b1c-c0cbe46e79ef)します。 操作に応答するアプリケーションの例は、次を参照してください。 [チュートリアル: 初めてのタッチ アプリケーションの作成](http://msdn.microsoft.com/ja-jp/d69e602e-9a25-4e24-950b-e89eaa2a906b)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialVelocities">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationVelocities InitialVelocities { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationVelocities InitialVelocities" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.InitialVelocities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationVelocities</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>慣性が開始する前に発生する変更操作の速度を取得します。</summary>
        <value>慣性が開始する前に発生する操作に対する変更の速度です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 操作の詳細については、次を参照してください。、 [入力概要](http://msdn.microsoft.com/ja-jp/ee5258b7-6567-415a-9b1c-c0cbe46e79ef)します。 操作に応答するアプリケーションの例は、次を参照してください。 [チュートリアル: 初めてのタッチ アプリケーションの作成](http://msdn.microsoft.com/ja-jp/d69e602e-9a25-4e24-950b-e89eaa2a906b)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationInertiaStartingEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="genericTarget">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationContainer">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement ManipulationContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement ManipulationContainer" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテナーを取得、 <see cref="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin" /> プロパティに関連します。</summary>
        <value>コンテナーを <see cref="P:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin" /> プロパティに関連します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 操作の詳細については、次を参照してください。、 [入力概要](http://msdn.microsoft.com/ja-jp/ee5258b7-6567-415a-9b1c-c0cbe46e79ef)します。 操作に応答するアプリケーションの例は、次を参照してください。 [チュートリアル: 初めてのタッチ アプリケーションの作成](http://msdn.microsoft.com/ja-jp/d69e602e-9a25-4e24-950b-e89eaa2a906b)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point ManipulationOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point ManipulationOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または操作の起点となるポイントを設定します。</summary>
        <value>操作の起点となるポイントです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 連絡先の 1 つ以上の点には、操作が開始された場合、 <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.ManipulationOrigin%2A> プロパティは、すべての連絡先のポイント間のポイント。  
  
 操作の詳細については、次を参照してください。、 [入力概要](http://msdn.microsoft.com/ja-jp/ee5258b7-6567-415a-9b1c-c0cbe46e79ef)します。 操作に応答するアプリケーションの例は、次を参照してください。 [チュートリアル: 初めてのタッチ アプリケーションの作成](http://msdn.microsoft.com/ja-jp/d69e602e-9a25-4e24-950b-e89eaa2a906b)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Manipulators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt; Manipulators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.IManipulator&gt; Manipulators" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.Manipulators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>操作のタッチの連絡先を表すオブジェクトのコレクションを取得します。</summary>
        <value>操作のタッチの連絡先を表すオブジェクトのコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InertiaRotationBehavior RotationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InertiaRotationBehavior RotationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.RotationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InertiaRotationBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または回転の慣性運動の速度の低下率を設定します。</summary>
        <value>回転の慣性運動の速度の低下の比率。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.RotationBehavior%2A> プロパティを次の操作します。  
  
-   設定して開始すると、慣性の初期速度を指定、 <xref:System.Windows.Input.InertiaRotationBehavior.InitialVelocity%2A> プロパティです。  
  
-   操作の必要な回転を設定して慣性の終了時に指定、 <xref:System.Windows.Input.InertiaRotationBehavior.DesiredRotation%2A> プロパティです。  
  
-   設定して慣性の必要な減速を指定する、 <xref:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration%2A> プロパティです。  
  
 通常はいずれかの設定、 <xref:System.Windows.Input.InertiaRotationBehavior.DesiredRotation%2A> または <xref:System.Windows.Input.InertiaRotationBehavior.DesiredDeceleration%2A>, 、両方ではないです。  
  
 操作の詳細については、次を参照してください。、 [入力概要](http://msdn.microsoft.com/ja-jp/ee5258b7-6567-415a-9b1c-c0cbe46e79ef)します。 操作に応答するアプリケーションの例は、次を参照してください。 [チュートリアル: 初めてのタッチ アプリケーションの作成](http://msdn.microsoft.com/ja-jp/d69e602e-9a25-4e24-950b-e89eaa2a906b)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetInertiaParameter">
      <MemberSignature Language="C#" Value="public void SetInertiaParameter (System.Windows.Input.Manipulations.InertiaParameters2D parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInertiaParameter(class System.Windows.Input.Manipulations.InertiaParameters2D parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationInertiaStartingEventArgs.SetInertiaParameter(System.Windows.Input.Manipulations.InertiaParameters2D)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Windows.Input.Manipulations.InertiaParameters2D" />
      </Parameters>
      <Docs>
        <param name="parameter">このオブジェクトは、慣性中の操作の動作を指定します。</param>
        <summary>慣性による処理中の操作の動作を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、このメソッドを呼び出す必要はありません。 プロパティを使用して、 <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs> 代わりにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="parameter" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="TranslationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InertiaTranslationBehavior TranslationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InertiaTranslationBehavior TranslationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationInertiaStartingEventArgs.TranslationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InertiaTranslationBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得し、慣性の動きを線形の速度の低下率を設定します。</summary>
        <value>慣性の動きを線形の速度の低下の比率。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs.TranslationBehavior%2A> プロパティを次の操作します。  
  
-   設定して開始すると、慣性の初期速度を指定、 <xref:System.Windows.Input.InertiaTranslationBehavior.InitialVelocity%2A> プロパティです。  
  
-   操作の目的の位置を設定して慣性の終了時に指定、 <xref:System.Windows.Input.InertiaTranslationBehavior.DesiredDisplacement%2A> プロパティです。  
  
-   設定して慣性の必要な減速を指定する、 <xref:System.Windows.Input.InertiaTranslationBehavior.DesiredDeceleration%2A> プロパティです。  
  
 通常はいずれかの設定、 <xref:System.Windows.Input.InertiaTranslationBehavior.DesiredDisplacement%2A> または <xref:System.Windows.Input.InertiaTranslationBehavior.DesiredDeceleration%2A>, 、両方ではないです。  
  
 操作の詳細については、次を参照してください。、 [入力概要](http://msdn.microsoft.com/ja-jp/ee5258b7-6567-415a-9b1c-c0cbe46e79ef)します。 操作に応答するアプリケーションの例は、次を参照してください。 [チュートリアル: 初めてのタッチ アプリケーションの作成](http://msdn.microsoft.com/ja-jp/d69e602e-9a25-4e24-950b-e89eaa2a906b)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>