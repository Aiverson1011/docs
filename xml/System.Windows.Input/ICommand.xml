<Type Name="ICommand" FullName="System.Windows.Input.ICommand">
  <TypeSignature Language="C#" Value="public interface ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ICommand" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>コマンドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Input.RoutedUICommand> の 2 つの実装には、 <xref:System.Windows.Input.ICommand> インターフェイスで [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]します。  
  
## Windows で ICommand ランタイム アプリ  
 <xref:System.Windows.Input.ICommand> インターフェイスは、アプリの Windows ランタイム用 .NET で記述されているコマンドのあるコード コントラクトです。 これらのコマンドは、Windows ランタイム XAML などの UI 要素のコマンド実行の動作を提供 `Button` と具体的には、 `AppBarButton`です。 Windows ランタイム アプリ用のコマンドを定義している場合、基本的に同じ手法を使用、.NET アプリケーション用のコマンドを定義するために使用します。 実装するクラスを定義することで、コマンドを実装する <xref:System.Windows.Input.ICommand> および実装では具体的には、 <xref:System.Windows.Input.ICommand.Execute%2A> メソッドです。  
  
 Windows ランタイムの XAML をサポートしない x`:Static`, を使用しようとしていないため、 `x:Static` コマンドを使用して Windows ランタイムの XAML の場合、マークアップ拡張機能です。 また、この XAML 構文には完全には当てはまりませんインターフェイスを実装して Windows ランタイムの使用するためのコマンドを定義している場合のため、Windows ランタイムには、定義済みのコマンドのライブラリはありません。  
  
<a name="xamlTextUsage_ICommand"></a>   
## XAML 属性の使用方法  
 \<*オブジェクト プロパティ*\="*predefinedCommandName*"\/\>  
  
 または  
  
 \<*オブジェクト プロパティ*\="*predefinedCommandName.predefinedCommandName*"\/\>  
  
 または  
  
 \<*オブジェクト プロパティ*\="{ *customClassName.customCommandName*}"\/\>  
  
<a name="xamlValues_ICommand"></a>   
## XAML 値  
 *predefinedClassName*  
 定義済みのコマンド クラスのいずれかです。  
  
 *predefinedCommandName*  
 定義済みのコマンドのいずれかです。  
  
 *customClassName*  
 カスタム コマンドが含まれたカスタム クラスです。 カスタム クラスは一般に必要な `xlmns` プレフィックスのマッピングは [XAML 名前空間および WPF XAML の名前空間マッピング](http://msdn.microsoft.com/ja-jp/5c0854e3-7470-435d-9fe2-93eec9d3634e)します。  
  
 *customCommandName*  
 カスタム コマンドです。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">コマンドにより使用されるデータです。  コマンドにデータを渡す必要がない場合は、このオブジェクトを <see langword="null" /> に設定できます。</param>
        <summary>現在の状態でコマンドが実行可能かどうかを決定するメソッドを定義します。</summary>
        <returns>このコマンドを実行できる場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Typically, a command source calls the <xref:System.Windows.Input.ICommand.CanExecute%2A> method when the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event is raised.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommandSource" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.ICommand.CanExecuteChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コマンドを実行するかどうかに影響するような変更があった場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Normally, a command source calls <xref:System.Windows.Input.ICommand.CanExecute%2A> on the command when this event occurs.  
  
 Normally, if the command cannot execute, the command source disables itself.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommandSource" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ICommand.Execute(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">コマンドにより使用されるデータです。  コマンドにデータを渡す必要がない場合は、このオブジェクトを <see langword="null" /> に設定できます。</param>
        <summary>コマンドが起動される際に呼び出すメソッドを定義します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommandSource" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>