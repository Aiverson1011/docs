<Type Name="Touch" FullName="System.Windows.Input.Touch">
  <TypeSignature Language="C#" Value="public static class Touch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Touch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Touch" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>マルチタッチ オペレーティング システムからの入力を処理するアプリケーション レベル サービスを提供し、 <see cref="E:System.Windows.Input.Touch.FrameReported" /> イベントです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Input.Touch.FrameReported> に含まれるイベント [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] Silverlight との互換性をサポートするためにします。 Silverlight との互換性を確保する必要はありませんなどのタッチ イベントを使用して <xref:System.Windows.UIElement.TouchDown> と <xref:System.Windows.UIElement.TouchMove>, の <xref:System.Windows.UIElement>, 、<xref:System.Windows.UIElement3D>, 、または <xref:System.Windows.ContentElement>です。  
  
 <xref:System.Windows.Input.Touch.FrameReported> イベント モデルを使用しない、同じイベントとその他の WPF の入力イベントなど <xref:System.Windows.UIElement.TouchDown> と <xref:System.Windows.UIElement.TouchMove>です。 潜在的な UI のオブジェクト ツリーを使用してルーティングされる要素に固有のイベントとして公開されているのではなく、 <xref:System.Windows.Input.Touch.FrameReported> イベントは、アプリケーション レベルで処理される 1 つのイベントです。 したがって、使用することはできません、 `sender` タッチされる要素を決定するイベント ハンドラーのパラメーターです。  
  
 使用して、 <xref:System.Windows.Input.TouchFrameEventArgs> を取得する、 <xref:System.Windows.Input.TouchPoint> タッチ イベントに関連する値。<xref:System.Windows.Input.TouchPoint>, 、取得できます、 <xref:System.Windows.Input.TouchPoint.Position%2A> 、タッチの決定とかどうか、 <xref:System.Windows.Input.TouchAction> が、 <xref:System.Windows.Input.TouchAction.Down>, 、<xref:System.Windows.Input.TouchAction.Move>, 、または <xref:System.Windows.Input.TouchAction.Up> アクション。 使用することも、 <xref:System.Windows.Input.TouchPoint> を取得する、 <xref:System.Windows.Input.TouchDevice>です。<xref:System.Windows.Input.TouchDevice>, 、デバイスを決定する <xref:System.Windows.Input.TouchDevice.Id%2A> が指す要素に関する情報を取得します。  
  
   
  
## 例  
 次の例できる単純なパターンを作成することができます、 <xref:System.Windows.Controls.Canvas> タッチ スクリーンで 2 本の指をドラッグします。 各タッチがによって表される、 <xref:System.Windows.Input.TouchDevice>です。パターンは、タッチによって提供されるタッチ点を結ぶ線を描画することによって作成されます。 この例では、Windows タッチ対応画面が必要です。  
  
 次のマークアップで構成されるユーザー インターフェイスの作成、 <xref:System.Windows.Controls.Canvas> の中央に配置されるが、 <xref:System.Windows.Controls.Grid>です。  
  
 [!code-xml[TouchFrameSample\#000](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml#000)]  
  
 次のコードでハンドル、 <xref:System.Windows.Input.Touch.FrameReported> イベントです。 タッチを押したときに、 <xref:System.Windows.Controls.Canvas>, 、 <xref:System.Windows.Input.TouchDevice> にキャプチャされて、 <xref:System.Windows.Controls.Canvas>です。 タッチを持ち上げると、 <xref:System.Windows.Input.TouchDevice> を解放します。 タッチが間で移動すると、 <xref:System.Windows.Controls.Canvas>, 、 <xref:System.Windows.Input.TouchDevice.Id%2A> がオンになっています。 最初のタッチの場合は、その場所が記録されます。 2 番目のタッチの場合は、最初のタッチ位置から 2 番目のタッチの位置に線を描画します。  
  
 [!code-csharp[TouchFrameSample\#100](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#100)]
 [!code-vb[TouchFrameSample\#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#100)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FrameReported">
      <MemberSignature Language="C#" Value="public static event System.Windows.Input.TouchFrameEventHandler FrameReported;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TouchFrameEventHandler FrameReported" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Touch.FrameReported" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TouchFrameEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タッチ メッセージが送信されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 フレームは、一連のマルチタッチ メッセージまたはタッチ ポイントで 1 つです。 処理することにより、タッチに対応できる、 <xref:System.Windows.Input.Touch.FrameReported> イベントおよびの詳細にアクセスする、 <xref:System.Windows.Input.TouchPoint> から、 <xref:System.Windows.Input.TouchFrameEventArgs> イベント データ。  
  
 <xref:System.Windows.Input.Touch.FrameReported> イベントが他の同一のイベント モデルを使用しない [!INCLUDE[TLA#tla_titlewinclient](~/includes/tlasharptla-titlewinclient-md.md)] などの入力イベント、 <xref:System.Windows.UIElement.TouchDown> と <xref:System.Windows.UIElement.TouchMove>です。 潜在的な UI のオブジェクト ツリーを使用してルーティングされる要素に固有のイベントとして公開されているのではなく、 <xref:System.Windows.Input.Touch.FrameReported> イベントは、アプリケーション レベルで処理される 1 つのイベントです。 したがって、使用することはできません、 `sender` タッチされる要素を決定するイベント ハンドラーのパラメーターです。  
  
   
  
## 例  
 次の例のハンドル、 <xref:System.Windows.Input.Touch.FrameReported> イベントです。 タッチを押したときに、 <xref:System.Windows.Controls.Canvas>, 、 <xref:System.Windows.Input.TouchDevice> にキャプチャされて、 <xref:System.Windows.Controls.Canvas>です。 タッチを持ち上げると、 <xref:System.Windows.Input.TouchDevice> を解放します。 タッチが間で移動すると、 <xref:System.Windows.Controls.Canvas>, 、 <xref:System.Windows.Input.TouchDevice.Id%2A> がオンになっています。 最初のタッチの場合は、その場所が記録されます。 2 番目のタッチの場合は、最初のタッチ位置から 2 番目のタッチの位置に線を描画します。  
  
 この例で使用できるサンプルが大きくの一部である、 <xref:System.Windows.Input.Touch> クラスの概要です。  
  
 [!code-csharp[TouchFrameSample\#110](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#110)]
 [!code-vb[TouchFrameSample\#110](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#110)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>