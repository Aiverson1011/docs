<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">ハンドラーを呼び出すコマンド ターゲットです。</param>
    <param name="e">イベントのデータ。</param>
    <summary>
      <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> イベントを処理するメソッドを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> イベント ソースに関連付けられているコマンドがコマンドのターゲットで実行できるかどうかを決定します。 コマンドにコマンド ソース、ターゲットを指定するかどうかに、ターゲットの情報は、を通じて取得できます `sender`します。 場合、 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> がキーボード フォーカスを持つ要素でを通じて取得することもあり、ターゲットに設定されていない `sender`します。  ターゲットのコマンドを実行できると判断された場合、 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=fullName> にプロパティを設定する必要があります `true`、それ以外に設定 `false`します。  
  
 イベント データ ソース、およびターゲットのコマンドを利用する必要はありません。 これは、コマンドの構造は、イベント ルート上で連続する潜在的なターゲットに同じコマンドを実行するコマンドのルーティングで広範囲に依存している場合に実行するより困難ですが、既知コマンドの呼び出しのハンドラーの使用量を制限できます。  
  
   
  
## 例  
 例を次に、 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> が設定された <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> に `true`します。  
  
 [!code-csharp[commandwithhandler\#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler\#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>