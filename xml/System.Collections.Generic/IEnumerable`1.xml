<Type Name="IEnumerable&lt;T&gt;" FullName="System.Collections.Generic.IEnumerable&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IEnumerable&lt;out T&gt; : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumerable`1&lt;+ T&gt; implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEnumerable`1" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">列挙するオブジェクトの型。</typeparam>
    <summary>指定した型のコレクションに対する単純な反復処理をサポートする列挙子を公開します。  
  
 この型の .NET Framework ソース コードを参照するを参照してください。、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/ienumerable.cs#3acf01620172c7f0)します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  この型の .NET Framework ソース コードを参照してください、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/ienumerable.cs#3acf01620172c7f0)します。 ソース コードをオンラインで参照、オフライン表示のリファレンスをダウンロードおよびデバッグ中にソース \(パッチや更新を含む\) をステップsee [instructions](http://referencesource.microsoft.com/).  
  
 <xref:System.Collections.Generic.IEnumerable%601> 内のコレクションの基本インターフェイスは、 <xref:System.Collections.Generic> などの名前空間 <xref:System.Collections.Generic.List%601>, 、<xref:System.Collections.Generic.Dictionary%602>, 、および <xref:System.Collections.Generic.Stack%601> やその他のジェネリック コレクションなど、 <xref:System.Collections.ObjectModel.ObservableCollection%601> と <xref:System.Collections.Concurrent.ConcurrentStack%601>です。 実装するコレクション <xref:System.Collections.Generic.IEnumerable%601> を使用して列挙できる、 `foreach` ステートメントです。 このインターフェイスの非ジェネリック バージョンは、 <xref:System.Collections.IEnumerable?displayProperty=fullName>です。  
  
 このインターフェイスの非ジェネリック バージョンは、 <xref:System.Collections.IEnumerable?displayProperty=fullName>です。  
  
 <xref:System.Collections.Generic.IEnumerable%601> このインターフェイスを実装する場合に実装する必要があります 1 つのメソッドが含まれています <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>, 、これによって、 <xref:System.Collections.Generic.IEnumerator%601> オブジェクトです。 返された <xref:System.Collections.Generic.IEnumerator%601> 公開することで、コレクションを反復処理する機能を提供する <xref:System.Collections.Generic.IEnumerator%601.Current%2A> プロパティです。  
  
   
  
## 例  
 次の例では、実装、 <xref:System.Collections.Generic.IEnumerable%601> インターフェイスとその実装を使用して LINQ クエリを作成する方法です。 実装するときに <xref:System.Collections.Generic.IEnumerable%601>, も実装する必要があります <xref:System.Collections.Generic.IEnumerator%601> または、C\# の場合のみ、使用、 [yield \(C\# Reference\)](http://msdn.microsoft.com/ja-jp/1089194f-9e53-46a2-8642-53ccbe9d414d) キーワードです。 実装する <xref:System.Collections.Generic.IEnumerator%601> も必要です <xref:System.IDisposable> を実装するには、この例では表示されます。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 For another C\# example that demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface, see the [Generics Sample](http://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). This sample uses the **languageKeyword tag is not supported!!!!**  
 keyword instead of implementing <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> is included for parity with non-generic collections; implementing <see cref="T:System.Collections.Generic.IEnumerable`1" /> allows a generic collection to be passed to a method that expects an <see cref="T:System.Collections.IEnumerable" /> object.</para>
    </block>
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
    <altmember cref="N:System.Collections" />
  </Docs>
  <Members>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;out T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理する列挙子を返します。</summary>
        <returns>コレクションの反復処理に使用できる列挙子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返された<xref:System.Collections.Generic.IEnumerator%601>公開することにより、コレクションを反復処理する機能を提供する<xref:System.Collections.Generic.IEnumerator%601.Current%2A>プロパティです。列挙子を使用してコレクションを変更することがなくが、コレクションでは、データを読み取ることができます。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。 この位置では、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> が未定義です。 そのため、呼び出す必要があります、<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドの値を読み取る前に、コレクションの最初の要素に列挙子を進める<xref:System.Collections.Generic.IEnumerator%601.Current%2A>です。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>まで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>としてもう一度呼び出される<xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.Generic.IEnumerator%601.Current%2A>次の要素にします。  
  
 場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`です。 列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`します。 最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.Generic.IEnumerator%601.Current%2A>が定義されていません。<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。  
  
 列挙子は、コレクションへの排他アクセスをないため、コレクションが変更されない限り、列挙子は無効です。 コレクションの変更が加えられた場合など、追加、変更、または要素を削除すると、列挙子が無効になるし、予期しない結果を得ることがあります。 また、コレクションの列挙処理は、スレッド セーフなプロシージャではできません。 スレッド セーフを確保するには、するには、列挙子の中にコレクションをロックするか、コレクションの同期化を実装する必要があります。  
  
 内のコレクションの既定の実装、<xref:System.Collections.Generic?displayProperty=fullName>名前空間が同期されていません。  
  
   
  
## 例  
 次の例は、実装する方法を示します、<xref:System.Collections.Generic.IEnumerable%601>インターフェイスし、その実装を使用して LINQ クエリを作成します。 実装する場合<xref:System.Collections.Generic.IEnumerable%601>、実装する必要がありますも<xref:System.Collections.Generic.IEnumerator%601>または、C\# の場合のみ、使用することができます、[yield \(C\# Reference\)](http://msdn.microsoft.com/ja-jp/1089194f-9e53-46a2-8642-53ccbe9d414d)キーワード。 実装する<xref:System.Collections.Generic.IEnumerator%601>必要もあります<xref:System.IDisposable>実装するこの例では表示されます。  
  
 [!code-csharp[System.Collections.Generic.IEnumerableEx\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEnumerableEx\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.ienumerableex/vb/module1.vb#1)]  
  
 For another C\# example that demonstrates how to implement the <xref:System.Collections.Generic.IEnumerable%601> interface, see the [Generics Sample](http://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593). This sample uses of the **languageKeyword tag is not supported!!!!**  
 keyword instead of implementing <xref:System.Collections.Generic.IEnumerator%601>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
  </Members>
</Type>