<Type Name="List&lt;T&gt;" FullName="System.Collections.Generic.List&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class List&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit List`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.List`1" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">リスト内の要素の型。</typeparam>
    <summary>インデックスを使用してアクセスできる、厳密に型指定されたオブジェクトのリストを表します。 リストの検索、並べ替え、および操作のためのメソッドを提供します。  
  
 この型の .NET Framework ソース コードを参照するを参照してください。、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#cf7f4095e4de7646)します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  この型の .NET Framework ソース コードを参照してください、 [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs#cf7f4095e4de7646)します。 ソース コードをオンラインで参照、オフライン表示のリファレンスをダウンロードおよびデバッグ中にソース \(パッチや更新を含む\) をステップsee [instructions](http://referencesource.microsoft.com/).  
  
 <xref:System.Collections.Generic.List%601> クラスはジェネリックと同等の <xref:System.Collections.ArrayList> クラスです。 実装している、 <xref:System.Collections.Generic.IList%601> サイズが動的に拡大されるとして配列を使用してジェネリック インターフェイスが必要です。  
  
 項目を追加することができます、 <xref:System.Collections.Generic.List%601> を使用して、 <xref:System.Collections.Generic.List%601.Add%2A> または <xref:System.Collections.Generic.List%601.AddRange%2A> メソッドです。  
  
 <xref:System.Collections.Generic.List%601> クラスは、等値比較子と順序比較子の両方を使用します。  
  
-   などのメソッド <xref:System.Collections.Generic.List%601.Contains%2A>, 、<xref:System.Collections.Generic.List%601.IndexOf%2A>, 、<xref:System.Collections.Generic.List%601.LastIndexOf%2A>, 、および <xref:System.Collections.Generic.Dictionary%602.Remove%2A> リスト要素に対して、等値比較子を使用します。 型の既定の等値比較子 `T` は次のように決定されます。 場合型 `T` を実装して、 <xref:System.IEquatable%601> ジェネリック インターフェイスは、等値比較子は、 <xref:System.IEquatable%601.Equals%28%600%29> ; このインターフェイスのメソッド以外の場合の既定の等値比較子は <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>です。  
  
-   などのメソッド <xref:System.Collections.Generic.List%601.BinarySearch%2A> と <xref:System.Collections.Generic.List%601.Sort%2A> リスト要素に対して順序比較子を使用します。 型の既定の比較子 `T` は次のように決定されます。  場合型 `T` を実装して、 <xref:System.IComparable%601> ジェネリック インターフェイスは、既定の比較子は、 <xref:System.IComparable%601.CompareTo%28%600%29> ; このインターフェイスのメソッドそれ以外の場合型 `T` 、非ジェネリックを実装する <xref:System.IComparable> インターフェイスの既定の比較子は、 <xref:System.IComparable.CompareTo%28System.Object%29> そのインターフェイスのメソッドです。 場合型 `T` どちらのインターフェイスを実装する既定の比較子はありませんし、比較子または比較デリゲートを明示的に指定する必要があります。  
  
 <xref:System.Collections.Generic.List%601> 並べ替えは保証されません。  並べ替える必要があります、 <xref:System.Collections.Generic.List%601> 操作を実行する前に \(よう <xref:System.Collections.Generic.List%601.BinarySearch%2A>\) を必要とする、 <xref:System.Collections.Generic.List%601> 並べ替えられます。  
  
 このコレクション内の要素は、整数インデックスを使用してアクセスできます。  このコレクションのインデックスは 0 から始まります。  
  
 非常に大きな <xref:System.Collections.Generic.List%601> オブジェクトを設定して、64 ビット システム上の 20億要素に最大の容量を増やすことができます、 `enabled` する構成要素の属性 `true` 、実行時の環境にします。  
  
 <xref:System.Collections.Generic.List%601> 受け入れる `null` 参照の有効な値型し、重複する要素を使用します。  
  
 変更できないバージョンの <xref:System.Collections.Generic.List%601> を参照してください <xref:System.Collections.Immutable.ImmutableList%601>します。  
  
## パフォーマンスに関する考慮事項  
 使用するかどうかを決定するときに、 <xref:System.Collections.Generic.List%601> または <xref:System.Collections.ArrayList> ことに注意して同様の機能があるは、クラス、 <xref:System.Collections.Generic.List%601> クラスは、ほとんどの場合はパフォーマンスが向上し、タイプ セーフでは、です。 型の参照型を使用する場合 `T` の <xref:System.Collections.Generic.List%601> クラス、2 つのクラスの動作は同じです。 ただし、型の値の型を使用する場合 `T`, 、実装とボックス化を検討する必要があります。  
  
 型の値の型を使用する場合 `T`, 、コンパイラの実装を生成する、 <xref:System.Collections.Generic.List%601> 専用の値型のクラスです。 つまり、リストの要素、 <xref:System.Collections.Generic.List%601> オブジェクトは、要素を使用できる、していないリストの要素をボックス化を保存するメモリがクラスの実装を生成するために使用するメモリより大きい約 500 のリストの要素が作成された後前に、ボックス化する必要はありません。  
  
 型に使用される値型を確認してください `T` を実装して、 <xref:System.IEquatable%601> ジェネリック インターフェイスです。 場合などのメソッド、 <xref:System.Collections.Generic.List%601.Contains%2A> 呼び出す必要があります、 <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> メソッドで、影響を受けるリスト要素のボックスです。 値の型を実装する場合、 <xref:System.IComparable> インターフェイスを所有しているソース コードでも導入、 <xref:System.IComparable%601> ジェネリック インターフェイスを防ぐために、 <xref:System.Collections.Generic.List%601.BinarySearch%2A> と <xref:System.Collections.Generic.List%601.Sort%2A> リストの要素をボックス化のメソッドです。 ソース コードを所有していない場合、 <xref:System.Collections.Generic.IComparer%601> オブジェクトを <xref:System.Collections.Generic.List%601.BinarySearch%2A> と <xref:System.Collections.Generic.List%601.Sort%2A> メソッド  
  
 型に固有の実装を使用すると便利には、 <xref:System.Collections.Generic.List%601> クラスを使用せずに、 <xref:System.Collections.ArrayList> クラスまたは厳密に型指定されたラッパー コレクションを作成します。 理由は、実装がどのような .NET Framework は既にを実行する必要があり、共通言語ランタイムは、Microsoft 中間言語コードと、実装できないのメタデータを共有できますです。  
  
## F\# に関する考慮事項  
 <xref:System.Collections.Generic.List%601> 頻度の低い f\# コードでクラスを使用します。  代わりに、 [F\# Lists](http://msdn.microsoft.com/ja-jp/83102799-f251-42e1-93ef-64232e8c5b1d), は変更不可で、シングル リンク リストは通常優先的に使用します。 F\# リストは、順序付けられた、変更できない一連の値を提供され、関数型スタイルの開発で使用するためにサポートされます。 F\# から使用する場合、<xref:System.Collections.Generic.List%601> クラス通常によって参照される、  [ResizeArray\<'T\>](https://msdn.microsoft.com/library/ee353447.aspx) 名前の f\# リストは競合を回避するため省略形を入力します。  
  
   
  
## 例  
 次の例では、追加、削除、およびで単純なビジネス オブジェクトを挿入する方法、 <xref:System.Collections.Generic.List%601>です。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
  
 次の例は、いくつかのプロパティとメソッド、 <xref:System.Collections.Generic.List%601> 文字列型のジェネリック クラスです。 \(の例については、 <xref:System.Collections.Generic.List%601> の複合型を参照してください、 <xref:System.Collections.Generic.List%601.Contains%2A> メソッドです\)。  
  
 既定のコンス トラクターを使用して、既定の容量を持つ文字列のリストを作成できます。<xref:System.Collections.Generic.List%601.Capacity%2A> プロパティを表示し、 <xref:System.Collections.Generic.List%601.Add%2A> メソッドの使用にいくつかの項目を追加します。 項目が表示され、 <xref:System.Collections.Generic.List%601.Capacity%2A> プロパティが表示されます、と共に、 <xref:System.Collections.Generic.List%601.Count%2A> プロパティは、必要に応じて容量が増加したことを表示します。  
  
 <xref:System.Collections.Generic.List%601.Contains%2A> メソッドを使用して、リスト内のアイテムが存在するかどうかをテスト、 <xref:System.Collections.Generic.List%601.Insert%2A> メソッドを使用して、リストの途中で新しい項目を挿入し、一覧の内容が再び表示されます。  
  
 既定値 <xref:System.Collections.Generic.List%601.Item%2A> プロパティ \(c\# のインデクサー\) を使用して、項目を取得、 <xref:System.Collections.Generic.List%601.Remove%2A> メソッドを使用して、重複する項目を前に追加の最初のインスタンスを削除し、内容が再度表示されます。<xref:System.Collections.Generic.List%601.Remove%2A> メソッドは、常に検出すると、最初のインスタンスを削除します。  
  
 <xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドを使用して、数と一致する容量を削減し、 <xref:System.Collections.Generic.List%601.Capacity%2A> と <xref:System.Collections.Generic.List%601.Count%2A> プロパティが表示されます。 未使用の容量が合計容量の 10% 未満である場合、リストはあるされたサイズ変更されません。  
  
 最後に、 <xref:System.Collections.Generic.List%601.Clear%2A> メソッドを使用して、リストから、すべてのアイテムを削除し、 <xref:System.Collections.Generic.List%601.Capacity%2A> と <xref:System.Collections.Generic.List%601.Count%2A> プロパティが表示されます。  
  
 [!code-cpp[List\`1\_Class\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-fsharp[List\`1\_Class\#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
 [!code-vb[List\`1\_Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>パブリック静的 \(<see langword="Shared" /> Visual Basic では\) この型のメンバーは、スレッド セーフであります。 インスタンス メンバーの場合は、スレッド セーフであるとは限りません。  
  
 複数の読み取り操作を実行しても安全である、 <see cref="T:System.Collections.Generic.List`1" />, が読み取られるときに、コレクションが変更された場合に、問題が発生することができますが、します。 スレッド セーフを確保するには、読み取り中にコレクションをロックまたは書き込み操作です。 読み取りおよび書き込み用の複数のスレッドがアクセスするコレクションを有効にするには、独自に同期を実装する必要があります。 コレクションで組み込みの同期は、クラスを参照してください、 <see cref="N:System.Collections.Concurrent" /> 名前空間。 本質的にスレッド セーフな代わりに、次を参照してください。、 <see cref="T:System.Collections.Immutable.ImmutableList`1" /> クラスです。</threadsafe>
    <altmember cref="T:System.Collections.IList" />
    <altmember cref="T:System.Collections.Immutable.ImmutableList`1" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 容量、 <xref:System.Collections.Generic.List%601> は要素の数を <xref:System.Collections.Generic.List%601> を保持できます。 要素が追加されると、 <xref:System.Collections.Generic.List%601>, 、容量が増加すると自動的に内部の配列を再割り当てすることで必要とします。  
  
 使用して、コレクションのサイズを推定できる場合、 <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> コンス トラクターと、初期量を指定するさまざまな要素を追加するときにサイズ変更操作を実行する必要がある、 <xref:System.Collections.Generic.List%601>です。  
  
 呼び出すことによって、容量を削減できる、 <xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドを設定したり、 <xref:System.Collections.Generic.List%601.Capacity%2A> プロパティに明示的にします。 メモリを再割り当ての容量を削減し、内のすべての要素をコピー、 <xref:System.Collections.Generic.List%601>です。  
  
 このコンス トラクターは、o \(1\) 操作です。  
  
   
  
## 例  
 次の例での既定のコンス トラクター、 <xref:System.Collections.Generic.List%601> ジェネリック クラスです。 表示することで示すように、既定のコンス トラクターが既定の容量でリストを作成、 <xref:System.Collections.Generic.List%601.Capacity%2A> プロパティです。  
  
 例では、追加するには、挿入、およびこれらのメソッドを使用するように、容量がどのように変化するかを示す項目を削除します。  
  
 [!code-cpp[List\`1\_Class\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-fsharp[List\`1\_Class\#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
 [!code-vb[List\`1\_Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">新しいリストに要素がコピーされたコレクション。</param>
        <summary>指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要素の上にコピー、 <xref:System.Collections.Generic.List%601> コレクションの列挙子によって読み取られる順序と同じ順序で。  
  
 このコンス トラクターは、O \(`n`\) 操作の場合、 `n` 内の要素の数は、 `collection`です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.%23ctor%2A> コンス トラクターおよびさまざまなメソッドの <xref:System.Collections.Generic.List%601> 範囲に作用するクラス。 文字列の配列が作成され、配列の要素を持つリストを生成するコンス トラクターに渡されます。<xref:System.Collections.Generic.List%601.Capacity%2A> の初期量であることが、入力要素を保持するために必要な事項を表示するプロパティは、表示します。  
  
 [!code-cpp[List\`1\_Ranges\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Ranges\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1\_Ranges\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="collection" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">新しいリストに格納できる要素の数。</param>
        <summary>空で、指定した初期量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 容量、 <xref:System.Collections.Generic.List%601> は要素の数を <xref:System.Collections.Generic.List%601> を保持できます。 要素が追加されると、 <xref:System.Collections.Generic.List%601>, 、容量が増加すると自動的に内部の配列を再割り当てすることで必要とします。  
  
 初期量を指定する、さまざまな要素を追加するときにサイズ変更操作を実行する必要があるコレクションのサイズを推定できる場合、 <xref:System.Collections.Generic.List%601>です。  
  
 呼び出すことによって、容量を削減できる、 <xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドを設定したり、 <xref:System.Collections.Generic.List%601.Capacity%2A> プロパティに明示的にします。 メモリを再割り当ての容量を削減し、内のすべての要素をコピー、 <xref:System.Collections.Generic.List%601>です。  
  
 このコンス トラクターは、O \(`n`\) 操作の場合、 `n` は `capacity`です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> コンス トラクターです。 A <xref:System.Collections.Generic.List%601> 4 の容量を持つ文字列の作成、ちょうど 4 であるリストの最終的なサイズがわかっているためです。 4 つの文字列に一覧が表示されを使用して読み取り専用コピーを作成、 <xref:System.Collections.Generic.List%601.AsReadOnly%2A> メソッドです。  
  
 [!code-cpp[List\`1\_AsReadOnly\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_AsReadOnly\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1\_AsReadOnly\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> が 0 未満です。</exception>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Add(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> の末尾に追加するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> の末尾にオブジェクトを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> 受け入れる `null` 参照の有効な値型し、重複する要素を使用します。  
  
 場合 <xref:System.Collections.Generic.List%601.Count%2A> と既に同じ <xref:System.Collections.Generic.List%601.Capacity%2A>, の容量、 <xref:System.Collections.Generic.List%601> が増加すると、内部の配列を自動的に再割り当てによって、新しい要素が追加される前に、新しい配列に既存の要素がコピーされたとします。  
  
 場合 <xref:System.Collections.Generic.List%601.Count%2A> がより小さい <xref:System.Collections.Generic.List%601.Capacity%2A>, 、このメソッドは、o \(1\) 操作になります。 容量は、新しい要素を格納するためにする必要がある、このメソッドが O \(`n`\) 操作、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例では、追加、削除、およびで単純なビジネス オブジェクトを挿入する方法、 <xref:System.Collections.Generic.List%601>です。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
  
 次の例は、いくつかのプロパティとメソッド、 <xref:System.Collections.Generic.List%601> ジェネリック クラスを含む、 <xref:System.Collections.Generic.List%601.Add%2A> メソッドです。 既定のコンス トラクターを使用して、容量が 0 の文字列のリストを作成できます。<xref:System.Collections.Generic.List%601.Capacity%2A> プロパティを表示し、 <xref:System.Collections.Generic.List%601.Add%2A> メソッドの使用にいくつかの項目を追加します。 項目が表示され、 <xref:System.Collections.Generic.List%601.Capacity%2A> プロパティが表示されます、と共に、 <xref:System.Collections.Generic.List%601.Count%2A> プロパティは、必要に応じて容量が増加したことを表示します。  
  
 検索、挿入、およびリストから要素を削除するその他のプロパティとメソッドを使用し、最後に、リストをクリアします。  
  
 [!code-cpp[List\`1\_Class\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-fsharp[List\`1\_Class\#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
 [!code-vb[List\`1\_Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">
          <see cref="T:System.Collections.Generic.List`1" /> の末尾に要素が追加されるコレクション。 コレクション自体を <see langword="null" /> にすることはできませんが、型 <c>T</c> が参照型の場合、コレクションに格納する要素は <see langword="null" /> であってもかまいません。</param>
        <summary>指定したコレクションの要素を <see cref="T:System.Collections.Generic.List`1" /> の末尾に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コレクション内の要素の順序を保持、 <xref:System.Collections.Generic.List%601>です。  
  
 場合、新しい <xref:System.Collections.Generic.List%601.Count%2A> \(現在 <xref:System.Collections.Generic.List%601.Count%2A> さらに、コレクションのサイズ\) はより大きくなります <xref:System.Collections.Generic.List%601.Capacity%2A>, の容量、 <xref:System.Collections.Generic.List%601> が増加すると、新しい要素に対応する内部の配列を自動的に再割り当てによってし、新しい要素が追加される前に、既存の要素が新しい配列にコピーします。  
  
 場合、 <xref:System.Collections.Generic.List%601> を増やさずに新しい要素に対応することができます、 <xref:System.Collections.Generic.List%601.Capacity%2A>, 、このメソッドは O \(`n`\) 操作、ここで `n` 追加される要素の数です。 容量は、新しい要素を格納するためにする必要がある、このメソッドが O \(`n` \+ `m`\) 操作、 `n` を追加する要素の数と `m` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.AddRange%2A> メソッドと他の方法は、さまざまな、 <xref:System.Collections.Generic.List%601> 範囲に作用するクラス。 文字列の配列が作成され、配列の要素を持つリストを生成するコンス トラクターに渡されます。<xref:System.Collections.Generic.List%601.AddRange%2A> 、引数としてリストで、メソッドが呼び出されます。 リストの現在の要素がすべての要素を複製して、リストの末尾に追加されたことになります。  
  
 [!code-cpp[List\`1\_Ranges\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Ranges\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1\_Ranges\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="collection" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnly">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!T&gt; AsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AsReadOnly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のコレクションの読み取り専用の <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> ラッパーを返します。</summary>
        <returns>現在の <see cref="T:System.Collections.Generic.List`1" /> をラップする読み取り専用のラッパーとして動作するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 To prevent any modifications to the <xref:System.Collections.Generic.List%601> object, expose it only through this wrapper. A  <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> object does not expose methods that modify the collection. However, if changes are made to the underlying <xref:System.Collections.Generic.List%601> object, the read\-only collection reflects those changes.  
  
 This method is an O\(1\) operation.  
  
   
  
## 例  
 The following example demonstrates the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method. A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4. The list is populated with four strings, and the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method is used to get a read\-only <xref:System.Collections.Generic.IList%601> generic interface implementation that wraps the original list.  
  
 An element of the original list is set to "Coelophysis" using the <xref:System.Collections.Generic.List%601.Item%2A> property \(the indexer in C\#\), and the contents of the read\-only list are displayed again to demonstrate that it is just a wrapper for the original list.  
  
 [!code-cpp[List\`1\_AsReadOnly\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_AsReadOnly\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1\_AsReadOnly\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>既定の比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、既定の比較子を使用して <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> タイプの `T` リストの要素の順序を決定します。<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> かどうかの種類プロパティを確認 `T` を実装して、 <xref:System.IComparable%601> ジェネリック インターフェイスは利用可能な場合に、その実装を使用するとします。  ない場合は、 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> 種類かどうかを確認 `T` を実装して、 <xref:System.IComparable> インターフェイスです。  場合型 `T` いずれのインターフェイスを実装しない <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> スロー、 <xref:System.InvalidOperationException>です。  
  
 <xref:System.Collections.Generic.List%601> 比較子の実装に従って並べられていなければなりません既にそれ以外の場合、\[結果が正しくありません。  
  
 比較する `null` の参照を持つ型が許可されを使用する場合、例外を発生させない、 <xref:System.IComparable%601> ジェネリック インターフェイスです。 ソート時 `null` より少ないその他のオブジェクトと見なされます。  
  
 場合、 <xref:System.Collections.Generic.List%601> だけが含まれて同じ値を持つ複数の要素には、メソッドが戻ると出現回数のいずれかの出現回数、必ずしも 1 つ目のいずれかを返す場合があります。  
  
 場合、 <xref:System.Collections.Generic.List%601> に指定した値が含まれていないメソッドは、負の整数を返します。 この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 \(~\) を適用できます。 値を挿入するときに、 <xref:System.Collections.Generic.List%601>, 、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。  
  
 このメソッドは O\(log `n`\) 操作では、ここで `n` 範囲内の要素の数です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.Sort> メソッドのオーバー ロードと <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> メソッドのオーバー ロードします。 A <xref:System.Collections.Generic.List%601> の文字列を作成して任意の順序で 4 つの文字列に設定します。 一覧が表示されたら、並べ替えが実行し、再び表示されます。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> メソッドのオーバー ロードが、一覧に含まれていない 2 つの文字列の検索に使用し、および <xref:System.Collections.Generic.List%601.Insert%2A> に挿入するメソッドを使用します。 戻り値、 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> 文字列が一覧にないために、メソッドは各ケースで負の値。 ビットごとの補数を実行 \(、~ c\# と Visual C で演算子 `Xor` Visual Basic では\-1\) がこの位置にある検索文字列を超えると、挿入リストの最初の要素のインデックスはこの負の数値の生成の並べ替え順序を保持します。 2 番目の検索文字列は、カーソル位置がリストの末尾であるため、一覧の任意の要素を超えています。  
  
 [!code-cpp[List\`1\_SortSearch\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_SortSearch\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1\_SortSearch\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。  
  
 または  
  
 既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</param>
        <summary>指定した比較子を使用して、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 全体から要素を検索し、その要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 比較演算子は、要素の比較方法をカスタマイズします。 たとえば、使用、 <xref:System.Collections.CaseInsensitiveComparer> 小文字を区別しない文字列の検索を実行する比較演算子とインスタンス。  
  
 場合 `comparer` が指定の要素、 <xref:System.Collections.Generic.List%601> 指定して、指定した値と比較 <xref:System.Collections.Generic.IComparer%601> 実装します。  
  
 場合 `comparer` は `null`, 、既定の比較子 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> 種類かどうかを確認 `T` を実装して、 <xref:System.IComparable%601> ジェネリック インターフェイスは利用可能な場合に、その実装を使用するとします。  ない場合は、 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> 種類かどうかを確認 `T` を実装して、 <xref:System.IComparable> インターフェイスです。  場合型 `T` いずれのインターフェイスを実装しない <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> スロー <xref:System.InvalidOperationException>します。  
  
 <xref:System.Collections.Generic.List%601> 比較子の実装に従って並べられていなければなりません既にそれ以外の場合、\[結果が正しくありません。  
  
 比較する `null` の参照を持つ型が許可されを使用する場合、例外を発生させない、 <xref:System.IComparable%601> ジェネリック インターフェイスです。 ソート時 `null` より少ないその他のオブジェクトと見なされます。  
  
 場合、 <xref:System.Collections.Generic.List%601> だけが含まれて同じ値を持つ複数の要素には、メソッドが戻ると出現回数のいずれかの出現回数、必ずしも 1 つ目のいずれかを返す場合があります。  
  
 場合、 <xref:System.Collections.Generic.List%601> に指定した値が含まれていないメソッドは、負の整数を返します。 この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 \(~\) を適用できます。 値を挿入するときに、 <xref:System.Collections.Generic.List%601>, 、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。  
  
 このメソッドは O\(log `n`\) 操作では、ここで `n` 範囲内の要素の数です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバー ロードと <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバー ロードします。  
  
 例では、実装する DinoCompare という名前の文字列の代替の比較子を定義する、 `IComparer<string>` \(`IComparer(Of String)` Visual basic で `IComparer<String^>` Visual C で\) ジェネリック インターフェイスです。 比較子が次のように動作します。 最初に、比較対照値がテストされます `null`, 、、null 参照が null でないより小さいとして扱われます。 第 2 に、文字列の長さを比較してより長い文字列が大きいと見なされます。 3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。  
  
 A <xref:System.Collections.Generic.List%601> の文字列を作成して任意の順序で 4 つの文字列に設定します。 一覧が再び表示されます、表示されていると、代替の比較子を使用して並べ替えられます。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバー ロードを使用して、さまざまな文字列の一覧を採用していない別の比較子を検索します。<xref:System.Collections.Generic.List%601.Insert%2A> メソッドを使用して、文字列を挿入します。 という名前の関数にこれら 2 つの方法がある `SearchAndInsert`, 、ビットごとの補数をコードと共に \(、~ c\# と Visual C で演算子 `Xor` Visual Basic では\-1\) によって返される負の数値の <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> し、新しい文字列を挿入するためのインデックスとして使用します。  
  
 [!code-cpp[List\`1\_SortSearchComparer\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_SortSearchComparer\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1\_SortSearchComparer\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(int32 index, int32 count, !T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">検索範囲の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索する範囲の長さ。</param>
        <param name="item">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</param>
        <summary>指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> の 1 つの要素の範囲を検索し、その要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 比較演算子は、要素の比較方法をカスタマイズします。 たとえば、使用、 <xref:System.Collections.CaseInsensitiveComparer> 小文字を区別しない文字列の検索を実行する比較演算子とインスタンス。  
  
 場合 `comparer` が指定の要素、 <xref:System.Collections.Generic.List%601> 指定して、指定した値と比較 <xref:System.Collections.Generic.IComparer%601> 実装します。  
  
 場合 `comparer` は `null`, 、既定の比較子 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> 種類かどうかを確認 `T` を実装して、 <xref:System.IComparable%601> ジェネリック インターフェイスは利用可能な場合に、その実装を使用するとします。  ない場合は、 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> 種類かどうかを確認 `T` を実装して、 <xref:System.IComparable> インターフェイスです。  場合型 `T` いずれのインターフェイスを実装しない <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> スロー <xref:System.InvalidOperationException>します。  
  
 <xref:System.Collections.Generic.List%601> 比較子の実装に従って並べられていなければなりません既にそれ以外の場合、\[結果が正しくありません。  
  
 比較する `null` の参照を持つ型が許可されを使用する場合、例外を発生させない、 <xref:System.IComparable%601> ジェネリック インターフェイスです。 ソート時 `null` より少ないその他のオブジェクトと見なされます。  
  
 場合、 <xref:System.Collections.Generic.List%601> だけが含まれて同じ値を持つ複数の要素には、メソッドが戻ると出現回数のいずれかの出現回数、必ずしも 1 つ目のいずれかを返す場合があります。  
  
 場合、 <xref:System.Collections.Generic.List%601> に指定した値が含まれていないメソッドは、負の整数を返します。 この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 \(~\) を適用できます。 値を挿入するときに、 <xref:System.Collections.Generic.List%601>, 、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります。  
  
 このメソッドは O\(log `n`\) 操作では、ここで `n` 範囲内の要素の数です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバー ロードと <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバー ロードします。  
  
 例では、実装する DinoCompare という名前の文字列の代替の比較子を定義する、 `IComparer<string>` \(`IComparer(Of String)` Visual basic で `IComparer<String^>` Visual C で\) ジェネリック インターフェイスです。 比較子が次のように動作します。 最初に、比較対照値がテストされます `null`, 、、null 参照が null でないより小さいとして扱われます。 第 2 に、文字列の長さを比較してより長い文字列が大きいと見なされます。 3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。  
  
 A <xref:System.Collections.Generic.List%601> の文字列を作成して 5 つの herbivorous 恐竜と 3 つから恐竜の名前を設定します。 2 つのグループのそれぞれで名前が特定の並べ替え順序で。 一覧が表示されます恐竜の範囲が並べ替えられた場合は、代替の比較子を使用し、一覧が再び表示されます。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバー ロードを使用して、"Brachiosaurus"恐竜の範囲だけを検索します。 文字列が見つからないとビットごとの補数 \(、~ c\# と Visual C で演算子 `Xor` Visual Basic では\-1\) によって返される負の数値、 <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドは、新しい文字列を挿入するためのインデックスとして使用します。  
  
 [!code-cpp[List\`1\_SortSearchComparerRange\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_SortSearchComparerRange\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1\_SortSearchComparerRange\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において有効な範囲を表していません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内部データ構造体がサイズ変更せずに格納できる要素の合計数を取得または設定します。</summary>
        <value>サイズ変更が必要となるまでに <see cref="T:System.Collections.Generic.List`1" /> に格納できる要素の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required, whereas <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.  
  
 <xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>. If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  
  
 If the capacity is significantly larger than the count and you want to reduce the memory used by the <xref:System.Collections.Generic.List%601>,  you can  decrease capacity by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly to a lower value. When the value of <xref:System.Collections.Generic.List%601.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.  
  
 Retrieving the value of this property is an O\(1\) operation; setting the property is an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is the new capacity.  
  
   
  
## 例  
 The following example demonstrates how to check the capacity and count of a <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 The following example shows the <xref:System.Collections.Generic.List%601.Capacity%2A> property at several points in the life of a list. The default constructor is used to create a list of strings with a capacity of 0, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed to demonstrate this. After the <xref:System.Collections.Generic.List%601.Add%2A> method has been used to add several items, the items are listed, and then the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.  
  
 The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count. Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed again.  
  
 [!code-cpp[List\`1\_Class\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-fsharp[List\`1\_Class\#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
 [!code-vb[List\`1\_Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Collections.Generic.List`1.Capacity" /> は <see cref="P:System.Collections.Generic.List`1.Count" /> より小さい値に設定されます。</exception>
        <exception cref="T:System.OutOfMemoryException">システムで使用可能なメモリが不足しています。</exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> からすべての要素を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601.Count%2A> is set to 0, and references to other objects from elements of the collection are also released.  
  
 <xref:System.Collections.Generic.List%601.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Collections.Generic.List%601>, call the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or set the <xref:System.Collections.Generic.List%601.Capacity%2A> property directly. Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>. Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.  
  
 This method is an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is <xref:System.Collections.Generic.List%601.Count%2A>.  
  
   
  
## 例  
 The following example demonstrates the <xref:System.Collections.Generic.List%601.Clear%2A> method and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class. The <xref:System.Collections.Generic.List%601.Clear%2A> method is used at the end of the program, to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are then displayed.  
  
 [!code-cpp[List\`1\_Class\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-fsharp[List\`1\_Class\#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
 [!code-vb[List\`1\_Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.TrimExcess" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Contains(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>ある要素が <see cref="T:System.Collections.Generic.List`1" /> 内に存在するかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、のオブジェクトの実装で定義されている既定の等値比較子を使用して、等しいかどうかを決定、<xref:System.IEquatable%601.Equals%2A?displayProperty=fullName>メソッド`T`\(リスト内の値の型\)。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作では、ここで`n`は<xref:System.Collections.Generic.List%601.Count%2A>します。  
  
   
  
## 例  
 次の例で、<xref:System.Collections.Generic.List%601.Contains%2A>と<xref:System.Collections.Generic.List%601.Exists%2A>のメソッド、<xref:System.Collections.Generic.List%601>を実装する単純なビジネス オブジェクトを格納している<xref:System.IEquatable%601.Equals%2A>です。  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 次の例は、型の複合オブジェクトの一覧を含む`Cube`です。`Cube`クラスが実装する、<xref:System.IEquatable%601.Equals%2A?displayProperty=fullName>メソッド 2 つのキューブ、ディメンションが同じ場合、等しいと見なされるようにします。 この例では、<xref:System.Collections.Generic.List%601.Contains%2A>メソッドを返します。`true`でキューブが指定した寸法がコレクション内に既にあるためです。  
  
 [!code-csharp[System.Collections.Generic.List.Contains\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.contains/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Contains\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.contains/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertAll&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;TOutput&gt; ConvertAll&lt;TOutput&gt; (Converter&lt;T,TOutput&gt; converter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!!TOutput&gt; ConvertAll&lt;TOutput&gt;(class System.Converter`2&lt;!T, !!TOutput&gt; converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="converter" Type="System.Converter&lt;T,TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">変換後の配列要素の型。</typeparam>
        <param name="converter">各要素の型を変換するための <see cref="T:System.Converter`2" /> デリゲート。</param>
        <summary>現在の <see cref="T:System.Collections.Generic.List`1" /> の要素を別の型に変換し、変換された要素が格納されたリストを返します。</summary>
        <returns>現在の <see cref="T:System.Collections.Generic.List`1" /> の要素の型を変換した後の <see cref="T:System.Collections.Generic.List`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.  The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Converter%602> delegate, and the converted elements are saved in the new <xref:System.Collections.Generic.List%601>.  
  
 The current <xref:System.Collections.Generic.List%601> remains unchanged.  
  
 This method is an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is <xref:System.Collections.Generic.List%601.Count%2A>.  
  
   
  
## 例  
 The following example defines a method named `PointFToPoint` that converts a <xref:System.Drawing.PointF> structure to a <xref:System.Drawing.Point> structure. The example then creates a <xref:System.Collections.Generic.List%601> of <xref:System.Drawing.PointF> structures, creates a `Converter\<PointF, Point>` delegate \(`Converter(Of PointF, Point)` in Visual Basic\) to represent the `PointFToPoint` method, and passes the delegate to the <xref:System.Collections.Generic.List%601.ConvertAll%2A> method. The <xref:System.Collections.Generic.List%601.ConvertAll%2A> method passes each element of the input list to the `PointFToPoint` method and puts the converted elements into a new list of <xref:System.Drawing.Point> structures. Both lists are displayed.  
  
 [!code-cpp[List\`1\_ConvertAll\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_ConvertAll\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1\_ConvertAll\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="converter" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Converter`2" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Collections.Generic.List`1" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。<see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体を互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  
  
 The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.  
  
 This method is an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is <xref:System.Collections.Generic.List%601.Count%2A>.  
  
   
  
## 例  
 The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method. A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 \(leaving index 5 empty\). Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 \(leaving index 11 empty\). The contents of the array are then displayed.  
  
 [!code-cpp[List\`1\_CopyTo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_CopyTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1\_CopyTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.List`1" /> の要素数が、コピー先 <paramref name="array" /> に含めることができる要素数を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Collections.Generic.List`1" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。<see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <param name="arrayIndex">コピーの開始位置とする <c>array</c> のインデックス \(0 から始まる\)。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体を、互換性のある 1 次元配列の、指定したインデックスから始まる位置にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して [CopyTo メソッド \(T\<xref:System.Array.Copy%2A?displayProperty=fullName> 、要素をコピーします。  
  
 要素がコピーされた、 [CopyTo メソッド \(T\<xref:System.Array> を列挙子が反復処理する順序と同じ順序で、 [CopyTo メソッド \(T\<xref:System.Collections.Generic.List%601>です。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は [CopyTo メソッド \(T\<xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例では、次の 3 つのオーバー ロードがすべて、 [CopyTo メソッド \(T\<xref:System.Collections.Generic.List%601.CopyTo%2A> メソッドです。 A [CopyTo メソッド \(T\<xref:System.Collections.Generic.List%601> の文字列を作成して 5 つの文字列を設定します。 15 の要素の空の文字列の配列を作成すると、および [CopyTo メソッド \(T\<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> リストのすべての要素を配列の最初の要素を開始位置として、配列にコピーするメソッドのオーバー ロードを使用します。[CopyTo メソッド \(T\<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> メソッドのオーバー ロードを使用して、すべての要素の配列インデックス 6 で開始位置として、配列のリスト \(インデックス 5 空のまま\) をコピーします。 最後に、 [CopyTo メソッド \(T\<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> インデックス 2 で始まるリストから 3 つの要素をコピーするには、12 \(したままのインデックス 11 空\) のインデックスを配列の開始位置として、配列をメソッドのオーバー ロードを使用します。 配列の内容が表示されます。  
  
 [!code-cpp[List\`1\_CopyTo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_CopyTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1\_CopyTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="arrayIndex" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">ソース内の要素の数 <see cref="T:System.Collections.Generic.List`1" /> から使用可能な領域よりも大きい <paramref name="arrayIndex" /> 変換先の末尾に <paramref name="array" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int index, T[] array, int arrayIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 index, !T[] array, int32 arrayIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">コピーを開始するコピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、0 から始まるインデックス番号。</param>
        <param name="array">
          <see cref="T:System.Collections.Generic.List`1" /> の要素のコピー先となる 1 次元の <see cref="T:System.Array" />。<see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <param name="arrayIndex">コピーの開始位置とする <c>array</c> のインデックス \(0 から始まる\)。</param>
        <param name="count">コピーする要素の数。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうちある範囲の要素を、互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method uses [CopyTo メソッド \(Int32, T\<xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  
  
 The elements are copied to the [CopyTo メソッド \(Int32, T\<xref:System.Array> in the same order in which the enumerator iterates through the [CopyTo メソッド \(Int32, T\<xref:System.Collections.Generic.List%601>.  
  
 This method is an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is **parameterReference tag is not supported!!!!**  
.  
  
   
  
## 例  
 The following example demonstrates all three overloads of the [CopyTo メソッド \(Int32, T\<xref:System.Collections.Generic.List%601.CopyTo%2A> method. A [CopyTo メソッド \(Int32, T\<xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings. An empty string array of 15 elements is created, and the [CopyTo メソッド \(Int32, T\<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array. The [CopyTo メソッド \(Int32, T\<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 \(leaving index 5 empty\). Finally, the [CopyTo メソッド \(Int32, T\<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 \(leaving index 11 empty\). The contents of the array are then displayed.  
  
 [!code-cpp[List\`1\_CopyTo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_CopyTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1\_CopyTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="arrayIndex" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> がコピー元の <see cref="T:System.Collections.Generic.List`1" /> の <see cref="P:System.Collections.Generic.List`1.Count" /> 以上です。  
  
 \-または\-  
  
 コピー元の <see cref="T:System.Collections.Generic.List`1" /> の <paramref name="index" /> から最後までの要素数が、コピー先の <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能な領域を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> に格納されている要素の数を取得します。</summary>
        <value>
          <see cref="T:System.Collections.Generic.List`1" /> に格納されている要素の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601.Capacity%2A> 要素の数を <xref:System.Collections.Generic.List%601> のサイズを変更することが必要に格納できます。<xref:System.Collections.Generic.List%601.Count%2A> 実際に含まれる要素の数が、 <xref:System.Collections.Generic.List%601>です。  
  
 <xref:System.Collections.Generic.List%601.Capacity%2A> 以上の値には、常に <xref:System.Collections.Generic.List%601.Count%2A>します。 場合 <xref:System.Collections.Generic.List%601.Count%2A> を超える <xref:System.Collections.Generic.List%601.Capacity%2A> 変更前の要素をコピーし、新しい要素を追加する前に、内部配列を自動的に再割り当てして要素を追加するときに容量が増加します。  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
   
  
## 例  
 次の例では、容量およびの数を確認する方法、  <xref:System.Collections.Generic.List%601> する単純なビジネス オブジェクトを含むし、使用方法を示します、 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 余分な容量を削除する方法です。  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 次の例では、値、 <xref:System.Collections.Generic.List%601.Count%2A> リストの有効期間を通じてさまざまなポイントでのプロパティです。 リストを作成して、設定し、その要素が表示されたら、 <xref:System.Collections.Generic.List%601.Capacity%2A> と <xref:System.Collections.Generic.List%601.Count%2A> プロパティが表示されます。 これらのプロパティは後にもう一度表示、 <xref:System.Collections.Generic.List%601.TrimExcess%2A> されている方式、呼び出されると、一覧の内容の後にもう一度が消去します。  
  
 [!code-cpp[List\`1\_Class\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-fsharp[List\`1\_Class\#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
 [!code-vb[List\`1\_Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Exists(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> に、指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します。</summary>
        <returns>指定された述語によって定義された条件と一致する要素が少なくとも 1 つ、<see cref="T:System.Collections.Generic.List`1" /> に含まれる場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Predicate%601> を返すメソッドにデリゲート `true` デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。  現在の要素 <xref:System.Collections.Generic.List%601> に個別に渡される、 <xref:System.Predicate%601> 一致が見つかったときにデリゲート、および処理が停止します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.Contains%2A> と <xref:System.Collections.Generic.List%601.Exists%2A>のメソッド、 <xref:System.Collections.Generic.List%601> を実装する単純なビジネス オブジェクトを格納している <xref:System.IEquatable%601.Equals%2A>します。  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 次の例は、 <xref:System.Collections.Generic.List%601.Exists%2A> メソッドを使用して、その他のいくつかの方法、 <xref:System.Predicate%601> 汎用デリゲート。  
  
 A <xref:System.Collections.Generic.List%601> 文字列の作成"saurus"で終わる \(位置 1 と 5 など\) のうちの 2 つの 8 恐竜名前を含みます。 という名前の検索述語メソッドも定義 `EndsWithSaurus`, 文字列パラメーターを受け入れる、およびブール値を返しますが、入力文字列では"かどうかを示すを値します。  
  
 <xref:System.Collections.Generic.List%601.Find%2A>, 、<xref:System.Collections.Generic.List%601.FindLast%2A>, 、および <xref:System.Collections.Generic.List%601.FindAll%2A> メソッドを使用して検索の述語メソッドを使用して、一覧を検索し、 <xref:System.Collections.Generic.List%601.RemoveAll%2A> "saurus"で終わるすべてのエントリを削除するメソッドを使用します。  
  
 最後に、 <xref:System.Collections.Generic.List%601.Exists%2A> メソッドが呼び出されます。 各要素を順番に渡す最初からリストを走査して、 `EndsWithSaurus` メソッドです。 検索は停止し、メソッドが返す `true` 場合、 `EndsWithSaurus` メソッドが返す `true` のすべての要素。<xref:System.Collections.Generic.List%601.Exists%2A> メソッドが返す `false` などすべての要素が削除されているためです。  
  
> [!NOTE]
>  C\# と Visual Basic での必要はありませんを作成する、 `Predicate<string>` 委任 \(`Predicate(Of String)` Visual Basic で\) 明示的にします。 これらの言語では、コンテキストから適切なデリゲートを推論し、自動的に作成します。  
  
 [!code-cpp[List\`1\_FindEtAl\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_FindEtAl\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1\_FindEtAl\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public T Find (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Find(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>指定された述語によって定義された条件と一致する要素を検索し、<see cref="T:System.Collections.Generic.List`1" /> 全体の中で最もインデックス番号の小さい要素を返します。</summary>
        <returns>見つかった場合は、指定された述語によって定義された条件と一致する最初の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Predicate%601> を返すメソッドにデリゲート `true` デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。  現在の要素 <xref:System.Collections.Generic.List%601> に個別に渡される、 <xref:System.Predicate%601> にデリゲート、 <xref:System.Collections.Generic.List%601>, 、最初の要素の開始日と最後の要素で終了します。  一致が見つかった場合は、処理が停止しました。  
  
> [!IMPORTANT]
>  値の型を含むリストを検索するときに、型の既定値は、検索述語を満たさないことを確認します。 それ以外の場合、一致が検出されなかったことを示す既定値と、型の既定値が含まれているリスト要素を区別する方法はありません。 既定値は、検索述語を満たして、 <xref:System.Collections.Generic.List%601.FindIndex%2A> メソッド代わりにします。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.Find%2A> メソッドを <xref:System.Collections.Generic.List%601> 簡単な複雑なオブジェクトを格納しています。  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 次の例では、find メソッド、 <xref:System.Collections.Generic.List%601> クラスです。 例を <xref:System.Collections.Generic.List%601> クラスに含まれる `book` クラスのオブジェクト `Book`, 、データを使用して、 [Sample XML File: Books \(LINQ to XML\)](http://msdn.microsoft.com/ja-jp/94252daf-6097-4625-afc2-0eb778958d4f)です。`FillList` 例のメソッドを使用して [LINQ to XML](http://msdn.microsoft.com/ja-jp/f0fe21e9-ee43-4a55-b91a-0800e5782c13) のプロパティの値には、XML からの値を解析する、 `book` オブジェクトです。  
  
 次の表では、find メソッドに提供される例について説明します。  
  
|メソッド|例|  
|----------|-------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|ID を使用して、本を検索、 `IDToFind` predicate デリゲートです。<br /><br /> C\# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|すべての書籍を持つ検索 `Genre` プロパティは、「コンピューター」を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|2001 年を使用する前に、発行日を含むコレクション内の最後の書籍を検索、 `PubBefore2001` predicate デリゲートです。<br /><br /> C\# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|コンピューター帳を使用して最初のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|使用してコンピューター書籍の最後のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|2 つ目の最初のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、 `FindComputer` predicate デリゲートです。|  
  
 [!code-csharp[List\`1\_Find\_Methods\#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1\_Find\_Methods\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindAll">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; FindAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; FindAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>指定された述語によって定義された条件と一致するすべての要素を取得します。</summary>
        <returns>指定した述語によって定義される条件に一致する要素が見つかった場合は、そのすべての要素を格納する <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は、空の <see cref="T:System.Collections.Generic.List`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Predicate%601> を返すメソッドにデリゲート `true` デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。  現在の要素 <xref:System.Collections.Generic.List%601> に個別に渡される、 <xref:System.Predicate%601> デリゲート、および条件に一致する要素の保存、返される <xref:System.Collections.Generic.List%601>です。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例では、find メソッド、 <xref:System.Collections.Generic.List%601> クラスです。 例を <xref:System.Collections.Generic.List%601> クラスに含まれる `book` クラスのオブジェクト `Book`, 、データを使用して、 [Sample XML File \(LINQ to XML\)](http://msdn.microsoft.com/ja-jp/94252daf-6097-4625-afc2-0eb778958d4f)です。`FillList` 例のメソッドを使用して [LINQ to XML](http://msdn.microsoft.com/ja-jp/f0fe21e9-ee43-4a55-b91a-0800e5782c13) のプロパティの値には、XML からの値を解析する、 `book` オブジェクトです。  
  
 次の表では、find メソッドに提供される例について説明します。  
  
|メソッド|例|  
|----------|-------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|ID を使用して、本を検索、 `IDToFind` predicate デリゲートです。<br /><br /> C\# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|すべての書籍を持つ検索 `Genre` プロパティは、「コンピューター」を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|2001 年を使用する前に、発行日を含むコレクション内の最後の書籍を検索、 `PubBefore2001` predicate デリゲートです。<br /><br /> C\# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|コンピューター帳を使用して最初のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|使用してコンピューター書籍の最後のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|2 つ目の最初のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、 `FindComputer` predicate デリゲートです。|  
  
 [!code-csharp[List\`1\_Find\_Methods\#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1\_Find\_Methods\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> はフォワード最初の要素を起点と最後の要素で終わる検索します。  
  
 <xref:System.Predicate%601> を返すメソッドにデリゲート `true` デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。  現在の要素 <xref:System.Collections.Generic.List%601> に個別に渡される、 <xref:System.Predicate%601> を委任します。 デリゲートは、シグネチャを持ちます。  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例、 `Employee` 2 つのフィールドを持つクラス `Name` と `Id`です。 定義、 `EmployeeSearch` 単一のメソッドとクラス `StartsWith`, を示すかどうか、 `Employee.Name` フィールドに用意されている指定した部分文字列で始まる、 `EmployeeSearch` クラスのコンス トラクターです。 このメソッドのシグネチャに注意してください。  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 渡すことができるデリゲートのシグネチャに対応する、 <xref:System.Collections.Generic.List%601.FindIndex%2A> メソッドです。 インスタンス化、 `List<Employee>` オブジェクト、いくつかの追加 `Employee` objets し、その呼び出しを <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> メソッドは、最初の最初にコレクション全体を検索するには、2 回 `Employee` オブジェクト `Name` "J"と、最初の 2 回目のフィールドの開始 `Employee` オブジェクト `Name` フィールドは、"Ju"で始まります。  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex2.cs#2)]
 [!code-vb[System.Collections.Generic.List.FindIndex\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> の指定したインデックスから最後の要素までの範囲内で、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> 転送を開始位置として検索 `startIndex` と最後の要素で終了します。  
  
 <xref:System.Predicate%601> を返すメソッドにデリゲート `true` デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。  現在の要素 <xref:System.Collections.Generic.List%601> に個別に渡される、 <xref:System.Predicate%601> を委任します。 デリゲートは、シグネチャを持ちます。  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` から要素の数は、 `startIndex` の末尾に、 <xref:System.Collections.Generic.List%601>です。  
  
   
  
## 例  
 次の例、 `Employee` 2 つのフィールドを持つクラス `Name` と `Id`です。 定義、 `EmployeeSearch` 単一のメソッドとクラス `StartsWith`, を示すかどうか、 `Employee.Name` フィールドに用意されている指定した部分文字列で始まる、 `EmployeeSearch` クラスのコンス トラクターです。 このメソッドのシグネチャに注意してください。  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 渡すことができるデリゲートのシグネチャに対応する、 <xref:System.Collections.Generic.List%601.FindIndex%2A> メソッドです。 インスタンス化、 `List<Employee>` オブジェクト、いくつかの追加 `Employee` し、その呼び出しを objets、 <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> 以降その 5 番目のメンバー \(つまり、インデックス 4 メンバー\) でコレクションを検索するには、2 回のメソッドです。 最初の検索、初めて `Employee` オブジェクト `Name` フィールドは、"J"で始まる、最初の 2 番目の時間を検索 `Employee` オブジェクト `Name` フィールドは、"Ju"で始まります。  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex3.cs#3)]
 [!code-vb[System.Collections.Generic.List.FindIndex\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、指定したインデックスから始まり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> 転送を開始位置として検索 `startIndex` で終わる `startIndex` plus `count` 1 を引いた値場合 `count` が 0 より大きい。  
  
 <xref:System.Predicate%601> を返すメソッドにデリゲート `true` デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。  現在の要素 <xref:System.Collections.Generic.List%601> に個別に渡される、 <xref:System.Predicate%601> を委任します。 デリゲートは、シグネチャを持ちます。  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は `count`です。  
  
   
  
## 例  
 次の例、 `Employee` 2 つのフィールドを持つクラス `Name` と `Id`です。 定義、 `EmployeeSearch` 単一のメソッドとクラス `StartsWith`, を示すかどうか、 `Employee.Name` フィールドに用意されている指定した部分文字列で始まる、 `EmployeeSearch` クラスのコンス トラクターです。 このメソッドのシグネチャに注意してください。  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 渡すことができるデリゲートのシグネチャに対応する、 <xref:System.Collections.Generic.List%601.FindIndex%2A> メソッドです。 インスタンス化、 `List<Employee>` オブジェクト、いくつかの追加 `Employee` し、その呼び出しを objets、 <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> コレクション全体を検索するには、2 回のメソッド \(インデックス、インデックス 0 からメンバーは、 <xref:System.Collections.Generic.List%601.Count%2A> \- 1\)。 最初の検索、初めて `Employee` オブジェクト `Name` フィールドは、"J"で始まる、最初の 2 番目の時間を検索 `Employee` オブジェクト `Name` フィールドは、"Ju"で始まります。  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex1.cs#1)]
 [!code-vb[System.Collections.Generic.List.FindIndex\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLast">
      <MemberSignature Language="C#" Value="public T FindLast (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T FindLast(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Collections.Generic.List`1" /> 全体を対象に検索し、最もインデックス番号の大きい要素を返します。</summary>
        <returns>見つかった場合は、指定された述語によって定義された条件と一致する最後の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Predicate%601> を返すメソッドにデリゲート `true` デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。  現在の要素 <xref:System.Collections.Generic.List%601> に個別に渡される、 <xref:System.Predicate%601> 逆方向に移動して、デリゲート、 <xref:System.Collections.Generic.List%601>, 、最後の要素で始まり、最初の要素で終わる。  一致が見つかった場合は、処理が停止しました。  
  
> [!IMPORTANT]
>  値の型を含むリストを検索するときに、型の既定値は、検索述語を満たさないことを確認します。 それ以外の場合、一致が検出されなかったことを示す既定値と、型の既定値が含まれているリスト要素を区別する方法はありません。 既定値は、検索述語を満たして、 <xref:System.Collections.Generic.List%601.FindLastIndex%2A> メソッド代わりにします。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例では、find メソッド、 <xref:System.Collections.Generic.List%601> クラスです。 例を <xref:System.Collections.Generic.List%601> クラスに含まれる `book` クラスのオブジェクト `Book`, 、データを使用して、 [Sample XML File: Books \(LINQ to XML\)](http://msdn.microsoft.com/ja-jp/94252daf-6097-4625-afc2-0eb778958d4f)です。`FillList` 例のメソッドを使用して [LINQ to XML](http://msdn.microsoft.com/ja-jp/f0fe21e9-ee43-4a55-b91a-0800e5782c13) のプロパティの値には、XML からの値を解析する、 `book` オブジェクトです。  
  
 次の表では、find メソッドに提供される例について説明します。  
  
|メソッド|例|  
|----------|-------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|ID を使用して、本を検索、 `IDToFind` predicate デリゲートです。<br /><br /> C\# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|すべての書籍を持つ検索 `Genre` プロパティは、「コンピューター」を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|2001 年を使用する前に、発行日を含むコレクション内の最後の書籍を検索、 `PubBefore2001` predicate デリゲートです。<br /><br /> C\# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|コンピューター帳を使用して最初のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|使用してコンピューター書籍の最後のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|2 つ目の最初のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、 `FindComputer` predicate デリゲートです。|  
  
 [!code-csharp[List\`1\_Find\_Methods\#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1\_Find\_Methods\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> は、最後の要素を起点と最初の要素の終了を逆方向検索します。  
  
 <xref:System.Predicate%601> を返すメソッドにデリゲート `true` デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。  現在の要素 <xref:System.Collections.Generic.List%601> に個別に渡される、 <xref:System.Predicate%601> を委任します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例では、find メソッド、 <xref:System.Collections.Generic.List%601> クラスです。 例を <xref:System.Collections.Generic.List%601> クラスに含まれる `book` クラスのオブジェクト `Book`, 、データを使用して、 [Sample XML File: Books \(LINQ to XML\)](http://msdn.microsoft.com/ja-jp/94252daf-6097-4625-afc2-0eb778958d4f)です。`FillList` 例のメソッドを使用して [LINQ to XML](http://msdn.microsoft.com/ja-jp/f0fe21e9-ee43-4a55-b91a-0800e5782c13) のプロパティの値には、XML からの値を解析する、 `book` オブジェクトです。  
  
 次の表では、find メソッドに提供される例について説明します。  
  
|メソッド|例|  
|----------|-------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|ID を使用して、本を検索、 `IDToFind` predicate デリゲートです。<br /><br /> C\# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|すべての書籍を持つ検索 `Genre` プロパティは、「コンピューター」を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|2001 年を使用する前に、発行日を含むコレクション内の最後の書籍を検索、 `PubBefore2001` predicate デリゲートです。<br /><br /> C\# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|コンピューター帳を使用して最初のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|使用してコンピューター書籍の最後のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|2 つ目の最初のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、 `FindComputer` predicate デリゲートです。|  
  
 [!code-csharp[List\`1\_Find\_Methods\#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1\_Find\_Methods\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">逆方向検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、先頭の要素から指定したインデックスまでの範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> 検索旧バージョンとを開始位置として、 `startIndex` 、その最初の要素で終了します。  
  
 <xref:System.Predicate%601> を返すメソッドにデリゲート `true` デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。  現在の要素 <xref:System.Collections.Generic.List%601> に個別に渡される、 <xref:System.Predicate%601> を委任します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` の先頭から要素の数は、 <xref:System.Collections.Generic.List%601> に `startIndex`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象のセクション内にある要素の数。</param>
        <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、指定したインデックスで終わり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
        <returns>
          <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> 検索旧バージョンとを開始位置として、 `startIndex` で終わる `startIndex` マイナス `count` 1 を加えた場合 `count` が 0 より大きい。  
  
 <xref:System.Predicate%601> を返すメソッドにデリゲート `true` デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。  現在の要素 <xref:System.Collections.Generic.List%601> に個別に渡される、 <xref:System.Predicate%601> を委任します。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は `count`です。  
  
   
  
## 例  
 次の例では、find メソッド、 <xref:System.Collections.Generic.List%601> クラスです。 例を <xref:System.Collections.Generic.List%601> クラスに含まれる `book` クラスのオブジェクト `Book`, 、データを使用して、 [Sample XML File: Books \(LINQ to XML\)](http://msdn.microsoft.com/ja-jp/94252daf-6097-4625-afc2-0eb778958d4f)です。`FillList` 例のメソッドを使用して [LINQ to XML](http://msdn.microsoft.com/ja-jp/f0fe21e9-ee43-4a55-b91a-0800e5782c13) のプロパティの値には、XML からの値を解析する、 `book` オブジェクトです。  
  
 次の表では、find メソッドに提供される例について説明します。  
  
|メソッド|例|  
|----------|-------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|ID を使用して、本を検索、 `IDToFind` predicate デリゲートです。<br /><br /> C\# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|すべての書籍を持つ検索 `Genre` プロパティは、「コンピューター」を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|2001 年を使用する前に、発行日を含むコレクション内の最後の書籍を検索、 `PubBefore2001` predicate デリゲートです。<br /><br /> C\# の例では、匿名デリゲートを使用します。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|コンピューター帳を使用して最初のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|使用してコンピューター書籍の最後のインデックスを検索、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|2 つ目の最初のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、 `FindComputer` predicate デリゲートです。|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|2 番目の最後のコンピューター書籍のインデックスを検索、コレクションの後半を使用して、 `FindComputer` predicate デリゲートです。|  
  
 [!code-csharp[List\`1\_Find\_Methods\#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1\_Find\_Methods\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="ForEach">
      <MemberSignature Language="C#" Value="public void ForEach (Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach(class System.Action`1&lt;!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="action">
          <see cref="T:System.Collections.Generic.List`1" /> の各要素に対して実行する <see cref="T:System.Action`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> の各要素に対して、指定された処理を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Action%601> は、オブジェクトが操作を実行するメソッドにデリゲートが渡されます。  現在の要素 <xref:System.Collections.Generic.List%601> に個別に渡される、 <xref:System.Action%601> を委任します。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
 基になるコレクションの本体での変更、 <xref:System.Action%601> デリゲートはサポートされず、未定義の動作が発生します。  
  
   
  
## 例  
 次の例では、使用、 <xref:System.Action%601> の内容を印刷するデリゲート、 <xref:System.Collections.Generic.List%601> オブジェクトです。 この例では、 `Print` 一覧の内容をコンソールに表示するメソッドを使用します。  
  
> [!NOTE]
>  使用して内容を表示するだけでなく、 `Print` メソッドを C\# コード例の使用をコンソールに結果を表示します。  
  
 [!code-csharp[System.Action\_PrintExample\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action\_PrintExample\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">コレクションの要素が変更されています。</exception>
        <altmember cref="T:System.Action`1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.List`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> を反復処理する列挙子を返します。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1.Enumerator" /> の <see cref="T:System.Collections.Generic.List`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `foreach` C\# 言語のステートメント \(`for each` C\+\+ では、 `For Each` Visual basic\) 列挙子の複雑さを隠蔽します。 したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。  
  
 列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。 この位置では、 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> プロパティが定義されています。 そのため、呼び出す必要があります、 <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> メソッドの値を読み取る前にコレクションの最初の要素を列挙子を進める <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>します。  
  
 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> プロパティまで同じオブジェクトを返す <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> が呼び出されます。<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> は、<xref:System.Collections.Generic.List%601.Enumerator.Current%2A> を次の要素に設定します。  
  
 場合 <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> コレクション、列挙子の末尾が、コレクション内の最後の要素の後に配置されているパスと <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> 返します `false`します。 列挙子があるときはこの位置にある場合、それ以降の呼び出しは、 <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> を返すことも `false`です。 最後の呼び出しの場合 <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> 返される `false`, 、<xref:System.Collections.Generic.List%601.Enumerator.Current%2A> は定義されていません。<xref:System.Collections.Generic.List%601.Enumerator.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。  
  
 コレクションが変更されない限り、列挙子は有効です。 コレクションに対して変更 \(要素の追加、変更、削除など\) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。  
  
 列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。 列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 <xref:System.Collections.Generic?displayProperty=fullName> 名前空間のコレクションの既定の実装は同期されません。  
  
 このメソッドは、o \(1\) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.List`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; GetRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; GetRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">範囲が開始する位置の、0 から始まる <see cref="T:System.Collections.Generic.List`1" /> のインデックス番号。</param>
        <param name="count">範囲内の要素の数。</param>
        <summary>コピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、ある範囲の要素の簡易コピーを作成します。</summary>
        <returns>コピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、ある範囲の要素の簡易コピー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 参照型のコレクションまたはそのコレクションの一部の簡易コピーには、コレクションの要素への参照だけが含まれています。 オブジェクト自体はコピーされません。 新しいリスト内の参照は、元のリスト内の参照と同じオブジェクトをポイントします。  
  
 値型のコレクションまたはそのコレクションの一部の簡易コピーには、コレクションの要素が含まれています。 ただし、コレクションの要素にその他のオブジェクトへの参照が含まれている場合、それらのオブジェクトはコピーされません。 新しいコレクションの要素内の参照は、元のコレクションの要素内の参照と同じオブジェクトをポイントします。  
  
 これに対し、コレクションの詳細コピーが、要素をコピーし、要素が直接または間接的に参照するすべてします。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は `count`です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.GetRange%2A> メソッドとその他の方法、 <xref:System.Collections.Generic.List%601> 範囲に作用するクラス。 この例の最後に、 <xref:System.Collections.Generic.List%601.GetRange%2A> メソッドを使用して、インデックス位置 2 から始まりますリストから 3 つの項目を取得します。<xref:System.Collections.Generic.List%601.ToArray%2A> メソッドが、その結果 <xref:System.Collections.Generic.List%601>, 、3 つの要素の配列を作成します。 配列の要素が表示されます。  
  
 [!code-cpp[List\`1\_Ranges\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Ranges\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1\_Ranges\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> における要素の有効な範囲を表していません。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体から指定したオブジェクトを検索し、最初に見つかったオブジェクトのインデックス \(0 から始まる\) を返します。</summary>
        <returns>
          <paramref name="item" /> 全体を対象に <see cref="T:System.Collections.Generic.List`1" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は –1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> はフォワード最初の要素を起点と最後の要素で終わる検索します。  
  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> の `T`, 、リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例では、次の 3 つのオーバー ロードがすべて、 <xref:System.Collections.Generic.List%601.IndexOf%2A> メソッドです。 A <xref:System.Collections.Generic.List%601> 文字列の作成されると、インデックス位置 0 とインデックスの場所、5 に、2 回表示される 1 つのエントリとします。<xref:System.Collections.Generic.List%601.IndexOf%28%600%29> メソッドのオーバー ロードは、最初からリストを検索し、文字列の最初の出現箇所を検索します。<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> メソッドのオーバー ロードが 3 のインデックスの場所で始まるリストとリストの末尾に至るを検索するために使用し、文字列の 2 番目の出現箇所を検索します。 最後に、 <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバー ロードがインデックス位置 2 から 2 つのエントリの範囲を検索に使用されます。 その範囲で検索文字列のインスタンスが存在しないため、\-1 を返します。  
  
 [!code-cpp[List\`1\_IndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_IndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1\_IndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <param name="index">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 \(ゼロ\) は有効です。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうち指定したインデックスから最後の要素までの要素範囲の中から、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、<paramref name="index" /> から最後の要素までの要素範囲の中で <paramref name="item" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> 転送を開始位置として検索 `index` と最後の要素で終了します。  
  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> の `T`, 、リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` から要素の数は、 `index` の末尾に、 <xref:System.Collections.Generic.List%601>です。  
  
   
  
## 例  
 次の例では、次の 3 つのオーバー ロードがすべて、 <xref:System.Collections.Generic.List%601.IndexOf%2A> メソッドです。 A <xref:System.Collections.Generic.List%601> 文字列の作成されると、インデックス位置 0 とインデックスの場所、5 に、2 回表示される 1 つのエントリとします。<xref:System.Collections.Generic.List%601.IndexOf%28%600%29> メソッドのオーバー ロードは、最初からリストを検索し、文字列の最初の出現箇所を検索します。<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> メソッドのオーバー ロードが 3 のインデックスの場所で始まるリストとリストの末尾に至るを検索するために使用し、文字列の 2 番目の出現箇所を検索します。 最後に、 <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバー ロードがインデックス位置 2 から 2 つのエントリの範囲を検索に使用されます。 その範囲で検索文字列のインスタンスが存在しないため、\-1 を返します。  
  
 [!code-cpp[List\`1\_IndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_IndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1\_IndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <param name="index">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 \(ゼロ\) は正しい値です。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定したインデックスから始まり、指定した数の要素が含まれる <see cref="T:System.Collections.Generic.List`1" /> の要素範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <paramref name="index" /> から始まり、要素数が <paramref name="count" /> 個の要素を含む <see cref="T:System.Collections.Generic.List`1" /> の要素範囲内で <paramref name="item" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> 転送を開始位置として検索 `index` で終わる `index` plus `count` 1 を引いた値場合 `count` が 0 より大きい。  
  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> の `T`, 、リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は `count`です。  
  
   
  
## 例  
 次の例では、次の 3 つのオーバー ロードがすべて、 <xref:System.Collections.Generic.List%601.IndexOf%2A> メソッドです。 A <xref:System.Collections.Generic.List%601> 文字列の作成されると、インデックス位置 0 とインデックスの場所、5 に、2 回表示される 1 つのエントリとします。<xref:System.Collections.Generic.List%601.IndexOf%28%600%29> メソッドのオーバー ロードは、最初からリストを検索し、文字列の最初の出現箇所を検索します。<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> メソッドのオーバー ロードが 3 のインデックスの場所で始まるリストとリストの末尾に至るを検索するために使用し、文字列の 2 番目の出現箇所を検索します。 最後に、 <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバー ロードがインデックス位置 2 から 2 つのエントリの範囲を検索に使用されます。 その範囲で検索文字列のインスタンスが存在しないため、\-1 を返します。  
  
 [!code-cpp[List\`1\_IndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_IndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1\_IndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が <see cref="T:System.Collections.Generic.List`1" /> の正しいインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <c>item</c> を挿入する位置の、0 から始まるインデックス。</param>
        <param name="item">挿入するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 内の指定したインデックスの位置に要素を挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> 受け入れる `null` 参照の有効な値型し、重複する要素を使用します。  
  
 場合 <xref:System.Collections.Generic.List%601.Count%2A> と既に同じ <xref:System.Collections.Generic.List%601.Capacity%2A>, の容量、 <xref:System.Collections.Generic.List%601> が増加すると、内部の配列を自動的に再割り当てによって、新しい要素が追加される前に、新しい配列に既存の要素がコピーされたとします。  
  
 場合 `index` に等しい <xref:System.Collections.Generic.List%601.Count%2A>, 、`item` の末尾に追加された <xref:System.Collections.Generic.List%601>します。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例では、追加、削除、およびで単純なビジネス オブジェクトを挿入する方法、 <xref:System.Collections.Generic.List%601>です。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
  
 次の例は、 <xref:System.Collections.Generic.List%601.Insert%2A> メソッド、およびさまざまな他のプロパティとメソッドの <xref:System.Collections.Generic.List%601> ジェネリック クラスです。 リストが作成されると、要素が追加されます。<xref:System.Collections.Generic.List%601.Insert%2A> メソッドを使用して、一覧の中央に項目を挿入します。 項目を使用して、後で削除は、重複データは、挿入、 <xref:System.Collections.Generic.List%601.Remove%2A> メソッドです。  
  
 [!code-cpp[List\`1\_Class\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-fsharp[List\`1\_Class\#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
 [!code-vb[List\`1\_Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> より大きくなっています。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public void InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">新しい要素が挿入される位置の 0 から始まるインデックス。</param>
        <param name="collection">
          <see cref="T:System.Collections.Generic.List`1" /> に要素を挿入するコレクション。 コレクション自体を <see langword="null" /> にすることはできませんが、型 <c>T</c> が参照型の場合、コレクションに格納する要素は <see langword="null" /> であってもかまいません。</param>
        <summary>コレクションの要素を <see cref="T:System.Collections.Generic.List`1" /> 内の指定したインデックスの位置に挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> 受け入れる `null` 参照の有効な値型し、重複する要素を使用します。  
  
 場合、新しい <xref:System.Collections.Generic.List%601.Count%2A> \(現在 <xref:System.Collections.Generic.List%601.Count%2A> さらに、コレクションのサイズ\) はより大きくなります <xref:System.Collections.Generic.List%601.Capacity%2A>, の容量、 <xref:System.Collections.Generic.List%601> が増加すると、新しい要素に対応する内部の配列を自動的に再割り当てによってし、新しい要素が追加される前に、既存の要素が新しい配列にコピーします。  
  
 場合 `index` に等しい <xref:System.Collections.Generic.List%601.Count%2A>, の末尾に要素が追加された <xref:System.Collections.Generic.List%601>します。  
  
 コレクション内の要素の順序を保持、 <xref:System.Collections.Generic.List%601>です。  
  
 このメソッドは O \(`n` \+ `m`\) 操作、場所 `n` が追加される要素の数と `m` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例で <xref:System.Collections.Generic.List%601.InsertRange%2A> メソッドと他の方法は、さまざまな、 <xref:System.Collections.Generic.List%601> 範囲に作用するクラス。 リストを作成していくつか平和恐竜の名前が設定した後、 <xref:System.Collections.Generic.List%601.InsertRange%2A> メソッドを使用して、クリックの肉食事恐竜を 3 つの配列を 3 に、リストに挿入します。  
  
 [!code-cpp[List\`1\_Ranges\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Ranges\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1\_Ranges\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="collection" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> より大きくなっています。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
        <summary>指定したインデックスにある要素を取得または設定します。</summary>
        <value>指定したインデックス位置にある要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> 受け入れる `null` 参照の有効な値型し、重複する要素を使用します。  
  
 このプロパティでは、`myCollection[index]` という構文を使用して、コレクション内の特定の要素にアクセスできます。  
  
 このプロパティの値を取得する場合は、o \(1\) 操作です。プロパティの設定も、o \(1\) 操作です。  
  
   
  
## 例  
 このセクションの例を示しています、 <xref:System.Collections.Generic.List%601.Item%2A> プロパティ \(c\# のインデクサー\) と、その他のプロパティおよびのメソッドをさまざまな、 <xref:System.Collections.Generic.List%601> ジェネリック クラスです。 一覧が表示された後作成および設定を使用して、 <xref:System.Collections.Generic.List%601.Add%2A> メソッド要素が取得されを使用して表示、 <xref:System.Collections.Generic.List%601.Item%2A> プロパティです。 \(を使用する例については、 <xref:System.Collections.Generic.List%601.Item%2A> リストの要素の値を設定するプロパティを参照してください <xref:System.Collections.Generic.List%601.AsReadOnly%2A>.\)  
  
> [!NOTE]
>  Visual Basic、c\#、および C\+\+ すべてにアクセスするための構文がある、 <xref:System.Collections.Generic.List%601.Item%2A> プロパティ名を使用しません。 代わりに、変数を含む、 <xref:System.Collections.Generic.List%601> 配列の場合と同様に使用します。  
  
 C\# 言語キーワードを使用して実装する代わりに、インデクサーの定義、 <xref:System.Collections.Generic.List%601.Item%2A> プロパティです。 Visual Basic は、<xref:System.Collections.Generic.List%601.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。  
  
 [!code-csharp[List`1_Class#2](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#2)]
 [!code-vb[List`1_Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#2)]  
[!code-csharp[List`1_Class#3](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#3)]
[!code-vb[List`1_Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> 以上になっています。</exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体から指定したオブジェクトを検索し、最後に見つかったオブジェクトのインデックス \(0 から始まる\) を返します。</summary>
        <returns>
          <paramref name="item" /> が見つかった場合は、<see cref="T:System.Collections.Generic.List`1" /> 全体で最後に見つかった位置のインデックス番号 \(0 から始まる\)。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> は、最後の要素を起点と最初の要素の終了を逆方向検索します。  
  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> の `T`, 、リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例では、次の 3 つのオーバー ロードがすべて、 <xref:System.Collections.Generic.List%601.LastIndexOf%2A> メソッドです。 A <xref:System.Collections.Generic.List%601> 文字列の作成されると、インデックス位置 0 とインデックスの場所、5 に、2 回表示される 1 つのエントリとします。<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> メソッドのオーバー ロードから最後に、リスト全体を検索し、文字列の 2 番目の出現箇所を検索します。<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> 3 のインデックス位置から始まります。 またリストに最初に見つかった位置の文字列が見つかったため、リストの先頭に継続して旧バージョンとのリストを検索するメソッドのオーバー ロードを使用します。 最後に、 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバー ロードが 4 のインデックス位置にある開始し、逆方向に拡張する 4 つのエントリの範囲を検索に使用される \(つまり、検索 4、3、2、および 1 の場所にある項目\)。 その範囲で検索文字列のインスタンスが存在しないため、この検索は – 1 を返します。  
  
 [!code-cpp[List\`1\_LastIndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_LastIndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1\_LastIndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <param name="index">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、最初の要素から指定したインデックスまでの要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、最初の要素から <paramref name="index" /> までの要素範囲内で <paramref name="item" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> 検索旧バージョンとを開始位置として、 `index` 、その最初の要素で終了します。  
  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> の `T`, 、リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` の先頭から要素の数は、 <xref:System.Collections.Generic.List%601> に `index`します。  
  
   
  
## 例  
 次の例では、次の 3 つのオーバー ロードがすべて、 <xref:System.Collections.Generic.List%601.LastIndexOf%2A> メソッドです。 A <xref:System.Collections.Generic.List%601> 文字列の作成されると、インデックス位置 0 とインデックスの場所、5 に、2 回表示される 1 つのエントリとします。<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> メソッドのオーバー ロードから最後に、リスト全体を検索し、文字列の 2 番目の出現箇所を検索します。<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> 3 のインデックス位置から始まります。 またリストに最初に見つかった位置の文字列が見つかったため、リストの先頭に継続して旧バージョンとのリストを検索するメソッドのオーバー ロードを使用します。 最後に、 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバー ロードが 4 のインデックス位置にある開始し、逆方向に拡張する 4 つのエントリの範囲を検索に使用される \(つまり、検索 4、3、2、および 1 の場所にある項目\)。 その範囲で検索文字列のインスタンスが存在しないため、この検索は – 1 を返します。  
  
 [!code-cpp[List\`1\_LastIndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_LastIndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1\_LastIndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <param name="index">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1" /> のうち、<paramref name="count" /> 個の要素が含まれ、<paramref name="index" /> の位置で終了する要素範囲の中で <paramref name="item" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic.List%601> 検索旧バージョンとを開始位置として、 `index` で終わる `index` マイナス `count` 1 を加えた場合 `count` が 0 より大きい。  
  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> の `T`, 、リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は `count`です。  
  
   
  
## 例  
 次の例では、次の 3 つのオーバー ロードがすべて、 <xref:System.Collections.Generic.List%601.LastIndexOf%2A> メソッドです。 A <xref:System.Collections.Generic.List%601> 文字列の作成されると、インデックス位置 0 とインデックスの場所、5 に、2 回表示される 1 つのエントリとします。<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> メソッドのオーバー ロードから最後に、リスト全体を検索し、文字列の 2 番目の出現箇所を検索します。<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> 3 のインデックス位置から始まります。 またリストに最初に見つかった位置の文字列が見つかったため、リストの先頭に継続して旧バージョンとのリストを検索するメソッドのオーバー ロードを使用します。 最後に、 <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> メソッドのオーバー ロードが 4 のインデックス位置にある開始し、逆方向に拡張する 4 つのエントリの範囲を検索に使用される \(つまり、検索 4、3、2、および 1 の場所にある項目\)。 その範囲で検索文字列のインスタンスが存在しないため、この検索は – 1 を返します。  
  
 [!code-cpp[List\`1\_LastIndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_LastIndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1\_LastIndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Remove(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.Generic.List`1" /> から削除するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
        <summary>特定のオブジェクトで最初に出現したものを <see cref="T:System.Collections.Generic.List`1" /> から削除します。</summary>
        <returns>
          <paramref name="item" /> が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<see langword="false" /> が <paramref name="item" /> に見つからなかった場合にも <see cref="T:System.Collections.Generic.List`1" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合型 `T` を実装して、 <xref:System.IEquatable%601> ジェネリック インターフェイスは、等値比較子は、 <xref:System.IEquatable%601.Equals%2A> ; このインターフェイスのメソッド以外の場合の既定の等値比較子は <xref:System.Object.Equals%2A?displayProperty=fullName>です。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例では、追加、削除、およびで単純なビジネス オブジェクトを挿入する方法、 <xref:System.Collections.Generic.List%601>です。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
  
 次の例で <xref:System.Collections.Generic.List%601.Remove%2A> メソッドです。 いくつかのプロパティとメソッド、 <xref:System.Collections.Generic.List%601> ジェネリック クラスは追加、挿入、および一覧を検索するために使用します。 これらの操作後は、一覧には、重複が含まれています。<xref:System.Collections.Generic.List%601.Remove%2A> メソッドを使用して、重複する項目の最初のインスタンスを削除し、内容が表示されます。<xref:System.Collections.Generic.List%601.Remove%2A> メソッドは、常に検出すると、最初のインスタンスを削除します。  
  
 [!code-cpp[List\`1\_Class\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-fsharp[List\`1\_Class\#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
 [!code-vb[List\`1\_Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public int RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">削除する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>指定した述語によって定義される条件に一致するすべての要素を削除します。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1" /> から削除される要素の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Predicate%601> を返すメソッドにデリゲート `true` デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。  現在の要素 <xref:System.Collections.Generic.List%601> に個別に渡される、 <xref:System.Predicate%601> デリゲート、および条件に一致する要素から削除、 <xref:System.Collections.Generic.List%601>です。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.RemoveAll%2A> メソッドを使用して、その他のいくつかの方法、 <xref:System.Predicate%601> 汎用デリゲート。  
  
 A <xref:System.Collections.Generic.List%601> 文字列の作成"saurus"で終わる \(位置 1 と 5 など\) のうちの 2 つの 8 恐竜名前を含みます。 という名前の検索述語メソッドも定義 `EndsWithSaurus`, 文字列パラメーターを受け入れる、およびブール値を返しますが、入力文字列では"かどうかを示すを値します。  
  
 <xref:System.Collections.Generic.List%601.Find%2A>, 、<xref:System.Collections.Generic.List%601.FindLast%2A>, 、および <xref:System.Collections.Generic.List%601.FindAll%2A> メソッドを使用して、検索述語メソッドを使用して、一覧を検索します。  
  
 <xref:System.Collections.Generic.List%601.RemoveAll%2A> "Saurus"で終わるすべてのエントリを削除するメソッドを使用します。 各要素を順番に渡す最初からリストを走査して、 `EndsWithSaurus` メソッドです。 場合に要素が削除された、 `EndsWithSaurus` メソッドが返す `true`します。  
  
> [!NOTE]
>  C\# と Visual Basic での必要はありませんを作成する、 `Predicate<string>` 委任 \(`Predicate(Of String)` Visual Basic で\) 明示的にします。 これらの言語では、コンテキストから適切なデリゲートを推論し、自動的に作成します。  
  
 最後に、 <xref:System.Collections.Generic.List%601.Exists%2A> メソッドでは、"saurus"で終わるリスト内の文字列がないことを確認します。  
  
 [!code-cpp[List\`1\_FindEtAl\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_FindEtAl\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1\_FindEtAl\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">削除する要素の 0 から始まるインデックス。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> の指定したインデックスにある要素を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと <xref:System.Collections.Generic.List%601.RemoveAt%2A> 削除された項目を置換するアイテムを削除するには、一覧の残りの項目が付け直されます。 たとえば、インデックス 3 のアイテムを削除する場合は、インデックス 4 にある項目が 3 の位置に移動されます。 さらに、リスト内の項目の数 \(で表される、 <xref:System.Collections.Generic.List%601.Count%2A> プロパティ\) が 1 ずつ減少します。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は \(<xref:System.Collections.Generic.List%601.Count%2A> \- `index`\)。  
  
   
  
## 例  
 次の例では、追加、削除、およびで単純なビジネス オブジェクトを挿入する方法、 <xref:System.Collections.Generic.List%601>です。  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> 以上になっています。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">削除する要素の範囲の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">削除する要素の数を指定します。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> から要素の範囲を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 項目が削除されますの規則に従うすべての要素、 <xref:System.Collections.Generic.List%601> 、そのインデックスによって削減あります `count`します。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.RemoveRange%2A> メソッドと他の方法は、さまざまな、 <xref:System.Collections.Generic.List%601> 範囲に作用するクラス。 リストを作成して、変更した後、 <xref:System.Collections.Generic.List%601.RemoveRange%2A> メソッドを使用して、インデックス位置 2 から、一覧から 2 つの要素を削除します。  
  
 [!code-cpp[List\`1\_Ranges\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Ranges\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1\_Ranges\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において要素の有効な範囲を表していません。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体の要素の順序を反転させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して <xref:System.Array.Reverse%2A?displayProperty=fullName> 要素の順序を逆にします。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例では、両方のオーバー ロードの <xref:System.Collections.Generic.List%601.Reverse%2A> メソッドです。 例を作成し、 <xref:System.Collections.Generic.List%601> の文字列し、6 つの文字列を追加します。<xref:System.Collections.Generic.List%601.Reverse> 、リストを反転させるメソッドのオーバー ロードを使用し、 <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> し、要素 1 から始めて、4 つの要素を含む、リストの中央を反転させるメソッドのオーバー ロードを使用します。  
  
 [!code-cpp[List\`1\_Reverse\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Reverse\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1\_Reverse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">反転させる範囲の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">反転させる範囲内にある要素の数。</param>
        <summary>指定した範囲の要素の順序を反転させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して <xref:System.Array.Reverse%2A?displayProperty=fullName> 要素の順序を逆にします。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例では、両方のオーバー ロードの <xref:System.Collections.Generic.List%601.Reverse%2A> メソッドです。 例を作成し、 <xref:System.Collections.Generic.List%601> の文字列し、6 つの文字列を追加します。<xref:System.Collections.Generic.List%601.Reverse> 、リストを反転させるメソッドのオーバー ロードを使用し、 <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> し、要素 1 から始めて、4 つの要素を含む、リストの中央を反転させるメソッドのオーバー ロードを使用します。  
  
 [!code-cpp[List\`1\_Reverse\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Reverse\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1\_Reverse\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において要素の有効な範囲を表していません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> またはその一部の要素を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
## オーバー ロードされたメソッドの構文  
 <xref:System.Collections.Generic.List%601.Sort%2A> メソッドを使用すると、並べ替え、リスト内のオブジェクト型の既定の比較子をまたは顧客の並べ替え方法を指定します。  
  
 [List\<T\>.Sort\(\)](http://msdn.microsoft.com/en-us/library/b0zbh7b6\(v=vs.110\).aspx)  
 オブジェクトの種類の既定の比較子を使用してリスト全体の要素の並べ替えは、リストに保持されます。  
  
 [List\<T\>.Sort M\(Comparison\<T\> comparison\)](http://msdn.microsoft.com/en-us/library/w56d4y5z\(v=vs.110\).aspx)  
 指定した比較子を使用してリスト全体の要素を並べ替えます。  
  
 [List\<T\>.Sort\(IComparer\<T\> comparer\)](http://msdn.microsoft.com/en-us/library/234b841s\(v=vs.110\).aspx)  
 指定されたを使用してリスト全体の要素を並べ替えます <xref:System.Comparison%601?displayProperty=fullName>します。  
  
 [List\<T\>.Sort\(Int32 index, Int32 count, IComparer\<T\> comparer\)](http://msdn.microsoft.com/en-us/library/8ce6t5ad\(v=vs.110\).aspx)  
 指定した比較子を使用して、リスト内の要素の範囲の要素を並べ替えます。  
  
## パラメーター  
  
|パラメーター|型|説明|  
|------------|-------|--------|  
|`comparison`|<xref:System.Comparison%601>|要素を比較するときに使用するデリゲート メソッド|  
|比較演算子|<xref:System.Collections.Generic.IComparer%601>|要素を比較するときに使用するか、HYPERLINK"http:\/\/msdn.microsoft.com\/en\-us\/library\/azhsac5f \(v\=vs.110\).aspx"既定の比較子を使用する場合は null には、HYPERLINK"http:\/\/msdn.microsoft.com\/en\-us\/library\/8ehhxeaf \(v\=vs.110\).aspx"IComparer \< T \> 実装 \< T \> の比較子。既定値です。|  
|`index`|<xref:System.Int32>|並べ替える範囲の開始位置を示す 0 から始まるインデックス。|  
|`count`|<xref:System.Int32>|並べ替える範囲の長さ。|  
  
## 例外  
  
|例外|条件|  
|--------|--------|  
|<xref:System.InvalidOperationException>|`comparer` 指定されていないまたは `null`, 、および既定の比較子 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> の実装を見つけられない、 <xref:System.IComparable%601?displayProperty=fullName> ジェネリック インターフェイスまたは <xref:System.IComparable?displayProperty=fullName> T 型のインターフェイス|  
|<xref:System.ArgumentNullException>|`comparison` は `null` です。|  
|<xref:System.ArgumentException>|実装 `comparison` または `comparer` 、並べ替え中にエラーが発生しました。 たとえば、項目をそれ自体と比較する場合、`comparison` は 0 を返さない可能性があります。<br /><br /> または<br /><br /> `index` および `count` は <xref:System.Collections.Generic.List%601> において有効な範囲を指定していません。|  
|<xref:System.ArgumentOutOfRangeException>|`index` 0 未満または `count` が 0 未満です。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定の比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、既定の比較子を使用して <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> タイプの `T` リストの要素の順序を決定します。<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> かどうかの種類プロパティを確認 `T` を実装して、 <xref:System.IComparable%601> ジェネリック インターフェイスは利用可能な場合に、その実装を使用するとします。  ない場合は、 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> 種類かどうかを確認 `T` を実装して、 <xref:System.IComparable> インターフェイスです。  場合型 `T` いずれのインターフェイスを実装しない <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> スロー、 <xref:System.InvalidOperationException>です。  
  
 このメソッドを使用して、 <xref:System.Array.Sort%2A?displayProperty=fullName> メソッドで、次のように内省的で並べ替えが適用されます。  
  
-   パーティションのサイズが 16 個未満の要素の場合は、挿入ソート アルゴリズムを使用します。  
  
-   パーティションの数が 2 を上回る場合 \* LogN、ここで *N* 範囲 Heapsort アルゴリズムを使用して、入力配列のです。  
  
-   それ以外の場合、クイック ソート アルゴリズムを使用します。  
  
 この実装は、不安定な並べ替えを実行します。つまり、2 つの要素が等しい場合は、その順序が維持されない可能性があります。 これに対し、安定した並べ替えが等しい要素の順序を保持します。  
  
 平均すると、このメソッドは、O \(`n` ログ `n`\) 操作、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>。 最悪の場合は、これは、O \(`n` ^ 2\) 操作です。  
  
   
  
## 例  
 次の例では、いくつかの名前、 `List<String>` 並べ替えられていない場合の順序で一覧を呼び出すオブジェクトの表示、 <xref:System.Collections.Generic.List%601.Sort%2A> メソッド、し、並べ替えられたリストを表示します。  
  
 [!code-csharp[System.Collections.Generic.List.Sort\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/Sort1.cs#2)]
 [!code-vb[System.Collections.Generic.List.Sort\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/Sort1.vb#2)]  
  
 次のコード例、 <xref:System.Collections.Generic.List%601.Sort> と <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> 単純なビジネス オブジェクトのメソッドのオーバー ロードします。 呼び出す、 <xref:System.Collections.Generic.List%601.Sort> 方法により、パート型の既定の比較子の使用、および <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> 匿名メソッドを使用してメソッドを実装します。  
  
 [!code-csharp[System.Collections.Generic.List.Sort\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 次の例は、 <xref:System.Collections.Generic.List%601.Sort> メソッドのオーバー ロードと <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> メソッドのオーバー ロードします。 A <xref:System.Collections.Generic.List%601> の文字列を作成して任意の順序で 4 つの文字列に設定します。 一覧が表示されたら、並べ替えが実行し、再び表示されます。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> メソッドのオーバー ロードが、一覧に含まれていない 2 つの文字列の検索に使用し、および <xref:System.Collections.Generic.List%601.Insert%2A> に挿入するメソッドを使用します。 戻り値、 <xref:System.Collections.Generic.List%601.BinarySearch%2A> 文字列が一覧にないために、メソッドは各ケースで負の値。 ビットごとの補数を実行 \(、~ c\# と Visual C で演算子 `Xor` Visual Basic では\-1\) がこの位置にある検索文字列を超えると、挿入リストの最初の要素のインデックスはこの負の数値の生成の並べ替え順序を保持します。 2 番目の検索文字列は、カーソル位置がリストの末尾であるため、一覧の任意の要素を超えています。  
  
 [!code-cpp[List\`1\_SortSearch\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_SortSearch\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1\_SortSearch\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</param>
        <summary>指定した比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `comparer` が指定の要素、 <xref:System.Collections.Generic.List%601> 指定して並べ替える <xref:System.Collections.Generic.IComparer%601> 実装します。  
  
 場合 `comparer` は `null`, 、既定の比較子 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> 種類かどうかを確認 `T` を実装して、 <xref:System.IComparable%601> ジェネリック インターフェイスは利用可能な場合に、その実装を使用するとします。  ない場合は、 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> 種類かどうかを確認 `T` を実装して、 <xref:System.IComparable> インターフェイスです。  場合型 `T` いずれのインターフェイスを実装しない <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> スロー、 <xref:System.InvalidOperationException>です。  
  
 このメソッドを使用して、 <xref:System.Array.Sort%2A?displayProperty=fullName> メソッドで、次のように内省的で並べ替えが適用されます。  
  
-   パーティションのサイズが 16 個未満の要素の場合は、挿入ソート アルゴリズムを使用します。  
  
-   パーティションの数が 2 を上回る場合 \* LogN、ここで *N* 範囲 Heapsort アルゴリズムを使用して、入力配列のです。  
  
-   それ以外の場合、クイック ソート アルゴリズムを使用します。  
  
 この実装は、不安定な並べ替えを実行します。つまり、2 つの要素が等しい場合は、その順序が維持されない可能性があります。 これに対し、安定した並べ替えが等しい要素の順序を保持します。  
  
 平均すると、このメソッドは、O \(`n` ログ `n`\) 操作、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>。 最悪の場合は、これは、O \(`n` ^ 2\) 操作です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバー ロードと <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバー ロードします。  
  
 例では、実装する DinoCompare という名前の文字列の代替の比較子を定義する、 `IComparer<string>` \(`IComparer(Of String)` Visual basic で `IComparer<String^>` Visual C で\) ジェネリック インターフェイスです。 比較子が次のように動作します。 最初に、比較対照値がテストされます `null`, 、、null 参照が null でないより小さいとして扱われます。 第 2 に、文字列の長さを比較してより長い文字列が大きいと見なされます。 3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。  
  
 A <xref:System.Collections.Generic.List%601> の文字列を作成して任意の順序で 4 つの文字列に設定します。 一覧が再び表示されます、表示されていると、代替の比較子を使用して並べ替えられます。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> メソッドのオーバー ロードを使用して、さまざまな文字列の一覧を採用していない別の比較子を検索します。<xref:System.Collections.Generic.List%601.Insert%2A> メソッドを使用して、文字列を挿入します。 という名前の関数にこれら 2 つの方法がある `SearchAndInsert`, 、ビットごとの補数をコードと共に \(、~ c\# と Visual C で演算子 `Xor` Visual Basic では\-1\) によって返される負の数値の <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> し、新しい文字列を挿入するためのインデックスとして使用します。  
  
 [!code-cpp[List\`1\_SortSearchComparer\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_SortSearchComparer\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1\_SortSearchComparer\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="comparer" /> は <see langword="null" /> であり、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。 たとえば、項目をそれ自体と比較する場合、<paramref name="comparer" /> は 0 を返さない可能性があります。</exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison">要素を比較する場合に使用する <see cref="T:System.Comparison`1" />。</param>
        <summary>指定した <see cref="T:System.Comparison`1" /> を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合`comparison`が提供されるの要素、<xref:System.Collections.Generic.List%601>デリゲートによって表されるメソッドを使用して並べ替えられます。  
  
 場合`comparison`は`null`、<xref:System.ArgumentNullException>がスローされます。  
  
 このメソッドを使用して<xref:System.Array.Sort%2A?displayProperty=fullName>、内省的で並べ替えが次のように適用します。  
  
-   挿入の並べ替えアルゴリズムを使用してパーティションのサイズが 16 個未満の要素の場合は、  
  
-   パーティションの数が 2 を超える場合 \* LogN、N は、入力配列の範囲を使用して、 [Heapsort](http://en.wikipedia.org/wiki/Heapsort)アルゴリズムです。  
  
-   それ以外の場合、クイック ソート アルゴリズムを使用します。  
  
 この実装には、不安定な並べ替えを実行しますつまり、2 つの要素が等しい場合は、その順序が維持されない可能性があります。 これに対し、安定した並べ替えには、同じである要素の順序が保持されます。  
  
 平均すると、このメソッドは、O \(`n`ログ`n`\) 操作、場所`n`は<xref:System.Collections.Generic.List%601.Count%2A>最悪の場合です。 これは、O \(`n` ^ 2\) 操作です。  
  
   
  
## 例  
 次のコード例、<xref:System.Collections.Generic.List%601.Sort%2A>と<xref:System.Collections.Generic.List%601.Sort%2A>単純なビジネス オブジェクトのメソッドのオーバー ロードします。 呼び出す、<xref:System.Collections.Generic.List%601.Sort%2A>メソッドにより、一部の種類の既定の比較子の使用と<xref:System.Collections.Generic.List%601.Sort%2A>匿名メソッドを使用してメソッドを実装します。  
  
 [!code-csharp[System.Collections.Generic.List.Sort\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 次の例で、<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>メソッドのオーバー ロードします。  
  
 例では、名前付き文字列の代替の比較メソッドを定義する`CompareDinosByLength`です。 この方法は次のように、機能: 比較対照値があるテスト最初に、 `null`、null 参照が null でない未満として扱われます。 次に、文字列の長さが比較され、長い文字列は、大きい値を指定するものと見なされます。 3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。  
  
 A<xref:System.Collections.Generic.List%601>の文字列が作成され、任意の順序で、4 つの文字列に設定されます。 一覧は、空の文字列と null 参照にも含まれます。 使用して並べ替えられて、一覧が表示されます、<xref:System.Comparison%601>を表すジェネリック デリゲート、`CompareDinosByLength`メソッドを再び表示されます。  
  
 [!code-cpp[List\`1\_SortComparison\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_SortComparison\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]
 [!code-vb[List\`1\_SortComparison\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="comparison" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="comparison" /> の実装により、並べ替え中にエラーが発生しました。 たとえば、<paramref name="comparison" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</exception>
        <altmember cref="T:System.Comparison`1" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(int32 index, int32 count, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">並べ替える範囲の長さ。</param>
        <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</param>
        <summary>指定した比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内の要素を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合`comparer`が提供されるの要素、<xref:System.Collections.Generic.List%601>指定して並べ替えられた<xref:System.Collections.Generic.IComparer%601>の実装です。  
  
 場合`comparer`は`null`、既定の比較子<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>チェックを入力するかどうか`T`を実装、<xref:System.IComparable%601>ジェネリック インターフェイスし、使用可能な場合は、その実装を使用します。  ない場合は、<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>チェックを入力するかどうか`T`を実装する、<xref:System.IComparable>インターフェイスです。  場合型`T`はいずれのインターフェイスを実装しません<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>スロー、<xref:System.InvalidOperationException>です。  
  
 このメソッドを使用して<xref:System.Array.Sort%2A?displayProperty=fullName>、内省的で並べ替えを次のように適用します。  
  
-   挿入の並べ替えアルゴリズムを使用してパーティションのサイズが 16 個未満の要素の場合は、  
  
-   パーティションの数が 2 を超える場合 \* LogN、N は、入力配列の範囲を使用して、 [Heapsort](http://en.wikipedia.org/wiki/Heapsort)アルゴリズムです。  
  
-   それ以外の場合、クイック ソート アルゴリズムを使用します。  
  
 この実装は、不安定な並べ替えを実行しますつまり、2 つの要素が等しい場合、順序が維持されない可能性があります。 これに対し、安定した並べ替えには、同じである要素の順序が保持されます。  
  
 平均すると、このメソッドは、O \(`n`ログ`n`\) 操作、場所`n`は<xref:System.Collections.Generic.List%601.Count%2A>最悪の場合です。 これは、O \(`n` ^ 2\) 操作です。  
  
   
  
## 例  
 次の例で、<xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードおよび<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドのオーバー ロードです。  
  
 実装する DinoCompare を名前付き文字列の代替の比較演算子が定義されています、 `IComparer<string>` \(`IComparer(Of String)` Visual basic で`IComparer<String^>`Visual C で\) ジェネリック インターフェイス。 比較子が次のように動作: 比較対照値があるテスト最初に、 `null`、null 参照が null でないより小さいとして扱われます。 次に、文字列の長さが比較され、長い文字列は、大きい値を指定するものと見なされます。 3 番目に、長さが等しい場合は、通常の文字列比較は使用されます。  
  
 A<xref:System.Collections.Generic.List%601>の文字列が作成され、5 つ herbivorous 恐竜やから恐竜の 3 つの名前に設定されます。 2 つのグループの各名前はない任意の特定の並べ替え順序でできます。 一覧が表示されます、恐竜の範囲は、代替の比較子を使用して並べ替えられておよびが再度表示されます。  
  
 <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> "Brachiosaurus"恐竜の範囲のみを検索するメソッドのオーバー ロードが使用されるからです。 文字列が見つからないとビットごとの補数 \(、~ c\# および Visual C は、演算子`Xor`Visual Basic では\-1\) によって返される負の数の<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>メソッドは、新しい文字列を挿入するためのインデックスとして使用されます。  
  
 [!code-cpp[List\`1\_SortSearchComparerRange\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_SortSearchComparerRange\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1\_SortSearchComparerRange\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 \-または\-  
  
 <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において有効な範囲を指定していません。  
  
 または  
  
 <paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。 たとえば、項目をそれ自体と比較する場合、<paramref name="comparer" /> は 0 を返さない可能性があります。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。<see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。  
  
 読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理する列挙子を返します。</summary>
        <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `foreach` C\# 言語のステートメント \(`for each` C\+\+ では、 `For Each` Visual basic\) 列挙子の複雑さを隠蔽します。 したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。  
  
 列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。 この位置では、 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> プロパティが定義されています。 そのため、呼び出す必要があります、 <xref:System.Collections.IEnumerator.MoveNext%2A> メソッドの値を読み取る前にコレクションの最初の要素を列挙子を進める <xref:System.Collections.Generic.IEnumerator%601.Current%2A>します。  
  
 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> プロパティまで同じオブジェクトを返す <xref:System.Collections.IEnumerator.MoveNext%2A> が呼び出されます。<xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を次の要素に設定します。  
  
 場合 <xref:System.Collections.IEnumerator.MoveNext%2A> コレクション、列挙子の末尾が、コレクション内の最後の要素の後に配置されているパスと <xref:System.Collections.IEnumerator.MoveNext%2A> 返します `false`します。 列挙子があるときはこの位置にある場合、それ以降の呼び出しは、 <xref:System.Collections.IEnumerator.MoveNext%2A> を返すことも `false`です。 最後の呼び出しの場合 <xref:System.Collections.IEnumerator.MoveNext%2A> 返される `false`, 、<xref:System.Collections.Generic.IEnumerator%601.Current%2A> は定義されていません。<xref:System.Collections.Generic.IEnumerator%601.Current%2A> を、再度、コレクションの最初の要素に設定することはできません。列挙子の新しいインスタンスを作成する必要があります。  
  
 コレクションが変更されない限り、列挙子は有効です。 コレクションに対して変更 \(要素の追加、変更、削除など\) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。  
  
 列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。 列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 <xref:System.Collections.Generic?displayProperty=fullName> 名前空間のコレクションの既定の実装は同期されません。  
  
 このメソッドは、o \(1\) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。<see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <param name="arrayIndex">コピーの開始位置とする <c>array</c> のインデックス \(0 から始まる\)。</param>
        <summary>
          <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  場合、ソースの種類 <xref:System.Collections.ICollection> 変換先の型に自動的にキャストすることはできません `array`, の非ジェネリックの実装 <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> スロー <xref:System.InvalidCastException>, 汎用実装がスローされ、 <xref:System.ArgumentException>です。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="arrayIndex" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> が多次元です。  
  
 または  
  
 <paramref name="array" /> には、0 から始まるインデックス番号がありません。  
  
 または  
  
 ソース内の要素の数 <see cref="T:System.Collections.ICollection" /> から使用可能な領域よりも大きい <paramref name="arrayIndex" /> 変換先の末尾に <paramref name="array" />します。  
  
 または  
  
 ソースの種類 <see cref="T:System.Collections.ICollection" /> 先の型に自動的にキャストできない <paramref name="array" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている \(スレッド セーフである\) かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> へのアクセスが同期されている \(スレッド セーフである\) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。<see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic?displayProperty=fullName> 名前空間のコレクションの既定の実装は同期されません。  
  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。  まれに、列挙型と競合書き込みアクセスでは、列挙中にコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 <xref:System.Collections.ICollection.SyncRoot%2A>アクセスを同期するために使用できるオブジェクトを返します、<xref:System.Collections.ICollection>です。 同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
        <value>
          <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。<see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.Generic?displayProperty=fullName> 名前空間のコレクションの既定の実装は同期されません。  
  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。  列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 <xref:System.Collections.ICollection.SyncRoot%2A>アクセスを同期するために使用できるオブジェクトを返します、<xref:System.Collections.ICollection>です。 同期は、すべてのスレッドがコレクションにアクセスする前にこのオブジェクトをロックする場合のみ有効です。 次のコードの使用を示しています、 <xref:System.Collections.ICollection.SyncRoot%2A> c\#、C\+\+、および Visual Basic のプロパティです。  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot)   
{  
    // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
    ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try   
{  
    Monitor::Enter(ic->SyncRoot);  
    // Access the collection.  
}  
finally   
{  
    Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理する列挙子を返します。</summary>
        <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `foreach` C\# 言語のステートメント \(`for each` C\+\+ では、 `For Each` Visual basic\) 列挙子の複雑さを隠蔽します。 したがって、列挙子を直接操作するのではなく、`foreach` を使用することをお勧めします。  
  
 列挙子を使用すると、コレクション内のデータを読み取ることができますが、基になるコレクションを変更することはできません。  
  
 最初に、列挙子はコレクション内の 1 番目の要素の前に位置付けられます。<xref:System.Collections.IEnumerator.Reset%2A> を実行した場合も、列挙子はこの位置に戻されます。  この位置では、 <xref:System.Collections.IEnumerator.Current%2A> プロパティが定義されています。 そのため、呼び出す必要があります、 <xref:System.Collections.IEnumerator.MoveNext%2A> メソッドの値を読み取る前にコレクションの最初の要素を列挙子を進める <xref:System.Collections.IEnumerator.Current%2A>します。  
  
 <xref:System.Collections.IEnumerator.Current%2A> プロパティでは、同じオブジェクトを取得するまで <xref:System.Collections.IEnumerator.MoveNext%2A> または <xref:System.Collections.IEnumerator.Reset%2A> が呼び出されます。<xref:System.Collections.IEnumerator.MoveNext%2A> は、<xref:System.Collections.IEnumerator.Current%2A> を次の要素に設定します。  
  
 場合 <xref:System.Collections.IEnumerator.MoveNext%2A> コレクション、列挙子の末尾が、コレクション内の最後の要素の後に配置されているパスと <xref:System.Collections.IEnumerator.MoveNext%2A> 返します `false`します。 列挙子があるときはこの位置にある場合、それ以降の呼び出しは、 <xref:System.Collections.IEnumerator.MoveNext%2A> を返すことも `false`です。 最後の呼び出しの場合 <xref:System.Collections.IEnumerator.MoveNext%2A> 返される `false`, 、<xref:System.Collections.IEnumerator.Current%2A> は定義されていません。<xref:System.Collections.IEnumerator.Current%2A> をコレクションの最初の要素にもう一度設定するには、<xref:System.Collections.IEnumerator.Reset%2A> を呼び出してから <xref:System.Collections.IEnumerator.MoveNext%2A> を呼び出します。  
  
 コレクションが変更されない限り、列挙子は有効です。 コレクションに対して変更 \(要素の追加、変更、削除など\) が行われると、列挙子は回復不可能な無効状態になり、その動作は未定義になります。  
  
 列挙子にはコレクションへの排他アクセス権限はないため、コレクションの列挙処理は本質的にスレッド セーフな処理ではありません。  列挙処理でスレッド セーフを確保するには、列挙処理が終わるまでコレクションをロックできます。  コレクションに対し複数のスレッドがアクセスして読み取りや書き込みを行うことができるようにするには、独自に同期化を実装する必要があります。  
  
 <xref:System.Collections.Generic?displayProperty=fullName> 名前空間のコレクションの既定の実装は同期されません。  
  
 このメソッドは、o \(1\) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.IList" /> に追加する <see cref="T:System.Object" />。</param>
        <summary>
          <see cref="T:System.Collections.IList" /> に項目を追加します。</summary>
        <returns>新しい要素が挿入された位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 <xref:System.Collections.Generic.List%601.Count%2A> がより小さい <xref:System.Collections.Generic.List%601.Capacity%2A>, 、このメソッドは、o \(1\) 操作になります。 容量は、新しい要素を格納するためにする必要がある、このメソッドが O \(`n`\) 操作、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="item" /> の型が、<see cref="T:System.Collections.IList" /> に割り当てることができない型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.IList" /> 内で検索される <see cref="T:System.Object" />。</param>
        <summary>
          <see cref="T:System.Collections.IList" /> に特定の値が格納されているかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> の `T`, 、リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.IList" /> 内で検索するオブジェクト。</param>
        <summary>
          <see cref="T:System.Collections.IList" /> 内の特定の項目のインデックスを確認します。</summary>
        <returns>リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> の `T`, 、リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="item" /> 型に割り当てることができませんが、 <see cref="T:System.Collections.IList" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <c>item</c> を挿入する位置の、0 から始まるインデックス。</param>
        <param name="item">
          <see cref="T:System.Collections.IList" /> に挿入するオブジェクト。</param>
        <summary>指定したインデックスの <see cref="T:System.Collections.IList" /> に項目を挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `index` が <xref:System.Collections.IList> 内の項目数に等しければ、`item` が末尾に追加されます。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="item" /> 型に割り当てることができませんが、 <see cref="T:System.Collections.IList" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。<see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 固定サイズのコレクションでは、コレクションの作成後に要素の追加または削除はできませんが、既存の要素の変更はできます。  
  
 固定サイズ コレクションが追加および削除する要素を防止するラッパーで単純なコレクションそのための追加または削除、要素を含む、基になるコレクションが変更された場合、固定サイズ コレクションにはそれらの変更が反映されます。  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。<see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 読み取り専用のコレクションでは、コレクション作成後に要素の追加、削除、または変更はできません。  
  
 読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
        <summary>指定したインデックスにある要素を取得または設定します。</summary>
        <value>指定したインデックス位置にある要素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 C\# 言語を使用して、[この](http://msdn.microsoft.com/ja-jp/d4f827fe-4710-410b-89b8-867dad44b8a3)キーワードを実装する代わりに、インデクサーの定義、<xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A>プロパティです。 Visual Basic は、<xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。  
  
 このプロパティの値を取得する場合は、o \(1\) 操作です。プロパティの設定は、o \(1\) 操作ではもです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
        <exception cref="T:System.ArgumentException">プロパティが設定されてと<paramref name="value" />の型に割り当てることはできませんが、<see cref="T:System.Collections.IList" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Collections.IList" /> から削除するオブジェクト。</param>
        <summary>特定のオブジェクトで最初に出現したものを <see cref="T:System.Collections.IList" /> から削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、既定の等値比較子を使用して等しいかどうかを判断 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> の `T`, 、リスト内の値の型。  
  
 このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="item" /> の型が、<see cref="T:System.Collections.IList" /> に割り当てることができない型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ToArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> の要素を新しい配列にコピーします。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1" /> の要素のコピーを格納する配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要素のコピーを使用して <xref:System.Array.Copy%2A?displayProperty=fullName>, 、これは、O \(`n`\) 操作、ここで `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.ToArray%2A> メソッドとその他の方法、 <xref:System.Collections.Generic.List%601> 範囲に作用するクラス。 この例の最後に、 <xref:System.Collections.Generic.List%601.GetRange%2A> メソッドを使用して、インデックス位置 2 から始まりますリストから 3 つの項目を取得します。<xref:System.Collections.Generic.List%601.ToArray%2A> メソッドが、その結果 <xref:System.Collections.Generic.List%601>, 、3 つの要素の配列を作成します。 配列の要素が表示されます。  
  
 [!code-cpp[List\`1\_Ranges\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Ranges\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1\_Ranges\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrimExcess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 内にある実際の要素数がしきい値未満の場合は、容量をその数に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、コレクションのメモリ オーバーヘッドを最小コレクションに新しい要素が追加されない場合に使用できます。 再割り当てすることと、大規模なコピーのコスト <xref:System.Collections.Generic.List%601> 多く、ただしは、されるため、 <xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドは何も一覧にある容量の 90% を超える場合。 これにより、比較的小さな向上のための大規模な再割り当てコストを発生させることがなくなります。  
  
> [!NOTE]
>  現在のしきい値の 90% は、将来のリリースで変更があります。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
 リセットする、 <xref:System.Collections.Generic.List%601> の初期状態を呼び出し、 <xref:System.Collections.Generic.List%601.Clear%2A> メソッドを呼び出す前に、 <xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドです。 空のトリミング <xref:System.Collections.Generic.List%601> のキャパシティを設定、 <xref:System.Collections.Generic.List%601> を既定の容量。  
  
 使用して、容量を設定することも、 <xref:System.Collections.Generic.List%601.Capacity%2A> プロパティです。  
  
   
  
## 例  
 次の例では、容量およびの数を確認する方法、  <xref:System.Collections.Generic.List%601> する単純なビジネス オブジェクトを含むし、使用方法を示します、 <xref:System.Collections.Generic.List%601.TrimExcess%2A> 余分な容量を削除する方法です。  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 次の例は、 <xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドです。 いくつかのプロパティとメソッド、 <xref:System.Collections.Generic.List%601> を追加、挿入、および文字列のリストから項目を削除するクラスを使用します。<xref:System.Collections.Generic.List%601.TrimExcess%2A> メソッドを使用して、数と一致する容量を削減し、 <xref:System.Collections.Generic.List%601.Capacity%2A> と <xref:System.Collections.Generic.List%601.Count%2A> プロパティが表示されます。 未使用の容量が合計容量の 10% 未満である場合、リストはあるされたサイズ変更されません。 最後に、一覧の内容が消去されます。  
  
 [!code-cpp[List\`1\_Class\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-fsharp[List\`1\_Class\#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
 [!code-vb[List\`1\_Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.Clear" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TrueForAll">
      <MemberSignature Language="C#" Value="public bool TrueForAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrueForAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 内のすべての要素が、指定した述語によって定義される条件に一致するかどうかを調べます。</summary>
        <returns>
          <see cref="T:System.Collections.Generic.List`1" /> 内のすべての要素が、指定した述語によって定義される条件に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 リストに要素がない場合、戻り値は <see langword="true" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Predicate%601> を返すメソッドにデリゲート `true` デリゲートで定義された条件と一致する場合は、オブジェクトに渡されます。  現在の要素 <xref:System.Collections.Generic.List%601> に個別に渡される、 <xref:System.Predicate%601> デリゲート、および処理が停止しているデリゲートが返されるときに `false` のすべての要素。 要素が順番に処理され、すべての呼び出しは 1 つのスレッド上で実行します。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.Generic.List%601.Count%2A>です。  
  
   
  
## 例  
 次の例は、 <xref:System.Collections.Generic.List%601.TrueForAll%2A> メソッドを使用して、その他のいくつかの方法 <xref:System.Predicate%601> 汎用デリゲート。  
  
 A <xref:System.Collections.Generic.List%601> 文字列の作成"saurus"で終わる \(位置 1 と 5 など\) のうちの 2 つの 8 恐竜名前を含みます。 という名前の検索述語メソッドも定義 `EndsWithSaurus`, 文字列パラメーターを受け入れる、およびブール値を返しますが、入力文字列では"かどうかを示すを値します。  
  
 <xref:System.Collections.Generic.List%601.TrueForAll%2A> メソッドでは、リストを走査の各要素を順番に渡す最初から、 `EndsWithSaurus` メソッドです。 検索を停止するときに、 `EndsWithSaurus` メソッドが返す `false`します。  
  
> [!NOTE]
>  C\# と Visual Basic での必要はありませんを作成する、 `Predicate<string>` 委任 \(`Predicate(Of String)` Visual Basic で\) 明示的にします。 これらの言語では、コンテキストから適切なデリゲートを推論し、自動的に作成します。  
  
 [!code-cpp[List\`1\_FindEtAl\#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1\_FindEtAl\#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1\_FindEtAl\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="match" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> またはその一部分から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。 このメソッドは、条件に一致する項目が見つからなかった場合に \-1 を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FindLastIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> またはその一部分から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BinarySearch">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>バイナリ サーチ アルゴリズムを使用して、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の特定の要素またはその一部を検索します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> またはその一部を配列にコピーします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体またはその一部において、最後に値が出現した位置のインデックス番号 \(0 から始まる\) を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Reverse">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> またはその一部の要素の順序を反転させます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Generic.List`1" /> 全体またはその一部において、最初に値が出現した位置のインデックス番号 \(0 から始まる\) を返します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>