<Type Name="HttpRuntimeSection" FullName="System.Web.Configuration.HttpRuntimeSection">
  <TypeSignature Language="C#" Value="public sealed class HttpRuntimeSection : System.Configuration.ConfigurationSection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HttpRuntimeSection extends System.Configuration.ConfigurationSection" />
  <TypeSignature Language="DocId" Value="T:System.Web.Configuration.HttpRuntimeSection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationSection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ASP.NET の HTTP ランタイムを構成します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.HttpRuntimeSection> ASP.NET ランタイムの動作に影響するこれらのパラメーターを処理することができます。  
  
 要素によって示される構成の階層構造内のレベルで使用できる構成ファイル内のノードを示します。  
  
 <xref:System.Web.Configuration.HttpRuntimeSection> セクションには、次を管理するためのディレクティブが含まれています。  
  
-   実行のタイムアウトを要求します。  
  
-   スレッドのアプリケーション レベルでのスケジュール設定するためのディレクティブです。  
  
-   アプリケーション キューの制限を制御するためのディレクティブです。  
  
-   要求の長さ。  
  
 単一のプロセスで複数のアプリケーションを実行するときにできるように、アプリケーションが相互に相対的な優先度を引き上げることができませんこのセクションの内容をロックダウンする必要があります。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpRuntimeSection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.HttpRuntimeSection.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>既定の設定を使用して <see cref="T:System.Web.Configuration.HttpRuntimeSection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、作成する方法、 <xref:System.Web.Configuration.HttpRuntimeSection> オブジェクトです。  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#2)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.ConfigurationAllowDefinition" />
      </Docs>
    </Member>
    <Member MemberName="AllowDynamicModuleRegistration">
      <MemberSignature Language="C#" Value="public bool AllowDynamicModuleRegistration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDynamicModuleRegistration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.AllowDynamicModuleRegistration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("allowDynamicModuleRegistration", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Web.HttpApplication.RegisterModule(System.Type)" /> メソッドの呼び出しが許可されるかどうかを示す値を取得または設定します。 既定値は、<see langword="true" /> です。</summary>
        <value>
          <see cref="M:System.Web.HttpApplication.RegisterModule(System.Type)" /> のメソッド呼び出しが許可される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApartmentThreading">
      <MemberSignature Language="C#" Value="public bool ApartmentThreading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApartmentThreading" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.ApartmentThreading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("apartmentThreading", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションのアパートメント スレッドが有効かどうかを示す値を取得または設定します。</summary>
        <value>アプリケーションのアパートメント スレッドが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値は `false` です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppRequestQueueLimit">
      <MemberSignature Language="C#" Value="public int AppRequestQueueLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AppRequestQueueLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.AppRequestQueueLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("appRequestQueueLimit", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET がアプリケーションに対してキューに置く要求の最大数を示す値を取得または設定します。</summary>
        <value>キューに置くことができる要求の最大数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET は、それを処理するための十分な空きスレッドがある場合、要求をキューします。  
  
> [!NOTE]
>  要求の数のキューに置かれたときに、この設定によって課せられる制限を超えていますと受信要求は拒否されます、"503 \- サーバーがビジー状態"エラー。  
  
   
  
## 例  
 <xref:System.Web.Configuration.HttpRuntimeSection.AppRequestQueueLimit%2A> プロパティを使用する方法を次の例に示します。  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#16](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#16)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#16](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncPreloadMode">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.AsyncPreloadModeFlags AsyncPreloadMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.AsyncPreloadModeFlags AsyncPreloadMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.AsyncPreloadMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("asyncPreloadMode", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.AsyncPreloadModeFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期的にプリロードされる要求エンティティのモードを取得または設定します。</summary>
        <value>要求エンティティのモード。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティでは、前に設定する必要があります。 <xref:System.Web.RequestNotification.ExecuteRequestHandler>ASP.NET パイプラインで設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRegexMatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan DefaultRegexMatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan DefaultRegexMatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.DefaultRegexMatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("defaultRegexMatchTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>一致を実行するために正規表現が許容される時間を取得または設定します。</summary>
        <value>正規表現の一致が許容される時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DelayNotificationTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan DelayNotificationTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan DelayNotificationTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.DelayNotificationTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.TimeSpanSecondsConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("delayNotificationTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>変更通知の遅延を取得または設定します。</summary>
        <value>変更通知の遅延を指定する時間 \(秒単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can address the problem caused by some antivirus applications, when writing information back to the scanned files, by setting the <xref:System.Web.Configuration.HttpRuntimeSection.DelayNotificationTimeout%2A> property.  
  
> [!NOTE]
>  The problem occurs because file changes caused by antivirus scanning cannot be distinguished from the ones made by the user. The end result is the restart of the application whose files are being scanned.  
  
   
  
## 例  
 The following example shows how to use the <xref:System.Web.Configuration.HttpRuntimeSection.DelayNotificationTimeout%2A> property.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#11)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enable">
      <MemberSignature Language="C#" Value="public bool Enable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enable" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.Enable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enable", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーション ドメインが有効かどうかを示す値を取得または設定します。</summary>
        <value>アプリケーション ドメインが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This setting affects the application domain or domains at the current node level and below.  
  
   
  
## 例  
 The following example shows how to use the <xref:System.Web.Configuration.HttpRuntimeSection.Enable%2A> property.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#14](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#14)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableHeaderChecking">
      <MemberSignature Language="C#" Value="public bool EnableHeaderChecking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHeaderChecking" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.EnableHeaderChecking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableHeaderChecking", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ヘッダー チェックが有効かどうかを示す値を取得または設定します。</summary>
        <value>ヘッダー チェックが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The purpose of this property is to enable encoding of the carriage return and newline characters, `\r` and `\n`, that are found in response headers.  
  
 In outbound response headers, the characters that are represented by the codes 0x1F and below are encoded and also the character 0x7F \(delete character\). The only exception is that the character 0x09 \(the tab character\) is unmodified.  
  
 This encoding can help to avoid injection attacks that exploit an application that echoes untrusted data contained by the header.  
  
> [!NOTE]
>  This property does not apply to the status line itself \(status code and status description\), but should apply to other headers. Although  can be set at any level, this property is only applicable at the machine and application level.  
  
 When this property is **languageKeyword tag is not supported!!!!**  
, which is the default, the `\r` or `\n` characters found in a response header are encoded to `%0d` and `%0a`. This defeats header\-injection attacks by making the injected material part of the same header line. This might break the response but should not open attack vectors against the client. Echoing back untrusted data is never a good idea in any situation, though.  
  
> [!IMPORTANT]
>  HTTP header continuations rely on headers spanning multiple lines and require new lines in them. If you need to use header continuations, you need to set the <xref:System.Web.Configuration.HttpRuntimeSection.EnableHeaderChecking%2A> property to **languageKeyword tag is not supported!!!!**  
> . Because there is a performance impact from looking at headers, if you are certain you are already doing the right checks, turning off this feature can improve the performance of your application. Before you disable this feature, be sure you are already taking the right precautions in this area.  
  
   
  
## 例  
 The following example shows how to use the <xref:System.Web.Configuration.HttpRuntimeSection.EnableHeaderChecking%2A> property.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#20](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#20)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#20](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableKernelOutputCache">
      <MemberSignature Language="C#" Value="public bool EnableKernelOutputCache { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableKernelOutputCache" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.EnableKernelOutputCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableKernelOutputCache", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>出力キャッシュが有効かどうかを示す値を取得または設定します。</summary>
        <value>出力キャッシングが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 In order to cache a response, the following criteria need to be met:  
  
-   Caching must be explicitly enabled by a page directive or by the caching API.  
  
-   Caching must have an expiration policy so that the kernel knows when to discard it.  
  
-   Caching cannot have any variable headers or parameters.  
  
-   The request must not require any authentication.  
  
> [!NOTE]
>  This property is relevant only when Internet Information Services \(IIS\) version 6.0 or later is installed.  
  
   
  
## 例  
 The following example shows how to use the <xref:System.Web.Configuration.HttpRuntimeSection.EnableKernelOutputCache%2A> property.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#3)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableVersionHeader">
      <MemberSignature Language="C#" Value="public bool EnableVersionHeader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableVersionHeader" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.EnableVersionHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableVersionHeader", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET でバージョン ヘッダーを出力するかどうかを示す値を取得または設定します。</summary>
        <value>バージョン ヘッダーの出力が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This attribute is used by Visual Studio to determine which version of ASP.NET is in use. It is not necessary for production sites and can be disabled.  
  
   
  
## 例  
 The following example shows how to use the <xref:System.Web.Configuration.HttpRuntimeSection.EnableVersionHeader%2A> property.  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#17](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#17)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#17](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncoderType">
      <MemberSignature Language="C#" Value="public string EncoderType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EncoderType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.EncoderType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("encoderType", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTML エンコードおよび URL エンコードの処理に使用できるカスタムの型の名前を取得または設定します。</summary>
        <value>HTML エンコードおよび URL エンコードの処理に使用できる型の名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET uses the <xref:System.Web.Util.HttpEncoder> type as the default handler for HTML and URL encoding tasks.  
  
 To customize encoding behavior, you can create a class that inherits from the <xref:System.Web.Util.HttpEncoder> type. In the configuration file for an application, you then set the <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> attribute of the **languageKeyword tag is not supported!!!!**  
 element to the fully qualified string name of the custom type. For more information, see [httpRuntime Element \(ASP.NET Settings Schema\)](http://msdn.microsoft.com/ja-jp/e9b81350-8aaf-47cc-9843-5f7d0c59f369).  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutionTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan ExecutionTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ExecutionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.TimeSpanSecondsConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("executionTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.TimeSpanValidator(MaxValueString="10675199.02:48:05.4775807", MinValueString="00:00:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求の最大実行時間を取得または設定します。</summary>
        <value>要求の最大実行時間を示す <see cref="T:System.TimeSpan" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A> プロパティは、要求が ASP.NET によって自動的にシャット ダウンされる前に実行できる秒の最大数を示します。 既定値は、110 秒です。 このタイムアウトを適用要素の debug 属性が設定されている場合にのみ `false`します。  
  
 タイムアウトに達すると、例外が発生します。 イベント ログのアプリケーションのフォルダーに関連する情報を記録できます。 これを行うアプリケーションのヘルスの監視の構成要素を有効にするとします。  
  
   
  
## 例  
 <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A> プロパティを使用する方法を次の例に示します。  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#10)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">要求の実行時に、実行のタイムアウトによって設定された制限を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="FcnMode">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.FcnMode FcnMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.FcnMode FcnMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.FcnMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("fcnMode", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.FcnMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイル変更通知モードを指定する列挙値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.Configuration.FcnMode" /> 列挙値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxQueryStringLength">
      <MemberSignature Language="C#" Value="public int MaxQueryStringLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxQueryStringLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.MaxQueryStringLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxQueryStringLength", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP 要求内のクエリ文字列の許容される最大長 \(文字数\) を取得または設定します。</summary>
        <value>クエリ文字列の最大長 \(文字数\)。 既定値は 2048 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Web.Configuration.HttpRuntimeSection.MaxQueryStringLength%2A> プロパティは、任意の整数を指定できます 0 以上です。 ASP.NET の取得のかどうか、クエリ文字列の長さを超えるサイズの制限と、 `HTTP 400` \(Bad Request\) のステータス コード。  
  
> [!NOTE]
>  非常に小さな値 Web サイトは使用できないことができます。  
  
 構成ファイルでこの値を設定するには設定して、 `maxQueryStringLength` の属性、 `httpRuntime` 要素。 詳細については、次を参照してください。 [httpRuntime 要素 \(ASP.NET 設定スキーマ\)](http://msdn.microsoft.com/ja-jp/e9b81350-8aaf-47cc-9843-5f7d0c59f369)します。  
  
> [!NOTE]
>  クエリ文字列の長さを制御する IIS の設定もできます。 参照してください、 `maxQueryString` 属性 [Request Limits \<requestLimits\>](http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/requestLimits)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxRequestLength">
      <MemberSignature Language="C#" Value="public int MaxRequestLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxRequestLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxRequestLength", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最大要求サイズを取得または設定します。</summary>
        <value>最大要求サイズ。単位はキロバイトです。 既定のサイズは 4,096 KB \(4 MB\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> プロパティは、入力ストリームのバッファリングのしきい値の制限を指定します。 たとえば、この制限は、拒否、サーバーに大量のファイルを投稿するユーザーによって引き起こされるサービス拒否攻撃の防止に使用できます。  
  
 このプロパティに割り当てられた値が大きいか等しいに割り当てられた値にする必要があります、 <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A> プロパティです。  
  
   
  
## 例  
 次の例では、現在の入手方法 <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> プロパティの値。  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#19](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#19)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#19](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">選択した値より小さい <see cref="P:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxUrlLength">
      <MemberSignature Language="C#" Value="public int MaxUrlLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxUrlLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.MaxUrlLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxUrlLength", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP 要求内の URL の許容される最大長 \(文字数\) を取得または設定します。</summary>
        <value>URL の長さ \(文字数\)。 既定値は 260 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Web.Configuration.HttpRuntimeSection.MaxUrlLength%2A> プロパティは、任意の整数を指定できます 0 以上です。  
  
> [!NOTE]
>  非常に小さな値 Web サイトは使用できないことができます。  
  
 場合、要求 URL の長さ \(の値である、 <xref:System.Web.HttpRequest.Path%2A> プロパティ\) を構成されたサイズ制限を超える場合、ASP.NET には、HTTP 400 \(Bad Request\) のステータス コードが返されます。  
  
 構成ファイルでこの値を設定するには設定して、 <xref:System.Web.Configuration.HttpRuntimeSection.MaxUrlLength%2A> の属性、 `httpRuntime` 要素。 詳細については、次を参照してください。 [httpRuntime 要素 \(ASP.NET 設定スキーマ\)](http://msdn.microsoft.com/ja-jp/e9b81350-8aaf-47cc-9843-5f7d0c59f369)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWaitChangeNotification">
      <MemberSignature Language="C#" Value="public int MaxWaitChangeNotification { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxWaitChangeNotification" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.MaxWaitChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxWaitChangeNotification", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最初の変更通知から、アプリケーション ドメインが再起動するまでの時間間隔を取得または設定します。</summary>
        <value>最初の変更通知から、アプリケーション ドメインが再起動するまでの最大時間間隔 \(秒単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 推奨値が、 <xref:System.Web.Configuration.HttpRuntimeSection.MaxWaitChangeNotification%2A> プロパティは、展開プロセス中にコピーを完了する時間の長さを超えます。  
  
> [!NOTE]
>  コンテンツは、コピーと展開プロセスの直後に表示する場合、キャッシュされていることがあります。 これは、一般的な動作です。 指定した待機時間が経過すると変更が反映されます。  
  
   
  
## 例  
 <xref:System.Web.Configuration.HttpRuntimeSection.MaxWaitChangeNotification%2A> プロパティを使用する方法を次の例に示します。  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#4)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinFreeThreads">
      <MemberSignature Language="C#" Value="public int MinFreeThreads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinFreeThreads" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("minFreeThreads", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この構成のスコープ内のリソースの要求が処理されるまで空いている必要がある、スレッドの最小数を取得または設定します。</summary>
        <value>この構成のスコープ内の要求が処理されるまでの、共通言語ランタイム \(CLR: Common Language Runtime\) スレッド プール内のフリー スレッドの最小数。 既定値は <c>8</c> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A> プロパティが要求を実行するフリー スレッドの最小数を定義します。 十分なスレッド数が利用できない場合は、要求はキューに置かれたままされ、必要なスレッドの容量が存在するまで、スレッドの可用性の定期的なチェックは続行されます。 既定値は `8` です。  
  
> [!NOTE]
>  ASP.NET では、このような多数の追加のスレッドの処理を完了する必要がある要求のフリー スレッドを保持します。  
  
   
  
## 例  
 <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A> プロパティを使用する方法を次の例に示します。  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#8)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinLocalRequestFreeThreads">
      <MemberSignature Language="C#" Value="public int MinLocalRequestFreeThreads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinLocalRequestFreeThreads" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.MinLocalRequestFreeThreads" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("minLocalRequestFreeThreads", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ローカル要求の処理に必要なフリー スレッドの最小数を取得または設定します。</summary>
        <value>ローカル要求に割り当てられたフリー スレッドの最小数。 既定値は 4 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.HttpRuntimeSection.MinLocalRequestFreeThreads%2A> プロパティは、ASP.NET は、新しいローカル要求の実行を許可するように使用可能なフリー スレッドの数を定義します。 目的は、Web サーバーへの再帰的な再入でデッドロックが発生を回避します。  
  
   
  
## 例  
 <xref:System.Web.Configuration.HttpRuntimeSection.MinLocalRequestFreeThreads%2A> プロパティを使用する方法を次の例に示します。  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#5)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RelaxedUrlToFileSystemMapping">
      <MemberSignature Language="C#" Value="public bool RelaxedUrlToFileSystemMapping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RelaxedUrlToFileSystemMapping" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.RelaxedUrlToFileSystemMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("relaxedUrlToFileSystemMapping", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP 要求内の URL が有効な Windows ファイル パスである必要があるかどうかを示す値を取得または設定します。</summary>
        <value>URL が Windows パスの規則に準拠している必要がない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.HttpRuntimeSection.RelaxedUrlToFileSystemMapping%2A> プロパティは、受信 HTTP 要求の URL の検証方法を決定します。 このプロパティは、する場合 `false`, 、Windows ファイル システム パスが有効かどうかを判断するのと同じ規則を使用して、URL を検証します。  
  
 構成ファイルでこの値を設定するには設定して、 <xref:System.Web.Configuration.HttpRuntimeSection.RelaxedUrlToFileSystemMapping%2A> の属性、 `httpRuntime` 要素。 詳細については、次を参照してください。 [httpRuntime 要素 \(ASP.NET 設定スキーマ\)](http://msdn.microsoft.com/ja-jp/e9b81350-8aaf-47cc-9843-5f7d0c59f369)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestLengthDiskThreshold">
      <MemberSignature Language="C#" Value="public int RequestLengthDiskThreshold { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RequestLengthDiskThreshold" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requestLengthDiskThreshold", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>入力ストリームのバッファリングのしきい値を取得または設定します。</summary>
        <value>入力ストリーム バッファリングのしきい値を示すバイト数。 既定値は 80 KB です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A> プロパティは、バイト数で入力ストリーム バッファーのしきい値サイズの上限を指定します。 その値を超えることはない、 <xref:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength%2A> プロパティの値。 要求のエンティティがこのしきい値を超えた後ディスクに透過的にバッファーされます。  
  
   
  
## 例  
 <xref:System.Web.Configuration.HttpRuntimeSection.RequestLengthDiskThreshold%2A> プロパティを使用する方法を次の例に示します。  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#12](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#12)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">選択した値が超える <see cref="P:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="RequestPathInvalidCharacters">
      <MemberSignature Language="C#" Value="public string RequestPathInvalidCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RequestPathInvalidCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.RequestPathInvalidCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requestPathInvalidCharacters", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP 要求を構成するパス内で無効として指定される文字の一覧を取得または設定します。</summary>
        <value>無効な文字のコンマ区切りのリスト。 既定のセットで無効とされる文字を次に示します。  
  
 <c>&lt;,&gt;,*,%,&amp;,:,\\</c></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 構成ファイルでは、この値を設定するには、対象の文字のコンマ区切りの文字列を割り当てることができます、 `requestPathInvalidCharacters` の属性、 `httpRuntime` 要素。 詳細については、次を参照してください。 [httpRuntime 要素 \(ASP.NET 設定スキーマ\)](http://msdn.microsoft.com/ja-jp/e9b81350-8aaf-47cc-9843-5f7d0c59f369)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestValidationMode">
      <MemberSignature Language="C#" Value="public Version RequestValidationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version RequestValidationMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.RequestValidationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.Configuration.VersionConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requestValidationMode", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用する ASP.NET バージョン固有の検証方法を示すバージョン番号を取得または設定します。</summary>
        <value>使用する ASP.NET バージョン固有の検証方法を示す値。 既定値は、<c>4.5</c> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationMode%2A> プロパティが使用する ASP.NET の検証方法を指定します。 これは、バージョン 4、またはで使用されているバージョンより前のバージョンの ASP.NET で使用されるアルゴリズム [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]します。 プロパティは、次の値に設定できます。  
  
-   `4.5 (the default).` このモードでの値を遅延読み込み、つまり、これらは読み取られません要求されるまでです。  
  
-   `4.0` <xref:System.Web.HttpRequest> オブジェクトは、内部的に任意の HTTP 要求データがアクセスされるたびに要求の検証が行われることを示すフラグを設定します。 これにより、cookie などのデータの前に要求の検証がトリガーされ、Url は、要求にアクセスされることが保証されます。 検証の設定では、構成ファイル内の要素 \(存在する場合\) か、個々 のページでは、ディレクティブの要求は無視されます。  
  
-   `2.0`。 要求の検証は、すべての HTTP 要求ではなく、ページに対してのみ有効です。 さらに、要求検証の設定、構成ファイル内の要素 \(存在する場合\) か、個々 のページでは、ディレクティブは、どのページを検証する要求を特定する使用されます。  
  
 このプロパティに割り当てられる値は、ASP.NET の特定のバージョンが一致するようには検証されません。 任意の数値より小さい `4.0` \(たとえば、 `3.7`, 、`2.9`, 、または `2.0`\) として解釈 `2.0`します。 数値よりも大きい `4.5` として解釈 `4.5`します。  
  
 構成ファイルでは、この値を設定するには、値を割り当てることができます、 `requestValidationMode` の属性、 `httpRuntime` 要素。 詳細については、次を参照してください。 [httpRuntime 要素 \(ASP.NET 設定スキーマ\)](http://msdn.microsoft.com/ja-jp/e9b81350-8aaf-47cc-9843-5f7d0c59f369)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestValidationType">
      <MemberSignature Language="C#" Value="public string RequestValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RequestValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.RequestValidationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requestValidationType", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.StringValidator(MinLength=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP 要求の検証に使用する型の名前を取得または設定します。</summary>
        <value>要求の検証タスクを処理する型の名前。 既定値は、ASP.NET が検証に使用する <see cref="T:System.Web.Util.RequestValidator" /> 型の完全修飾名です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET 要求の検証動作をカスタマイズするから継承するクラスを作成することができます、 <xref:System.Web.Util.RequestValidator> 型です。 アプリケーションの構成ファイルで設定して、 `requestValidationType` の属性、 `httpRuntime` 要素をカスタム型の完全修飾文字列名。 詳細については、次を参照してください。 [httpRuntime 要素 \(ASP.NET 設定スキーマ\)](http://msdn.microsoft.com/ja-jp/e9b81350-8aaf-47cc-9843-5f7d0c59f369)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequireRootedSaveAsPath">
      <MemberSignature Language="C#" Value="public bool RequireRootedSaveAsPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequireRootedSaveAsPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requireRootedSaveAsPath", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイル名に物理的な絶対ファイル パスを指定する必要があるかどうかを示す値を取得または設定します。</summary>
        <value>ファイル名に物理的な絶対ファイル パスを指定する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath%2A> プロパティは、ファイル名への引数であるかどうかを指定 `SaveAs` メソッドは、ルートからのパスをする必要があります。 ASP.NET プロセスは、指定した場所にファイルを作成する権限を持っている必要があります。  
  
 詳細については、メソッドで定義の保存先を参照してください、 <xref:System.Configuration.Configuration> クラスです。  
  
   
  
## 例  
 <xref:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath%2A> プロパティを使用する方法を次の例に示します。  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#7)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendCacheControlHeader">
      <MemberSignature Language="C#" Value="public bool SendCacheControlHeader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SendCacheControlHeader" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.SendCacheControlHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("sendCacheControlHeader", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP 応答の一部として <c>cache-control:private</c> ヘッダーを送信するかどうかを示す値を取得または設定します。</summary>
        <value>
          <c>cache-control:private</c> ヘッダーが送信される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.HttpResponse> クラスは、両方をチェック、 <xref:System.Web.Configuration.HttpRuntimeSection.SendCacheControlHeader%2A?displayProperty=fullName> プロパティおよび <xref:System.Web.Configuration.OutputCacheSection.SendCacheControlHeader%2A?displayProperty=fullName> を送信するかどうかを確認するに、 `cache-control:private` HTTP 応答ヘッダー。 プロパティのいずれかに設定されている場合は、 `false`, 、ヘッダーは送信されません。 キャッシュ制御ヘッダーに設定すると `private`, 、クライアントは共有キャッシュに応答をキャッシュしません。  
  
 サポート、 <xref:System.Web.Configuration.HttpRuntimeSection.SendCacheControlHeader%2A> プロパティに、 <xref:System.Web.Configuration.HttpRuntimeSection> クラスは、従来のアプリケーションとの互換性のために提供されます。 このプロパティは、.NET Framework version 2.0 で廃止されます。 詳細については、<xref:System.Web.Configuration.OutputCacheSection> クラスを参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetReadOnly">
      <MemberSignature Language="C#" Value="protected override void SetReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.HttpRuntimeSection.SetReadOnly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan ShutdownTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ShutdownTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.ShutdownTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.TimeSpanSecondsConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("shutdownTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションが終了されるまでの許容アイドル時間を取得または設定します。</summary>
        <value>アプリケーションが終了されるまでの許容アイドル時間を示す <see cref="T:System.TimeSpan" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.HttpRuntimeSection.ShutdownTimeout%2A> プロパティは、アプリケーションが正常にシャット ダウンするまでの時間を示します。 既定値は、90 秒です。  
  
   
  
## 例  
 <xref:System.Web.Configuration.HttpRuntimeSection.ShutdownTimeout%2A> プロパティを使用する方法を次の例に示します。  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#6)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetFramework">
      <MemberSignature Language="C#" Value="public string TargetFramework { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetFramework" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.TargetFramework" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("targetFramework", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ターゲット .NET framework を取得または設定します。</summary>
        <value>対象の .NET Framework。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseFullyQualifiedRedirectUrl">
      <MemberSignature Language="C#" Value="public bool UseFullyQualifiedRedirectUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseFullyQualifiedRedirectUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.UseFullyQualifiedRedirectUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("useFullyQualifiedRedirectUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアント側のリダイレクトが絶対パスであるかどうかを示す値を取得または設定します。</summary>
        <value>クライアント側のリダイレクトが絶対パスである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.HttpRuntimeSection.UseFullyQualifiedRedirectUrl%2A> プロパティは、クライアント側のリダイレクトが \(フォーム http:\/\/server\/path\) で完全修飾されているかどうかまたは相対パスのリダイレクトがクライアントに代わりに送信されるかどうかを示します。  
  
> [!NOTE]
>  一部のブラウザーがこの値がクッキーなしのセッションでページの読み込みに関する問題にあります `false`します。  
  
   
  
## 例  
 <xref:System.Web.Configuration.HttpRuntimeSection.UseFullyQualifiedRedirectUrl%2A> プロパティを使用する方法を次の例に示します。  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#15](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#15)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#15](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitChangeNotification">
      <MemberSignature Language="C#" Value="public int WaitChangeNotification { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitChangeNotification" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.HttpRuntimeSection.WaitChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("waitChangeNotification", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>次の変更通知までの待機時間を取得または設定します。</summary>
        <value>アプリケーション ドメインの再起動を引き起こす次の変更通知までの待機時間 \(秒単位\)。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 推奨値が <xref:System.Web.Configuration.HttpRuntimeSection.WaitChangeNotification%2A> の展開プロセス中のコピーの完了に時間の長さを超えます。  
  
> [!NOTE]
>  コンテンツは、コピーした後すぐに表示して、プロセスを展開する場合、キャッシュされていることがあります。 これは、一般的な動作です。 指定した待機時間が経過すると変更が反映されます。  
  
   
  
## 例  
 <xref:System.Web.Configuration.HttpRuntimeSection.WaitChangeNotification%2A> プロパティを使用する方法を次の例に示します。  
  
 [!code-csharp[System.Web.Configuration.HttpRuntimeSection\#18](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/CS/httpruntimesection.cs#18)]
 [!code-vb[System.Web.Configuration.HttpRuntimeSection\#18](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.HttpRuntimeSection/VB/httpruntimesection.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>