<Type Name="PagesSection" FullName="System.Web.Configuration.PagesSection">
  <TypeSignature Language="C#" Value="public sealed class PagesSection : System.Configuration.ConfigurationSection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed PagesSection extends System.Configuration.ConfigurationSection" />
  <TypeSignature Language="DocId" Value="T:System.Web.Configuration.PagesSection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationSection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>構成ファイルのセクションにプログラムでアクセスを提供します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.PagesSection> クラスには、プログラムからアクセスし、構成ファイル セクションの内容を変更する方法が用意されています。 この構成セクションでは、構成ファイルのスコープ内でページとコントロールをすべてに対してグローバルに ASP.NET ページとコントロール ディレクティブの特定の設定をサポートします。 これが含まれます、 `@ Page` ディレクティブ、 `@ Import` を通じてディレクティブ、 <xref:System.Web.Configuration.PagesSection.Namespaces%2A> コレクション プロパティには、および `@ Register` を通じてディレクティブ、 <xref:System.Web.Configuration.PagesSection.Controls%2A> コレクション プロパティです。 を介して実行時に、タグの種類を他のタグの種類にマップするためのサポートを提供、 <xref:System.Web.Configuration.PagesSection.TagMapping%2A> コレクション プロパティです。  
  
 ディレクティブは、ASP.NET Web フォーム ページ \(.aspx\) およびユーザー コントロール \(.ascx\) ファイルを処理するときに、ページおよびユーザー コントロールのコンパイラで使用される設定を指定します。  
  
   
  
## 例  
 この例では、宣言での複数の属性の値を指定、 `pages` \] セクションのメンバーとしてアクセスすることも、 <xref:System.Web.Configuration.PagesSection> クラスです。  
  
 次の構成ファイルの例では、セクションの宣言で値を指定する方法を示します。  
  
```  
<system.web>  
  <pages buffer="true"   
    enableSessionState="true"   
    enableViewState="true"  
    enableViewStateMac="true"   
    autoEventWireup="true"   
    validateRequest="true"  
    asyncTimeout="45"  
    maintainScrollPositionOnPostBack = "False"  
    viewStateEncryptionMode = "Auto">  
    <namespaces>  
      <add namespace="System" />  
      <add namespace="System.Collections" />  
      <add namespace="System.Collections.Specialized" />  
      <add namespace="System.ComponentModel" />  
      <add namespace="System.Configuration" />  
      <add namespace="System.Web" />  
    </namespaces>  
    <controls>  
      <clear />  
      <remove tagPrefix="MyTags" />  
      <!—- Searches all linked assemblies for the namespace -->  
      <add tagPrefix="MyTags1" namespace=" MyNameSpace "/>  
      <!-- Uses a specified assembly -->  
      <add tagPrefix="MyTags2" namespace="MyNameSpace"   
        assembly="MyAssembly"/>  
      <!-- Uses the specified source for the user control -->  
      <add tagprefix="MyTags3" tagname="MyCtrl"       
        src="MyControl.ascx"/>  
    </controls>  
    <tagMapping>  
      <clear />  
      <add  
        tagTypeName=  
          "System.Web.UI.WebControls.WebParts.WebPartManager"  
        mappedTagTypeName=  
          "Microsoft.Sharepoint.WebPartPartManager,   
          MSPS.Web.dll, Version='2.0.0.0'"   
      />  
      <remove tagTypeName="SomeOtherNS.Class, Assemblyname" />  
    </tagMapping>  
  </pages>  
</system.web>  
```  
  
 次のコード例では、使用して、 <xref:System.Web.Configuration.PagesSection> クラスです。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#1)]
 [!code-vb[System.Web.Configuration.PagesSection\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ConfigurationSection" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PagesSection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.PagesSection.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>既定の設定を使用して <see cref="T:System.Web.Configuration.PagesSection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.PagesSection.%23ctor%2A> コンス トラクターは、コードから直接使用するものではありません。 ASP.NET 構成システムで呼び出されます。 インスタンスを取得する、 <xref:System.Web.Configuration.PagesSection> クラスを使用して、 <xref:System.Configuration.Configuration.GetSection%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan AsyncTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AsyncTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.AsyncTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.TimeSpanSecondsConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("asyncTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.TimeSpanValidator(MaxValueString="10675199.02:48:05.4775807", MinValueString="00:00:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または非同期ページ処理中に完了する非同期のハンドラーを待機する秒数を示す値を設定します。</summary>
        <value>A <see cref="T:System.TimeSpan" /> 非同期ページ処理中に完了する非同期のハンドラーを待機する秒数時間を示す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値は、45 秒です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="AutoEventWireup">
      <MemberSignature Language="C#" Value="public bool AutoEventWireup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoEventWireup" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.AutoEventWireup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("autoEventWireup", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または ASP.NET ページのイベントがイベント処理関数に自動的に接続されているかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> ASP.NET ページのイベントがイベント処理の関数に自動的に接続されている場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> は `true`, 、ASP.NET に明示的にバインドするイベント ハンドラーのページ イベントなどが不要 <xref:System.Web.UI.Control.Load>します。  
  
 <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> は `false`, 、メソッドにイベントを明示的にバインドする必要があります。 ある場合など、 `Page_Load` ページのコード内のメソッド、メソッドで呼び出されるへの応答、 <xref:System.Web.UI.Control.Load> イベント コードをそのような次の例で作成する場合にのみ \(に注意してください、 `Handles` Visual Basic および c\# でイベント ハンドラーのコード内のステートメント\)。  
  
```vb  
Partial Class AutoEventWireupExample  
    Inherits System.Web.UI.Page  
    Protected Sub Page_Load(ByVal sender As Object, _  
            ByVal e As System.EventArgs) Handles Me.Load  
        Response.Write("Executing Page_Load")  
    End Sub  
End Class  
```  
  
```csharp  
public partial class AutoEventWireupExample : System.Web.UI.Page  
{   
    protected void Page_Load(object sender, System.EventArgs e)  
    {  
        Response.Write("Executing Page_Load");  
    }  
    override protected void OnInit(EventArgs e)  
    {  
        this.Load += new System.EventHandler(this.Page_Load);  
    }  
}  
```  
  
 <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> は `true`, 、ハンドラーがイベントにその名前とシグネチャに基づいて実行時に自動的にバインドされます。 各イベント ASP.NET でのメソッドのパターンに従ってという名前の検索 `Page_`*eventname*, など `Page_Load` または `Page_Init`です。 ASP.NET は、一般的なイベント ハンドラーのシグネチャを持つオーバー ロードをまずチェック \(つまり、指定 <xref:System.Object> と <xref:System.EventArgs> パラメーター\)。 この署名を持つイベント ハンドラーが見つからない場合、ASP.NET は、パラメーターがないオーバー ロードをチェックします。  
  
 <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> は `false`, 、前の例で示すように、イベントにイベント ハンドラーにバインドすることに明示的にする必要があります。 その場合は、メソッド名は、パターンに従う必要はありません。  
  
 既定値は `true` 場合 <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> で指定されていない、 `@ Page` ディレクティブです。 Visual Studio には、分離コード ファイルの作成時に、属性が自動的に含まれます。 C\# で記述された ASP.NET ページ、Visual Studio 値を設定 `true`です。 Visual Basic、Visual Studio 値を設定 `false` ハンドラーがイベント ハンドラーを生成するときに Visual Studio によって自動的に挿入されるキーワードを使用してイベントにバインドされているためです。 設定した場合 <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> に `true`, 、キーワードを省略 \(または削除\) にすることができます。  
  
 設定しない <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> に `true` パフォーマンスが重要な考慮事項である場合。 自動イベント ワイヤアップを有効にすると、ASP.NET がメソッドとイベントを照合する 15 日と 30 の試行の間で行う必要があります。  
  
 イベントにイベント ハンドラーのバインドについては、次を注意してください。  
  
-   設定した場合 <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> に `true`, 、ことも手動でアタッチしないページ イベント ハンドラーにイベントを確認します。 この場合、ハンドラーは 2 回以上呼び出さ可能性があります。  
  
-   自動バインドは、ページ上のコントロールのイベントではなく、ページのイベントに対してのみ実行されます。  
  
-   ハンドラーにイベントをバインドする代わりに、オーバーライドすることができます、 `On`*eventname* またはページのコントロールのメソッドです。  
  
   
  
## 例  
 次のコード例は、設定または読み取れる方法を示しています、 <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> コード内のプロパティです。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#9)]
 [!code-vb[System.Web.Configuration.PagesSection\#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#9)]  
  
 次の例では、ページ イベントに自動的にアタッチされているメソッドのシグネチャの 2 つの形式と <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> は `true`です。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#50](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/Default.aspx#50)]
 [!code-csharp[System.Web.Configuration.PagesSection\#50](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/Default2.aspx.cs#50)]
 [!code-vb[System.Web.Configuration.PagesSection\#50](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/Default2.aspx.vb#50)]
 [!code-vb[System.Web.Configuration.PagesSection\#50](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/Default.aspx#50)]  
  
 次の例では、イベントを明示的に接続するための方法と <xref:System.Web.Configuration.PagesSection.AutoEventWireup%2A> は `false`です。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#51](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/Default.aspx.cs#51)]
 [!code-vb[System.Web.Configuration.PagesSection\#51](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/Default.aspx.vb#51)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public bool Buffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("buffer", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定するかどうかの .aspx ページおよび .ascx コントロールを使用して応答バッファーを指定する値。</summary>
        <value>
          <see langword="true" /> .aspx ページと .ascx コントロールは、応答バッファリング; を使用する場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 応答バッファリングがオンにすると、ページ全体の後になるまで、ページまたはコントロールの出力がバッファリングされるまたはコントロールを処理します。 設定しない <xref:System.Web.Configuration.PagesSection.Buffer%2A> に `true` パフォーマンスが重要な考慮事項である場合。  
  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.Buffer%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#16](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#16)]
 [!code-vb[System.Web.Configuration.PagesSection\#16](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientIDMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ClientIDMode ClientIDMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ClientIDMode ClientIDMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.ClientIDMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("clientIDMode", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ClientIDMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロールの識別子を生成するために使用する既定のアルゴリズムを設定します。</summary>
        <value>示す値方法の値、 <see cref="P:System.Web.UI.Control.ClientID" /> プロパティを生成します。 既定値は <see cref="F:System.Web.UI.ClientIDMode.Predictable" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.Configuration.PagesSection.ClientIDMode%2A> Web サイト全体の既定値を設定するプロパティです。 個々 の Web ページまたは個々 のコントロールは、この値をオーバーライドすることができます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.ClientIDMode" />
      </Docs>
    </Member>
    <Member MemberName="CompilationMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.CompilationMode CompilationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.CompilationMode CompilationMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.CompilationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("compilationMode", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.CompilationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または .aspx ページや .ascx コントロールをコンパイルする方法を決定する値を設定します。</summary>
        <value>値の 1 つ、 <see cref="P:System.Web.Configuration.PagesSection.CompilationMode" /> プロパティを .aspx ページや .ascx コントロールをコンパイルする方法を指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値は <xref:System.Web.UI.CompilationMode.Always> です。  
  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.CompilationMode%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#6)]
 [!code-vb[System.Web.Configuration.PagesSection\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.CompilationMode" />
      </Docs>
    </Member>
    <Member MemberName="ControlRenderingCompatibilityVersion">
      <MemberSignature Language="C#" Value="public Version ControlRenderingCompatibilityVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Version ControlRenderingCompatibilityVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.ControlRenderingCompatibilityVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.Configuration.VersionConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("controlRenderingCompatibilityVersion", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationValidator(typeof(System.Web.Configuration.VersionValidator))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはと互換性のある ASP.NET のバージョンがレンダリングされる HTML がいずれかを指定する値を設定します。</summary>
        <value>レンダリングされる HTML がいずれかの ASP.NET のバージョンは、互換性があります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この値は設定、 `controlRenderingCompatibilityVersion` の属性、 `pages` Web.config ファイル内の要素。 このプロパティの値がの既定値、 <xref:System.Web.UI.Control.RenderingCompatibility%2A?displayProperty=fullName> プロパティです。 使用方法については、次を参照してください。、 <xref:System.Web.UI.Control.RenderingCompatibility%2A?displayProperty=fullName> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">このプロパティを設定しようとした <see langword="null" />します。</exception>
        <altmember cref="P:System.Web.UI.Control.RenderingCompatibility" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.TagPrefixCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.TagPrefixCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("controls")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.TagPrefixCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.Configuration.TagPrefixInfo" /> オブジェクトのコレクションを取得します。</summary>
        <value>
          <see cref="T:System.Web.Configuration.TagPrefixCollection" /> オブジェクトの <see cref="T:System.Web.Configuration.TagPrefixInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.TagPrefixInfo> オブジェクトに対応して、 `@ Register` ASP.NET ページにします。`@ Register` ディレクティブでは、ユーザー コントロールのタグ プレフィックスを指定することができます。  
  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.Controls%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#12](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#12)]
 [!code-vb[System.Web.Configuration.PagesSection\#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Configuration.TagPrefixCollection" />
        <altmember cref="T:System.Web.Configuration.TagPrefixInfo" />
      </Docs>
    </Member>
    <Member MemberName="DeserializeSection">
      <MemberSignature Language="C#" Value="protected override void DeserializeSection (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void DeserializeSection(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.PagesSection.DeserializeSection(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableEventValidation">
      <MemberSignature Language="C#" Value="public bool EnableEventValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableEventValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.EnableEventValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableEventValidation", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはイベントの検証が有効になっているかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> イベントの検証が有効の場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.PagesSection.EnableEventValidation%2A> 属性は、イベントの検証を実行するかどうかを示します。 既定値は `true` です。 Web アプリケーションは、.NET Framework のバージョン 1.0 の動作に戻すには、イベントの検証を無効に必要に応じてできます。  
  
 基本コントロールでは、イベントを検証するかどうかを判断するには、この属性を確認します。 派生コントロールはこの基本コントロールの属性を継承しないと、これは既定では、イベントの検証から除外します。 まだ追加して派生コントロールでイベントの検証を実行する ASP.NET に指示する、 <xref:System.Web.Configuration.PagesSection.EnableEventValidation%2A> 自体に設定して、派生したコントロールに属性 `true`します。  
  
> [!NOTE]
>  イベントの検証は、未承認のポストバック要求とコールバックのリスクを軽減します。 コントロールでポストバック要求またはコールバック時に発生するイベントのみを検証するように指示します。 このモデルでは、コントロールは、レンダリング時にイベントを登録し、ポストバックまたはコールバックの処理中にイベントを検証します。 ASP.NET イベントにより実行されるすべてのコントロールは、既定では、この機能を使用します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSessionState">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.PagesEnableSessionState EnableSessionState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.PagesEnableSessionState EnableSessionState" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.EnableSessionState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableSessionState", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.PagesEnableSessionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはセッション状態が有効になっている、無効になっている、または読み取り専用かどうかを指定する値を設定します。</summary>
        <value>値の 1 つ、 <see cref="P:System.Web.Configuration.PagesSection.EnableSessionState" /> プロパティをセッション状態が有効になっている、無効になっている、または読み取り専用かどうかを指定します。 既定値は <see cref="F:System.Web.Configuration.PagesEnableSessionState.True" />, 、セッション状態を示すが有効になっています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.EnableSessionState%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#14](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#14)]
 [!code-vb[System.Web.Configuration.PagesSection\#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">有効な値は <see cref="T:System.Web.Configuration.PagesEnableSessionState" /> 列挙値。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnableViewState">
      <MemberSignature Language="C#" Value="public bool EnableViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.EnableViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableViewState", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または、ビュー ステートが有効か無効になっているかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> ビュー ステートが有効の場合 <see langword="false" /> ビューステートが無効になっている場合。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.EnableViewState%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#5)]
 [!code-vb[System.Web.Configuration.PagesSection\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableViewStateMac">
      <MemberSignature Language="C#" Value="public bool EnableViewStateMac { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableViewStateMac" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.EnableViewStateMac" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enableViewStateMac", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはクライアントからページがポストされたときに、ページのビュー ステートの ASP.NET がメッセージ認証コード \(MAC\) を実行するかどうかを指定する値を設定します。</summary>
        <value>
          <see langword="true" /> ASP.NET は、クライアントからページがポストされたときに、ページのビュー ステートでのメッセージ認証コード \(MAC\) を実行する場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ビュー ステート MAC は、ページがブラウザーに送信されるときに、ページのビュー ステートが保存されている非表示変数の暗号化されたバージョンです。 このプロパティに設定すると `true`, 、暗号化されたビュー ステートがオンになっていることが改ざんされていないクライアントのことを確認します。  
  
> [!IMPORTANT]
>  この属性設定しないで `false` 、運用 Web サイトで、アプリケーションまたはページがビュー ステートを使用していない場合でも。 ビューステート MAC だけでなく、ビュー ステートには、その他の ASP.NET 機能のセキュリティが強化されます。  
  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.EnableViewStateMac%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#8)]
 [!code-vb[System.Web.Configuration.PagesSection\#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreDeviceFilters">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.IgnoreDeviceFilterElementCollection IgnoreDeviceFilters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.IgnoreDeviceFilterElementCollection IgnoreDeviceFilters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.IgnoreDeviceFilters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("ignoreDeviceFilters")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.IgnoreDeviceFilterElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET がページがレンダリングされるときに無視するデバイスのタグのコレクションを取得します。</summary>
        <value>ASP.NET を無視するデバイスのタグのコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デバイスのタグを無視するのには、ASP.NET によって処理されることがなく、ブラウザーにいるときに渡される HTML 名前空間プレフィックスとして指定されます。 例としては、 `sys` の Microsoft Ajax 要素が使用されるプレフィックス。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Configuration.IgnoreDeviceFilterElement" />
      </Docs>
    </Member>
    <Member MemberName="MaintainScrollPositionOnPostBack">
      <MemberSignature Language="C#" Value="public bool MaintainScrollPositionOnPostBack { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaintainScrollPositionOnPostBack" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.MaintainScrollPositionOnPostBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maintainScrollPositionOnPostBack", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはポストバック後に、サーバーから戻ったときにページのスクロール位置を保守する必要があるかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> ポストバック後に、ページのスクロール位置を維持する必要があります場合、それ以外の場合、 <see langword="false" />です。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.IsPostBack" />
      </Docs>
    </Member>
    <Member MemberName="MasterPageFile">
      <MemberSignature Language="C#" Value="public string MasterPageFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MasterPageFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.MasterPageFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("masterPageFile", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはアプリケーションのマスター ページへの参照を設定します。</summary>
        <value>アプリケーションのマスター ページへの参照。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの値には、相対パスまたは絶対パスのいずれかを指定できます。  
  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.MasterPageFile%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#15](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#15)]
 [!code-vb[System.Web.Configuration.PagesSection\#15](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPageStateFieldLength">
      <MemberSignature Language="C#" Value="public int MaxPageStateFieldLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxPageStateFieldLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.MaxPageStateFieldLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxPageStateFieldLength", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または単一のビュー ステート フィールドを含めることができる文字の最大数を設定します。</summary>
        <value>1 つのビュー ステート フィールドを含めることができる文字の最大数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ページまたはコントロールが表示されるときに、ページとコントロールのビュー ステートは非表示のビュー ステート フィールドに格納されます。 格納されているデータの長さを超えた場合、 <xref:System.Web.Configuration.PagesSection.MaxPageStateFieldLength%2A> 値、複数のビュー ステート フィールドの間でデータを分割し、します。  
  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.MaxPageStateFieldLength%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#10)]
 [!code-vb[System.Web.Configuration.PagesSection\#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.NamespaceCollection Namespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.NamespaceCollection Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("namespaces")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.NamespaceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.Configuration.NamespaceInfo" /> オブジェクトのコレクションを取得します。</summary>
        <value>
          <see cref="T:System.Web.Configuration.NamespaceCollection" /> オブジェクトの <see cref="T:System.Web.Configuration.NamespaceInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.TagPrefixInfo> オブジェクトに対応して、 `@ Import` ASP.NET ページにします。`Import` ディレクティブでは、アプリケーションのすべてのページに自動的にインポートされる名前空間を指定することができます。  
  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.Namespaces%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#2)]
 [!code-vb[System.Web.Configuration.PagesSection\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Configuration.NamespaceCollection" />
        <altmember cref="T:System.Web.Configuration.NamespaceInfo" />
      </Docs>
    </Member>
    <Member MemberName="PageBaseType">
      <MemberSignature Language="C#" Value="public string PageBaseType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PageBaseType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.PageBaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("pageBaseType", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または .aspx ページが既定で継承する分離コード クラスを指定する値を設定します。</summary>
        <value>.Aspx ページが既定で継承する分離コード クラスを指定する文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.PageBaseType%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#18](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#18)]
 [!code-vb[System.Web.Configuration.PagesSection\#18](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageParserFilterType">
      <MemberSignature Language="C#" Value="public string PageParserFilterType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PageParserFilterType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.PageParserFilterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("pageParserFilterType", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはパーサーのフィルターの種類を指定する値を設定します。</summary>
        <value>パーサーのフィルターの種類を指定する文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パーサーのフィルター、インスタンスの <xref:System.Web.UI.PageParserFilter> クラスでは実行時にソース コードを変更できるように解析手順の前に、ページのコンパイル プロセスによって呼び出されます。  
  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.PageParserFilterType%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#3)]
 [!code-vb[System.Web.Configuration.PagesSection\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.PageParserFilter" />
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderAllHiddenFieldsAtTopOfForm">
      <MemberSignature Language="C#" Value="public bool RenderAllHiddenFieldsAtTopOfForm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderAllHiddenFieldsAtTopOfForm" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.RenderAllHiddenFieldsAtTopOfForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("renderAllHiddenFieldsAtTopOfForm", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはフォームの上部にあるシステムで生成されたすべての非表示フィールドが表示されるかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> システムによって生成された非表示フィールドがフォームの上部に表示されている場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true." /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Web.Configuration.PagesSection.RenderAllHiddenFieldsAtTopOfForm%2A> プロパティをいくつかのシステムで生成された非表示フィールドがフォームの最後に表示されることを指定します。  
  
 .NET Framework 3.5 SP1 より前のバージョンの ASP.NET、ASP.NET ではいくつかの非表示フィールド \(たとえば、 `__VIEWSTATE`\) フォームの上部にあります。 その他の非表示フィールド \(たとえば、 `__EVENTVALIDATION`\) は、直前に、フォームの下部に表示されます `</div>` タグ。 既定では ASP.NET 3.5 SP1 では、システムによって生成されたすべての非表示フィールドは、ページの上部に表示されます。 これにより、ページの読み込みが完了する前にポストバックが実行される場合でも、サーバーにこれらのフィールドに情報を送信することです。 場合 <xref:System.Web.Configuration.PagesSection.RenderAllHiddenFieldsAtTopOfForm%2A> に設定されている `false`, 、ページの読み込みが完了する前に、ポストバックを実行すると、「無効なポストバックまたはコールバックの引数」エラーが発生することができます。  
  
> [!NOTE]
>  プロパティの名前が「すべての非表示フィールド」を示すですが、非表示フィールドのユーザーが作成したはこのプロパティの設定によっては受けません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetReadOnly">
      <MemberSignature Language="C#" Value="protected override void SetReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.PagesSection.SetReadOnly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartNavigation">
      <MemberSignature Language="C#" Value="public bool SmartNavigation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SmartNavigation" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.SmartNavigation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("smartNavigation", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはスマート ナビゲーションが有効になっているかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> スマート ナビゲーションが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  スマート ナビゲーションには、Microsoft Internet Explorer 5.5 以降が必要です。  
  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.SmartNavigation%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#19](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#19)]
 [!code-vb[System.Web.Configuration.PagesSection\#19](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleSheetTheme">
      <MemberSignature Language="C#" Value="public string StyleSheetTheme { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StyleSheetTheme" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.StyleSheetTheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("styleSheetTheme", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または ASP.NET スタイル シートのテーマの名前を設定します。</summary>
        <value>ASP.NET スタイル シートのテーマの名前です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.StyleSheetTheme%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#13](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#13)]
 [!code-vb[System.Web.Configuration.PagesSection\#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.StyleSheetTheme" />
      </Docs>
    </Member>
    <Member MemberName="TagMapping">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.TagMapCollection TagMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Configuration.TagMapCollection TagMapping" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.TagMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("tagMapping")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.TagMapCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.Configuration.TagMapInfo" /> オブジェクトのコレクションを取得します。</summary>
        <value>
          <see cref="T:System.Web.Configuration.TagMapCollection" /> オブジェクトの <see cref="T:System.Web.Configuration.TagMapInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Configuration.TagPrefixInfo> オブジェクトの ASP.NET ページに対応するディレクティブがありません。<xref:System.Web.Configuration.TagPrefixInfo> オブジェクトを使用するコンパイル時に他の種類名の型名のタグを再割り当てすることです。  
  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.TagMapping%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#17](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#17)]
 [!code-vb[System.Web.Configuration.PagesSection\#17](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Theme">
      <MemberSignature Language="C#" Value="public string Theme { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Theme" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.Theme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("theme", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または ASP.NET ページのテーマの名前を設定します。</summary>
        <value>ASP.NET ページのテーマの名前です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.Theme%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#4)]
 [!code-vb[System.Web.Configuration.PagesSection\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.Theme" />
      </Docs>
    </Member>
    <Member MemberName="UserControlBaseType">
      <MemberSignature Language="C#" Value="public string UserControlBaseType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserControlBaseType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.UserControlBaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("userControlBaseType", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはユーザー コントロールが既定で継承する分離コード クラスを指定する値を設定します。</summary>
        <value>既定でユーザー コントロールを継承する分離コード ファイルを指定する文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.UserControlBaseType%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#11)]
 [!code-vb[System.Web.Configuration.PagesSection\#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateRequest">
      <MemberSignature Language="C#" Value="public bool ValidateRequest { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateRequest" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.ValidateRequest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("validateRequest", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または値の安全性のブラウザーからの入力を調べるかどうかを決定する値を設定します。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。</summary>
        <value>
          <see langword="true" /> 危険な値のブラウザーからの入力を調べる場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要求の検証は、危険性のある値の一覧にすべての入力データを比較することによって実行されます。 ASP.NET には、一致が発生した場合、 <xref:System.Web.HttpRequestValidationException>です。  
  
   
  
## 例  
 次のコード例は、<xref:System.Web.Configuration.PagesSection.ValidateRequest%2A> プロパティの使用方法を示しています。  
  
 [!code-csharp[System.Web.Configuration.PagesSection\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/CS/usingpagessection.cs#7)]
 [!code-vb[System.Web.Configuration.PagesSection\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.PagesSection/VB/usingpagessection.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewStateEncryptionMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ViewStateEncryptionMode ViewStateEncryptionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ViewStateEncryptionMode ViewStateEncryptionMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.PagesSection.ViewStateEncryptionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("viewStateEncryptionMode", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ViewStateEncryptionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET で保守する際に使用される暗号化モードを取得または <see langword="ViewState" /> 値。</summary>
        <value>A <see cref="T:System.Web.UI.ViewStateEncryptionMode" /> 時期を示す列挙値、 <see langword="ViewState" /> の値を暗号化します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 可能性のある <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> 列挙値は `Always`, 、`Auto`, 、および `Never`です。 既定値は `Auto` です。 場合 <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> にプロパティが設定されている `Auto`, 、`ViewState` コントロールが要求したときに暗号化します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ViewStateEncryptionMode" />
      </Docs>
    </Member>
  </Members>
</Type>