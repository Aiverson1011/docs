<Type Name="SessionStateStoreProviderBase" FullName="System.Web.SessionState.SessionStateStoreProviderBase">
  <TypeSignature Language="C#" Value="public abstract class SessionStateStoreProviderBase : System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SessionStateStoreProviderBase extends System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.SessionState.SessionStateStoreProviderBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Provider.ProviderBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>データ ストアのセッション状態プロバイダーの必要なメンバーを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET セッション状態は、読み取り、セッション状態を使用してデータ ストアからデータをセッション ストア プロバイダーを書き込みます。 セッション状態ストアのプロバイダーは、継承するクラス、 <xref:System.Web.SessionState.SessionStateStoreProviderBase> 抽象クラスとオーバーライドのデータに固有の実装では、そのメンバーを格納します。 セッション状態ストアのプロバイダーがによって呼び出される、 <xref:System.Web.SessionState.SessionStateModule> ストレージのデータ ストアと通信するために、ASP.NET ページの処理とセッション変数とタイムアウト値などの関連するセッション情報の取得中にクラスです。  
  
 各 ASP.NET アプリケーション内でのセッション データがごとに個別に格納されている <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> プロパティです。 ASP.NET アプリケーションは、セッション データを共有していません。  
  
 カスタムを指定する <xref:System.Web.SessionState.SessionStateStoreProviderBase> を設定して、ASP.NET アプリケーションの実装、 `mode` の属性、 `sessionState` 構成要素を <xref:System.Web.SessionState.SessionStateMode.Custom> と `customProvider` 属性のカスタム プロバイダーの名前に、このトピックの例に示すようにします。  
  
## セッション ストア データのロック  
 ASP.NET アプリケーションは、同時要求に応答をサポートするマルチ スレッド、ために、同時実行の要求が同じセッションの情報にアクセスしようとする可能性がありますが可能です。 すべてのフレーム セット内の複数のフレームが同じアプリケーションにアクセスする場合を検討してください。 フレーム セット内の各フレームの個々 の要求は、異なるスレッドで同時に Web サーバーで実行できます。 各フレームのソースの ASP.NET ページは、セッション状態変数にアクセスすると、セッション ストアへのアクセスを同時に複数のスレッドが割り当てることもできます。  
  
 予期しないセッション状態動作とセッション ストアでデータの競合を避けるため、 <xref:System.Web.SessionState.SessionStateModule> と <xref:System.Web.SessionState.SessionStateStoreProviderBase> クラスには、専用の ASP.NET ページの実行中の特定のセッションのセッション ストアの項目をロックするロック機能が含まれます。 注意してください、 <xref:System.Web.Configuration.PagesSection.EnableSessionState%2A> として属性がマークされている `ReadOnly`, 、同じアプリケーションの場合は、その他の ASP.NET ページは、ストアからデータに入れられますを待機している読み取り専用のセッションの要求に解放するデータがロックされているため、セッション ストアへの書き込みできる場合があります。  
  
 セッション ストア データへの呼び出しで、要求の開始時にロックが設定されている、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> メソッドです。 要求が完了すると、呼び出し中に、ロックが解放、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive%2A> メソッドです。  
  
 場合、 <xref:System.Web.SessionState.SessionStateModule> オブジェクトでは、いずれかへの呼び出し中にロックされているセッション データが検出した、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> または <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> メソッドを再要求してセッション データ 0.5 秒間隔で、ロックが解除されるか、セッション データがロックされている時間の値を超えるまで、 <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A> プロパティです。 実行のタイムアウトを超えた場合、 <xref:System.Web.SessionState.SessionStateModule> オブジェクトが呼び出す、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A> セッション ストア データを解放して、その時点でセッション ストア データを要求します。  
  
 セッション ストアがロックされているためへの呼び出しによってデータが解放される可能性がありますが、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A> メソッドを呼び出す前に別のスレッドで、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive%2A> 現在の応答のメソッド、しようを設定し、セッション状態ストアのデータを持ち、既に解放されている別のセッションで変更を行った可能性があります。 この状況を避けるため、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> と <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> メソッドは、ロック識別子を返します。 このロック識別子は、ロックされているセッション ストア データを変更するには、各要求に含める必要があります。 セッション ストア データを変更すると、データ ストア内のロック識別子には、によって提供されるロック識別子と一致する場合にのみ、 <xref:System.Web.SessionState.SessionStateModule>です。  
  
## 有効期限が切れたセッション ストア データを削除します。  
 ときに、 <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> メソッドが特定のセッションで呼び出されると、そのセッションのデータが使用して、データ ストアから削除、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem%2A> メソッドは、データを将来の要求をサーバーにセッション データ ストアに存在、セッションのそれ以外の場合。<xref:System.Web.SessionState.SessionStateStoreProviderBase> 期限切れのセッション データを削除する実装。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 次のコード例では、セッション状態ストアのカスタム プロバイダーを使用して構成されている ASP.NET アプリケーションの Web.config ファイルを示します。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="OdbcSessionServices" connectionString="DSN=SessionState;" />  
  </connectionStrings>  
  
  <system.web>  
    <sessionState   
      mode="Custom"  
      customProvider="OdbcSessionProvider">  
      <providers>  
        <add name="OdbcSessionProvider"  
             type="Samples.AspNet.Session.OdbcSessionStateStore"  
             connectionStringName="OdbcSessionServices" />  
      </providers>  
    </sessionState>  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SessionStateStoreProviderBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateStoreProviderBase.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 継承するクラスのコンス トラクターを実装する必要はありません、 <xref:System.Web.SessionState.SessionStateStoreProviderBase> 抽象クラスです。 初期設定の値は、 <xref:System.Web.SessionState.SessionStateStoreProviderBase> に実装が渡される、 <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> メソッドの実装です。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNewStoreData">
      <MemberSignature Language="C#" Value="public abstract System.Web.SessionState.SessionStateStoreData CreateNewStoreData (System.Web.HttpContext context, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.SessionState.SessionStateStoreData CreateNewStoreData(class System.Web.HttpContext context, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData(System.Web.HttpContext,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.SessionStateStoreData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> の現在の要求。</param>
        <param name="timeout">セッション状態 <see cref="P:System.Web.SessionState.HttpSessionState.Timeout" /> の新しい値 <see cref="T:System.Web.SessionState.SessionStateStoreData" />です。</param>
        <summary>新しい <see cref="T:System.Web.SessionState.SessionStateStoreData" /> オブジェクトを現在の要求に対して使用できます。</summary>
        <returns>新しい <see cref="T:System.Web.SessionState.SessionStateStoreData" /> の現在の要求。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData%2A> ASP.NET ページの要求の先頭にあるメソッド中に、 <xref:System.Web.HttpApplication.AcquireRequestState> イベントです。<xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData%2A> 場合、メソッドが呼び出されます。  
  
-   受信要求はセッション ID を持たないか、  
  
-   受信要求は、セッション ID を持つが、データ ストア内に、セッションが見つかりません。  
  
 <xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData%2A> メソッドが、新たに作成 <xref:System.Web.SessionState.SessionStateStoreData> 、空のオブジェクト <xref:System.Web.SessionState.ISessionStateItemCollection> オブジェクト、 <xref:System.Web.HttpStaticObjectsCollection> コレクション、および指定した `timeout` 値。<xref:System.Web.HttpStaticObjectsCollection> を使用して ASP.NET アプリケーションのコレクションを取得でき、 <xref:System.Web.SessionState.SessionStateUtility.GetSessionStaticObjects%2A> メソッドです。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUninitializedItem">
      <MemberSignature Language="C#" Value="public abstract void CreateUninitializedItem (System.Web.HttpContext context, string id, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateUninitializedItem(class System.Web.HttpContext context, string id, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem(System.Web.HttpContext,System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> の現在の要求。</param>
        <param name="id">
          <see cref="P:System.Web.SessionState.HttpSessionState.SessionID" /> の現在の要求。</param>
        <param name="timeout">セッション <see cref="P:System.Web.SessionState.HttpSessionState.Timeout" /> の現在の要求。</param>
        <summary>データ ストアに新しいセッション状態の項目を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem%2A> メソッドは、セッションで使用時に、 `cookieless` と `regenerateExpiredSessionId` 属性は、どちらも `true`です。`regenerateExpiredSessionId attribute` に設定 `true` により、 <xref:System.Web.SessionState.SessionStateModule> 新しいを生成するオブジェクト <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 、有効期限が切れたときの値 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 値が検出されました。  
  
 新しいを生成するプロセス <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 値は、新しく生成されたを含む URL にブラウザーをリダイレクトする必要があります <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 値。<xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem%2A> 有効期限切れを含む最初の要求時に呼び出されます <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 値。 後に、 <xref:System.Web.SessionState.SessionStateModule> オブジェクトを取得、新しい <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 値の有効期限切れの値を置き換えるため、呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem%2A> セッション状態のデータ ストアに初期化されていないエントリを追加するメソッドです。 ブラウザーが新たに生成されたを含む URL にリダイレクトし、 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 値。 セッションのデータ ストアに初期化されていないエントリの存在により、リダイレクトされたを含む要求、新しく生成された <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 値は、期限切れのセッションの要求の誤りについてされませんし、新しいセッションとして扱われます、代わりに、します。  
  
 セッション データ ストアに初期化されていないエントリは、新しく生成されたに関連付けられて <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 値し、有効期限の日付と時刻に対応する値を含むに、既定値のみを含む、 `actionFlags` のパラメーター、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> と <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> メソッドです。 セッション状態ストアの初期化されていないエントリを含める必要があります、 `actionFlags` に等しい値が、 <xref:System.Web.SessionState.SessionStateActions.InitializeItem> 列挙値。 この値は、 <xref:System.Web.SessionState.SessionStateModule> オブジェクトを <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> と <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> メソッド、し、通知、 <xref:System.Web.SessionState.SessionStateModule> 、現在のセッションは、新しいがオブジェクトには、セッションが初期化されていません。<xref:System.Web.SessionState.SessionStateModule> オブジェクトは新しいセッションを初期化し、発生させる、 `Session_OnStart` イベントです。  
  
 Cookieless セッションに関する詳細については、次を参照してください。、 <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> プロパティです。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public abstract void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateStoreProviderBase.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用されるすべてのリソースを解放、 <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase" /> 実装します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateStoreProviderBase.Dispose%2A?displayProperty=fullName> メソッドが呼び出されます、 <xref:System.Web.SessionState.SessionStateModule.Dispose%2A?displayProperty=fullName> メソッドがアプリケーション ドメインの終了時に実行されます。 継承するクラス、 <xref:System.Web.SessionState.SessionStateStoreProviderBase> クラスは、このメソッドを使用して使用されていないリソースを解放します。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRequest">
      <MemberSignature Language="C#" Value="public abstract void EndRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateStoreProviderBase.EndRequest(System.Web.HttpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> の現在の要求。</param>
        <summary>によって呼び出される、 <see cref="T:System.Web.SessionState.SessionStateModule" /> 要求の最後にあるオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.EndRequest%2A> メソッドは、要求の最後に、ASP.NET ページの中に、 <xref:System.Web.HttpApplication.EndRequest> イベントです。 使用することができます、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.EndRequest%2A> 、セッション状態ストア プロバイダーで必要な要求ごとのクリーンアップを実行するメソッドです。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItem">
      <MemberSignature Language="C#" Value="public abstract System.Web.SessionState.SessionStateStoreData GetItem (System.Web.HttpContext context, string id, out bool locked, out TimeSpan lockAge, out object lockId, out System.Web.SessionState.SessionStateActions actions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.SessionState.SessionStateStoreData GetItem(class System.Web.HttpContext context, string id, bool locked, valuetype System.TimeSpan lockAge, object lockId, valuetype System.Web.SessionState.SessionStateActions actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateStoreProviderBase.GetItem(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.SessionStateStoreData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="locked" Type="System.Boolean&amp;" RefType="out" />
        <Parameter Name="lockAge" Type="System.TimeSpan&amp;" RefType="out" />
        <Parameter Name="lockId" Type="System.Object&amp;" RefType="out" />
        <Parameter Name="actions" Type="System.Web.SessionState.SessionStateActions&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> の現在の要求。</param>
        <param name="id">
          <see cref="P:System.Web.SessionState.HttpSessionState.SessionID" /> の現在の要求。</param>
        <param name="locked">このメソッドが戻るときに設定されるブール値が含まれています。 <see langword="true" /> 場合、要求したセッション項目はセッション データ ストアでロックされている以外の場合、 <see langword="false" />です。</param>
        <param name="lockAge">このメソッドが戻るとき、 <see cref="T:System.TimeSpan" /> セッション データ ストア内の項目がロックされている時間に設定されているオブジェクト。</param>
        <param name="lockId">このメソッドが戻るときに、現在の要求に対するロック識別子に設定されているオブジェクトが含まれています。 ロック識別子の詳細については、「セッション ストア データのロック」を参照してください、 <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase" /> クラスの概要です。</param>
        <param name="actions">このメソッドが戻るときのいずれかを含む、 <see cref="T:System.Web.SessionState.SessionStateActions" /> 、現在のセッションが、初期化されていない cookieless セッションかどうかを示す値。</param>
        <summary>セッションのデータ ストアから読み取り専用のセッション状態データを返します。</summary>
        <returns>A <see cref="T:System.Web.SessionState.SessionStateStoreData" /> セッション値とセッション データ ストアからの情報が設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> メソッドに、要求の開始中に、 <xref:System.Web.HttpApplication.AcquireRequestState> イベントときに、 <xref:System.Web.Configuration.PagesSection.EnableSessionState%2A> に属性が設定されている `ReadOnly`します。 場合、 <xref:System.Web.Configuration.PagesSection.EnableSessionState%2A> に属性が設定されている `true`, 、 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出しの代わりに、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> メソッドです。  
  
 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> メソッドが返される、 <xref:System.Web.SessionState.SessionStateStoreData> オブジェクトのデータ ストアからセッション情報を設定し、セッション データの有効期限を更新します。 データ ストアでは、セッション項目データが存在しない場合、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> メソッドのセット、 `locked``out` パラメーターを `false` し、返します `null`します。 これにより、 <xref:System.Web.SessionState.SessionStateModule> を呼び出すオブジェクト、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData%2A> データ ストアの新しいセッション項目を作成する方法です。  
  
 場合はセッション項目データがデータ ストアで見つかりましたが、データがロックされている、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> メソッドのセット、 `locked``out` パラメーターを `true`, 、設定、 `lockAge``out` パラメーター セット \(これは、データ ストアから取得\)、現在の日付と時刻、日付から差し引いたものと、項目がロックされた時刻に、 `lockId``out` ロック識別子にパラメーターがデータ ストアと返しますから取得 `null`します。 これにより、 <xref:System.Web.SessionState.SessionStateModule> を呼び出すオブジェクト、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> セッション項目情報を取得しようとする 0.5 秒間隔の後にもう一度メソッドです。  
  
 場合、値を `lockAge``out` を超えるパラメーターを設定、 <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A> 値、 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A> セッション項目データと、呼び出しをロックを解除する方法、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> メソッドを再度します。  
  
 `actionFlags` パラメーターが使用されるときに両方、 `cookieless` と `regenerateExpiredSessionId` 属性に設定されて `true`します。`actionFlags` 値に設定 <xref:System.Web.SessionState.SessionStateActions.InitializeItem> セッション データ ストアのエントリが初期化を必要とする新しいセッションであることを示します。 呼び出しによってセッション データ ストアに初期化されていないエントリが作成された、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem%2A> メソッドです。 セッションのデータ ストアから項目が、初期化されていない項目ではない場合、 `actionFlags` パラメーターを 0 に設定されます。  
  
 クッキーなしのセッションをサポートするカスタム セッション状態ストアの実行者に設定する必要があります、 `actionFlags` `out` 、セッション データ ストアから現在のアイテムのパラメーターの値が返されます。  場合、 `actionFlags` 要求されたセッション ストアのパラメーター値が項目と等しい、 <xref:System.Web.SessionState.SessionStateActions.InitializeItem> 列挙値、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> メソッドは 0 を設定した後にデータ ストア内の値を設定する必要があります、 `actionFlags` `out` パラメーター。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemExclusive">
      <MemberSignature Language="C#" Value="public abstract System.Web.SessionState.SessionStateStoreData GetItemExclusive (System.Web.HttpContext context, string id, out bool locked, out TimeSpan lockAge, out object lockId, out System.Web.SessionState.SessionStateActions actions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.SessionState.SessionStateStoreData GetItemExclusive(class System.Web.HttpContext context, string id, bool locked, valuetype System.TimeSpan lockAge, object lockId, valuetype System.Web.SessionState.SessionStateActions actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.SessionStateStoreData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="locked" Type="System.Boolean&amp;" RefType="out" />
        <Parameter Name="lockAge" Type="System.TimeSpan&amp;" RefType="out" />
        <Parameter Name="lockId" Type="System.Object&amp;" RefType="out" />
        <Parameter Name="actions" Type="System.Web.SessionState.SessionStateActions&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> の現在の要求。</param>
        <param name="id">
          <see cref="P:System.Web.SessionState.HttpSessionState.SessionID" /> の現在の要求。</param>
        <param name="locked">このメソッドが戻るときに設定されるブール値が含まれています。 <see langword="true" /> 、ロックが正常に取得した、それ以外の場合 <see langword="false" />します。</param>
        <param name="lockAge">このメソッドが戻るとき、 <see cref="T:System.TimeSpan" /> セッション データ ストア内の項目がロックされている時間に設定されているオブジェクト。</param>
        <param name="lockId">このメソッドが戻るときに、現在の要求に対するロック識別子に設定されているオブジェクトが含まれています。 ロック識別子の詳細については、「セッション ストア データのロック」を参照してください、 <see cref="T:System.Web.SessionState.SessionStateStoreProviderBase" /> クラスの概要です。</param>
        <param name="actions">このメソッドが戻るときのいずれかを含む、 <see cref="T:System.Web.SessionState.SessionStateActions" /> 、現在のセッションが、初期化されていない cookieless セッションかどうかを示す値。</param>
        <summary>セッションのデータ ストアから読み取り専用のセッション状態データを返します。</summary>
        <returns>A <see cref="T:System.Web.SessionState.SessionStateStoreData" /> セッション値とセッション データ ストアからの情報が設定されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> メソッドに、要求の開始中に、 <xref:System.Web.HttpApplication.AcquireRequestState> イベントときに、 <xref:System.Web.Configuration.PagesSection.EnableSessionState%2A> に属性が設定されている `true`, 、既定であります。 場合、 <xref:System.Web.Configuration.PagesSection.EnableSessionState%2A> に属性が設定されている `ReadOnly`, 、 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出しの代わりに、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> メソッドです。  
  
 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> メソッドが返される、 <xref:System.Web.SessionState.SessionStateStoreData> データ ストアからセッション情報が設定されるオブジェクトが格納されたデータの有効期限を更新し、要求の期間、データ ストアでは、セッション項目のデータをロックします。 データ ストアでは、セッション項目データが存在しない場合、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> メソッドのセット、 `locked` `out` パラメーターを `false` し、返します `null`します。  これにより、 <xref:System.Web.SessionState.SessionStateModule> を呼び出すオブジェクト、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData%2A> データ ストアの新しいセッション項目を作成する方法です。 場合はセッション項目データがデータ ストアで見つかりましたが、データがロックされている、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> メソッドのセット、 `locked` `out` パラメーターを `true`, 、設定、 `lockAge` `out` パラメーター セット \(これは、データ ストアから取得\)、現在の日付と時刻、日付から差し引いたものと、項目がロックされた時刻に、 `lockId` `out` ロック識別子にパラメーターがデータ ストアと返しますから取得 `null`します。    これにより、 <xref:System.Web.SessionState.SessionStateModule> を呼び出すオブジェクト、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> セッション項目情報を取得し、データのロックを取得しようとする 0.5 秒間隔の後にもう一度メソッドです。 場合、値を `lockAge` `out` を超えるにパラメーターが設定されている、 <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A> 値、 <xref:System.Web.SessionState.SessionStateModule> 呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A> セッション項目データと、呼び出しをロックを解除する方法、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> メソッドを再度します。  
  
 `actionFlags` パラメーターが使用されるときに、 `cookieless` と `regenerateExpiredSessionId` 属性に設定されて `true`します。`actionFlags` 値に設定 <xref:System.Web.SessionState.SessionStateActions.InitializeItem> セッション データ ストアのエントリが初期化を必要とする新しいセッションであることを示します。 呼び出しによってセッション データ ストアに初期化されていないエントリが作成された、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem%2A> メソッドです。 セッションのデータ ストアから項目が、初期化されていない項目ではない場合、 `actionFlags` パラメーターを 0 に設定されます。  
  
 クッキーなしのセッションをサポートするカスタム セッション状態ストアの実行者に設定する必要があります、 `actionFlags` `out` 、セッション データ ストアから現在のアイテムのパラメーターの値が返されます。  場合、 `actionFlags` 要求されたセッション ストアのパラメーター値が項目と等しい、 <xref:System.Web.SessionState.SessionStateActions.InitializeItem> 列挙値、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> メソッドは 0 を設定した後にデータ ストア内の値を設定する必要があります、 `actionFlags` `out` パラメーター。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeRequest">
      <MemberSignature Language="C#" Value="public abstract void InitializeRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateStoreProviderBase.InitializeRequest(System.Web.HttpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> の現在の要求。</param>
        <summary>によって呼び出される、 <see cref="T:System.Web.SessionState.SessionStateModule" /> 要求ごとの初期化のオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.InitializeRequest%2A> メソッドを呼び出すその他の前に <xref:System.Web.SessionState.SessionStateStoreProviderBase> メソッドです。 使用することができます、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.InitializeRequest%2A> 、セッション状態ストア プロバイダーで必要な要求ごとの初期化を実行するメソッドです。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseItemExclusive">
      <MemberSignature Language="C#" Value="public abstract void ReleaseItemExclusive (System.Web.HttpContext context, string id, object lockId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseItemExclusive(class System.Web.HttpContext context, string id, object lockId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive(System.Web.HttpContext,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="lockId" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> の現在の要求。</param>
        <param name="id">現在の要求に対するセッションの識別子です。</param>
        <param name="lockId">現在の要求に対するロック識別子。</param>
        <summary>リリース セッション データ内の項目のロックを格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A> 期限を更新し、セッション データ ストア内のアイテムのロックを解放します。 中に、要求の終了時に呼び出されます、 <xref:System.Web.HttpApplication.ReleaseRequestState> イベント、セッションの値が変更されていない場合。 セッションの値が変更された場合、 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出しの代わりに、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive%2A> メソッドです。  
  
 <xref:System.Web.SessionState.SessionStateModule> オブジェクトも呼び出して、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A> セッション データ ストア内の項目のロックを超えた場合は、メソッド、 <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A> 値。 詳細については、ロックとロック識別子の詳細は、「セッション ストア データのロック」を参照してください、 <xref:System.Web.SessionState.SessionStateStoreProviderBase> クラスの概要です。  
  
 <xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A> メソッドでは提供されているセッションと一致する現在のアプリケーションのセッションのデータ ストア内の項目から、ロックが削除されるだけ `id` と `lockId` 値。 場合、 `lockId` データ ストア内の 1 つと一致しない、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A> メソッドは何です。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="public abstract void RemoveItem (System.Web.HttpContext context, string id, object lockId, System.Web.SessionState.SessionStateStoreData item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveItem(class System.Web.HttpContext context, string id, object lockId, class System.Web.SessionState.SessionStateStoreData item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem(System.Web.HttpContext,System.String,System.Object,System.Web.SessionState.SessionStateStoreData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="lockId" Type="System.Object" />
        <Parameter Name="item" Type="System.Web.SessionState.SessionStateStoreData" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> の現在の要求。</param>
        <param name="id">現在の要求に対するセッションの識別子です。</param>
        <param name="lockId">現在の要求に対するロック識別子。</param>
        <param name="item">
          <see cref="T:System.Web.SessionState.SessionStateStoreData" /> データ ストアから削除する項目を表します。</param>
        <summary>項目のセッションのデータ ストアからデータを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem%2A> メソッド、要求の最後に中に、 <xref:System.Web.HttpApplication.ReleaseRequestState> セッション データ ストアからセッションのアイテムのデータを削除する、イベント、 <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> メソッドが呼び出されました。 提供されているセッションと一致する現在のアプリケーションのセッション データのみ `id` と `lockId` 値を削除します。 詳細については、ロックとロック識別子の詳細は、「セッション ストア データのロック」を参照してください、 <xref:System.Web.SessionState.SessionStateStoreProviderBase> クラスの概要です。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetItemTimeout">
      <MemberSignature Language="C#" Value="public abstract void ResetItemTimeout (System.Web.HttpContext context, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetItemTimeout(class System.Web.HttpContext context, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateStoreProviderBase.ResetItemTimeout(System.Web.HttpContext,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> の現在の要求。</param>
        <param name="id">現在の要求に対するセッションの識別子です。</param>
        <summary>セッションのデータ ストア内の項目の有効期限日時を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.ResetItemTimeout%2A> に現在の日付と時刻と、セッションにセッションの有効期限日時を更新する方法 <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> 値といずれか。  
  
-   <xref:System.Web.Configuration.PagesSection.EnableSessionState%2A> 属性は `true`, 、または  
  
-   要求が生成していない、 <xref:System.Web.HttpApplication.AcquireRequestState> と <xref:System.Web.HttpApplication.ReleaseRequestState> エラーのためのイベントです。  
  
 ASP.NET ページが要求された場合、 <xref:System.Web.Configuration.PagesSection.EnableSessionState%2A> に属性が設定されている `false`, 、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.ResetItemTimeout%2A> メソッドは、有効期限の日付と時刻、セッション データ ストア内のデータを更新すると呼ばれます。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAndReleaseItemExclusive">
      <MemberSignature Language="C#" Value="public abstract void SetAndReleaseItemExclusive (System.Web.HttpContext context, string id, System.Web.SessionState.SessionStateStoreData item, object lockId, bool newItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAndReleaseItemExclusive(class System.Web.HttpContext context, string id, class System.Web.SessionState.SessionStateStoreData item, object lockId, bool newItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive(System.Web.HttpContext,System.String,System.Web.SessionState.SessionStateStoreData,System.Object,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="item" Type="System.Web.SessionState.SessionStateStoreData" />
        <Parameter Name="lockId" Type="System.Object" />
        <Parameter Name="newItem" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> の現在の要求。</param>
        <param name="id">現在の要求に対するセッションの識別子です。</param>
        <param name="item">
          <see cref="T:System.Web.SessionState.SessionStateStoreData" /> を格納する現在のセッション値を含むオブジェクト。</param>
        <param name="lockId">現在の要求に対するロック識別子。</param>
        <param name="newItem">
          <see langword="true" /> 新しい項目として、セッション項目を識別するには <see langword="false" /> セッション項目を既存の項目を識別します。</param>
        <summary>現在の要求からの値でセッション状態のデータ ストア内のセッション項目情報を更新し、データのロックを解除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive%2A> メソッド、要求の最後に中に、 <xref:System.Web.HttpApplication.ReleaseRequestState> イベントをデータ ストアに現在のセッション項目情報を挿入したり、アイテムでは、有効期限を更新して、データのロックを解除するのには、現在の値に基づいてデータ ストア内の既存のセッション項目情報を更新します。 提供されているセッションと一致する現在のアプリケーションのセッション データのみ `id` と `lockId` の値を更新します。 ロックの詳細については「セッション ストア データのロック」を参照してください、 <xref:System.Web.SessionState.SessionStateStoreProviderBase> クラスの概要です。  
  
 現在の要求に対するセッションの値が変更されていない場合、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive%2A> メソッドは呼び出されません。 代わりに、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A> メソッドが呼び出されます。  
  
 場合、 <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> メソッドが呼び出された、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive%2A> メソッドは呼び出されません。 代わりに、 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem%2A> メソッドは、データ ソースからセッション項目データを削除します。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItemExpireCallback">
      <MemberSignature Language="C#" Value="public abstract bool SetItemExpireCallback (System.Web.SessionState.SessionStateItemExpireCallback expireCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetItemExpireCallback(class System.Web.SessionState.SessionStateItemExpireCallback expireCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateStoreProviderBase.SetItemExpireCallback(System.Web.SessionState.SessionStateItemExpireCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expireCallback" Type="System.Web.SessionState.SessionStateItemExpireCallback" />
      </Parameters>
      <Docs>
        <param name="expireCallback">
          <see cref="T:System.Web.SessionState.SessionStateItemExpireCallback" /> デリゲートは、 <see langword="Session_OnEnd" /> Global.asax ファイルで定義されたイベント。</param>
        <summary>参照を設定、 <see cref="T:System.Web.SessionState.SessionStateItemExpireCallback" /> デリゲートは、 <see langword="Session_OnEnd" /> Global.asax ファイルで定義されたイベント。</summary>
        <returns>
          <see langword="true" /> セッション状態ストアのプロバイダーには、通話がサポートされている場合、 <see langword="Session_OnEnd" /> イベント以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateModule> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.SetItemExpireCallback%2A> メソッドを決定する、モジュールが初期化されるとかどうかを呼び出す、 `Session_OnEnd` でイベントがサポートされて、 <xref:System.Web.SessionState.SessionStateStoreProviderBase> 実装およびに関連付けるには、 <xref:System.Web.SessionState.SessionStateItemExpireCallback> を持つデリゲート、 `Session_OnEnd` イベントです。  
  
 カスタム セッション状態ストア プロバイダーの実装を使用する必要があります、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.SetItemExpireCallback%2A> に通知するメソッド、 <xref:System.Web.SessionState.SessionStateModule> オブジェクトかどうかへの呼び出し、 `Session_OnEnd` イベントがサポートされているローカル参照に設定して、 <xref:System.Web.SessionState.SessionStateItemExpireCallback> によって提供されるデリゲート、 `expireCallback` パラメーター。 カスタムの実装は時期を決定する必要があります、ローカル <xref:System.Web.SessionState.SessionStateItemExpireCallback> デリゲートが呼び出されます。 たとえば、呼び出し中に、デリゲートを呼び出すことができます、 <xref:System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem%2A> 、セッションが中断されるときに呼び出されるメソッド。  
  
   
  
## 例  
 セッション状態ストアのプロバイダーの実装の例は、次を参照してください。 [Implementing a Session\-State Store Provider](http://msdn.microsoft.com/ja-jp/baadfec5-c881-468a-9681-7d8796b05a66)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>