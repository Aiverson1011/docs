<Type Name="SessionStateModule" FullName="System.Web.SessionState.SessionStateModule">
  <TypeSignature Language="C#" Value="public sealed class SessionStateModule : System.Web.SessionState.ISessionStateModule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SessionStateModule extends System.Object implements class System.Web.IHttpModule, class System.Web.SessionState.ISessionStateModule" />
  <TypeSignature Language="DocId" Value="T:System.Web.SessionState.SessionStateModule" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.SessionState.ISessionStateModule</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>アプリケーションのセッション状態のサービスを提供します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateModule>ASP がします。NET の既定のセッション状態ハンドラー。 セッション データを書き込むし、発生し、セッション状態ストアから取得、 **Session\_OnStart**と**Session\_OnEnd**イベント。 ASP.NET セッション状態を使用して格納し、ユーザー セッションの値を取得する方法の詳細については、「[ASP.NET Session State Overview](http://msdn.microsoft.com/ja-jp/6d60d381-6521-4e1d-9089-da6464f2a9bc)です。  
  
 置き換えることができます、<xref:System.Web.SessionState.SessionStateModule>のカスタム実装を持つ、<xref:System.Web.IHttpModule>セッション状態を管理するインターフェイスです。 カスタム セッション状態モジュールの例は、次を参照してください。、<xref:System.Web.SessionState.SessionStateUtility>クラスの概要です。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SessionStateModule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateModule.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.SessionState.SessionStateModule" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、アプリケーション コードから呼び出されるものではありません。  
  
 <xref:System.Web.HttpApplication> ASP.NET アプリケーションを起動すると、オブジェクトを作成します。<xref:System.Web.HttpApplication> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateModule> コンス トラクターを作成する、 <xref:System.Web.SessionState.SessionStateModule> アプリケーションのオブジェクト。<xref:System.Web.SessionState.SessionStateModule> はアプリケーションの構成で指定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateModule.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>前に最終的なクリーンアップ コードを実行、 <see cref="T:System.Web.SessionState.SessionStateModule" /> オブジェクトがメモリから解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アプリケーション コードから呼び出されるものはありません。  
  
 <xref:System.Web.HttpApplication> ASP.NET アプリケーションを起動すると、オブジェクトを作成します。<xref:System.Web.HttpApplication> オブジェクトを作成し、初期化、 <xref:System.Web.SessionState.SessionStateModule> オブジェクトのアプリケーションの呼び出しの <xref:System.Web.SessionState.SessionStateModule.Dispose%2A> メソッド、オブジェクトが離されるとします。<xref:System.Web.SessionState.SessionStateModule> はアプリケーションの構成で指定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public event EventHandler End;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler End" />
      <MemberSignature Language="DocId" Value="E:System.Web.SessionState.SessionStateModule.End" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッションが終了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateModule.End> 要求の最後にイベントが発生したときに、 <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> メソッドが呼び出されたか、セッションが切れたとき。 分単位の数を指定するときに、セッションが期限切れ、 <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> セッションに対して行われた要求されることがなく、プロパティが渡されます。  
  
 **Session\_OnEnd** セッションで使用されるリソースの破棄など、セッションのクリーンアップ作業を実行するイベントを使用します。  
  
 ハンドラーを指定する、 <xref:System.Web.SessionState.SessionStateModule.End> という名前のパブリック サブルーチンを追加することによってイベント **Session\_OnEnd** Global.asax ファイルにします。  
  
> [!NOTE]
>  **Session\_OnEnd** イベントがのみがサポートされているときにセッション状態 <xref:System.Web.SessionState.HttpSessionState.Mode%2A?displayProperty=fullName> プロパティの値が <xref:System.Web.SessionState.SessionStateMode.InProc>, 、既定であります。 場合、セッション状態 <xref:System.Web.SessionState.HttpSessionState.Mode%2A> に設定されている <xref:System.Web.SessionState.SessionStateMode.StateServer> または <xref:System.Web.SessionState.SessionStateMode.SQLServer>, 、 **Session\_OnEnd** Global.asax ファイル内のイベントは無視されます。 場合、セッション状態 <xref:System.Web.SessionState.HttpSessionState.Mode%2A> プロパティの値が <xref:System.Web.SessionState.SessionStateMode.Custom>, 、し、サポート、 **Session\_OnEnd** イベントは、カスタム セッション状態ストア プロバイダーによって決まります。  
  
 ただし、 <xref:System.Web.SessionState.SessionStateModule.End> イベントは、パブリック、Global.asax ファイルで、イベント ハンドラーを追加することによってのみ処理できます。 この制限は実装 <xref:System.Web.HttpApplication> パフォーマンスのインスタンスが再利用します。 セッション期限が切れたとき、のみ、 **Session\_OnEnd** をコードに呼び出しを防ぐために、Global.asax ファイルで指定されたイベントが実行される、 <xref:System.Web.SessionState.SessionStateModule.End> イベント ハンドラーに関連付けられている、 <xref:System.Web.HttpApplication> は現在使用中のインスタンス。  
  
 Global.asax ファイルの詳細については、次を参照してください。 [Global.asax 構文](http://msdn.microsoft.com/ja-jp/9ade9d4d-4d52-4e88-af52-53a9ffa26582)します。  
  
   
  
## 例  
 次のコード例は、Global.asax ファイルの内容を示しています、 **Session\_OnStart** と **Session\_OnEnd** イベントを定義します。  
  
```vb  
<script language="VB" runat="server">  
Public Sub Session_OnStart()  
  
End Sub  
  
Public Sub Session_OnEnd()  
  
End Sub  
</script>  
```  
  
```csharp  
<script language="C#" runat="server">  
public void Session_OnStart()  
{  
  
}  
  
public void Session_OnEnd()  
{  
  
}  
</script>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public void Init (System.Web.HttpApplication app);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Init(class System.Web.HttpApplication app) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateModule.Init(System.Web.HttpApplication)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="app" Type="System.Web.HttpApplication" />
      </Parameters>
      <Docs>
        <param name="app">現在のアプリケーション。</param>
        <summary>初期化を呼び出すときにコードを <see cref="T:System.Web.SessionState.SessionStateModule" /> オブジェクトを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アプリケーション コードから呼び出されるものはありません。  
  
 <xref:System.Web.HttpApplication> は ASP.NET アプリケーションを起動するときに作成します。<xref:System.Web.HttpApplication> オブジェクトの呼び出し、 <xref:System.Web.SessionState.SessionStateModule.Init%2A> メソッドを作成するとき、 <xref:System.Web.SessionState.SessionStateModule> アプリケーションのオブジェクト。<xref:System.Web.SessionState.SessionStateModule> クラスは、アプリケーションの構成で指定します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <see langword="mode" /> 属性、 [sessionState 要素 \(ASP.NET 設定スキーマ\)](http://msdn.microsoft.com/ja-jp/bda6fb8c-0076-43e3-9ce2-8cf1f8bdaa7d) に設定されている構成要素 <see cref="F:System.Web.SessionState.SessionStateMode.StateServer" /> または <see cref="F:System.Web.SessionState.SessionStateMode.SQLServer" />, 、され、ASP.NET アプリケーションはより小さい <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> 信頼します。</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <see langword="mode" /> 属性、 [sessionState 要素 \(ASP.NET 設定スキーマ\)](http://msdn.microsoft.com/ja-jp/bda6fb8c-0076-43e3-9ce2-8cf1f8bdaa7d) に設定されている構成要素 <see cref="F:System.Web.SessionState.SessionStateMode.Custom" /> と <see langword="customProvider" /> 属性が空か、存在しません。  
  
 または  
  
 <see langword="mode" /> 属性、 [sessionState 要素 \(ASP.NET 設定スキーマ\)](http://msdn.microsoft.com/ja-jp/bda6fb8c-0076-43e3-9ce2-8cf1f8bdaa7d) に設定されている構成要素 <see cref="F:System.Web.SessionState.SessionStateMode.Custom" /> とプロバイダーの名前で識別、 <see langword="customProvider" /> に属性が追加されていない、 [\(ASP.NET 設定スキーマ\) sessionState の providers 要素](http://msdn.microsoft.com/ja-jp/219d6778-9fb8-48ac-810d-bec68cf7d6aa) サブ要素です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseSessionState">
      <MemberSignature Language="C#" Value="public void ReleaseSessionState (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseSessionState(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateModule.ReleaseSessionState(System.Web.HttpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">セッション状態を解放する <see cref="T:System.Web.HttpContext" />。</param>
        <summary>指定した <see cref="T:System.Web.HttpContext" /> のセッションの状態を解放します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseSessionStateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ReleaseSessionStateAsync (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ReleaseSessionStateAsync(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.SessionStateModule.ReleaseSessionStateAsync(System.Web.HttpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">セッション状態を解放する <see cref="T:System.Web.HttpContext" />。</param>
        <summary>指定した <see cref="T:System.Web.HttpContext" /> のセッションの状態を非同期的に解放します。</summary>
        <returns>非同期の操作の <see cref="T:System.Threading.Tasks.Task" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public event EventHandler Start;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Start" />
      <MemberSignature Language="DocId" Value="E:System.Web.SessionState.SessionStateModule.Start" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッションが作成されたときに発生するイベントです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.SessionStateModule.Start> イベントは、新しいセッションを開始したときに、要求の先頭に発生します。 セッション識別子が含まれていない要求が加えられた場合は、セッション識別子が有効で、セッション id に関連付けられているセッションが期限切れ、新しいセッションが開始されます。  
  
 **Session\_OnStart** 初期化の作業を行うセッション変数の既定値を設定するなどのセッションのイベントを使用します。  
  
 ハンドラーを指定する、 <xref:System.Web.SessionState.SessionStateModule.Start> という名前のパブリック サブルーチンを追加することによってイベント **Session\_OnStart** Global.asax ファイルにします。  
  
 Global.asax ファイルの詳細については、次を参照してください。 [Global.asax 構文](http://msdn.microsoft.com/ja-jp/9ade9d4d-4d52-4e88-af52-53a9ffa26582)します。  
  
   
  
## 例  
 次のコード例は、Global.asax ファイルの内容を示しています、 **Session\_OnStart** と **Session\_OnEnd** イベントを定義します。  
  
```vb  
<script language="VB" runat="server">  
Public Sub Session_OnStart()  
  
End Sub  
  
Public Sub Session_OnEnd()  
  
End Sub  
</script>  
```  
  
```csharp  
<script language="C#" runat="server">  
public void Session_OnStart()  
{  
  
}  
  
public void Session_OnEnd()  
{  
  
}  
</script>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>