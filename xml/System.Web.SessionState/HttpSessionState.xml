<Type Name="HttpSessionState" FullName="System.Web.SessionState.HttpSessionState">
  <TypeSignature Language="C#" Value="public sealed class HttpSessionState : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpSessionState extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.SessionState.HttpSessionState" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>セッション状態の値だけでなくセッション レベルの設定と有効期間管理メソッドへのアクセスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET では、複数の要求で一意のブラウザー セッションに関連付けられている情報を格納するためにセッション状態管理を提供します。 キーの名前または数値インデックスで参照されている値のコレクションを格納することができます。 セッションの値と機能へのアクセスが利用可能なを使用して、 <xref:System.Web.SessionState.HttpSessionState> を通じてアクセス可能なクラス、 <xref:System.Web.HttpContext.Session%2A> 、現在のプロパティ <xref:System.Web.HttpContext>, 、または <xref:System.Web.UI.Page.Session%2A> のプロパティ、 <xref:System.Web.UI.Page>です。  
  
 セッション データは、一意の識別子を使用して特定のブラウザー セッションに関連付けられます。 ブラウザーで、有効期限のないセッションの cookie で既定では、この識別子が格納されているが、URL に設定してセッション識別子を格納するアプリケーションを構成することも、 `cookieless` 属性を `true` または <xref:System.Web.HttpCookieMode.UseUri> 、アプリケーション構成の要素にします。 ASP.NET の値を指定することによって、ブラウザーでクッキーがサポートされているかどうかを判断することが <xref:System.Web.HttpCookieMode.UseDeviceProfile> の `cookieless` 属性です。 ASP.NET の値を指定することによって、ブラウザーの cookie を有効にするかどうかを判断することもできます <xref:System.Web.HttpCookieMode.AutoDetect> の `cookieless` 属性です。 クッキーがサポートされている場合と <xref:System.Web.HttpCookieMode.UseDeviceProfile> が指定すると、またはいつ有効になっている <xref:System.Web.HttpCookieMode.AutoDetect> が指定されている場合は、セッション cookie に格納されている以外の場合に、識別子になりますセッション識別子は、URL に格納されます。  
  
 最初の要求時にセッションが開始されるで指定された時間を分単位の前に、ブラウザーで新しい要求が行われた場合に限り、セッションの値は保持されます、 <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> プロパティのパス。 新しいセッションを開始する、セッション <xref:System.Web.SessionState.SessionStateModule.Start> イベントが発生します。 このイベントを使用して、既定のセッションの値の設定など、セッションの開始時に追加の作業を行うことができます。 セッションがタイムアウトしたときに、 <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> メソッドが呼び出された、または ASP.NET アプリケーションがセッションをシャット ダウン <xref:System.Web.SessionState.SessionStateModule.End> イベントが発生します。 このイベントを使用して、必要なクリーンアップを実行することができます。<xref:System.Web.SessionState.SessionStateModule.End> イベントが発生した場合にのみ、セッション状態 `mode` に設定されている <xref:System.Web.SessionState.SessionStateMode.InProc>します。  
  
 パフォーマンスを向上させるには、クッキーを使用するセッションを割り当てないセッションの記憶域のデータが格納されるまで実際には、 <xref:System.Web.UI.Page.Session%2A> オブジェクトです。 詳細については、<xref:System.Web.SessionState.HttpSessionState.SessionID%2A> プロパティを参照してください。  
  
 セッション状態は、ASP.NET アプリケーションの境界を越えては保持されません。 別のアプリケーションに移動する、ブラウザー場合、は、\[セッション情報は新しいアプリケーションを使用できません。  
  
 セッションの値は、既定では、Web サーバー上のメモリに格納されます。 SQL Server データベース、ASP.NET 状態サーバー、またはカスタムのサーバーでセッションの値を格納することもできます。 これにより、ASP.NET、IIS プロセスまたは ASP.NET アプリケーションを再起動する場合のセッション値を保持し、Web ファーム内のすべてのサーバー間でセッションの値を使用できるようにすることができます。 設定してこの動作が構成されている、 `mode` 属性を有効な <xref:System.Web.SessionState.SessionStateMode> アプリケーション構成の要素の値。 詳細については、「[Session State Modes](http://msdn.microsoft.com/ja-jp/0bb0a3a3-650f-4c47-a0c5-b08b9b591bb4)」を参照してください。  
  
 セッション状態の代替としては、アプリケーションの状態を \(を参照してください、 <xref:System.Web.HttpApplication.Application%2A> プロパティ\) と ASP.NET のキャッシュ \(を参照してください、 <xref:System.Web.Caching> 名前空間\)、ASP.NET アプリケーションのすべてのユーザーがアクセスできるどのストア変数; ASP.NET プロファイル \(を参照してください、 <xref:System.Web.Profile> 名前空間\)、期限切れにならないことがなくデータ ストア内のユーザーの値を永続化するタイムアウトを使用してASP.NET <xref:System.Web.UI.WebControls?displayProperty=fullName>, でコントロールの値を保持する、 <xref:System.Web.UI.Control.ViewState%2A>; <xref:System.Web.HttpResponse.Cookies%2A>;、 <xref:System.Web.HttpRequest.QueryString%2A> プロパティとフィールドを HTML フォーム HTTP から提供される `POST` を使用して、 <xref:System.Web.HttpRequest.Form%2A> コレクションです。 セッション状態とその他の状態管理の代替手段の違いの詳細については、次を参照してください。 [ASP.NET State\-Management Recommendations](http://msdn.microsoft.com/ja-jp/af79fa0d-4bc8-47a6-9915-d8e355bfb732)します。  
  
   
  
## 例  
 次のコード例では、設定し、セッション状態から値を取得します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[HttpSessionState\#30](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/session2cs.aspx#30)]
 [!code-vb[HttpSessionState\#30](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/session2vb.aspx#30)]  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Web.Profile" />
    <altmember cref="N:System.Web.Caching" />
  </Docs>
  <Members>
    <Member MemberName="Abandon">
      <MemberSignature Language="C#" Value="public void Abandon ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abandon() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Abandon" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のセッションをキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Once the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method is called, the current session is no longer valid and a new session can be started. <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> causes the <xref:System.Web.SessionState.SessionStateModule.End> event to be raised. A new <xref:System.Web.SessionState.SessionStateModule.Start> event will be raised on the next request.  
  
 Session identifiers for abandoned or expired sessions are recycled by default. That is, if a request is made that includes the session identifier for an expired or abandoned session, a new session is started using the same session identifier. You can disable this by setting **languageKeyword tag is not supported!!!!**  
 attribute of the  configuration element to **languageKeyword tag is not supported!!!!**  
. For more information, see [Session Identifiers](http://msdn.microsoft.com/ja-jp/146ca206-d151-4f2e-a548-bcca05ccf0cb).  
  
 The <xref:System.Web.SessionState.SessionStateModule.End> event is supported only when the <xref:System.Web.SessionState.HttpSessionState.Mode%2A> property is set to <xref:System.Web.SessionState.SessionStateMode.InProc>.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">セッション状態コレクションに追加する項目の名前。</param>
        <param name="value">セッション状態コレクションに追加する項目の値。</param>
        <summary>セッション状態のコレクションに新しい項目を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `name` パラメーターは既存のセッション状態の項目を参照、既存の項目に指定された上書き `value`します。  
  
   
  
## 例  
 次の例を使用してセッション状態に値を格納する方法を示しています、 <xref:System.Web.SessionState.HttpSessionState.Add%2A> メソッドです。 使用してセッション状態に値を削除する方法も示します、 <xref:System.Web.SessionState.HttpSessionState.Remove%2A> メソッドです。 A <xref:System.Web.UI.WebControls.Repeater> コントロールを使用して、Web ページの内容のセッション状態を表示します。<xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> メソッドの使用をセッション状態のコレクションを反復処理し、 <xref:System.Web.UI.WebControls.Repeater> コントロールです。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[HttpSessionState\#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-vb[HttpSessionState\#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>セッション状態のコレクションからすべてのキーと値を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodePage">
      <MemberSignature Language="C#" Value="public int CodePage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CodePage" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.CodePage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のセッションの文字セットの識別子を取得または設定します。</summary>
        <value>現在のセッションの文字セットの識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A character set \(code page\) is used to interpret multi\-byte character data, determining character value, and therefore sort order. Code\-page settings apply only to multi\-byte character data, not to Unicode character data.  
  
 This <xref:System.Web.SessionState.IHttpSessionState.CodePage%2A> property is provided for compatibility with earlier versions of ASP only. If you do not need to maintain backward compatibility with ASP pages, use the <xref:System.Web.HttpResponse.ContentEncoding%2A> property instead.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contents">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.HttpSessionState Contents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.SessionState.HttpSessionState Contents" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Contents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.HttpSessionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のセッション状態オブジェクトへの参照を取得します。</summary>
        <value>現在の <see cref="T:System.Web.SessionState.HttpSessionState" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.HttpSessionState.Contents%2A> プロパティは、ASP の旧バージョンとの互換性を提供します。  
  
   
  
## 例  
 項目名の一覧し、値を次のコード例、 <xref:System.Web.SessionState.HttpSessionState.Contents%2A> プロパティです。  
  
 [!code-csharp[HttpSessionState\#9](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/snippetscs.aspx#9)]
 [!code-vb[HttpSessionState\#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/snippetsvb.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieMode">
      <MemberSignature Language="C#" Value="public System.Web.HttpCookieMode CookieMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.HttpCookieMode CookieMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.CookieMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションが Cookie なしのセッション用に構成されているかどうかを示す値を取得します。</summary>
        <value>いずれか、 <see cref="T:System.Web.HttpCookieMode" /> cookieless セッション用にアプリケーションが構成されているかどうかを示す値。 既定値は、<see cref="F:System.Web.HttpCookieMode.UseCookies" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> は `true`, 、 <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> プロパティを返します。 <xref:System.Web.HttpCookieMode.UseUri>以外の場合、 <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> プロパティを返します。 <xref:System.Web.HttpCookieMode.UseCookies>します。  
  
   
  
## 例  
 次のコード例、 `cookieless` セッション属性を `true` Web.config ファイルにします。 このサンプル アプリケーションの構成には、 <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> は <xref:System.Web.HttpCookieMode.UseUri>です。  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Array" /> セッション値を受け取る。</param>
        <param name="index">内の 0 から始まるインデックス <c>array</c> からコピーを開始します。</param>
        <summary>セッション状態の値のコレクションを 1 次元配列にコピーします。コピー操作は、指定した配列内のインデックスから始まります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッション状態コレクション内の項目の数を取得します。</summary>
        <value>コレクション内の項目数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のセッションですべてのセッション状態変数名を読み取るために使用できる列挙子を返します。</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" /> セッション状態のコレクション内の変数名を反復処理することができます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を使用してセッション状態に値を格納する方法を示しています、 <xref:System.Web.SessionState.HttpSessionState.Add%2A> メソッドです。 使用してセッション状態に値を削除する方法も示します、 <xref:System.Web.SessionState.HttpSessionState.Remove%2A> メソッドです。 A <xref:System.Web.UI.WebControls.Repeater> コントロールを使用して、Web ページ上のセッション状態の内容を表示します。<xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> メソッドの使用をセッション状態のコレクションを反復処理し、 <xref:System.Web.UI.WebControls.Repeater> コントロールです。  
  
 [!code-csharp[HttpSessionState\#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-vb[HttpSessionState\#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCookieless">
      <MemberSignature Language="C#" Value="public bool IsCookieless { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCookieless" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsCookieless" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッション ID が URL に埋め込むか、HTTP クッキーに格納されているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> セッションが URL に埋め込まれている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET では、各ブラウザーで、セッションを一意に識別します。 既定では、セッションの一意の識別子は、ブラウザーでは、有効期限のないセッション cookie に格納されます。 セッション id 格納されないように cookie の設定を指定する、 `cookieless` 属性を `true` 構成要素にします。  
  
> [!NOTE]
>  アプリケーションのセキュリティを向上させるのには、アプリケーションがこの時点で呼び出す必要があります、ログアウトするユーザーを許可しないで、 <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> メソッドです。 これにより、URL の一意識別子を使用して、ユーザーのセッションに格納されているプライベート データを取得する必要のないソースが発生する可能性が減少します。  
  
 ASP.NET では、自動的に一意のセッション ID をページの URL に挿入すると、クッキーなしのセッション状態を保持します。 たとえば、一意のセッション ID lit3py55t21z5v55vlm25s55 を含めるように ASP.NET によって、次の URL を変更しています。  
  
```  
http://www.example.com/(S(4danlfat035muve4g0mvgfrr))/orderform.aspx  
```  
  
 ASP.NET では、リンクの各ページをブラウザーに送信する前にセッション ID 値を埋め込むことによって、すべての要求されたページに含まれるリンクを変更します。 ユーザーが、サイトが提供するリンクのパスをたどっている限り、セッション状態が維持されます。 ただし、ユーザー エージェントは、URL をリライト、セッション状態のインスタンスが失われます。  
  
 セッション ID は、アプリケーション名に続く、スラッシュの後と、残りのファイルまたは仮想ディレクトリの識別子の前に、URL に埋め込まれます。 これにより、ASP.NET に関連する前に、アプリケーション名を解決するのには、 <xref:System.Web.SessionState.SessionStateModule> 要求にします。  
  
 既定では、cookie なしのセッションで使用されるセッション識別子は、再利用します。 つまり、有効期限が切れたセッション ID を持つ要求が行われた場合、新しいセッションが開始、要求で指定されたセッション ID を使用します。 この動作は、検索エンジンまたは他のプログラムを複数のブラウザー クッキーなしのセッション ID を含むリンクは、共有される場合に、セッション データが不適切に共有されることができます。 セッション id のリサイクルを無効にして、複数のクライアントによって共有されているセッション データの可能性を減らすことができます。 これを行うには、設定、 `regenerateExpiredSessionId` する構成要素の属性 `true`します。 新しいセッション ID が期限切れのセッション ID を持つ cookieless セッション要求が行われたときに生成されるようになります。 この 有効期限が切れたセッション id が行われた要求が HTTP を使用している場合を注意してください。 `POST` メソッドをから投稿されたデータが失われる場合 `regenerateExpiredSessionId` は `true`, ASP.NET がブラウザーにが URL に新しいセッション id に確実にリダイレクトを実行してください。  
  
> [!NOTE]
>  設定中に、 `regenerateExpiredSessionId` 属性を `true` 可能性を低減セッション データが共有の不要なは保護されない、望ましくないソースを取得することで別のユーザーのセッションへのアクセスに対して、 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 値と、サーバーへの要求に含めます。 セッション状態で、個人情報または機密情報を保存する場合は、ブラウザーとを含むサーバー間の通信の暗号化に SSL を使用することをお勧めしますが、 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>です。  
  
   
  
## 例  
 次のコード例、 `cookieless` セッション属性を Web.config ファイルで true です。  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      regenerateExpiredSessionId="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNewSession">
      <MemberSignature Language="C#" Value="public bool IsNewSession { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNewSession" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsNewSession" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッションが現在の要求が作成されたかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 現在の要求で、セッションが作成された場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッションは読み取り専用であるかどうかを示す値を取得します。</summary>
        <value>セッションが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッション状態の値のコレクションへのアクセスが同期されているかどうかを示す値 \(スレッド セーフである\) を取得します。</summary>
        <value>コレクションへのアクセスが同期されている \(スレッド セーフである\) 場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">セッションの値の数値インデックス。</param>
        <summary>取得または数字のインデックスでのセッション値を設定します。</summary>
        <value>指定したインデックスに格納されているセッション状態の値または <see langword="null" /> アイテムが存在しない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string name] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Item(System.String)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">セッションの値のキー名。</param>
        <summary>取得または名前でセッション値を設定します。</summary>
        <value>指定した名前のセッション状態の値または <see langword="null" /> アイテムが存在しない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameObjectCollectionBase/KeysCollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッション状態のコレクションに格納されているすべての値のキーのコレクションを取得します。</summary>
        <value>
          <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> すべてのセッション キーを格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のセッションのロケール識別子 \(LCID\) を取得または設定します。</summary>
        <value>A <see cref="T:System.Globalization.CultureInfo" /> インスタンスを現在のセッションのカルチャを指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.HttpSessionState.LCID%2A> プロパティは、ASP の旧バージョンのみと互換性のために提供します。 ASP ページとの下位互換性を維持する必要がない場合、 <xref:System.Globalization.CultureInfo.LCID%2A> プロパティ代わりにします。  
  
 ASP.NET では、セッション状態にロケール識別子は保存されません。<xref:System.Web.SessionState.HttpSessionState.LCID%2A> プロパティへのアクセス、 <xref:System.Globalization.CultureInfo.LCID%2A> プロパティを取得し、識別子を設定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.SessionStateMode Mode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.SessionState.SessionStateMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.SessionStateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のセッション状態モードを取得します。</summary>
        <value>
          <see cref="T:System.Web.SessionState.SessionStateMode" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サーバーを構成する方法については <xref:System.Web.SessionState.SessionStateMode.StateServer> または <xref:System.Web.SessionState.SessionStateMode.SQLServer> セッション状態の記憶域を参照してください [ASP.NET Session State Overview](http://msdn.microsoft.com/ja-jp/6d60d381-6521-4e1d-9089-da6464f2a9bc)します。  
  
   
  
## 例  
 次のコード例、 `mode` セッション属性を <xref:System.Web.SessionState.SessionStateMode.SQLServer> Web.config ファイルにします。 SQL Server セッション モードの場合、 `sqlConnectionString` 属性も必要です。  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="SQLServer"  
      sqlConnectionString="Data Source=localhost;Integrated Security=SSPI"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Remove(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">セッション状態コレクションから削除する項目の名前。</param>
        <summary>セッション状態のコレクションから項目を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 セッション状態のコレクションに指定した要素が含まれていないかどうかは `name`, 、コレクションは変更されません。 例外をスローすることはありません。  
  
   
  
## 例  
 次の例を使用してセッション状態に値を格納する方法を示しています、 <xref:System.Web.SessionState.HttpSessionState.Add%2A> メソッドです。 使用してセッション状態に値を削除する方法も示します、 <xref:System.Web.SessionState.HttpSessionState.Remove%2A> メソッドです。 A <xref:System.Web.UI.WebControls.Repeater> コントロールを使用して、Web ページ上のセッション状態の内容を表示します。<xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> メソッドの使用をセッション状態のコレクションを反復処理し、 <xref:System.Web.UI.WebControls.Repeater> コントロールです。  
  
 [!code-csharp[HttpSessionState\#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-vb[HttpSessionState\#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.RemoveAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>セッション状態のコレクションからすべてのキーと値を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.HttpSessionState.RemoveAll%2A> 同じ機能を実行 <xref:System.Web.SessionState.HttpSessionState.Clear%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">セッション状態コレクションから削除する項目のインデックス。</param>
        <summary>セッション状態のコレクションから指定したインデックス位置にある項目を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> が <see cref="P:System.Web.SessionState.HttpSessionState.Count" /> 以上になっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SessionID">
      <MemberSignature Language="C#" Value="public string SessionID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SessionID" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.SessionID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッションの一意の識別子を取得します。</summary>
        <value>一意のセッション識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> プロパティは、サーバー上のセッション データと、ブラウザーを一意に識別するために使用します。<xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 値がランダムに ASP.NET によって生成され、ブラウザーで有効期限のないセッション cookie に保存します。<xref:System.Web.SessionState.HttpSessionState.SessionID%2A> ASP.NET アプリケーションに要求のたびに、cookie の値が送信されます。  
  
 でも行うことを ASP.NET アプリケーションで cookie の使用を無効にする場合のセッション状態を使用して、クッキーではなく URL に設定してセッション識別子を格納するアプリケーションを構成することができます、 `cookieless` する構成要素の属性 `true`, 、または <xref:System.Web.HttpCookieMode.UseUri>, 、アプリケーションの Web.config ファイルにします。 ASP.NET の値を指定することによって、ブラウザーでクッキーがサポートされているかどうかを判断することが <xref:System.Web.HttpCookieMode.UseDeviceProfile> の `cookieless` 属性です。 ASP.NET の値を指定することによって、ブラウザーの cookie を有効にするかどうかを判断することもできます <xref:System.Web.HttpCookieMode.AutoDetect> の `cookieless` 属性です。 クッキーがサポートされている場合と <xref:System.Web.HttpCookieMode.UseDeviceProfile> が指定すると、またはいつ有効になっている <xref:System.Web.HttpCookieMode.AutoDetect> が指定されている場合は、セッション cookie に格納されている以外の場合に、識別子になりますセッション識別子は、URL に格納されます。 詳細については、<xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> プロパティを参照してください。  
  
 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> クッキーまたは URL でクリア テキストで、サーバーとブラウザー間で送信します。 その結果、望ましくないソース アクセスされてしまう別のユーザーのセッションに取得することによって、 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 値と、サーバーへの要求に含めます。 セッション状態で、個人情報または機密情報を保存する場合は、ブラウザーとを含むサーバー間の通信の暗号化に SSL を使用することをお勧めしますが、 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>です。  
  
 ASP.NET はまでセッション データのストレージを割り当てられません cookie ベースのセッション状態を使用する場合、 <xref:System.Web.UI.Page.Session%2A> オブジェクトを使用します。 このため、セッション オブジェクトがアクセスされるまでページ要求ごとに、新しいセッション ID が生成されます。 実装するか、アプリケーションでは、セッション全体で静的なセッション ID が必要とする場合は、 `Session_Start` メソッドで、アプリケーションの Global.asax ファイルにデータを保存、 <xref:System.Web.UI.Page.Session%2A> セッション ID を解決するオブジェクトまたはアプリケーションの別の部分でコードを使用するには明示的にデータを格納する、 <xref:System.Web.UI.Page.Session%2A> オブジェクトです。  
  
 アプリケーションでは、クッキーなしのセッション状態を使用する場合、セッション ID は最初のページ ビューの生成され、セッション全体で保持されます。  
  
   
  
## 例  
 次のコード例では、クッキーなしのセッション識別子を使用するセッション状態を構成する Web.config ファイルを示します。 詳細については、<xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> プロパティを参照してください。  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      cookieless="true"  
      regenerateExpiredSessionId="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticObjects">
      <MemberSignature Language="C#" Value="public System.Web.HttpStaticObjectsCollection StaticObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpStaticObjectsCollection StaticObjects" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.StaticObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpStaticObjectsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>宣言されたオブジェクトのコレクションを取得 <see langword="&lt;object Runat=&quot;Server&quot; Scope=&quot;Session&quot;/&gt;" /> ASP.NET アプリケーション ファイル Global.asax 内のタグ。</summary>
        <value>
          <see cref="T:System.Web.HttpStaticObjectsCollection" /> Global.asax ファイルで宣言されているオブジェクトを含みます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ページ上のオブジェクトがシリアル化をサポートしていないかどうか、 <xref:System.Web.SessionState.HttpSessionState.Mode%2A> はアウト プロセス \(<xref:System.Web.SessionState.SessionStateMode.SQLServer> または <xref:System.Web.SessionState.SessionStateMode.StateServer>\)、オブジェクトは作成されませんし、このコレクションには追加されません。  
  
 <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A> プロパティは、ASP の旧バージョンとの互換性を提供します。  
  
   
  
## 例  
 次のコード例の一覧、 `id` され内のオブジェクトのオブジェクトの種類、 <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A> コレクションです。  
  
 [!code-csharp[HttpSessionState\#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/snippetscs.aspx#10)]
 [!code-vb[HttpSessionState\#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/snippetsvb.aspx#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セッション状態値のコレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
        <value>コレクションへのアクセスを同期するために使用できるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得し、セッション状態プロバイダーは、セッションを終了する前に要求間で許可される分単位で、時間を設定します。</summary>
        <value>タイムアウト期間 \(分\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> を使用して、アプリケーションの Web.config ファイルでプロパティを設定できます、 `timeout` 構成要素の属性を設定できる、 <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> アプリケーション コードを使用して直接プロパティ値です。  
  
 <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> プロパティに設定できません値 525,600 分 \(1 年\) を超えています。 既定値は、20 分です。  
  
   
  
## 例  
 次のコード例、 `timeout` を 30 分に、Web.config ファイルでのセッションの属性です。  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得または個別のセッション値を設定します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>