<Type Name="FileIOPermission" FullName="System.Security.Permissions.FileIOPermission">
  <TypeSignature Language="C#" Value="public sealed class FileIOPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed FileIOPermission extends System.Security.CodeAccessPermission implements class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.Security.Permissions.FileIOPermission" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.CodeAccessPermission</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ファイルとフォルダーにアクセスする機能を制御します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このアクセス許可は、次の 4 種類のによって提供されるファイル IO アクセスによって区別 <xref:System.Security.Permissions.FileIOPermissionAccess>:  
  
-   `Read`: 長さや最終更新時刻など、ファイルに関する情報へのアクセスまたはファイルの内容に対する読み取りアクセス。  
  
-   `Write`: ファイルや名前など、ファイルに関する情報を変更するアクセス権の内容への書き込みアクセス。 削除およびを上書きすることもできます。  
  
-   `Append`: ファイルの末尾に記述する権限です。 読み取ることはできません。  
  
-   `PathDiscovery`: パス自体の情報にアクセスします。 これにより、パスにディレクトリ構造についての情報と同様に、ユーザー名など、パス内の機密情報を保護できます。 この値は、ファイルまたはフォルダーのパスによって表されるへのアクセスを付与されません。  
  
> [!NOTE]
>  提供 <xref:System.Security.Permissions.FileIOPermissionAccess.Write> アセンブリへのアクセスは完全な信頼を与えることに似ています。 必要ない場合は、アプリケーションは、ファイル システムには記述しないで、 <xref:System.Security.Permissions.FileIOPermissionAccess.Write> アクセスします。  
  
 これらのアクセス許可は独立しており、つまり、1 つに権利が別の権限を意味しません。 たとえば、 `Write` 許可するアクセス許可を意味しません `Read` または `Append`です。 複数のアクセス許可を使用する場合は、それらを結合できます次のコード例のように、ビットごとの OR を使用しています。 ファイルのアクセス許可は、標準の絶対パスで定義されます。呼び出しは、標準的なファイル パスを常に行ってください。  
  
 <xref:System.Security.Permissions.FileIOPermission> ファイルとフォルダーの保護された操作をについて説明します。<xref:System.IO.File> クラスは、ファイルおよびフォルダーへのセキュリティで保護されたアクセスを提供します。 ファイルへのハンドルが作成された、セキュリティのアクセス チェックが実行されます。 作成時にチェックを行うことで、セキュリティ チェックのパフォーマンスへの影響が最小限にします。 ファイルを開く、中に発生読み取りと書き込み何度も発生することができます。 ファイルを開くと、これ以上のチェックが行われます。 信頼されていない呼び出し元にオブジェクトが渡された場合が誤用されることができます。 たとえば、ファイル ハンドルより限られた権限でコードがアクセスできる場所グローバル パブリックな静的変数に格納する必要がありますされません。  
  
 <xref:System.Security.Permissions.FileIOPermissionAccess> ファイルまたはフォルダーに対して実行できるアクションを指定します。 さらに、これらのアクションは、複雑なインスタンスをフォームにビットごとの OR を使用して組み合わせることができます。  
  
 フォルダーへのアクセスは、それに含まれるすべてのファイルとそのサブフォルダー内のフォルダーへのアクセスだけでなくすべてのファイルへのアクセスを意味します。 たとえば、 `Read` C:\\folder1\\ へのアクセスが示すよう `Read` C:\\folder1\\file1.txt、C:\\folder1\\folder2\\、C:\\folder1\\folder2\\file2.txt というようにアクセスします。  
  
> [!NOTE]
>  前に .NET Framework のバージョンでは、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], を使って、 <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> に信頼されたコードによってシステム リソースに不注意なアクセスを阻止する方法です。<xref:System.Security.CodeAccessPermission.Deny%2A> 使われていませんし、リソースへのアクセスが付与されたアクセス許可がアセンブリのセットだけで決定されるようになりました。 ファイルへのアクセスを制限するためには、サンド ボックスで部分的に信頼されたコードを実行し、コードのアクセスが許可されたリソースのみに対するアクセス許可を割り当てる必要があります。 サンド ボックスでアプリケーションを実行する方法の詳細については、次を参照してください。 [How To: Run Partially Trusted Code in a Sandbox](http://msdn.microsoft.com/ja-jp/d1ad722b-5b49-4040-bff3-431b94bb8095)します。  
  
   
  
## 例  
 次の例では、使用するコード <xref:System.Security.Permissions.FileIOPermission>します。 次の 2 行のコードで、オブジェクトの後に `f` をコンピューターのローカル ディスクにクライアント上のすべてのファイルを読み取る権限を表します。 このコード例は、アプリケーションがファイルを読み取る権限を持っているかどうかを判断するアクセス許可を要求します。  
  
 [!code-cpp[Classic FileIOPermission Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileIOPermission Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#1)]
 [!code-vb[Classic FileIOPermission Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#1)]  
  
 次の 2 行のコードで、オブジェクトの後に `f2` C:\\test\_r を読み取り、読み取りし、C:\\example\\out.txt への書き込みアクセス許可を表します。`Read``Write` 前述したようにファイルまたはフォルダーのアクセス許可を表します。 アクセス許可を作成した後は、コードは、アプリケーションがファイルを読み書きする権限を持っているかどうかを判断するアクセス許可を要求します。  
  
 [!code-cpp[Classic FileIOPermission Example\#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#2)]
 [!code-csharp[Classic FileIOPermission Example\#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#2)]
 [!code-vb[Classic FileIOPermission Example\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.Permissions.FileIOPermissionAccess" />
    <altmember cref="T:System.Security.Permissions.FileIOPermissionAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileIOPermission (System.Security.Permissions.PermissionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.PermissionState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Security.Permissions.PermissionState" />
      </Parameters>
      <Docs>
        <param name="state">
          <see cref="T:System.Security.Permissions.PermissionState" /> 列挙値のいずれか。</param>
        <summary>指定に従って完全に制限されているか、または無制限のアクセス許可を持つ、<see cref="T:System.Security.Permissions.FileIOPermission" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 完全に制限されているいずれかが作成されます \(`None`\) または `Unrestricted` ファイルおよびディレクトリにアクセスします。  
  
   
  
## 例  
 次のコード例は、の新しいインスタンスを作成、 <xref:System.Security.Permissions.FileIOPermission> 完全に制限付きの読み取りアクセス権を持つクラス。  
  
 [!code-cpp[Classic FileIOPermission Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileIOPermission Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#1)]
 [!code-vb[Classic FileIOPermission Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="state" /> パラメーターが <see cref="T:System.Security.Permissions.PermissionState" /> の有効な値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.FileIOPermissionAccess access, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="access" Type="System.Security.Permissions.FileIOPermissionAccess" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="access">
          <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 列挙値のビットごとの組み合わせ。</param>
        <param name="path">ファイルまたはディレクトリの絶対パス。</param>
        <summary>指定されたファイルまたはディレクトリに対する指定されたアクセスにより、<see cref="T:System.Security.Permissions.FileIOPermission" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターでの 1 つだけ、 <xref:System.Security.Permissions.FileIOPermissionAccess> 値を指定したファイルまたはディレクトリを指定します。 使用して、 <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> 複雑なアクセス許可を定義するメソッドです。  
  
   
  
## 例  
 次のコード例の使用を示しています、 <xref:System.Security.Permissions.FileIOPermission.%23ctor%28System.Security.Permissions.FileIOPermissionAccess%2CSystem.String%29?displayProperty=fullName> の新しいインスタンスを作成するコンス トラクター、 <xref:System.Security.Permissions.FileIOPermission> C:\\test\_r ファイルへの完全なアクセスを提供するクラス。  
  
 [!code-cpp[Classic FileIOPermission Example\#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#2)]
 [!code-csharp[Classic FileIOPermission Example\#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#2)]
 [!code-vb[Classic FileIOPermission Example\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="access" /> パラメーターが <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> の有効な値ではありません。  
  
 \-または\-  
  
 <paramref name="path" /> パラメーターが有効な文字列ではありません。  
  
 または  
  
 <paramref name="path" /> パラメーターで、ファイルまたはディレクトリへの絶対パスが指定されませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.FileIOPermissionAccess access, string[] pathList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="access" Type="System.Security.Permissions.FileIOPermissionAccess" />
        <Parameter Name="pathList" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="access">
          <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 列挙値のビットごとの組み合わせ。</param>
        <param name="pathList">ファイルとディレクトリの絶対パスを格納する配列。</param>
        <summary>指定されたファイルおよびディレクトリに対する指定されたアクセスにより、<see cref="T:System.Security.Permissions.FileIOPermission" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、1 つだけ <xref:System.Security.Permissions.FileIOPermissionAccess> 値を指定したファイルとディレクトリを指定します。 使用して、 <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> 複雑なアクセス許可を定義するメソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="access" /> パラメーターが <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> の正しい値ではありません。  
  
 \-または\-  
  
 <paramref name="pathList" /> 配列内のエントリが、有効な文字列ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.FileIOPermissionAccess access, valuetype System.Security.AccessControl.AccessControlActions control, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="access" Type="System.Security.Permissions.FileIOPermissionAccess" />
        <Parameter Name="control" Type="System.Security.AccessControl.AccessControlActions" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="access">
          <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 列挙値のビットごとの組み合わせ。</param>
        <param name="control">
          <see cref="T:System.Security.AccessControl.AccessControlActions" /> 列挙値のビットごとの組み合わせ。</param>
        <param name="path">ファイルまたはディレクトリの絶対パス。</param>
        <summary>指定されたファイルまたはディレクトリへの指定のアクセスと、ファイル制御情報への指定のアクセス権を使用して、<see cref="T:System.Security.Permissions.FileIOPermission" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、1 つだけ <xref:System.Security.Permissions.FileIOPermissionAccess> 値を指定したファイルまたはディレクトリを指定します。 使用して、 <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> 複雑なアクセス許可を定義するメソッドです。  
  
 `control` パラメーターを指定するかどうかのアクセス制御リスト \(ACL\) で指定されたディレクトリとファイルに対して `path` 変更できますが、表示またはアクセスできません。  
  
> [!IMPORTANT]
>  アクセス制御リスト \(ACL\) は、個人またはグループがある、または権限がない、特定のファイルとそのプロパティに対する特定のアクションをについて説明します。  変更または ACL を表示する機能は、アクセス許可が重要と慎重に付与する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="access" /> パラメーターが <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> の有効な値ではありません。  
  
 \-または\-  
  
 <paramref name="path" /> パラメーターが有効な文字列ではありません。  
  
 または  
  
 <paramref name="path" /> パラメーターで、ファイルまたはディレクトリへの絶対パスが指定されませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string[] pathList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.FileIOPermissionAccess access, valuetype System.Security.AccessControl.AccessControlActions control, string[] pathList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="access" Type="System.Security.Permissions.FileIOPermissionAccess" />
        <Parameter Name="control" Type="System.Security.AccessControl.AccessControlActions" />
        <Parameter Name="pathList" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="access">
          <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 列挙値のビットごとの組み合わせ。</param>
        <param name="control">
          <see cref="T:System.Security.AccessControl.AccessControlActions" /> 列挙値のビットごとの組み合わせ。</param>
        <param name="pathList">ファイルとディレクトリの絶対パスを格納する配列。</param>
        <summary>指定されたファイルとディレクトリへの指定のアクセスと、ファイル制御情報への指定のアクセス権を使用して、<see cref="T:System.Security.Permissions.FileIOPermission" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、1 つだけ <xref:System.Security.Permissions.FileIOPermissionAccess> 値を指定したファイルとディレクトリを指定します。 使用して、 <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> 複雑なアクセス許可を定義するメソッドです。  
  
 `control` パラメーターを指定するかどうかのアクセス制御リスト \(ACL\) で指定されたディレクトリとファイルに対して `path` 変更できますが、表示またはアクセスできません。  
  
> [!IMPORTANT]
>  アクセス制御リスト \(ACL\) は、個人またはグループがある、または権限がない、特定のファイルとそのプロパティに対する特定のアクションをについて説明します。  変更または ACL を表示する機能は、アクセス許可が重要と慎重に付与する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="access" /> パラメーターが <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> の正しい値ではありません。  
  
 \-または\-  
  
 <paramref name="pathList" /> 配列内のエントリが、有効な文字列ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddPathList">
      <MemberSignature Language="C#" Value="public void AddPathList (System.Security.Permissions.FileIOPermissionAccess access, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPathList(valuetype System.Security.Permissions.FileIOPermissionAccess access, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="access" Type="System.Security.Permissions.FileIOPermissionAccess" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="access">
          <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 値のビットごとの組み合わせ。</param>
        <param name="path">ファイルまたはディレクトリの絶対パス。</param>
        <summary>指定したファイルまたはディレクトリに対するアクセス権を、既存のアクセス許可の状態に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、現在のアクセス許可の状態を追加することでファイルおよびディレクトリのアクセスを変更できます。  
  
   
  
## 例  
 次のコード例の使用を示しています、 <xref:System.Security.Permissions.FileIOPermission.AddPathList%28System.Security.Permissions.FileIOPermissionAccess%2CSystem.String%29?displayProperty=fullName> メソッドです。  
  
 [!code-cpp[Classic FileIOPermission Example\#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#2)]
 [!code-csharp[Classic FileIOPermission Example\#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#2)]
 [!code-vb[Classic FileIOPermission Example\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="access" /> パラメーターが <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> の有効な値ではありません。  
  
 \-または\-  
  
 <paramref name="path" /> パラメーターが有効な文字列ではありません。  
  
 または  
  
 <paramref name="path" /> パラメーターで、ファイルまたはディレクトリへの絶対パスが指定されませんでした。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> パラメーターの形式が正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddPathList">
      <MemberSignature Language="C#" Value="public void AddPathList (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPathList(valuetype System.Security.Permissions.FileIOPermissionAccess access, string[] pathList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="access" Type="System.Security.Permissions.FileIOPermissionAccess" />
        <Parameter Name="pathList" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="access">
          <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 値のビットごとの組み合わせ。</param>
        <param name="pathList">ファイルとディレクトリの絶対パスを格納する配列。</param>
        <summary>指定したファイルおよびディレクトリに対するアクセス権を、既存のアクセス許可の状態に追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use this method to modify file and directory access by adding to the state of the current permission.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="access" /> パラメーターが <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> の正しい値ではありません。  
  
 または  
  
 <paramref name="pathList" /> 配列内のエントリが、有効ではありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="pathList" /> 配列内のエントリが、正しくない形式です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pathList" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AllFiles">
      <MemberSignature Language="C#" Value="public System.Security.Permissions.FileIOPermissionAccess AllFiles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Permissions.FileIOPermissionAccess AllFiles" />
      <MemberSignature Language="DocId" Value="P:System.Security.Permissions.FileIOPermission.AllFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべてのファイルへの許可されたアクセスを取得または設定します。</summary>
        <value>すべてのファイルのファイル I\/O フラグのセット。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを取得またはローカル コンピューターおよびネットワーク ドライブ上のすべてのファイルにアクセス許可を設定します。  
  
 個人 <xref:System.Security.Permissions.FileIOPermissionAccess> をビットごとの AND 演算を使用する値をチェックすることができます。  
  
   
  
## 例  
 次のコード例の使用を示しています、 <xref:System.Security.Permissions.FileIOPermission.AllFiles%2A> プロパティです。  
  
 [!code-cpp[Classic FileIOPermission Example\#3](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#3)]
 [!code-csharp[Classic FileIOPermission Example\#3](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#3)]
 [!code-vb[Classic FileIOPermission Example\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllLocalFiles">
      <MemberSignature Language="C#" Value="public System.Security.Permissions.FileIOPermissionAccess AllLocalFiles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Permissions.FileIOPermissionAccess AllLocalFiles" />
      <MemberSignature Language="DocId" Value="P:System.Security.Permissions.FileIOPermission.AllLocalFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Permissions.FileIOPermissionAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべてのローカル ファイルへの許可されたアクセスを取得または設定します。</summary>
        <value>すべてのローカル ファイルのファイル I\/O フラグのセット。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ローカル ファイルは、ローカル コンピューターに含まれるファイルです。 ネットワーク ドライブからアクセスされていないすべてのファイルは、ローカル ファイルです。  
  
 個人 <xref:System.Security.Permissions.FileIOPermissionAccess> をビットごとの AND 演算を使用する値をチェックすることができます。  
  
   
  
## 例  
 次のコード例の使用を示しています、 <xref:System.Security.Permissions.FileIOPermission.AllLocalFiles%2A> プロパティです。  
  
 [!code-cpp[Classic FileIOPermission Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileIOPermission Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#1)]
 [!code-vb[Classic FileIOPermission Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.Copy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のアクセス許可の同一のコピーを作成して返します。</summary>
        <returns>現在のアクセス許可のコピー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A copy of the permission represents the same access to resources as the original permission.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在の <see cref="T:System.Security.Permissions.FileIOPermission" /> と比較する <see cref="T:System.Security.Permissions.FileIOPermission" /> オブジェクト。</param>
        <summary>指定した <see cref="T:System.Security.Permissions.FileIOPermission" /> オブジェクトが、現在の <see cref="T:System.Security.Permissions.FileIOPermission" /> と等しいかどうかを判断します。</summary>
        <returns>指定した <see cref="T:System.Security.Permissions.FileIOPermission" /> が現在の <see cref="T:System.Security.Permissions.FileIOPermission" /> オブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information, see <xref:System.Object.Equals%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public override void FromXml (System.Security.SecurityElement esd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXml(class System.Security.SecurityElement esd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="esd" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="esd">アクセス許可の再構築に使用する XML エンコード。</param>
        <summary>XML エンコードから指定された状態で、アクセス許可を再構築します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="esd" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="esd" /> パラメーターが有効なアクセス許可要素ではありません。  
  
 \-または\-  
  
 <paramref name="esd" /> パラメーターのバージョン番号は、互換性のないものです。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造での使用に適している、<see cref="T:System.Security.Permissions.FileIOPermission" /> オブジェクトのハッシュ コードを取得します。</summary>
        <returns>現在の <see cref="T:System.Security.Permissions.FileIOPermission" /> オブジェクトのハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 同じアクセス許可の 2 つのインスタンスのハッシュ コードが異なる場合があります、したがってハッシュ コード 2 つの比較に使用されていない <xref:System.Security.Permissions.FileIOPermission> オブジェクトです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathList">
      <MemberSignature Language="C#" Value="public string[] GetPathList (System.Security.Permissions.FileIOPermissionAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetPathList(valuetype System.Security.Permissions.FileIOPermissionAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="access" Type="System.Security.Permissions.FileIOPermissionAccess" />
      </Parameters>
      <Docs>
        <param name="access">ファイル アクセスの単一の型を表す <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 値の 1 つです。</param>
        <summary>指定した <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> を含むすべてのファイルとディレクトリを取得します。</summary>
        <returns>
          <paramref name="access" /> パラメーターで指定されたアクセスが付与されているファイルおよびディレクトリのパスを含む配列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、現在のアクセス許可の状態を取得します。 両方の状態を取得する `Read` と `Write` アクセス、このメソッドに 2 つの呼び出しが必要です。  
  
> [!NOTE]
>  `access` パラメーターの値に限定 <xref:System.Security.Permissions.FileIOPermissionAccess>, 、ファイルへのアクセスの 1 つの型を表します。 これらの値は <xref:System.Security.Permissions.FileIOPermissionAccess.Read>, 、<xref:System.Security.Permissions.FileIOPermissionAccess.Write>, 、<xref:System.Security.Permissions.FileIOPermissionAccess.Append>, 、および <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>です。 値を許容できる `access` は含めないでください <xref:System.Security.Permissions.FileIOPermissionAccess.NoAccess> と <xref:System.Security.Permissions.FileIOPermissionAccess.AllAccess>, 、ファイルへのアクセスの 1 つの型を表していません。  
  
   
  
## 例  
 次のコード例の使用を示しています、 <xref:System.Security.Permissions.FileIOPermission.GetPathList%2A> メソッドです。 この例に示されている例の一部である、 <xref:System.Security.Permissions.FileIOPermission> クラスです。  
  
 [!code-cpp[System.Security.Permissions.FileIOPermission\#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/fileiopermission.cpp#7)]
 [!code-csharp[System.Security.Permissions.FileIOPermission\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/fileiopermission.cs#7)]
 [!code-vb[System.Security.Permissions.FileIOPermission\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/fileiopermission.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="access" /> が <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> の正しい値ではありません。  
  
 または  
  
 <paramref name="access" /> が <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> で、ファイル アクセスの 2 つ以上の型を表しているか、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" /> がファイル アクセスのどの型も表していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">現在のアクセス許可との共通部分のあるアクセス許可。 現在のアクセス許可と同じ型である必要があります。</param>
        <summary>現在のアクセス許可と指定したアクセス許可の積集合であるアクセス許可を作成して返します。</summary>
        <returns>現在のアクセス許可と指定したアクセス許可の積集合を表す新しいアクセス許可。 積集合が空の場合、この新しいアクセス許可は <see langword="null" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 2 つのアクセス許可の積集合は、両方に共通する操作のセットを表すアクセス許可です。 両方の元のアクセス許可に適合する要求だけでは、交差する位置を渡します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> パラメーターが <see langword="null" /> でなく、また現在のアクセス許可と同じ型でもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public override bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">サブセットの関係にあるかどうかをテストするアクセス許可。 このアクセス許可は、現在のアクセス許可と同じ型であることが必要です。</param>
        <summary>現在のアクセス許可が、指定したアクセス許可のサブセットであるかどうかを判断します。</summary>
        <returns>現在のアクセス許可が、指定したアクセス許可のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のアクセス許可は、現在のアクセス許可を指定した権限に格納されている一連の操作を指定する場合、指定した権限のサブセットです。 たとえば、C:\\example.txt への読み取りアクセス権を表すアクセス許可は、C:\\ の読み取りアクセス権を表すアクセス許可のサブセットです。 このメソッドが戻る場合 `true`, 、現在のアクセス許可がない以上へのアクセスが保護されたリソースは、指定した権限を表します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> パラメーターが <see langword="null" /> でなく、また現在のアクセス許可と同じ型でもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.IsUnrestricted" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のアクセス許可が無制限かどうかを示す値を返します。</summary>
        <returns>現在のアクセス許可が無制限の場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 無制限のアクセス許可は、アクセス許可によって保護されているすべてのリソースへのアクセスを表します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPathList">
      <MemberSignature Language="C#" Value="public void SetPathList (System.Security.Permissions.FileIOPermissionAccess access, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPathList(valuetype System.Security.Permissions.FileIOPermissionAccess access, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="access" Type="System.Security.Permissions.FileIOPermissionAccess" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="access">
          <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 値のビットごとの組み合わせ。</param>
        <param name="path">ファイルまたはディレクトリの絶対パス。</param>
        <summary>指定したアクセスを指定したファイルまたはディレクトリに設定し、既存のアクセス許可の状態を置き換えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定したアクセスの種類の現在のアクセス許可の以前の状態が上書きされます。 次のコードを C:\\temp のアクセス権を設定する <xref:System.Security.Permissions.FileIOPermissionAccess.Read>です。  
  
 [!code-cpp[System.Security.Permissions.FileIOPermission\#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#12)]
 [!code-csharp[System.Security.Permissions.FileIOPermission\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#12)]
 [!code-vb[System.Security.Permissions.FileIOPermission\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#12)]  
  
 アクセスの種類が同じではありません、このアクセスは、次のコードでは上書きされません。  
  
 [!code-cpp[System.Security.Permissions.FileIOPermission\#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#13)]
 [!code-csharp[System.Security.Permissions.FileIOPermission\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#13)]
 [!code-vb[System.Security.Permissions.FileIOPermission\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#13)]  
  
   
  
## 例  
 次のコード例の使用を示しています、 <xref:System.Security.Permissions.FileIOPermission.SetPathList%28System.Security.Permissions.FileIOPermissionAccess%2CSystem.String%29?displayProperty=fullName> メソッドです。  
  
 [!code-cpp[System.Security.Permissions.FileIOPermission\#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/fileiopermission.cpp#7)]
 [!code-csharp[System.Security.Permissions.FileIOPermission\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/fileiopermission.cs#7)]
 [!code-vb[System.Security.Permissions.FileIOPermission\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/fileiopermission.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="access" /> パラメーターが <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> の有効な値ではありません。  
  
 \-または\-  
  
 <paramref name="path" /> パラメーターが有効な文字列ではありません。  
  
 または  
  
 <paramref name="path" /> パラメーターで、ファイルまたはディレクトリへの絶対パスが指定されませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetPathList">
      <MemberSignature Language="C#" Value="public void SetPathList (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPathList(valuetype System.Security.Permissions.FileIOPermissionAccess access, string[] pathList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="access" Type="System.Security.Permissions.FileIOPermissionAccess" />
        <Parameter Name="pathList" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="access">
          <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 値のビットごとの組み合わせ。</param>
        <param name="pathList">ファイルとディレクトリの絶対パスを格納する配列。</param>
        <summary>指定したアクセスを指定したファイルとディレクトリに設定し、指定したアクセスの現在の状態を新しいパスのセットで置き換えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定したアクセスの種類の現在のアクセス許可の以前の状態が上書きされます。 次のコードを C:\\temp のアクセス権を設定する <xref:System.Security.Permissions.FileIOPermissionAccess.Read>です。  
  
 アクセスの種類が同じではありません、このアクセスは、次のコードでは上書きされません。  
  
 [!code-cpp[System.Security.Permissions.FileIOPermission\#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#15)]
 [!code-csharp[System.Security.Permissions.FileIOPermission\#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#15)]
 [!code-vb[System.Security.Permissions.FileIOPermission\#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="access" /> パラメーターが <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> の正しい値ではありません。  
  
 または  
  
 <paramref name="pathList" /> パラメーター内のエントリが正しい文字列ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.ToXml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アクセス許可とその現在の状態の XML エンコードを作成します。</summary>
        <returns>状態情報を含む、アクセス許可の XML エンコード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Union (System.Security.IPermission other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Union(class System.Security.IPermission other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="other">現在のアクセス許可と結合するアクセス許可。 現在のアクセス許可と同じ型である必要があります。</param>
        <summary>現在のアクセス許可と指定されたアクセス許可の和集合であるアクセス許可を作成します。</summary>
        <returns>現在のアクセス許可と指定されたアクセス許可の和集合を表す新しいアクセス許可。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しの結果 <xref:System.Security.Permissions.FileIOPermission.Union%2A> は現在のアクセス許可と、指定した権限の両方で表されるすべての操作を表す権限。 いずれかのアクセス許可に適合する要求は、その共用体を渡します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other" /> パラメーターが <see langword="null" /> でなく、また現在のアクセス許可と同じ型でもありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddPathList">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したファイルおよびディレクトリに対するアクセス権を、既存のアクセス許可の状態に追加します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Security.Permissions.FileIOPermission" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetPathList">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したファイルおよびディレクトリに対する指定したアクセスを設定し、アクセス許可の既存の状態を置き換えます。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>