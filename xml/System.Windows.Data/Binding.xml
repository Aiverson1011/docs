<Type Name="Binding" FullName="System.Windows.Data.Binding">
  <TypeSignature Language="C#" Value="public class Binding : System.Windows.Data.BindingBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Windows.Data.BindingBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.Binding" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Data.BindingBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>バインドの定義に高レベルでアクセスします。バインドは、バインド ターゲット オブジェクト \(通常は、WPF 要素\) のプロパティと任意のデータ ソース \(データベース、XML ファイル、データを格納している任意のオブジェクトなど\) とを接続します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] data binding provides a simple and consistent way for applications to present and interact with data. Data binding enables you to synchronize the values of the properties of two different objects.  
  
 To establish a binding, use the <xref:System.Windows.Data.Binding> class or one of the other classes that inherit <xref:System.Windows.Data.BindingBase>. Regardless of what object you are binding and the nature of your data source, each binding follows the model illustrated by the following figure.  
  
 3faf69d0-345c-4b86-b571-eb4f3d3390ba  
  
 The figure demonstrates the following fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] data binding concepts.  
  
-   Each binding typically has these four components: a binding target object, a target property, a binding source, and a <xref:System.Windows.Data.Binding.Path%2A> to the value in the binding source to use. For example, if you want to bind the content of a <xref:System.Windows.Controls.TextBox> to the Name property of an Employee object, your target object is the <xref:System.Windows.Controls.TextBox>, the target property is the <xref:System.Windows.Controls.TextBox.Text%2A> property, the value to use is Name, and the source object is the Employee object.  
  
-   The target property must be a dependency property. This also means that you cannot bind a field. Most properties of <xref:System.Windows.UIElement> objects are dependency properties and most dependency properties, except read\-only ones, support data binding by default. \(Only <xref:System.Windows.DependencyObject> types can define dependency properties and all <xref:System.Windows.UIElement> objects derive from <xref:System.Windows.DependencyObject>.\)  
  
-   Although not specified in the figure, it should be noted that the binding source object is not restricted to being a custom [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] object. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] data binding supports data in the form of [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] objects and [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]. To provide some examples, your binding source may be a <xref:System.Windows.UIElement>, any list object, a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] object that is associated with [!INCLUDE[TLA#tla_adonet](~/includes/tlasharptla-adonet-md.md)] data or Web Services, or an XmlNode that contains your [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] data.  
  
 Use the <xref:System.Windows.Data.Binding.Mode%2A> property to specify the direction of the data flow. To detect source changes in one\-way or two\-way bindings, the source must implement a suitable property change notification mechanism such as <xref:System.ComponentModel.INotifyPropertyChanged>. For an example, see [How to: Implement Property Change Notification](http://msdn.microsoft.com/ja-jp/30b59d9e-8c3a-4349-aa82-4be837e841cf). The <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> property specifies the timing of source updates. For more information, see "Basic Data Binding Concepts" in [Data Binding Overview](http://msdn.microsoft.com/ja-jp/c707c95f-7811-401d-956e-2fffd019a211).  
  
<a name="xamlAttributeUsage_PriorityBinding"></a>   
## XAML Attribute Usage  
  
```  
<object property="{Binding declaration}"/>  
```  
  
<a name="xamlValues_PriorityBinding"></a>   
## XAML Values  
 *declaration*  
 Zero or more attribute\-assignment clauses separated by commas \(,\). For more information, see [Binding Markup Extension](http://msdn.microsoft.com/ja-jp/83d6e2a4-1b0c-4fc8-bd96-b5e98800ab63) or [Binding Declarations Overview](http://msdn.microsoft.com/ja-jp/b97fd626-4c0d-4761-872a-2bca5820da2c).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.MultiBinding" />
    <altmember cref="T:System.Windows.Data.PriorityBinding" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Data.Binding" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">バインドのための初期 <see cref="P:System.Windows.Data.Binding.Path" />。</param>
        <summary>初期化パスを使用して、<see cref="T:System.Windows.Data.Binding" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSourceUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void AddSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddSourceUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">イベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</param>
        <param name="handler">追加するハンドラー。</param>
        <summary>
          <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> 添付イベントのハンドラーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでアタッチされるイベントの使用状況をサポートする [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTargetUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void AddTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddTargetUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">イベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</param>
        <param name="handler">追加するハンドラー。</param>
        <summary>
          <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> 添付イベントのハンドラーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method supports attached event usage in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または非同期データ ディスパッチャーに渡される非透過データを設定します。</summary>
        <value>データは、非同期データ ディスパッチャーに渡されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.IsAsync" />
        <altmember cref="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous" />
        <altmember cref="P:System.Windows.Data.XmlDataProvider.IsAsynchronous" />
      </Docs>
    </Member>
    <Member MemberName="BindsDirectlyToSource">
      <MemberSignature Language="C#" Value="public bool BindsDirectlyToSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BindsDirectlyToSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.BindsDirectlyToSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Data.Binding.Path" /> を評価するときに、データ項目を基準にするか、<see cref="T:System.Windows.Data.DataSourceProvider" /> オブジェクトを基準にするかを示す値を取得または設定します。</summary>
        <value>データ項目自体を基準にしてパスを評価する場合は <see langword="false" />、それ以外の場合は <see langword="true" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常の動作 \(このプロパティが `false`\) 用の特別な処理が含まれています <xref:System.Windows.Data.DataSourceProvider> オブジェクトです。 この場合は、バインディング エンジンが評価される、 <xref:System.Windows.Data.Binding.Path%2A> から取得したオブジェクトを基準とした、 <xref:System.Windows.Data.DataSourceProvider.Data%2A> プロパティです。 さらに、待機、バインド、 <xref:System.Windows.Data.DataSourceProvider.DataChanged> イベントし、それに従って反応します。 このプロパティを設定 `true` この動作をオーバーライドして、バインディング アクセス権を付与のプロパティに、 <xref:System.Windows.Data.DataSourceProvider> オブジェクト自体です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.ObjectDataProvider" />
        <altmember cref="T:System.Windows.Data.XmlDataProvider" />
      </Docs>
    </Member>
    <Member MemberName="Converter">
      <MemberSignature Language="C#" Value="public System.Windows.Data.IValueConverter Converter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.IValueConverter Converter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Converter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.IValueConverter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用するコンバーターを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Data.IValueConverter" /> 型の値。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バインディングは、元の値と対象の値の型変換を実行しようとする既定のコンバーターを暗黙的に使用します。 変換を実行できないかどうか、既定のコンバーターを返します `null`します。  
  
 バインディングにカスタム値コンバーターを関連付ける場合を実装するクラスを作成する必要があります、 <xref:System.Windows.Data.IValueConverter> インターフェイスし、実装を提供、 <xref:System.Windows.Data.IValueConverter.Convert%2A> と <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> メソッドです。 値コンバーターでは、データの種類の変更、文字セットなど、カルチャの詳細の間の変換、または、プレゼンテーションの他の側面を変更できます。 変換の一般的なシナリオの例については、「データの変換」を参照してください、 [データ バインドの概要](http://msdn.microsoft.com/ja-jp/c707c95f-7811-401d-956e-2fffd019a211)します。  
  
<a name="xamlAttributeUsage_Converter"></a>   
## XAML 属性の使用方法  
  
```  
<object Converter="myConverter"/>  
```  
  
<a name="xamlValues_Converter"></a>   
## XAML 値  
 *myConverter*  
 実装するクラスへの参照をリソース、 <xref:System.Windows.Data.IValueConverter> インターフェイスの実装が含まれますが、 <xref:System.Windows.Data.IValueConverter.Convert%2A> と <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> メソッドです。 を参照するには、値コンバーターを使用して、 [StaticResource マークアップ拡張機能](http://msdn.microsoft.com/ja-jp/97af044c-71f1-4617-9a94-9064b68185d2)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo ConverterCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo ConverterCulture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ConverterCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンバーターを評価するカルチャを取得または設定します。</summary>
        <value>既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If you do not set this property, the binding engine uses the **languageKeyword tag is not supported!!!!**  
 property of the binding target object. In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] this defaults to "en\-US" or inherits the value from the root element \(or any element\) of the page, if one has been explicitly set.  
  
 For information about data conversion, see the Data Conversion section in the [Data Binding Overview](http://msdn.microsoft.com/ja-jp/c707c95f-7811-401d-956e-2fffd019a211).  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConverterParameter">
      <MemberSignature Language="C#" Value="public object ConverterParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ConverterParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ConverterParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に渡すパラメーター、 <see cref="P:System.Windows.Data.Binding.Converter" />です。</summary>
        <value>渡されるパラメーターを <see cref="P:System.Windows.Data.Binding.Converter" />です。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Windows.Data.Binding.ConverterParameter%2A> プロパティ オブジェクトを変換する方法を指定します。  このプロパティは、その他の情報をバインディングで使用するコンバーターを渡します。  指定した場合、 <xref:System.Windows.Data.Binding.ConverterParameter%2A>, に値が渡される、 <xref:System.Windows.Data.IValueConverter.Convert%2A> と <xref:System.Windows.Data.IValueConverter.ConvertBack%2A> メソッドとして、 `parameter` パラメーター。  
  
 例については、次を参照してください。 [する方法: バインドされている品目の一覧に値基づいて生成](http://msdn.microsoft.com/ja-jp/b3d06378-b511-4181-95aa-316d60c9229b)します。 この例では、実装を示しています、 <xref:System.Windows.Data.IMultiValueConverter> 使用状況が引き続き適用されますが、します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNothing">
      <MemberSignature Language="C#" Value="public static readonly object DoNothing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object DoNothing" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.DoNothing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインディング エンジンにアクションを実行しないように指示するために、戻り値として使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A binding source property or a converter can return <xref:System.Windows.Data.Binding.DoNothing?displayProperty=fullName> to instruct the binding engine not to perform any action. For example, to instruct the binding engine not to transfer a value to the binding target, not to move to the next <xref:System.Windows.Data.Binding> in a <xref:System.Windows.Data.PriorityBinding>, or not to use the **languageKeyword tag is not supported!!!!**  
 or default value.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインド ソース オブジェクトとして使用する要素の名前を取得または設定します。</summary>
        <value>目的の要素の <see langword="Name" /> プロパティまたは [x:Name ディレクティブ](http://msdn.microsoft.com/ja-jp/b7e61222-e8cf-48d2-acd0-6df3b7685d48) の値。 コード内で要素を参照できるのは、目的の要素が <see langword="RegisterName" /> を使用して適切な <see cref="T:System.Windows.NameScope" /> に登録されている場合に限ります。 詳細については、「[WPF XAML 名前スコープ](http://msdn.microsoft.com/ja-jp/52bbf4f2-15fc-40d4-837b-bb4c21ead7d4)」を参照してください。  
  
 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This property is useful when you want to bind to the property of another element in your application. For example, if you want to use a <xref:System.Windows.Controls.Slider> to control the height of another control in your application, or if you want to bind the <xref:System.Windows.Controls.ContentControl.Content%2A> of your control to the <xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A> property of your <xref:System.Windows.Controls.ListBox> control.  
  
 By default, bindings inherit the data context specified by the **languageKeyword tag is not supported!!!!**  
 property, if one has been set. However, the <xref:System.Windows.Data.Binding.ElementName%2A> property is one of the ways you can explicitly set the source of a <xref:System.Windows.Data.Binding> and override the inherited data context. For more information, see [How to: Specify the Binding Source](http://msdn.microsoft.com/ja-jp/55d47757-2648-4a52-987f-b767953f168c).  
  
 The <xref:System.Windows.Data.Binding.Source%2A> and <xref:System.Windows.Data.Binding.RelativeSource%2A> properties of the <xref:System.Windows.Data.Binding> class also enable you to set the source of the binding explicitly. However, only one of the three properties, <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, and <xref:System.Windows.Data.Binding.RelativeSource%2A>, should be set for each binding, or a conflict might occur. This property throws an exception if there is a binding source conflict.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXmlNamespaceManager">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlNamespaceManager GetXmlNamespaceManager (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlNamespaceManager GetXmlNamespaceManager(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNamespaceManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">名前空間情報の取得元となるオブジェクト。</param>
        <summary>指定したオブジェクトにアタッチされているバインドによって使用される XML 名前空間マネージャー オブジェクトを返します。</summary>
        <returns>渡されたオブジェクト要素上のバインディングに関連する XML 名前空間を表示するために使用されるオブジェクトを返します。 このオブジェクトは <see cref="T:System.Xml.XmlNamespaceManager" /> としてキャストする必要があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの添付プロパティの使用をサポートする、 <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A> 添付プロパティです。  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] 名前空間マネージャーは、バインディング内のデータの元の場合にのみ、 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] バインド ソース \(<xref:System.Windows.Data.XmlDataProvider> オブジェクト\)。  
  
 名前空間マネージャーが具体的には適用されていない場合、元のデータ ソースを作成またはを呼び出して、その後 <xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A> バインドで、このメソッドは `null`です。  
  
 このメソッドは常に返す `null` バインドの背後にあるデータがない場合 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="target" /> パラメーターを <see langword="null" /> にすることはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IndexerName">
      <MemberSignature Language="C#" Value="public const string IndexerName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string IndexerName" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.IndexerName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>として使用される、 <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName" /> の <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> をインデクサー プロパティが変更されたことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="public bool IsAsync { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.IsAsync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Data.Binding" /> が値の取得と設定を非同期で行う必要があるかどうかを示す値を取得または設定します。</summary>
        <value>既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Data.Binding.IsAsync%2A> プロパティと、 `get` 、バインド ソースのプロパティのアクセサー時間がかかる場合があります。 1 つの例は、イメージのプロパティで、 `get` Web からダウンロードするアクセサー。 設定 <xref:System.Windows.Data.Binding.IsAsync%2A> に `true` ブロッキングを回避、 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] ダウンロード処理中にします。  
  
 バインディングがレポートに到達する値を待っている間に、 <xref:System.Windows.Data.BindingBase.FallbackValue%2A>, 、いずれかが使用可能なまたは既定値のバインドの対象になるプロパティです。  
  
 ただしがないことを使用する必要がある多くのシナリオ、 <xref:System.Windows.Data.Binding.IsAsync%2A> プロパティです。[!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] ガイドラインが桁違いフィールド セットよりも低速であるプロパティを定義しないことを勧めします。 クラスを作成する場合は、処理以外の操作を非常に遅いことを検討してください、 `get` アクセサーと結果をキャッシュします。 詳細については、次を参照してください。 [NIB: プロパティの間で選択するとメソッド](http://msdn.microsoft.com/ja-jp/55825e8f-7e2e-448a-9505-7217cc91b1af)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.AsyncState" />
        <altmember cref="P:System.Windows.Data.ObjectDataProvider.IsAsynchronous" />
        <altmember cref="P:System.Windows.Data.XmlDataProvider.IsAsynchronous" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.BindingMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインドのデータ フローの方向を示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Data.BindingMode" /> 値のいずれか。 既定は <see cref="F:System.Windows.Data.BindingMode.Default" /> です。これは、ターゲットの依存関係プロパティの、既定のバインド モード値を返します。 ただし、既定値は各依存関係プロパティによって異なります。 一般に、ユーザーが編集できる、テキスト ボックスやチェック ボックスなどのコントロール プロパティは既定で双方向のバインディングであり、それ以外のほとんどのプロパティは既定で一方向のバインドになります。  
  
 依存関係プロパティが既定で一方向と双方向のどちらでバインドされるかをプログラムで判断する 1 つの方法として、<see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" /> を使用してそのプロパティのプロパティ メタデータを取得してから、<see cref="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault" /> プロパティのブール値を確認することがきます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サポートするために <xref:System.Windows.Data.BindingMode.OneWay> と <xref:System.Windows.Data.BindingMode.TwoWay> 基になるデータのバインドを実装する必要があります <xref:System.ComponentModel.INotifyPropertyChanged>します。 詳細については、「 [方法: プロパティの変更通知の実装](http://msdn.microsoft.com/ja-jp/30b59d9e-8c3a-4349-aa82-4be837e841cf)します。  
  
 <xref:System.Windows.Data.BindingMode.TwoWay> または <xref:System.Windows.Data.BindingMode.OneWayToSource> バインドを設定して、ターゲットからソースへの更新プログラムを制御することができます、 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> プロパティです。 詳細については、「<xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>」を参照してください。  
  
 さまざまなバインド モードの詳細については、次を参照してください。 [データ バインドの概要](http://msdn.microsoft.com/ja-jp/c707c95f-7811-401d-956e-2fffd019a211)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnSourceUpdated">
      <MemberSignature Language="C#" Value="public bool NotifyOnSourceUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnSourceUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnSourceUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインディング ターゲットからバインディング ソースへ値が転送されたときに、<see cref="E:System.Windows.Data.Binding.SourceUpdated" /> イベントを発生させるかどうかを示す値を取得または設定します。</summary>
        <value>バインディング ソースが更新されたときに、<see cref="E:System.Windows.Data.Binding.SourceUpdated" /> イベントを発生させる必要がある場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateSource" />
      </Docs>
    </Member>
    <Member MemberName="NotifyOnTargetUpdated">
      <MemberSignature Language="C#" Value="public bool NotifyOnTargetUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnTargetUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnTargetUpdated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインディング ソースからバインディング ターゲットへ値が転送されたときに、<see cref="E:System.Windows.Data.Binding.TargetUpdated" /> イベントを発生させるかどうかを示す値を取得または設定します。</summary>
        <value>バインディング ターゲットの値が更新されたときに、<see cref="E:System.Windows.Data.Binding.TargetUpdated" /> イベントを発生させる必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.BindingExpression.UpdateTarget" />
      </Docs>
    </Member>
    <Member MemberName="NotifyOnValidationError">
      <MemberSignature Language="C#" Value="public bool NotifyOnValidationError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotifyOnValidationError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.NotifyOnValidationError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインドされたオブジェクトに対して <see cref="E:System.Windows.Controls.Validation.Error" /> 添付イベントを発生させるかどうかを示す値を取得または設定します。</summary>
        <value>ソースの更新中に検証エラーが発生したときにバインドされたオブジェクトに対して <see cref="E:System.Windows.Controls.Validation.Error" /> 添付イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バインディングの場合 <xref:System.Windows.Data.Binding.ValidationRules%2A> 関連付けられているバインディング エンジンを確認のたびに各ルールは、source プロパティに対象のプロパティ値を転送します。 ルールでは、値が無効化、バインド エンジンを作成します、 <xref:System.Windows.Controls.ValidationError> オブジェクトし、それを追加、 <xref:System.Windows.Controls.Validation>.<xref:System.Windows.Controls.Validation.Errors%2A> 、バインドされたオブジェクトのコレクション。 ときに、 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> プロパティが空ではない、 <xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName> 接続されているオブジェクトのプロパティが `true`です。 場合、 <xref:System.Windows.Data.Binding.NotifyOnValidationError%2A> のプロパティ、 <xref:System.Windows.Data.Binding> に設定されている `true`, 、バインディング エンジンを生成し、 <xref:System.Windows.Controls.Validation.Error?displayProperty=fullName> オブジェクトのイベントをアタッチします。  
  
 検証プロセスの詳細については、データの検証」セクションを参照してください、 [データ バインドの概要](http://msdn.microsoft.com/ja-jp/c707c95f-7811-401d-956e-2fffd019a211)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyPath Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyPath Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインディング ソース プロパティへのパスを取得または設定します。</summary>
        <value>バインディング ソース プロパティへのパス。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各バインドは通常これら 4 つのコンポーネントを持つ: バインディング ターゲット オブジェクト、ターゲット プロパティ、バインド ソース、およびで使用するバインディング ソースの値へのパス。 これらのデータ バインディング概念の詳細については、次を参照してください。 [データ バインドの概要](http://msdn.microsoft.com/ja-jp/c707c95f-7811-401d-956e-2fffd019a211)します。  
  
 使用して、 <xref:System.Windows.Data.Binding.Path%2A> プロパティにバインドするソース値を指定します。  
  
-   簡単なケースで、 <xref:System.Windows.Data.Binding.Path%2A> プロパティの値などを使用して、バインディングのソース オブジェクトのプロパティの名前は、 `Path=PropertyName`です。  
  
-   使用されているような構文に設定可能なプロパティのサブプロパティ [!INCLUDE[TLA#tla_cshrp](~/includes/tlasharptla-cshrp-md.md)]します。 句では、 `Path=ShoppingCart.Order` サブプロパティにバインディングが設定 `Order` オブジェクトまたはプロパティの `ShoppingCart`です。  
  
-   添付プロパティをバインドするには、添付プロパティを囲むかっこを配置します。 たとえば、接続されているプロパティにバインドする <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName>, 、構文は `Path=(DockPanel.Dock)`です。  
  
-   プロパティのインデクサーは、インデクサーが適用されているプロパティ名の後ろに角かっこ内に指定できます。 句では、 `Path=ShoppingCart[0]` リテラル文字列「0」の処理プロパティの内部インデックスの作成方法に対応するインデックスにバインディングを設定します。 複数のインデクサーもサポートされます。  
  
-   インデクサーとサブプロパティを混在させることができます、 `Path` 句たとえば、。 `Path=ShoppingCart.ShippingInfo[MailingAddress,Street].`  
  
-   インデクサーの内側は、コンマ \(,\) で区切られた複数のインデクサー パラメーターをとります。 各パラメーターの型は、かっこで指定できます。 たとえば、ある `Path="[(sys:Int32)42,(sys:Int32)24]"`, ここで、 `sys` にマップされて、 `System` 名前空間。  
  
-   ソースがコレクション ビューの場合は、スラッシュ \(\/\) を現在の項目を指定できます。 句など `Path=/` ビューの現在のアイテムへのバインディングが設定されます。 ソースがコレクションである場合は、この構文は、既定のコレクション ビューの現在の項目を指定します。  
  
-   プロパティは、コレクションを走査プロパティの名前とスラッシュを組み合わせることができます。 たとえば、 `Path=/Offices/ManagerName` を含むソース コレクションの現在の項目を指定する、 `Offices` コレクションであるプロパティ。 現在の項目を格納するオブジェクトは、 `ManagerName` プロパティです。  
  
-   必要に応じて、ピリオド \(.\) パスを使用して、現在のソースにバインドされます。 たとえば、 `Text="{Binding}"` は `Text="{Binding Path=.}"`です。  
  
 パスの構文については、次を参照してください。 [バインド宣言の概要](http://msdn.microsoft.com/ja-jp/b97fd626-4c0d-4761-872a-2bca5820da2c) または [PropertyPath の XAML 構文](http://msdn.microsoft.com/ja-jp/0e3cdf07-abe6-460a-a9af-3764b4fd707f)します。  
  
 [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] バインド」を参照してください、 <xref:System.Windows.Data.Binding.XPath%2A> プロパティです。  
  
 オブジェクト全体にバインドするには指定する必要はありません、 <xref:System.Windows.Data.Binding.Path%2A> プロパティです。 詳細についてを参照してください「を指定する、パスの値に」 [データ バインドの概要](http://msdn.microsoft.com/ja-jp/c707c95f-7811-401d-956e-2fffd019a211)します。  
  
   
  
## 例  
 次の例では、スタイル トリガーを作成する、 <xref:System.Windows.Controls.ToolTip> 検証エラー メッセージを報告します。 現在のエラーの内容に、かつ setter の値をバインド <xref:System.Windows.Controls.TextBox> \(、 <xref:System.Windows.Controls.TextBox> スタイルを使用\) を使用して、 <xref:System.Windows.Data.Binding.RelativeSource%2A> プロパティです。 この例の詳細については、次を参照してください。 [方法: バインディング検証を実装する](http://msdn.microsoft.com/ja-jp/eb98b33d-9866-49ae-b981-bc5ff20d607a)します。  
  
 [!code-xml[BindValidation\#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RelativeSource">
      <MemberSignature Language="C#" Value="public System.Windows.Data.RelativeSource RelativeSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.RelativeSource RelativeSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.RelativeSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.RelativeSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインディング ターゲットの位置に対して相対的な位置を指定することにより、バインディング ソースを取得または設定します。</summary>
        <value>使用するバインディング ソースの相対的な位置を指定する <see cref="T:System.Windows.Data.RelativeSource" /> オブジェクト。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、オブジェクトの 1 つのプロパティを同一のオブジェクトの別のプロパティにバインドするか、スタイルまたはテンプレートで、バインディングを定義する、よく使用されます。  
  
 既定では、バインドがで指定されるデータ コンテキストを継承、 `DataContext` いずれかが設定されている場合は、プロパティです。 ただし、 <xref:System.Windows.Data.Binding.RelativeSource%2A> プロパティのソースを明示的に設定する方法の 1 つ、 <xref:System.Windows.Data.Binding> を継承したデータ コンテキストをオーバーライドします。 詳細については、次を参照してください。 [方法: バインディング ソースを指定](http://msdn.microsoft.com/ja-jp/55d47757-2648-4a52-987f-b767953f168c)します。  
  
 <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName> と <xref:System.Windows.Data.Binding.Source%2A?displayProperty=fullName> プロパティも有効にするバインディングのソースを設定する明示的にします。 ただし、3 つのプロパティの 1 つだけ <xref:System.Windows.Data.Binding.ElementName%2A>, 、<xref:System.Windows.Data.Binding.Source%2A>, 、および <xref:System.Windows.Data.Binding.RelativeSource%2A>, 、くださいセットごとにバインドする、または競合が発生することができます。 このプロパティは、バインディング ソースの競合がある場合に例外をスローします。  
  
 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] についてを参照してください [RelativeSource のマークアップ拡張機能](http://msdn.microsoft.com/ja-jp/26be4721-49b5-4717-a92e-7d54ad0d3a81)します。  
  
<a name="xamlTextUsage_RelativeSource"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 次の例では、スタイル トリガーを作成する、 <xref:System.Windows.Controls.ToolTip> 検証エラー メッセージを報告します。 現在のエラーの内容に、かつ setter の値をバインド <xref:System.Windows.Controls.TextBox> \(、 <xref:System.Windows.Controls.TextBox> スタイルを使用\) を使用して、 <xref:System.Windows.Data.Binding.RelativeSource%2A> プロパティです。 この例の詳細については、次を参照してください。 [方法: バインディング検証を実装する](http://msdn.microsoft.com/ja-jp/eb98b33d-9866-49ae-b981-bc5ff20d607a)します。  
  
 [!code-xml[BindValidation\#5](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#5)]  
  
 完全なサンプル コードを参照してください [Binding Validation Sample](http://go.microsoft.com/fwlink/?LinkID=159972)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.Source" />
      </Docs>
    </Member>
    <Member MemberName="RemoveSourceUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveSourceUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</param>
        <param name="handler">削除するハンドラー。</param>
        <summary>
          <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> 添付イベントのハンドラーを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでアタッチされるイベントの使用状況をサポートする [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTargetUpdatedHandler">
      <MemberSignature Language="C#" Value="public static void RemoveTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveTargetUpdatedHandler(class System.Windows.DependencyObject element, class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="element">このイベントをリッスンする <see cref="T:System.Windows.UIElement" /> または <see cref="T:System.Windows.ContentElement" />。</param>
        <param name="handler">削除するハンドラー。</param>
        <summary>
          <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> 添付イベントのハンドラーを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでアタッチされるイベントの使用状況をサポートする [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetXmlNamespaceManager">
      <MemberSignature Language="C#" Value="public static void SetXmlNamespaceManager (System.Windows.DependencyObject target, System.Xml.XmlNamespaceManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetXmlNamespaceManager(class System.Windows.DependencyObject target, class System.Xml.XmlNamespaceManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Xml.XmlNamespaceManager" />
      </Parameters>
      <Docs>
        <param name="target">名前空間情報の取得元となるオブジェクト。</param>
        <param name="value">渡された要素で名前空間の評価に使用する <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
        <summary>指定した要素にアタッチされているバインドによって使用される名前空間マネージャー オブジェクトを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの添付プロパティの使用をサポートする、 <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A> 添付プロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="target" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializePath">
      <MemberSignature Language="C#" Value="public bool ShouldSerializePath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializePath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializePath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Data.Binding.Path" /> プロパティを永続化する必要があるかどうかを示します。</summary>
        <returns>プロパティの値が既定値から変更されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、 `ShouldSerialize` ために、メソッドが提供される、 <xref:System.Windows.Data.Binding.Path%2A> プロパティには、単純な既定値はありません。 このメソッドは、プロパティが既定値から変更されたかどうかを示します。 いずれかのデザイナーを開発している場合に通常、このメソッドが呼び出す、 <xref:System.Windows.Data.Binding> やコントロールを組み込む独自の開発、 <xref:System.Windows.Data.Binding>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSource">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeSource() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializeSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Data.Binding.Source" /> プロパティを永続化する必要があるかどうかを示します。</summary>
        <returns>プロパティの値が既定値から変更されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、 `ShouldSerialize` ために、メソッドが提供される、 <xref:System.Windows.Data.Binding.Source%2A> プロパティには、単純な既定値はありません。 このメソッドは、プロパティが既定値から変更されたかどうかを示します。 いずれかのデザイナーを開発している場合に通常、このメソッドが呼び出す、 <xref:System.Windows.Data.Binding> やコントロールを組み込む独自の開発、 <xref:System.Windows.Data.Binding>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeValidationRules">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeValidationRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeValidationRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.Binding.ShouldSerializeValidationRules" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Data.Binding.ValidationRules" /> プロパティを永続化する必要があるかどうかを示します。</summary>
        <returns>プロパティの値が既定値から変更されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、 `ShouldSerialize` ために、メソッドが提供される、 <xref:System.Windows.Data.Binding.ValidationRules%2A> プロパティには、単純な既定値はありません。 このメソッドは、プロパティが既定値から変更されたかどうかを示します。 いずれかのデザイナーを開発している場合に通常、このメソッドが呼び出す、 <xref:System.Windows.Data.Binding> やコントロールを組み込む独自の開発、 <xref:System.Windows.Data.Binding>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public object Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Source" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインド ソースとして使用されるオブジェクトを取得または設定します。</summary>
        <value>バインド ソースとして使用されるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、バインドがで指定されるデータ コンテキストを継承、 `DataContext` いずれかが設定されている場合は、プロパティです。 ただし、 <xref:System.Windows.Data.Binding.Source%2A> プロパティのソースを明示的に設定する方法の 1 つ、 <xref:System.Windows.Data.Binding> を継承したデータ コンテキストをオーバーライドします。 同じデータ コンテキストを継承するどのいくつかのプロパティのスコープを確立するという機能が不要な場合使用すると、 <xref:System.Windows.Data.Binding.Source%2A> プロパティの代わりに、 `DataContext` プロパティです。  
  
 <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName> と <xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=fullName> プロパティも有効にするバインディングのソースを設定する明示的にします。 ただし、3 つのプロパティの 1 つだけ <xref:System.Windows.Data.Binding.ElementName%2A>, 、<xref:System.Windows.Data.Binding.Source%2A>, 、および <xref:System.Windows.Data.Binding.RelativeSource%2A>, 、くださいセットごとにバインドする、または競合が発生することができます。 このプロパティは、バインディング ソースの競合がある場合に例外をスローします。  
  
 このプロパティをオフに設定 <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>します。  
  
<a name="xamlAttributeUsage_Source"></a>   
## XAML 属性の使用方法  
  
```  
<object Source="object"/>  
```  
  
<a name="xamlValues_Source"></a>   
## XAML 値  
 *object*  
 既存のオブジェクト。 を参照するには、既存のオブジェクトを使用して、 [StaticResource マークアップ拡張機能](http://msdn.microsoft.com/ja-jp/97af044c-71f1-4617-9a94-9064b68185d2)  
  
   
  
## 例  
 この例である場合、 `Person` という名前の文字列プロパティを持つオブジェクト `PersonName`します。`Person` という名前空間でオブジェクトが定義されている `SDKSample`します。  
  
 次の例のインスタンスを作成、 `Person` オブジェクトを `PersonName` のプロパティの値 `Joe`です。 これには、 `Resources` セクションし、割り当てられている、 `x:Key`です。  
  
 [!code-xml[SimpleBinding#Instantiation](~/samples/snippets/csharp/VS_Snippets_Wpf/SimpleBinding/CSharp/Page1.xaml#instantiation)]  
[!code-xml[SimpleBinding#2](~/samples/snippets/csharp/VS_Snippets_Wpf/SimpleBinding/CSharp/Page1.xaml#2)]  
[!code-xml[SimpleBinding#EndWindow](~/samples/snippets/csharp/VS_Snippets_Wpf/SimpleBinding/CSharp/Page1.xaml#endwindow)]  
  
 バインドする、 `PersonName` プロパティは、次の操作します。  
  
 [!code-xml[SimpleBinding\#BDO1](~/samples/snippets/csharp/VS_Snippets_Wpf/SimpleBinding/CSharp/Page1.xaml#bdo1)]  
  
 結果として、 <xref:System.Windows.Controls.TextBlock> "Joe"の値とともに表示されます。  
  
 次の例では、 <xref:System.Windows.Data.Binding.Source%2A> の値、 <xref:System.Windows.Data.Binding> オブジェクトに設定されます、 `static` プロパティ <xref:System.Windows.Application.Current%2A?displayProperty=fullName>:  
  
 [!code-xml[DataBindingLab\#ComboBoxMultiBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/AddProductWindow.xaml#comboboxmultibinding)]  
  
 完全な例を参照してください。 [Data Binding Demo](http://go.microsoft.com/fwlink/?LinkID=163703)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdatedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SourceUpdatedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SourceUpdatedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.SourceUpdatedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.Data.Binding.SourceUpdated" /> 添付イベントを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdatedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TargetUpdatedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TargetUpdatedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.TargetUpdatedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.Data.Binding.TargetUpdated" /> 添付イベントを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourceExceptionFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.UpdateSourceExceptionFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceExceptionFilterCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインディング ソースの値の更新時にバインディング エンジンが検出した例外を処理するためのカスタム ロジックの提供に使用できるハンドラーを取得または設定します。 これは、バインディングに <see cref="T:System.Windows.Controls.ExceptionValidationRule" /> を関連付けている場合にのみ適用できます。</summary>
        <value>バインディング ソースの値の更新時にバインディング エンジンが検出した例外を処理するためのカスタム ロジックを提供するメソッド。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Controls.ExceptionValidationRule> 組み込みの検証ルールがバインド ソースのプロパティの更新中にスローされる例外の有無をチェックします。 関連付けられている場合は、 <xref:System.Windows.Controls.ExceptionValidationRule> で、 <xref:System.Windows.Data.Binding> オブジェクトに、このプロパティを使用してこれらの例外を処理するためのカスタム ロジックを提供するハンドラーを設定することができます。 場合、 <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> が指定されていない、 <xref:System.Windows.Data.Binding>, 、バインド エンジンを作成、 <xref:System.Windows.Controls.ValidationError> 例外を使用し、それを追加、 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> バインドされている要素のコレクション。  
  
   
  
## 例  
 <xref:System.Windows.Controls.TextBox.Text%2A> 、次のプロパティ <xref:System.Windows.Controls.TextBox> ソース プロパティにデータ バインド `Age3` 型のある `int`です。<xref:System.Windows.Controls.ExceptionValidationRule> \(ときに、ユーザーは、整数に変換できない値を入力\) などのソースのプロパティの更新中にスローされる例外を確認します。  
  
 [!code-xml[BindValidation\#tbExceptionFilter](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#tbexceptionfilter)]  
  
 これらの例外を処理するカスタム ロジックを提供できます。 次の例では、使用する方法、 <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> プロパティを設定、 <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>です。  
  
 [!code-csharp[BindValidation\#filtercallback](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#filtercallback)]  
  
 実装例を次に示します、 <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>です。  
  
 [!code-csharp[BindValidation\#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#handler)]  
  
 <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback> を返すことも `null`, 、自体には、例外または <xref:System.Windows.Controls.ValidationError>です。 詳細については、「<xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>」を参照してください。  
  
 完全なサンプルを参照してください。 [Binding Validation Sample](http://go.microsoft.com/fwlink/?LinkID=159972)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourceTrigger">
      <MemberSignature Language="C#" Value="public System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.UpdateSourceTrigger" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.UpdateSourceTrigger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインディング ソースの更新のタイミングを決定する値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> 値のいずれか。 既定値は <see cref="F:System.Windows.Data.UpdateSourceTrigger.Default" /> で、ターゲット依存関係プロパティの既定の <see cref="T:System.Windows.Data.UpdateSourceTrigger" /> 値を返します。 ほとんどの依存関係プロパティの既定値は <see cref="F:System.Windows.Data.UpdateSourceTrigger.PropertyChanged" /> です。ただし、<see cref="P:System.Windows.Controls.TextBox.Text" /> プロパティの既定値は <see cref="F:System.Windows.Data.UpdateSourceTrigger.LostFocus" /> です。  
  
 プログラムを使って依存関係プロパティの既定の <see cref="P:System.Windows.Data.Binding.UpdateSourceTrigger" /> 値を確認するには、<see cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" /> を使ってプロパティのプロパティ メタデータを取得してから、<see cref="P:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger" /> プロパティの値を確認します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 いるバインディング <xref:System.Windows.Data.BindingMode.TwoWay> または <xref:System.Windows.Data.BindingMode.OneWayToSource> ターゲット プロパティの変更をリッスンし、それらをソースに反映されます。 これは、ソースの更新と呼ばれます。 通常、これらの更新プログラムは、ターゲット プロパティが変更されるたびに発生します。 これは、チェック ボックスおよびその他の単純なコントロールの操作に適していますが通常適切でないテキスト フィールドに対するします。 すべてのキーストロークがによってでパフォーマンスが低下し、backspace キーし、新しい値をコミットする前に入力ミスを修正する通常の営業案件のユーザーを拒否して、更新しています。 既定ではこのため、 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> の値、 <xref:System.Windows.Controls.TextBox.Text%2A> プロパティは、 <xref:System.Windows.Data.UpdateSourceTrigger.LostFocus> および not <xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged>します。  
  
 設定した場合、 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> 値を <xref:System.Windows.Data.UpdateSourceTrigger.Explicit>, 、呼び出す必要があります、 <xref:System.Windows.Data.BindingExpression.UpdateSource%2A> メソッドまたは変更は反映されませんが、元に戻す。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.Mode" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnDataErrors">
      <MemberSignature Language="C#" Value="public bool ValidatesOnDataErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnDataErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnDataErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を含めるかどうかを示す値、<see cref="T:System.Windows.Controls.DataErrorValidationRule" />です。</summary>
        <value>
          <see langword="true" />含める、 <see cref="T:System.Windows.Controls.DataErrorValidationRule" />、それ以外の<see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定すると、使用する代わりに、<xref:System.Windows.Controls.DataErrorValidationRule>要素に明示的にします。<xref:System.Windows.Controls.DataErrorValidationRule>によって発生するエラーをチェックする組み込みの検証規則は、<xref:System.ComponentModel.IDataErrorInfo>ソース オブジェクトの実装です。 バインディング エンジンが作成する場合は、エラーが発生すると、 <xref:System.Windows.Controls.ValidationError> 、エラーのために追加し、<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>バインドされている要素のコレクション。 エラーの欠如は、別のルールが検証の問題が発生しない限り、この検証のフィードバックをクリアします。  
  
 <xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A>.NET Framework version 3.5 で導入されました。  詳細については、次を参照してください。 [.NET Framework のバージョンとの依存関係](http://msdn.microsoft.com/ja-jp/f75a72de-e2f2-4a7a-9574-3f278684ea90)です。  
  
   
  
## 例  
 次の例では<xref:System.ComponentModel.IDataErrorInfo>と<xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A>におけるユーザー入力を検証する、<xref:System.Windows.Controls.TextBox>です。 最初の例では、データ型を実装する<xref:System.ComponentModel.IDataErrorInfo>検証エラーを報告します。  
  
 [!code-csharp[BindingValidationAttributesSnippets\#IDataErrorInfoData](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/data.cs#idataerrorinfodata)]
 [!code-vb[BindingValidationAttributesSnippets\#IDataErrorInfoData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/bindingvalidationattributessnippets/visualbasic/window1.xaml.vb#idataerrorinfodata)]  
  
 次の例ではバインド、`Age`プロパティを<xref:System.Windows.Controls.TextBox>設定と<xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A>に`true`上、<xref:System.Windows.Data.Binding>です。  無効な値を入力するに赤い枠線が表示されます。、<xref:System.Windows.Controls.TextBox>と<xref:System.Windows.Controls.ToolTip>エラー メッセージを報告します。  
  
 [!code-xml[BindingValidationAttributesSnippets\#IDataErrorInfoXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/window1.xaml#idataerrorinfoxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.ValidatesOnExceptions" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnExceptions">
      <MemberSignature Language="C#" Value="public bool ValidatesOnExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnExceptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を含めるかどうかを示す値、 <see cref="T:System.Windows.Controls.ExceptionValidationRule" />です。</summary>
        <value>
          <see langword="true" /> 含める、 <see cref="T:System.Windows.Controls.ExceptionValidationRule" />。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定すると、使用する代わりに、 <xref:System.Windows.Controls.ExceptionValidationRule> 要素に明示的にします。<xref:System.Windows.Controls.ExceptionValidationRule> 組み込みの検証ルールが source プロパティの更新中にスローされる例外の有無をチェックします。 バインディング エンジンを作成、例外がスローされた場合、 <xref:System.Windows.Controls.ValidationError> 例外に追加し、 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> バインドされている要素のコレクション。 エラーの欠如は、別のルールが検証の問題が発生しない限り、この検証からのフィードバックをクリアします。  
  
 <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> .NET Framework version 3.5 で導入されました。  詳細については、「[.NET Framework のバージョンおよび依存関係](http://msdn.microsoft.com/ja-jp/f75a72de-e2f2-4a7a-9574-3f278684ea90)」を参照してください。  
  
   
  
## 例  
 次の例を使用して <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> におけるユーザー入力を検証する、 <xref:System.Windows.Controls.TextBox>です。 最初の例では、例外をスローするデータ型を作成するときに、 `Age` プロパティが無効なプロパティに設定します。  
  
 [!code-csharp[BindingValidationAttributesSnippets\#ThrowExceptionData](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/data.cs#throwexceptiondata)]
 [!code-vb[BindingValidationAttributesSnippets\#ThrowExceptionData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/bindingvalidationattributessnippets/visualbasic/window1.xaml.vb#throwexceptiondata)]  
  
 次の例ではバインド、 `Age` プロパティを <xref:System.Windows.Controls.TextBox> 設定と <xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A> に `true` 上、 <xref:System.Windows.Data.Binding>です。 無効な値を入力するに赤色の枠線が表示されます。、 <xref:System.Windows.Controls.TextBox> と <xref:System.Windows.Controls.ToolTip> エラー メッセージを報告します。  
  
 [!code-xml[BindingValidationAttributesSnippets\#ThrowExceptionXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/bindingvalidationattributessnippets/csharp/window1.xaml#throwexceptionxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Data.Binding.ValidatesOnDataErrors" />
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnNotifyDataErrors">
      <MemberSignature Language="C#" Value="public bool ValidatesOnNotifyDataErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnNotifyDataErrors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を含めるかどうかを示す値、 <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />です。</summary>
        <value>
          <see langword="true" /> 含める、 <see cref="T:System.Windows.Controls.NotifyDataErrorValidationRule" />。 そうしないと、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Data.Binding.ValidatesOnNotifyDataErrors%2A> は `true`, 、バインドをチェックしを実装するデータ ソースで発生したエラーを報告 <xref:System.ComponentModel.INotifyDataErrorInfo>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationRules">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt; ValidationRules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.Controls.ValidationRule&gt; ValidationRules" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.ValidationRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.Controls.ValidationRule&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザー入力の有効性をチェックする規則のコレクションを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Controls.ValidationRule" /> オブジェクトのコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] データ バインディング モデルを使用すると、関連付ける <xref:System.Windows.Data.Binding.ValidationRules%2A> で、 <xref:System.Windows.Data.Binding> または <xref:System.Windows.Data.MultiBinding> オブジェクトです。 派生することによって、カスタム ルールを作成することができます、 <xref:System.Windows.Controls.ValidationRule> クラスと実装、 <xref:System.Windows.Controls.ValidationRule.Validate%2A> メソッドを使用するか、組み込み <xref:System.Windows.Controls.ExceptionValidationRule>, 、ソースの更新中に例外がある場合、値が無効になります。  
  
 バインディング エンジンは、それぞれチェック <xref:System.Windows.Controls.ValidationRule> たびに、入力値 \(バインディング ターゲット プロパティの値\) は、バインディング ソースのプロパティに転送されるバインディングに関連付けられています。 検証プロセスの詳細については、データの検証」セクションを参照してください、 [データ バインドの概要](http://msdn.microsoft.com/ja-jp/c707c95f-7811-401d-956e-2fffd019a211)します。  
  
> [!NOTE]
>  このプロパティを設定できます [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 、コレクション構文を使うか、コレクション オブジェクトにアクセスしてなどのさまざまなメソッドを使用して `Add`します。 コレクション オブジェクトにアクセスするプロパティは、コレクション自体は読み取り\/書き込みは読み取り専用です。  
  
<a name="xamlPropertyElementUsage_ValidationRules"></a>   
## XAML プロパティ要素の使用  
  
```  
<object>  
  <object.ValidationRules>  
    oneOrMoreValidationRules  
  </object.ValidationRules>  
</object>  
  
```  
  
<a name="xamlValues_ValidationRules"></a>   
## XAML 値  
 *oneOrMoreValidationRules*  
 1 つまたは複数 <xref:System.Windows.Controls.ValidationRule> オブジェクトです。 使用することができます、 <xref:System.Windows.Controls.ExceptionValidationRule> クラスまたはサブクラス化してカスタムの規則を作成、 <xref:System.Windows.Controls.ValidationRule> クラスです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Validation" />
      </Docs>
    </Member>
    <Member MemberName="XmlNamespaceManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty XmlNamespaceManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty XmlNamespaceManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Data.Binding.XmlNamespaceManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Data.Binding.XmlNamespaceManager" /> 添付プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public string XPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.Binding.XPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用する XML バインディング リソースの値を返す <see langword="XPath" /> クエリーを取得または設定します。</summary>
        <value>
          <see langword="XPath" /> クエリ。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バインド ソースが場合 [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] の代わりにデータ、 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] オブジェクト、 <xref:System.Windows.Data.Binding.XPath%2A> の代わりにプロパティを使用、 <xref:System.Windows.Data.Binding.Path%2A> プロパティを使用するバインディング ソースの値へのパスを示します。  
  
 設定して、 <xref:System.Windows.Data.Binding.XPath%2A> プロパティを作成する、 `XPath` ノードまたはノードのコレクションを選択するクエリ \(<xref:System.Xml.XmlElement?displayProperty=fullName> と <xref:System.Xml.XmlAttribute?displayProperty=fullName> から派生させます <xref:System.Xml.XmlNode?displayProperty=fullName>\)。<xref:System.Xml.XmlNode?displayProperty=fullName>[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] オブジェクトを使用してそのプロパティにバインドすることができます、 <xref:System.Windows.Data.Binding.Path%2A> プロパティです。  
  
 <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName> メソッド ハンドル、 `XPath` 式から、 <xref:System.Windows.Data.Binding.XPath%2A> プロパティです。`XPath` 関数はサポートされません。`XPath` 式についてを参照してください、 <xref:System.Xml.XmlNode.SelectNodes%2A> に関するドキュメントと例」のセクションで提供されるいくつかの例です。  
  
 LINQ to XML オブジェクト <xref:System.Xml.Linq.XDocument> と <xref:System.Xml.Linq.XElement> を使わない `XPath`します。 詳細については、「 [方法: XDocument、XElement、または LINQ for XML クエリの結果にバインド](http://msdn.microsoft.com/ja-jp/6a629a49-fe1c-465d-b76a-3dcbf4307b64)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Data.Binding" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>