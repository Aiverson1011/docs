<Type Name="UserNamePasswordValidator" FullName="System.IdentityModel.Selectors.UserNamePasswordValidator">
  <TypeSignature Language="C#" Value="public abstract class UserNamePasswordValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UserNamePasswordValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Selectors.UserNamePasswordValidator" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ユーザー名とパスワードを検証します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Selectors.UserNamePasswordValidator> クラスを使用して、ユーザー名とパスワードの検証方法を指定します。 これを行うには、<xref:System.IdentityModel.Selectors.UserNamePasswordValidator> の派生クラスを作成し、<xref:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate%2A> メソッドをオーバーライドします。 カスタム ユーザー名およびパスワード検証コントロールを作成する方法については、「[How to: Use a Custom User Name and Password Validator](http://msdn.microsoft.com/ja-jp/8e08b74b-fa44-4018-b63d-0d0805f85e3f)」を参照してください。  
  
   
  
## 例  
 [!code-csharp[c\_UsernameValidator\#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_usernamevalidator/cs/service.cs#1)]
 [!code-vb[c\_UsernameValidator\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_usernamevalidator/vb/service.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UserNamePasswordValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.UserNamePasswordValidator.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMembershipProviderValidator">
      <MemberSignature Language="C#" Value="public static System.IdentityModel.Selectors.UserNamePasswordValidator CreateMembershipProviderValidator (System.Web.Security.MembershipProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IdentityModel.Selectors.UserNamePasswordValidator CreateMembershipProviderValidator(class System.Web.Security.MembershipProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.UserNamePasswordValidator.CreateMembershipProviderValidator(System.Web.Security.MembershipProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.UserNamePasswordValidator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.Security.MembershipProvider" />
      </Parameters>
      <Docs>
        <param name="provider">ユーザー名とパスワードを検証する <see cref="T:System.Web.Security.MembershipProvider" />。</param>
        <summary>メンバーシップ プロバイダーを指定してユーザー名とパスワードを検証する <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> のインスタンスを取得します。</summary>
        <returns>
          <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> を使用しているユーザー名とパスワードを検証する <paramref name="provider" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The value of this static property can be supplied as a parameter to one of the constructors for the <xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator> class.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.IdentityModel.Selectors.UserNamePasswordValidator None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IdentityModel.Selectors.UserNamePasswordValidator None" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Selectors.UserNamePasswordValidator.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.UserNamePasswordValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザー名とパスワードに基づいて検証を実行しないバリデーターを取得します。 そのため、ユーザー名とパスワードは常に有効と見なされます。</summary>
        <value>ユーザー名とパスワードに基づいて検証を実行しない <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この静的プロパティの値は、<xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator> クラスのコンストラクターへのパラメーターとして指定できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public abstract void Validate (string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(string userName, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">検証するユーザー名。</param>
        <param name="password">検証するパスワード。</param>
        <summary>派生クラスでオーバーライドされる場合、指定されたユーザー名とパスワードを検証します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate%2A> メソッドをオーバーライドして、ユーザー名とパスワードの検証方法を指定します。 ユーザー名とパスワードによる検証に失敗した場合、<xref:System.IdentityModel.Tokens.SecurityTokenValidationException> をスローします。  
  
   
  
## 例  
 [!code-csharp[c\_UsernameValidator\#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_usernamevalidator/cs/service.cs#2)]
 [!code-vb[c\_UsernameValidator\#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_usernamevalidator/vb/service.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>