<Type Name="DynamicField" FullName="System.Web.DynamicData.DynamicField">
  <TypeSignature Language="C#" Value="public class DynamicField : System.Web.UI.WebControls.DataControlField, System.Web.DynamicData.IFieldFormattingOptions, System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicField extends System.Web.UI.WebControls.DataControlField implements class System.Web.DynamicData.IFieldFormattingOptions, class System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicField" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.DataControlField</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldFormattingOptions</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IAttributeAccessor</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.DynamicData.Design.DynamicFieldDesigner, System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ASP.NET Dynamic Data 機能を使用するデータ バインド コントロールに表示されるデータ フィールドを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 In this topic:  
  
-   [Introduction](#introduction)  
  
-   [Declarative Syntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## Introduction  
 The <xref:System.Web.DynamicData.DynamicField> class is used by data\-bound controls, such as the <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls, to display a field value that uses ASP.NET Dynamic Data features in custom pages.  
  
 The <xref:System.Web.DynamicData.DynamicField> class provides functionality that resembles that of the <xref:System.Web.UI.WebControls.BoundField> class. However, because a <xref:System.Web.DynamicData.DynamicField> object is used in Dynamic Data applications, you can take advantage of the following Dynamic Data features:  
  
-   Automatically rendering the proper control for a field by using field templates, based on the data type. The field templates can be globally modified for the entire application.  
  
-   Providing built\-in data validation based on the database schema. You can also add validation types by customizing the data model.  
  
-   Customizing data rendering for individual fields by using attributes in the data model or by using the <xref:System.Web.DynamicData.DynamicField.UIHint%2A> property.  
  
 The <xref:System.Web.DynamicData.DynamicField> object renders each field by using a **languageKeyword tag is not supported!!!!**  
 control. To specify the data field to display in a <xref:System.Web.DynamicData.DynamicField> object, set the <xref:System.Web.DynamicData.DynamicField.DataField%2A> property to the field name. You can apply a custom formatting string to the field value by setting the <xref:System.Web.DynamicData.DynamicField.DataFormatString%2A> property. By default the formatting string is applied to field values only when the data\-bound control is in read\-only mode. To apply the formatting string to values displayed while the data\-bound control is in edit mode, set the <xref:System.Web.DynamicData.DynamicField.ApplyFormatInEditMode%2A> property to **languageKeyword tag is not supported!!!!**  
. If a field value is **languageKeyword tag is not supported!!!!**  
, you can display a custom caption by setting the <xref:System.Web.DynamicData.DynamicField.NullDisplayText%2A> property. The <xref:System.Web.DynamicData.DynamicField> object can also automatically convert empty string \(""\) field values to null values by setting the <xref:System.Web.DynamicData.DynamicField.ConvertEmptyStringToNull%2A> property to **languageKeyword tag is not supported!!!!**  
.  
  
<a name="declarative_syntax"></a>   
## Declarative Syntax  
  
```  
<asp:DynamicField   
    AccessibleHeaderText="string"       
    ApplyFormatInEditMode="true|false"    
    ControlStyle-BackColor="color name|#dddddd"   
    ControlStyle-BorderColor="color name|#dddddd"   
    ControlStyle-BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|  
       Ridge|Inset|Outset"    
    ControlStyle-BorderWidth="size"    
    ControlStyle-CssClass="string"   
    ControlStyle-Font-Bold="true|false"   
    ControlStyle-Font-Italic="true|false"   
    ControlStyle-Font-Names="string"   
    ControlStyle-Font-Overline="true|false"    
    ControlStyle-Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
       Large|X-Large|XX-Large"   
    ControlStyle-Font-Strikeout="true|false"     
    ControlStyle-Font-Underline="true|false"     
    ControlStyle-ForeColor="color name|#dddddd"     
    ControlStyle-Height="size"   
    ControlStyle-Width="size"   
    ConvertEmptyStringToNull="true|false"    
    DataField="string"   
    DataFormatString="string"     
    FooterStyle-BackColor="color name|#dddddd"   
    FooterStyle-BorderColor="color name|#dddddd"   
    FooterStyle-BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|  
       Ridge|Inset|Outset"    
    FooterStyle-BorderWidth="size"    
    FooterStyle-CssClass="string"   
    FooterStyle-Font-Bold="true|false"   
    FooterStyle-Font-Italic="true|false"   
    FooterStyle-Font-Names="string"   
    FooterStyle-Font-Overline="true|false"    
    FooterStyle-Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
       Large|X-Large|XX-Large"   
    FooterStyle-Font-Strikeout="true|false"     
    FooterStyle-Font-Underline="true|false"     
    FooterStyle-ForeColor="color name|#dddddd"     
    FooterStyle-Height="size"   
    FooterStyle-Width="size"   
    FooterStyle-HorizontalAlign="Center|Justify|Left|NotSet|Right"   
    FooterStyle-VerticalAlign="Bottom|Middle|NotSet|Top"   
    FooterStyle-Wrap="true|false"     
    HeaderImageUrl="uri"  
    HeaderStyle-BackColor="color name|#dddddd"   
    HeaderStyle-BorderColor="color name|#dddddd"   
    HeaderStyle-BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|  
       Ridge|Inset|Outset"    
    HeaderStyle-BorderWidth="size"    
    HeaderStyle-CssClass="string"   
    HeaderStyle-Font-Bold="true|false"   
    HeaderStyle-Font-Italic="true|false"   
    HeaderStyle-Font-Names="string"   
    HeaderStyle-Font-Overline="true|false"    
    HeaderStyle-Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
       Large|X-Large|XX-Large"   
    HeaderStyle-Font-Strikeout="true|false"     
    HeaderStyle-Font-Underline="true|false"     
    HeaderStyle-ForeColor="color name|#dddddd"     
    HeaderStyle-Height="size"   
    HeaderStyle-Width="size"   
    HeaderStyle-HorizontalAlign="Center|Justify|Left|NotSet|Right"   
    HeaderStyle-VerticalAlign="Bottom|Middle|NotSet|Top"   
    HeaderStyle-Wrap="true|false"     
    HeaderText="string"  
    InsertVisible="true|false"      
    ItemStyle-BackColor="color name|#dddddd"   
    ItemStyle-BorderColor="color name|#dddddd"   
    ItemStyle-BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|  
       Ridge|Inset|Outset"    
    ItemStyle-BorderWidth="size"    
    ItemStyle-CssClass="string"   
    ItemStyle-Font-Bold="true|false"   
    ItemStyle-Font-Italic="true|false"   
    ItemStyle-Font-Names="string"   
    ItemStyle-Font-Overline="true|false"    
    ItemStyle-Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
       Large|X-Large|XX-Large"   
    ItemStyle-Font-Strikeout="true|false"     
    ItemStyle-Font-Underline="true|false"     
    ItemStyle-ForeColor="color name|#dddddd"     
    ItemStyle-Height="size"   
    ItemStyle-Width="size"   
    ItemStyle-HorizontalAlign="Center|Justify|Left|NotSet|Right"   
    ItemStyle-VerticalAlign="Bottom|Middle|NotSet|Top"   
    ItemStyle-Wrap="true|false"     
    NullDisplayText="string"   
    ReadOnly="true|false"    
    ShowHeader="true|false"    
    SortExpression="string"   
    UIHint="string"   
    ValidationGroup="string"   
    Visible="true|false"   
    />  
<asp:DynamicField />  
```  
  
   
  
## 例  
 See a run\-time code example of this feature: [Run](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicField).  
  
 The following example demonstrates how to use the <xref:System.Web.DynamicData.DynamicField> object in a <xref:System.Web.UI.WebControls.GridView> control to display and edit values from a database table.  
  
 [!code-csharp[System.Web.DynamicData.DynamicField\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicField/CS/Default.aspx#1)]
 [!code-vb[System.Web.DynamicData.DynamicField\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicField/VB/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.GridView" />
    <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
    <altmember cref="T:System.Web.UI.WebControls.BoundField" />
    <altmember cref="T:System.Web.DynamicData.DynamicControl" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicField ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicField.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.DynamicData.DynamicField" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use this constructor to initialize a new instance of the <xref:System.Web.DynamicData.DynamicField> class. This constructor is commonly used when adding fields to a dynamically created data\-bound control.  
  
 To dynamically add a <xref:System.Web.DynamicData.DynamicField> object to a data\-bound control, create a new <xref:System.Web.DynamicData.DynamicField> object, set its properties, and then add it to the data\-bound control's field collection. For example, if you are using the <xref:System.Web.UI.WebControls.GridView> control, add the <xref:System.Web.DynamicData.DynamicField> object to the <xref:System.Web.UI.WebControls.GridView.Columns%2A> collection.  
  
> [!NOTE]
>  Although you can dynamically add fields to a data\-bound control, it is strongly recommended that fields be statically declared and then shown or hidden, as appropriate. Statically declaring all of your fields reduces the size of the view state for the parent data\-bound control.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyFormatInEditMode">
      <MemberSignature Language="C#" Value="public bool ApplyFormatInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApplyFormatInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicField.ApplyFormatInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定であるかどうか、書式設定された文字列がある文字列を示す値が指定された、 <see cref="P:System.Web.DynamicData.DynamicField.DataFormatString" /> データ フィールドが編集モードの場合、フィールド値にプロパティが適用されます。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Web.DynamicData.DynamicField" /> 編集モードで書式設定以外の場合、適用される <see langword="false" />します。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データ バインド コントロール \(よう <xref:System.Web.UI.WebControls.DetailsView>, 、および <xref:System.Web.UI.WebControls.GridView>\) 読み取り、編集、またはレコードの挿入をユーザーに許可する異なる表示モードがあります。 既定では、書式設定文字列を指定して、 <xref:System.Web.DynamicData.DynamicField.DataFormatString%2A> プロパティは、データ バインド コントロールが読み取り専用モードの場合にのみ、フィールドの値に適用します。 書式指定文字列をデータ バインド コントロールが編集モードのときに表示される値に適用するには、設定、 <xref:System.Web.DynamicData.DynamicField.ApplyFormatInEditMode%2A> プロパティを `true`します。  
  
> [!NOTE]
>  A <xref:System.Web.DynamicData.DynamicField> オブジェクトは自動的に削除しませんデータ ソースのフィールドが更新されたときに書式設定します。 格納されている値の一部として書式設定したくない場合は、書式設定をプログラムで削除する必要があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicField.DataFormatString" />
        <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
        <altmember cref="T:System.Web.UI.WebControls.GridView" />
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="protected System.Web.DynamicData.MetaColumn Column { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicField.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Web.DynamicData.MetaColumn" /> オブジェクトがこの <see cref="T:System.Web.DynamicData.DynamicField" /> に関連付けられたオブジェクト。</summary>
        <value>メタ列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureDynamicControl">
      <MemberSignature Language="C#" Value="protected virtual void ConfigureDynamicControl (System.Web.DynamicData.DynamicControl control);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ConfigureDynamicControl(class System.Web.DynamicData.DynamicControl control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicField.ConfigureDynamicControl(System.Web.DynamicData.DynamicControl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.DynamicData.DynamicControl" />
      </Parameters>
      <Docs>
        <param name="control">変更するコントロール。</param>
        <summary>変更するメカニズムを提供、 <see cref="T:System.Web.DynamicData.DynamicControl" /> によって作成されたオブジェクト、 <see cref="M:System.Web.DynamicData.DynamicField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public bool ConvertEmptyStringToNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertEmptyStringToNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicField.ConvertEmptyStringToNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースのデータ フィールドを更新するときに、空の文字列値 \(""\) を null 値に自動的に変換するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 自動的に空の文字列値を null 値に変換するにはそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザーは、フィールドの値を更新またはレコードを挿入するときの空の文字列を入力する可能性があります。 使用して、 <xref:System.Web.DynamicData.DynamicField.ConvertEmptyStringToNull%2A> プロパティをデータ ソースのデータ フィールドが更新されたときに空の文字列値が自動的に null に変換するかどうかを指定します。  
  
 既定では、 <xref:System.Web.DynamicData.DynamicField> オブジェクトには、null 値が空の文字列として表示されます。 別の値を表示する設定、 <xref:System.Web.DynamicData.DynamicField.NullDisplayText%2A> プロパティです。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.Parameter> データ ソースのオブジェクトがコントロールによって、親コントロールの <xref:System.Web.DynamicData.DynamicField> オブジェクトもという名前のプロパティにバインドする <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A?displayProperty=fullName>です。 このプロパティは、同じ関数を実行します。 両方のプロパティを適切に設定することを確認します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicField.NullDisplayText" />
        <altmember cref="T:System.Web.UI.WebControls.Parameter" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull" />
      </Docs>
    </Member>
    <Member MemberName="CopyProperties">
      <MemberSignature Language="C#" Value="protected override void CopyProperties (System.Web.UI.WebControls.DataControlField newField);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CopyProperties(class System.Web.UI.WebControls.DataControlField newField) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicField.CopyProperties(System.Web.UI.WebControls.DataControlField)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newField" Type="System.Web.UI.WebControls.DataControlField" />
      </Parameters>
      <Docs>
        <param name="newField">
          <see cref="T:System.Web.UI.WebControls.DataControlField" /> 、現在のプロパティをコピーする <see cref="T:System.Web.DynamicData.DynamicField" /> にします。</param>
        <summary>現在のプロパティをコピー <see cref="T:System.Web.DynamicData.DynamicField" /> を指定したオブジェクト <see cref="T:System.Web.UI.WebControls.DataControlField" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.DynamicData.DynamicField.CopyProperties%2A> メソッドは、ヘルパー メソッドです。 使用して、 <xref:System.Web.UI.WebControls.DataControlField.CloneField%2A> に現在のプロパティをコピーする方法 <xref:System.Web.DynamicData.DynamicField> オブジェクトを <xref:System.Web.DynamicData.DynamicField> で渡されるオブジェクト、 `newField` パラメーター。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Override the <see cref="M:System.Web.DynamicData.DynamicField.CopyProperties(System.Web.UI.WebControls.DataControlField)" /> method to copy the new properties that were created in the derived class. Call the base class's <see cref="M:System.Web.DynamicData.DynamicField.CopyProperties(System.Web.UI.WebControls.DataControlField)" /> method so that the properties of the <see cref="T:System.Web.DynamicData.DynamicField" /> class are also copied.</para>
        </block>
        <altmember cref="M:System.Web.DynamicData.DynamicField.CreateField" />
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.CloneField" />
      </Docs>
    </Member>
    <Member MemberName="CreateDynamicControl">
      <MemberSignature Language="C#" Value="protected virtual System.Web.DynamicData.DynamicControl CreateDynamicControl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.DynamicData.DynamicControl CreateDynamicControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicField.CreateDynamicControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.DynamicControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クラスから派生するためのメカニズムを提供 <see cref="T:System.Web.DynamicData.DynamicField" /> をオーバーライドする方法、 <see cref="T:System.Web.DynamicData.DynamicControl" /> オブジェクトを作成します。</summary>
        <returns>新しい動的コントロールです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateField">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.DataControlField CreateField ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.DataControlField CreateField() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicField.CreateField" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataControlField</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作成しの新しいインスタンスを返す、 <see cref="T:System.Web.DynamicData.DynamicField" /> クラスです。</summary>
        <returns>
          <see cref="T:System.Web.DynamicData.DynamicField" /> クラスの新しいインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.DynamicData.DynamicField.CreateField%2A> メソッドは、ヘルパー メソッドです。 使用して、 <xref:System.Web.UI.WebControls.DataControlField.CloneField%2A> 空を作成する方法 <xref:System.Web.DynamicData.DynamicField> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Override the <see cref="M:System.Web.DynamicData.DynamicField.CreateField" /> method to return a new instance of the derived class. Do not call the <see cref="M:System.Web.DynamicData.DynamicField.CreateField" /> method of the base class.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.CloneField" />
        <altmember cref="M:System.Web.DynamicData.DynamicField.CopyProperties(System.Web.UI.WebControls.DataControlField)" />
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public virtual string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicField.DataField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定がバインドされるデータ フィールドの名前、 <see cref="T:System.Web.DynamicData.DynamicField" /> するオブジェクトします。</summary>
        <value>データの名前フィールドを <see cref="T:System.Web.DynamicData.DynamicField" /> オブジェクトにバインドします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.DynamicData.DynamicField.DataField%2A> プロパティにバインドするデータ フィールドを指定する、 <xref:System.Web.DynamicData.DynamicField> オブジェクトです。 データ フィールドには、列名または外部キー列、リレーションシップの名前を指定できます。  
  
 によって既定では、指定したデータ フィールドが表示される、 <xref:System.Web.DynamicData.DynamicField> オブジェクトのフィールドのデータ型に関連付けられているフィールド テンプレートを使用します。 データ フィールドの設定を表示するフィールド テンプレートを変更することができます、 <xref:System.Web.DynamicData.DynamicField.UIHint%2A> プロパティです。 設定して、表示されるテキストをフォーマットすることも、 <xref:System.Web.DynamicData.DynamicField.DataFormatString%2A> プロパティです。 フィールド値の場合 `null`, 、空の文字列 \(""\) は、既定値を表示します。 別のキャプションを指定する、 <xref:System.Web.DynamicData.DynamicField.NullDisplayText%2A> プロパティです。  
  
 **注** の特定のインスタンスでこれを設定する代わりに、データ モデルに属性を適用する必要があります、ディスプレイとデータ フィールドの動作をグローバルに変更する場合、 <xref:System.Web.DynamicData.DynamicField> オブジェクトです。 詳細については、「[ASP.NET Dynamic Data Overview](http://msdn.microsoft.com/ja-jp/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.DataControlField.OnFieldChanged%2A> 状態変更イベントを生成するメソッドが呼び出されたときに、 <xref:System.Web.DynamicData.DynamicField.DataField%2A> プロパティを設定します。  
  
 値、 <xref:System.Web.DynamicData.DynamicField.DataField%2A> プロパティはビュー ステートに格納します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicField.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicField.NullDisplayText" />
        <altmember cref="P:System.Web.DynamicData.DynamicField.UIHint" />
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.OnFieldChanged" />
      </Docs>
    </Member>
    <Member MemberName="DataFormatString">
      <MemberSignature Language="C#" Value="public string DataFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicField.DataFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ フィールドの値の表示形式を指定する文字列を設定します。</summary>
        <value>データ フィールドの値の表示形式を指定する書式指定文字列。 既定値は空の文字列 \(""\)、特殊な書式設定を適用しないことを値を示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.DynamicData.DynamicField.DataFormatString%2A> に表示される値のカスタム表示形式を指定するプロパティ、 <xref:System.Web.DynamicData.DynamicField> オブジェクトです。 場合、 <xref:System.Web.DynamicData.DynamicField.DataFormatString%2A> プロパティが設定されていないと、特殊な書式なしフィールドの値が表示されます。  
  
 既定では、書式指定文字列がフィールドの値を適用、データ バインド コントロールを含む場合にのみ、 <xref:System.Web.DynamicData.DynamicField> オブジェクトが読み取り専用モードにします。 書式指定文字列を編集モードでフィールドの値に適用するには、設定、 <xref:System.Web.DynamicData.DynamicField.ApplyFormatInEditMode%2A> プロパティを `true`します。  
  
 使用して指定した表示形式、 <xref:System.Web.DynamicData.DynamicField.DataFormatString%2A> プロパティは、このインスタンスの特定、 <xref:System.Web.DynamicData.DynamicField> クラスです。 適用することで、アプリケーション全体にわたってデータ フィールドの表示形式を変更することも、 <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute> データ モデルと設定を <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString%2A?displayProperty=fullName> コンス トラクターのパラメーターをという名前です。 詳細については、「[ASP.NET Dynamic Data Overview](http://msdn.microsoft.com/ja-jp/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512)」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicField.ApplyFormatInEditMode" />
        <altmember cref="P:System.Web.DynamicData.DynamicField.DataField" />
        <altmember cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" />
        <altmember cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" />
      </Docs>
    </Member>
    <Member MemberName="ExtractValuesFromCell">
      <MemberSignature Language="C#" Value="public override void ExtractValuesFromCell (System.Collections.Specialized.IOrderedDictionary dictionary, System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlRowState rowState, bool includeReadOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ExtractValuesFromCell(class System.Collections.Specialized.IOrderedDictionary dictionary, class System.Web.UI.WebControls.DataControlFieldCell cell, valuetype System.Web.UI.WebControls.DataControlRowState rowState, bool includeReadOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicField.ExtractValuesFromCell(System.Collections.Specialized.IOrderedDictionary,System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Specialized.IOrderedDictionary" />
        <Parameter Name="cell" Type="System.Web.UI.WebControls.DataControlFieldCell" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
        <Parameter Name="includeReadOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dictionary">セルの値を保持するディクショナリ。</param>
        <param name="cell">テキストまたはのコントロールを含むセル、 <see cref="T:System.Web.DynamicData.DynamicField" /> オブジェクトです。</param>
        <param name="rowState">行の状態を指定する列挙値の 1 つ。</param>
        <param name="includeReadOnly">
          <see langword="true" /> 読み取り専用のフィールドの値が含まれる <c>dictionary</c>。 そうしないと、 <see langword="false" />です。</param>
        <summary>現在のセルからのデータ フィールドの値を抽出し、指定したディクショナリに値を追加します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public string GetAttribute (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicField.GetAttribute(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">取得する属性のキー。</param>
        <summary>指定した属性の値を取得します。</summary>
        <returns>属性の値。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.DynamicData.DynamicField.SetAttribute(System.String,System.String)" />
        <altmember cref="T:System.Web.UI.IAttributeAccessor" />
      </Docs>
    </Member>
    <Member MemberName="HeaderText">
      <MemberSignature Language="C#" Value="public override string HeaderText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderText" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicField.HeaderText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を含むデータ バインド コントロールのヘッダーに表示されるテキスト、 <see cref="T:System.Web.DynamicData.DynamicField" /> オブジェクトです。</summary>
        <value>含まれるデータ バインド コントロールのヘッダーに表示されるテキスト、 <see cref="T:System.Web.DynamicData.DynamicField" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.DynamicData.DynamicField.HeaderText%2A> フレンドリ名をデータ バインド コントロール内のフィールドを識別するプロパティです。 最も一般的なアプリケーション、 <xref:System.Web.DynamicData.DynamicField.HeaderText%2A> プロパティはデータ フィールドに意味のある列名を提供する、 <xref:System.Web.UI.WebControls.GridView> または <xref:System.Web.UI.WebControls.DetailsView> コントロールです。  
  
 既定では、 <xref:System.Web.DynamicData.DynamicField.HeaderText%2A> プロパティを使用してデータ フィールドの設定の表示名を使用して、 <xref:System.ComponentModel.DisplayNameAttribute> 属性です。 表示名が設定されていない場合、 <xref:System.Web.DynamicData.DynamicField.HeaderText%2A> プロパティの値を使用して、 <xref:System.Web.DynamicData.DynamicField.DataField%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.DynamicData.DynamicField" /> を実装するデータ ソース コントロールにバインドされていないデータ バインド コントロール内のオブジェクトが、 <see cref="T:System.Web.DynamicData.IDynamicDataSource" /> インターフェイスです。</exception>
        <altmember cref="P:System.Web.DynamicData.DynamicField.DataField" />
        <altmember cref="P:System.Web.DynamicData.MetaColumn.DisplayName" />
        <altmember cref="T:System.ComponentModel.DisplayNameAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
        <altmember cref="T:System.Web.UI.WebControls.GridView" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public bool HtmlEncode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HtmlEncode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicField.HtmlEncode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に表示される前にデータ フィールドの値は HTML でエンコードされたでがあるかどうかを示す値、 <see cref="T:System.Web.DynamicData.DynamicField" /> オブジェクトです。</summary>
        <value>
          <see langword="true" /> フィールド値は、HTML でエンコードされてから表示される場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.DynamicData.DynamicField.HtmlEncode%2A> プロパティから表示されるフィールドの値が、それぞれの文字列形式に HTML エンコードであるかどうかを指定します。  
  
> [!NOTE]
>  HTML エンコーディング フィールドの値をクロスサイト スクリプト攻撃や悪意のあるコンテンツが表示されていることを防ぐのに役立ちます。 可能な場合は、このプロパティを有効にする必要があります。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeCell">
      <MemberSignature Language="C#" Value="public override void InitializeCell (System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlCellType cellType, System.Web.UI.WebControls.DataControlRowState rowState, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void InitializeCell(class System.Web.UI.WebControls.DataControlFieldCell cell, valuetype System.Web.UI.WebControls.DataControlCellType cellType, valuetype System.Web.UI.WebControls.DataControlRowState rowState, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Web.UI.WebControls.DataControlFieldCell" />
        <Parameter Name="cellType" Type="System.Web.UI.WebControls.DataControlCellType" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cell">コントロールまたはテキストを格納しているオブジェクト、 <see cref="T:System.Web.DynamicData.DynamicField" /> オブジェクトです。</param>
        <param name="cellType">関数を指定する列挙値のいずれか、 <c>cell</c> オブジェクトです。</param>
        <param name="rowState">行の状態を指定する列挙値の 1 つ。</param>
        <param name="rowIndex">行のインデックスを <c>cell</c> にオブジェクトが含まれています。</param>
        <summary>テキストを追加または指定されたセルを制御します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NullDisplayText">
      <MemberSignature Language="C#" Value="public string NullDisplayText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NullDisplayText" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicField.NullDisplayText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フィールド値が <see langword="null" /> の場合にデータ フィールドに表示されるキャプションを取得または設定します。</summary>
        <value>フィールド値が <see langword="null" /> の場合にデータ フィールドに表示されるキャプション。 既定値は空の文字列 \(""\) です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データ ソースにはフィールドの値が null として格納されている場合があります。 設定して、null 値を持つデータ フィールドに対して表示するカスタム キャプションを指定する、 <xref:System.Web.DynamicData.DynamicField.NullDisplayText%2A> プロパティです。 このプロパティが設定されていない null フィールドの値が空の文字列として表示されます \(""\) です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicField.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicField.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicField.ConvertEmptyStringToNull" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicField.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>動的フィールドの読み取り専用の状態を取得します。</summary>
        <value>動的フィールドの読み取り専用状態です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Web.DynamicData.DynamicField.ReadOnly%2A> プロパティは、 `true`, 、 <xref:System.Web.DynamicData.DynamicField> コントロールが読み取り専用のテンプレートを読み込みます。 このプロパティは、ビュー ステートを有効にする必要があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAttribute(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicField.SetAttribute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">設定する属性の名前。</param>
        <param name="value">属性値。</param>
        <summary>関連付けられている属性を設定、 <see cref="T:System.Web.DynamicData.DynamicField" /> オブジェクトです。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.DynamicData.DynamicField.GetAttribute(System.String)" />
        <altmember cref="T:System.Web.UI.IAttributeAccessor" />
      </Docs>
    </Member>
    <Member MemberName="SortExpression">
      <MemberSignature Language="C#" Value="public override string SortExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicField.SortExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ フィールドが、データ ソースの並べ替えに使用されるときに使用される並べ替え式を設定します。</summary>
        <value>データ フィールドが、データ ソースの並べ替えに使用されるときに使用される並べ替え式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.DynamicData.DynamicField.SortExpression%2A> プロパティの値を使用しようとする、 <xref:System.Web.DynamicData.MetaColumn.SortExpression%2A?displayProperty=fullName> に関連付けられている列オブジェクトのプロパティ、 <xref:System.Web.DynamicData.DynamicField> オブジェクトを設定して、 <xref:System.Web.DynamicData.DynamicField.DataField%2A> プロパティです。  
  
 <xref:System.Web.UI.WebControls.DataControlField.OnFieldChanged%2A> 状態変更イベントを生成するメソッドが呼び出されたときに、 <xref:System.Web.DynamicData.DynamicField.SortExpression%2A> プロパティを設定します。  
  
 値、 <xref:System.Web.DynamicData.DynamicField.SortExpression%2A> プロパティはビュー ステートに格納します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.DynamicData.DynamicField" /> を実装するデータ ソース コントロールにバインドされていないデータ バインド コントロール内のオブジェクトが、 <see cref="T:System.Web.DynamicData.IDynamicDataSource" /> インターフェイスです。</exception>
        <altmember cref="P:System.Web.DynamicData.DynamicField.DataField" />
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.OnFieldChanged" />
        <altmember cref="P:System.Web.DynamicData.MetaColumn.SortExpression" />
      </Docs>
    </Member>
    <Member MemberName="UIHint">
      <MemberSignature Language="C#" Value="public virtual string UIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicField.UIHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ フィールドを表示するために使用するフィールド テンプレートを設定します。</summary>
        <value>データ フィールドを表示するために使用するフィールド テンプレートの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.DynamicData.DynamicField.UIHint%2A> プロパティを使用してデータ フィールドの UI を表示するフィールド テンプレートを指定します。 既定ではフィールド テンプレートは、ユーザー コントロールと、名前には、挿入操作と編集操作に使用されるフィールド テンプレートを識別するサフィックスが含まれます。 サフィックスは、それぞれ編集 \(\_e\) と維持、です。 値を設定すると、 <xref:System.Web.DynamicData.DynamicField.UIHint%2A> プロパティには、サフィックスのない名前を設定します。 動的なデータでは、データ フィールドの現在のモードを識別して、正しいフィールド テンプレートにレンダリングされます。  
  
 場合、 <xref:System.Web.DynamicData.DynamicField.UIHint%2A> プロパティが設定されていない、既定では動的なデータ フィールド タイプに基づくフィールド テンプレートがレンダリングされます。 詳細については、「[ASP.NET Dynamic Data Scaffolding](http://msdn.microsoft.com/ja-jp/e0166a58-9178-4660-81a6-175994b11b12)」を参照してください。  
  
 使用して指定するフィールド テンプレート、 <xref:System.Web.DynamicData.DynamicField.UIHint%2A> プロパティは、このインスタンスの特定、 <xref:System.Web.DynamicData.DynamicField> クラスです。 適用することでは、アプリケーション全体にわたって、データ フィールドで使用されるフィールド テンプレートを変更することも、 <xref:System.ComponentModel.DataAnnotations.UIHintAttribute> 、データ モデルにします。 設定、 <xref:System.Web.DynamicData.DynamicField.UIHint%2A> プロパティは、データ モデルに適用されるメタデータを上書きします。 メタデータ属性の詳細については、次を参照してください。 [ASP.NET Dynamic Data Overview](http://msdn.microsoft.com/ja-jp/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512)します。  
  
 <xref:System.Web.UI.WebControls.DataControlField.OnFieldChanged%2A> 状態変更イベントを生成するメソッドが呼び出されたときに、 <xref:System.Web.DynamicData.DynamicField.UIHint%2A> プロパティを設定します。  
  
 値、 <xref:System.Web.DynamicData.DynamicField.UIHint%2A> プロパティはビュー ステートに格納します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
        <altmember cref="P:System.Web.DynamicData.DynamicField.DataField" />
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.OnFieldChanged" />
      </Docs>
    </Member>
    <Member MemberName="ValidateRequestMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ValidateRequestMode ValidateRequestMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ValidateRequestMode ValidateRequestMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicField.ValidateRequestMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ValidateRequestMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロールがクライアントの入力を検証するかどうかを指定する値を設定します。</summary>
        <value>
          <see langword="true" /> コントロールがクライアントの入力を検証する場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicField.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="P:System.Web.DynamicData.DynamicControl.ValidationGroup" /> オブジェクトがこの <see cref="T:System.Web.DynamicData.DynamicField" /> に関連付けられたオブジェクト。</summary>
        <value>この検証コントロールが属する検証グループの名前。 既定値は空の文字列 \(""\) です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>