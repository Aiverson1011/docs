<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileIO.FileSystem">
  <TypeSignature Language="C#" Value="public class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.FileSystem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>プロパティとドライブ、ファイル、およびディレクトリを操作するためのメソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表に、関連するタスクの例については、 `My.Computer.FileSystem` オブジェクトです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|テキスト ファイルからの読み取り|[How to: Read From Text Files in Visual Basic](http://msdn.microsoft.com/ja-jp/735fe9d7-0f7a-4185-ba02-f35e580ec4b8)|  
|区切り記号付きテキスト ファイルからの読み取り|[How to: Read From Comma\-Delimited Text Files in Visual Basic](http://msdn.microsoft.com/ja-jp/a8413fe4-0dba-49c8-8692-44fb67a9ec4f)|  
|固定幅のテキスト ファイルからの読み取り|[How to: Read From Fixed\-width Text Files in Visual Basic](http://msdn.microsoft.com/ja-jp/99be5692-967a-4e85-993e-cd18139a5a69)|  
|複数の形式でテキスト ファイルから読み込む|[How to: Read From Text Files with Multiple Formats in Visual Basic](http://msdn.microsoft.com/ja-jp/8d185eb2-79ca-42cd-95a7-d3ff44a5a0f8)|  
|バイナリ ファイルからの読み取り|[How to: Read From Binary Files in Visual Basic](http://msdn.microsoft.com/ja-jp/d2b1269e-24b6-42e0-9414-ae708db282d8)|  
|持つテキスト ファイルから読み取り、 <xref:System.IO.StreamReader>|[How to: Read Text from Files with a StreamReader \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/384033c6-18f9-4d59-9610-36371226558f)|  
|テキスト ファイルへの書き込み|[How to: Write Text to Files in Visual Basic](http://msdn.microsoft.com/ja-jp/304956eb-530d-4df7-b48f-9b4d1f2581a0)|  
|テキスト ファイルへの追加します。|[How to: Append to Text Files in Visual Basic](http://msdn.microsoft.com/ja-jp/bbbd7fb5-f169-41a9-b53f-520ea9613913)|  
|バイナリ ファイルへの書き込み|[How to: Write to Binary Files in Visual Basic](http://msdn.microsoft.com/ja-jp/59fae125-de5b-4c96-883c-209f4a55112c)|  
|内のテキスト ファイルへの書き込み、 **マイ ドキュメント** ディレクトリ|[How to: Write Text to Files in the My Documents Directory in Visual Basic](http://msdn.microsoft.com/ja-jp/1c726124-781d-4976-9baa-ed46814ff3fe)|  
|持つテキスト ファイルへの書き込み、 `StreamWriter`|[How to: Write Text to Files with a StreamWriter in Visual Basic](http://msdn.microsoft.com/ja-jp/99762e57-ef46-4dcc-8959-a8f79c22f067)|  
|特定のパターンを持つファイルをコピーします。|[How to: Copy Files with a Specific Pattern to a Directory in Visual Basic](http://msdn.microsoft.com/ja-jp/f205d2ad-bbe5-4d55-8a40-acda21aa82dd)|  
|ファイルを同じディレクトリにコピーします。|[How to: Create a Copy of a File in the Same Directory in Visual Basic](http://msdn.microsoft.com/ja-jp/b2fdda86-e666-42c2-9706-9527e9fa68ff)|  
|ファイルを別のディレクトリにコピーします。|[How to: Create a Copy of a File in a Different Directory in Visual Basic](http://msdn.microsoft.com/ja-jp/88e2145c-d414-45a5-ad03-6f5d58ecca26)|  
|ファイルを作成します。|[How to: Create a File in Visual Basic](http://msdn.microsoft.com/ja-jp/0253bb6d-5519-4a50-b882-b93ef5cca0d9)|  
|ファイルの削除|[How to: Delete a File in Visual Basic](http://msdn.microsoft.com/ja-jp/4b721769-3e45-4be7-b7fe-b08dc4141b44)|  
|特定のパターンを持つファイルを検索します。|[How to: Find Files with a Specific Pattern in Visual Basic](http://msdn.microsoft.com/ja-jp/25e3b71d-b844-4293-9e4e-f06c5836b5cc)|  
|ファイルを移動します。|[How to: Move a File in Visual Basic](http://msdn.microsoft.com/ja-jp/53a7457b-5815-41ad-b37d-28537c1fb77a)|  
|ファイル名の変更します。|[How to: Rename a File in Visual Basic](http://msdn.microsoft.com/ja-jp/0ea7e0c8-2cb2-4bf5-a00d-7b6e3c08a3bc)|  
|ディレクトリを別のディレクトリにコピーします。|[How to: Copy a Directory to Another Directory in Visual Basic](http://msdn.microsoft.com/ja-jp/2a370bd7-10ba-4219-afc4-4519d031eb6c)|  
|ディレクトリの作成|[How to: Create a Directory in Visual Basic](http://msdn.microsoft.com/ja-jp/0351a2ca-24d8-43b5-bb39-9b99e6401cff)|  
|特定のパターンを持つサブディレクトリを検索します。|[How to: Find Subdirectories with a Specific Pattern in Visual Basic](http://msdn.microsoft.com/ja-jp/c9265fd1-7483-4150-8b7f-ff642caa939d)|  
|ディレクトリ内のファイルのコレクションを取得します。|[How to: Get the Collection of Files in a Directory in Visual Basic](http://msdn.microsoft.com/ja-jp/6c8ba7e8-dd37-4853-92bf-762b67c98160)|  
|読み取り、 **マイ ドキュメント** ディレクトリ|[How to: Retrieve the Contents of the My Documents Directory in Visual Basic](http://msdn.microsoft.com/ja-jp/26560d01-7dda-4457-8e95-21db23d71aea)|  
|ファイル パスを解析します。|[How to: Parse File Paths in Visual Basic](http://msdn.microsoft.com/ja-jp/c1bd99c9-8160-456a-b5ab-60a49139b923)|  
  
   
  
## 例  
 この例を確認するかどうか、フォルダー `C:\backup\logs` が存在し、そのプロパティをチェックします。  
  
 [!code-vb[VbVbcnMyFileSystem\#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#23)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.FileIO.SpecialDirectories" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystem ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 [オブジェクト \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/651c73e4-dca8-402b-9c6b-e3902b3a3f4b)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CombinePath">
      <MemberSignature Language="C#" Value="public static string CombinePath (string baseDirectory, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CombinePath(string baseDirectory, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CombinePath(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseDirectory" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseDirectory">
          <see langword="String" />。 結合する最初のパス。</param>
        <param name="relativePath">
          <see langword="String" />。 2 番目のパスを結合します。</param>
        <summary>2 つのパスを結合し、正しく書式設定されたパスを返します。</summary>
        <returns>指定したパスの組み合わせ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、正しく書式設定されたパスを作成する余分なスラッシュ \(\/\) 文字をトリムします。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.CombinePath`メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ディレクトリ パスとファイル名を結合します。|[方法 : Visual Basic でファイル パスを解析する](http://msdn.microsoft.com/ja-jp/c1bd99c9-8160-456a-b5ab-60a49139b923)|  
  
   
  
## 例  
 この例では、正しく書式設定されたパスを作成するディレクトリ パスとファイル名を結合します。  
  
 [!code-vb[VbRefFile\#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#3)]  
  
 この例では、正しく書式設定されたパスを作成する 2 つのパスを結合します。  
  
 [!code-vb[VbRefFile\#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#4)]  
  
 この例を返します`C:\Dir1\Dir2\Dir4\Dir5\File.txt`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="baseDirectory" />または<paramref name="relativePath" />パスが正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">コピーされるディレクトリです。</param>
        <param name="destinationDirectoryName">ディレクトリの内容のコピー先となる場所です。</param>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ターゲット ディレクトリにソース ディレクトリの内容をコピーします。 ターゲット ディレクトリが存在しない場合は作成されます。 ターゲットの場所に同じ名前のディレクトリが存在する場合は、2 つのディレクトリの内容がマージされます。 操作中に、ディレクトリに新しい名前を指定できます。  
  
 ディレクトリ内のファイルをコピーするときに例外スローされる可能性が引き起こされる、特定のファイルでします。 このような例外がスローされると、それらに統合されます。 1 つの例外が`Data`プロパティの形式でエントリを保持する、<xref:System.Collections.IDictionary>をファイルまたはディレクトリのパスは、キーであり、特定の例外メッセージが、対応する値に含まれています。 使用して`For…Each`エントリを列挙します。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.CopyDirectory`メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ディレクトリのコピー|[方法 : Visual Basic でディレクトリを別のディレクトリにコピーする](http://msdn.microsoft.com/ja-jp/2a370bd7-10ba-4219-afc4-4519d031eb6c)|  
  
   
  
## 例  
 次の例は、ディレクトリの内容をコピー`TestDirectory1`に`TestDirectory2`、既存のファイルを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem\#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 置き換える`C:\TestDirectory1`と`C:\TestDirectory2`パスとコピーするディレクトリとそれをコピーする場所の名前を使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない、次の理由のいずれかの: は長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" />または<paramref name="sourceDirectoryName" />は<see langword="Nothing" />または空の文字列。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ソース ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ソース パスとターゲット パスは、同じです。</exception>
        <exception cref="T:System.InvalidOperationException">操作は循環使用します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パスにフォルダー名は、コロン \(:\) が含まれています。 または形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">コピー先ファイルが存在しますが、アクセスできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">コピーされるディレクトリです。</param>
        <param name="destinationDirectoryName">ディレクトリの内容のコピー先となる場所です。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ターゲット ディレクトリにソース ディレクトリの内容をコピーします。 ターゲット ディレクトリが存在しない場合は作成されます。 ターゲットの場所に同じ名前のディレクトリが存在する場合は、2 つのディレクトリの内容がマージされます。 操作中に、ディレクトリに新しい名前を指定できます。  
  
 ディレクトリ内のファイルをコピーするときに例外スローされる可能性が引き起こされる、特定のファイルでします。 このような例外がスローされると、それらに統合されます。 1 つの例外が`Data`プロパティの形式でエントリを保持する、<xref:System.Collections.IDictionary>でファイルまたはディレクトリのパスは、キーであり、特定の例外メッセージが、対応する値に含まれています。 使用して`For…Each`エントリを列挙します。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.CopyDirectory`メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ディレクトリのコピー|[方法 : Visual Basic でディレクトリを別のディレクトリにコピーする](http://msdn.microsoft.com/ja-jp/2a370bd7-10ba-4219-afc4-4519d031eb6c)|  
  
   
  
## 例  
 次の例は、ディレクトリの内容をコピー`TestDirectory1`に`TestDirectory2`、既存のファイルを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem\#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 置き換える`C:\TestDirectory1`と`C:\TestDirectory2`パスとコピーするディレクトリとそれをコピーする場所の名前を使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない、次の理由のいずれかの: は長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" />または<paramref name="sourceDirectoryName" />は<see langword="Nothing" />または空の文字列。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ソース ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ソース パスとターゲット パスは、同じです。</exception>
        <exception cref="T:System.InvalidOperationException">操作は循環使用します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パスにフォルダー名は、コロン \(:\) が含まれています。 または形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">出力先ファイルが存在しますが、アクセスできません。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="ShowUI" />設定されている<see langword="UIOption.AllDialogs" />と、ユーザーが、操作をキャンセルまたはディレクトリに 1 つ以上のファイルをコピーすることはできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">コピーされるディレクトリです。</param>
        <param name="destinationDirectoryName">ディレクトリの内容のコピー先となる場所です。</param>
        <param name="overwrite">
          <see langword="True" />既存のファイルを上書きするにはそれ以外の場合<see langword="False" />です。 既定値は <see langword="False" /> です。</param>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ターゲット ディレクトリにソース ディレクトリの内容をコピーします。 ターゲット ディレクトリが存在しない場合は作成されます。 ターゲットの場所に同じ名前のディレクトリが存在する場合は、2 つのディレクトリの内容がマージされます。 操作中に、ディレクトリに新しい名前を指定できます。  
  
 ディレクトリ内のファイルをコピーするときに例外スローされる可能性が引き起こされる中にマージ中に既存のファイルなど、特定のファイルで`overwrite`に設定されている`False`です。 このような例外がスローされると、それらに統合されます。 1 つの例外が`Data`プロパティの形式でエントリを保持する、<xref:System.Collections.IDictionary>でファイルまたはディレクトリのパスは、キーであり、特定の例外メッセージが、対応する値に含まれています。 使用して`For…Each`エントリを列挙します。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.CopyDirectory`メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ディレクトリのコピー|[方法 : Visual Basic でディレクトリを別のディレクトリにコピーする](http://msdn.microsoft.com/ja-jp/2a370bd7-10ba-4219-afc4-4519d031eb6c)|  
  
   
  
## 例  
 次の例は、ディレクトリの内容をコピー`TestDirectory1`に`TestDirectory2`、既存のファイルを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem\#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 置換`C:\TestDirectory1`と`C:\TestDirectory2`パスとコピーするディレクトリとそれをコピーする場所の名前を使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない、次の理由のいずれかの: は長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" />または<paramref name="sourceDirectoryName" />は<see langword="Nothing" />または空の文字列。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ソース ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ソース パスとターゲット パスは、同じです。</exception>
        <exception cref="T:System.InvalidOperationException">操作は循環使用します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パスにフォルダー名は、コロン \(:\) が含まれています。 または形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">コピー先ファイルが存在しますが、アクセスできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyDirectory">
      <MemberSignature Language="C#" Value="public static void CopyDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">コピーされるディレクトリです。</param>
        <param name="destinationDirectoryName">ディレクトリの内容のコピー先となる場所です。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="onUserCancel">どのくらいにする必要がありますを指定します、ユーザーがクリックした場合は実行**キャンセル**操作中にします。 既定値は <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" /> です。</param>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ターゲット ディレクトリにソース ディレクトリの内容をコピーします。 ターゲット ディレクトリが存在しない場合は作成されます。 ターゲットの場所に同じ名前のディレクトリが存在する場合は、2 つのディレクトリの内容がマージされます。 操作中に、ディレクトリに新しい名前を指定できます。  
  
 ディレクトリ内のファイルをコピーするときに例外スローされる可能性が引き起こされる、特定のファイルでします。 このような例外がスローされると、それらに統合されます。 1 つの例外が`Data`プロパティの形式でエントリを保持する、<xref:System.Collections.IDictionary>でファイルまたはディレクトリのパスは、キーであり、特定の例外メッセージが、対応する値に含まれています。 使用して`For…Each`エントリを列挙します。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.CopyDirectory`メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ディレクトリのコピー|[方法 : Visual Basic でディレクトリを別のディレクトリにコピーする](http://msdn.microsoft.com/ja-jp/2a370bd7-10ba-4219-afc4-4519d031eb6c)|  
  
   
  
## 例  
 次の例は、ディレクトリの内容をコピー`TestDirectory1`に`TestDirectory2`、既存のファイルを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem\#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#49)]  
  
 置き換える`C:\TestDirectory1`と`C:\TestDirectory2`パスとコピーするディレクトリとそれをコピーする場所の名前を使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない、次の理由のいずれかの: は長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationDirectoryName" />または<paramref name="sourceDirectoryName" />は<see langword="Nothing" />または空の文字列。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ソース ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ソース パスとターゲット パスは、同じです。</exception>
        <exception cref="T:System.InvalidOperationException">操作は循環使用します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パスにフォルダー名は、コロン \(:\) が含まれています。 または形式が無効です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">出力先ファイルが存在しますが、アクセスできません。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="ShowUI" />設定されている<see langword="UIOption.AllDialogs" />と、ユーザーが、操作をキャンセルまたはディレクトリに 1 つ以上のファイルをコピーすることはできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public static void CopyFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイルです。</param>
        <param name="destinationFileName">ファイルのコピー先となる場所です。</param>
        <summary>新しい場所にファイルをコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `CopyFile`Ace \(アクセス制御エントリ\) は保持されません。 新しく作成されたファイルは、作成されているディレクトリから既定の Ace を継承します。  
  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.CopyFile`メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|同じディレクトリにファイルをコピーします。|[方法 : Visual Basic でファイルのコピーを同じディレクトリに作成する](http://msdn.microsoft.com/ja-jp/b2fdda86-e666-42c2-9706-9527e9fa68ff)|  
|別のディレクトリにファイルをコピーします。|[方法 : Visual Basic でファイルのコピーを別のディレクトリに作成する](http://msdn.microsoft.com/ja-jp/88e2145c-d414-45a5-ad03-6f5d58ecca26)|  
  
   
  
## 例  
 この例は、ファイルをコピー `Test.txt` ディレクトリに `TestFiles2` 既存のファイルを上書きすることがなくです。  
  
 [!code-vb[VbRefFile\#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 この例は、ファイルをコピー `Test.txt` ディレクトリに `TestFiles2`名前を変更して、 `NewFile.txt`です。  
  
 [!code-vb[VbRefFile\#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName " />パス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" />または<paramref name="sourceFileName" />は<see langword="Nothing" />または空の文字列。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルは、正しくないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">同じ名前のターゲット ディレクトリ内のファイルは、使用中です。</exception>
        <exception cref="T:System.NotSupportedException">パスのファイルまたはディレクトリ名は、コロン \(:\) が含まれています。 または形式が無効です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Controls the ability to access all environment variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Controls the ability to access registry variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public static void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイルです。</param>
        <param name="destinationFileName">ファイルのコピー先となる場所です。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <summary>新しい場所にファイルをコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `CopyFile`Ace \(アクセス制御エントリ\) は保持されません。 新しく作成されたファイルは、作成されているディレクトリから既定の Ace を継承します。  
  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.CopyFile`メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|同じディレクトリにファイルをコピーします。|[方法 : Visual Basic でファイルのコピーを同じディレクトリに作成する](http://msdn.microsoft.com/ja-jp/b2fdda86-e666-42c2-9706-9527e9fa68ff)|  
|別のディレクトリにファイルをコピーします。|[方法 : Visual Basic でファイルのコピーを別のディレクトリに作成する](http://msdn.microsoft.com/ja-jp/88e2145c-d414-45a5-ad03-6f5d58ecca26)|  
  
   
  
## 例  
 この例は、ファイルをコピー `Test.txt` ディレクトリに `TestFiles2` 既存のファイルを上書きすることがなくです。  
  
 [!code-vb[VbRefFile\#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 この例は、ファイルをコピー `Test.txt` ディレクトリに `TestFiles2`名前を変更して、 `NewFile.txt`です。  
  
 [!code-vb[VbRefFile\#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName " />パス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" />または<paramref name="sourceFileName" />は<see langword="Nothing" />または空の文字列。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルは、正しくないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">変換先ファイルが存在し、<paramref name="overwrite" />に設定されている<see langword="False" />です。</exception>
        <exception cref="T:System.NotSupportedException">パスのファイルまたはディレクトリ名は、コロン \(:\) が含まれています。 または形式が無効です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Controls the ability to access all environment variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Controls the ability to access registry variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public static void CopyFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイルです。</param>
        <param name="destinationFileName">ファイルのコピー先となる場所です。</param>
        <param name="overwrite">
          <see langword="True" />既存のファイルを上書きする場合それ以外の場合<see langword="False" />です。 既定値は <see langword="False" /> です。</param>
        <summary>新しい場所にファイルをコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `CopyFile`Ace \(アクセス制御エントリ\) は保持されません。 新しく作成されたファイルは、作成されているディレクトリから既定の Ace を継承します。  
  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.CopyFile`メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|同じディレクトリにファイルをコピーします。|[方法 : Visual Basic でファイルのコピーを同じディレクトリに作成する](http://msdn.microsoft.com/ja-jp/b2fdda86-e666-42c2-9706-9527e9fa68ff)|  
|別のディレクトリにファイルをコピーします。|[方法 : Visual Basic でファイルのコピーを別のディレクトリに作成する](http://msdn.microsoft.com/ja-jp/88e2145c-d414-45a5-ad03-6f5d58ecca26)|  
  
   
  
## 例  
 この例は、ファイルをコピー `Test.txt` ディレクトリに `TestFiles2` 既存のファイルを上書きすることがなくです。  
  
 [!code-vb[VbRefFile\#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 この例は、ファイルをコピー `Test.txt` ディレクトリに `TestFiles2`名前を変更して、 `NewFile.txt`です。  
  
 [!code-vb[VbRefFile\#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName " />パス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" />または<paramref name="sourceFileName" />は<see langword="Nothing" />または空の文字列。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルは、正しくないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">変換先ファイルが存在し、<paramref name="overwrite" />に設定されている<see langword="False" />です。</exception>
        <exception cref="T:System.NotSupportedException">パスのファイルまたはディレクトリ名は、コロン \(:\) が含まれています。 または形式が無効です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Controls the ability to access all environment variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Controls the ability to access registry variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CopyFile">
      <MemberSignature Language="C#" Value="public static void CopyFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CopyFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">コピーするファイルです。</param>
        <param name="destinationFileName">ファイルのコピー先となる場所です。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="onUserCancel">どのくらいにする必要がありますを指定します、ユーザーがクリックした場合は実行**キャンセル**操作中にします。 既定値は <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" /> です。</param>
        <summary>新しい場所にファイルをコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `CopyFile`Ace \(アクセス制御エントリ\) は保持されません。 新しく作成されたファイルは、作成されているディレクトリから既定の Ace を継承します。  
  
 次の表に、関連するタスクの例については、`My.Computer.FileSystem.CopyFile`メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|同じディレクトリにファイルをコピーします。|[方法 : Visual Basic でファイルのコピーを同じディレクトリに作成する](http://msdn.microsoft.com/ja-jp/b2fdda86-e666-42c2-9706-9527e9fa68ff)|  
|別のディレクトリにファイルをコピーします。|[方法 : Visual Basic でファイルのコピーを別のディレクトリに作成する](http://msdn.microsoft.com/ja-jp/88e2145c-d414-45a5-ad03-6f5d58ecca26)|  
  
   
  
## 例  
 この例は、ファイルをコピー `Test.txt` ディレクトリに `TestFiles2` 既存のファイルを上書きすることがなくです。  
  
 [!code-vb[VbRefFile\#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#15)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 この例は、ファイルをコピー `Test.txt` ディレクトリに `TestFiles2`名前を変更して、 `NewFile.txt`です。  
  
 [!code-vb[VbRefFile\#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#16)]  
  
 ファイルのパスをコードで使用するパスに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="destinationFileName " />パス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" />または<paramref name="sourceFileName" />は<see langword="Nothing" />または空の文字列。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルは、正しくないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">変換先ファイルが存在し、<paramref name="overwrite" />に設定されている<see langword="False" />です。</exception>
        <exception cref="T:System.NotSupportedException">パスにファイルまたはディレクトリ名は、コロン \(:\) が含まれていますか、無効な形式です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="UICancelOption" />設定されている<see langword="ThrowException" />、およびユーザーが操作の取り消しまたは未指定の I\/O エラーが発生します。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Controls the ability to access all environment variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Controls the ability to access registry variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public static void CreateDirectory (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static void CreateDirectory(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">名前とディレクトリの場所。</param>
        <summary>ディレクトリを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ディレクトリが既に存在する場合、例外はスローされません。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.CreateDirectory`メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ディレクトリの作成|[方法 : Visual Basic でディレクトリを作成する](http://msdn.microsoft.com/ja-jp/0351a2ca-24d8-43b5-bb39-9b99e6401cff)|  
  
   
  
## 例  
 この例は、ディレクトリを作成`NewDirectory`の`C:\Documents and Settings\All Users\Documents`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ディレクトリ名が正しくありません。 たとえば、無効な文字が含まれていますかは、空白のみです。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">ディレクトリ名が長すぎます。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ名は、コロン \(:\) だけです。</exception>
        <exception cref="T:System.IO.IOException">作成するディレクトリの親ディレクトリは読み取り専用</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、ディレクトリを作成する権限がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="M:System.IO.Directory.CreateDirectory(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDirectory">
      <MemberSignature Language="C#" Value="public static string CurrentDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string CurrentDirectory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または現在のディレクトリを設定します。</summary>
        <value>ファイル I\/O 操作の現在のディレクトリ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `CurrentDirectory`システム全体の環境変数です。  
  
   
  
## 例  
 この例では、現在のディレクトリを取得し、メッセージ ボックスに表示されます。  
  
 [!code-vb[VbVbcnMyFileSystem\#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#18)]  
  
 この例では、現在のディレクトリを設定`C:\TestDirectory`です。  
  
 [!code-vb[VbVbcnMyFileSystem\#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">パスが正しくありません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public static void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.DeleteDirectoryOption onDirectoryNotEmpty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="onDirectoryNotEmpty" Type="Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
      </Parameters>
      <Docs>
        <param name="directory">削除するディレクトリ。</param>
        <param name="onDirectoryNotEmpty">どうすればよいのディレクトリを削除するには、ファイルまたはディレクトリが含まれている場合を指定します。 既定値は <see langword="DeleteDirectoryOption.DeleteAllContents" /> です。</param>
        <summary>ディレクトリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 例では、ディレクトリを削除する `OldDirectory` が空の場合のみです。  
  
 [!code-vb[VbVbcnMyFileSystem\#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 この例は、ディレクトリを削除 `OldDirectory` とそのすべての内容。  
  
 [!code-vb[VbVbcnMyFileSystem\#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 この例は、ディレクトリを削除 `OldDirectory` 、削除の確認をユーザーに確認する、その内容のすべてが、ウィンドウの内容を送信しませんし、 **ごみ箱**します。  
  
 [!code-vb[VbVbcnMyFileSystem\#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 この例は、ディレクトリを削除 `OldDirectory` とに送信する、その内容をすべて、 **ごみ箱**, は、操作の進行状況を表示しません。  
  
 [!code-vb[VbVbcnMyFileSystem\#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスは、長さ 0 の文字列は、形式が正しくない化か、空白文字だけが含まれています \(ワイルドカード文字を含む\)、無効な文字が含まれています。 パスはデバイスのパス \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しないか、ファイルです。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリまたはサブディレクトリ内のファイルが使用されています。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ名には、コロン \(:\) が含まれています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.OperationCanceledException">操作をキャンセルまたはディレクトリを削除することはできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption" />
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public static void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="directory">削除するディレクトリ。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="recycle">削除されたファイルを送信する必要があるかどうかを指定、 **ごみ箱**します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
        <summary>ディレクトリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `showUI` と `recycle` パラメーターは、Windows サービスなどの対話型ユーザーされていないアプリケーションでサポートされていません。  
  
   
  
## 例  
 例では、ディレクトリを削除する `OldDirectory` が空の場合のみです。  
  
 [!code-vb[VbVbcnMyFileSystem\#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 この例は、ディレクトリを削除 `OldDirectory` とそのすべての内容。  
  
 [!code-vb[VbVbcnMyFileSystem\#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 この例は、ディレクトリを削除 `OldDirectory` 、削除の確認をユーザーに確認する、その内容のすべてが、ウィンドウの内容を送信しませんし、 **ごみ箱**します。  
  
 [!code-vb[VbVbcnMyFileSystem\#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 この例は、ディレクトリを削除 `OldDirectory` とに送信する、その内容をすべて、 **ごみ箱**, は、操作の進行状況を表示しません。  
  
 [!code-vb[VbVbcnMyFileSystem\#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスは、長さ 0 の文字列は、形式が正しくない化か、空白文字だけが含まれています \(ワイルドカード文字を含む\)、無効な文字が含まれています。 パスはデバイスのパス \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しないか、ファイルです。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリまたはサブディレクトリ内のファイルが使用されています。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ名には、コロン \(:\) が含まれています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.OperationCanceledException">操作をキャンセルまたはディレクトリを削除することはできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="DeleteDirectory">
      <MemberSignature Language="C#" Value="public static void DeleteDirectory (string directory, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteDirectory(string directory, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="directory">削除するディレクトリ。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="recycle">削除されたファイルを送信する必要があるかどうかを指定、 **ごみ箱**します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
        <param name="onUserCancel">ユーザーがクリックした場合に例外をスローするかどうかを示す **キャンセル**します。</param>
        <summary>ディレクトリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `showUI`, 、`recycle`, 、および `onUserCancel` パラメーターは、Windows サービスなどの対話型ユーザーされていないアプリケーションでサポートされていません。  
  
   
  
## 例  
 例では、ディレクトリを削除する `OldDirectory` が空の場合のみです。  
  
 [!code-vb[VbVbcnMyFileSystem\#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#56)]  
  
 この例は、ディレクトリを削除 `OldDirectory` とそのすべての内容。  
  
 [!code-vb[VbVbcnMyFileSystem\#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#57)]  
  
 この例は、ディレクトリを削除 `OldDirectory` 、削除の確認をユーザーに確認する、その内容のすべてが、ウィンドウの内容を送信しませんし、 **ごみ箱**します。  
  
 [!code-vb[VbVbcnMyFileSystem\#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#58)]  
  
 この例は、ディレクトリを削除 `OldDirectory` とに送信する、その内容をすべて、 **ごみ箱**, は、操作の進行状況を表示しません。  
  
 [!code-vb[VbVbcnMyFileSystem\#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスは、長さ 0 の文字列は、形式が正しくない化か、空白文字だけが含まれています \(ワイルドカード文字を含む\)、無効な文字が含まれています。 パスはデバイスのパス \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しないか、ファイルです。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリまたはサブディレクトリ内のファイルが使用されています。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ名には、コロン \(:\) が含まれています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、必要なアクセス許可がありません。</exception>
        <exception cref="T:System.OperationCanceledException">操作をキャンセルまたはディレクトリを削除することはできません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public static void DeleteFile (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteFile(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">名前と削除するファイルのパス。</param>
        <summary>ファイルを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.DeleteFile` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ファイルを削除するには|[方法 : Visual Basic でファイルを削除する](http://msdn.microsoft.com/ja-jp/4b721769-3e45-4be7-b7fe-b08dc4141b44)|  
  
   
  
## 例  
 この例は、ファイルを削除 `Test.txt`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 この例は、ファイルを削除 `Test.txt` でき、ユーザーにファイルを削除することを確認します。  
  
 [!code-vb[VbVbcnMyFileSystem\#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 この例は、ファイルを削除 `Test.txt` に送信し、 **ごみ箱**します。  
  
 [!code-vb[VbVbcnMyFileSystem\#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれています末尾のスラッシュが、ここでファイルを指定する必要があります。デバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.IO.IOException">ファイルが使用されています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーにファイルを削除するアクセス許可がないか、ファイルは読み取り専用です。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public static void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
      </Parameters>
      <Docs>
        <param name="file">名前と削除するファイルのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="recycle">削除されたファイルを送信するかどうか、 **ごみ箱**します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
        <summary>ファイルを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `showUI` と `recycle` パラメーターは、Windows サービスなどの対話型ユーザーされていないアプリケーションでサポートされていません。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.DeleteFile` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ファイルを削除するには|[方法 : Visual Basic でファイルを削除する](http://msdn.microsoft.com/ja-jp/4b721769-3e45-4be7-b7fe-b08dc4141b44)|  
  
   
  
## 例  
 この例は、ファイルを削除 `Test.txt`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 この例は、ファイルを削除 `Test.txt` でき、ユーザーにファイルを削除することを確認します。  
  
 [!code-vb[VbVbcnMyFileSystem\#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 この例は、ファイルを削除 `Test.txt` に送信し、 **ごみ箱**します。  
  
 [!code-vb[VbVbcnMyFileSystem\#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれています末尾のスラッシュが、ここでファイルを指定する必要があります。デバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.IO.IOException">ファイルが使用されています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーにファイルを削除するアクセス許可がないか、ファイルは読み取り専用です。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public static void DeleteFile (string file, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.RecycleOption recycle, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static void DeleteFile(string file, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.RecycleOption recycle, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="recycle" Type="Microsoft.VisualBasic.FileIO.RecycleOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="file">名前と削除するファイルのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうか。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="recycle">削除されたファイルを送信するかどうか、 **ごみ箱**します。 既定値は <see langword="RecycleOption.DeletePermanently" /> です。</param>
        <param name="onUserCancel">ユーザーが操作をキャンセルしたときに、例外がスローされるかどうかを指定します。 既定値は <see langword="UICancelOption.ThrowException" /> です。</param>
        <summary>ファイルを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `showUI`, 、`recycle`, 、および `onUserCancel` パラメーターは、Windows サービスなどの対話型ユーザーされていないアプリケーションでサポートされていません。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.DeleteFile` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ファイルを削除するには|[方法 : Visual Basic でファイルを削除する](http://msdn.microsoft.com/ja-jp/4b721769-3e45-4be7-b7fe-b08dc4141b44)|  
  
   
  
## 例  
 この例は、ファイルを削除 `Test.txt`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#3)]  
  
 この例は、ファイルを削除 `Test.txt` でき、ユーザーにファイルを削除することを確認します。  
  
 [!code-vb[VbVbcnMyFileSystem\#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#4)]  
  
 この例は、ファイルを削除 `Test.txt` に送信し、 **ごみ箱**します。  
  
 [!code-vb[VbVbcnMyFileSystem\#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれています末尾のスラッシュが、ここでファイルを指定する必要があります。デバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.IO.IOException">ファイルが使用されています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーにファイルを削除するアクセス許可がないか、ファイルは読み取り専用です。</exception>
        <exception cref="T:System.OperationCanceledException">処理をキャンセルし、 <paramref name="onUserCancel" /> に設定されている <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />します。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.RecycleOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public static bool DirectoryExists (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool DirectoryExists(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">ディレクトリのパス。</param>
        <summary>返します。 <see langword="True" /> 、指定したディレクトリが存在する場合。</summary>
        <returns>
          <see langword="True" /> ディレクトリが存在する場合それ以外の場合 <see langword="False" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 この例を確認するかどうか、ディレクトリ `C:\backup\logs` が存在し、そのプロパティをチェックします。  
  
 [!code-vb[VbRefFile\#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Drives">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt; Drives { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IO.DriveInfo&gt; Drives" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.FileSystem.Drives" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.DriveInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべての利用可能なドライブ名の読み取り専用コレクションを返します。</summary>
        <value>すべてのドライブとしての読み取り専用コレクション <see cref="T:System.IO.DriveInfo" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、すべての論理ドライブを返します。  
  
   
  
## 例  
 この例では、メッセージ ボックスに、利用可能なドライブ名を表示します。  
  
 [!code-vb[VbRefFile\#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altCompliant cref="None" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
        <altmember cref="T:System.IO.DriveInfo" />
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public static bool FileExists (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool FileExists(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.FileExists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">名前とファイルのパス。</param>
        <summary>返します。 <see langword="True" /> 、指定したファイルが存在する場合。</summary>
        <returns>返します <see langword="True" /> ファイルが存在する場合は、それ以外の場合このメソッドが戻る <see langword="False" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションが指定のファイルを読み取るための十分なアクセス許可を持っていない場合、 `FileExists` メソッドが返す `False`, 、パスの有無にかかわらず、メソッドは例外をスローしません。  
  
   
  
## 例  
 この例は、表示するかどうか、ファイル `Check.txt` が存在し、メッセージ ボックスに情報を提供します。  
  
 [!code-vb[VbRefFile\#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ファイルの名前は、円記号 \(\\\) で終わります。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
      </Parameters>
      <Docs>
        <param name="directory">検索するディレクトリ。</param>
        <param name="containsText">検索するテキスト。</param>
        <param name="ignoreCase">
          <see langword="True" /> 検索する場合は大文字小文字を区別します。それ以外の場合 <see langword="False" />します。 既定値は <see langword="True" /> です。</param>
        <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
        <summary>指定したテキストを含むファイルの名前を表す文字列の読み取り専用コレクションを返します。</summary>
        <returns>指定したテキストを含むファイルの名前の読み取り専用コレクション.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定したパターンに一致するファイルがない場合は、空のコレクションが返されます。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.FindInFiles` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ディレクトリ固有の文字列を含むファイルを検索します。|[チュートリアル : Visual Basic によるファイルとディレクトリの操作](http://msdn.microsoft.com/ja-jp/cae77565-9f78-4e46-8e42-eb2f9f8e1ffd)|  
  
   
  
## 例  
 次の例は、ディレクトリを検索 `C:\TestDir` で文字列を含むファイルを `"sample string"` に結果を表示および `ListBox1`です。  
  
 [!code-vb[VbRefFile\#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 を操作するのには、プロジェクト、 `ListBox` という `ListBox1`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる <c>\\.\</c>\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定したディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">指定したディレクトリは、既存のファイルを指します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">指定したディレクトリ パスでは、コロン \(:\) が含まれていますか、無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altCompliant cref="None." />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="FindInFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FindInFiles (string directory, string containsText, bool ignoreCase, Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FindInFiles(string directory, string containsText, bool ignoreCase, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] fileWildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="containsText" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="fileWildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">検索するディレクトリ。</param>
        <param name="containsText">検索するテキスト。</param>
        <param name="ignoreCase">
          <see langword="True" /> 検索する場合は大文字小文字を区別します。それ以外の場合 <see langword="False" />します。 既定値は <see langword="True" /> です。</param>
        <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
        <param name="fileWildcards">照合するパターン。</param>
        <summary>指定したテキストを含むファイルの名前を表す文字列の読み取り専用コレクションを返します。</summary>
        <returns>指定したテキストを含むファイルの名前の読み取り専用コレクション.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定したパターンに一致するファイルがない場合は、空のコレクションが返されます。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.FindInFiles` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ディレクトリ固有の文字列を含むファイルを検索します。|[チュートリアル : Visual Basic によるファイルとディレクトリの操作](http://msdn.microsoft.com/ja-jp/cae77565-9f78-4e46-8e42-eb2f9f8e1ffd)|  
  
   
  
## 例  
 次の例は、ディレクトリを検索 `C:\TestDir` で文字列を含むファイルを `"sample string"` に結果を表示および `ListBox1`です。  
  
 [!code-vb[VbRefFile\#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#12)]  
  
 を操作するのには、プロジェクト、 `ListBox` という `ListBox1`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる <c>\\.\</c>\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定したディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">指定したディレクトリは、既存のファイルを指します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">指定したディレクトリ パスでは、コロン \(:\) が含まれていますか、無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altCompliant cref="None." />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">名前とディレクトリのパス。</param>
        <summary>ディレクトリ内にあるサブディレクトリのパス名を表す文字列のコレクションを返します。</summary>
        <returns>指定したディレクトリのサブディレクトリのパス名の読み取り専用コレクション.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.GetDirectories` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|サブディレクトリを検索する特定のパターン|[方法: 特定のパターンに一致するサブディレクトリを検索する \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/c9265fd1-7483-4150-8b7f-ff642caa939d)|  
  
   
  
## 例  
 次の例では、すべてのディレクトリを返して、単語を含むディレクトリ構造に `Logs` 、名前にし、追加する `ListBox1`です。  
  
 [!code-vb[VbRefFile\#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 この例では、あることが必要です、 `ListBox` という `ListBox1` をフォームにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定したディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">指定したディレクトリは、既存のファイルを指します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altCompliant cref="None." />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetDirectories">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetDirectories (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetDirectories(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">名前とディレクトリのパス。</param>
        <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
        <param name="wildcards">名前と一致するパターン。</param>
        <summary>ディレクトリ内にあるサブディレクトリのパス名を表す文字列のコレクションを返します。</summary>
        <returns>指定したディレクトリのサブディレクトリのパス名の読み取り専用のコレクションです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 `wildcards` パラメーターを特定のパターンを指定します。 検索にサブディレクトリの内容を含める場合は、設定、 `searchType` パラメーターを `SearchAllSubDirectories`します。  
  
 指定したパターンに一致するディレクトリが見つからない場合は、空のコレクションが返されます。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.GetDirectories` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|サブディレクトリを検索する特定のパターン|[方法: 特定のパターンに一致するサブディレクトリを検索する \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/c9265fd1-7483-4150-8b7f-ff642caa939d)|  
  
   
  
## 例  
 次の例では、すべてのディレクトリを返して、単語を含むディレクトリ構造に `Logs` 、名前にし、追加する `ListBox1`です。  
  
 [!code-vb[VbRefFile\#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#10)]  
  
 この例では、あることが必要です、 `ListBox` という `ListBox1` をフォームにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">指定したワイルドカード文字の 1 つ以上が <see langword="Nothing" />, 、空の文字列または空白だけが含まれています。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定したディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">指定したディレクトリは、既存のファイルを指します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altCompliant cref="None." />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryInfo">
      <MemberSignature Language="C#" Value="public static System.IO.DirectoryInfo GetDirectoryInfo (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.DirectoryInfo GetDirectoryInfo(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DirectoryInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">
          <see langword="String" />。 ディレクトリのパス。</param>
        <summary>返します。、 <see cref="T:System.IO.DirectoryInfo" /> 指定されたパスのオブジェクト。</summary>
        <returns>
          <see cref="T:System.IO.DirectoryInfo" /> 指定したパスのオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ディレクトリが存在しない場合、例外はスローされませんが、一度プロパティ、 <xref:System.IO.DirectoryInfo> オブジェクトにアクセスします。  
  
   
  
## 例  
 この例では取得、 <xref:System.IO.DirectoryInfo> ディレクトリのオブジェクト `C:\Documents and Settings` とディレクトリの作成時、最終アクセス時刻、および最終書き込み時刻を表示します。  
  
 [!code-vb[VbRefFile\#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">ディレクトリ パスでは、コロン \(:\) が含まれていますか、無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーは、パスを表示するために必要な権限を持っていません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.IO.DirectoryInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetDriveInfo">
      <MemberSignature Language="C#" Value="public static System.IO.DriveInfo GetDriveInfo (string drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.DriveInfo GetDriveInfo(string drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.DriveInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="drive">調査するドライブです。</param>
        <summary>返します。、 <see cref="T:System.IO.DriveInfo" /> 指定したドライブのオブジェクト。</summary>
        <returns>
          <see cref="T:System.IO.DriveInfo" /> 指定したドライブを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.DriveInfo> クラスは、ドライブをモデル化し、ドライブ情報を照会するメソッドとプロパティを提供します。 使用 <xref:System.IO.DriveInfo> どのドライブがあるし、はドライブの種類を特定します。 容量と、ドライブの空き領域を決定するプロパティをクエリすることもできます。  
  
   
  
## 例  
 この例では取得、 <xref:System.IO.DriveInfo> C ドライブのオブジェクト、ドライブに関する情報を表示するこれを使用しています。  
  
 [!code-vb[VbRefFile\#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#11)]  
  
 別のドライブの種類については、次を参照してください。 <xref:System.IO.DriveType>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="drive" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーは、パスを表示するために必要な権限を持っていません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.IO.DriveInfo" />
        <altmember cref="T:System.IO.DriveType" />
      </Docs>
    </Member>
    <Member MemberName="GetFileInfo">
      <MemberSignature Language="C#" Value="public static System.IO.FileInfo GetFileInfo (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.FileInfo GetFileInfo(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">名前とファイルのパス。</param>
        <summary>返します。、 <see cref="T:System.IO.FileInfo" /> 指定したファイルのオブジェクト。</summary>
        <returns>
          <see cref="T:System.IO.FileInfo" /> 指定したファイルのオブジェクト</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ファイルが存在しない場合、例外がスローされません。代わりに、スローされる初めて、オブジェクトのプロパティにアクセスします。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.GetFileInfo` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ファイルの名前とパスを決定します。|[方法 : Visual Basic でファイル パスを解析する](http://msdn.microsoft.com/ja-jp/c1bd99c9-8160-456a-b5ab-60a49139b923)|  
  
   
  
## 例  
 この例では、 <xref:System.IO.FileInfo?displayProperty=fullName> オブジェクト ファイルの `MyLogFile.log` され、ファイルの完全名、最終アクセス時刻、および長さを報告するために使用します。  
  
 [!code-vb[VbRefFile\#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パス名が不適切である場合。 たとえば、無効な文字が含まれています。 または空白だけがします。 ファイル名は、末尾のスラッシュ記号です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.NotSupportedException">パスには、文字列の途中で、コロンが含まれています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスが長すぎます。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーは、ファイルに ACL \(アクセス制御リスト\) のアクセス権がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.IO.FileInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">検索するディレクトリ。</param>
        <summary>ディレクトリ内のファイルの名前を表す文字列の読み取り専用コレクションを返します。</summary>
        <returns>指定したディレクトリからファイル名の読み取り専用のコレクションです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定したパターンに一致するファイルがない場合は、空のコレクションが返されます。  
  
 次の表に、関連するタスクの例については、 `My.Computer.FileSystem.GetFiles` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ディレクトリ内のファイルのコレクションを取得します。|[方法: Visual Basic でディレクトリにあるファイルのコレクションを取得する](http://msdn.microsoft.com/ja-jp/6c8ba7e8-dd37-4853-92bf-762b67c98160)|  
|ディレクトリにファイルを特定のパターンを検索します。|[方法: 特定のパターンに一致するファイルを検索する \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/25e3b71d-b844-4293-9e4e-f06c5836b5cc)|  
  
   
  
## 例  
 次の例では、ディレクトリ内のすべてのファイルが返され、 `ListBox1` に追加されます。  
  
 [!code-vb[VbRefFile\#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 この例では、あることが必要です、 `ListBox` という `ListBox1` をフォームにします。  
  
 この例では、すべてのファイルを返し、拡張機能を使用してディレクトリに `.txt` されに追加 `ListBox1`します。  
  
 [!code-vb[VbRefFile\#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 この例では、あることが必要です、 `ListBox` という `ListBox1` をフォームにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">検索するディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="directory" /> 既存のファイルへのポインター。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altCompliant cref="None." />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; GetFiles (string directory, Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; GetFiles(string directory, valuetype Microsoft.VisualBasic.FileIO.SearchOption searchType, string[] wildcards) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="searchType" Type="Microsoft.VisualBasic.FileIO.SearchOption" />
        <Parameter Name="wildcards" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directory">検索するディレクトリ。</param>
        <param name="searchType">サブフォルダーを含めるかどうか。 既定値は <see langword="SearchOption.SearchTopLevelOnly" /> です。</param>
        <param name="wildcards">照合するパターン。</param>
        <summary>ディレクトリ内のファイルの名前を表す文字列の読み取り専用コレクションを返します。</summary>
        <returns>指定したディレクトリからファイル名の読み取り専用のコレクションです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定したパターンに一致するファイルがない場合は、空のコレクションが返されます。  
  
 次の表に、関連するタスクの例については、 `My.Computer.FileSystem.GetFiles` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ディレクトリ内のファイルのコレクションを取得します。|[方法: Visual Basic でディレクトリにあるファイルのコレクションを取得する](http://msdn.microsoft.com/ja-jp/6c8ba7e8-dd37-4853-92bf-762b67c98160)|  
|ディレクトリにファイルを特定のパターンを検索します。|[方法: 特定のパターンに一致するファイルを検索する \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/25e3b71d-b844-4293-9e4e-f06c5836b5cc)|  
  
   
  
## 例  
 次の例では、ディレクトリ内のすべてのファイルが返され、 `ListBox1` に追加されます。  
  
 [!code-vb[VbRefFile\#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#5)]  
  
 この例では、あることが必要です、 `ListBox` という `ListBox1` をフォームにします。  
  
 この例では、すべてのファイルを返し、拡張機能を使用してディレクトリに `.txt` されに追加 `ListBox1`します。  
  
 [!code-vb[VbRefFile\#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#6)]  
  
 この例では、あることが必要です、 `ListBox` という `ListBox1` をフォームにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">検索するディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="directory" /> 既存のファイルへのポインター。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altCompliant cref="None." />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.SearchOption" />
        <altmember cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public static string GetName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetName(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">必須です。 解析するパス。<see langword="String" />。</param>
        <summary>指定されたパスからファイル名を解析します。</summary>
        <returns>指定されたパスからファイル名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、文字列操作です。 `FileSystem` は説明しません。  
  
 `GetName` メソッドは、パスの末尾にスラッシュ記号を無視します。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.GetFileName` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ファイル パスを解析します。|[方法 : Visual Basic でファイル パスを解析する](http://msdn.microsoft.com/ja-jp/c1bd99c9-8160-456a-b5ab-60a49139b923)|  
  
   
  
## 例  
 次の例では、ファイルのパスを解析し、ファイルの名前を返します。  
  
 [!code-vb[VbVbcnMyFileSystem\#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#21)]  
  
 パスを置き換える `C:\Testdirectory\Testfile` を解析するパスを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParentPath">
      <MemberSignature Language="C#" Value="public static string GetParentPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetParentPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">調査するパス。</param>
        <summary>指定したパスの親パスを返します。</summary>
        <returns>指定したパスの親パス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、文字列操作です。ファイル システムがチェックされません。  
  
   
  
## 例  
 この例の親パスを取得する `C:\Backups\Tmp\Test`です。  
  
 [!code-vb[VbRefFile\#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ルート パスであるために、パスは、親パスがありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public static string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string GetTempFileName() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ディスクの一意の名前付き 0 バイトの一時ファイルを作成してそのファイルの完全なパスを返します。</summary>
        <returns>
          <see langword="String" /> 一時ファイルの完全なパスを含むです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、一時ファイルの作成に使用できます。  
  
   
  
## 例  
 この例では、一時ファイルを作成し、そのパスを返します。  
  
 [!code-vb[VbVbcnMyFileSystem\#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">移動元のディレクトリのパスです。</param>
        <param name="destinationDirectoryName">ソース ディレクトリの移動先ディレクトリのパス。</param>
        <summary>1 つの場所から別のディレクトリに移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 存在しないディレクトリ内のディレクトリに移動しようとすると、対象の構造が作成されます。  
  
   
  
## 例  
 この例では移動 `Directory1` 内 `Directory2`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 この例では移動 `Directory1` 内 `Directory2`, 、既に存在する場合は、ディレクトリを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem\#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> は <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ソースがルート ディレクトリまたはソース パスと、対象のパスが同じです。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">この操作は、循環型です。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory" />
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">移動元のディレクトリのパスです。</param>
        <param name="destinationDirectoryName">ソース ディレクトリの移動先ディレクトリのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <summary>1 つの場所から別のディレクトリに移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 存在しないディレクトリ内のディレクトリに移動しようとすると、対象の構造が作成されます。  
  
   
  
## 例  
 この例では移動 `Directory1` 内 `Directory2`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 この例では移動 `Directory1` 内 `Directory2`, 、既に存在する場合は、ディレクトリを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem\#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> は <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">コピー先のディレクトリが既に存在して o<paramref name="verwrite" /> に設定されている <see langword="False" />します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">この操作は、循環型です。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">移動元のディレクトリのパスです。</param>
        <param name="destinationDirectoryName">ソース ディレクトリの移動先ディレクトリのパス。</param>
        <param name="overwrite">
          <see langword="True" /> 既存のディレクトリを上書きする場合それ以外の場合 <see langword="False" />します。 既定値は <see langword="False" /> です。</param>
        <summary>1 つの場所から別のディレクトリに移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 存在しないディレクトリ内のディレクトリに移動しようとすると、対象の構造が作成されます。  
  
   
  
## 例  
 この例では移動 `Directory1` 内 `Directory2`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 この例では移動 `Directory1` 内 `Directory2`, 、既に存在する場合は、ディレクトリを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem\#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> は <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">コピー先のディレクトリが既に存在して o<paramref name="verwrite" /> に設定されている <see langword="False" />します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">この操作は、循環型です。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory" />
      </Docs>
    </Member>
    <Member MemberName="MoveDirectory">
      <MemberSignature Language="C#" Value="public static void MoveDirectory (string sourceDirectoryName, string destinationDirectoryName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceDirectoryName" Type="System.String" />
        <Parameter Name="destinationDirectoryName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceDirectoryName">移動元のディレクトリのパスです。</param>
        <param name="destinationDirectoryName">ソース ディレクトリの移動先ディレクトリのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="onUserCancel">ユーザーが操作をキャンセルしたときに、例外がスローされるかどうかを指定します。 既定値は <see langword="UICancelOption.ThrowException" /> です。</param>
        <summary>1 つの場所から別のディレクトリに移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 存在しないディレクトリ内のディレクトリに移動しようとすると、対象の構造が作成されます。  
  
   
  
## 例  
 この例では移動 `Directory1` 内 `Directory2`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#81](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#81)]  
  
 この例では移動 `Directory1` 内 `Directory2`, 、既に存在する場合は、ディレクトリを上書きします。  
  
 [!code-vb[VbVbcnMyFileSystem\#82](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceDirectoryName" /> または <paramref name="destinationDirectoryName" /> は <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="onUserCancel" /> 設定されている <see langword="ThrowException" /> とファイルのサブディレクトリをコピーすることはできません。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="onUserCancel" /> 設定されている <see langword="ThrowException" />, 、操作をキャンセルしたり、操作を完了することはできません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">この操作は、循環型です。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public static void MoveFile (string sourceFileName, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveFile(string sourceFileName, string destinationFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">移動するファイルのパスです。</param>
        <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
        <summary>ファイルを新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象になる構造が存在しない場合は作成されます。  
  
 `MoveFile` メソッドには、同じボリューム内のファイルを移動するとき、のみ \(アクセス制御エントリ\) の Ace が保持されます。 これには、継承された Ace には、直接 Ace \(直接 Ace が優先継承された Ace\) を移動したときになりますが含まれます。 ファイルをボリューム間で移動すると、Ace はコピーされません。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.MoveFile` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ファイルを移動します。|[方法: ファイルを移動する \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/53a7457b-5815-41ad-b37d-28537c1fb77a)|  
  
   
  
## 例  
 この例は、ファイルを移動 `Test.txt` から `TestDir1` に `TestDir2`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 この例は、ファイルを移動 `Test.txt` から `TestDir1` に `TestDir2` よ `Test2.txt`です。  
  
 [!code-vb[VbVbcnMyFileSystem\#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。末尾のスラッシュを終了します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルは、正しくないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">ファイルが別のプロセスで使用または I\/O エラーが発生します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Controls the ability to access all environment variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Controls the ability to access registry variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public static void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">移動するファイルのパスです。</param>
        <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <summary>ファイルを新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象になる構造が存在しない場合は作成されます。  
  
 `MoveFile` メソッドには、同じボリューム内のファイルを移動するとき、のみ \(アクセス制御エントリ\) の Ace が保持されます。 これには、継承された Ace には、直接 Ace \(直接 Ace が優先継承された Ace\) を移動したときになりますが含まれます。 ファイルをボリューム間で移動すると、Ace はコピーされません。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.MoveFile` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ファイルを移動します。|[方法: ファイルを移動する \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/53a7457b-5815-41ad-b37d-28537c1fb77a)|  
  
   
  
## 例  
 この例は、ファイルを移動 `Test.txt` から `TestDir1` に `TestDir2`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 この例は、ファイルを移動 `Test.txt` から `TestDir1` に `TestDir2` よ `Test2.txt`です。  
  
 [!code-vb[VbVbcnMyFileSystem\#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。末尾のスラッシュを終了します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルは、正しくないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">ファイルが別のプロセスで使用または I\/O エラーが発生します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Controls the ability to access all environment variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Controls the ability to access registry variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public static void MoveFile (string sourceFileName, string destinationFileName, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveFile(string sourceFileName, string destinationFileName, bool overwrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">移動するファイルのパスです。</param>
        <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
        <param name="overwrite">
          <see langword="True" /> 既存のファイルを上書きするにはそれ以外の場合 <see langword="False" />します。 既定値は <see langword="False" /> です。</param>
        <summary>ファイルを新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象になる構造が存在しない場合は作成されます。  
  
 `MoveFile` メソッドには、同じボリューム内のファイルを移動するとき、のみ \(アクセス制御エントリ\) の Ace が保持されます。 これには、継承された Ace には、直接 Ace \(直接 Ace が優先継承された Ace\) を移動したときになりますが含まれます。 ファイルをボリューム間で移動すると、Ace はコピーされません。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.MoveFile` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ファイルを移動します。|[方法: ファイルを移動する \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/53a7457b-5815-41ad-b37d-28537c1fb77a)|  
  
   
  
## 例  
 この例は、ファイルを移動 `Test.txt` から `TestDir1` に `TestDir2`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 この例は、ファイルを移動 `Test.txt` から `TestDir1` に `TestDir2` よ `Test2.txt`です。  
  
 [!code-vb[VbVbcnMyFileSystem\#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。末尾のスラッシュを終了します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルは、正しくないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">ファイルが別のプロセスで使用または I\/O エラーが発生します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Controls the ability to access all environment variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Controls the ability to access registry variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="MoveFile">
      <MemberSignature Language="C#" Value="public static void MoveFile (string sourceFileName, string destinationFileName, Microsoft.VisualBasic.FileIO.UIOption showUI, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MoveFile(string sourceFileName, string destinationFileName, valuetype Microsoft.VisualBasic.FileIO.UIOption showUI, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="showUI" Type="Microsoft.VisualBasic.FileIO.UIOption" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">移動するファイルのパスです。</param>
        <param name="destinationFileName">ファイルの移動先となるディレクトリのパス。</param>
        <param name="showUI">操作の進行状況を視覚的に追跡するかどうかを指定します。 既定値は <see langword="UIOption.OnlyErrorDialogs" /> です。</param>
        <param name="onUserCancel">ユーザーが操作をキャンセルしたときに、例外がスローされるかどうかを指定します。 既定値は <see langword="UICancelOption.ThrowException" /> です。</param>
        <summary>ファイルを新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象になる構造が存在しない場合は作成されます。  
  
 `MoveFile` メソッドには、同じボリューム内のファイルを移動するとき、のみ \(アクセス制御エントリ\) の Ace が保持されます。 これには、継承された Ace には、直接 Ace \(直接 Ace が優先継承された Ace\) を移動したときになりますが含まれます。 ファイルをボリューム間で移動すると、Ace はコピーされません。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.MoveFile` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ファイルを移動します。|[方法: ファイルを移動する \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/53a7457b-5815-41ad-b37d-28537c1fb77a)|  
  
   
  
## 例  
 この例は、ファイルを移動 `Test.txt` から `TestDir1` に `TestDir2`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#86](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#86)]  
  
 この例は、ファイルを移動 `Test.txt` から `TestDir1` に `TestDir2` よ `Test2.txt`です。  
  
 [!code-vb[VbVbcnMyFileSystem\#87](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。末尾のスラッシュを終了します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationFileName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ソース ファイルは、正しくないか、存在しません。</exception>
        <exception cref="T:System.IO.IOException">ファイルが別のプロセスで使用または I\/O エラーが発生します。</exception>
        <exception cref="T:System.OperationCanceledException">
          <paramref name="onUserCancel" /> 設定されている <see langword="ThrowException" />, 、し、ユーザー操作は取り消されましたか特定できない I\/O エラーが発生します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Controls the ability to access all environment variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Controls the ability to access registry variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UIOption" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">開かれているファイル、 <see langword="TextFieldParser" />です。</param>
        <summary>
          <see langword="OpenTextFieldParser" /> メソッドでは、作成することができます、 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを簡単かつ効率的には、ログなどの構造化テキスト ファイルを解析する方法を提供します。<see langword="TextFieldParser" /> オブジェクトは、区切り文字および固定長のファイルの読み取りに使用できます。</summary>
        <returns>
          <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 指定したファイルを読み取れませんでした。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表に、関連するタスクの例については、 `My.Computer.FileSystem.OpenTextFieldParser` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|区切り記号付きテキスト ファイルからの読み取り|[方法 : Visual Basic でコンマ区切りのテキスト ファイルを読み取る](http://msdn.microsoft.com/ja-jp/a8413fe4-0dba-49c8-8692-44fb67a9ec4f)|  
|固定幅のテキスト ファイルからの読み取り|[方法 : Visual Basic で固定幅のテキスト ファイルを読み取る](http://msdn.microsoft.com/ja-jp/99be5692-967a-4e85-993e-cd18139a5a69)|  
|複数の形式でテキスト ファイルから読み込む|[方法 : Visual Basic で複数の書式を持つテキスト ファイルを読み取る](http://msdn.microsoft.com/ja-jp/8d185eb2-79ca-42cd-95a7-d3ff44a5a0f8)|  
  
   
  
## 例  
 この例を開いて、 `TextFieldParser``reader` オブジェクトからの読み取りを使用して `C:\TestFolder1\Test1.txt`します。  
  
 [!code-vb[VbRefFile\#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。末尾のスラッシュを終了します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ファイルが別のプロセスで使用または I\/O エラーが発生します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定された形式を使用して、行を解析できません。 例外メッセージ行を指定するときに、例外が原因となった、 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> プロパティには、行に含まれるテキストが割り当てられます。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Describes a set of security permissions applied to code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.Int32[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">開かれているファイル、 <see langword="TextFieldParser" />です。</param>
        <param name="fieldWidths">フィールドの幅。</param>
        <summary>
          <see langword="OpenTextFieldParser" /> メソッドでは、作成することができます、 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを簡単かつ効率的には、ログなどの構造化テキスト ファイルを解析する方法を提供します。<see langword="TextFieldParser" /> オブジェクトは、区切り文字および固定長のファイルの読み取りに使用できます。</summary>
        <returns>
          <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 指定したファイルを読み取れませんでした。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表に、関連するタスクの例については、 `My.Computer.FileSystem.OpenTextFieldParser` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|区切り記号付きテキスト ファイルからの読み取り|[方法 : Visual Basic でコンマ区切りのテキスト ファイルを読み取る](http://msdn.microsoft.com/ja-jp/a8413fe4-0dba-49c8-8692-44fb67a9ec4f)|  
|固定幅のテキスト ファイルからの読み取り|[方法 : Visual Basic で固定幅のテキスト ファイルを読み取る](http://msdn.microsoft.com/ja-jp/99be5692-967a-4e85-993e-cd18139a5a69)|  
|複数の形式でテキスト ファイルから読み込む|[方法 : Visual Basic で複数の書式を持つテキスト ファイルを読み取る](http://msdn.microsoft.com/ja-jp/8d185eb2-79ca-42cd-95a7-d3ff44a5a0f8)|  
  
   
  
## 例  
 この例を開いて、 `TextFieldParser``reader` オブジェクトからの読み取りを使用して `C:\TestFolder1\Test1.txt`します。  
  
 [!code-vb[VbRefFile\#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。末尾のスラッシュを終了します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ファイルが別のプロセスで使用または I\/O エラーが発生します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定された形式を使用して、行を解析できません。 例外メッセージ行を指定するときに、例外が原因となった、 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> プロパティには、行に含まれるテキストが割り当てられます。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Describes a set of security permissions applied to code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFieldParser">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser (string file, string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.FileIO.TextFieldParser OpenTextFieldParser(string file, string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.TextFieldParser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="file">開かれているファイル、 <see langword="TextFieldParser" />です。</param>
        <param name="delimiters">フィールドの区切り記号。</param>
        <summary>
          <see langword="OpenTextFieldParser" /> メソッドでは、作成することができます、 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを簡単かつ効率的には、ログなどの構造化テキスト ファイルを解析する方法を提供します。<see langword="TextFieldParser" /> オブジェクトは、区切り文字および固定長のファイルの読み取りに使用できます。</summary>
        <returns>
          <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> 指定したファイルを読み取れませんでした。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表に、関連するタスクの例については、 `My.Computer.FileSystem.OpenTextFieldParser` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|区切り記号付きテキスト ファイルからの読み取り|[方法 : Visual Basic でコンマ区切りのテキスト ファイルを読み取る](http://msdn.microsoft.com/ja-jp/a8413fe4-0dba-49c8-8692-44fb67a9ec4f)|  
|固定幅のテキスト ファイルからの読み取り|[方法 : Visual Basic で固定幅のテキスト ファイルを読み取る](http://msdn.microsoft.com/ja-jp/99be5692-967a-4e85-993e-cd18139a5a69)|  
|複数の形式でテキスト ファイルから読み込む|[方法 : Visual Basic で複数の書式を持つテキスト ファイルを読み取る](http://msdn.microsoft.com/ja-jp/8d185eb2-79ca-42cd-95a7-d3ff44a5a0f8)|  
  
   
  
## 例  
 この例を開いて、 `TextFieldParser``reader` オブジェクトからの読み取りを使用して `C:\TestFolder1\Test1.txt`します。  
  
 [!code-vb[VbRefFile\#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。末尾のスラッシュを終了します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ファイルが別のプロセスで使用または I\/O エラーが発生します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定された形式を使用して、行を解析できません。 例外メッセージ行を指定するときに、例外が原因となった、 <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" /> プロパティには、行に含まれるテキストが割り当てられます。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Describes a set of security permissions applied to code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader OpenTextFileReader (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.StreamReader OpenTextFileReader(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">読み取るファイルです。</param>
        <summary>開き、 <see cref="T:System.IO.StreamReader" /> 、ファイルを読み取るオブジェクトです。</summary>
        <returns>
          <see cref="T:System.IO.StreamReader" /> オブジェクトは、ファイルを読み取る</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト ファイルだけを読み取ることができます、 <xref:System.IO.StreamReader>です。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.OpenTextFileReader` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ファイルを開き、 <xref:System.IO.StreamReader>|[方法: StreamReader を使用してファイルからテキストを読み取る \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/384033c6-18f9-4d59-9610-36371226558f)|  
  
   
  
## 例  
 この例は、ファイルを開き `Testfile.txt`, から行を読み込み、および内の行が表示されます、 `MessageBox`です。  
  
 [!code-vb[VbRefFile\#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ファイル名は、円記号 \(\\\) で終了します。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定したファイルが見つかりません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、ファイルを読み取るために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileReader">
      <MemberSignature Language="C#" Value="public static System.IO.StreamReader OpenTextFileReader (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.StreamReader OpenTextFileReader(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String,System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">読み取るファイルです。</param>
        <param name="encoding">ファイルの内容を使用するエンコーディング。 既定値は ASCII です。</param>
        <summary>開き、 <see cref="T:System.IO.StreamReader" /> 、ファイルを読み取るオブジェクトです。</summary>
        <returns>
          <see cref="T:System.IO.StreamReader" /> オブジェクトは、ファイルを読み取る</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト ファイルだけを読み取ることができます、 <xref:System.IO.StreamReader>です。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.OpenTextFileReader` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ファイルを開き、 <xref:System.IO.StreamReader>|[方法: StreamReader を使用してファイルからテキストを読み取る \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/384033c6-18f9-4d59-9610-36371226558f)|  
  
   
  
## 例  
 この例は、ファイルを開き `Testfile.txt`, から行を読み込み、および内の行が表示されます、 `MessageBox`です。  
  
 [!code-vb[VbRefFile\#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ファイル名は、円記号 \(\\\) で終了します。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定したファイルが見つかりません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、ファイルを読み取るために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamReader" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter OpenTextFileWriter (string file, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.StreamWriter OpenTextFileWriter(string file, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">書き込まれるファイルです。</param>
        <param name="append">
          <see langword="True" /> ファイルの内容に追加するには <see langword="False" /> ファイルの内容を上書きします。 既定値は <see langword="False" /> です。</param>
        <summary>開き、 <see cref="T:System.IO.StreamWriter" /> 、指定したファイルに書き込むオブジェクト。</summary>
        <returns>
          <see cref="T:System.IO.StreamWriter" /> 指定したファイルに書き込むオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `OpenTextFileWriter` メソッドを開きますとファイルのストリームを初期化し、戻ります、 <xref:System.IO.StreamWriter> そのストリーム オブジェクト。 必要な数だけストリームに書き込みできが完了したら、閉じます。  
  
> [!NOTE]
>  呼び出す必要があります、 <xref:System.IO.StreamWriter.Close%2A> メソッドを <xref:System.IO.StreamWriter> オブジェクトを基になるストリームに、すべてのデータを正しく書き込むことを確認します。  
  
 ファイルに、いくつかの文字列だけを作成している場合を使用する方が簡単あります、 <xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A> メソッドです。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.OpenTextFileWriter` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|テキストを持つファイルを書き込む、 `StreamWriter`|[方法: StreamWriter を使用してファイルにテキストを書き込む \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/99762e57-ef46-4dcc-8959-a8f79c22f067)|  
  
   
  
## 例  
 開く例を次、 <xref:System.IO.StreamWriter> で、 `My.Computer.FileSystem.OpenTextFileWriter` メソッドを持つテキスト ファイルに文字列を書き込むこれを使用して、 `WriteLine` のメソッド、 `StreamWriter` クラスです。  
  
 [!code-vb[VbRefFile\#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ファイル名は、末尾のスラッシュで終わります。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
      </Docs>
    </Member>
    <Member MemberName="OpenTextFileWriter">
      <MemberSignature Language="C#" Value="public static System.IO.StreamWriter OpenTextFileWriter (string file, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.IO.StreamWriter OpenTextFileWriter(string file, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">書き込まれるファイルです。</param>
        <param name="append">
          <see langword="True" /> ファイルの内容に追加するには <see langword="False" /> ファイルの内容を上書きします。 既定値は <see langword="False" /> です。</param>
        <param name="encoding">ファイルへの書き込みに使用するエンコーディング。 既定値は ASCII です。</param>
        <summary>開き、 <see cref="T:System.IO.StreamWriter" /> 指定したファイルに書き込む。</summary>
        <returns>
          <see cref="T:System.IO.StreamWriter" /> 指定したファイルに書き込むオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `OpenTextFileWriter` メソッドを開きますとファイルのストリームを初期化し、戻ります、 <xref:System.IO.StreamWriter> そのストリーム オブジェクト。 必要な数だけストリームに書き込みできが完了したら、閉じます。  
  
> [!NOTE]
>  呼び出す必要があります、 <xref:System.IO.StreamWriter.Close%2A> メソッドを <xref:System.IO.StreamWriter> オブジェクトを基になるストリームに、すべてのデータを正しく書き込むことを確認します。  
  
 ファイルに、いくつかの文字列だけを作成している場合を使用する方が簡単あります、 <xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A> メソッドです。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.OpenTextFileWriter` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|テキストを持つファイルを書き込む、 `StreamWriter`|[方法: StreamWriter を使用してファイルにテキストを書き込む \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/99762e57-ef46-4dcc-8959-a8f79c22f067)|  
  
   
  
## 例  
 開く例を次、 <xref:System.IO.StreamWriter> で、 `My.Computer.FileSystem.OpenTextFileWriter` メソッドを持つテキスト ファイルに文字列を書き込むこれを使用して、 `WriteLine` のメソッド、 `StreamWriter` クラスです。  
  
 [!code-vb[VbRefFile\#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ファイル名は、末尾のスラッシュで終わります。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.IO.StreamWriter" />
      </Docs>
    </Member>
    <Member MemberName="ReadAllBytes">
      <MemberSignature Language="C#" Value="public static byte[] ReadAllBytes (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static unsigned int8[] ReadAllBytes(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">読み取るファイルです。</param>
        <summary>ファイルの内容をバイト配列として返します。</summary>
        <returns>
          <see langword="Byte" /> ファイルの内容を含む配列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `ReadAllBytes` のメソッド、 `My.Computer.FileSystem` オブジェクトは、バイナリ ファイルから読み取ることができます。 ファイルの内容は、バイト配列として返されます。  
  
 ファイル名からファイルの内容を判断しないでください。 たとえば、Form1.vb というファイルは Visual Basic のソース ファイルではない可能性もあります。 アプリケーションでデータを使用する前に、入力をすべて検証してください。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.ReadAllBytes` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|バイナリ ファイルからの読み取り|[方法 : Visual Basic でバイナリ ファイルを読み取る](http://msdn.microsoft.com/ja-jp/d2b1269e-24b6-42e0-9414-ae708db282d8)|  
  
   
  
## 例  
 この例は、ファイルから読み取ります `C:/Documents and Settings/selfportrait.jpg.`  
  
 [!code-vb[VbVbcnMyFileSystem\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。末尾のスラッシュを終了します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ファイルが別のプロセスで使用または I\/O エラーが発生します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むのに十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public static string ReadAllText (string file);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ReadAllText(string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">名前と読み取るファイルのパス。</param>
        <summary>としてテキスト ファイルの内容を返す、 <see langword="String" />です。</summary>
        <returns>
          <see langword="String" /> ファイルの内容を含むです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `ReadAllText` オブジェクトの `My.Computer.FileSystem` メソッドを使用すると、テキスト ファイルを読み取ることができます。 ファイルの内容は、文字列として返されます。  
  
 ファイルのエンコーディングは、ファイルの内容が ASCII や utf\-8 などのエンコーディングのかを指定します。 拡張文字を含むファイルから読み取る場合は、別のオーバー ロードを使用してファイルのエンコーディングを指定する必要があります。、 <xref:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText%2A> メソッドです。  
  
 ファイル名からファイルの内容を判断しないでください。 たとえば、Form1.vb というファイルは Visual Basic のソース ファイルではない可能性もあります。 アプリケーションでデータを使用する前に、入力をすべて検証してください。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.ReadAllText` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|テキスト ファイルからの読み取り|[方法: テキスト ファイルからデータを読み取る \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/735fe9d7-0f7a-4185-ba02-f35e580ec4b8)|  
  
   
  
## 例  
 この例の内容を読み取ります `Test.txt` を文字列にし、メッセージ ボックスに表示します。  
  
 [!code-vb[VbRefFile\#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 この例は、ASCII ファイルの内容を読み取ります `Test.txt` を文字列にし、メッセージ ボックスに表示します。  
  
 [!code-vb[VbRefFile\#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。末尾のスラッシュを終了します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ファイルが別のプロセスで使用または I\/O エラーが発生します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むのに十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
      </Docs>
    </Member>
    <Member MemberName="ReadAllText">
      <MemberSignature Language="C#" Value="public static string ReadAllText (string file, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ReadAllText(string file, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String,System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">名前と読み取るファイルのパス。</param>
        <param name="encoding">ファイルの読み込み時に使用する文字エンコーディングします。 既定値は utf\-8 です。</param>
        <summary>としてテキスト ファイルの内容を返す、 <see langword="String" />です。</summary>
        <returns>
          <see langword="String" /> ファイルの内容を含むです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `ReadAllText` オブジェクトの `My.Computer.FileSystem` メソッドを使用すると、テキスト ファイルを読み取ることができます。 ファイルの内容は、文字列として返されます。  
  
 ファイルのエンコーディングは、ファイルの内容が ASCII や utf\-8 などのエンコーディングのかを指定します。 拡張文字を含むファイルから読み取る場合は、ファイルのエンコーディングを指定する必要があります。  
  
 ファイル名からファイルの内容を判断しないでください。 たとえば、Form1.vb というファイルは Visual Basic のソース ファイルではない可能性もあります。 アプリケーションでデータを使用する前に、入力をすべて検証してください。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.ReadAllText` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|テキスト ファイルからの読み取り|[方法: テキスト ファイルからデータを読み取る \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/735fe9d7-0f7a-4185-ba02-f35e580ec4b8)|  
  
   
  
## 例  
 この例の内容を読み取ります `Test.txt` を文字列にし、メッセージ ボックスに表示します。  
  
 [!code-vb[VbRefFile\#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#8)]  
  
 この例は、ASCII ファイルの内容を読み取ります `Test.txt` を文字列にし、メッセージ ボックスに表示します。  
  
 [!code-vb[VbRefFile\#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。末尾のスラッシュを終了します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ファイルが別のプロセスで使用または I\/O エラーが発生します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むのに十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)" />
      </Docs>
    </Member>
    <Member MemberName="RenameDirectory">
      <MemberSignature Language="C#" Value="public static void RenameDirectory (string directory, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RenameDirectory(string directory, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">パスと名前を変更するディレクトリの名前。</param>
        <param name="newName">ディレクトリの新しい名前。</param>
        <summary>ディレクトリの名前を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ディレクトリを移動を使用することはできません。使用して、 `MoveDirectory` を移動して、ディレクトリの名前を変更します。  
  
   
  
## 例  
 この例の名前を変更、 `Test` ディレクトリを `SecondTest`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="newName" /> パス情報が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="directory" /> は <see langword="Nothing" /> です。  
  
 または  
  
 <paramref name="newName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">既存のファイルまたはで指定された名前のディレクトリがある <paramref name="newName" />です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは 248 文字を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory" />
      </Docs>
    </Member>
    <Member MemberName="RenameFile">
      <MemberSignature Language="C#" Value="public static void RenameFile (string file, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RenameFile(string file, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameFile(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="file">名前を変更するファイルです。</param>
        <param name="newName">ファイルの新しい名前。</param>
        <summary>ファイルの名前を変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ファイルを移動を使用することはできません。使用して、 <xref:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile%2A> メソッドに移動し、ファイルの名前を変更します。  
  
 次の表に、関連するタスクの例、 `My.Computer.FileSystem.RenameFile` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|ファイル名の変更します。|[方法 : Visual Basic でファイルの名前を変更する](http://msdn.microsoft.com/ja-jp/0ea7e0c8-2cb2-4bf5-a00d-7b6e3c08a3bc)|  
  
   
  
## 例  
 この例の名前が変更 `Test.txt` に `SecondTest.txt`します。  
  
 [!code-vb[VbVbcnMyFileSystem\#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#1)]  
  
 変更"`C:\Test.txt`"名前を変更するファイルのパスとファイル名にします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="newName" /> パス情報を格納または円記号 \(\\\) で終わります。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" /> です。  
  
 または  
  
 <paramref name="newName" /> が <see langword="Nothing" /> または空の文字列です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ディレクトリが存在しません。</exception>
        <exception cref="T:System.IO.IOException">既存のファイルまたはで指定された名前のディレクトリがある <paramref name="newName" />です。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <exception cref="T:System.UnauthorizedAccessException">ユーザーには、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllBytes">
      <MemberSignature Language="C#" Value="public static void WriteAllBytes (string file, byte[] data, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteAllBytes(string file, unsigned int8[] data, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes(System.String,System.Byte[],System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">パスと名前に書き込まれるファイル。</param>
        <param name="data">ファイルに書き込まれるデータ。</param>
        <param name="append">
          <see langword="True" />ファイルの内容に追加するには<see langword="False" />ファイルの内容を上書きします。 既定値は <see langword="False" /> です。</param>
        <summary>バイナリ ファイルにデータを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ファイル名を除く、指定されたパスが有効でない場合、[WriteAllBytes メソッド \(String, Byte\<xref:System.IO.DirectoryNotFoundException>例外がスローされます。 パスが有効では、ファイルが存在しない場合、ファイルが作成されます。  
  
> [!NOTE]
>  `WriteAllBytes`メソッドは、ファイルを開き、による書き込みが、それを閉じます。 使用するコード、`WriteAllBytes`メソッドにコードを使用するよりも簡単です、[WriteAllBytes メソッド \(String, Byte\<xref:System.IO.BinaryWriter>オブジェクト。 ただし、ループを使用してファイルにデータを追加する場合、[WriteAllBytes メソッド \(String, Byte\<xref:System.IO.BinaryWriter>のみファイルを 1 回開閉する必要があるために、オブジェクトは優れたパフォーマンスを実現できます。  
  
 次の表に、関連するタスクの例、`My.Computer.FileSystem.WriteAllBytes`メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|バイナリ ファイルへの書き込み|[方法 : Visual Basic でバイナリ ファイルに書き込む](http://msdn.microsoft.com/ja-jp/59fae125-de5b-4c96-883c-209f4a55112c)|  
  
   
  
## 例  
 次の例は、データの配列を追加 `CustomerData` ファイルに `CollectedData`です。  
  
 [!code-vb[VbVbcnMyFileSystem\#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnMyFileSystem/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない、次の理由のいずれかの: は長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。これは、末尾のスラッシュで終わります。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ファイルは別のプロセスによって使用されています。 または、I\/O エラーが発生します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パスのファイルまたはディレクトリ名は、コロン \(:\) が含まれています。 または形式が無効です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むのに十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public static void WriteAllText (string file, string text, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteAllText(string file, string text, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="file">書き込まれるファイルです。</param>
        <param name="text">テキスト ファイルに書き込まれます。</param>
        <param name="append">
          <see langword="True" /> ファイルの内容に追加するには <see langword="False" /> ファイルの内容を上書きします。</param>
        <summary>テキストをファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Utf\-8 エンコーディングは、ファイルへの書き込みに使用されます。 別のエンコーディングを指定するには、別のオーバー ロードを使用して、 <xref:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText%2A> メソッドです。  
  
 指定したファイルが存在しない場合は作成されます。  
  
 指定したエンコーディングが一致しない場合、ファイルの既存のエンコーディングを指定したコードは無視されます。  
  
> [!NOTE]
>  `WriteAllText` メソッドは、ファイルを開き、書き込み後閉じます。 使用するコード、 `WriteAllText` メソッドが使用するコードをより簡単、 <xref:System.IO.StreamWriter> オブジェクトです。 ただし、ループを使用して文字列をファイルに追加する場合、 <xref:System.IO.StreamWriter> を開いたり閉じたり、ファイルに 1 回だけで済むために、オブジェクトはパフォーマンスの向上を提供できます。 詳細については、<xref:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter%2A> メソッドを参照してください。  
  
 次の表に、関連するタスクの例については、 `My.Computer.FileSystem.WriteAllText` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|テキスト ファイルを書き込む|[方法: ファイルにテキストを書き込む \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/304956eb-530d-4df7-b48f-9b4d1f2581a0)|  
|ファイルへのテキストの追加|[方法 : Visual Basic でテキスト ファイルに追記する](http://msdn.microsoft.com/ja-jp/bbbd7fb5-f169-41a9-b53f-520ea9613913)|  
  
   
  
## 例  
 この例は、行を書き込む `"This is new text to be added."` ファイルに `Test.txt`, 、ファイルの既存のテキストを上書きします。  
  
 [!code-vb[VbRefFile\#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 この例でのファイルの名前、 `Documents and Settings` フォルダー `FileList.txt`, 、読みやすくするための各間を返す、改行を挿入します。  
  
 [!code-vb[VbRefFile\#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。末尾のスラッシュを終了します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ファイルが別のプロセスで使用または I\/O エラーが発生します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むのに十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText" />
      </Docs>
    </Member>
    <Member MemberName="WriteAllText">
      <MemberSignature Language="C#" Value="public static void WriteAllText (string file, string text, bool append, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteAllText(string file, string text, bool append, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="file">書き込まれるファイルです。</param>
        <param name="text">テキスト ファイルに書き込まれます。</param>
        <param name="append">
          <see langword="True" /> ファイルの内容に追加するには <see langword="False" /> ファイルの内容を上書きします。</param>
        <param name="encoding">ファイルに書き込んでいるときに使用するエンコーディングします。</param>
        <summary>テキストをファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定したファイルが存在しない場合は作成されます。  
  
 指定したエンコーディングが一致しない場合、ファイルの既存のエンコーディングを指定したコードは無視されます。  
  
> [!NOTE]
>  `WriteAllText` メソッドは、ファイルを開き、書き込み後閉じます。 使用するコード、 `WriteAllText` メソッドが使用するコードをより簡単、 <xref:System.IO.StreamWriter> オブジェクトです。 ただし、ループを使用して文字列をファイルに追加する場合、 <xref:System.IO.StreamWriter> を開いたり閉じたり、ファイルに 1 回だけで済むために、オブジェクトはパフォーマンスの向上を提供できます。 詳細については、<xref:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter%2A> メソッドを参照してください。  
  
 次の表に、関連するタスクの例については、 `My.Computer.FileSystem.WriteAllText` メソッドです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|テキスト ファイルを書き込む|[方法: ファイルにテキストを書き込む \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/304956eb-530d-4df7-b48f-9b4d1f2581a0)|  
|ファイルへのテキストの追加|[方法 : Visual Basic でテキスト ファイルに追記する](http://msdn.microsoft.com/ja-jp/bbbd7fb5-f169-41a9-b53f-520ea9613913)|  
  
   
  
## 例  
 この例は、行を書き込む `"This is new text to be added."` ファイルに `Test.txt`, 、ファイルの既存のテキストを上書きします。  
  
 [!code-vb[VbRefFile\#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#21)]  
  
 この例でのファイルの名前、 `Documents and Settings` フォルダー `FileList.txt`, 、読みやすくするための各間を返す、改行を挿入します。  
  
 [!code-vb[VbRefFile\#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbRefFile/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">パスが正しくない次の理由のいずれか: が長さ 0 の文字列です。空白のみが含まれています無効な文字が含まれていますデバイス パスであるか \(で始まる \\\\. \\\) です。末尾のスラッシュを終了します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="file" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが存在しません。</exception>
        <exception cref="T:System.IO.IOException">ファイルが別のプロセスで使用または I\/O エラーが発生します。</exception>
        <exception cref="T:System.IO.PathTooLongException">パスは、システム定義の最大長を超えています。</exception>
        <exception cref="T:System.NotSupportedException">パス内のファイルまたはディレクトリ名、コロン \(:\) が含まれています。 または無効な形式です。</exception>
        <exception cref="T:System.OutOfMemoryException">文字列をバッファーに書き込むのに十分なメモリがありません。</exception>
        <exception cref="T:System.Security.SecurityException">ユーザーには、パスを表示するために必要なアクセス許可が不足しています。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetDirectories">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリ内にあるサブディレクトリのパス名を表す文字列のコレクションを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>テキストをファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DeleteFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ファイルを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MoveDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>1 つの場所から別のディレクトリに移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OpenTextFileWriter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開き、 <see cref="T:System.IO.StreamWriter" /> 、指定したファイルに書き込むオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CopyFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しい場所にファイルをコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FindInFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したテキストを含むファイルの名前を表す文字列の読み取り専用コレクションを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリ内のファイルの名前を表す文字列の読み取り専用コレクションを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CopyDirectory">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ディレクトリの内容を別のディレクトリにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OpenTextFileReader">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開き、 <see cref="T:System.IO.StreamReader" /> 、ファイルを読み取るオブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MoveFile">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ファイルを新しい場所に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadAllText">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>としてテキスト ファイルの内容を返す、 <see langword="String" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OpenTextFieldParser">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see langword="OpenTextFieldParser" /> メソッドでは、作成することができます、 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトを簡単かつ効率的には、ログなどの構造化テキスト ファイルを解析する方法を提供します。<see langword="TextFieldParser" /> オブジェクトは、区切り文字および固定長のファイルの読み取りに使用できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>