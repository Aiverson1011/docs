<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>構造化テキスト ファイルの解析に使用するメソッドとプロパティを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 `TextFieldParser` オブジェクトは、メソッドを提供し、構造化テキスト ファイルを解析するためのプロパティです。 テキスト ファイルを解析する、 `TextFieldParser` テキスト ファイルを反復処理するような中に、 `ReadFields` テキストのフィールドを抽出する方法は、文字列を分割する操作に似ています。  
  
 `TextFieldParser` 2 種類のファイルを解析することができます: 区切られた形式か固定幅。 一部のプロパティなど `Delimiters` と `HasFieldsEnclosedInQuotes` はのみ意味のある区切り記号入りファイルを使用する場合は、while、 `FieldWidths` プロパティは、固定長ファイルを扱うときにのみ意味します。  
  
 次の表に、関連するタスクの例については、 `Microsoft.VisualBasic.FileIO.TextFieldParser` オブジェクトです。  
  
|目的|参照トピック|  
|--------|------------|  
|区切り記号付きテキスト ファイルからの読み取り|[How to: Read From a Comma\-Delimited Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/a8413fe4-0dba-49c8-8692-44fb67a9ec4f)|  
|固定幅のテキスト ファイルからの読み取り|[How to: Read From a Fixed\-width Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/99be5692-967a-4e85-993e-cd18139a5a69)|  
|複数の形式でテキスト ファイルから読み込む|[How to: Read From a Text File with Multiple Formats in Visual Basic](http://msdn.microsoft.com/ja-jp/8d185eb2-79ca-42cd-95a7-d3ff44a5a0f8)|  
  
   
  
## 例  
 この例をタブ区切りテキスト ファイルを使って解析 `Bigfile`します。  
  
 [!code-vb[VbVbalrTextFieldParser\#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />。 解析するストリーム。</param>
        <summary>
          <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しい `TextFieldParser` ファイルを解析またはストリームをオブジェクトとして表されます、 `stream` パラメーター。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> を読み取ることができません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.IO.TextReader" />。<see cref="T:System.IO.TextReader" /> 解析するストリーム。</param>
        <summary>
          <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しい `TextFieldParser` ファイルを解析またはストリームをオブジェクトとして表されます、 `reader` パラメーター。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> は <see langword="Nothing" /> です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <see langword="String" />。 解析するファイルの完全なパス。</param>
        <summary>
          <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新たに作成 `TextFieldParser` オブジェクトで指定されたファイルを解析する、 `path` パラメーター。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> が空の文字列です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />。 解析するストリーム。</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />。 エンコードする場合は、使用する文字エンコーディングはファイルからは決定されません。 既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</param>
        <summary>
          <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しい `TextFieldParser` ファイルを解析またはストリームをオブジェクトとして表されます、 `stream` パラメーター。  
  
> [!CAUTION]
>  特定のカルチャ設定を使用して文字のセットをコンパイルし、別のカルチャ設定で、同じ文字を取得するときに、文字は解釈されないことしがスローされる例外が発生する可能性があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> または <paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> を読み取ることができません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">
          <see langword="String" />。 解析するファイルの完全なパス。</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />。 エンコードする場合は、使用する文字エンコーディングはファイルからは決定されません。 既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</param>
        <summary>
          <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新たに作成 `TextFieldParser` オブジェクトで指定されたファイルを解析する、 `path` パラメーター。  
  
> [!CAUTION]
>  特定のカルチャ設定を使用して文字のセットをコンパイルし、別のカルチャ設定で、同じ文字を取得するときに、文字は解釈されないことしがスローされる例外が発生する可能性があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 空の文字列または <paramref name="defaultEncoding" /> は <see langword="Nothing" />です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />。 解析するストリーム。</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />。 エンコードする場合は、使用する文字エンコーディングはファイルからは決定されません。 既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</param>
        <param name="detectEncoding">
          <see langword="Boolean" />。 ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。 既定値は <see langword="True" /> です。</param>
        <summary>
          <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しい `TextFieldParser` ファイルを解析またはストリームをオブジェクトとして表されます、 `stream` パラメーター。  
  
 場合、 `detectEncoding` パラメーターは `True`, 、このコンス トラクターは、ファイルまたはストリームの最初の 3 バイトにエンコードの検出を試みます。 自動的に認識 utf\-8、リトル エンディアン Unicode、およびビッグ エンディアン Unicode テキスト ファイルは、適切なバイト オーダー マークから始まっている場合。 それ以外の場合で指定されたエンコーディング `defaultEncoding` を使用します。  
  
> [!CAUTION]
>  特定のカルチャ設定を使用して文字のセットをコンパイルし、別のカルチャ設定で、同じ文字を取得するときに、文字は解釈されないことしがスローされる例外が発生する可能性があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> または <paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> を読み取ることができません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
          <see langword="String" />。 解析するファイルの完全なパス。</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />。 エンコードする場合は、使用する文字エンコーディングはファイルからは決定されません。 既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</param>
        <param name="detectEncoding">
          <see langword="Boolean" />。 ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。 既定値は <see langword="True" /> です。</param>
        <summary>
          <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新たに作成 `TextFieldParser` オブジェクトで指定されたファイルを解析する、 `path` パラメーター。  
  
 場合、 `detectEncoding` パラメーターは `True`, 、このコンス トラクターは、ファイルまたはストリームの最初の 3 バイトにエンコードの検出を試みます。 自動的に認識 utf\-8、リトル エンディアン Unicode、およびビッグ エンディアン Unicode テキスト ファイルは、適切なバイト オーダー マークから始まっている場合。 それ以外の場合で指定されたエンコーディング `defaultEncoding` を使用します。  
  
> [!CAUTION]
>  特定のカルチャ設定を使用して文字のセットをコンパイルし、別のカルチャ設定で、同じ文字を取得するときに、文字は解釈されないことしがスローされる例外が発生する可能性があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> 空の文字列または <paramref name="defaultEncoding" /> は <see langword="Nothing" />です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" />。 解析するストリーム。</param>
        <param name="defaultEncoding">
          <see cref="T:System.Text.Encoding" />。 エンコードする場合は、使用する文字エンコーディングはファイルからは決定されません。 既定値は <see cref="P:System.Text.Encoding.UTF8" /> です。</param>
        <param name="detectEncoding">
          <see langword="Boolean" />。 ファイルの先頭にあるバイト順序マークを検索するかどうかを示します。 既定値は <see langword="True" /> です。</param>
        <param name="leaveOpen">
          <see langword="Boolean" />。 ままにするかどうかを示す <c>stream</c> するときに開いた、 <see langword="TextFieldParser" /> オブジェクトが閉じられています。 既定値は <see langword="False" /> です。</param>
        <summary>
          <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しい `TextFieldParser` ファイルを解析またはストリームをオブジェクトとして表されます、 `stream` パラメーター。  
  
 場合、 `detectEncoding` パラメーターは `True`, 、このコンス トラクターは、ファイルまたはストリームの最初の 3 バイトにエンコードの検出を試みます。 自動的に認識 utf\-8、リトル エンディアン Unicode、およびビッグ エンディアン Unicode テキスト ファイルは、適切なバイト オーダー マークから始まっている場合。 それ以外の場合で指定されたエンコーディング `defaultEncoding` を使用します。  
  
> [!CAUTION]
>  特定のカルチャ設定を使用して文字のセットをコンパイルし、別のカルチャ設定で、同じ文字を取得するときに、文字は解釈されないことしがスローされる例外が発生する可能性があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> または <paramref name="defaultEncoding" /> が <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> を読み取ることができません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の終了<see langword="TextFieldParser" />オブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 この例を閉じ、 `TextFieldParser``FileReader`です。  
  
 [!code-vb[VbVbalrTextFieldParser\#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コメント トークンを定義します。 コメント トークンとは、コメント行であることを示すために、行頭に配置される文字列です。コメント トークンの配置された行は、パーサーによって無視されます。</summary>
        <value>トークンのすべてのコメントを含む文字列の配列、<see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、**すべて**タブです。  
  
 長さ 0 のコメント トークンは無視されます。  
  
   
  
## 例  
 この例を指定するため、 `TextFieldParser`、`FileReader`単一引用符 \('\) で始まる行を無視する必要があります。  
  
 [!code-vb[VbVbalrTextFieldParser\#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">コメント トークンには、空白文字が含まれています。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テキスト ファイルの区切り記号を定義します。</summary>
        <value>すべてのフィールド区切り記号を含む文字列配列、 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、意味のある場合にのみ、 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> にプロパティが設定されている `FieldType.Delimited`します。  
  
 テキスト ファイルを実行することもの区切り記号を定義する、 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> メソッドです。  
  
 次の表に、関連するタスクの例、 `Delimiters` プロパティです。  
  
|目的|参照トピック|  
|--------|------------|  
|区切り記号付きテキスト ファイルからの読み取り|[How to: Read From a Comma\-Delimited Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/a8413fe4-0dba-49c8-8692-44fb67a9ec4f)|  
  
   
  
## 例  
 指定するこの例の区切り記号、 `TextFieldParser` オブジェクト、 `FileReader`, はコンマ \(,\) です。  
  
 [!code-vb[VbVbalrTextFieldParser\#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">改行文字、空の文字列に区切り記号の値が設定されているか、 <see langword="Nothing" />です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用されるリソースを解放、 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトです。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">ブール型。<see langword="True" /> マネージ コードとアンマネージの両方のリソースを解放します。 <see langword="False" /> アンマネージ リソースだけを解放します。</param>
        <summary>使用されるリソースを解放、 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返します。 <see langword="True" /> コメントではないが現在のカーソル位置とファイルの最後の行に空白がない場合。</summary>
        <value>
          <see langword="True" /> データの読み込みが他にないがある場合それ以外の場合、 <see langword="False" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、データの読み込みの end を特定のファイルから読み取るときに使用できます。  
  
 次の表に、関連するタスクの例については、 `EndOfData` プロパティです。  
  
|目的|参照トピック|  
|--------|------------|  
|区切り記号入りファイルからの読み取り|[How to: Read From a Comma\-Delimited Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/a8413fe4-0dba-49c8-8692-44fb67a9ec4f)|  
|固定長ファイルからの読み取り|[How to: Read From a Fixed\-width Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/99be5692-967a-4e85-993e-cd18139a5a69)|  
  
   
  
## 例  
 この例では、 `EndofData` プロパティを使用してファイルのすべてのフィールドをループ処理を `TextFieldReader`, 、`FileReader`です。  
  
 [!code-vb[VbVbalrTextFieldParser\#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最新の原因となった行が返されます <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外です。</summary>
        <value>最新の原因となった行 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ない場合 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 例外がスローされると、空の文字列が返されます。  
  
 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> プロパティは、例外が発生した行の数を表示するために使用できます。  
  
 次の表に、関連するタスクの例については、 `ErrorLine` プロパティです。  
  
|目的|参照トピック|  
|--------|------------|  
|区切り記号入りファイルからの読み取り|[How to: Read From a Comma\-Delimited Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/a8413fe4-0dba-49c8-8692-44fb67a9ec4f)|  
|固定長ファイルからの読み取り|[How to: Read From a Fixed\-width Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/99be5692-967a-4e85-993e-cd18139a5a69)|  
  
   
  
## 例  
 この例では、 `ErrorLine` 現在が発生した行を表示するプロパティを <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 例外です。  
  
 [!code-vb[VbVbalrTextFieldParser\#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最新の原因となった行の数を返します <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外です。</summary>
        <value>最新の原因となった行番号 <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> 例外です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ない場合 <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 例外がスローされましたが、\-1 が返されます。  
  
 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> プロパティは、例外が発生した行の数を表示するために使用できます。 行番号を調べるときに、空白行とコメントは無視されません。  
  
 次の表に、関連するタスクの例については、 `ErrorLineNumber` プロパティです。  
  
|目的|参照トピック|  
|--------|------------|  
|区切り記号入りファイルからの読み取り|[How to: Read From a Comma\-Delimited Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/a8413fe4-0dba-49c8-8692-44fb67a9ec4f)|  
|固定長ファイルからの読み取り|[How to: Read From a Fixed\-width Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/99be5692-967a-4e85-993e-cd18139a5a69)|  
  
   
  
## 例  
 この例では、 `ErrorLineNumber` 現在が発生した行の場所を表示するプロパティを <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> 例外です。  
  
 [!code-vb[VbVbalrTextFieldParser\#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>解析するテキスト ファイルの各列の幅を表します。</summary>
        <value>解析するテキスト ファイルの各列の幅を格納する整数配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、意味のある場合にのみ、 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> にプロパティが設定されている `FieldType.FixedWidth`します。 配列の最後のエントリがゼロ以下の場合は、フィールドが可変幅であると見なされます。  
  
 <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> メソッドを使用してフィールドの幅を設定することもできます。  
  
 次の表に、関連するタスクの例については、 `FieldWidths` プロパティです。  
  
|目的|参照トピック|  
|--------|------------|  
|固定幅のテキスト ファイルからの読み取り|[How to: Read From a Fixed\-width Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/99be5692-967a-4e85-993e-cd18139a5a69)|  
  
   
  
## 例  
 この例は、ファイルを読み取って `ParserText.txt`, 、最初の列が 5 文字分の幅は、2 つ目は、10、3 つ目は、11、および可変幅の 4 つ目は、の幅を指定します。  
  
 [!code-vb[VbVbalrTextFieldParser\#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">配列の最後のエントリ以外の任意の場所で幅の値は、0 以下です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>により、 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> リソースを解放し、それがガベージ コレクションによって回収される前に、他のクリーンアップ操作を実行しようとするオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>区切り記号入りファイルを解析する場合に、フィールドが引用符で囲まれているかどうかを示します。</summary>
        <value>
          <see langword="True" />フィールドが引用符で囲まれている場合それ以外の場合、<see langword="False" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、高度なメンバーの場合です。クリックするまで、IntelliSense が表示されない、**すべて**タブです。  
  
 プロパティが場合 `True`パーサーは、フィールドが引用符で囲まれていることを想定しています \(""\) 行の終わりを含めることができます。  
  
 たとえば、フィールドが、引用符で囲む場合`abc, "field2a,field2b", field3`し、このプロパティは`True`、しが引用符で囲まれたすべてのテキストが返されます。 この例と戻り`abc|field2a,field2b|field3`です。 このプロパティを設定`False`と次の例の戻り値、`abc|"field2a|field2b"|field3`です。  
  
   
  
## 例  
 この例では設定、`HasFieldsEnclosedInQuotes`プロパティを`True`の`myReader`します。  
  
 [!code-vb[VbVbalrTextFieldParser\#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の行番号を返します。ストリームから取り出す文字がなくなった場合は \-1 を返します。</summary>
        <value>現在の行番号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、高度なメンバーの場合です。クリックする場合を除き、IntelliSense に表示されない、 **すべて** \] タブをクリックします。  
  
 行番号を調べるときに、空白行とコメントは無視されません。  
  
   
  
## 例  
 この例では、テキスト ファイルの名前が"Jones"を検索し、どのような行で発生するを報告します。  
  
 [!code-vb[VbVbalrTextFieldParser\#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars">
          <see langword="Int32" />。 読み取る文字の数です。 必須です。</param>
        <summary>カーソルを進めずに、指定された文字数を読み込みます。</summary>
        <returns>指定数の読み取られた文字を格納する文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `numberOfChars` 値には、行の文字の合計数より小さくする必要があります。 によって返される文字列でない場合 `PeekChars` の行の長さに切り詰められます。  
  
 空白行は無視されます。  
  
 行末の文字は返されません。  
  
 `PeekChars` 解析メソッドは実行されません。 区切られたフィールド内の行末の文字は、行の実際の終了として解釈されます。  
  
 次の表に、関連するタスクの例については、 `PeekChars` メソッドです。  
  
|目的|参照トピック|  
|--------|------------|  
|解析する前に、フィールドの形式を決定します。|[How to: Read From a Text File with Multiple Formats in Visual Basic](http://msdn.microsoft.com/ja-jp/8d185eb2-79ca-42cd-95a7-d3ff44a5a0f8)|  
  
   
  
## 例  
 この例では `PeekChars` をデータの末尾を見つけて、その時点で、ファイルの解析を停止します。  
  
 [!code-vb[VbVbalrTextFieldParser\#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="numberOfChars" /> が 0 未満です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在行のすべてのフィールドを読み込んで文字列の配列として返し、次のデータが格納されている行にカーソルを進めます。</summary>
        <returns>現在の行のフィールド値を格納する文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数の形式でテキスト ファイルを解析できるようにするために、 `ReadFields` メソッドの値を調べ、 `TextFieldType`, 、`Delimiters`, 、および `FieldWidths`, 指定されている場合が呼び出されるたび。 ユーザーが正しく構成する必要があります、 `TextFieldType` と `FieldWidths` または `Delimiters` に応じてのプロパティです。 場合 `TextFieldType` に設定されている `Delimited`, 、および `Delimiters` が設定されていない場合、または `TextFieldType` に設定されている `FixedWidth` と `FieldWidths`, 、例外がスローされます。  
  
 場合 `ReadFields` 、空白行が発生したはスキップされ、次の空白行が返されます。  
  
 場合、 `ReadFields` メソッドは、現在の行を解析できません、例外が発生し、次の行に移動しません。 これにより、行をもう一度解析しようとするアプリケーションです。  
  
 次の表に、関連するタスクの例については、 `ReadFields` メソッドです。  
  
|目的|参照トピック|  
|--------|------------|  
|区切り記号入りファイルからの読み取り|[How to: Read From a Comma\-Delimited Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/a8413fe4-0dba-49c8-8692-44fb67a9ec4f)|  
|固定長ファイルからの読み取り|[How to: Read From a Fixed\-width Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/99be5692-967a-4e85-993e-cd18139a5a69)|  
  
   
  
## 例  
 この例では、 `ReadFields` メソッドがコンマ区切りファイルから読み取る `ParserText.txt`します。 この例では、フィールドを書き出します `Testfile.txt`します。  
  
 [!code-vb[VbVbalrTextFieldParser\#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">指定された形式を使用して、フィールドを解析できません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の行を文字列として返し、カーソルを次の行に進めます。</summary>
        <returns>ファイルまたはストリームの現在の行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `ReadLine` 解析メソッドは実行されません。 区切られたフィールド内の行末の文字は、行の実際の終了として解釈されます。  
  
 `Nothing` ファイルの終わりに達したかどうかが返されます。  
  
   
  
## 例  
 この例は、ファイルは読み取り `ParserText.txt` に書き込むと `Testfile.txt`です。  
  
 [!code-vb[VbVbalrTextFieldParser\#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 場合 `Testfile.txt` が存在しないによって作成される、 `WriteAllText` メソッドです。  
  
 この例では、1 つの文字列としてのフィールドを書き込みます各行を変換先ファイルの行を表示、 `VbCrLf` 文字は、各行の末尾に追加される必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>テキスト ファイルの残りの部分を読み込み、文字列として返します。</summary>
        <returns>ファイルまたはストリームの残りのテキスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、高度なメンバーの場合です。クリックする場合を除き、IntelliSense に表示されない、 **すべて** \] タブをクリックします。  
  
 項目詳細で、ファイルの末尾に達しているために、読み取ることがない場合 `Nothing` が返されます。  
  
 `ReadToEnd` メソッドでは、空白行とコメントは無視されません。  
  
   
  
## 例  
 この例では、 `ReadToEnd` メソッドがファイル全体を読み取る `ParserText.txt` ファイルに書き込むと `Testfile.txt`です。  
  
 [!code-vb[VbVbalrTextFieldParser\#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 場合 `Testfile.txt` が存在しないによって作成される、 `WriteAllText` メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters">型の配列 <see langword="String" />します。</param>
        <summary>指定した値にリーダーの区切り記号を設定し、フィールドの種類を設定 <see langword="Delimited" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既存の内容、 `Delimiters` このメソッドを設定すると、プロパティはクリアされます。  
  
 このメソッドは、配列を作成せずに区切り記号を設定する手段を提供します。  
  
 次の表に、関連するタスクの例、 `SetDelimiters` メソッドです。  
  
|目的|参照トピック|  
|--------|------------|  
|テキスト ファイルを解析します。|[Parsing Text Files with the TextFieldParser Object](http://msdn.microsoft.com/ja-jp/fc31d6e6-af0c-403f-8a00-d556b2c57567)|  
  
   
  
## 例  
 この例は、テキスト フィールドのパーサーを開き、として区切り記号を定義して `vbTab`します。  
  
 [!code-vb[VbVbalrTextFieldParser\#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 パスを置き換える `C:\logs\test.log` パスおよび解析するファイルの名前を使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">区切り記号は、長さ 0 です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths">配列 <see langword="Integer" />します。</param>
        <summary>リーダーの区切り記号を指定の値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既存の内容、 `Delimiters` これを設定すると、プロパティはクリアされます。  
  
 このメソッドは、配列を作成せずに区切り記号を設定する手段を提供します。  
  
 次の表に、関連するタスクの例、 `SetFieldWidths` メソッドです。  
  
|目的|参照トピック|  
|--------|------------|  
|テキスト ファイルを解析します。|[Parsing Text Files with the TextFieldParser Object](http://msdn.microsoft.com/ja-jp/fc31d6e6-af0c-403f-8a00-d556b2c57567)|  
  
   
  
## 例  
 この例は、テキスト フィールド パーサーを開き、としてフィールドの幅を定義して `5`します。  
  
 [!code-vb[VbVbalrTextFieldParser\#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 パスを置き換える `C:\logs\test.log` パスおよび解析するファイルの名前を使用します。  
  
 次の例は、テキスト フィールド パーサーを開き、としてフィールドの幅を定義して `5`, 、`10`, 、および変数です。  
  
 [!code-vb[VbVbalrTextFieldParser\#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 パスを置き換える `C:\logs\test.log` パスおよび解析するファイルの名前を使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>解析対象のファイルが区切り形式か固定幅形式かを示します。</summary>
        <value>A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> を解析するファイルが区切られているかどうか、または固定幅を示す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの既定値が区切られます。  
  
 次の表に、関連するタスクの例については、 `TextFieldType` プロパティです。  
  
|目的|参照トピック|  
|--------|------------|  
|区切り記号付きテキスト ファイルからの読み取り|[How to: Read From a Comma\-Delimited Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/a8413fe4-0dba-49c8-8692-44fb67a9ec4f)|  
|固定幅のテキスト ファイルからの読み取り|[How to: Read From a Fixed\-width Text File in Visual Basic](http://msdn.microsoft.com/ja-jp/99be5692-967a-4e85-993e-cd18139a5a69)|  
|複数の形式でテキスト ファイルから読み込む|[How to: Read From a Text File with Multiple Formats in Visual Basic](http://msdn.microsoft.com/ja-jp/8d185eb2-79ca-42cd-95a7-d3ff44a5a0f8)|  
  
   
  
## 例  
 この例で作成、 `TextFieldParser`, 、`FileReader`, が区切られていることを指定します。  
  
 [!code-vb[VbVbalrTextFieldParser\#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 この例で作成、 `TextFieldParser`, 、`FileReader`, 、固定幅であることを指定します。  
  
 [!code-vb[VbVbalrTextFieldParser\#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フィールド値から前後の空白をトリムするかどうかを示します。</summary>
        <value>
          <see langword="True" /> フィールドの値から先頭および末尾の空白文字をトリムする必要がある場合それ以外の場合、 <see langword="False" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの既定値は `True` です。  
  
   
  
## 例  
 この例で作成、 `TextFieldParser`,、 `FileReader`, 、設定と、 `TrimWhiteSpace` プロパティを `True`します。  
  
 [!code-vb[VbVbalrTextFieldParser\#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用されるリソースを解放、 <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> オブジェクトです。</summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see langword="TextFieldParser" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
  </Members>
</Type>