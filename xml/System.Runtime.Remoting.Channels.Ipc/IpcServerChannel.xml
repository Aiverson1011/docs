<Type Name="IpcServerChannel" FullName="System.Runtime.Remoting.Channels.Ipc.IpcServerChannel">
  <TypeSignature Language="C#" Value="public class IpcServerChannel : System.Runtime.Remoting.Channels.IChannelReceiver, System.Runtime.Remoting.Channels.ISecurableChannel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IpcServerChannel extends System.Object implements class System.Runtime.Remoting.Channels.IChannel, class System.Runtime.Remoting.Channels.IChannelReceiver, class System.Runtime.Remoting.Channels.ISecurableChannel" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Remoting</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannelReceiver</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.ISecurableChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>IPC システムを使用してメッセージを送信するリモート呼び出しのためのサーバーのチャネルを実装します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 チャネルは、リモート呼び出しを転送する .NET Framework リモート処理インフラストラクチャによって使用されます。 クライアントがリモート オブジェクトを呼び出すと呼び出しは、クライアント チャネルが送信され、サーバー チャネルで受信されるメッセージにシリアル化されます。 メッセージを受信した後、逆シリアル化、処理します。 戻り値はすべてがサーバー チャネルによって送信され、クライアント チャネルで受信します。  
  
 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> クラスは、同じコンピューター上のアプリケーション ドメイン間でメッセージの転送を Windows のプロセス間通信 \(IPC\) システムを使用します。 同じコンピューター上のアプリケーション ドメイン間で通信するときに、IPC チャネルは TCP または HTTP チャネルより高速です。  
  
 サーバー側でメッセージの追加の処理を実行するには、指定の実装、 <xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider> インターフェイスによって処理されるすべてのメッセージを介して、 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> インスタンスが渡されます。  
  
 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> インスタンスは、バイナリ形式または SOAP 形式でシリアル化されたメッセージを受け取ります。  
  
 A <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> オブジェクトに設定できる構成プロパティが関連付けられている構成ファイルのいずれかの実行時間 \(静的を呼び出すことによって <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=fullName> メソッド\) またはプログラムによって \(を渡すことによって、 <xref:System.Collections.IDictionary> コレクション、 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.%23ctor%2A> コンス トラクター\)。 これらの構成プロパティの一覧、ドキュメントを参照して、 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.%23ctor%2A> コンス トラクターです。  
  
> [!CAUTION]
>  設定する場合、 `exclusiveAddressUse` プロパティを `false` で、 `properties` 引数、いくつか <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> 同じ名前付きパイプのオブジェクトを登録することができます。 このような場合は、要求が登録されているチャネルのいずれかに移動できます。 この設定は、Alc も使用されている場合にのみセキュリティで保護されたと見なされます。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> クラスです。  
  
 [!code-cpp[Remoting\_Ipc\#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/server.cpp#10)]
 [!code-csharp[Remoting\_Ipc\#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/server.cs#10)]  
  
 上記のコードは次のリモート オブジェクトを公開するために使用します。  
  
 [!code-cpp[Remoting\_Ipc\#0](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/counter.cpp#0)]
 [!code-csharp[Remoting\_Ipc\#0](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/counter.cs#0)]  
  
 このオブジェクトをリモートで使用するクライアントの例は、次を参照してください。 <xref:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel>します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (string portName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="portName">チャネルが使用する IPC ポートの名前。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 指定 IPC ポートの名前を持つクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例では、このコンス トラクターを使用する方法を示します。  
  
 [!code-cpp[Remoting\_Ipc\#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/server.cpp#11)]
 [!code-csharp[Remoting\_Ipc\#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/server.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary properties, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
      </Parameters>
      <Docs>
        <param name="properties">A <see cref="T:System.Collections.IDictionary" /> コレクション チャネルで使用する構成プロパティの値を指定します。</param>
        <param name="sinkProvider">
          <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> チャネルで使用する実装。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> クラスを指定したチャネルのプロパティとシンクを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 チャネル構成プロパティの詳細については、次を参照してください。 [Channel and Formatter Configuration Properties](http://msdn.microsoft.com/ja-jp/226ecf74-ebbd-4ea0-a701-dcf4441deefe)します。  
  
 シンクの機能が必要でない場合は、設定、 `sinkProvider` パラメーターを `null`します。  
  
> [!CAUTION]
>  設定する場合、 `exclusiveAddressUse` プロパティを `false` で、 `properties` 引数、いくつか <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> 同じ名前付きパイプのオブジェクトを登録することができます。 このような場合は、要求が登録されているチャネルのいずれかに移動できます。 この設定は、Alc も使用されている場合にのみセキュリティで保護されたと見なされます。  
  
   
  
## 例  
 次のコード例では、このコンス トラクターを使用する方法を示します。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#41](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server2.cpp#41)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#41](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server2.cs#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (string name, string portName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string portName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="portName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">チャネルの名前。</param>
        <param name="portName">チャネルが使用する IPC ポートの名前。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> IPC ポート名と指定したチャネルの名前を持つクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの設定、 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A> プロパティを使用して、 `name` パラメーター。 1 つ以上のチャネルを登録する場合は、各チャネルに一意の名前は必要です。  
  
   
  
## 例  
 次のコード例では、このコンス トラクターを使用する方法を示します。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#42](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server2.cpp#42)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#42](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server2.cs#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider, System.Security.AccessControl.CommonSecurityDescriptor securityDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary properties, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider, class System.Security.AccessControl.CommonSecurityDescriptor securityDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Security.AccessControl.CommonSecurityDescriptor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
        <Parameter Name="securityDescriptor" Type="System.Security.AccessControl.CommonSecurityDescriptor" />
      </Parameters>
      <Docs>
        <param name="properties">A <see cref="T:System.Collections.IDictionary" /> コレクション チャネルで使用する構成プロパティの値を指定します。</param>
        <param name="sinkProvider">
          <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> チャネルで使用する実装。</param>
        <param name="securityDescriptor">A <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> チャネルで使用します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 指定したチャネルのプロパティ、シンク、およびセキュリティ記述子を持つクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 チャネル構成プロパティの詳細については、次を参照してください。 [Channel and Formatter Configuration Properties](http://msdn.microsoft.com/ja-jp/226ecf74-ebbd-4ea0-a701-dcf4441deefe)します。  
  
 シンクの機能が必要でない場合は、設定、 `sinkProvider` パラメーターを `null`します。 セキュリティ記述子が必要でない場合は、設定、 `securityDescriptor` パラメーターを `null`します。  
  
> [!CAUTION]
>  設定する場合、 `exclusiveAddressUse` プロパティを `false` で、 `properties` 引数、いくつか <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> 同じ名前付きパイプのオブジェクトを登録することができます。 このような場合は、要求が登録されているチャネルのいずれかに移動できます。 この設定は、Alc も使用されている場合にのみセキュリティで保護されたと見なされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (string name, string portName, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string portName, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String,System.String,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
      </Parameters>
      <Docs>
        <param name="name">チャネルの名前。</param>
        <param name="portName">チャネルが使用する IPC ポートの名前。</param>
        <param name="sinkProvider">
          <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> チャネルで使用する実装。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> クラスを指定したチャネルの名前、IPC ポート名、およびシンクを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの設定、 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A> プロパティを使用して、 `name` パラメーター。 1 つ以上のチャネルを登録する場合は、各チャネルに一意の名前は必要です。  
  
 シンクの機能が必要でない場合は、設定、 `sinkProvider` パラメーターを `null`します。  
  
   
  
## 例  
 次のコード例では、このコンス トラクターを使用する方法を示します。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#43](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server2.cpp#43)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#43](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server2.cs#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelData">
      <MemberSignature Language="C#" Value="public object ChannelData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ChannelData" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>チャネル固有のデータを取得します。</summary>
        <value>A <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> チャネル固有のデータを格納しているインスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンスとして返されますが、 <xref:System.Object?displayProperty=fullName> クラスでは、このプロパティの値は、のインスタンスにキャストできる <xref:System.Runtime.Remoting.Channels.ChannelDataStore> するチャネルを記述する、 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> オブジェクトの待機します。  
  
   
  
## 例  
 次のコード例は、<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelData%2A> プロパティの使用方法を示しています。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#15](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#15)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#15](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelName">
      <MemberSignature Language="C#" Value="public string ChannelName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChannelName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のチャネルの名前を取得します。</summary>
        <value>A <see cref="T:System.String" /> チャネルの名前を格納しているインスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 登録されている各チャネルは、一意の名前を持ちます。 呼び出すときに、特定のチャネルを取得する名前が使用される、 <xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A> メソッドです。 既定の名前は、「ipc サーバー」です。  
  
   
  
## 例  
 次のコード例は、<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A> プロパティの使用方法を示しています。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#12](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#12)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#12](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelPriority">
      <MemberSignature Language="C#" Value="public int ChannelPriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChannelPriority" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelPriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のチャネルの優先順位を取得します。</summary>
        <value>チャネルに割り当てられる優先度を示す整数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 優先度がどのチャネルに表示されるデータの順序を制御、 <xref:System.Runtime.Remoting.ObjRef> インスタンス。 低い優先順位のチャネルの前に高い優先順位のチャネル。 クライアントが記載されている順序でサーバーのチャネルに接続しようとした場合、 <xref:System.Runtime.Remoting.ObjRef> インスタンス。 既定値は 20 です。負の値の優先順位が許可されます。  
  
   
  
## 例  
 次のコード例は、<xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelPriority%2A> プロパティの使用方法を示しています。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#13](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#13)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#13](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChannelUri">
      <MemberSignature Language="C#" Value="public string GetChannelUri ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetChannelUri() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetChannelUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のチャネルの URI を返します。</summary>
        <returns>A <see cref="T:System.String" /> チャネルの URI を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クライアントは、チャネル URI を使用して、リモート サーバー チャネルを指定します。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetChannelUri%2A> メソッドです。  
  
 [!code-cpp[Remoting\_Ipc\#12](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/server.cpp#12)]
 [!code-csharp[Remoting\_Ipc\#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/server.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUrlsForUri">
      <MemberSignature Language="C#" Value="public virtual string[] GetUrlsForUri (string objectUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetUrlsForUri(string objectUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetUrlsForUri(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="objectUri">Url が必要になるオブジェクトの URI。</param>
        <summary>現在のホストされている指定の URI を持つオブジェクトのすべての Url の配列を返します <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> インスタンス。</summary>
        <returns>現在のホストされている、指定した URI を持つオブジェクトの Url の配列 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、 <xref:System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetUrlsForUri%2A> メソッドを使用するコード例を次に示します。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#19](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#19)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#19](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecured">
      <MemberSignature Language="C#" Value="public bool IsSecured { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecured" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.IsSecured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または現在のチャネルがセキュリティで保護するかどうかを示すブール値を設定します。</summary>
        <value>現在のインスタンスがセキュリティで保護するかどうかを示すブール値。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public string Parse (string url, out string objectURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Parse(string url, string objectURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.Parse(System.String,System.String@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="objectURI" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">リモートのよく知られているオブジェクトの URI を抽出するための URL。</param>
        <param name="objectURI">このメソッドが戻るとき、 <see cref="T:System.String" /> リモートのよく知られているオブジェクトの URI を保持しているインスタンス。</param>
        <summary>チャネル URI とリモートのよく知られているオブジェクトの URI を指定された URL から抽出します。</summary>
        <returns>現在のチャネルの URI。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オブジェクトの URI は、特定のオブジェクト インスタンスを一意に識別する値です。  
  
   
  
## 例  
 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.Parse%2A> メソッドを使用するコード例を次に示します。  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#19](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#19)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel\#19](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="public void StartListening (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartListening(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StartListening(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">初期化状態を示すオブジェクトまたは <see langword="null" />, 、特定の状態をチャネルに渡すしたくない場合。</param>
        <summary>現在のチャネルの要求のリッスンを開始するように指示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しく初期化されたチャネルでリッスンを開始するには、このメソッドを呼び出す必要はありません。  
  
 このメソッドを使用して、再起動後にチャネルでリッスンしている、 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StopListening%2A> メソッドが呼び出されてをチャネルでリッスンを停止します。  
  
 特定の初期化状態をチャネルに渡すには、データ オブジェクトを使用できます。 特定の状態をチャネルに渡すように場合は、渡す `null` として、 `data` パラメーターの値。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">指定したリッスン ポートは使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="public void StopListening (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopListening(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StopListening(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">初期化状態を示すオブジェクトまたは <see langword="null" />, 、特定の状態をチャネルに渡すしたくない場合。</param>
        <summary>現在のチャネルの要求のリッスンを停止するように指示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、チャネルでリッスンを停止します。 リッスンするには、再開するには、使用、 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StartListening%2A> メソッドです。  
  
 特定の初期化状態をチャネルに渡すには、データ オブジェクトを使用できます。 特定の状態をチャネルに渡すように場合は、渡す `null` として、 `data` パラメーターの値。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>