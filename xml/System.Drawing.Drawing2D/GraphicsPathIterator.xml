<Type Name="GraphicsPathIterator" FullName="System.Drawing.Drawing2D.GraphicsPathIterator">
  <TypeSignature Language="C#" Value="public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GraphicsPathIterator extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>内のサブパスを反復処理する機能を提供、 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> と各サブパスに格納されている図形の種類をテストします。 このクラスは継承できません。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> このヘルパー クラスを初期化するオブジェクト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 、指定したクラス <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> オブジェクトです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyData">
      <MemberSignature Language="C#" Value="public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CopyData(valuetype System.Drawing.PointF[] points, unsigned int8[] types, int32 startIndex, int32 endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]&amp;" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]&amp;" RefType="ref" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="points">戻り値には配列が含まれます <see cref="T:System.Drawing.PointF" /> パス内の地点を表す構造体。</param>
        <param name="types">関数が戻るときに、パス内の地点の型を表すバイト配列に含まれています。</param>
        <param name="startIndex">配列の開始インデックスを指定します。</param>
        <param name="endIndex">配列の最後のインデックスを指定します。</param>
        <summary>コピー、 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> プロパティと <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> プロパティ配列の関連付けられた <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に 2 つの配列を指定します。</summary>
        <returns>ポイントの数がコピーされます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 `startIndex` と `endIndex` パラメーターを指定したパスのデータの範囲をコピーします。  
  
   
  
## 例  
 次の例は、Windows フォームで使用するために設計されていて、必要な [CopyData メソッド \(PointF\[\], Byte\<xref:System.Windows.Forms.PaintEventArgs>`e`, 、 [CopyData メソッド \(PointF\[\], Byte\<xref:System.Windows.Forms.Form.OnPaint%2A> イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   グラフィックス パスを作成します。  
  
-   複数のプリミティブとマーカーには、それを追加します。  
  
-   画面の左側にあるパスのデータを一覧表示します。  
  
-   作成、 [CopyData メソッド \(PointF\[\], Byte\<xref:System.Drawing.Drawing2D.GraphicsPathIterator> するとします。  
  
-   2 番目のマーカーにパスのデータのインデックスをインクリメントします。  
  
-   呼び出し、 [CopyData メソッド \(PointF\[\], Byte\<xref:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData%2A> に先頭と末尾の間に含まれるパス データをコピーする方法は、ポイントにインデックスを作成し、種類の配列。  
  
-   画面の右側にあるコピーされたデータを一覧表示します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パス内の地点の数を取得します。</summary>
        <value>パス内の点の数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Calling **languageKeyword tag is not supported!!!!**  
 allows the resources used by this <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object to be reallocated for other purposes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Enumerate(valuetype System.Drawing.PointF[] points, unsigned int8[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]&amp;" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="points">戻り値には配列が含まれます <see cref="T:System.Drawing.PointF" /> パス内の地点を表す構造体。</param>
        <param name="types">関数が戻るときに、パス内の地点の型を表すバイト配列に含まれています。</param>
        <summary>コピー、 <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> プロパティと <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> プロパティ配列の関連付けられた <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> に 2 つの配列を指定します。</summary>
        <returns>ポイントの数がコピーされます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例は、Windows フォームで使用するために設計されていて、必要な [Enumerate メソッド \(PointF\<xref:System.Windows.Forms.PaintEventArgs>`e`, 、 [Enumerate メソッド \(PointF\<xref:System.Windows.Forms.Form.OnPaint%2A> イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   グラフィックス パスを作成します。  
  
-   複数のプリミティブとマーカーには、それを追加します。  
  
-   画面の左側にあるパスのデータを一覧表示します。  
  
-   作成、 [Enumerate メソッド \(PointF\<xref:System.Drawing.Drawing2D.GraphicsPathIterator> するとします。  
  
-   2 番目のマーカーにパスのデータのインデックスをインクリメントします。  
  
-   呼び出し、 [Enumerate メソッド \(PointF\<xref:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate%2A> パスにデータをコピーする方法、 `points` と `types` 配列。  
  
-   画面の右側にあるコピーされたデータを一覧表示します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~GraphicsPathIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCurve">
      <MemberSignature Language="C#" Value="public bool HasCurve ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasCurve() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>パスがこれに関連付けられているかどうかを示す <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 曲線が含まれています。</summary>
        <returns>このメソッドが戻る <see langword="true" /> 、曲線が現在のパスに含まれている場合、それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パス内のすべての曲線は、本のベジエ スプラインのシーケンスとして格納されます。 たとえば、パスに楕円を追加する場合を指定する左上隅、幅、および楕円の外接する四角形の高さ。 これらの数値 \(左上隅、幅、および高さ\) は、パスには格納されません。代わりにします。楕円は、次の 4 つのベジエ スプラインのシーケンスに変換されます。 これらのベジエ スプラインの制御点およびエンドポイントのパス格納します。  
  
 パスは、行または本のベジエ スプラインに属する各データ ポイントの配列を格納します。 配列内の点の一部に属しているベジエ スプラインし <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> 返します `true`します。 配列内のすべての点に属している行を <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> 返します `false`します。  
  
 特定のメソッドは、パス内のすべての曲線を直線のシーケンスに変換されることを意味のパスをフラット化します。 パス フラット化された後に <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> は常に返す `false`します。 呼び出す、 <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>, 、<xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>, 、または <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> のメソッド、 <xref:System.Drawing.Drawing2D.GraphicsPath> クラスが、パスを平坦化します。  
  
   
  
## 例  
 次の例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、 <xref:System.Windows.Forms.Form.OnPaint%2A> イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   作成、 <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクト、 `myPath`です。  
  
-   次の 3 つの線、四角形、および楕円を追加します。  
  
-   作成、 <xref:System.Drawing.Drawing2D.GraphicsPathIterator> の `myPath`です。  
  
-   テストかどうかを現在のパス `myPath` 曲線が含まれています。  
  
-   メッセージ ボックスに、テストの結果を示しています。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">
          <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> 点をコピーするオブジェクトします。</param>
        <summary>これは、 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> オブジェクトには、 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> オブジェクトが関連付けられています。<see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" /> メソッドは、関連付けられているインクリメント <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> パスと 2 番目に現在のマーカーと次のマーカー \(またはパスの最後\) の間、すべてのポイントに格納されているコピーでは、次のマーカーに <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> パラメーターで渡されるオブジェクト。</summary>
        <returns>このマーカーと次のページ間のポイントの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> パスにマーカーを設定します。 マーカーを使用して、サブパスのグループを作成できます。 1 つまたは複数のサブパスは、2 つのマーカーで指定できます。  
  
   
  
## 例  
 次の例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、 <xref:System.Windows.Forms.Form.OnPaint%2A> イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   次の 3 つの線、四角形、楕円、および 2 つのマーカーを追加します。  
  
-   画面の左側にあるすべてのパスの点の値を示します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトを作成します。  
  
-   作成、 <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクト、 `myPathSection`, をコピーしたポイントを受信します。  
  
-   呼び出し、 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> メソッドでは、最初のマーカーを反復処理し、そのマーカーと\] の横の間に含まれるすべてのポイントにコピー `myPathSection`します。  
  
-   ポイントにコピーの数を返す `markerPoints`します。  
  
-   マーカー番号 \(最初のマーカー\) と、画面の右側に含まれる点の数を示します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker(int32 startIndex, int32 endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">\[out\]このパラメーターに指定される整数参照は、サブパスを開始する位置のインデックスを受け取ります。</param>
        <param name="endIndex">\[out\]このパラメーターに指定される整数値の参照を受信するサブパスを終了する位置のインデックス <c>startIndex</c> ポイントです。</param>
        <summary>インクリメント、 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 、パスと、\[out\] パラメーターを使用して開始、停止のインデックスを返します。 次のマーカーにします。</summary>
        <returns>このマーカーと次のページ間のポイントの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> パスにマーカーを設定します。 マーカーを使用して、サブパスのグループを作成できます。 1 つまたは複数のサブパスは、2 つのマーカーで指定できます。  
  
   
  
## 例  
 次の例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、 <xref:System.Windows.Forms.Form.OnPaint%2A> イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   次の 3 つの行、四角形、および楕円マーカーの間に追加します。  
  
-   点の配列の値を画面に描画します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトを作成します。  
  
-   呼び出し、 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> メソッドです。  
  
-   反復的な呼び出しから返される値を使用して <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> 開始を描画し、画面には、各マーカーのポイントを停止します。  
  
-   ポイントの合計数の値を画面に描画します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextPathType">
      <MemberSignature Language="C#" Value="public int NextPathType (out byte pathType, out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextPathType(unsigned int8 pathType, int32 startIndex, int32 endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathType" Type="System.Byte&amp;" RefType="out" />
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pathType">\[out\]グループ内のすべてのポイントで共有ポイントの種類を受け取ります。 使用可能な型を取得できる、 <see cref="T:System.Drawing.Drawing2D.PathPointType" /> 列挙します。</param>
        <param name="startIndex">\[out\]ポイントのグループの開始インデックスを受け取ります。</param>
        <param name="endIndex">\[out\]ポイントのグループの終了インデックスを受け取ります。</param>
        <summary>開始インデックスを取得し、データの次のグループの終了インデックスがすべて同じ型であることを紹介します。</summary>
        <returns>このメソッドは、グループ内のデータ ポイント数を返します。 パスにない他のグループがある場合、このメソッドは、0 を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、 <xref:System.Windows.Forms.Form.OnPaint%2A> イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   次の 3 つの線、四角形、および楕円を追加します。  
  
-   画面の左側にすべてのポイントの値を一覧表示します。  
  
-   作成、 <xref:System.Drawing.Drawing2D.GraphicsPathIterator> するとします。  
  
-   `for` ループを使用してポイントを反復処理、 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> と <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> メソッドです。  
  
-   反復的な呼び出しから返される値を使用して、サブパス番号、ポイントの数と、画面の右側にパス ポイントの種類を一覧表示します。  
  
-   ポイントの合計数の値を画面に表示します。  
  
 注意 `ListPathPoints` ほとんどヘルパー関数は、\(すべて\) のグラフィックス パス コードから表示コード。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath(class System.Drawing.Drawing2D.GraphicsPath path, bool isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="isClosed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> のデータ ポイントは、この反復子の取得した図形 \(サブパス\) のデータ ポイントに合わせて設定です。</param>
        <param name="isClosed">\[out\]現在のパスを閉じるかどうかを示します。<see langword="true" /> 場合に、図がある場合を閉じると、それ以外の場合は <see langword="false" />です。</param>
        <summary>関連付けられているパスから次の図 \(サブパス\) を取得 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />します。</summary>
        <returns>取得した図形 \(サブパス\) 内のデータ ポイントの数。 それ以上図形を取得する場合は、ゼロが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、 <xref:System.Windows.Forms.Form.OnPaint%2A> イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   次の 3 つの線、四角形、楕円、および 2 つのマーカーを追加します。  
  
-   画面の左側にあるすべてのパスの点の値を示します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトを作成します。  
  
-   作成、 <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクト、 `myPathSection`, をコピーしたポイントを受信します。  
  
-   呼び出し、 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> \(図\) の 3 つ目のサブパスを反復処理され、サブパスを内に含まれるすべてのポイントのコピー、メソッド、 `myPathSection` パス、およびもにコピーされたポイント数を返します。 `subpathPoints`します。  
  
-   サブパス番号と、画面の右側に含まれる点の数を示します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath(int32 startIndex, int32 endIndex, bool isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="isClosed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">\[out\]次のサブパス開始インデックスを受け取ります。</param>
        <param name="endIndex">\[out\]次のサブパス終了インデックスを受け取ります。</param>
        <param name="isClosed">\[out\]サブパスを閉じるかどうかを示します。</param>
        <summary>移動、 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> パスに次のサブパスをします。 開始インデックスと次のサブパス終了インデックスは、\[out\] パラメーターに格納されます。</summary>
        <returns>内のサブパスの数、 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例は、Windows フォームで使用するために設計されていて、必要な <xref:System.Windows.Forms.PaintEventArgs>`e`, 、 <xref:System.Windows.Forms.Form.OnPaint%2A> イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   次の 3 つの線、四角形、および楕円を追加します。  
  
-   点の配列の値を画面に描画します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトを作成します。  
  
-   呼び出し、 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> メソッドです。  
  
-   反復的な呼び出しから返される値を使用して <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> 開始を描画し、画面に各サブパスの値を停止します。  
  
-   サブパスの合計数の値を画面に描画します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator\#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これを巻き戻して <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> その関連付けられたパスの先頭にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 最初に呼び出したとき、 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> 反復子のメソッドは、その反復子の関連付けられたパスの最初の図 \(サブパス\) 取得します。 2 番目の時間と 2 番目の図に取得します。 呼び出すと、 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A> メソッド、シーケンスは開始以上です。 つまり、呼び出し後 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A>, 、を次に呼び出した <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> パス内の最初の図を取得します。<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> と <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> メソッドは、同様に動作します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubpathCount">
      <MemberSignature Language="C#" Value="public int SubpathCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SubpathCount" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パスのサブパスの数を取得します。</summary>
        <value>パス内のサブパスの数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextMarker">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>パス内の次のマーカーに反復子を移動します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="NextSubpath">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>サブパスを指定した次のサブ パスに移動 <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>