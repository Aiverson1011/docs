<Type Name="SignatureHelper" FullName="System.Reflection.Emit.SignatureHelper">
  <TypeSignature Language="C#" Value="public sealed class SignatureHelper : System.Runtime.InteropServices._SignatureHelper" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SignatureHelper extends System.Object implements class System.Runtime.InteropServices._SignatureHelper" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.SignatureHelper" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._SignatureHelper</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._SignatureHelper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>署名を作成するためのメソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Reflection.Emit.SignatureHelper> に渡すことができるシグネチャ blob を作成するクラス、 <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> のメソッド、 <xref:System.Reflection.Emit.DynamicILInfo> クラスです。 A <xref:System.Reflection.Emit.SignatureHelper> にオブジェクトを渡すことも、 <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.SignatureHelper%29?displayProperty=fullName> 命令や署名トークンを Microsoft 中間言語 \(MSIL\) ストリームに挿入するメソッドのオーバー ロードします。 詳細については、シグネチャ blob とシグネチャのメタデータは、ECMA 第 2 部のメタデータ ドキュメントを参照してください。  
  
> [!NOTE]
>  ECMA 第 2 部のドキュメントはオンラインです。参照してください [ECMA C\# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) msdn および [Standard ECMA\-335 \- Common Language Infrastructure \(CLI\)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトにします。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddArgument">
      <MemberSignature Language="C#" Value="public void AddArgument (Type clsArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddArgument(class System.Type clsArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsArgument" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="clsArgument">引数の型。</param>
        <summary>署名に引数を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 省略可能または必須のカスタム修飾子を使用して引数を追加するを使用して、 <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> メソッドのオーバー ロードします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">署名は既に完了しています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="clsArgument" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddArgument">
      <MemberSignature Language="C#" Value="public void AddArgument (Type argument, bool pinned);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddArgument(class System.Type argument, bool pinned) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Type" />
        <Parameter Name="pinned" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="argument">引数の型。</param>
        <param name="pinned">
          <see langword="true" /> 場合は、引数がピンされています。それ以外の場合、 <see langword="false" />です。</param>
        <summary>引数が固定されているかどうかを指定する、シグネチャに指定した型の引数を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 省略可能または必須のカスタム修飾子を使用して引数を追加するを使用して、 <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> メソッドのオーバー ロードします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="argument" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddArgument">
      <MemberSignature Language="C#" Value="public void AddArgument (Type argument, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddArgument(class System.Type argument, class System.Type[] requiredCustomModifiers, class System.Type[] optionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Type" />
        <Parameter Name="requiredCustomModifiers" Type="System.Type[]" />
        <Parameter Name="optionalCustomModifiers" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="argument">引数の型。</param>
        <param name="requiredCustomModifiers">などの引数は必須のカスタム修飾子を表す型の配列 <see cref="T:System.Runtime.CompilerServices.IsConst" /> または <see cref="T:System.Runtime.CompilerServices.IsBoxed" />です。 引数が必須のカスタム修飾子を持たない場合は、指定 <see langword="null" />します。</param>
        <param name="optionalCustomModifiers">などの引数は省略可能なカスタム修飾子を表す型の配列 <see cref="T:System.Runtime.CompilerServices.IsConst" /> または <see cref="T:System.Runtime.CompilerServices.IsBoxed" />です。 引数がオプションのカスタム修飾子を持たない場合は、指定 <see langword="null" />します。</param>
        <summary>指定したカスタム修飾子を使用して、署名に引数を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 参照してください、 [AddArgument メソッド \(Type, Type\<xref:System.Runtime.CompilerServices> のカスタム修飾子を表すクラスの名前空間。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="argument" /> は <see langword="null" /> です。  
  
 または  
  
 要素 <paramref name="requiredCustomModifiers" /> または <paramref name="optionalCustomModifiers" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">署名は既に完了しています。  
  
 または  
  
 指定したカスタム修飾子の 1 つは、配列型です。  
  
 または  
  
 指定したカスタム修飾子の 1 つは、オープン ジェネリック型です。 つまり、 <see cref="P:System.Type.ContainsGenericParameters" /> プロパティは、 <see langword="true" /> カスタム修飾子です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddArguments">
      <MemberSignature Language="C#" Value="public void AddArguments (Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddArguments(class System.Type[] arguments, class System.Type[][] requiredCustomModifiers, class System.Type[][] optionalCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Type[]" />
        <Parameter Name="requiredCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="optionalCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="arguments">追加する引数の型。</param>
        <param name="requiredCustomModifiers">型の配列の配列。 型の各配列など、対応する引数は必須のカスタム修飾子を表す <see cref="T:System.Runtime.CompilerServices.IsConst" /> または <see cref="T:System.Runtime.CompilerServices.IsBoxed" />です。 特定の引数が必須のカスタム修飾子を持たない場合は、指定 <see langword="null" /> 型の配列の代わりにします。 カスタム修飾子を必要に応じて、引数の場合は、指定 <see langword="null" /> 、配列の配列の代わりにします。</param>
        <param name="optionalCustomModifiers">型の配列の配列。 型の各配列など、対応する引数のオプションのカスタム修飾子を表す <see cref="T:System.Runtime.CompilerServices.IsConst" /> または <see cref="T:System.Runtime.CompilerServices.IsBoxed" />です。 特定の引数がオプションのカスタム修飾子を持たない場合は、指定 <see langword="null" /> 型の配列の代わりにします。 どの引数には、オプションのカスタム修飾子がインストールされている、指定 <see langword="null" /> 、配列の配列の代わりにします。</param>
        <summary>指定したカスタム修飾子を使用して、署名には、一連の引数を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要素の順序で、署名の最後に、引数を追加 `arguments`します。  
  
 参照してください、 [AddArguments メソッド \(Type\[\], Type\[\]\<xref:System.Runtime.CompilerServices> のカスタム修飾子を表すクラスの名前空間。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">要素 <paramref name="arguments" /> は <see langword="null" />です。  
  
 または  
  
 指定したカスタム修飾子の 1 つは <see langword="null" />です。 \(ただし、 <see langword="null" /> 関数の引数のカスタム修飾子の配列を指定することができます\)。</exception>
        <exception cref="T:System.ArgumentException">署名は既に完了しています。  
  
 または  
  
 指定したカスタム修飾子の 1 つは、配列型です。  
  
 または  
  
 指定したカスタム修飾子の 1 つは、オープン ジェネリック型です。 つまり、 <see cref="P:System.Type.ContainsGenericParameters" /> プロパティは、 <see langword="true" /> カスタム修飾子です。  
  
 または  
  
 サイズ <paramref name="requiredCustomModifiers" /> または <paramref name="optionalCustomModifiers" /> のサイズと等しくない <paramref name="arguments" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSentinel">
      <MemberSignature Language="C#" Value="public void AddSentinel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSentinel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.AddSentinel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>マーク、vararg の末尾には、一部が固定されています。 呼び出し元が vararg シグネチャの呼び出しサイトを作成する場合にのみ使用します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスの比較するオブジェクト。</param>
        <summary>このインスタンスが特定のオブジェクトと等しいかどうかを確認します。</summary>
        <returns>
          <see langword="true" /> 指定したオブジェクトがある場合、 <see langword="SignatureHelper" /> 、同じシグネチャを表します。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFieldSigHelper">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.SignatureHelper GetFieldSigHelper (System.Reflection.Module mod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.SignatureHelper GetFieldSigHelper(class System.Reflection.Module mod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.SignatureHelper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mod" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="mod">フィールドが含まれている動的モジュール、 <see langword="SignatureHelper" /> を要求します。</param>
        <summary>フィールドの署名ヘルパーを返します。</summary>
        <returns>
          <see langword="SignatureHelper" /> フィールドのオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作成して、このインスタンスのハッシュ コードを返します。</summary>
        <returns>名前に基づくハッシュ コードを返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 戻り値は、同じように、このインスタンスの名前からハッシュ コードが作成されるよう、 `GetHashCode` の値にメソッドが呼び出された、 `Name` プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLocalVarSigHelper">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.SignatureHelper</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ローカル変数のシグネチャ ヘルパーを返します。</summary>
        <returns>A <see cref="T:System.Reflection.Emit.SignatureHelper" /> のローカル変数。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLocalVarSigHelper">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper (System.Reflection.Module mod);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper(class System.Reflection.Module mod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.SignatureHelper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mod" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="mod">動的モジュールをローカル変数を含む、 <see langword="SignatureHelper" /> を要求します。</param>
        <summary>ローカル変数のシグネチャ ヘルパーを返します。</summary>
        <returns>
          <see langword="SignatureHelper" /> ローカル変数のオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodSigHelper">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.CallingConventions callingConvention, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.SignatureHelper GetMethodSigHelper(valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.SignatureHelper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="callingConvention">メソッドの呼び出し規則。</param>
        <param name="returnType">メソッドの戻り値の型または <see langword="null" /> void の戻り値の型 \(<see langword="Sub" /> Visual Basic でプロシージャ\) です。</param>
        <summary>メソッドを指定して、メソッドのシグネチャ ヘルパーの呼び出しの規約および戻り値の型を返します。</summary>
        <returns>
          <see langword="SignatureHelper" /> メソッドです。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodSigHelper">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Runtime.InteropServices.CallingConvention unmanagedCallingConvention, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.SignatureHelper GetMethodSigHelper(valuetype System.Runtime.InteropServices.CallingConvention unmanagedCallingConvention, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.SignatureHelper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanagedCallingConvention" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="unmanagedCallingConvention">メソッドのアンマネージ呼び出し規約です。</param>
        <param name="returnType">メソッドの戻り値の型または <see langword="null" /> void の戻り値の型 \(<see langword="Sub" /> Visual Basic でプロシージャ\) です。</param>
        <summary>メソッドのアンマネージ呼び出し規約、および戻り値の型を指定して、メソッドのシグネチャ ヘルパーを返します。</summary>
        <returns>
          <see langword="SignatureHelper" /> メソッドです。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="unmanagedCallConv" /> 不明なアンマネージ呼び出し規約です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethodSigHelper">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.Module mod, System.Reflection.CallingConventions callingConvention, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.SignatureHelper GetMethodSigHelper(class System.Reflection.Module mod, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.SignatureHelper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mod" Type="System.Reflection.Module" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="mod">
          <see langword="SignatureHelper" /> が必要となるメソッドを含む <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</param>
        <param name="callingConvention">メソッドの呼び出し規則。</param>
        <param name="returnType">メソッドの戻り値の型または void の戻り値の型の <see langword="null" /> \(Visual Basic では <see langword="Sub" /> プロシージャ\)。</param>
        <summary>メソッドのモジュール、呼び出し規約、戻り値の型を指定して、メソッドのシグネチャのヘルパーを返します。</summary>
        <returns>メソッドの <see langword="SignatureHelper" /> オブジェクト。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="mod" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="mod" /> が <see cref="T:System.Reflection.Emit.ModuleBuilder" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethodSigHelper">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.Module mod, System.Runtime.InteropServices.CallingConvention unmanagedCallConv, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.SignatureHelper GetMethodSigHelper(class System.Reflection.Module mod, valuetype System.Runtime.InteropServices.CallingConvention unmanagedCallConv, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.SignatureHelper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mod" Type="System.Reflection.Module" />
        <Parameter Name="unmanagedCallConv" Type="System.Runtime.InteropServices.CallingConvention" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="mod">
          <see cref="T:System.Reflection.Emit.ModuleBuilder" /> メソッドを含む、 <see langword="SignatureHelper" /> を要求します。</param>
        <param name="unmanagedCallConv">メソッドのアンマネージ呼び出し規約です。</param>
        <param name="returnType">メソッドの戻り値の型または <see langword="null" /> void の戻り値の型 \(<see langword="Sub" /> Visual Basic でプロシージャ\) です。</param>
        <summary>メソッドのモジュールを指定して、メソッドはアンマネージ呼び出し規約、および戻り値の型については、シグネチャ ヘルパーを返します。</summary>
        <returns>
          <see langword="SignatureHelper" /> メソッドです。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="mod" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="mod" /> が <see cref="T:System.Reflection.Emit.ModuleBuilder" /> ではありません。  
  
 または  
  
 <paramref name="unmanagedCallConv" /> 不明なアンマネージ呼び出し規約です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethodSigHelper">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.Module mod, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.SignatureHelper GetMethodSigHelper(class System.Reflection.Module mod, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.SignatureHelper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mod" Type="System.Reflection.Module" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="mod">
          <see cref="T:System.Reflection.Emit.ModuleBuilder" /> メソッドを含む、 <see langword="SignatureHelper" /> を要求します。</param>
        <param name="returnType">メソッドの戻り値の型または <see langword="null" /> void の戻り値の型 \(<see langword="Sub" /> Visual Basic でプロシージャ\) です。</param>
        <param name="parameterTypes">メソッドの引数の型または <see langword="null" /> 、メソッドに引数が含まれていない場合。</param>
        <summary>メソッドのモジュール、戻り値の型と引数の型が指定された標準の呼び出し規約を持つメソッドのシグネチャ ヘルパーを返します。</summary>
        <returns>
          <see langword="SignatureHelper" /> メソッドです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードは、標準呼び出し規約を署名を作成します。  
  
 カスタム修飾子を使用して、メソッド シグネチャを作成するには、使用、 <xref:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper%28System.Reflection.Module%2CSystem.Reflection.CallingConventions%2CSystem.Type%29> メソッドのオーバー ロードし、使用して、 <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> または <xref:System.Reflection.Emit.SignatureHelper.AddArguments%28System.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> のカスタム修飾子を使用して引数を追加するメソッドのオーバー ロードします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="mod" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="parameterTypes" /> の要素が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="mod" /> が <see cref="T:System.Reflection.Emit.ModuleBuilder" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPropertySigHelper">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.SignatureHelper GetPropertySigHelper (System.Reflection.Module mod, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.SignatureHelper GetPropertySigHelper(class System.Reflection.Module mod, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.SignatureHelper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mod" Type="System.Reflection.Module" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="mod">
          <see cref="T:System.Reflection.Emit.ModuleBuilder" /> のプロパティを格納する、 <see cref="T:System.Reflection.Emit.SignatureHelper" /> を要求します。</param>
        <param name="returnType">プロパティの型。</param>
        <param name="parameterTypes">引数の型または <see langword="null" /> 場合は、プロパティの引数があるありません。</param>
        <summary>プロパティ、プロパティの型、およびプロパティの引数を含む動的モジュールを指定するプロパティの署名ヘルパーを返します。</summary>
        <returns>A <see cref="T:System.Reflection.Emit.SignatureHelper" /> プロパティのオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 省略可能または必須のカスタム修飾子を持つプロパティのシグネチャ ヘルパーを作成するには、使用、 <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> メソッドのオーバー ロードします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="mod" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="parameterTypes" /> の要素が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="mod" /> が <see cref="T:System.Reflection.Emit.ModuleBuilder" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPropertySigHelper">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.SignatureHelper GetPropertySigHelper (System.Reflection.Module mod, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.SignatureHelper GetPropertySigHelper(class System.Reflection.Module mod, class System.Type returnType, class System.Type[] requiredReturnTypeCustomModifiers, class System.Type[] optionalReturnTypeCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] requiredParameterTypeCustomModifiers, class System.Type[][] optionalParameterTypeCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.SignatureHelper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mod" Type="System.Reflection.Module" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="requiredReturnTypeCustomModifiers" Type="System.Type[]" />
        <Parameter Name="optionalReturnTypeCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="requiredParameterTypeCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="optionalParameterTypeCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="mod">
          <see cref="T:System.Reflection.Emit.ModuleBuilder" /> のプロパティを格納する、 <see cref="T:System.Reflection.Emit.SignatureHelper" /> を要求します。</param>
        <param name="returnType">プロパティの型。</param>
        <param name="requiredReturnTypeCustomModifiers">戻り値の型の必須のカスタム修飾子をなどを表す型の配列 <see cref="T:System.Runtime.CompilerServices.IsConst" /> または <see cref="T:System.Runtime.CompilerServices.IsBoxed" />です。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
        <param name="optionalReturnTypeCustomModifiers">戻り値の型のオプションのカスタム修飾子をなどを表す型の配列 <see cref="T:System.Runtime.CompilerServices.IsConst" /> または <see cref="T:System.Runtime.CompilerServices.IsBoxed" />です。 戻り値の型が省略可能なカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
        <param name="parameterTypes">プロパティの引数の型または <see langword="null" /> 場合は、プロパティの引数があるありません。</param>
        <param name="requiredParameterTypeCustomModifiers">型の配列の配列。 型の各配列では、プロパティの対応する引数の必須のカスタム修飾子を表します。 特定の引数が必須のカスタム修飾子を持たない場合は、指定 <see langword="null" /> 型の配列の代わりにします。 プロパティは、引数を持たない場合、またはどの引数が必須のカスタム修飾子を指定 <see langword="null" /> 、配列の配列の代わりにします。</param>
        <param name="optionalParameterTypeCustomModifiers">型の配列の配列。 型の各配列では、プロパティの対応する引数のオプションのカスタム修飾子を表します。 特定の引数がオプションのカスタム修飾子を持たない場合は、指定 <see langword="null" /> 型の配列の代わりにします。 プロパティは、引数を持たない場合、またはオプションのカスタム修飾子を持つ引数のまったくない場合は、 <see langword="null" /> 、配列の配列の代わりにします。</param>
        <summary>プロパティ、プロパティの型、プロパティの引数、および引数および戻り値の型のカスタム修飾子を含む動的モジュールを指定するプロパティの署名ヘルパーを返します。</summary>
        <returns>A <see cref="T:System.Reflection.Emit.SignatureHelper" /> プロパティのオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 参照してください、 [GetPropertySigHelper メソッド \(Module, Type, Type\[\], Type\[\], Type\[\], Type\[\]\<xref:System.Runtime.CompilerServices> のカスタム修飾子を表すクラスの名前空間。  
  
 カスタム修飾子プロパティがない場合を使用して、 [GetPropertySigHelper メソッド \(Module, Type, Type\[\], Type\[\], Type\[\], Type\[\]\<xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29> メソッドのオーバー ロードします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="mod" /> は <see langword="null" /> です。  
  
 または  
  
 要素 <paramref name="parameterTypes" /> は <see langword="null" />です。  
  
 または  
  
 指定したカスタム修飾子の 1 つは <see langword="null" />です。 \(ただし、 <see langword="null" /> 関数の引数のカスタム修飾子の配列を指定することができます\)。</exception>
        <exception cref="T:System.ArgumentException">署名は既に完了しています。  
  
 または  
  
 <paramref name="mod" /> が <see cref="T:System.Reflection.Emit.ModuleBuilder" /> ではありません。  
  
 または  
  
 指定したカスタム修飾子の 1 つは、配列型です。  
  
 または  
  
 指定したカスタム修飾子の 1 つは、オープン ジェネリック型です。 つまり、 <see cref="P:System.Type.ContainsGenericParameters" /> プロパティは、 <see langword="true" /> カスタム修飾子です。  
  
 または  
  
 サイズ <paramref name="requiredParameterTypeCustomModifiers" /> または <paramref name="optionalParameterTypeCustomModifiers" /> のサイズと等しくない <paramref name="parameterTypes" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPropertySigHelper">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.SignatureHelper GetPropertySigHelper (System.Reflection.Module mod, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Emit.SignatureHelper GetPropertySigHelper(class System.Reflection.Module mod, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] requiredReturnTypeCustomModifiers, class System.Type[] optionalReturnTypeCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] requiredParameterTypeCustomModifiers, class System.Type[][] optionalParameterTypeCustomModifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.SignatureHelper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mod" Type="System.Reflection.Module" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="requiredReturnTypeCustomModifiers" Type="System.Type[]" />
        <Parameter Name="optionalReturnTypeCustomModifiers" Type="System.Type[]" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="requiredParameterTypeCustomModifiers" Type="System.Type[][]" />
        <Parameter Name="optionalParameterTypeCustomModifiers" Type="System.Type[][]" />
      </Parameters>
      <Docs>
        <param name="mod">
          <see cref="T:System.Reflection.Emit.ModuleBuilder" /> のプロパティを格納する、 <see cref="T:System.Reflection.Emit.SignatureHelper" /> を要求します。</param>
        <param name="callingConvention">プロパティ アクセサーの呼び出し規則。</param>
        <param name="returnType">プロパティの型。</param>
        <param name="requiredReturnTypeCustomModifiers">戻り値の型の必須のカスタム修飾子をなどを表す型の配列 <see cref="T:System.Runtime.CompilerServices.IsConst" /> または <see cref="T:System.Runtime.CompilerServices.IsBoxed" />です。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
        <param name="optionalReturnTypeCustomModifiers">戻り値の型のオプションのカスタム修飾子をなどを表す型の配列 <see cref="T:System.Runtime.CompilerServices.IsConst" /> または <see cref="T:System.Runtime.CompilerServices.IsBoxed" />です。 戻り値の型が省略可能なカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
        <param name="parameterTypes">プロパティの引数の型または <see langword="null" /> 場合は、プロパティの引数があるありません。</param>
        <param name="requiredParameterTypeCustomModifiers">型の配列の配列。 型の各配列では、プロパティの対応する引数の必須のカスタム修飾子を表します。 特定の引数が必須のカスタム修飾子を持たない場合は、指定 <see langword="null" /> 型の配列の代わりにします。 プロパティは、引数を持たない場合、またはどの引数が必須のカスタム修飾子を指定 <see langword="null" /> 、配列の配列の代わりにします。</param>
        <param name="optionalParameterTypeCustomModifiers">型の配列の配列。 型の各配列では、プロパティの対応する引数のオプションのカスタム修飾子を表します。 特定の引数がオプションのカスタム修飾子を持たない場合は、指定 <see langword="null" /> 型の配列の代わりにします。 プロパティは、引数を持たない場合、またはオプションのカスタム修飾子を持つ引数のまったくない場合は、 <see langword="null" /> 、配列の配列の代わりにします。</param>
        <summary>プロパティ、呼び出し規約、プロパティの型、プロパティの引数、および引数および戻り値の型のカスタム修飾子を含む動的モジュールを指定するプロパティの署名ヘルパーを返します。</summary>
        <returns>A <see cref="T:System.Reflection.Emit.SignatureHelper" /> プロパティのオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 参照してください、 [GetPropertySigHelper メソッド \(Module, CallingConventions, Type, Type\[\], Type\[\], Type\[\], Type\[\]\<xref:System.Runtime.CompilerServices> のカスタム修飾子を表すクラスの名前空間。  
  
 カスタム修飾子プロパティがない場合を使用して、 [GetPropertySigHelper メソッド \(Module, CallingConventions, Type, Type\[\], Type\[\], Type\[\], Type\[\]\<xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29> メソッドのオーバー ロードします。  
  
> [!NOTE]
>  このメソッドのオーバー ロードがで導入された、 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] またはそれ以降。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="mod" /> は <see langword="null" /> です。  
  
 または  
  
 要素 <paramref name="parameterTypes" /> は <see langword="null" />です。  
  
 または  
  
 指定したカスタム修飾子の 1 つは <see langword="null" />です。 \(ただし、 <see langword="null" /> 関数の引数のカスタム修飾子の配列を指定することができます\)。</exception>
        <exception cref="T:System.ArgumentException">署名は既に完了しています。  
  
 または  
  
 <paramref name="mod" /> が <see cref="T:System.Reflection.Emit.ModuleBuilder" /> ではありません。  
  
 または  
  
 指定したカスタム修飾子の 1 つは、配列型です。  
  
 または  
  
 指定したカスタム修飾子の 1 つは、オープン ジェネリック型です。 つまり、 <see cref="P:System.Type.ContainsGenericParameters" /> プロパティは、 <see langword="true" /> カスタム修飾子です。  
  
 または  
  
 サイズ <paramref name="requiredParameterTypeCustomModifiers" /> または <paramref name="optionalParameterTypeCustomModifiers" /> のサイズと等しくない <paramref name="parameterTypes" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSignature">
      <MemberSignature Language="C#" Value="public byte[] GetSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.GetSignature" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>終了トークンの署名を追加し、これ以上トークンが追加されないために、終了すると、署名をマークします。</summary>
        <returns>完全署名で構成するバイト配列を返します。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _SignatureHelper.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames(valuetype System.Guid riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">将来使用するために予約されています。 IID\_NULL にする必要があります。</param>
        <param name="rgszNames">マッピング対象として渡される名前の配列。</param>
        <param name="cNames">マッピングされる名前のカウント。</param>
        <param name="lcid">名前を解釈するロケール コンテキスト。</param>
        <param name="rgDispId">名前に対応する ID を受け取る、呼び出し元が割り当てた配列。</param>
        <summary>一連の名前を対応する一連のディスパッチ識別子に割り当てます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびないマネージ コードから呼び出す必要があります。 詳細については `IDispatch::GetIDsOfNames`, 、MSDN ライブラリを参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._SignatureHelper.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _SignatureHelper.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._SignatureHelper.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">返される型情報。</param>
        <param name="lcid">型情報のロケール ID。</param>
        <param name="ppTInfo">要求された型情報オブジェクトへのポインターを取得します。</param>
        <summary>オブジェクトの型情報を取得します。この型情報を使用して、インターフェイスの型情報を取得できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびないマネージ コードから呼び出す必要があります。 詳細については `IDispatch::GetTypeInfo`, 、MSDN ライブラリを参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _SignatureHelper.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount(unsigned int32 pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount(System.UInt32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">オブジェクトにより提供される型タイプ情報インターフェイスの数を受け取る場所を指定します。</param>
        <summary>オブジェクトが提供する型情報インターフェイスの数 \(0 または 1\) を取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびないマネージ コードから呼び出す必要があります。 詳細については `IDispatch::GetTypeInfoCount`, 、MSDN ライブラリを参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._SignatureHelper.Invoke">
      <MemberSignature Language="C#" Value="void _SignatureHelper.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._SignatureHelper.Invoke(unsigned int32 dispIdMember, valuetype System.Guid riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">メンバーを識別します。</param>
        <param name="riid">将来使用するために予約されています。 IID\_NULL にする必要があります。</param>
        <param name="lcid">引数を解釈する対象のロケール コンテキスト。</param>
        <param name="wFlags">呼び出しのコンテキストを記述するフラグ。</param>
        <param name="pDispParams">引数の配列、名前付き引数の DISPID の配列、配列内の要素数のカウントを格納している構造体へのポインター。</param>
        <param name="pVarResult">結果が格納される場所へのポインター。</param>
        <param name="pExcepInfo">例外情報を格納する構造体へのポインター。</param>
        <param name="puArgErr">エラーが存在する最初の引数のインデックス。</param>
        <summary>オブジェクトによって公開されたプロパティおよびメソッドへのアクセスを提供します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アンマネージ コードからマネージ クラスにアクセスするため、およびないマネージ コードから呼び出す必要があります。 詳細については `IDispatch::Invoke`, 、MSDN ライブラリを参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">COM <c>IDispatch</c> インターフェイスを使用した遅延バインディング アクセスはサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.SignatureHelper.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>署名の引数を表す文字列を返します。</summary>
        <returns>この署名の引数を表す文字列を返します。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddArgument">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>署名に引数を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetLocalVarSigHelper">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ローカル変数のシグネチャ ヘルパーを返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetMethodSigHelper">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>メソッドのシグネチャ ヘルパーを返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetPropertySigHelper">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.ILGeneration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>プロパティのシグネチャ ヘルパーを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>