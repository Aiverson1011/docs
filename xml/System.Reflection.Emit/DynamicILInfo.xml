<Type Name="DynamicILInfo" FullName="System.Reflection.Emit.DynamicILInfo">
  <TypeSignature Language="C#" Value="public class DynamicILInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicILInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicILInfo" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Microsoft intermediate language \(MSIL\) を生成する別の方法についてのサポートとメタデータ トークンを作成し、コード、例外処理、およびローカル変数シグネチャ blob を挿入するためのメソッドを含む、動的メソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Reflection.Emit.DynamicILInfo> クラスにより、開発者が使用する代わりに、独自の MSIL ジェネレーターを記述する <xref:System.Reflection.Emit.ILGenerator>です。  
  
 他の型のインスタンスを作成するメソッド、やなどの呼び出しは、生成する MSIL は、これらのエンティティに対してトークンを含める必要があります。<xref:System.Reflection.Emit.DynamicILInfo> クラスの複数のオーバー ロードには、 <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> メソッドで、現在のスコープ内で有効なトークンを返す <xref:System.Reflection.Emit.DynamicILInfo>します。 オーバー ロードを呼び出す必要がある場合など、 <xref:System.Console.WriteLine%2A?displayProperty=fullName> メソッドを取得できます、 <xref:System.RuntimeMethodHandle> のオーバー ロードに渡すと、 <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> 、MSIL に埋め込むには、トークンを取得します。  
  
 作成した後 <xref:System.Byte> 使用するローカル変数シグネチャ、例外、およびコード本体に配列を <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, 、<xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, と <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> に挿入するメソッド、 <xref:System.Reflection.Emit.DynamicMethod> に関連付けられている、 <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトです。  
  
 独自のメタデータと MSIL を生成するには、共通言語基盤 \(CLI\) ドキュメント、特に「Partition II:: メタデータ Definition and Semantics」と「Partition III: CIL Instruction Set」に関する知識が必要です。 このドキュメントはオンラインです。参照してください [ECMA C\# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) msdn および [Standard ECMA\-335 \- Common Language Infrastructure \(CLI\)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトにします。  
  
> [!NOTE]
>  使用しないでください <xref:System.Reflection.Emit.DynamicILInfo> デリゲート コンス トラクターを直接呼び出すことによって他の動的メソッドにデリゲートを作成するコードを生成します。 代わりに、使用、 <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> メソッド、デリゲートを作成します。 デリゲート コンス トラクターで作成されたデリゲートには、ターゲットの動的メソッドへの参照がありません。 動的メソッドは、デリゲートが使用されているときに、ガベージ コレクションによるクリア可能性があります。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DynamicMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Emit.DynamicMethod DynamicMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>本体を持つが、現在のインスタンスによって生成される動的メソッドを取得します。</summary>
        <value>A <see cref="T:System.Reflection.Emit.DynamicMethod" /> の動的メソッドを表すオブジェクトを現在 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトがコードを生成します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトは常に動的メソッドを関連付けします。 目的、 <xref:System.Reflection.Emit.DynamicILInfo> クラスは、希望する開発者では、MSIL を生成を使用せず、動的メソッドに MSIL ストリーム、例外処理、およびローカル変数シグネチャを挿入する別の方法を提供する、 <xref:System.Reflection.Emit.ILGenerator> クラスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (byte[] signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(unsigned int8[] signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="signature">署名を含む配列。</param>
        <summary>現在のスコープ内で有効なトークンを取得 <see cref="T:System.Reflection.Emit.DynamicILInfo" />, 、関連付けられている動的メソッドのシグネチャを表します。</summary>
        <returns>メタデータと関連付けられている動的メソッドの MSIL ストリームに埋め込むことができるトークンです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シグネチャ blob については、共通言語基盤 \(CLI\) のドキュメント、特に「Partition II:: メタデータ Definition and Semantics」を参照してください。 このドキュメントはオンラインです。参照してください [ECMA C\# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) msdn および [Standard ECMA\-335 \- Common Language Infrastructure \(CLI\)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(class System.Reflection.Emit.DynamicMethod method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.Emit.DynamicMethod" />
      </Parameters>
      <Docs>
        <param name="method">呼び出す動的メソッド。</param>
        <summary>現在のスコープ内で有効なトークンを取得 <see cref="T:System.Reflection.Emit.DynamicILInfo" />, 、関連付けられたメソッドから呼び出される動的メソッドを表します。</summary>
        <returns>MSIL 命令の対象として、関連付けられている動的メソッドの MSIL のストリームに埋め込むことができるトークンです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドのオーバー ロードによって返されるトークンを使用すると、動的メソッドに現在関連付けられている動的メソッドから呼び出す <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトです。 呼び出すには、関連付けられている動的メソッドの再帰的の値を渡す、 <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" />
      </Parameters>
      <Docs>
        <param name="field">アクセスされるフィールド。</param>
        <summary>現在のスコープ内で有効なトークンを取得 <see cref="T:System.Reflection.Emit.DynamicILInfo" />, 、関連付けられている動的メソッドからアクセスするフィールドを表します。</summary>
        <returns>現在のスコープ内のフィールドにアクセスする MSIL 命令のオペランドとして使用できるトークン <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在関連付けられている動的メソッドでアクセスされる任意のフィールドに対してトークンを取得する必要があります <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトです。 使用して、 <xref:System.Type.GetField%2A?displayProperty=fullName> 取得するメソッド、 <xref:System.Reflection.FieldInfo> にアクセスする、フィールドを使用して、 <xref:System.Reflection.FieldInfo.FieldHandle%2A> を取得するプロパティ、 <xref:System.RuntimeFieldHandle>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
      </Parameters>
      <Docs>
        <param name="method">アクセスするメソッド。</param>
        <summary>現在のスコープ内で有効なトークンを取得 <see cref="T:System.Reflection.Emit.DynamicILInfo" />, 、関連付けられている動的メソッドからアクセスするメソッドを表します。</summary>
        <returns>などのメソッドにアクセスする MSIL 命令のオペランドとして使用できるトークン <see cref="F:System.Reflection.Emit.OpCodes.Call" /> または <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, 、現在のスコープ内で <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在関連付けられている動的メソッドでアクセスされるすべてのメソッドでトークンを取得する必要があります <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトです。 使用して、 <xref:System.Type.GetMethod%2A?displayProperty=fullName> 取得するメソッド、 <xref:System.Reflection.MethodInfo> にアクセスし、使用する方法を <xref:System.Reflection.MethodBase.MethodHandle%2A> を取得するプロパティ、 <xref:System.RuntimeMethodHandle>です。  
  
> [!NOTE]
>  ジェネリック型に属するメソッドを使用して、 <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> メソッドはオーバー ロードして、指定、 <xref:System.RuntimeTypeHandle> ジェネリック型のです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeTypeHandle type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeTypeHandle type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="type">使用する型。</param>
        <summary>現在のスコープ内で有効なトークンを取得 <see cref="T:System.Reflection.Emit.DynamicILInfo" />, 、関連付けられている動的メソッドで使用される型を表します。</summary>
        <returns>現在のスコープ内の型を必要と MSIL 命令のオペランドとして使用できるトークン <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドのオーバー ロードによって返されるトークンを使用すると、ローカル変数の型を定義し、出力に現在関連付けられている動的メソッドの型のインスタンスを作成する MSIL <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトです。  
  
 取得する、 <xref:System.RuntimeTypeHandle> 型を表すを使用して、 <xref:System.Type.TypeHandle%2A?displayProperty=fullName> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (string literal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(string literal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="literal" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="literal">使用する文字列。</param>
        <summary>現在のスコープ内で有効なトークンを取得 <see cref="T:System.Reflection.Emit.DynamicILInfo" />, 、関連付けられている動的メソッドで使用されるリテラル文字列を表します。</summary>
        <returns>現在のスコープ内の文字列を必要とする MSIL 命令のオペランドとして使用できるトークン <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトです。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="field">アクセスされるフィールド。</param>
        <param name="contextType">フィールドが属するジェネリック型。</param>
        <summary>現在のスコープ内で有効なトークンを取得 <see cref="T:System.Reflection.Emit.DynamicILInfo" />, 、フィールドが指定したジェネリック型では、関連の動的メソッドからアクセスするフィールドを表します。</summary>
        <returns>現在のスコープ内のフィールドにアクセスする MSIL 命令のオペランドとして使用できるトークン <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在関連付けられている動的メソッドでアクセスされる任意のフィールドに対してトークンを取得する必要があります <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトです。 使用して、 <xref:System.Type.GetField%2A?displayProperty=fullName> 取得するメソッド、 <xref:System.Reflection.FieldInfo> にアクセスし、使用して目的のフィールドの <xref:System.Reflection.FieldInfo.FieldHandle%2A> を取得するプロパティ、 <xref:System.RuntimeFieldHandle>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="method">メソッド。</param>
        <param name="contextType">ジェネリック型、メソッドに属しています。</param>
        <summary>現在のスコープ内で有効なトークンを取得 <see cref="T:System.Reflection.Emit.DynamicILInfo" />, 、ジェネリック型でメソッドを表します。</summary>
        <returns>などのメソッドにアクセスする MSIL 命令のオペランドとして使用できるトークン <see cref="F:System.Reflection.Emit.OpCodes.Call" /> または <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, 、現在のスコープ内で <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在関連付けられている動的メソッドで呼び出されるメソッドのトークンを取得する必要があります <xref:System.Reflection.Emit.DynamicILInfo> オブジェクトです。 使用して、 <xref:System.Type.GetMethod%2A?displayProperty=fullName> 取得するメソッド、 <xref:System.Reflection.MethodInfo> を呼び出すには、し、使用するメソッドを <xref:System.Reflection.MethodBase.MethodHandle%2A> を取得するプロパティ、 <xref:System.RuntimeMethodHandle>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte[] code, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8[] code, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte[]" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code">MSIL ストリームを格納する配列。</param>
        <param name="maxStackSize">メソッドを実行するときに、オペランド スタック上の項目の最大数。</param>
        <summary>関連付けられている動的メソッドのコードの本文を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 MSIL ストリームでは、有効性チェックは行われません。  
  
 もう一度このメソッドを呼び出すと、2 番目の最初の MSIL ストリームが置き換えられます。  
  
 独自のメタデータと MSIL を生成するには、共通言語基盤 \(CLI\) ドキュメント、特に「Partition II:: メタデータ Definition and Semantics」と「Partition III: CIL Instruction Set」に関する知識が必要です。 このドキュメントはオンラインです。参照してください [ECMA C\# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) msdn および [Standard ECMA\-335 \- Common Language Infrastructure \(CLI\)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte* code, int codeSize, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8* code, int32 codeSize, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte*" />
        <Parameter Name="codeSize" Type="System.Int32" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code">MSIL ストリームを格納するバイト配列へのポインター。</param>
        <param name="codeSize">MSIL ストリームのバイト数。</param>
        <param name="maxStackSize">メソッドを実行するときに、オペランド スタック上の項目の最大数。</param>
        <summary>関連付けられている動的メソッドのコードの本文を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 MSIL ストリームでは、有効性チェックは行われません。  
  
 もう一度このメソッドを呼び出すと、2 番目の最初の MSIL ストリームが置き換えられます。  
  
 独自のメタデータと MSIL を生成するには、共通言語基盤 \(CLI\) のドキュメント、特に「Partition II:: メタデータ Definition and Semantics」と知識が必要ですと"パーティション III: CIL 命令セットです。"。 このドキュメントはオンラインです。参照してください [ECMA C\# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) msdn および [Standard ECMA\-335 \- Common Language Infrastructure \(CLI\)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="code" /> <see langword="null" /> と <paramref name="codeSize" /> が 0 より大きい。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="codeSize" /> が 0 未満です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte[] exceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8[] exceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="exceptions">例外のメタデータを格納する配列。</param>
        <summary>関連付けられている動的メソッドの例外のメタデータを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メソッドの例外のメタデータは、すべてのサイズと位置を定義 `try`, 、`catch`, 、`finally`, 、フィルター、および fault ブロックします。 このメタデータのレイアウトについては、共通言語基盤 \(CLI\) のドキュメント、特に「Partition II:: メタデータ Definition and Semantics」を参照してください。 このドキュメントはオンラインです。参照してください [ECMA C\# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) msdn および [Standard ECMA\-335 \- Common Language Infrastructure \(CLI\)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte* exceptions, int exceptionsSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8* exceptions, int32 exceptionsSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte*" />
        <Parameter Name="exceptionsSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="exceptions">例外のメタデータを格納するバイト配列へのポインター。</param>
        <param name="exceptionsSize">例外のメタデータのバイト数。</param>
        <summary>関連付けられている動的メソッドの例外のメタデータを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メソッドの例外のメタデータは、すべてのサイズと位置を定義 `try`, 、`catch`, 、`finally`, 、フィルター、および fault ブロックします。 このメタデータのレイアウトについては、共通言語基盤 \(CLI\) ドキュメント、特に「Partition II:: メタデータ Definition and Semantics」と「Partition III: CIL Instruction Set」を参照してください。 このドキュメントはオンラインです。参照してください [ECMA C\# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) msdn および [Standard ECMA\-335 \- Common Language Infrastructure \(CLI\)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exceptions" /> <see langword="null" /> と <paramref name="exceptionSize" /> が 0 より大きい。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="exceptionSize" /> が 0 未満です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte[] localSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8[] localSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="localSignature">関連付けられたローカル変数のレイアウトを格納している配列 <see cref="T:System.Reflection.Emit.DynamicMethod" />します。</param>
        <summary>関連付けられている動的メソッドのローカル変数のレイアウトを記述するローカル変数シグネチャを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ローカル変数シグネチャでは、メソッドのローカル変数のレイアウトについて説明します。 ローカル変数シグネチャの構築を簡略化を使用して、 `static` \(`Shared` Visual Basic で\) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> 取得するメソッド、 <xref:System.Reflection.Emit.SignatureHelper> ローカルのシグネチャのです。  
  
 詳細については、ローカル変数シグネチャは、共通言語基盤 \(CLI\) のドキュメント、特に「Partition II:: メタデータ Definition and Semantics」を参照してください。 このドキュメントはオンラインです。参照してください [ECMA C\# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) msdn および [Standard ECMA\-335 \- Common Language Infrastructure \(CLI\)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte* localSignature, int signatureSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8* localSignature, int32 signatureSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte*" />
        <Parameter Name="signatureSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localSignature">関連付けられたローカル変数のレイアウトを格納している配列 <see cref="T:System.Reflection.Emit.DynamicMethod" />します。</param>
        <param name="signatureSize">シグネチャのバイト数。</param>
        <summary>関連付けられている動的メソッドのローカル変数のレイアウトを記述するローカル変数シグネチャを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ローカル変数シグネチャでは、メソッドのローカル変数のレイアウトについて説明します。 ローカル変数シグネチャの構築を簡略化を使用して、 `static` \(`Shared` Visual Basic で\) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName> 取得するメソッド、 <xref:System.Reflection.Emit.SignatureHelper> ローカルのシグネチャのです。  
  
 詳細については、ローカル変数シグネチャは、共通言語基盤 \(CLI\) のドキュメント、特に「Partition II:: メタデータ Definition and Semantics」を参照してください。 このドキュメントはオンラインです。参照してください [ECMA C\# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) msdn および [Standard ECMA\-335 \- Common Language Infrastructure \(CLI\)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International Web サイトにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="localSignature" /> <see langword="null" /> と <paramref name="signatureSize" /> が 0 より大きい。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="signatureSize" /> が 0 未満です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>関連付けられている動的メソッドのコードの本文を設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetExceptions">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>関連付けられている動的メソッドの例外のメタデータを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetTokenFor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のスコープ内で有効なトークンを取得 <see cref="T:System.Reflection.Emit.DynamicILInfo" />, 、文字列、フィールド、メソッド、型、または関連付けられている動的メソッドの MSIL ストリーム内の署名を表します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SetLocalSignature">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>関連付けられている動的メソッドのローカル変数のレイアウトを記述するローカル変数シグネチャを設定します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>