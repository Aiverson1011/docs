<Type Name="EntityConnection" FullName="System.Data.EntityClient.EntityConnection">
  <TypeSignature Language="C#" Value="public sealed class EntityConnection : System.Data.Common.DbConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EntityConnection extends System.Data.Common.DbConnection" />
  <TypeSignature Language="DocId" Value="T:System.Data.EntityClient.EntityConnection" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>概念モデルおよびデータ ソース接続への参照が含まれています。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.Common.CommandTrees> や <xref:System.Data.Objects.ObjectContext> などのオブジェクトが不注意でメタデータと同期しなくなるのを防ぐため、<xref:System.Data.EntityClient.EntityConnection> でそのメタデータをロックする必要があります。 メタデータがロックされると、接続文字列に変更を加えることができなくなります。 メタデータがロックされる 2 つのシナリオを次に示します。  
  
-   既定のコンストラクター、または接続文字列を受け入れる <xref:System.Data.EntityClient.EntityConnection> コンストラクターによって <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> インスタンスが構築された場合。 いずれの場合も、接続が開かれる前に接続文字列が複数回変更される可能性があります。<xref:System.Data.EntityClient.EntityConnection.Open%2A> または <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> を呼び出すと、メタデータがロックされます。  
  
-   <xref:System.Data.EntityClient.EntityConnection> と <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> を受け入れる <xref:System.Data.Metadata.Edm.MetadataWorkspace> コンストラクターによって、<xref:System.Data.Common.DbConnection> インスタンスが構築された場合。 この場合、メタデータは構築時にロックされます。 接続文字列に変更を加えることはできません。  
  
 メタデータが読み込まれると、<xref:System.Data.EntityClient.EntityConnection> は、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します。  
  
 コード例については、「[Working with EntityClient](http://msdn.microsoft.com/ja-jp/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)」を参照してください。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Data.EntityClient.EntityConnection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 To avoid inadvertently putting objects such as <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, <xref:System.Data.EntityClient.EntityConnection> must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:  
  
-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the default constructor, or through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> constructor, which accepts a connection string. In either case the connection string might be changed multiple times before the connection is opened. Calling <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.  
  
-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> constructor, which accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case the metadata is locked at construction time. No changes to the connection string are ever allowed.  
  
 When metadata is loaded, the <xref:System.Data.EntityClient.EntityConnection> verifies that the conceptual model, the storage model, and the mapping file are all present.  
  
 For code examples, see [Working with EntityClient](http://msdn.microsoft.com/ja-jp/dec4728c-8dff-4e30-abe0-0f78fb5d5af5).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.EntityClient.EntityConnection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 To avoid inadvertently putting objects such as <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, <xref:System.Data.EntityClient.EntityConnection> must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:  
  
-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the default constructor, or through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> constructor, which accepts a connection string. In either case the connection string might be changed multiple times before the connection is opened. Calling <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.  
  
-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> constructor, which accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case the metadata is locked at construction time. No changes to the connection string are ever allowed.  
  
 When metadata is loaded, the <xref:System.Data.EntityClient.EntityConnection> verifies that the conceptual model, the storage model, and the mapping file are all present.  
  
 For code examples, see [Working with EntityClient](http://msdn.microsoft.com/ja-jp/dec4728c-8dff-4e30-abe0-0f78fb5d5af5).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">プロバイダー固有の接続文字列。</param>
        <summary>接続文字列に基づいて、<see cref="T:System.Data.EntityClient.EntityConnection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The  generate a named connection string that is stored in the application's configuration file. This named connection string can be supplied in place of the **parameterReference tag is not supported!!!!**  
 parameter when you instantiate the <xref:System.Data.EntityClient.EntityConnection> class.  
  
 To avoid inadvertently putting objects <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, <xref:System.Data.EntityClient.EntityConnection> must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:  
  
-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the default constructor, or through this constructor \(<xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>\), which accepts a connection string. In either case the connection string might be changed multiple times before the connection is opened. Calling <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.  
  
-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> constructor, which accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case the metadata is locked at construction time. No changes to the connection string are ever allowed.  
  
 When metadata is loaded, the <xref:System.Data.EntityClient.EntityConnection> verifies that the conceptual model, the storage model, and the mapping file are all present.  
  
 For code examples, see [Working with EntityClient](http://msdn.microsoft.com/ja-jp/dec4728c-8dff-4e30-abe0-0f78fb5d5af5).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無効な接続文字列キーワードが指定されたか、必要な接続文字列キーワードが指定されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityConnection (System.Data.Metadata.Edm.MetadataWorkspace workspace, System.Data.Common.DbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Metadata.Edm.MetadataWorkspace workspace, class System.Data.Common.DbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workspace" Type="System.Data.Metadata.Edm.MetadataWorkspace" />
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="workspace">この <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> に関連付けられた <see cref="T:System.Data.EntityClient.EntityConnection" />。</param>
        <param name="connection">この <see cref="T:System.Data.EntityClient.EntityConnection" /> オブジェクトの基になるデータ ソース接続。</param>
        <summary>指定した <see cref="T:System.Data.EntityClient.EntityConnection" /> および <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> を使用して、<see cref="T:System.Data.Common.DbConnection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンストラクターを使用すると、ディスク上のファイル、またはアセンブリの埋め込みリソースからではないメタデータから <xref:System.Data.EntityClient.EntityConnection> を作成できます。  
  
 <xref:System.Data.Common.CommandTrees> や <xref:System.Data.Objects.ObjectContext> などのオブジェクトが不注意でメタデータと同期しなくなるのを防ぐため、<xref:System.Data.EntityClient.EntityConnection> でそのメタデータをロックする必要があります。 メタデータがロックされると、接続文字列に変更を加えることができなくなります。 メタデータがロックされる 2 つのシナリオを次に示します。  
  
-   既定のコンストラクター、または接続文字列を受け入れる <xref:System.Data.EntityClient.EntityConnection> コンストラクターによって <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> インスタンスが構築された場合。 いずれの場合も、接続が開かれる前に接続文字列が複数回変更される可能性があります。<xref:System.Data.EntityClient.EntityConnection.Open%2A> または <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> を呼び出すと、メタデータがロックされます。  
  
-   <xref:System.Data.EntityClient.EntityConnection> と <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> を受け入れるこのコンストラクター \(<xref:System.Data.Metadata.Edm.MetadataWorkspace>\) によって、<xref:System.Data.Common.DbConnection> インスタンスが構築された場合。 この場合、メタデータは構築時にロックされます。 接続文字列に変更を加えることはできません。  
  
 メタデータが読み込まれると、<xref:System.Data.EntityClient.EntityConnection> は、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workspace" /> パラメーターまたは <paramref name="connection" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">概念モデルがワークスペースから見つかりません。  
  
 または  
  
 マッピング ファイルがワークスペースから見つかりません。  
  
 または  
  
 ストレージ モデルがワークスペースから見つかりません。  
  
 または  
  
 <paramref name="connection" /> 閉じた状態ではありません。</exception>
        <exception cref="T:System.Data.ProviderIncompatibleException">
          <paramref name="connection" /> ADO.NET Entity Framework と互換性のあるプロバイダーではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基になるプロバイダーを使用してトランザクションを開始します。</summary>
        <returns>新しい <see cref="T:System.Data.EntityClient.EntityTransaction" />。 返される <see cref="T:System.Data.EntityClient.EntityTransaction" /> インスタンスを後で <see cref="T:System.Data.EntityClient.EntityCommand" /> と関連付けて、そのトランザクション内でコマンドを実行することができます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> メソッドは <xref:System.Data.IsolationLevel.Unspecified> トランザクション分離レベルを使用します。 別の分離レベルを指定する場合は、<xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> を呼び出します。 この値は、基になるプロバイダーが変わると異なって解釈されることがあります。 複数のプロバイダーでアプリケーションを移植可能にするには、<xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> を呼び出して、トランザクション分離レベルを明示的に指定する必要があります。  
  
 いつでも、<xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> で作成されたアクティブなトランザクションが 2 つ以上存在することはできません。 現在トランザクションが存在する <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> に対して <xref:System.Data.EntityClient.EntityConnection> オーバーロードを呼び出そうとすると、<xref:System.InvalidOperationException> が発生します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基になるプロバイダーが不明です。  
  
 または  
  
 <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> に対する呼び出しが、既に現在のトランザクションが存在する <see cref="T:System.Data.EntityClient.EntityConnection" /> に対して行われました。  
  
 または  
  
 <see cref="T:System.Data.EntityClient.EntityConnection" /> の状態が <see cref="F:System.Data.ConnectionState.Open" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityTransaction BeginTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">トランザクションの分離レベル。</param>
        <summary>基になるプロバイダーを使用して、指定の分離レベルでトランザクションを開始します。</summary>
        <returns>新しい <see cref="T:System.Data.EntityClient.EntityTransaction" />。 返される <see cref="T:System.Data.EntityClient.EntityTransaction" /> インスタンスを後で <see cref="T:System.Data.EntityClient.EntityCommand" /> と関連付けて、そのトランザクション内でコマンドを実行することができます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 いつでも、<xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> で作成されたアクティブなトランザクションが 2 つ以上存在することはできません。 現在トランザクションが存在する <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> に対して <xref:System.Data.EntityClient.EntityConnection> オーバーロードを呼び出そうとすると、<xref:System.InvalidOperationException> が発生します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基になるプロバイダーが不明です。  
  
 または  
  
 <see cref="M:System.Data.EntityClient.EntityConnection.BeginTransaction" /> に対する呼び出しが、既に現在のトランザクションが存在する <see cref="T:System.Data.EntityClient.EntityConnection" /> に対して行われました。  
  
 または  
  
 <see cref="T:System.Data.EntityClient.EntityConnection" /> の状態が <see cref="F:System.Data.ConnectionState.Open" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string databaseName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string databaseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="databaseName">サポートされていません。</param>
        <summary>サポートされていません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.EntityClient.EntityConnection.ChangeDatabase%2A> から派生する場合は、メソッドが必要な <xref:System.Data.Common.DbConnection>です。 このメソッドはサポートされていませんし、発生させる、 <xref:System.NotSupportedException>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">メソッドが呼び出されたとき。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データベースへの接続を閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the underlying data provider is not known, the call to <xref:System.Data.EntityClient.EntityConnection.Close%2A> does nothing.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続を閉じるときにエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.EntityClient.EntityConnection" /> 接続文字列を取得または設定します。</summary>
        <value>データ ソースへの初期接続を確立するために必要な接続文字列。 既定値は空の文字列です。 閉じている接続では、現在の設定値が返されます。 値が設定されていない場合は、空の文字列が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An **languageKeyword tag is not supported!!!!**  
 connection string consists of a sequence of keyword\/value parameter pairs separated by semicolons. The equals sign \(\=\) connects each keyword and its value. The following table lists the valid names for keyword values in the <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A>.  
  
|Keyword|Description|  
|-------------|-----------------|  
|`Provider`|Required if the **languageKeyword tag is not supported!!!!**<br /> keyword is not specified. The provider name, which is used to retrieve the <xref:System.Data.Common.DbProviderFactory> object for the underlying provider. This value is constant.<br /><br /> When the **languageKeyword tag is not supported!!!!**<br /> keyword is not included in the connection string, a non\-empty value for the **languageKeyword tag is not supported!!!!**<br /> keyword is required. This keyword is mutually exclusive with the **languageKeyword tag is not supported!!!!**<br /> keyword.|  
|`Provider Connection String`|Optional. Specifies the provider\-specific connection string that is passed to the underlying data source. This connection string is expressed by using valid keyword\/value pairs for the data provider. An invalid **languageKeyword tag is not supported!!!!**<br /> will cause a run\-time error when it is evaluated by the data source.<br /><br /> This keyword is mutually exclusive with the **languageKeyword tag is not supported!!!!**<br /> keyword.<br /><br /> The value of the **languageKeyword tag is not supported!!!!**<br /> must be surrounded by quotes. The following is an example:<br /><br /> `Provider Connection String ="Server=serverName; User ID = userID";`<br /><br /> The following example is not going to work:<br /><br /> `Provider Connection String =Server=serverName; User ID = userID`|  
|`Metadata`|Required if the **languageKeyword tag is not supported!!!!**<br /> keyword is not specified. A pipe\-delimited list of directories, files, and resource locations in which to look for model and mapping information. The following is an example:<br /><br /> `Metadata=`<br /><br /> `c:\model &#124; c:\model\sql\mapping.msl;`<br /><br /> Blank spaces on each side of the pipe separator are ignored.<br /><br /> This keyword is mutually exclusive with the **languageKeyword tag is not supported!!!!**<br /> keyword.|  
|`Name`|The application can optionally specify the connection name in an application configuration file that provides the required keyword\/value connection string values. In this case, you cannot supply them directly in the connection string. The **languageKeyword tag is not supported!!!!**<br /> keyword is not allowed in a configuration file.<br /><br /> When the **languageKeyword tag is not supported!!!!**<br /> keyword is not included in the connection string, a non\-empty values for Provider keyword is required.<br /><br /> This keyword is mutually exclusive with all the other connection string keywords.|  
  
 The application can supply the keyword\/values directly in the <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> property, or it can specify a value for the **languageKeyword tag is not supported!!!!**  
 keyword. If the **languageKeyword tag is not supported!!!!**  
 keyword is specified, the connection string keyword\/values are retrieved from an application configuration file, as follows:  
  
 `Name=AdventureWorksEntities;`  
  
 If the **languageKeyword tag is not supported!!!!**  
 keyword is used in the <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> property, other keywords are not allowed. The **languageKeyword tag is not supported!!!!**  
 keyword refers to a named connection string that is stored in the **languageKeyword tag is not supported!!!!**  
 section in an application configuration file, as shown in the following example. The **languageKeyword tag is not supported!!!!**  
, **languageKeyword tag is not supported!!!!**  
, and **languageKeyword tag is not supported!!!!**  
values are retrieved from the configuration file at run time.  
  
  
  
 The keyword\/value pairs can also be supplied directly in the <xref:System.Data.EntityClient.EntityConnection.ConnectionString%2A> property, as shown in the following example. In this case, the **languageKeyword tag is not supported!!!!**  
 keyword is not used.  
  
```  
"Provider=System.Data.SqlClient;  
Metadata=c:\metadata|c:\Metadata\Sql;  
Provider Connection String= 'Data Source=localhost;  
    Initial Catalog=AdventureWorks;Integrated Security=True;Connection Timeout=60' "  
```  
  
 To avoid inadvertently putting objects such as <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, <xref:System.Data.EntityClient.EntityConnection> must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:  
  
-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the default constructor, or through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> constructor, which accepts a connection string. In either case the connection string might be changed multiple times before the connection is opened. Calling <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.  
  
-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> constructor, which accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case the metadata is locked at construction time. No changes to the connection string are ever allowed.  
  
 When metadata is loaded, the <xref:System.Data.EntityClient.EntityConnection> verifies that the conceptual model, the storage model, and the mapping file are all present.  
  
   
  
## 例  
 The following example demonstrates how to use the <xref:System.Data.EntityClient.EntityConnectionStringBuilder> in conjunction with a <xref:System.Data.SqlClient.SqlConnectionStringBuilder>. The code sets properties of a **languageKeyword tag is not supported!!!!**  
 to create a <xref:System.Data.SqlClient.SqlConnection> string that supplies part of the underlying provider connection string. Note that the **languageKeyword tag is not supported!!!!**  
 name cannot be set by using the **languageKeyword tag is not supported!!!!**  
, because it does not use valid **languageKeyword tag is not supported!!!!**  
 syntax. The code creates the <xref:System.Data.EntityClient.EntityConnection> string by setting **languageKeyword tag is not supported!!!!**  
 properties.  
  
 [!code-csharp[eSQLBasicExamples\#BuildingConnectionStringWithEntityCommand](~/samples/snippets/csharp/VS_Snippets_Data/eSQLBasicExamples/CS/Program.cs#buildingconnectionstringwithentitycommand)]
 [!code-vb[eSQLBasicExamples\#BuildingConnectionStringWithEntityCommand](~/samples/snippets/visualbasic/VS_Snippets_Data/eSQLBasicExamples/VB/Program.vb#buildingconnectionstringwithentitycommand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Data.EntityClient.EntityConnection.ConnectionString" /> の <see cref="EntityConnection" /> を初期化した後に、<see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> プロパティを設定しようとしました。<see cref="MetadataWorkspace" /> が初期化されるのは、<see cref="EntityConnection" /> をパラメーターに取るオーバーロードから <see cref="MetadataWorkspace" /> インスタンスを構築した場合か、または <see cref="T:System.Data.EntityClient.EntityConnection" /> インスタンスが開かれた場合のいずれかです。</exception>
        <exception cref="T:System.ArgumentException">無効な接続文字列キーワードが指定されたか、必要な接続文字列キーワードが指定されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ConnectionTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続を確立する際、試行を終了してエラーを生成するまでに待機する秒数を取得します。</summary>
        <value>接続が開くのを待機する時間 \(秒単位\)。 既定値は、基になるデータ プロバイダーの既定のタイムアウト値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Returns zero if the underlying data provider is not known.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">0 より小さい値が設定されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.EntityClient.EntityCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityClient.EntityCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityClient.EntityCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.EntityClient.EntityCommand" /> をこの <see cref="P:System.Data.EntityClient.EntityCommand.Connection" /> に設定して、<see cref="T:System.Data.EntityClient.EntityConnection" /> の新しいインスタンスを作成します。</summary>
        <returns>
          <see cref="T:System.Data.EntityClient.EntityCommand" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基になるデータ プロバイダーの名前が不明です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.CreateDbCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.Database" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のデータベースの名前、または接続が開かれた後に使用されるデータベースの名前を取得します。</summary>
        <value>値、 <see langword="Database" /> 基になるデータ プロバイダーのプロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 特定のキーワード値など `Database`, にマップされる、 <xref:System.Data.EntityClient.EntityConnection.Database%2A> プロパティには、基になるデータ プロバイダーのマニュアルを参照してください。[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] 等価のキーワードは、ドキュメントを参照して、 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基になるデータ プロバイダーが不明です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続先のデータ ソースの名前またはネットワーク アドレスを取得します。</summary>
        <value>データ ソースの名前。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For the specific keyword value, such as **languageKeyword tag is not supported!!!!**  
, that maps to the <xref:System.Data.EntityClient.EntityConnection.DataSource%2A> property, see the documentation for the underlying data provider. For [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] equivalent keywords, see the documentation for the <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">基になるデータ プロバイダーが不明です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DbProviderFactory">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbProviderFactory DbProviderFactory" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.DbProviderFactory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">登録先のトランザクション オブジェクト。</param>
        <summary>この <see cref="T:System.Data.EntityClient.EntityConnection" /> を指定されたトランザクションに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method forwards the call to the data source connection to explicitly enlist in the passed <xref:System.Transactions.Transaction>.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Data.EntityClient.EntityConnection" /> の状態が <see cref="F:System.Data.ConnectionState.Open" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataWorkspace">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> に関連付けられている <see cref="T:System.Data.EntityClient.EntityConnection" /> を返します。</summary>
        <returns>この <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> に関連付けられている <see cref="T:System.Data.EntityClient.EntityConnection" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.Metadata.Edm.MetadataWorkspace> クラスが作成されると、<xref:System.Data.EntityClient.EntityConnection> が自動的に作成されます。 作成プロセスで、メタデータ固有の例外がスローされることがあります。 メタデータがメモリに読み込まれると、Entity Data Model \(EDM\) アプリケーションは、そのメタデータを使用して、基になるデータ ソースに関する情報にアクセスします。 詳細については、「[ADO.NET Metadata](http://msdn.microsoft.com/ja-jp/196097a5-a791-4ac4-9e6a-805685d481d5)」を参照してください。  
  
 <xref:System.Data.Common.CommandTrees> や <xref:System.Data.Objects.ObjectContext> などのオブジェクトが不注意でメタデータと同期しなくなるのを防ぐため、<xref:System.Data.EntityClient.EntityConnection> でそのメタデータをロックする必要があります。 メタデータがロックされると、接続文字列に変更を加えることができなくなります。 メタデータがロックされる 2 つのシナリオを次に示します。  
  
-   既定のコンストラクター、または接続文字列を受け入れる <xref:System.Data.EntityClient.EntityConnection> コンストラクターによって <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> インスタンスが構築された場合。 いずれの場合も、接続が開かれる前に接続文字列が複数回変更される可能性があります。<xref:System.Data.EntityClient.EntityConnection.Open%2A> または <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> では、メタデータがロックされます。  
  
-   <xref:System.Data.EntityClient.EntityConnection> と <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> を受け入れる <xref:System.Data.Metadata.Edm.MetadataWorkspace> コンストラクターによって、<xref:System.Data.Common.DbConnection> インスタンスが構築された場合。 この場合、メタデータは構築時にロックされます。 接続文字列に変更を加えることはできません。  
  
 メタデータが読み込まれると、<xref:System.Data.EntityClient.EntityConnection> は、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.MetadataException">インライン接続文字列を含む、無効な <see langword="Metadata" /> キーワード値。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.EntityClient.EntityConnection.Open" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>呼び出して、基になるデータ プロバイダーのデータ ソースへの接続を確立<see langword=" Open" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.Common.CommandTrees> や <xref:System.Data.Objects.ObjectContext> などのオブジェクトが不注意でメタデータと同期しなくなるのを防ぐため、<xref:System.Data.EntityClient.EntityConnection> でそのメタデータをロックする必要があります。 メタデータがロックされると、接続文字列に変更を加えることができなくなります。 メタデータがロックされる 2 つのシナリオを次に示します。  
  
-   既定のコンストラクター、または接続文字列を受け入れる <xref:System.Data.EntityClient.EntityConnection> コンストラクターによって <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> インスタンスが構築された場合。 いずれの場合も、接続が開かれる前に接続文字列が複数回変更される可能性があります。<xref:System.Data.EntityClient.EntityConnection.Open%2A> または <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> を呼び出すと、メタデータがロックされます。  
  
-   <xref:System.Data.EntityClient.EntityConnection> と <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> を受け入れる <xref:System.Data.Metadata.Edm.MetadataWorkspace> コンストラクターによって、<xref:System.Data.Common.DbConnection> インスタンスが構築された場合。 この場合、メタデータは構築時にロックされます。 接続文字列に変更を加えることはできません。  
  
 メタデータが読み込まれると、<xref:System.Data.EntityClient.EntityConnection> は、概念モデル、ストレージ モデル、およびマッピング ファイルがすべて存在することを確認します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が開いたときにエラーが発生したか、基になるデータ プロバイダーの名前が不明です。</exception>
        <exception cref="T:System.Data.MetadataException">インライン接続文字列を含む、無効な <see langword="Metadata" /> キーワード値。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.ServerVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントが接続されているデータ ソースのバージョンを含む文字列を取得します。</summary>
        <value>プロバイダー接続文字列に含まれるデータ ソースのバージョン。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">接続が閉じています。</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.ConnectionState" /> が開いている場合は、基になるプロバイダーの <see cref="T:System.Data.EntityClient.EntityConnection" /> プロパティを取得します。 それ以外の場合、<see cref="F:System.Data.ConnectionState.Closed" /> を返します。</summary>
        <value>
          <see cref="F:System.Data.ConnectionState.Open" /> の内部状態と基になるプロバイダーの <see cref="T:System.Data.EntityClient.EntityConnection" /> が両方開いている場合にのみ <see cref="T:System.Data.ConnectionState" /> になります。<see cref="T:System.Data.EntityClient.EntityConnection" /> の状態が開いていてもプロバイダーの <see cref="T:System.Data.ConnectionState" /> が閉じている場合、このプロパティは <see cref="F:System.Data.ConnectionState.Broken" /> を返します。 それ以外を返します <see cref="F:System.Data.ConnectionState.Closed" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreConnection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection StoreConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection StoreConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.EntityClient.EntityConnection.StoreConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Data.EntityClient.EntityConnection" /> オブジェクトで使用される、基になるデータ ソース接続へのアクセスを提供します。</summary>
        <value>データ ソース接続の <see cref="T:System.Data.Common.DbConnection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.EntityClient.EntityConnection> オブジェクトが閉じている場合、返されるデータ ソース接続は閉じられます。 開いている場合は、開いているデータ ソース接続が返されます。 データ ソース接続情報を設定すると、返される値は常に null 以外になります。 データ ソース接続情報がない \(たとえば既定のコンストラクターが使用されたために接続文字列が後で設定されなかったなどの\) 場合は、null 参照が返されます。  
  
 Entity Framework で使用された同一のデータ ソース接続は、アプリケーションの他の部分と共有できます。 データ ソース接続は、<xref:System.Data.Common.DbConnection> の <xref:System.Data.Objects.ObjectContext.Connection%2A> プロパティ、または <xref:System.Data.Objects.ObjectContext> の <xref:System.Data.EntityClient.EntityConnection.StoreConnection%2A> プロパティからの <xref:System.Data.EntityClient.EntityConnection> オブジェクトとして返されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データベース トランザクションを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>