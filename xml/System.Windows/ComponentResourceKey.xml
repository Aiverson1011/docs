<Type Name="ComponentResourceKey" FullName="System.Windows.ComponentResourceKey">
  <TypeSignature Language="C#" Value="public class ComponentResourceKey : System.Windows.ResourceKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ComponentResourceKey extends System.Windows.ResourceKey" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ComponentResourceKey" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.ResourceKey</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.ComponentResourceKeyConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>追加の識別子と同様に、外部アセンブリ内のクラス名に基づくリソース キーを参照または定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] についてを参照してください [ComponentResourceKey マークアップ拡張機能](http://msdn.microsoft.com/ja-jp/d6bcdbe6-61b3-40a7-b381-4e02185b5a85)します。  
  
 このクラスは、アセンブリと識別子の型に基づくキーを作成するのに便利なオブジェクトの種類を実装します。 定義するか、または型を参照しているため、特定の要求する必要はありません <xref:System.Windows.ResourceDictionary>, 、リソースの 1 つ以上のセットは、それぞれの型で差別化されたアセンブリに存在できると、 <xref:System.Windows.ComponentResourceKey>です。  
  
 2 つの方法を定義する、 <xref:System.Windows.ComponentResourceKey>です。  
  
 コントロール クラス コードを返す静的プロパティを定義するには簡単にアクセスできるキーを設定する場合、 <xref:System.Windows.ComponentResourceKey>, で構築された、 <xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A> 外部リソース アセンブリに存在して、 <xref:System.Windows.ComponentResourceKey.ResourceId%2A>です。 カスタムの元の外部リソース アセンブリをスワップすることによって、アセンブリでは、コントロールの代替の既定のスタイルを定義するため、キーを使用できます。 大きなコントロール スタイルまたはテンプレートのカスタマイズのエントリ ポイントを公開する内の名前付きリソース パーツを定義することもできます。 これは、コントロールのテーマ リソース ディクショナリを定義する場合に特に便利です。  
  
 使用することも、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [ComponentResourceKey マークアップ拡張機能](http://msdn.microsoft.com/ja-jp/d6bcdbe6-61b3-40a7-b381-4e02185b5a85) キーの緩やかなインスタンスを作成するには、直接の詳細な構文でします。  これは、カスタマイズに見つけにくい、他のアセンブリのプライベート リソースを宣言する場合に便利です。  
  
<a name="xamlTextUsage_ComponentResourceKey"></a>   
## XAML テキストの使用方法  
 「解説」を参照してください。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComponentResourceKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ComponentResourceKey.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.ComponentResourceKey" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The default constructor is not generally used, because a <xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A> value and <xref:System.Windows.ComponentResourceKey.ResourceId%2A> value are required for proper initialization. The default constructor exists primarily to support [ComponentResourceKey Markup Extension](http://msdn.microsoft.com/ja-jp/d6bcdbe6-61b3-40a7-b381-4e02185b5a85) XAML usage in named parameter form.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComponentResourceKey (Type typeInTargetAssembly, object resourceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type typeInTargetAssembly, object resourceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeInTargetAssembly" Type="System.Type" />
        <Parameter Name="resourceId" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="typeInTargetAssembly">リソース キーを定義する型。</param>
        <param name="resourceId">これを区別するために一意の識別子 <see cref="T:System.Windows.ComponentResourceKey" /> に関連付けられている他のユーザーから、 <c>typeInTargetAssembly</c> 型です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.ComponentResourceKey" /> , を指定して、 <see cref="T:System.Type" /> 、キー、およびその他のリソース識別子として使用するオブジェクトを定義します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、最初の中で最も重要なシナリオでの 2 つのシナリオがあります。  
  
-   作成、 <xref:System.Windows.ComponentResourceKey> は、カスタム コントロール クラスにパブリックな静的フィールドとして公開されます。 これを簡単にを通じてテンプレートで定義されているリソースへのアクセス制御の `{x:Static}` テンプレート プロパティの値を使用します。  
  
-   サポート [ComponentResourceKey マークアップ拡張機能](http://msdn.microsoft.com/ja-jp/d6bcdbe6-61b3-40a7-b381-4e02185b5a85) コンポーネント リソースを参照するサード パーティの利用できる 1 つの方法は、位置指定パラメーター形式では XAML を使用します。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Windows.ComponentResourceKey> スタイルのカスタマイズのエントリ ポイントを提供するコントロール クラスの静的なキーとして、公開されています。  
  
 [!code-csharp[CorePseudocode\#CRKCode](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#crkcode)]
 [!code-vb[CorePseudocode\#CRKCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#crkcode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public override System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ComponentResourceKey.Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このキーに関連付けられている値を検索するアセンブリのディクショナリを示すアセンブリ オブジェクトを取得します。</summary>
        <value>リフレクション クラスとして取得されたアセンブリ。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ComponentResourceKey.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">現在と比較するオブジェクト <see cref="T:System.Windows.ComponentResourceKey" />します。</param>
        <summary>指定されたオブジェクトが現在と等しいかどうかを判断 <see cref="T:System.Windows.ComponentResourceKey" />します。</summary>
        <returns>オブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 2 つのキーが、同じ値をすべてイミディ エイト設定可能なプロパティがある場合は、等しい \(<xref:System.Windows.ComponentResourceKey.ResourceId%2A>, 、<xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A>\)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ComponentResourceKey.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このハッシュ コードを返す <see cref="T:System.Windows.ComponentResourceKey" />します。</summary>
        <returns>符号付き 32 ビット整数値。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceId">
      <MemberSignature Language="C#" Value="public object ResourceId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ResourceId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ComponentResourceKey.ResourceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはこの型に関連付けられている他のユーザーからこのキーを区別するために一意の識別子を設定します。</summary>
        <value>一意の識別子。 通常これは文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] についてを参照してください [ComponentResourceKey マークアップ拡張機能](http://msdn.microsoft.com/ja-jp/d6bcdbe6-61b3-40a7-b381-4e02185b5a85)します。  
  
 使用される文字列では通常、 <xref:System.Windows.ComponentResourceKey.ResourceId%2A> に従った値に、 [XAMLName Grammar](http://msdn.microsoft.com/ja-jp/11e4cada-41d2-494d-9531-0d3df4dfcbe3)です。  
  
<a name="xamlTextUsage_2"></a>   
## XAML テキストの使用方法  
 「解説」を参照してください。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Windows.ComponentResourceKey.ResourceId%2A> この種類に関連付けられた他のユーザーからこのキーを区別するためにします。  
  
 [!code-xml[ColorPicker\_snip\#SliderStyle](~/samples/snippets/csharp/VS_Snippets_Wpf/ColorPicker_snip/CSharp/ColorPickerLib/Themes/generic.xaml#sliderstyle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ComponentResourceKey.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>文字列表現を取得、 <see cref="T:System.Windows.ComponentResourceKey" />です。</summary>
        <returns>文字列形式。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeInTargetAssembly">
      <MemberSignature Language="C#" Value="public Type TypeInTargetAssembly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TypeInTargetAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ComponentResourceKey.TypeInTargetAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Type" /> リソース キーを定義します。</summary>
        <value>リソース キーを定義する型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] についてを参照してください [ComponentResourceKey マークアップ拡張機能](http://msdn.microsoft.com/ja-jp/d6bcdbe6-61b3-40a7-b381-4e02185b5a85)します。  
  
 <xref:System.Windows.ComponentResourceKey> 要素は、型を含むアセンブリを対象とするに基づいて、外部のアセンブリからアクセスされるリソースのキーを定義するカスタム コンポーネントによって使用されます。 カスタム コンポーネントは、多くの場合、リソースがあるアセンブリに配置する必要がありますが、新しい型を定義します。 通常、これらの型の他の実装を持っていないの検索要件を満たすために存在しません、種類、 <xref:System.Windows.ComponentResourceKey>です。  
  
<a name="xamlTextUsage_3"></a>   
## XAML テキストの使用方法  
 「解説」を参照してください。  
  
   
  
## 例  
 次の例では、定義する方法、 <xref:System.Windows.ComponentResourceKey> を含む <xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A> と <xref:System.Windows.ComponentResourceKey.ResourceId%2A> を使用して、 [ComponentResourceKey マークアップ拡張機能](http://msdn.microsoft.com/ja-jp/d6bcdbe6-61b3-40a7-b381-4e02185b5a85)します。 このリソースは、外部アセンブリに配置し、相当を使用してリソースを要求するキー使用法によってアクセス <xref:System.Windows.ComponentResourceKey> 要求にします。  
  
 [!code-xml[ColorPicker\_snip\#SliderStyle](~/samples/snippets/csharp/VS_Snippets_Wpf/ColorPicker_snip/CSharp/ColorPickerLib/Themes/generic.xaml#sliderstyle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.ComponentResourceKey" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>