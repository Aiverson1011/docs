<Type Name="Style" FullName="System.Windows.Style">
  <TypeSignature Language="C#" Value="public class Style : System.Windows.Threading.DispatcherObject, System.Windows.Markup.IAddChild, System.Windows.Markup.INameScope, System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Style extends System.Windows.Threading.DispatcherObject implements class System.Windows.Markup.IAddChild, class System.Windows.Markup.INameScope, class System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Style" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.INameScope</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Setters")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>プロパティ、リソース、およびイベント ハンドラーの種類のインスタンス間での共有が有効化します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定することができます、 <xref:System.Windows.Style> から派生した任意の要素で <xref:System.Windows.FrameworkElement> または <xref:System.Windows.FrameworkContentElement>です。 スタイルが最もよく内にリソースとして宣言されている、 <xref:System.Windows.Application.Resources%2A> セクションです。 スタイルはリソースであるため、すべてのリソースに適用されるスコープの規則に従いますスタイルの適用場所に影響を宣言する場所です。 たとえば、アプリケーション定義のルート要素にスタイルを宣言する場合は、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ファイル、スタイルは、アプリケーションのどこにでも使用できます。 ナビゲーション アプリケーションを作成するし、スタイルのアプリケーションのいずれかで宣言 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] するだけで、ファイル、スタイルを使用できます [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ファイルです。 スコープのリソースの規則の詳細については、次を参照してください。 [XAML リソース](http://msdn.microsoft.com/ja-jp/91580b89-a0a8-4889-aecb-fddf8e63175f)します。  
  
 スタイルの宣言から成る、 <xref:System.Windows.Style> を 1 つまたは複数のコレクションを含むオブジェクト <xref:System.Windows.Setter> オブジェクトです。 各 <xref:System.Windows.Setter> から成る、 <xref:System.Windows.Setter.Property%2A> と <xref:System.Windows.Setter.Value%2A>です。 プロパティは、要素のスタイルのプロパティの名前に適用します。 リソースとしてスタイルを宣言したら、他のリソースと同じように、参照できます。  
  
> [!NOTE]
>  同じ set アクセス操作子コレクションの 1 つ以上の set アクセス操作子があるかどうか <xref:System.Windows.Setter.Property%2A> 最後プロパティの値、宣言されている set アクセス操作子に使用されます。 同様に、同じプロパティの値のスタイルでとを設定した要素に直接直接要素で設定された値が優先されます。  
  
 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] スタイルとテンプレートのモデルでは、プレゼンテーションとロジックの分離だけでなく、外観の保守や共有します。 スタイルとテンプレートのモデルには、カスタマイズするための機能のセットが含まれる、 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]です。 この機能のスイートを含む、 <xref:System.Windows.Style> 次クラスします。  
  
-   <xref:System.Windows.Trigger>  
  
-   <xref:System.Windows.EventTrigger> および <xref:System.Windows.Media.Animation.Storyboard>  
  
-   <xref:System.Windows.Controls.ControlTemplate>  
  
-   <xref:System.Windows.DataTemplate>  
  
 詳細については、「[スタイルとテンプレート](http://msdn.microsoft.com/ja-jp/481765e5-5467-4a75-9f7b-e10e2ac410d9)」を参照してください。  
  
   
  
## 例  
 次の例では、スタイル宣言に影響を与える、 <xref:System.Windows.Controls.Control.Background%2A> のプロパティ、 <xref:System.Windows.Controls.Control>です。  
  
 [!code-xml[StyleOvw01\#StyleSimple](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimple)]
 [!code-xml[StyleOvw01\#StyleSimple](~/samples/snippets/xaml/VS_Snippets_Wpf/StyleOvw01/XAML/Page1.xaml#stylesimple)]  
  
 上記のスタイルを適用するには、次の操作を行います。  
  
 [!code-xml[StyleOvw01\#StyleSimpleApplied](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimpleapplied)]
 [!code-xml[StyleOvw01\#StyleSimpleApplied](~/samples/snippets/xaml/VS_Snippets_Wpf/StyleOvw01/XAML/Page1.xaml#stylesimpleapplied)]  
  
 使用して、指定された型のすべての要素にスタイルを適用することもできる、 <xref:System.Windows.Style.TargetType%2A> プロパティです。 スタイルに対象の型を追加するに設定するプロパティを完全に修飾する必要が不要になった、 `ClassName.PropertyName` 構文です。 次の例に適用されるたびにスタイルを定義する <xref:System.Windows.Controls.TextBlock> 要素。  
  
 [!code-xml[PhotoStoreDemoStyled\#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]
 [!code-xml[PhotoStoreDemoStyled\#1](~/samples/snippets/xaml/VS_Snippets_Wpf/PhotoStoreDemoStyled/xaml/window1.xaml#1)]  
  
> [!NOTE]
>  多く [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] コントロールは、その他の組み合わせで構成されます [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 型のすべてのコントロールに適用されるスタイルを作成するためのコントロールには、広範な影響を与えます。 インスタンスを対象とするスタイルを作成する場合、 <xref:System.Windows.Controls.TextBlock> コントロールで、 <xref:System.Windows.Controls.Canvas>, 、スタイルはすべてに適用 <xref:System.Windows.Controls.TextBlock> キャンバス内のコントロール場合でも、 <xref:System.Windows.Controls.TextBlock> など、他のコントロールの一部では、 <xref:System.Windows.Controls.ListBox>です。  
  
 拡張または定義済みのスタイルを継承する方法については、次を参照してください。、 <xref:System.Windows.Style.BasedOn%2A> ページです。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Style" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの呼び出しの遅延の検証を必要と <xref:System.Windows.Style.TargetType%2A> と <xref:System.Windows.Style.BasedOn%2A> 型のスタイルを設定します。 パーサーのコンテキストの外部で使用、動作は未定義です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">スタイルを適用する型。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Style" /> 、指定した上で使用するクラス <see cref="T:System.Type" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType, System.Windows.Style basedOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType, class System.Windows.Style basedOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type,System.Windows.Style)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="basedOn" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="targetType">スタイルを適用する型。</param>
        <param name="basedOn">このスタイルの基にスタイルです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Style" /> 、指定した上で使用するクラス <see cref="T:System.Type" /> に基づいて、指定したと <see cref="T:System.Windows.Style" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BasedOn">
      <MemberSignature Language="C#" Value="public System.Windows.Style BasedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style BasedOn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.BasedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または現在のスタイルの基盤となっている定義済みのスタイルを設定します。</summary>
        <value>現在のスタイルの基盤となっている定義済みのスタイル。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 1 つは、各スタイルがしかサポート <xref:System.Windows.Style.BasedOn%2A> 値。  
  
<a name="xamlAttributeUsage_BasedOn"></a>   
## XAML 属性の使用方法  
  
```  
<object BasedOn="myStyle" .../>  
```  
  
<a name="xamlValues_BasedOn"></a>   
## XAML 値  
 *myStyle*  
 既存のスタイル。 通常、使用して、 [マークアップ拡張機能と WPF XAML](http://msdn.microsoft.com/ja-jp/618dc745-8b14-4886-833f-486d2254bb78) に既存のスタイルを参照してください。  
  
   
  
## 例  
 いくつかの方法でスタイルを設定 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 拡張または継承されたことができます。 スタイルは、このプロパティを介して他のスタイルに基づいていることができます。 このプロパティを使用した場合、新しいスタイルは、新しいスタイルで明示的に再定義しないする元のスタイルの値を継承します。 次の例で `Style2` 継承、 <xref:System.Windows.Controls.Control.Background%2A?displayProperty=fullName>の値 `Yellow`, を追加し、 <xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=fullName>の値 `Blue`です。  
  
 [!code-xml[StyleOvw01\#ExtendingStyle](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyle)]
 [!code-xml[StyleOvw01\#ExtendingStyle](~/samples/snippets/xaml/VS_Snippets_Wpf/StyleOvw01/XAML/Page1.xaml#extendingstyle)]  
  
 同様に、スタイルは、既存のスタイルに基づいていることができます [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 要素は、新しいスタイルがのスタイルをに基づいて次の例のように、 <xref:System.Windows.Controls.TextBlock> 要素。  
  
 [!code-xml[PhotoStoreDemoStyled\#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#2)]
 [!code-xml[PhotoStoreDemoStyled\#2](~/samples/snippets/xaml/VS_Snippets_Wpf/PhotoStoreDemoStyled/xaml/window1.xaml#2)]  
  
> [!NOTE]
>  設定されたスタイルを作成する場合、 <xref:System.Windows.Style.TargetType%2A> プロパティと、別のスタイルをベースも定義、 <xref:System.Windows.Style.TargetType%2A> プロパティには、派生したスタイルの対象の型と同じである必要があります、または基本のスタイルの型から派生させます。  
  
 特定の種類に対して定義されたスタイルは、次の例のように、その他のスタイルにも基づいてことができます。  
  
 [!code-xml[StyleOvw01\#ExtendingStyleTargetType](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyletargettype)]
 [!code-xml[StyleOvw01\#ExtendingStyleTargetType](~/samples/snippets/xaml/VS_Snippets_Wpf/StyleOvw01/XAML/Page1.xaml#extendingstyletargettype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Style" /> のハッシュ コードを返します。</summary>
        <returns>この <see cref="T:System.Windows.Style" /> のハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スタイルが読み取り専用変更できないかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 場合は、スタイルがシールされています。それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スタイルは、別のスタイルの基になるとき、または、最初に適用されたときにシールされています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Style.BasedOn" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.RegisterName(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">登録する名前。</param>
        <param name="scopedElement">オブジェクトを指定したマップを <c>name</c>します。</param>
        <summary>現在のスコープ内には、新しい名前とオブジェクトのペアを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Resources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または、このスタイルのスコープ内で使用できるリソースのコレクションを設定します。</summary>
        <value>このリソースは、このスタイルのスコープ内で使用できます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## XAML プロパティ要素の使用  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
- or -   
<object>  
  <object.Resources>  
    <ResourceDictionary Source="externalDictionarySource"/>  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## XAML 値  
 *oneOrMoreResourceElements*  
 1 つまたは複数のリソース要素です。 いずれかで後で参照される [StaticResource マークアップ拡張機能](http://msdn.microsoft.com/ja-jp/97af044c-71f1-4617-9a94-9064b68185d2) または [DynamicResource マークアップ拡張機能](http://msdn.microsoft.com/ja-jp/7324f243-03af-4c2b-b0db-26ac6cdfcbe4) で構文 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], 、リソース要素が必要、 `x:Key` 属性です。  
  
 \< ResourceDictionary ソース \=" *externalDictionarySource*"\/\>  
 外部ディクショナリ ソース。 詳細については、「 [リソース ディクショナリのトピックとマージ](http://msdn.microsoft.com/ja-jp/d159531f-05d4-49fd-b951-c332de51e5bc)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seal">
      <MemberSignature Language="C#" Value="public void Seal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.Seal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>変更することはできませんので、このスタイルとファクトリとトリガーをロックします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Setters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションを取得 <see cref="T:System.Windows.Setter" /> と <see cref="T:System.Windows.EventSetter" /> オブジェクトです。</summary>
        <value>コレクション <see cref="T:System.Windows.Setter" /> と <see cref="T:System.Windows.EventSetter" /> オブジェクトです。 既定値は空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Style.Setters%2A> のプロパティ、 <xref:System.Windows.Style> オブジェクトだけで構成オブジェクトに割り当て可能な <xref:System.Windows.SetterBase>です。 追加する、 <xref:System.Windows.SetterBase> の子、 <xref:System.Windows.Style> オブジェクトが暗黙的に追加して、 <xref:System.Windows.SetterBaseCollection> の <xref:System.Windows.Style> オブジェクトです。  
  
 明示的なプロパティ要素の使用 <xref:System.Windows.Style.Setters%2A> も比較的よく行われます。 これは、区別が役立つ場合がありますマークアップ スタイルの意思決定 <xref:System.Windows.Style.Setters%2A> から <xref:System.Windows.Style.Resources%2A> と <xref:System.Windows.Style.Triggers%2A> 複雑なスタイル内の項目。 例:  
  
```  
<Style>  
  <Style.Setters>  
    <!--one or more SetterBase derived object elements here-->  
  </Style.Setters>  
</Style>  
```  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## XAML プロパティ要素の使用  
  
```  
<object>  
  oneOrMoreSetters  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## XAML 値  
 *oneOrMoreSetters*  
 1 つまたは複数 <xref:System.Windows.Setter> または <xref:System.Windows.EventSetter> オブジェクトです。  
  
   
  
## 例  
 次の例では、このプロパティを使用する方法を示します。  
  
 [!code-csharp[listboxitemstyle\#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ListBoxItemStyle/CSharp/Pane1.xaml.cs#1)]
 [!code-vb[listboxitemstyle\#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ListBoxItemStyle/VisualBasic/Pane1.xaml.vb#1)]  
  
 追加する、 <xref:System.Windows.SetterBase> の子、 <xref:System.Windows.Style> オブジェクトが暗黙的に追加して、 <xref:System.Windows.SetterBaseCollection> の <xref:System.Windows.Style> オブジェクトです。 次 <xref:System.Windows.EventSetter> に暗黙的に追加されて、 <xref:System.Windows.SetterBaseCollection> スタイルの。  
  
 [!code-xml[eventovwsupport\#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Setter" />
        <altmember cref="T:System.Windows.EventSetter" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">追加する子オブジェクト。</param>
        <summary>子オブジェクトを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Style> のインスタンスが <xref:System.Windows.Markup.IAddChild> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">オブジェクトに追加するテキスト。</param>
        <summary>オブジェクトにノードのテキスト コンテンツを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Style> のインスタンスが <xref:System.Windows.Markup.IAddChild> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.INameScope.FindName">
      <MemberSignature Language="C#" Value="object INameScope.FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Windows.Markup.INameScope.FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要求されたオブジェクトの名前の識別子。</param>
        <summary>指定された識別名を持つオブジェクトを返します。</summary>
        <returns>見つかった場合はオブジェクト。 その名前のオブジェクトが見つからなかった場合は <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.Style> のインスタンスが <xref:System.Windows.Markup.INameScope> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">要求されたアンビエント プロパティの名前。</param>
        <summary>現在のスコープ内の指定されたアンビエント プロパティが使用できるかどうかを照会します。</summary>
        <returns>
          <see langword="true" /> 要求されたアンビエント プロパティがある場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Markup.IQueryAmbient" />
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはこのスタイルが対象となる型を設定します。</summary>
        <value>このスタイルの対象の型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生した任意の要素のスタイルを設定する <xref:System.Windows.FrameworkElement> または <xref:System.Windows.FrameworkContentElement>です。 したがって、対象の型は、それらの要素のいずれかのことはできます。 ただしでスタイルを作成する場合、 <xref:System.Windows.Style.TargetType%2A> プロパティと、別のスタイルをベースも定義、 <xref:System.Windows.Style.TargetType%2A> プロパティには、派生したスタイルの対象の型と同じである必要があります、または基本のスタイルの対象の型から派生します。  
  
 指定しない場合、 <xref:System.Windows.Style.TargetType%2A>, を指定する必要があります、 `x:Key` の <xref:System.Windows.Style> しても、スタイル クラス名でプロパティを修飾します。  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## XAML 属性の使用方法  
  
```  
<object TargetType="{x:Type typeName}"/>  
-or-  
<object TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## XAML 値  
 `{x:Type ...}`  
 [X:type マークアップ拡張機能](http://msdn.microsoft.com/ja-jp/e0e0ce6f-e873-49c7-8ad7-8b840eb353ec) マークアップ拡張機能を使用します。  
  
 *型名*  
 クラスの型名。  
  
   
  
## 例  
 次の例のすべてのインスタンスに適用されるスタイルを定義、 <xref:System.Windows.Controls.TextBlock> 要素。  
  
 [!code-xml[PhotoStoreDemoStyled\#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]
 [!code-xml[PhotoStoreDemoStyled\#1](~/samples/snippets/xaml/VS_Snippets_Wpf/PhotoStoreDemoStyled/xaml/window1.xaml#1)]  
  
 設定、 <xref:System.Windows.Style.TargetType%2A> プロパティを <xref:System.Windows.Controls.TextBlock> が設定されていない型、 `x:Key` が暗黙的に設定、 `x:Key` に `{x:Type TextBlock}`します。 つまり、前に付ける場合 <xref:System.Windows.Style> 、 `x:Key` 以外の値の値 `{x:Type TextBlock}`, 、 <xref:System.Windows.Style> すべてには適用されません <xref:System.Windows.Controls.TextBlock> 要素に自動的にします。 代わりに、スタイルを適用する必要がある、 <xref:System.Windows.Controls.TextBlock> 要素に明示的にします。  
  
 多く [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] コントロールは、その他の組み合わせで構成されます [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 型のすべてのコントロールに適用されるスタイルを作成するためのコントロールには、広範な影響を与えます。 インスタンスを対象とするスタイルを作成する場合、 <xref:System.Windows.Controls.TextBox> コントロールで、 <xref:System.Windows.Controls.Canvas>, 、スタイルはすべてに適用 <xref:System.Windows.Controls.TextBox> キャンバス内のコントロール場合でも、 <xref:System.Windows.Controls.TextBox> など、他のコントロールの一部では、 <xref:System.Windows.Controls.ComboBox>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションを取得 <see cref="T:System.Windows.TriggerBase" /> 指定された条件に基づいて、プロパティの値を適用するオブジェクト。</summary>
        <value>
          <see cref="T:System.Windows.TriggerBase" /> オブジェクトのコレクション。 既定値は空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] スタイルとテンプレートのモデルでは、内でトリガーを指定することができます、 <xref:System.Windows.Style>です。 トリガー時に特定の変更を適用するためのオブジェクトは、基本的には、条件 \(など、特定のプロパティの値に変わったら `true`, 、イベント発生時または\) 問題がなければします。  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## XAML プロパティ要素の使用  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## XAML 値  
 *oneOrMoreTriggers*  
 0 個以上のオブジェクト要素から派生するクラスである <xref:System.Windows.TriggerBase>です。  
  
   
  
## 例  
 次の例は、名前付き <xref:System.Windows.Style> できる <xref:System.Windows.Controls.Button> コントロールです。<xref:System.Windows.Style> を定義、 <xref:System.Windows.Trigger> 要素を変更する、 <xref:System.Windows.Controls.Control.Foreground%2A> ボタンのプロパティと、 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> プロパティは `true`です。  
  
 [!code-xml[BtnStyles\#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.UnregisterName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">削除するマッピングの名前。</param>
        <summary>名前スコープからオブジェクトの名前のマッピングを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Style" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>