<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>論理ツリー内のオブジェクトのクエリを実行するために静的ヘルパー メソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.LogicalTreeHelper> クラスが使用するとをオブジェクトの子コレクションを返すことができますか、論理ツリーのサブノード内からのオブジェクトは特定のメソッドを提供します。 ただし、ほとんどのために通常行うオブジェクト ツリーの操作もによって公開されてのようなメソッドやプロパティに <xref:System.Windows.FrameworkElement> または <xref:System.Windows.FrameworkContentElement>です。 たとえば、以下を試します。  
  
-   静的なを呼び出す代わりに <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> メソッドで、論理上の子の列挙子オブジェクトが返されるが、そのオブジェクトのコンテンツ モデルで公開されている専用のコレクションを使用します。 コンテンツ モデルをサポートするほぼすべてのオブジェクトは、子オブジェクトのコレクションを格納し、そのコレクションに直接コレクション インターフェイス サポートを提供するプロパティを公開します。  
  
-   静的を呼び出す代わりに <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> を呼び出し、その名前を指定することによって、子オブジェクトを取得するメソッド、 <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> または <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName> 固有のオブジェクトのメソッドです。  
  
 <xref:System.Windows.LogicalTreeHelper> ここで、論理ツリーを再帰的に複数のレベルでの上下に移動し、さまざまな親または子オブジェクトを検査するための一貫した方法を使用する分析のシナリオに適しています。 ここでは、コンテンツ モデルの組み合わせにアクセスする可能性があり、複数のコンテンツ モデルを使用して特定の Api になりますが複雑すぎますします。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">表示する UI 要素。</param>
        <summary>要求された UI 要素を表示しようとして発生させる、 <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> 結果を報告するために、ターゲットでのイベントです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、インスタンス メソッドを呼び出すした方が便利です <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName> または <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName> このユーティリティの静的メソッドではなく。 インスタンス メソッドの動作は、静的メソッドの動作と同じです。  
  
 場合でも、 `current` 提供される UI 要素が、 <xref:System.Windows.FrameworkContentElement>, 、結果として得られるイベントが同じまま <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName> 、生成元でのイベント <xref:System.Windows.FrameworkContentElement> イベントのイベント データを確認で識別します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode">検索を開始するオブジェクト。 このオブジェクトには、いずれかでなければなりません、 <see cref="T:System.Windows.FrameworkElement" /> または <see cref="T:System.Windows.FrameworkContentElement" />です。</param>
        <param name="elementName">検索するオブジェクトの名前。</param>
        <summary>検索し、指定の名前を持つオブジェクトを取得しようとします。 検索では、指定したオブジェクトから開始し、論理ツリーのサブノードに続きます。</summary>
        <returns>いずれかが見つかった場合は、一致する名前のオブジェクト返します <see langword="null" /> 論理ツリー内で一致する名前が見つからなかった場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メソッド <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName> と <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> は表面的に似ています <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, 、異なるロジックでは、動作はします。  
  
-   検索の方向 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> は子オブジェクト \(ツリー\); 下方向に検索の方向、 `FindName` メソッドが \(ツリー\) 上の親オブジェクトです。  
  
-   `FindName` メソッドは XAML 名前スコープの概念によって管理されます。 使用して `FindName` が 1 つだけを保証する XAML 名前スコープは、一意性を適用するため、その名前のオブジェクトが存在します。 これに対し、 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> 、検索中に XAML 名前スコープと XAML 名前スコープの境界を越えたがある場合は無視されます。 そのため、一意かどうかの保証はありません、 `elementName` 境界を越えると名前を付けます。 XAML 名前スコープの詳細については、次を参照してください。 [WPF XAML 名前スコープ](http://msdn.microsoft.com/ja-jp/52bbf4f2-15fc-40d4-837b-bb4c21ead7d4)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">論理ツリーの処理の起点になるオブジェクト。 これは、<see cref="T:System.Windows.FrameworkElement" /> か <see cref="T:System.Windows.FrameworkContentElement" /> のいずれかにする必要があります。</param>
        <summary>論理ツリーを処理して、指定したオブジェクトの直接の子オブジェクトのコレクションを返します。</summary>
        <returns>指定したオブジェクトの論理ツリーに属する直接の子オブジェクトの列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 確信できないときに、主に、この署名とヘルパー メソッドを使用しているかどうか `current` は、 <xref:System.Windows.FrameworkElement> または <xref:System.Windows.FrameworkContentElement> なもないことを確認してそのオブジェクトのクラスが独自のコンテンツ モデルのコレクションをサポートしているかどうか。 クエリを実行するオブジェクトの種類が判断した場合は、その型にすることがわかっている特定のコンテンツ プロパティが存在することを確認します。 たとえば、あるオブジェクトを照会することがわかっている場合は、 <xref:System.Windows.Controls.ItemsControl>, 、確認、 <xref:System.Windows.Controls.ItemsControl.Items%2A> コレクション インターフェイスのサポートを持ち、おそらくよりも使いやすく、列挙子がである厳密に型指定のコレクションを取得するプロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current">論理ツリーの処理の起点になるオブジェクト。</param>
        <summary>指定した直下の子オブジェクトのコレクションを返します <see cref="T:System.Windows.FrameworkContentElement" /> 論理ツリーを処理しています。</summary>
        <returns>論理ツリー内の <paramref name="current" /> から始まる、直接の子オブジェクトの列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current">論理ツリーの処理の起点になるオブジェクト。</param>
        <summary>指定した直下の子オブジェクトのコレクションを返します <see cref="T:System.Windows.FrameworkElement" /> 論理ツリーを処理しています。</summary>
        <returns>論理ツリー内の <paramref name="current" /> から始まる、直接の子オブジェクトの列挙可能なコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">オブジェクトの親オブジェクトを検索するオブジェクト。 これはいずれかを指定する予定の <see cref="T:System.Windows.FrameworkElement" /> または <see cref="T:System.Windows.FrameworkContentElement" />です。</param>
        <summary>論理ツリーを処理することで、指定したオブジェクトの親オブジェクトを返します。</summary>
        <returns>要求された親オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは単なるラッパー型の適切なバージョンを取得する \(<xref:System.Windows.FrameworkElement> または <xref:System.Windows.FrameworkContentElement>\) の <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName> または <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName> プロパティ。 このためを判断できない場合を除き、 `current` 型、代わりに、それぞれのインスタンスのプロパティをチェックするする可能性があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>論理ツリーを処理することで、指定したオブジェクトの直下の子オブジェクトのコレクションを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>