<Type Name="EventManager" FullName="System.Windows.EventManager">
  <TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>クラス所有者のルーティング イベントを登録し、クラス ハンドラーを追加する、イベント関連のユーティリティ メソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 This class is most commonly used to register a new routed event, with <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.  
  
 The second most common [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] usage is <xref:System.Windows.EventManager.RegisterClassHandler%2A>. You use this method to enable class handling of a routed event on the class, or an attached event. For details, see [Marking Routed Events as Handled, and Class Handling](http://msdn.microsoft.com/ja-jp/5e745508-4861-4b48-b5f6-5fc7ce5289d2).  
  
   
  
## 例  
 The following example show how to use this class to register a new routed event as a class member, along with the routed event "wrapper" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event.  
  
 [!code-csharp[DPCustom\#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom\#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>イベント システムに登録されているルーティング イベントの識別子を返します。</summary>
        <returns>型の配列 <see cref="T:System.Windows.RoutedEvent" /> 登録されているオブジェクトを格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 詳細 <xref:System.Windows.RoutedEvent> オブジェクトを後で登録することができます。 このメソッドは、スナップショットを取得し、ルーティングされたイベントのコレクションは、アプリケーションの有効期間全体で書き込み可能です。 返されるコレクションは、非常に大きくなる可能性があります。 のみでも含まれているイベントのカウント、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], 、コレクションの数は、高い数百にもします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">検索を開始する型。 検索では、基本クラスが含まれています。</param>
        <summary>指定された所有者型とその登録されたイベントのすべてのルーティングされたイベント識別子を検索します。</summary>
        <returns>ルーティングされたイベント識別子に一致するすべての一致が見つかった場合の配列それ以外の場合、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType">クラスの処理を宣言するクラスの型。</param>
        <param name="routedEvent">処理するイベントのルーティングされたイベント識別子。</param>
        <param name="handler">クラスのハンドラーの実装への参照。</param>
        <summary>特定のルーティングされたイベントのクラスのハンドラーを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クラスの処理は、ルーティングされたイベントのサポートに実装されるアタッチされるイベントを含む、ルーティング イベントで利用可能な機能です。 クラスのハンドラーは、クラスのすべてのインスタンスに存在する静的なハンドラーに似ています。 ハンドラーが静的では、クラスのハンドラーを直接インスタンス プロパティを変更することはできませんが、を通じてインスタンスにアクセスすることができますので、 `sender` パラメーターまたはイベント データ。  
  
 クラスのハンドラーは、インスタンスのハンドラーの前に呼び出されます。 イベントを処理済みとしてマークする動作がクラス ハンドラーを実装することができます。 そのため、専用のイベント処理のインスタンスのハンドラーを登録しない限り、インスタンス クラスで処理されるイベント ハンドラーは呼び出されません。  
  
 多くは、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 基本要素のイベントは、仮想メソッドを処理するクラスを提供します。 クラスを呼び出さずに処理を実装する基本クラスを継承するクラスでこれらのメソッドをオーバーライドすることで <xref:System.Windows.EventManager.RegisterClassHandler%2A> 静的コンス トラクターにします。 通常、これらのクラス処理メソッドは、入力イベントの存在し、名前が"On"で始まるクラス処理されているイベントの名前で終わります。  
  
 クラスの処理の詳細については、次を参照してください。 [Handled、クラスの処理とルーティング イベントをマークする](http://msdn.microsoft.com/ja-jp/5e745508-4861-4b48-b5f6-5fc7ce5289d2)します。  
  
 この署名を使用して、未処理のイベントへの応答でのみ呼び出すクラスのハンドラーが登録されます。 呼び出す場合でも、イベント引数が使用して、処理済みマーク クラス ハンドラーを登録することも、 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 署名と `handledEventsToo` に設定 `true`します。  
  
   
  
## 例  
 次の例では、ハンドラーを <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, 呼び出し <xref:System.Windows.EventManager.RegisterClassHandler%2A>します。  
  
 [!code-csharp[ClassHandling\#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling\#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType">クラスの処理を宣言するクラスの型。</param>
        <param name="routedEvent">処理するイベントのルーティングされたイベント識別子。</param>
        <param name="handler">クラスのハンドラーの実装への参照。</param>
        <param name="handledEventsToo">
          <see langword="true" /> ルーティングされたイベントの引数は、処理済みとしてマークされている場合でも、このクラスのハンドラーを起動するには <see langword="false" /> いないすべてのマークで処理されるイベント ハンドラーは起動の既定の動作を維持します。</param>
        <summary>処理されるイベント データが既にマークされているイベントを処理するオプションを使用して、特定のルーティング イベントのクラスのハンドラーを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クラスの処理は、ルーティングされたイベントのサポートに実装されるアタッチされるイベントを含む、ルーティング イベントで利用可能な機能です。 クラスのハンドラーは、クラスのすべてのインスタンスに存在する静的なハンドラーに似ています。 ハンドラーが静的では、クラスのハンドラーを直接インスタンス プロパティを変更することはできませんが、を通じてインスタンスにアクセスすることができますので、 `sender` パラメーターまたはイベント データ。  
  
 クラスのハンドラーは、インスタンスのハンドラーの前に呼び出されます。 イベントを処理済みとしてマークする動作がクラス ハンドラーを実装することができます。 そのため、専用のイベント処理のインスタンスのハンドラーを登録しない限り、インスタンス クラスで処理されるイベント ハンドラーは呼び出されません。  
  
 多くは、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 基本要素のイベントは、仮想メソッドを処理するクラスを提供します。 クラスを呼び出さずに処理を実装する基本クラスを継承するクラスでこれらのメソッドをオーバーライドすることで <xref:System.Windows.EventManager.RegisterClassHandler%2A> 静的コンス トラクターにします。 通常、これらのクラス処理メソッドは、入力イベントの存在し、名前が"On"で始まるクラス処理されているイベントの名前で終わります。  
  
 クラスの処理の詳細については、次を参照してください。 [Handled、クラスの処理とルーティング イベントをマークする](http://msdn.microsoft.com/ja-jp/5e745508-4861-4b48-b5f6-5fc7ce5289d2)します。  
  
 この署名を使用して、クラスのハンドラーに登録できるを設定してイベントの処理時に呼び出す `handledEventsToo` 設定 `true`します。 一般に、行う必要がありますこの入力システム マウスやキーボードのイベントから処理など問題を回避しようとして、既知の処理上の問題がある場合のみです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">ルーティング イベントの名前。 名前は所有者型内で一意である必要があり、<see langword="null" /> や空の文字列にすることはできません。</param>
        <param name="routingStrategy">列挙体の値としてのイベントのルーティング方法。</param>
        <param name="handlerType">イベント ハンドラーの型。 これは、デリゲート型である必要があり、<see langword="null" /> にすることはできません。</param>
        <param name="ownerType">ルーティング イベントの所有者のクラス型。 これは <see langword="null" /> にすることはできません。</param>
        <summary>新しいルーティング イベントを Windows Presentation Foundation (WPF) イベント システムに登録します。</summary>
        <returns>新しく登録されたルーティング イベントの識別子。 この識別子のオブジェクトは、クラスに静的フィールドとして格納してイベントにハンドラーをアタッチするメソッドのパラメーターとして使用できるようになりました。 ルーティング イベント識別子は、その他のイベント システム API にも使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの戻り値を使用して、一意の静的な宣言を作成する <xref:System.Windows.RoutedEvent> 識別子フィールドです。 このフィールドは、所有者型内に格納する必要があります。  
  
 数多くの規則があるし、ベスト プラクティスがどのようにルーティングされたイベントに関連付けられている必要があるという名前、登録されると、クラスで公開します。 詳細については、次を参照してください。 [ルーティング イベントの概要](http://msdn.microsoft.com/ja-jp/1a2189ae-13b4-45b0-b12c-8de2e49c29d2)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定のルーティングされたイベントのクラスのハンドラーを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>