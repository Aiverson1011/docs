<Type Name="ResourceDictionary" FullName="System.Windows.ResourceDictionary">
  <TypeSignature Language="C#" Value="public class ResourceDictionary : System.Collections.IDictionary, System.ComponentModel.ISupportInitialize, System.Windows.Markup.INameScope, System.Windows.Markup.IUriContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ResourceDictionary extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable, class System.ComponentModel.ISupportInitialize, class System.Windows.Markup.INameScope, class System.Windows.Markup.IUriContext" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ResourceDictionary" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.INameScope</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IUriContext</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.Ambient</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>WPF アプリケーションのコンポーネントおよびその他の要素によって使用されている WPF リソースを格納するハッシュ テーブルまたはディクショナリの実装を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 内の項目、 <xref:System.Windows.ResourceDictionary> によってアプリケーション コードが読み込まれるときにすぐには処理されません、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ローダー。 代わりに、 <xref:System.Windows.ResourceDictionary> オブジェクトとして保持され、個々 の値が処理されるは、要求された場合にのみです。  
  
 <xref:System.Windows.ResourceDictionary> からクラスを派生していない <xref:System.Collections.DictionaryBase>します。 代わりに、 <xref:System.Windows.ResourceDictionary> クラスが実装する <xref:System.Collections.IDictionary> に依存しています、 <xref:System.Collections.Hashtable> 内部的にします。  
  
 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], 、 <xref:System.Windows.ResourceDictionary> クラスは、いくつかのオブジェクト要素の値である暗黙的コレクションの要素では通常 `Resources` プロパティ要素構文で指定した場合のプロパティです。 詳細については、暗黙の型のコレクションで [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], を参照してください [XAML 構文の詳細](http://msdn.microsoft.com/ja-jp/67cce290-ca26-4c41-a797-b68aabc45479)します。 例外はマージされたディクショナリを指定する場合詳細については、「 [リソース ディクショナリのトピックとマージ](http://msdn.microsoft.com/ja-jp/d159531f-05d4-49fd-b951-c332de51e5bc)します。  
  
 別の考えられる [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 使用量を不連続値として、リソース ディクショナリを宣言する [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ファイルと、いずれかの実行時に読み込む <xref:System.Windows.Markup.XamlReader.Load%2A> か \(完全に信頼された\) プロジェクトにリソースまたはルース ファイルとして含めます。 この場合、 <xref:System.Windows.ResourceDictionary> のルート要素として、オブジェクト要素として宣言することができます、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]です。 適切な XML 名前空間の値をマップする必要があります \(の既定値、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 名前空間と通常 `x:` の [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 名前空間\) に、 <xref:System.Windows.ResourceDictionary> 要素をルート要素として使用する場合。 各値を持つリソースを定義する子要素を追加することができます。  
  
<a name="xamlImplicitCollectionUsage_ResourceDictionary"></a>   
## XAML 暗黙的コレクションの使用  
  
```  
<object>  
  <object.resourcesProperty>  
    oneOrMoreResources  
  </object.resourcesProperty>  
</object>  
```  
  
<a name="xamlValues_ResourceDictionary"></a>   
## XAML 値  
 *resourcesProperty*  
 そのプロパティの値の型がプロパティ要素を指定するプロパティ <xref:System.Windows.ResourceDictionary>します。 通常、これは、 `Resources` の <xref:System.Windows.FrameworkElement> または <xref:System.Windows.FrameworkContentElement>, 、またはの <xref:System.Windows.Application> アプリケーション リソースの場合にします。  
  
 *oneOrMoreResources*  
 1 つ以上のリソース オブジェクトの要素として指定します。 指定した各リソースが必要、 [x:Key Attribute](http://msdn.microsoft.com/ja-jp/1985cd45-f197-42d5-b75e-886add64b248) 割り当てられます。  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.FrameworkElement.Resources" />
    <altmember cref="P:System.Windows.Application.Resources" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceDictionary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.ResourceDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.Add(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">追加するキーの名前。</param>
        <param name="value">追加するリソースの値。</param>
        <summary>キーでこのリソースを追加します。 <see cref="T:System.Windows.ResourceDictionary" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 重複するキーを追加しようと、例外が発生します。  
  
 キーは常に基本のディクショナリに追加します。 キーを <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A> 現在 <xref:System.Windows.ResourceDictionary> の重複を基本ディクショナリのみをチェックし、重複チェックされていません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.ResourceDictionary" /> ロックされているか、読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Hashtable" /> に既に存在します。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.BeginInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この初期化フェーズを開始 <see cref="T:System.Windows.ResourceDictionary" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 示す値をこのメソッドを呼び出すことの内容、 <xref:System.Windows.ResourceDictionary> が読み込まれます。 呼び出して、プロセスの次の手順は、 <xref:System.Windows.ResourceDictionary.EndInit%2A>です。  
  
 呼び出す必要はありません <xref:System.Windows.ResourceDictionary.BeginInit%2A> 複数回呼び出す前に  <xref:System.Windows.ResourceDictionary.EndInit%2A>します。 そうと、例外が発生します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">呼ばれる <see cref="M:System.Windows.ResourceDictionary.BeginInit" /> する前に 2 回以上 <see cref="M:System.Windows.ResourceDictionary.EndInit" /> 呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ベース内のすべてのキー \(と値\) の消去 <see cref="T:System.Windows.ResourceDictionary" />します。 これは、消去されませんディクショナリの項目をマージします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 マージされたディクショナリ項目を消去する必要がある場合から特定のディクショナリを取得 <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A> コレクションと具体的には呼び出し <xref:System.Windows.ResourceDictionary.Clear%2A> を <xref:System.Windows.ResourceDictionary>, 、通常、辞書は、リモート、アクセスがないです。 または、全体を削除 <xref:System.Windows.ResourceDictionary> から <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A> ジェネリック コレクションを呼び出しています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.Contains(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Windows.ResourceDictionary" /> 内で検索されるキー。</param>
        <summary>指定したキーの要素が <see cref="T:System.Windows.ResourceDictionary" /> に格納されているかどうかを確認します。</summary>
        <returns>
          <see langword="true" /> 場合 <see cref="T:System.Windows.ResourceDictionary" /> 、指定したキーと値のペアを含むキー以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要求されたキーは、このリソース ディクショナリには、リソースの検索ロジックは、マージされたディクショナリもチェックします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ResourceDictionary.MergedDictionaries" />
        <altmember cref="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Collections.DictionaryEntry[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Collections.DictionaryEntry[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.CopyTo(System.Collections.DictionaryEntry[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Collections.DictionaryEntry[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">コピー先である 1 次元配列、 <see cref="T:System.Collections.DictionaryEntry" /> からコピーされるオブジェクト、 <see cref="T:System.Windows.ResourceDictionary" /> インスタンス。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
        <param name="arrayIndex">0 から始まるインデックス <c>array</c> コピー開始位置。</param>
        <summary>コピー、 <see cref="T:System.Windows.ResourceDictionary" /> 要素を 1 次元 <see cref="T:System.Collections.DictionaryEntry" /> 指定したインデックス位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これにより、基本ディクショナリのみがコピーされます。 結果の配列をない [CopyTo メソッド \(DictionaryEntry\<xref:System.Windows.ResourceDictionary.MergedDictionaries%2A> それが再構成する場合、 [CopyTo メソッド \(DictionaryEntry\<xref:System.Windows.ResourceDictionary> もう一度です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ResourceDictionary.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ベース内のエントリの数を取得 <see cref="T:System.Windows.ResourceDictionary" />します。</summary>
        <value>現在の基本の辞書のエントリの数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ResourceDictionary.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="DeferrableContent">
      <MemberSignature Language="C#" Value="public System.Windows.DeferrableContent DeferrableContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DeferrableContent DeferrableContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ResourceDictionary.DeferrableContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DeferrableContent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはリソース ディクショナリの遅延コンテンツを設定します。</summary>
        <value>常に <see langword="null" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.EndInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初期化フェーズを終了し、初期化フェーズ中にキーに対して行ったすべての変更を考慮するように、前のツリーを無効にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.ResourceDictionary.BeginInit%2A> <xref:System.Windows.ResourceDictionary.EndInit%2A> トランザクション モデルに従います。<xref:System.Windows.ResourceDictionary.BeginInit%2A> 初期化されていないディクショナリをマークし、 <xref:System.Windows.ResourceDictionary.EndInit%2A> と初期化のマークです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.FindName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要求されたオブジェクトの名前の識別子。</param>
        <summary>このディクショナリの実装ではサポートされていません。</summary>
        <returns>常に <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.ResourceDictionary> クラスが名前で登録をサポートしていません。 代わりにキーを使用します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Collections.IDictionaryEnumerator" /> 反復処理に使用できる、 <see cref="T:System.Windows.ResourceDictionary" />です。</summary>
        <returns>特殊な列挙子、 <see cref="T:System.Windows.ResourceDictionary" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 反復子は基本ディクショナリのみです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ResourceDictionary.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得するかどうかこの <see cref="T:System.Windows.ResourceDictionary" /> 固定サイズです。</summary>
        <value>
          <see langword="true" /> ハッシュ テーブルが固定サイズである場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装、 <xref:System.Collections.Hashtable> 既定値、つまり `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ResourceDictionary.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得するかどうかこの <see cref="T:System.Windows.ResourceDictionary" /> は読み取り専用です。</summary>
        <value>
          <see langword="true" /> ハッシュ テーブルが読み取り専用の場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを返します、 <xref:System.Collections.Hashtable> 既定値、つまり `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ResourceDictionary.Item(System.Object)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">目的のキーを取得または設定します。</param>
        <summary>取得または指定したキーに関連付けられている値を設定します。</summary>
        <value>キーの値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要求されたキーは、このリソース ディクショナリには、フレームワーク リソース システムは、マージされたディクショナリもチェックします。  
  
 チェック、 <xref:System.Windows.ResourceDictionary> 項目またはインデックスでは一般にリソースを取得することをお勧めします。 代わりにメソッドを呼び出し、完全なリソースの参照プロセスに参加できるは、キーを使用してリソースを検索し、テーマ、またはアプリケーションで、リソースを検索することができます。<xref:System.Windows.FrameworkElement.FindResource%2A> これらのメソッドは、いずれかにある <xref:System.Windows.FrameworkElement>です。 それ以外の場合、リソースを検索しようとするでは、実際の実行時の動作が一致しません。  
  
 ただし、個々 のディクショナリから直接リソースの取得がある既知のリソースを取得する場合に適しています <xref:System.Windows.ResourceDictionary> 、場所、可能なパフォーマンスとスコープをキー参照の実行時の実装を回避するためのコマンドを実行します。  
  
 コレクション メンバーを定義するインデクサーを使用しない [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。 代わりに、要素を作成する子のマークアップにします。 子要素は、のいずれかの子要素を <xref:System.Windows.ResourceDictionary>, 、またはプロパティの型がプロパティ要素の `ResourceDictionary`です。 詳細については、「、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 使用量セクション <xref:System.Windows.ResourceDictionary>です。  
  
<a name="xamlTextUsage_Item"></a>   
## XAML テキストの使用方法  
 「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ResourceDictionary.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>これに含まれるすべてのキーのコレクションを取得 <see cref="T:System.Windows.ResourceDictionary" />します。</summary>
        <value>すべてのキーのコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要なために、このプロパティが存在する <xref:System.Collections.IDictionary>, が <xref:System.Windows.ResourceDictionary.Keys%2A> 一般的にはほとんど役に立ちません <xref:System.Windows.ResourceDictionary> シナリオです。  
  
 返されるキー内のキーは含めないでください、 <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A>です。 また、keys コレクションは、基本のディクショナリのキーのスナップショットです。 これに、後で変更を加える場合 <xref:System.Windows.ResourceDictionary>, 、格納された <xref:System.Windows.ResourceDictionary.Keys%2A> 変更は反映されません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ResourceDictionary.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="MergedDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Windows.ResourceDictionary&gt; MergedDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Windows.ResourceDictionary&gt; MergedDictionaries" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ResourceDictionary.MergedDictionaries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Windows.ResourceDictionary&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションを取得、 <see cref="T:System.Windows.ResourceDictionary" /> をマージされたディクショナリ内のさまざまなリソース ディクショナリを構成します。</summary>
        <value>マージされたディクショナリのコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ディクショナリは追加することで、 <xref:System.Windows.ResourceDictionary> によって参照されるジェネリック コレクションを <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A>します。 マージ <xref:System.Windows.ResourceDictionary> マークアップ内に定義されているリソースの要素がありません。 代わりに、マージされたディクショナリは、 <xref:System.Windows.ResourceDictionary> が定義されている \(またはコードによって追加された要素はありません\)、マークアップの子要素で、 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 向けに指定された <xref:System.Windows.ResourceDictionary.Source%2A>します。<xref:System.Windows.ResourceDictionary.Source%2A> の指定により、アプリケーションに付属している別のリソース アセンブリなどの外部ソースから取得するマージされたディクショナリ"緩やかな [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]"、または特定のローカライズまたはグローバル リソースのアセンブリ。  
  
 内のリソースの要素を指定する、 <xref:System.Windows.ResourceDictionary> を持つ <xref:System.Windows.ResourceDictionary.Source%2A> 指定はサポートされていません。  
  
 内で検索の動作、 <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A> コレクションは、最後に追加した検索 <xref:System.Windows.ResourceDictionary> 最初、および要求されたキーが見つかるとすぐに、検索は停止します。 マージされたディクショナリのコレクション全体で重複するキーが無効ではありません。 マージされたディクショナリの動作の詳細については、次を参照してください。 [マージされたリソース ディクショナリ](http://msdn.microsoft.com/ja-jp/d159531f-05d4-49fd-b951-c332de51e5bc)します。  
  
<a name="xamlPropertyElementUsage_MergedDictionaries"></a>   
## XAML プロパティ要素の使用  
  
```  
<object>  
  <object.MergedDictionaries>  
    oneOrMoreResourceDictionaries  
  </object.MergedDictionaries>  
</object>  
  
```  
  
<a name="xamlValues_MergedDictionaries"></a>   
## XAML 値  
 *oneOrMoreResourceDictionaries*  
 1 つまたは複数 <xref:System.Windows.ResourceDictionary> オブジェクトの要素。 A <xref:System.Windows.ResourceDictionary> ため <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A> コレクションのコンテンツがないし、指定、 <xref:System.Windows.ResourceDictionary.Source%2A> 、完全な参照属性 <xref:System.Windows.ResourceDictionary> リモートでします。  
  
   
  
## 例  
 次の例では、2 つを指定します <xref:System.Windows.ResourceDictionary> プライマリへの結合要素 <xref:System.Windows.ResourceDictionary>します。  
  
 [!code-xml[ResourceMerge\#MergedXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ResourceMerge/CS/default.xaml#mergedxaml)]
 [!code-xml[ResourceMerge\#MergedXAML](~/samples/snippets/xaml/VS_Snippets_Wpf/ResourceMerge/xaml/default.xaml#mergedxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ResourceDictionary.Source" />
      </Docs>
    </Member>
    <Member MemberName="OnGettingValue">
      <MemberSignature Language="C#" Value="protected virtual void OnGettingValue (object key, ref object value, out bool canCache);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGettingValue(object key, object value, bool canCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.OnGettingValue(System.Object,System.Object@,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="canCache" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">取得するリソースのキー。</param>
        <param name="value">要求されたリソースの値。</param>
        <param name="canCache">
          <see langword="true" /> リソースを保存して後で使用される場合それ以外の場合、 <see langword="false" />です。</param>
        <summary>発生したときに、 <see cref="T:System.Windows.ResourceDictionary" /> リソースに対する要求を受信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.RegisterName(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">「解説」を参照してください。</param>
        <param name="scopedElement">「解説」を参照してください。</param>
        <summary>このディクショナリの実装ではサポートされていません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.ResourceDictionary> クラスが名前で登録をサポートしていません。 代わりにキーを使用します。 XAML 名前スコープのメソッドは、\[機能のバージョンとして実装されます <xref:System.Windows.ResourceDictionary> リソースに適用されない名前その XAML を明確になるためです。  
  
 このメソッドは、通話、 <xref:System.NotSupportedException> がスローされます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">常にこのメソッドが呼び出されるとします。</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.Remove(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">削除するエントリのキー。</param>
        <summary>基本のディクショナリから指定のキーを持つエントリを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Windows.ResourceDictionary> 指定のキーを持つ要素が含まれていない、 <xref:System.Windows.ResourceDictionary> は変更されません。 例外は発生しません。  
  
 このメソッドはからキーを削除していない、 <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A>です。 固有の仕様を取得する必要があります <xref:System.Windows.ResourceDictionary> キーものを削除するコレクションをできない可能性がありますので、このような辞書をリモートでアクセスしている通常です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.ResourceDictionary" /> ロックされているか、読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public Uri Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Source" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ResourceDictionary.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リソースの読み込み元の Uniform Resource Identifier (URI) を取得または設定します。</summary>
        <value>外部リソース ディクショナリのソースの場所。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、 <xref:System.Windows.ResourceDictionary.Source%2A> は、アプリケーション プロジェクトのビルドでコンパイルされないリソースやコンテンツのビルド アクションとして含まれるリソース ディクショナリの場所を参照する、パック URI として指定します。 パック URI の形式に関する詳細については、「 [WPF での Pack Uri](http://msdn.microsoft.com/ja-jp/43adb517-21a7-4df3-98e8-09e9cdf764c4)します。  
  
 一般に、 <xref:System.Windows.ResourceDictionary.Source%2A> に対してのみプロパティが設定されて、 <xref:System.Windows.ResourceDictionary> に指定されている、 <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A> プロパティ \(いずれかのプロパティ要素として [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], 、または、 <xref:System.Windows.ResourceDictionary> コード内のコレクションの項目\)。 このコンテキストでの値の設定 <xref:System.Windows.ResourceDictionary.Source%2A> で指定された辞書の内容をマージ [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 現在 <xref:System.Windows.ResourceDictionary>します。 読み込みエラーには、スローされる例外が発生します。  
  
   
  
## 例  
 次の例では、2 つを指定します <xref:System.Windows.ResourceDictionary> プライマリへの結合要素 <xref:System.Windows.ResourceDictionary>します。  
  
 [!code-xml[ResourceMerge\#MergedXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ResourceMerge/CS/default.xaml#mergedxaml)]
 [!code-xml[ResourceMerge\#MergedXAML](~/samples/snippets/xaml/VS_Snippets_Wpf/ResourceMerge/xaml/default.xaml#mergedxaml)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.ResourceDictionary.MergedDictionaries" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">0 から始まる <see cref="T:System.Array" /> からコピーされた項目を受け取る、 <see cref="T:System.Windows.Markup.Localizer.BamlLocalizationDictionary" />です。</param>
        <param name="arrayIndex">指定した最初の位置 <see cref="T:System.Array" /> 内容のコピーを受信します。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.ResourceDictionary> のインスタンスが <xref:System.Collections.ICollection> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ResourceDictionary.CopyTo(System.Collections.DictionaryEntry[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ResourceDictionary.System#Collections#ICollection#IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.IsSynchronized" />」を参照してください。</summary>
        <value>
          <see langword="true" /> 場合へのアクセスを <see cref="T:System.Windows.ResourceDictionary" /> が同期されている \(スレッド セーフである\) 場合は、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.ResourceDictionary> のインスタンスが <xref:System.Collections.ICollection> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ResourceDictionary.System#Collections#ICollection#SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.SyncRoot" />」を参照してください。</summary>
        <value>アクセスを同期するために使用できるオブジェクト <see cref="T:System.Windows.ResourceDictionary" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.ResourceDictionary> のインスタンスが <xref:System.Collections.ICollection> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.System#Collections#IEnumerable#GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Collections.IEnumerable.GetEnumerator" />」を参照してください。</summary>
        <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.ResourceDictionary> のインスタンスが <xref:System.Collections.IEnumerable> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.ResourceDictionary.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IUriContext.BaseUri">
      <MemberSignature Language="C#" Value="Uri System.Windows.Markup.IUriContext.BaseUri { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri System.Windows.Markup.IUriContext.BaseUri" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ResourceDictionary.System#Windows#Markup#IUriContext#BaseUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Windows.Markup.IUriContext.BaseUri" />」を参照してください。</summary>
        <value>基本 URI 現在のコンテキスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.ResourceDictionary> のインスタンスが <xref:System.Windows.Markup.IUriContext> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ResourceDictionary.UnregisterName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">「解説」を参照してください。</param>
        <summary>このディクショナリの実装ではサポートされていません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.ResourceDictionary> クラスが名前で登録をサポートしていません。 代わりにキーを使用します。 このメソッドを呼び出すと、何も行いません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ResourceDictionary.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>これに含まれるキーに関連付けられているすべての値のコレクションを取得 <see cref="T:System.Windows.ResourceDictionary" />します。</summary>
        <value>すべての値のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要なために、このプロパティが存在する <xref:System.Collections.IDictionary>, 、通常はほとんど役に立ちませんが、 <xref:System.Windows.ResourceDictionary> シナリオです。  
  
 返された値には、内の値は含めない、 <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A>です。 また、コレクションは、基本のディクショナリの値のスナップショットです。 これに、後で変更を加える場合 <xref:System.Windows.ResourceDictionary>, 、格納された <xref:System.Windows.ResourceDictionary.Values%2A> 変更は反映されません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>