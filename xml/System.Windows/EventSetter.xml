<Type Name="EventSetter" FullName="System.Windows.EventSetter">
  <TypeSignature Language="C#" Value="public class EventSetter : System.Windows.SetterBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSetter extends System.Windows.SetterBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventSetter" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.SetterBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>スタイル内で、イベント セッターを表します。 イベント セッターは、イベントへの応答で指定されたイベント ハンドラーを呼び出します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 Event setters invoke the specified event handlers in response to routed events, which apply to all elements that reference the <xref:System.Windows.Style> rather than requiring you to attach instance handlers to each individual element. Only <xref:System.Windows.Style.Setters%2A?displayProperty=fullName> support <xref:System.Windows.EventSetter> objects.  
  
 You can only declare event setters for events that are routed events. You can declare event setters for routed events with a direct routing strategy, bubbling events, or tunneling events.  
  
 Instances of the <xref:System.Windows.EventSetter> class are usually created through [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], as an object element within a style defined through [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. An <xref:System.Windows.EventSetter> might also be instantiated from code.  
  
 Event setters cannot be used in a style that is contained in a theme resource dictionary. This is because a theme resource dictionary at run time is often loose [!INCLUDE[TLA#tla_baml](~/includes/tlasharptla-baml-md.md)] files, and does not have any scope defined where accompanying code\-behind that defines the handlers can exist.  
  
 Handlers attached through event setters are invoked after any class handlers for an event, and also after any instance handlers. As a result, if a class handler or instance handler marks an event handled in its arguments, then the handler declared by an event setter is not invoked, unless the event setter specifically sets <xref:System.Windows.EventSetter.HandledEventsToo%2A> **languageKeyword tag is not supported!!!!**  
.  
  
 Event setters may also come from <xref:System.Windows.Style.BasedOn%2A> styles. The event setter handlers from the style specified as <xref:System.Windows.Style.BasedOn%2A> will be invoked after the handlers on the immediate style.  
  
 Note that only <xref:System.Windows.Style.Setters%2A?displayProperty=fullName> supports <xref:System.Windows.EventSetter> objects. Triggers \(<xref:System.Windows.TriggerBase> and derived classes\) do not support <xref:System.Windows.EventSetter>.  
  
   
  
## 例  
 The following example establishes a single <xref:System.Windows.EventSetter> within a page\-level style.  
  
 [!code-xml[EventOvwSupport\#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 The following shows the example event handlers:  
  
 [!code-csharp[EventOvwSupport\#EventSetterRef](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#eventsetterref)]
 [!code-vb[EventOvwSupport\#EventSetterRef](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#eventsetterref)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.RoutedEventArgs.Handled" />
    <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSetter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventSetter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.EventSetter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSetter (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventSetter.#ctor(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <see cref="T:System.Windows.EventSetter" /> が応答する、特定のルーティング イベント。</param>
        <param name="handler">このセッターで割り当てるハンドラー。</param>
        <summary>提供されたイベントとハンドラー パラメーターを使用して、<see cref="T:System.Windows.EventSetter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This signature is typically used if you creating an <xref:System.Windows.EventSetter> in code, or in code\-behind to create an <xref:System.Windows.EventSetter> that augments an existing style prior to use.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Event">
      <MemberSignature Language="C#" Value="public System.Windows.RoutedEvent Event { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.RoutedEvent Event" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventSetter.Event" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.EventSetter" /> が応答する、特定のルーティング イベントを取得または設定します。</summary>
        <value>ルーティング イベントの識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You cannot set this property once the style containing the <xref:System.Windows.EventSetter> is in use and thus is sealed. If you set this property in code and there is the possibility that the style is in use, check the value of the <xref:System.Windows.SetterBase.IsSealed%2A> property on the <xref:System.Windows.EventSetter> instance before you attempt to set <xref:System.Windows.EventSetter.Event%2A>.  
  
   
  
## 例  
 The following example sets the <xref:System.Windows.EventSetter.Event%2A> property as part of an <xref:System.Windows.EventSetter> in a markup style.  
  
 [!code-xml[EventOvwSupport\#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">シールされた <see cref="T:System.Windows.EventSetter" /> でこのプロパティを設定しようとしています。</exception>
        <altmember cref="P:System.Windows.RoutedEventArgs.Handled" />
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="HandledEventsToo">
      <MemberSignature Language="C#" Value="public bool HandledEventsToo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HandledEventsToo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventSetter.HandledEventsToo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定するかどうか、set アクセス操作子に割り当てられているハンドラーが呼び出されるも、イベントがイベント データ内で処理されるマークされている場合でもを決定する値。</summary>
        <value>
          <see langword="true" /> 場合は、ハンドラーが呼び出されますもする必要があります。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  設定、 <xref:System.Windows.RoutedEventHandlerInfo.InvokeHandledEventsToo%2A> イベントのハンドラーの呼び出し方法の特徴を指定する方法がない一般的な方針に従って、コードで常に実行する必要があります <xref:System.Windows.RoutedEventHandlerInfo.InvokeHandledEventsToo%2A> でイベントの名前に直接インスタンスの定義済みのイベント ハンドラーを割り当てるときに [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 属性構文です。 この値を設定するのは [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 、その結果、コンパイル時エラーは発生しません [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] スタイルを使用すると、実行時に例外が発生します。  
  
<a name="xamlTextUsage_HandledEventsToo"></a>   
## XAML テキストの使用方法  
 このプロパティを使用しない必要があります [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]します。 「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.RoutedEventArgs.Handled" />
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Handler">
      <MemberSignature Language="C#" Value="public Delegate Handler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Delegate Handler" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventSetter.Handler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.EventSetterHandlerConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または setter にルーティングされたイベントのハンドラーへの参照を設定します。</summary>
        <value>これで接続されているハンドラーへの参照を <see cref="T:System.Windows.EventSetter" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 設定を次に例を <xref:System.Windows.EventSetter.Handler%2A> プロパティの一部として、 <xref:System.Windows.EventSetter> マークアップのスタイル。  
  
 [!code-xml[EventOvwSupport\#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.RoutedEvent.HandlerType" />
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.EventSetter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>