<Type Name="DependencyPropertyChangedEventArgs" FullName="System.Windows.DependencyPropertyChangedEventArgs">
  <TypeSignature Language="C#" Value="public struct DependencyPropertyChangedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DependencyPropertyChangedEventArgs extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyChangedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>さまざまなプロパティ変更イベントにデータを提供します。 通常、これらのイベントは、読み取り専用の依存関係プロパティの有効値の変更を報告します。 もう 1 つの用途は、<see cref="T:System.Windows.PropertyChangedCallback" /> 実装の一部として使用することです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The events that use the <xref:System.Windows.DependencyPropertyChangedEventArgs> class for event data, and the <xref:System.Windows.DependencyPropertyChangedEventHandler> method implementations for handlers, generally follow the naming pattern `Is*Changed`, and are generally implemented as [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events without <xref:System.Windows.RoutedEvent> backing \(they are not routed events\). Some class handling methods that "handle" otherwise unexposed events that report a state change through a property change, such as <xref:System.Windows.Controls.Primitives.ButtonBase.OnIsPressedChanged%2A?displayProperty=fullName>, also use the <xref:System.Windows.DependencyPropertyChangedEventArgs> class for event data.  
  
 The scenario for <xref:System.Windows.PropertyChangedCallback> is to use the arguments to report old and new values that come from the property system evaluation of the property. A callback that processes old and new values might choose special handling depending on these values, such as choosing to not respond to value changes that are deemed insignificant.  
  
   
  
## 例  
 The following example uses the <xref:System.Windows.DependencyPropertyChangedEventArgs> class in the context of a <xref:System.Windows.PropertyChangedCallback> for a particular property of a custom class that also defines events. The callback takes the results of old and new values from the property system as communicated by <xref:System.Windows.DependencyPropertyChangedEventArgs>, and repackages these into a different events arguments class <xref:System.Windows.RoutedPropertyChangedEventArgs%601>. The new arguments are then used as the data for a "ValueChanged" event defined by and raised by the custom class.  
  
 [!code-csharp[CustomControlNumericUpDownOneProject\#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject\#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyChangedEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyPropertyChangedEventArgs (System.Windows.DependencyProperty property, object oldValue, object newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.DependencyProperty property, object oldValue, object newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.DependencyProperty" />
        <Parameter Name="oldValue" Type="System.Object" />
        <Parameter Name="newValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="property">変更された依存関係プロパティの識別子。</param>
        <param name="oldValue">関連するイベントまたは状態変化によって報告された、変更前にプロパティの値。</param>
        <param name="newValue">関連するイベントまたは状態変化によって報告された、変更後のプロパティの値。</param>
        <summary>
          <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 依存関係プロパティの変更を報告するカスタム イベントを実装するときは、イベントが発生したときに、変更の詳細を使用してイベント データを設定するため、このコンス トラクターを使用する必要があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在と比較するオブジェクト <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />します。</param>
        <summary>指定されたオブジェクトが現在と同じかどうかを判断 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />します。</summary>
        <returns>
          <see langword="true" /> 指定されたオブジェクトが現在に等しい場合 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装は、内部プロパティを含むすべてのプロパティの値の等価性に依存します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.DependencyPropertyChangedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.DependencyPropertyChangedEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">
          <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 現在と比較するには <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /></param>
        <summary>決定するかどうか、指定した <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> は現在と同じ <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />します。</summary>
        <returns>
          <see langword="true" /> 場合は、指定した <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> は現在と同じ <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装は、内部プロパティを含むすべてのプロパティの値の等価性に依存します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> のハッシュ コードを取得します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewValue">
      <MemberSignature Language="C#" Value="public object NewValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NewValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>変更後、プロパティの値を取得します。</summary>
        <value>変更後にプロパティ値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定された値の型は、報告されている依存関係プロパティの型にキャストできるなるようにします。  
  
   
  
## 例  
 次の例では、 <xref:System.Windows.DependencyPropertyChangedEventArgs> のコンテキスト内のクラス、 <xref:System.Windows.PropertyChangedCallback> イベントも定義するカスタム クラスの特定のプロパティのです。 コールバックは、従来の結果と、プロパティ システムから新しい値で受け渡される <xref:System.Windows.DependencyPropertyChangedEventArgs>, 、これらのさまざまなイベント引数クラスに再パッケージと <xref:System.Windows.RoutedPropertyChangedEventArgs%601>です。 新しい引数で定義されたカスタムのクラスによって発生する"ValueChanged"イベントにデータとして使用されます。  
  
 [!code-csharp[CustomControlNumericUpDownOneProject\#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject\#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OldValue">
      <MemberSignature Language="C#" Value="public object OldValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OldValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>変更前に、のプロパティの値を取得します。</summary>
        <value>変更する前にプロパティ値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定された値の型は、報告されている依存関係プロパティの型にキャストできるなるようにします。  
  
   
  
## 例  
 次の例では、 <xref:System.Windows.DependencyPropertyChangedEventArgs> のコンテキスト内のクラス、 <xref:System.Windows.PropertyChangedCallback> イベントも定義するカスタム クラスの特定のプロパティのです。 コールバックは、従来の結果と、プロパティ システムから新しい値で受け渡される <xref:System.Windows.DependencyPropertyChangedEventArgs>, 、これらのさまざまなイベント引数クラスに再パッケージと <xref:System.Windows.RoutedPropertyChangedEventArgs%601>です。 新しい引数で定義されたカスタムのクラスによって発生する"ValueChanged"イベントにデータとして使用されます。  
  
 [!code-csharp[CustomControlNumericUpDownOneProject\#DependencyPropertyChangedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/CSharp/NumericUpDown.cs#dependencypropertychangedeventargs)]
 [!code-vb[CustomControlNumericUpDownOneProject\#DependencyPropertyChangedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDownOneProject/visualbasic/numericupdown.vb#dependencypropertychangedeventargs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Windows.DependencyPropertyChangedEventArgs left, System.Windows.DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.DependencyPropertyChangedEventArgs left, valuetype System.Windows.DependencyPropertyChangedEventArgs right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.DependencyPropertyChangedEventArgs" />
        <Parameter Name="right" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="left">比較対象となる最初の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
        <param name="right">比較対象となる 2 番目の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
        <summary>指定した 2 つの <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> オブジェクトの値が同一かどうかを判断します。</summary>
        <returns>
          <see langword="true" /> 場合は、2 つ <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> インスタンスが等しいそれ以外の場合場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実装と同様のロジックを使用して <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Windows.DependencyPropertyChangedEventArgs left, System.Windows.DependencyPropertyChangedEventArgs right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.DependencyPropertyChangedEventArgs left, valuetype System.Windows.DependencyPropertyChangedEventArgs right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.DependencyPropertyChangedEventArgs" />
        <Parameter Name="right" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="left">比較対象となる最初の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
        <param name="right">比較対象となる 2 番目の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
        <summary>指定した 2 つあるかどうかを判断 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> オブジェクトが異なる。</summary>
        <returns>
          <see langword="true" /> 場合は、2 つ <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> インスタンスが異なる以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実装は、同様のロジックの否定を返します <xref:System.Windows.DependencyPropertyChangedEventArgs.Equals%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty Property { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty Property" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyChangedEventArgs.Property" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>値の変更が発生した依存関係プロパティの識別子を取得します。</summary>
        <value>値の変更が発生する、依存関係プロパティの識別子フィールドです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは共通内で使用される場合 <xref:System.Windows.PropertyChangedCallback> いくつかのプロパティでは、登録されていると、どのプロパティの変更には、コールバックが呼び出されるあいまいさを解消する必要があります。<xref:System.Windows.DependencyPropertyChangedEventArgs.Property%2A> 通常、1 対 1 で対応プロパティとイベントのプロパティの変更を報告するためには、イベントを発生させるため、通常関係ありません。 発生したイベント自体は、プロパティを変更するを示す値です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたオブジェクトが現在と同じかどうかを返す <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>