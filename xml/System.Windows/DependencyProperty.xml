<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>スタイル設定、データ バインディング、アニメーション、および継承などの方法によって設定できるプロパティを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.DependencyProperty> supports the following capabilities in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]:  
  
-   The property can be set in a style. For more information, see [Styling and Templating](http://msdn.microsoft.com/ja-jp/481765e5-5467-4a75-9f7b-e10e2ac410d9).  
  
-   The property can be set through data binding. For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](http://msdn.microsoft.com/ja-jp/06318fac-6afd-4c7d-a277-6d7ef50f47bc).  
  
-   The property can be set with a dynamic resource reference. For more information, see [XAML Resources](http://msdn.microsoft.com/ja-jp/91580b89-a0a8-4889-aecb-fddf8e63175f).  
  
-   The property can inherit its value automatically from a parent element in the element tree. For more information, see [Property Value Inheritance](http://msdn.microsoft.com/ja-jp/d7c338f9-f2bf-48ed-832c-7be58ac390e4).  
  
-   The property can be animated. For more information, see [Animation Overview](http://msdn.microsoft.com/ja-jp/bd9ce563-725d-4385-87c9-d7ee38cf79ea).  
  
-   The property can report when the previous value of the property has been changed and the property value can be coerced. For more information, see [Dependency Property Callbacks and Validation](http://msdn.microsoft.com/ja-jp/48db5fb2-da7f-49a6-8e81-3540e7b25825).  
  
-   The property reports information to [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], such as whether changing a property value should require the layout system to recompose the visuals for an element.  
  
-   The property receives support in the [!INCLUDE[wpfdesigner_current_long](~/includes/wpfdesigner-current-long-md.md)].  For example, the property can be edited in the **ui tag is not supported!!!!**  
     window.  
  
 To learn more about dependency properties, see [Dependency Properties Overview](http://msdn.microsoft.com/ja-jp/d119d00c-3afb-48d6-87a0-c4da4f83dee5). If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.  To learn how to create custom dependency properties, see [Custom Dependency Properties](http://msdn.microsoft.com/ja-jp/e6bfcfac-b10d-4f58-9f77-a864c2a2938f).  
  
 An attached property is a property that enables any object to report information to the type that defines the attached property. In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property. An attached property is a feature of the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language.  To set an attached property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], use the **placeholder tag is not supported!!!!**  
.**placeholder tag is not supported!!!!**  
 syntax. An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName> property. If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property. To learn more about attached properties, including how to create them, see [Attached Properties Overview](http://msdn.microsoft.com/ja-jp/75928354-dc01-47e8-a018-8409aec1f32d).  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## XAML Attribute Usage  
  
```  
<object property="dependencyPropertyName"/>  
- or -  
<object property="ownerType.dependencyPropertyName"/>  
- or -  
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## XAML Values  
 `dependencyPropertyName`  
 A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName> of the desired dependency property. This can be preceded by an XML namespace prefix if the property is not in the default XML namespace \(for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](http://msdn.microsoft.com/ja-jp/5c0854e3-7470-435d-9fe2-93eec9d3634e).\)  
  
 `ownerType`.`dependencyPropertyName`  
 A string that specifies an owner type of a dependency property, a dot \(.\), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName>. **parameterReference tag is not supported!!!!**  
 can also be preceded by an XML namespace prefix. This usage is particular to late\-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the **languageKeyword tag is not supported!!!!**  
 is not yet known. For more information, see [Styling and Templating](http://msdn.microsoft.com/ja-jp/481765e5-5467-4a75-9f7b-e10e2ac410d9).  
  
 `attachedPropertyOwnerType` *.* `attachedPropertyName`  
 A string that specifies  the owner of an attached property, a dot \(.\), then the attached property name. **parameterReference tag is not supported!!!!**  
 can also be preceded by an XML namespace prefix.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">この依存関係プロパティの所有者として追加する型。</param>
        <summary>登録済みの依存関係プロパティの所有者として、別の型を追加します。</summary>
        <returns>依存関係プロパティを識別する元の <see cref="T:System.Windows.DependencyProperty" /> 識別子への参照。 この識別子は、追加するクラスが <see langword="public static readonly" /> フィールドとして公開する必要があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、その特定の依存関係プロパティを最初に登録していない型に対する依存関係プロパティを認識する、プロパティ システムを使用します。  
  
 通常、 <xref:System.Windows.DependencyProperty.AddOwner%2A> 依存関係プロパティは、既にマネージ クラスの継承によってその依存関係プロパティを公開するクラスを追加するために使用 \(クラスの継承は、派生クラスによって継承されるラッパー プロパティになるし、したがって、一般的なメンバー テーブルにアクセスできるように、依存関係プロパティ既に\)。<xref:System.Windows.DependencyProperty.AddOwner%2A> その依存関係プロパティを最初に登録していない型に対する依存関係プロパティを認識する、プロパティ システムを有効にします。  
  
 メタデータを指定するのには、この署名することはできません。  このメソッドを使用すると、メタデータは、新しい自動的に生成 <xref:System.Windows.DependencyProperty> とその所有者の型。 自動生成されたメタデータは、このプロパティが定義されている基本型のすべてのマージされたメタデータの結果です。 マージされたメタデータを使用できないプロパティの既定のメタデータが使用されます。 使用して、プロパティが登録されている場合、 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> メソッドで、既定のメタデータは、ときに作成されるメタデータと同じ <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 呼び出されました。 それ以外の場合、 <xref:System.Windows.PropertyMetadata> オブジェクトを作成すると、 <xref:System.Windows.PropertyMetadata.DefaultValue%2A> プロパティがプロパティの型の既定値を他のすべてのプロパティの設定、 <xref:System.Windows.PropertyMetadata> に設定されている `null`します。 使用して、 <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> 署名の指定された型に追加されると、依存関係プロパティのバージョンのメタデータを提供する場合。  
  
 このメソッドの戻り値は通常を宣言し、依存関係プロパティの識別子を格納することにより、依存関係プロパティを公開に使用されます。 識別子は、プロパティ システムを呼び出そうとする場合に、依存関係プロパティへのアクセスを提供 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 依存関係プロパティに対して特には存在する追加の所有者クラスにします。 元の所有者と追加された所有者の両方に同じプロパティ名は、同様の機能を示すために使用する必要があります。 使用する必要があります、 <xref:System.Windows.DependencyProperty> の値を返す、 <xref:System.Windows.DependencyProperty.AddOwner%2A> 依存関係プロパティの識別子を定義し、宣言メソッド [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] を使用する型に追加される依存関係プロパティのプロパティのラッパー <xref:System.Windows.DependencyProperty.AddOwner%2A>します。  
  
 <xref:System.Windows.DependencyProperty.AddOwner%2A> 内で宣言されている依存関係プロパティを作成するときに、前の推奨される方法を使用 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]します。 たとえば、両方とも <xref:System.Windows.Controls.Border> と <xref:System.Windows.Controls.Control> を定義、 `BorderBrush` 類似した機能の依存関係プロパティ。<xref:System.Windows.Controls.Control> 定義、 `BorderBrush` プロパティを呼び出すことによって、プロパティ システム <xref:System.Windows.DependencyProperty.AddOwner%2A> 元の所有者に基づく <xref:System.Windows.Controls.Border> 、登録されていると <xref:System.Windows.Controls.Border.BorderBrushProperty> 依存関係プロパティの識別子。<xref:System.Windows.DependencyProperty.AddOwner%2A> 戻り値が新しい静的を確立するために使用し、 <xref:System.Windows.DependencyProperty> フィールド \(<xref:System.Windows.Controls.Control.BorderBrushProperty>\) 追加された所有者では、そのプロパティの `BorderBrush` プロパティのラッパーが併せて宣言されています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType">この依存関係プロパティの所有者として追加する型。</param>
        <param name="typeMetadata">提供される型に存在する依存関係プロパティを修飾するメタデータ。</param>
        <summary>既に登録済みの依存関係プロパティの所有者として別の型を追加します。その際、提供される所有者の型に存在する依存関係プロパティに依存関係プロパティのメタデータを提供します。</summary>
        <returns>依存関係プロパティを識別する元の <see cref="T:System.Windows.DependencyProperty" /> 識別子への参照。 この識別子は、追加クラスによって <see langword="public static readonly" /> フィールドとして公開する必要があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、その特定の依存関係プロパティを最初に登録していない型に対する依存関係プロパティを認識する、プロパティ システムを使用します。  
  
 所有者の追加のクラスに存在するように特には、このメソッドの戻り値を宣言して、依存関係プロパティを公開する使用されます。 通常、元の所有者と追加された所有者の両方に同じプロパティ名は、同様の機能を示すために使用する必要があります。 同様に、新しい識別子を公開することをお勧め [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] を使用する型に追加される依存関係プロパティのプロパティのラッパー <xref:System.Windows.DependencyProperty.AddOwner%2A>します。  
  
 <xref:System.Windows.DependencyProperty.AddOwner%2A> を作成するときに、前の推奨される方法を使用 [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] 内で宣言された [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]します。 たとえば、両方とも <xref:System.Windows.Controls.Border> と <xref:System.Windows.Controls.Control> を定義、 `BorderBrush` 類似した機能の依存関係プロパティ。<xref:System.Windows.Controls.Control> 定義、 `BorderBrush` プロパティを呼び出すことによって、プロパティ システム <xref:System.Windows.DependencyProperty.AddOwner%2A> 元の所有者に <xref:System.Windows.Controls.Border> 、登録されていると <xref:System.Windows.Controls.Border.BorderBrushProperty> 依存関係プロパティの識別子。<xref:System.Windows.DependencyProperty.AddOwner%2A> 戻り値は、静的なを確立するために使用し、 <xref:System.Windows.DependencyProperty> フィールド \(<xref:System.Windows.Controls.Control.BorderBrushProperty>\) 追加された所有者では、そのプロパティの `BorderBrush` プロパティのラッパーが併せて宣言されています。  
  
 追加された所有者の依存関係プロパティの識別子をなど操作に使用する必要があります <xref:System.Windows.DependencyObject.GetValue%2A>します。 ただし、型または異なるメタデータを持つ所有者があるように追加されたクラスのインスタンスのいずれかに関連する型固有の操作を返すいても、期待どおりの結果、元の \(追加された所有者ではないの\) などの依存関係プロパティの識別子がメソッドの呼び出しで指定された <xref:System.Windows.DependencyObject.GetValue%2A> または <xref:System.Windows.DependencyProperty.GetMetadata%2A>です。 によって追加された所有者のメタデータを永続的なものは、 <xref:System.Windows.DependencyProperty.AddOwner%2A> 必ずしも所有者クラス識別子フィールドの追加によって排他的参照自体を呼び出します。 新しい識別子を公開することをお勧めはそれでもやはり、 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] を使用する型に追加される依存関係プロパティのプロパティのラッパー <xref:System.Windows.DependencyProperty.AddOwner%2A>, そのためには失敗している間に不一致が作成されるため、 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] と [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 、プロパティの形式です。  
  
 提供されたメタデータは、基本の所有者に存在する依存関係プロパティのプロパティのメタデータに結合されます。 元の基本のメタデータで指定されたすべての特性が保持されます。 新しいメタデータに変更された具体的には特性だけでは、基本のメタデータの特性を上書きします。 いくつかの特性など <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, 、新しいメタデータに指定されている場合に置き換えられます。 他のユーザーなど <xref:System.Windows.PropertyChangedCallback>, 、結合されます。 最終的には、マージ動作によって異なりますので、ここで説明した動作で使用される既存のプロパティ メタデータ クラス用に、上書きに使用されているプロパティのメタデータ型 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 依存関係プロパティ。 詳細については、「 [依存関係プロパティ メタデータ](http://msdn.microsoft.com/ja-jp/d01ed009-b722-41bf-b82f-fe1a8cdc50dd) と [フレームワーク プロパティ メタデータ](http://msdn.microsoft.com/ja-jp/9962f380-b885-4b61-a62e-457397083fea)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>依存関係プロパティの既定のメタデータを取得します。</summary>
        <value>依存関係プロパティの既定のメタデータ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定のメタデータは、代替のメタデータが指定されていない明示的な特定のオブジェクトまたは派生型のオブジェクトに提供されるプロパティ メタデータ <xref:System.Windows.DependencyProperty.Register%2A> または <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 呼び出します。  
  
 元の所有者では、最初にメタデータが適用されている場合 <xref:System.Windows.DependencyProperty.Register%2A> を依存関係プロパティを設定とそのメタデータが返されます <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>します。  
  
 元のメタデータが適用されていない場合 <xref:System.Windows.DependencyProperty.Register%2A> 内から既定のメタデータを生成しを呼び出すと、 <xref:System.Windows.DependencyProperty.Register%2A> 呼び出し、この値として返される、 <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>です。  
  
 関連付けられている既定のメタデータの主な目的、 <xref:System.Windows.DependencyProperty> はいずれかで、このプロパティの既定値を提供する <xref:System.Windows.DependencyObject> または派生型です。  
  
 非添付プロパティは、このプロパティによって返されるメタデータの種類の派生型にキャストできない <xref:System.Windows.PropertyMetadata> 派生メタデータ型のプロパティが最初に登録された場合でもを入力します。 最初に登録されているメタデータを元のメタデータの可能性がある派生型を含む場合は、呼び出す <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> パラメーターとして代わりに、入力元の登録を渡します。  
  
 このプロパティによって返されるメタデータの型には、添付プロパティの元で指定された型と一致 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> の登録方法です。  
  
   
  
## 例  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.DependencyProperty" /> のハッシュ コードを返します。</summary>
        <returns>この <see cref="T:System.Windows.DependencyProperty" /> のハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロパティ システムは、一意の識別子を使用して <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, 、およびそのプロパティの値がによって返される <xref:System.Windows.DependencyProperty.GetHashCode%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType">依存関係プロパティのメタデータを取得する対象の特定の型。</param>
        <summary>指定した既存の型に存在する場合の、この依存関係プロパティのメタデータを返します。</summary>
        <returns>プロパティ メタデータ オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 型は、元の登録にいずれかが理由から、メタデータが異なるので、必要なを使用する型またはオブジェクト参照を指定する <xref:System.Windows.DependencyProperty.AddOwner%2A> または <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> の呼び出しを型に存在する場合は、依存関係プロパティのメタデータを変更します。  
  
   
  
## 例  
 次の例では、その型に基づく依存関係プロパティのメタデータを取得します。 使用して、型を取得、 `typeof` 演算子。  
  
 [!code-csharp[PropertySystemEsoterics\#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics\#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">メタデータの取得元となる依存関係プロパティの型固有のバージョンを確認するために型をチェックするときの、対象となる依存関係オブジェクト。</param>
        <summary>この依存関係プロパティのメタデータが指定したオブジェクト インスタンスに存在する場合に、このメタデータを返します。</summary>
        <returns>プロパティ メタデータ オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定する、または型のオブジェクト参照を必要に応じて、元の登録にいずれかが理由から、指定された依存関係プロパティのメタデータが異なるので <xref:System.Windows.DependencyProperty.AddOwner%2A> または <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> の呼び出しを型に存在する場合、プロパティのメタデータを絞り込むことができます。  
  
 インスタンスに基づくプロパティのメタデータを要求するときに内部的にその型を評価できるように、インスタンスを渡しているにすぎません。 依存関係プロパティのメタデータがインスタンスごとに異なるできません。任意の型のプロパティの組み合わせに対して一貫したは常にします。  
  
   
  
## 例  
 次の例は、固有の仕様に基づく依存関係プロパティのメタデータを取得 <xref:System.Windows.DependencyObject> インスタンス。  
  
 [!code-csharp[PropertySystemEsoterics\#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics\#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType">依存関係プロパティ メタデータの取得元となる依存関係オブジェクト型を記録する特定のオブジェクト。</param>
        <summary>指定した型に存在する場合の、この依存関係プロパティのメタデータを返します。</summary>
        <returns>プロパティ メタデータ オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定する、または型のオブジェクト参照を必要に応じて、元の登録にいずれかが理由から、指定された依存関係プロパティのメタデータが異なるので <xref:System.Windows.DependencyProperty.AddOwner%2A> または <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> の呼び出しを型に存在する場合、プロパティのメタデータを絞り込むことができます。  
  
   
  
## 例  
 次の例に基づく依存関係プロパティのメタデータを取得するその <xref:System.Windows.DependencyObjectType>します。  
  
 [!code-csharp[PropertySystemEsoterics\#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics\#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>依存関係プロパティを一意に識別する内部生成された値を取得します。</summary>
        <value>一意の数値識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この値が整数で、 [!INCLUDE[TLA#tla_guid](~/includes/tlasharptla-guid-md.md)]です。 一般に、このインデックス値を使用する必要はありませんし、インデックス テーブルにアクセスするすべての依存関係プロパティはありません。 依存関係プロパティが代わりに、識別子フィールドで参照されている必要があります。  
  
 <xref:System.Windows.DependencyProperty.GlobalIndex%2A> 使用するデータ構造体へのアクセス速度を内部的に使用される、 <xref:System.Windows.DependencyProperty.GlobalIndex%2A> 0 から始まる配列のインデックス。 ような使用状況は、アプリケーションの設計者またはツールがあります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">確認する値。</param>
        <summary>元の依存関係プロパティの登録で提供されるプロパティの型に対してチェック済みとして指定された値がこの依存関係プロパティの型で許容できるかどうかを決定します。</summary>
        <returns>
          <see langword="true" /> 指定した値が登録されているプロパティ型の場合、または許容可能な派生型です。それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値 `null` または参照型の依存関係プロパティの有効な型は、 <xref:System.Nullable%601> 依存関係プロパティを返す `true` このような場合です。 依存関係プロパティがどちらの参照の場合も、 <xref:System.Nullable%601> 型、 <xref:System.Windows.DependencyProperty.IsValidType%2A> 戻ります `false` 例外を発生ではなく、null 値のです。  
  
   
  
## 例  
 次の例では使用 <xref:System.Windows.DependencyProperty.IsValidType%2A> チェックを呼び出す前として <xref:System.Windows.DependencyObject.SetValue%2A> 、依存関係プロパティ。  
  
 [!code-csharp[PropertySystemEsoterics\#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics\#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">確認する値。</param>
        <summary>基本的な型チェックを使用してプロパティの型の指定された値を受け入れるかどうかが決定されるおそれもありますし、その型の値の許容範囲内にある場合。</summary>
        <returns>
          <see langword="true" /> 値が許容では、適切な型または派生型である場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 依存関係プロパティの許可されるその型の値の範囲を指定してから、 <xref:System.Windows.ValidateValueCallback> 依存関係プロパティの登録で提供されます。  
  
 このメソッドを呼び出す <xref:System.Windows.DependencyProperty.IsValidType%2A> 内部的にします。 該当する依存関係プロパティを持たない場合 <xref:System.Windows.ValidateValueCallback>,を呼び出すことと実質的に同一ではこのメソッドを呼び出す <xref:System.Windows.DependencyProperty.IsValidType%2A>します。 依存関係プロパティが設定されている場合、 <xref:System.Windows.ValidateValueCallback>, と if <xref:System.Windows.DependencyProperty.IsValidType%2A> あれば返さ `true`, 、コールバックに実装されているとされる値が返されます。  
  
 Null 値は、参照型の依存関係プロパティのまたは有効な値、 <xref:System.Nullable%601> 依存関係プロパティを返す `true` このような場合です。 依存関係プロパティがどちらの参照の場合も、 <xref:System.Nullable%601> 型、 <xref:System.Windows.DependencyProperty.IsValidType%2A> 戻ります `false` 例外を発生ではなく、null 値のです。  
  
   
  
## 例  
 次の例では使用 <xref:System.Windows.DependencyProperty.IsValidValue%2A> チェックを呼び出す前として <xref:System.Windows.DependencyObject.SetValue%2A> 、依存関係プロパティ。  
  
 [!code-csharp[PropertySystemEsoterics\#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics\#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>依存関係プロパティの名前を取得します。</summary>
        <value>プロパティの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティで指定された名前の取得、 `name` 依存関係プロパティの登録時にパラメーター。 この名前は変更できないとすることはできません `null` または空の文字列です。 同じ所有者型に重複する名前登録と共有できないと、重複を登録しようとするときに例外がスローされます。  
  
> [!IMPORTANT]
>  <xref:System.Windows.DependencyProperty.Name%2A> プロパティの依存関係の一致する名前サフィックス"Property"マイナスの依存関係プロパティの識別子の規則に従う必要があります。 詳細については、「 [カスタム依存関係プロパティ](http://msdn.microsoft.com/ja-jp/e6bfcfac-b10d-4f58-9f77-a864c2a2938f)します。  
  
   
  
## 例  
 次の例のクエリの依存関係プロパティの識別子では、さまざまな特性を含む、 <xref:System.Windows.DependencyProperty.Name%2A>です。  
  
 [!code-csharp[PropertySystemEsoterics\#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics\#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">この依存関係プロパティが継承され、指定した代替メタデータが適用される型。</param>
        <param name="typeMetadata">オーバーライドする型の依存関係プロパティに適用するメタデータ。</param>
        <summary>指定した型のインスタンスに存在する場合の代替メタデータをこの依存関係プロパティに提供し、基本型から継承されたときにこの依存関係プロパティに存在していたメタデータをオーバーライドします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロパティ システムは、依存関係プロパティを使用する前に、依存関係プロパティのメタデータをオーバーライドする必要があります。 これは、特定のインスタンスは、依存関係プロパティを登録するクラスを使用して作成された時間に相当します。 呼び出す <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> として自体を提供する型の静的コンス トラクター内でのみ実行する必要があります、 `forType` またはのようなインスタンス化でこのメソッドのパラメーターです。 所有者型のインスタンスが存在した後、メタデータを変更するとしていますが、例外は発生しませんが、プロパティ システムに一貫性のない動作が発生します。  
  
 このメソッドを使用して、特定の派生クラスのオーバーライドのメタデータが確立されると、その後この同じ派生クラスのメタデータをオーバーライドするとは、例外が発生します。  
  
 提供されたメタデータは、基本の所有者に存在する依存関係プロパティのプロパティのメタデータに結合されます。 元の基本のメタデータで指定されたすべての特性が保持されます。新しいメタデータに変更された具体的には特性だけでは、基本のメタデータの特性を上書きします。 いくつかの特性など <xref:System.Windows.PropertyMetadata.DefaultValue%2A> は、新しいメタデータに指定されている場合に置き換えられます。 他のユーザーなど <xref:System.Windows.PropertyChangedCallback>, 、結合されます。 最終的には、マージ動作によって異なりますので、ここで説明した動作で使用される既存のプロパティ メタデータ クラス用に、上書きに使用されているプロパティのメタデータ型 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 依存関係プロパティ。 詳細については、「 [依存関係プロパティ メタデータ](http://msdn.microsoft.com/ja-jp/d01ed009-b722-41bf-b82f-fe1a8cdc50dd) と [フレームワーク プロパティ メタデータ](http://msdn.microsoft.com/ja-jp/9962f380-b885-4b61-a62e-457397083fea)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">読み取り専用の依存関係プロパティでメタデータをオーバーライドしようとしました \(このシグネチャを使用してこの操作を行うことはできません\)。</exception>
        <exception cref="T:System.ArgumentException">指定した型に存在する場合のメタデータが、この依存関係プロパティに対して既に確立されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType">この依存関係プロパティが継承され、指定した代替メタデータが適用される型。</param>
        <param name="typeMetadata">オーバーライドする型の依存関係プロパティに適用するメタデータ。</param>
        <param name="key">読み取り専用の依存関係プロパティのアクセス キー。</param>
        <summary>指定した型のインスタンスに存在する場合に代替メタデータを読み取り専用の依存関係プロパティに提供し、依存関係プロパティの最初の登録時に指定したメタデータをオーバーライドします。 例外の発生を防ぐために、読み取り専用の依存関係プロパティに <see cref="T:System.Windows.DependencyPropertyKey" /> を渡す必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この署名を使用する読み取り専用の依存関係プロパティの識別子の基になる実装 \(<xref:System.Windows.DependencyPropertyKey>\) メソッドです。 読み取り\/書き込みの依存関係プロパティのメタデータを上書きする場合に使用して <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>します。  
  
 プロパティ システムは、依存関係プロパティを使用する前に、依存関係プロパティのメタデータをオーバーライドする必要があります。 これは、依存関係プロパティを登録するクラスの特定のオブジェクトが作成された時間に相当します。 呼び出す <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> として自体を提供する型の静的コンス トラクター内でのみ実行する必要があります、 `forType` またはのようなインスタンス化でこのメソッドのパラメーターです。 所有者型のインスタンスが存在した後、メタデータを変更するとしていますが、例外は発生しませんが、プロパティ システムに一貫性のない動作が発生します。  
  
 このメソッドを使用して、特定の派生クラスのオーバーライドのメタデータが確立されると、その後この同じ派生クラスのメタデータをオーバーライドするとは、例外が発生します。  
  
 提供されたメタデータは、基本の所有者に存在する依存関係プロパティのプロパティのメタデータに結合されます。 元の基本のメタデータで指定されたすべての特性が保持されます。新しいメタデータに変更された具体的には特性だけでは、基本のメタデータの特性を上書きします。 いくつかの特性など <xref:System.Windows.PropertyMetadata.DefaultValue%2A> は、新しいメタデータに指定されている場合に置き換えられます。 他のユーザーなど <xref:System.Windows.PropertyChangedCallback>, 、結合されます。 マージ動作をオーバーライドに使用されているプロパティのメタデータの型によって異なります。 詳細については、「 [依存関係プロパティ メタデータ](http://msdn.microsoft.com/ja-jp/d01ed009-b722-41bf-b82f-fe1a8cdc50dd) と [フレームワーク プロパティ メタデータ](http://msdn.microsoft.com/ja-jp/9962f380-b885-4b61-a62e-457397083fea)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>依存関係プロパティをプロパティ システムに登録したオブジェクト、または自身をプロパティの所有者として追加したオブジェクトの型を取得します。</summary>
        <value>プロパティを登録したオブジェクト、または自身をプロパティの所有者として追加したオブジェクトの型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この値は、プロパティの登録時に指定されました。 所有者は型であるか、元登録の場合、 <xref:System.Windows.DependencyProperty> から生成された識別子、 <xref:System.Windows.DependencyProperty.Register%2A> 呼び出し、または自身の場合の所有者として追加した型、 <xref:System.Windows.DependencyProperty> から生成された識別子、 <xref:System.Windows.DependencyProperty.AddOwner%2A> を呼び出します。  
  
 <xref:System.Windows.DependencyProperty.OwnerType%2A> でも、指定した <xref:System.Windows.DependencyProperty> は変更できないとすることはできません `null` で有効な <xref:System.Windows.DependencyProperty>です。  
  
   
  
## 例  
 次の例は、依存関係プロパティの識別子に基づいて所有者型を取得 `dp`, 、し、所有者型でその同じ識別子のメタデータを取得します。 この操作は実際に取得することに <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> に `dp`します。  
  
 [!code-csharp[PropertySystemEsoterics\#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics\#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>その値の依存関係プロパティが使用する型を取得します。</summary>
        <value>
          <see cref="T:System.Type" /> のプロパティの値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを元のプロパティの登録によって宣言されたプロパティの値の種類を報告する、 `propertyType` パラメーター。 ような <xref:System.Windows.DependencyProperty.Name%2A>, 、登録後に依存関係プロパティのプロパティの型は変更されません。  
  
   
  
## 例  
 次の例のクエリの依存関係プロパティの識別子では、さまざまな特性を含む、 <xref:System.Windows.DependencyProperty.PropertyType%2A>です。 型名の文字列、 <xref:System.Windows.DependencyProperty.PropertyType%2A> はから返された <xref:System.Type>です。  
  
 [!code-csharp[PropertySystemEsoterics\#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics\#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この依存関係プロパティが識別されているかどうかを示す値を取得 <see cref="T:System.Windows.DependencyProperty" /> インスタンスが読み取り専用の依存関係プロパティ。</summary>
        <value>
          <see langword="true" /> 依存関係プロパティが読み取り専用の場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 読み取り専用の依存関係プロパティが呼び出すことによって、プロパティ システムに登録されて、 <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> メソッドとは対照的に、 <xref:System.Windows.DependencyProperty.Register%2A> メソッドです。 添付プロパティは、読み取り専用として登録することもできます。参照してください <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>します。  
  
 読み取り専用の依存関係プロパティが必要な <xref:System.Windows.DependencyPropertyKey> 識別子ではなく、 <xref:System.Windows.DependencyProperty> メタデータのオーバーライドや値の設定などのメタデータの操作を実行する識別子。 コレクションを取得した場合は <xref:System.Windows.DependencyProperty> を呼び出すことによって識別子 <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> 別または [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] 識別子、チェックを公開する、 <xref:System.Windows.DependencyProperty.ReadOnly%2A> 呼び出そうとすると前に、の値 <xref:System.Windows.DependencyObject.SetValue%2A> または <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 、入力パラメーターとしてその依存関係プロパティの識別子を使用して、この識別子は、依存関係プロパティが読み取り専用がないことを確認します。 場合の値 <xref:System.Windows.DependencyProperty.ReadOnly%2A> は `true` 依存関係プロパティへの参照を取得するプログラムの方法はありません、 <xref:System.Windows.DependencyPropertyKey> メタデータからまたはその依存関係プロパティの識別子、 <xref:System.Windows.DependencyProperty> 識別子; 識別子を呼び出すために、静的フィールドとして使用する必要があります <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> に対する読み取り専用の依存関係プロパティ。  
  
 カスタム依存関係プロパティを作成するし、読み取り専用として登録するの get アクセサーだけを定義する必要があります、 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] ラッパー プロパティです。 それ以外の場合、クラスには、バックアップの依存関係プロパティへのアクセスと比較してプロパティのラッパーの混乱を招くオブジェクト モデルがあります。 詳細については、「 [カスタム依存関係プロパティ](http://msdn.microsoft.com/ja-jp/e6bfcfac-b10d-4f58-9f77-a864c2a2938f) または [読み取り専用依存関係プロパティ](http://msdn.microsoft.com/ja-jp/f23d6ec9-3780-4c09-a2ff-b2f0a2deddf1)します。  
  
   
  
## 例  
 次の例では、さまざまな依存関係プロパティのフィールドから既定のメタデータと依存関係プロパティの識別子のプロパティを取得し、情報を使用して、「メタデータ ブラウザー」を実装するテーブルを設定します。  
  
 [!code-csharp[PropertySystemEsoterics\#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics\#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">登録する依存関係プロパティの名前。 名前は、所有者型の登録名前空間内で一意である必要があります。</param>
        <param name="propertyType">プロパティの型。</param>
        <param name="ownerType">依存関係プロパティを登録する所有者型。</param>
        <summary>プロパティ名、プロパティ型、所有者型を指定して、依存関係プロパティを登録します。</summary>
        <returns>クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 依存関係プロパティの登録の詳細については、次を参照してください。 <xref:System.Windows.DependencyProperty>します。  
  
   
  
## 例  
 [!code-csharp[WPFAquariumSln\#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln\#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">登録する依存関係プロパティの名前。</param>
        <param name="propertyType">プロパティの型。</param>
        <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
        <param name="typeMetadata">依存関係プロパティのプロパティ メタデータ。</param>
        <summary>プロパティ名、プロパティの型、所有者の型、プロパティ メタデータを指定して、依存関係プロパティを登録します。</summary>
        <returns>クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する必要がある依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 依存関係プロパティの登録の詳細については、次を参照してください。 <xref:System.Windows.DependencyProperty>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">登録する依存関係プロパティの名前。</param>
        <param name="propertyType">プロパティの型。</param>
        <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
        <param name="typeMetadata">依存関係プロパティのプロパティ メタデータ。</param>
        <param name="validateValueCallback">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるコールバックへの参照。</param>
        <summary>プロパティ名、プロパティ型、所有者型、プロパティ メタデータ、およびプロパティの値検証コールバックを指定して、依存関係プロパティを登録します。</summary>
        <returns>クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する必要がある依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 依存関係プロパティの登録の詳細については、次を参照してください。 <xref:System.Windows.DependencyProperty>します。  
  
   
  
## 例  
 次の例は、依存関係プロパティを検証コールバックを登録 \(コールバック定義は表示されません。 コールバック定義の詳細については、「 <xref:System.Windows.ValidateValueCallback>\)。  
  
 [!code-csharp[DPCallbackOverride\#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride\#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">登録する依存関係プロパティの名前。</param>
        <param name="propertyType">プロパティの型。</param>
        <param name="ownerType">依存関係プロパティを登録する所有者型。</param>
        <summary>プロパティ名、プロパティ型、および所有者型を指定して、添付プロパティを登録します。</summary>
        <returns>クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する必要がある依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 添付プロパティで定義されたプロパティの概念は、 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]です。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] アタッチされるプロパティを依存関係プロパティを実装します。[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 添付プロパティの依存関係プロパティは、レポート作成のレイアウト特性などの操作の \[全般\] プロパティのシステムで使用できますが、適用されるメタデータを持つことができます。 詳細については、次を参照してください。 [添付プロパティの概要](http://msdn.microsoft.com/ja-jp/75928354-dc01-47e8-a018-8409aec1f32d)します。  
  
 依存関係プロパティの登録の詳細については、次を参照してください。 <xref:System.Windows.DependencyProperty>します。  
  
   
  
## 例  
 次の例は、これを使用する抽象クラスで添付プロパティを登録 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 署名します。  
  
 [!code-csharp[WPFAquariumSln\#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln\#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">登録する依存関係プロパティの名前。</param>
        <param name="propertyType">プロパティの型。</param>
        <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
        <param name="defaultMetadata">依存関係プロパティのプロパティ メタデータ。 ここには、既定値などの特性を含めることができます。</param>
        <summary>プロパティ名、プロパティの型、所有者の型、およびプロパティ メタデータを指定して、アタッチされるプロパティを登録します。</summary>
        <returns>クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する必要がある依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 添付プロパティで定義されたプロパティの概念は、 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]です。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] アタッチされるプロパティを依存関係プロパティを実装します。[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 添付プロパティの依存関係プロパティは、レポート作成のレイアウト特性などの操作の \[全般\] プロパティのシステムで使用できますが、適用されるメタデータを持つことができます。 詳細については、次を参照してください。 [添付プロパティの概要](http://msdn.microsoft.com/ja-jp/75928354-dc01-47e8-a018-8409aec1f32d)します。  
  
 依存関係プロパティの登録の詳細については、次を参照してください。 <xref:System.Windows.DependencyProperty>します。  
  
## RegisterAttached を使用して、依存関係プロパティの値の継承  
 1 つのシナリオでの依存関係プロパティを登録するため <xref:System.Windows.DependencyProperty.RegisterAttached%2A> の代わりに <xref:System.Windows.DependencyProperty.Register%2A> 、プロパティ値の継承をサポートすることです。 依存関係プロパティの値の継承を登録すべき <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 場合でも、クラスは、依存関係プロパティを公開するプロパティのラッパー アクセサーを定義し、実際の添付プロパティを提供するメソッドがアクセサーをサポートする Get \* とセット \* 静的を公開する予定がない場合でもです。   非添付依存関係プロパティに対して動作するプロパティ値の継承が表示されますが、実行時のツリーで特定要素の境界を使用して非添付プロパティの継承の動作は未定義です。 効果的に接続されている場合は、プロパティを登録する添付プロパティをグローバル プロパティ、プロパティ システムにし、プロパティ値の継承を要素ツリー内のすべての境界を越えて機能することを保証します。 常に使用する <xref:System.Windows.DependencyProperty.RegisterAttached%2A> を指定したプロパティを登録する <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> メタデータにします。 詳細については、次を参照してください。 [プロパティ値の継承](http://msdn.microsoft.com/ja-jp/d7c338f9-f2bf-48ed-832c-7be58ac390e4)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">登録する依存関係プロパティの名前。</param>
        <param name="propertyType">プロパティの型。</param>
        <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
        <param name="defaultMetadata">依存関係プロパティのプロパティ メタデータ。 ここには、既定値などの特性を含めることができます。</param>
        <param name="validateValueCallback">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるコールバックへの参照。</param>
        <summary>プロパティ型、所有者型、プロパティ メタデータ、および値の検証コールバックを指定して、添付プロパティを登録します。</summary>
        <returns>クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する必要がある依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 添付プロパティで定義されたプロパティの概念は、 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]です。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] アタッチされるプロパティを依存関係プロパティを実装します。[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 添付プロパティの依存関係プロパティは、レポート作成のレイアウト特性などの操作の \[全般\] プロパティのシステムで使用できますが、適用されるメタデータを持つことができます。 詳細については、次を参照してください。 [添付プロパティの概要](http://msdn.microsoft.com/ja-jp/75928354-dc01-47e8-a018-8409aec1f32d)します。  
  
 依存関係プロパティの登録の詳細については、次を参照してください。 <xref:System.Windows.DependencyProperty>します。  
  
## RegisterAttached を使用して、依存関係プロパティの値の継承  
 1 つのシナリオでの依存関係プロパティを登録するため <xref:System.Windows.DependencyProperty.RegisterAttached%2A> の代わりに <xref:System.Windows.DependencyProperty.Register%2A> 、プロパティ値の継承をサポートすることです。 依存関係プロパティの値の継承を登録すべき <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 場合でも、クラスは、依存関係プロパティを公開するプロパティのラッパー アクセサーを定義し、実際の添付プロパティを提供するメソッドがアクセサーをサポートする Get \* とセット \* 静的を公開する予定がない場合でもです。   非添付依存関係プロパティに対して動作するプロパティ値の継承が表示されますが、実行時のツリーで特定要素の境界を使用して非添付プロパティの継承の動作は未定義です。 効果的に接続されている場合は、プロパティを登録する添付プロパティをグローバル プロパティ、プロパティ システムにし、プロパティ値の継承を要素ツリー内のすべての境界を越えて機能することを保証します。 常に使用する <xref:System.Windows.DependencyProperty.RegisterAttached%2A> を指定したプロパティを登録する <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> メタデータにします。 詳細については、次を参照してください。 [プロパティ値の継承](http://msdn.microsoft.com/ja-jp/d7c338f9-f2bf-48ed-832c-7be58ac390e4)します。  
  
   
  
## 例  
 次の例は、これを使用する抽象クラスで添付プロパティを登録 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 署名します。 この添付プロパティは、列挙型のプロパティと、登録は、指定された値が列挙体の値であることを確認する検証コールバックを追加します。  
  
 [!code-csharp[WPFAquariumSln\#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln\#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">登録する依存関係プロパティの名前。</param>
        <param name="propertyType">プロパティの型。</param>
        <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
        <param name="defaultMetadata">依存関係プロパティのプロパティ メタデータ。</param>
        <summary>プロパティ型、所有者型、およびプロパティ メタデータを指定して、読み取り専用の添付プロパティを登録します。</summary>
        <returns>クラスの静的な読み取り専用フィールドの値を設定するために使用する必要がある依存関係プロパティのキー。これは後で依存関係プロパティの参照に使用されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが戻る型 <xref:System.Windows.DependencyPropertyKey>, であるのに対し <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 型を返します <xref:System.Windows.DependencyProperty>します。 通常は、読み取り専用プロパティを表すキー実行しなかった場合は、パブリック キーは、呼び出すことによって依存関係プロパティの値の設定を使用できるため <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>です。 クラスのデザインは、要件に影響を与えるが、アクセスし、いずれかの可視性を制限することが推奨通常 <xref:System.Windows.DependencyPropertyKey> クラスまたはアプリケーションのロジックの一部としてその依存関係プロパティを設定する必要があるコードの部分のみにします。 値を公開することにより、読み取り専用の依存関係プロパティの依存関係プロパティの識別子を公開することはお勧めも <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName> として、 `public static readonly` フィールド、クラスにします。  
  
 添付プロパティの主なシナリオで使用するには、読み取り専用の添付プロパティはまれなシナリオでは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]です。 パブリックな setter なし添付プロパティを設定できません [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文です。  
  
 依存関係プロパティの登録の詳細については、次を参照してください。 <xref:System.Windows.DependencyProperty>します。  
  
## RegisterAttached を使用して、依存関係プロパティの値の継承  
 プロパティ値の継承をサポートするためには、1 つのシナリオとして、依存関係プロパティを登録するためです。 依存関係プロパティの値の継承を登録すべき <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 場合でも、クラスは、依存関係プロパティを公開するプロパティのラッパー アクセサーを定義し、実際の添付プロパティを提供するメソッドがアクセサーをサポートする Get \* とセット \* 静的を公開する予定がない場合でもです。   非添付依存関係プロパティに対して動作するプロパティ値の継承が表示されますが、実行時のツリーで特定要素の境界を使用して非添付プロパティの継承の動作は未定義です。 効果的に接続されている場合は、プロパティを登録する添付プロパティをグローバル プロパティ、プロパティ システムにし、プロパティ値の継承を要素ツリー内のすべての境界を越えて機能することを保証します。 常に使用する <xref:System.Windows.DependencyProperty.RegisterAttached%2A> を指定したプロパティを登録する <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> メタデータにします。 詳細については、次を参照してください。 [プロパティ値の継承](http://msdn.microsoft.com/ja-jp/d7c338f9-f2bf-48ed-832c-7be58ac390e4)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">登録する依存関係プロパティの名前。</param>
        <param name="propertyType">プロパティの型。</param>
        <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
        <param name="defaultMetadata">依存関係プロパティのプロパティ メタデータ。</param>
        <param name="validateValueCallback">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるユーザー作成のコールバックへの参照。</param>
        <summary>プロパティ型、所有者型、プロパティ メタデータ、および検証コールバックを指定して、読み取り専用の添付プロパティを登録します。</summary>
        <returns>クラスの静的な読み取り専用フィールドの値を設定するために使用され、次いで依存関係プロパティの参照に使用される、依存関係プロパティのキー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが戻る型 <xref:System.Windows.DependencyPropertyKey>, であるのに対し <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 型を返します <xref:System.Windows.DependencyProperty>します。 型を表すキーでは通常、 <xref:System.Windows.DependencyProperty>です。 通常は、読み取り専用プロパティを表すキー実行しなかった場合は、パブリック キーは、呼び出すことによって依存関係プロパティの値の設定を使用できるため <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>です。 クラスのデザインは、要件に影響を与えるが、アクセスし、いずれかの可視性を制限することが推奨通常 <xref:System.Windows.DependencyPropertyKey> クラスまたはアプリケーションのロジックの一部としてその依存関係プロパティを設定する必要があるコードの部分のみにします。 値を公開することにより、読み取り専用の依存関係プロパティの依存関係プロパティの識別子を公開することはお勧めも <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName> として、 `public static readonly` フィールド、クラスにします。  
  
 添付プロパティの主なシナリオで使用するには、読み取り専用の添付プロパティはまれなシナリオでは、 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]です。 パブリックな setter なし添付プロパティを設定できません [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文です。  
  
 依存関係プロパティの登録の詳細については、次を参照してください。 <xref:System.Windows.DependencyProperty>します。  
  
## RegisterAttached を使用して、依存関係プロパティの値の継承  
 1 つのシナリオの代わりに接続されている場合は、依存関係プロパティを登録するため <xref:System.Windows.DependencyProperty.Register%2A> はプロパティ値の継承をサポートするためです。 依存関係プロパティの値の継承を登録すべき <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 場合でも、クラスは、依存関係プロパティを公開するプロパティのラッパー アクセサーを定義し、実際の添付プロパティを提供するメソッドがアクセサーをサポートする Get \* とセット \* 静的を公開する予定がない場合でもです。   非添付依存関係プロパティに対して動作するプロパティ値の継承が表示されますが、実行時のツリーで特定要素の境界を使用して非添付プロパティの継承の動作は未定義です。 効果的に接続されている場合は、プロパティを登録する添付プロパティをグローバル プロパティ、プロパティ システムにし、プロパティ値の継承を要素ツリー内のすべての境界を越えて機能することを保証します。 常に使用する <xref:System.Windows.DependencyProperty.RegisterAttached%2A> を指定したプロパティを登録する <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> メタデータにします。 詳細については、次を参照してください。 [プロパティ値の継承](http://msdn.microsoft.com/ja-jp/d7c338f9-f2bf-48ed-832c-7be58ac390e4)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name">登録する依存関係プロパティの名前。</param>
        <param name="propertyType">プロパティの型。</param>
        <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
        <param name="typeMetadata">依存関係プロパティのプロパティ メタデータ。</param>
        <summary>プロパティ型、所有者型、プロパティ メタデータを指定して、読み取り専用の依存関係プロパティを登録します。</summary>
        <returns>クラスの静的な読み取り専用フィールドの値を設定するために使用され、次いで依存関係プロパティの参照に使用される、依存関係プロパティのキー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが戻る型 <xref:System.Windows.DependencyPropertyKey>, であるのに対し <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 型を返します <xref:System.Windows.DependencyProperty>します。 通常は、読み取り専用プロパティを表すキー実行しなかった場合は、パブリック キーは、呼び出すことによって依存関係プロパティの値の設定を使用できるため <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>です。 クラスのデザインは、要件に影響を与えるが、アクセスし、いずれかの可視性を制限することが推奨通常 <xref:System.Windows.DependencyPropertyKey> クラスまたはアプリケーションのロジックの一部としてその依存関係プロパティを設定する必要があるコードの部分のみにします。 値を公開することにより、読み取り専用の依存関係プロパティの依存関係プロパティの識別子を公開することはお勧めも <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName> として、 `public static readonly` フィールド、クラスにします。  
  
 読み取り専用の依存関係プロパティはごく一般的なシナリオ両方既存の [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] とカスタマイズのシナリオのための他の [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 場合でも、そのプロパティはありませんを設定する呼び出し元が、機能は依存関係プロパティを必要があります。 作成などの依存関係プロパティを受け取るプロパティ システム操作でその他の基準として読み取り専用の依存関係プロパティの値を使用することができます、 <xref:System.Windows.Trigger> スタイルの依存関係プロパティのです。  
  
 依存関係プロパティの登録の詳細については、次を参照してください。 <xref:System.Windows.DependencyProperty>します。  
  
   
  
## 例  
 次の例では登録、 `AquariumSize` 読み取り専用と依存関係プロパティ。 例では定義 `AquariumSizeKey` \(したがって他のアセンブリのクラスには、メタデータを上書きできます\) 内部のキーと公開とそのキーに基づいて依存関係プロパティの識別子として `AquariumSizeProperty`します。 ラッパーを作成するも、 `AquariumSize`, 、get アクセサーだけとします。  
  
 [!code-csharp[WPFAquariumSln\#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln\#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name">登録する依存関係プロパティの名前。</param>
        <param name="propertyType">プロパティの型。</param>
        <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
        <param name="typeMetadata">依存関係プロパティのプロパティ メタデータ。</param>
        <param name="validateValueCallback">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるユーザー作成のコールバックへの参照。</param>
        <summary>プロパティ型、所有者型、プロパティ メタデータ、および検証コールバックを指定して、読み取り専用の依存関係プロパティを登録します。</summary>
        <returns>クラスの静的な読み取り専用フィールドの値を設定するために使用する必要がある依存関係プロパティのキー。これは後で依存関係プロパティの参照に使用されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが戻る型 <xref:System.Windows.DependencyPropertyKey>, であるのに対し <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 型を返します <xref:System.Windows.DependencyProperty>します。 通常は、読み取り専用プロパティを表すキー実行しなかった場合は、パブリック キーは、呼び出すことによって依存関係プロパティの値の設定を使用できるため <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>です。 クラスのデザインは、要件に影響を与えるが、アクセスし、いずれかの可視性を制限することが推奨通常 <xref:System.Windows.DependencyPropertyKey> クラスまたはアプリケーションのロジックの一部としてその依存関係プロパティを設定する必要があるコードの部分のみにします。 値を公開することにより、読み取り専用の依存関係プロパティの依存関係プロパティの識別子を公開することはお勧めも <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=fullName> として、 `public static readonly` フィールド、クラスにします。  
  
 読み取り専用の依存関係プロパティは、非常に一般的なシナリオです。 作成などの依存関係プロパティを受け取るプロパティ システム操作でその他の基準として読み取り専用の依存関係プロパティの値を使用することができます、 <xref:System.Windows.Trigger> スタイルの依存関係プロパティのです。  
  
 依存関係プロパティの登録の詳細については、次を参照してください。 <xref:System.Windows.DependencyProperty>します。  
  
 読み取り専用の依存関係プロパティの検証を重要性が低いことがあります。 キーの指定した非パブリックなアクセス レベルは、任意の無効な入力の可能性を軽減します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>依存関係プロパティの文字列表現を返します。</summary>
        <returns>依存関係プロパティの文字列表現。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装は、 <xref:System.Windows.DependencyProperty.Name%2A> プロパティの値。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用される静的な値の指定、 WPF プロパティ システムなく <see langword="null" /> プロパティは存在するが、プロパティ システムによって設定された値を持たないことを示すためにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.DependencyProperty.UnsetValue> シナリオに使用される sentinel 値は、ここで、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティ システムは、要求を決定することは <xref:System.Windows.DependencyProperty> 値。<xref:System.Windows.DependencyProperty.UnsetValue> 使用なく `null`, ので、 `null` 有効なプロパティの値だけでなく、有効な可能性があります \(および頻繁に使用される\) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>します。  
  
 <xref:System.Windows.DependencyProperty.UnsetValue> 返されることは <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName>です。 呼び出すと <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=fullName> の依存関係プロパティで、 <xref:System.Windows.DependencyObject> インスタンスで、次のいずれかに該当します。  
  
-   依存関係プロパティはメタデータで確立された既定値を持ち、その値が返されます。 この値は <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>です。  
  
-   その他の値は、プロパティ システムによって確立されたし、既定値は使用できなくします。 詳細については、「 [依存関係プロパティの値の優先順位](http://msdn.microsoft.com/ja-jp/1fbada8e-4867-4ed1-8d97-62c07dad7ebc)します。  
  
 設定、 <xref:System.Windows.PropertyMetadata.DefaultValue%2A> の <xref:System.Windows.DependencyProperty.UnsetValue> は具体的には許可されません。  
  
 <xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=fullName> 返します <xref:System.Windows.DependencyProperty.UnsetValue> と要求されたプロパティが設定されていないローカルにします。  
  
 <xref:System.Windows.DependencyProperty.UnsetValue> 戻り値として使用する場合の特別な意味を持つ、 <xref:System.Windows.CoerceValueCallback>です。 詳細については、「 [依存関係プロパティのコールバックと検証](http://msdn.microsoft.com/ja-jp/48db5fb2-da7f-49a6-8e81-3540e7b25825)します。  
  
 場合は、データベースをバインドすることに注意 <xref:System.Windows.DependencyProperty.UnsetValue> は <xref:System.DBNull.Value>, 、方法と同様の方法で <xref:System.DBNull.Value> true null と等価ではありません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>依存関係プロパティの値の検証コールバックを取得します。</summary>
        <value>この依存関係プロパティの値の検証コールバック、 <paramref name="validateValueCallback" /> 元の依存関係プロパティの登録のパラメーターです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティが格納されます `null` に登録されている検証コールバックいない依存関係プロパティ。  
  
 コールバックが静的な意味で行動する値を検証する: 検証を使用して適用、 <xref:System.Windows.ValidateValueCallback> 指定された値が、特定のインスタンスに対して有効かどうかを判断できません。 コールバックは、依存関係プロパティを保持しているすべてのオブジェクトが必要がありますか、有効なものとして指定された値を許容しないようにするかどうかにのみを確認できます。 特定のインスタンスで使用するには、他の依存関係プロパティの値を知ることに依存する検証を実行する必要がある場合、 <xref:System.Windows.CoerceValueCallback> 代わりにします。<xref:System.Windows.CoerceValueCallback> の依存関係プロパティ内で直接ではなく、依存関係プロパティのメタデータの一環として登録します。 詳細については、「 [依存関係プロパティのコールバックと検証](http://msdn.microsoft.com/ja-jp/48db5fb2-da7f-49a6-8e81-3540e7b25825)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した型のインスタンスに存在する場合の代替メタデータをこの依存関係プロパティに提供します。この代替メタデータは、依存関係プロパティの最初の登録時に指定したメタデータの代わりに使用されます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>依存プロパティを登録します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>既に登録済みの依存関係プロパティの所有者として、ある型に別の型を追加します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定の型のメタデータが存在する場合、この依存関係プロパティに関連付けられているメタデータを返します。 依存関係プロパティが最初に登録された型、その後で依存関係プロパティが追加された型、または継承を通じて依存関係プロパティが取得され、そのメタデータが明確にオーバーライドされた型を指定できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>読み取り専用添付プロパティを登録します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>添付プロパティをプロパティ システムに登録します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>読み取り専用の依存関係プロパティとして、依存関係プロパティを登録します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>