<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>イベント マネージャーで使用される基本クラスを提供、 *弱いイベント パターン*します。 管理者は、追加し、パターンを使用してもイベント \(またはコールバック\) のリスナーを削除します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、イベント ソースに、イベント リスナーの独立したオブジェクトの有効期間がある場合は、弱いイベント パターンを使用します。 機能をディスパッチ中心となるイベントを使用して、 <xref:System.Windows.WeakEventManager> により、リスナーのハンドラーは、ソース オブジェクトが引き続き発生する場合でもガベージ コレクションされます。 これに対しを使用して通常のイベント フックアップ、 `+=` 演算子は、リスナーへの参照を保持するために切断された可能性のあるソース。 これは、受信側がガベージ コレクション、迅速にすることを防止できます。  
  
 1 つ一般的なソースとリスナーの有効期間の関係を使用する必要があります弱いイベント パターンのデータ バインドからの更新イベントを処理します。  
  
 弱いイベント パターンは、コールバックと通常のイベントのこともできます。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>For an example of a custom <see cref="T:System.Windows.WeakEventManager" />, see [Weak Event Patterns](~/docs/framework/wpf/advanced/weak-event-patterns.md).</para>
    </block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>派生クラスのコンス トラクターによって初期化子として使用している場合は、基本クラスの値を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">イベントを処理するオブジェクト。</param>
        <param name="args">
          <see cref="T:System.EventArgs" /> イベントを配信するためのイベント データを格納します。</param>
        <summary>各リスナーを管理対象のイベントを提供します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> メソッドを追加または削除されるイベント ハンドラー内で、 <xref:System.Windows.WeakEventManager.StartListening%2A> と <xref:System.Windows.WeakEventManager.StopListening%2A> サブクラスの実装です。  
  
 呼び出した場合、 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> メソッドで、 `AddListener` クラスの実装は、イベントを受け取るリスナーのリストは、基になるコレクションに保持されます。 \(`AddListener` インターフェイスまたはクラスのコントラクトの一部ではありません。`AddListener` 呼び出す、manager クラスのメソッドに推奨される名前は、 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> し、イベントの弱いイベント パターンのリスナーを追加します\)。  
  
 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> リスナーを 1 つのリストに追加します。 マネージャーの実装にイベントあたりのリスナーの 1 つ以上の一覧が保持している場合は使用しないで <xref:System.Windows.WeakEventManager.DeliverEvent%2A> または <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>です。 代わりに、実装する必要があります作成独自 <xref:System.Windows.WeakEventManager.ListenerList> インスタンス、 `AddListener` リスナーを適切なリストに追加する必要があり、イベントは、呼び出すことによって適切なリスナー リストに配信する必要があります <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender">イベントを処理するオブジェクト。</param>
        <param name="args">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <param name="list">指定された <see cref="T:System.Windows.WeakEventManager.ListenerList" />します。</param>
        <summary>指定されたリスト内の各リスナーを管理対象のイベントを提供します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、マネージャーの実装は、イベント データのキャプチャされた情報に基づいて個別のリスナーの一覧を保持している場合は、必要があります。 この高度な手法を使用する場合を作成し、マネージャーの実装の一部として、個別のリストを保持する必要があり、特定のリストにリスナーを追加する方法を提供する必要があります。 生のイベントをリッスンするハンドラーの実装する必要があります機能条件に応じて、リスト、区別するために使用し、適切なリストにのみ、イベントを配信します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType">取得する型、 <see cref="T:System.Windows.WeakEventManager" /> にします。</param>
        <summary>返します。、 <see cref="T:System.Windows.WeakEventManager" /> 、提供された型に対して使用される実装です。</summary>
        <returns>一致する <see cref="T:System.Windows.WeakEventManager" /> 実装します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 実装が、渡されたを使用してこのメソッドを呼び出す `managerType`します。 返された <xref:System.Windows.WeakEventManager> は、どのイベントを受信しましたとを呼び出すには、どのプライベート クラス ハンドラーを決定する要因として使用します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">要求されたソースの 0 から始まるインデックス。</param>
        <summary>取得または指定されたソースの格納されているデータを設定します。</summary>
        <value>このソースのマネージャーが格納されているデータ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生クラスには、データとこのインデクサーに格納する型を選択できます。 通常これとして実装される、 <xref:System.Windows.WeakEventManager.ListenerList>, 、リスナーへの弱い参照の一覧です。 この型を変更する場合にのみ必要があります、 <xref:System.Windows.WeakEventManager.ListenerList> 型は、必要な情報を含めることはできません。 そのため、オーバーライドする必要が場合、 <xref:System.Windows.WeakEventManager.Purge%2A> メソッド基になる型のすべてのクリーンアップが適切に実行できるようにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
        <returns>イベントのリスナーを格納する新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">ハンドラーのデリゲートがサブスクライブしているソース オブジェクト。</param>
        <param name="handler">発生するイベントを処理するデリゲート <c>source</c>します。</param>
        <summary>指定したソースのイベント ハンドラーとして指定されたデリゲートを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">リスナーを関連付けるソース。</param>
        <param name="listener">リッスンしているクラス \(実装する必要があります <see cref="T:System.Windows.IWeakEventListener" />\)。</param>
        <summary>管理対象のイベントの指定されたソースを指定したリスナーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Manager クラス内でこのメソッドを呼び出す `AddListener` メソッド <xref:System.Windows.WeakEventManager> 実装します。`AddListener` 推奨される名前は、弱いイベント パターン用のリスナーを追加するには、その他のクラスを有効にする、マネージャー クラスで定義する静的メソッドのです。`AddListener` 2 つのパラメーターを受け取る必要があります。 `source` リスナーが接続されている場合、 `listener` インスタンス。`AddListener` 実装を呼び出して、 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 、現在のマネージャーとパラメーターを渡す、同じ 2 つのメソッドです。  
  
 リスナーのリストが空になる場合、 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 呼び出し、 <xref:System.Windows.WeakEventManager.StartListening%2A> メソッド、固有の仕様を内部的には、どの呼び出しは <xref:System.Windows.WeakEventManager.StartListening%2A> ポリモーフィズムをオーバーライドします。  
  
 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 1 つの内部にリスナーを追加 <xref:System.Windows.WeakEventManager.ListenerList> あたり `source`です。 マネージャーの実装にイベント ソースの組み合わせごとのリスナーの 1 つ以上のリストが保持している場合は使用しないで <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>します。 代わりに、実装する必要があります作成独自 <xref:System.Windows.WeakEventManager.ListenerList> インスタンス、 `AddListener` リスナーを適切なリストに追加する必要があり、イベントは、呼び出すことによって適切なリスナー リストに配信する必要があります、 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> イベントの代わりに、 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">ハンドラーを削除するソース。</param>
        <param name="handler">削除するデリゲート <c>source</c>します。</param>
        <summary>指定されたソースから、以前に追加されたハンドラーを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">リスナーを削除するソース。</param>
        <param name="listener">リッスンしているクラス \(実装する必要があります <see cref="T:System.Windows.IWeakEventListener" />\)。</param>
        <summary>指定されたソースから、以前に追加されたリスナーを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Manager クラス内でこのメソッドを呼び出す `RemoveListener` メソッド <xref:System.Windows.WeakEventManager> 実装します。`RemoveListener` 推奨される名前は、弱いイベント パターンのリスナーを削除するには、他のクラスを有効にする、マネージャー クラスで定義する静的メソッドのです。`RemoveListener` 2 つのパラメーターを受け取る必要があります。 `source` リスナーを削除すると、場所、および `listener` クラスです。`RemoveListener` 実装を呼び出して、 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 、現在のマネージャーとパラメーターを渡す、同じ 2 つのメソッドです。  
  
 呼び出し <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 、リスト内の最後のリスナーを削除 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 呼び出し、 <xref:System.Windows.WeakEventManager.StopListening%2A> メソッド、固有の仕様を内部的には、どの呼び出しは <xref:System.Windows.WeakEventManager.StopListening%2A> ポリモーフィズムをオーバーライドします。  
  
 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 1 つの内部からのリスナーを削除 <xref:System.Windows.WeakEventManager.ListenerList> あたり `source`です。 マネージャーの実装にイベント ソースの組み合わせごとのリスナーの 1 つ以上のリストが保持している場合は使用しないで <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>します。 代わりに、実装する必要があります作成独自 <xref:System.Windows.WeakEventManager.ListenerList> インスタンス、 `RemoveListener` 適切なリストからのリスナーを削除する必要があり、イベントは、呼び出すことによって適切なリスナー リストに配信する必要があります、 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> メソッドの代わりに、 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">リッスンされているイベントのソース。</param>
        <param name="data">チェックするデータ。 このオブジェクトは要求する、 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 実装します。</param>
        <param name="purgeAll">
          <see langword="true" /> 待機を停止する <c>source</c>, からすべてのエントリを完全に削除し、 <c>data</c>します。</param>
        <summary>指定されたソースのデータのリストから非アクティブなリスナーのエントリを削除します。 返します。 <see langword="true" /> いくつかのエントリが実際には、一覧から削除された場合。</summary>
        <returns>
          <see langword="true" /> いくつかのエントリが実際に削除された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.WeakEventManager.Purge%2A> メソッドが既定の実装でデータがすべてのエントリを削除するには、 <xref:System.Windows.WeakEventManager.ListenerList>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>If the underlying type for the <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> is something other than <see cref="T:System.Windows.WeakEventManager.ListenerList" />, or contains data beyond a <see cref="T:System.Windows.WeakEventManager.ListenerList" />, you must override the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method. The override should provide purge behavior for the alternate type items list. Generally, the override should provide behavior without calling the base implementation. If a specific <see cref="T:System.Windows.WeakEventManager.ListenerList" /> still needs clearing, call <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータ テーブルの読み取りロックを設定し、返します、 <see cref="T:System.IDisposable" />です。</summary>
        <value>テーブルのデータ メンバーのロックを確立しを破棄する適切に使用できるオブジェクト、 <see langword="using" /> を構築します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生クラスで、クエリに含まれるテーブルを <xref:System.Windows.WeakEventManager.Item%2A> 内で常に実行する必要があります、 `using (ReadLock) { ... }` は既に書き込みロック内にあるクエリ以外の句。 これらのクエリより高度なクラスをサポートする場合に必要な場合があります `AddListener` を超える複数のデータを必要とする実装、 `source` と `listener`, を使用して、 <xref:System.Windows.WeakEventManager.Item%2A> を他の情報を格納するコレクション。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">情報をリスナーを削除するソース。</param>
        <summary>指定されたソースのすべてのリスナーを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基になるリスナー リスト内の未使用のエントリの削除が優先度の低いスレッドで実行することを要求します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> メソッドの呼び出しに似ていますが、 <xref:System.Windows.WeakEventManager.Purge%2A> スレッド優先度の低いでの現在のマネージャーのリストのメソッドで、 `purgeAll` パラメーターを設定する `false`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType">新しいイベント マネージャーを設定する型。</param>
        <param name="manager">新しいイベント マネージャー。</param>
        <summary>指定したマネージャーの種類の現在のマネージャーを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す、 <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> への呼び出しでその場合、マネージャーを初期化するメソッドが必要な `CurrentManager` プロパティを <xref:System.Windows.WeakEventManager> 実装します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">リッスンを開始するソース。</param>
        <summary>派生クラスでオーバーライドされた場合は、管理対象のイベントのリッスンを開始します。 後に、 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> メソッドが最初に呼び出される、マネージャーは、呼び出し元の状態である必要があります <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> または <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> 指定されたソースから関連するイベントを処理するたびにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> overrides should add a handler to the provided <paramref name="source" />. The handler is declared by the manager itself. The class handler should not be public, and it should only be called in response to the event being managed. The class handler should call the <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> method or the <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> method appropriately.</para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">リッスンを停止するソース。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定されたソース管理対象のイベントのリッスンを停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> implementations should remove the class handler as added by the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method. Removing a listener should not clear the listener list. Instead, it should only disconnect the class handler (perhaps temporarily). Other methods are available for clearing the entire list, such as the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method with the <paramref name="purgeAll" /> parameter set to <see langword="true" />.</para>
        </block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるデータ テーブルに書き込みロックを設定し、返します、<see cref="T:System.IDisposable" />です。</summary>
        <value>テーブルのデータ メンバーのロックを確立しを破棄する適切に使用できるオブジェクト、 <see langword="using" /> を構築します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生クラスで、基になるデータ テーブルに対するすべての変更が内で発生する必要があります、 `using (WriteLock) { ... }` 句。 これらの変更は、クラスがより高度なサポートしている場合は、必要あります `AddListener` を超える複数のデータを必要とする実装、 `source` と `listener`, を使用して、 <xref:System.Windows.WeakEventManager.Item%2A> を他の情報を格納するコレクション。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>