<Type Name="ValueSource" FullName="System.Windows.ValueSource">
  <TypeSignature Language="C#" Value="public struct ValueSource" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ValueSource extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ValueSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" /> から返される情報を報告します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 情報のほとんどを<xref:System.Windows.ValueSource>転送に含まれる、<xref:System.Windows.ValueSource.BaseValueSource%2A>プロパティです。 このプロパティには、全体の正確に 1 つの側面を指定する列挙値が含まれています。[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]は依存関係プロパティの有効な値をプロパティ システムです。  
  
 ベースの値だけでなく依存関係プロパティの値に関する興味深い可能性のあるその他の情報は、値はアニメーション化するかどうかと、値に \(など、バインディング、または動的リソース参照\) 式が含まれるかどうかです。 この情報は、によって報告される<xref:System.Windows.ValueSource.IsAnimated%2A>と<xref:System.Windows.ValueSource.IsExpression%2A>それぞれします。 強制型変換がプロパティ値で動作している場合プロパティは、目的の値を保持します。 また、プロパティの値は、特定の型変換の制約が変更されたか、リフト場合その目的の値に到達ましょう。 その目的の値ではない資格情報を持つプロパティをレポートで<xref:System.Windows.ValueSource.IsCoerced%2A>は`true`します。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
    <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
  </Docs>
  <Members>
    <Member MemberName="BaseValueSource">
      <MemberSignature Language="C#" Value="public System.Windows.BaseValueSource BaseValueSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.BaseValueSource BaseValueSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.BaseValueSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.BaseValueSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>値を取得、 <see cref="T:System.Windows.BaseValueSource" /> 列挙体は、値を持つ依存関係プロパティ システムを提供するソースをレポートします。</summary>
        <value>列挙体の値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 底の値は、強制型変換やアニメーションのいずれかがプロパティに動作している場合、有効な値ではありません。 確認 <xref:System.Windows.ValueSource.IsAnimated%2A> と <xref:System.Windows.ValueSource.IsCoerced%2A> 底の値が有効な値であるかどうかを確認する場合。  
  
 確認することがありますも <xref:System.Windows.ValueSource.IsExpression%2A> に底の値が式が評価されるかどうかを参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">これと比較するオブジェクト <see cref="T:System.Windows.ValueSource" />します。</param>
        <summary>示す値を返すかどうかこの <see cref="T:System.Windows.ValueSource" /> が指定したオブジェクトと等しい。</summary>
        <returns>
          <see langword="true" /> 指定されたオブジェクトが現在に等しい場合 <see cref="T:System.Windows.ValueSource" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装は、それぞれのプロパティの値に基づいて、値の等価性をサポートしています <xref:System.Windows.ValueSource> 構造体。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.ValueSource" /> のハッシュ コードを返します。</summary>
        <returns>32 ビット符号なし整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このハッシュ コードに基づいて、 <xref:System.Windows.ValueSource.BaseValueSource%2A> 値。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="IsAnimated">
      <MemberSignature Language="C#" Value="public bool IsAnimated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnimated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsAnimated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このプロパティはアニメーション化するかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 場合は、プロパティがアニメーション化します。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アニメーション化されるすべてのプロパティのソースはによって報告された <xref:System.Windows.ValueSource.BaseValueSource%2A> 底の値よりも上位の依存関係プロパティの優先順位で、アニメーションが動作するためにすぐに重要ではありません。 アニメーションと優先度に関する詳細については、次を参照してください。 [依存関係プロパティの値の優先順位](http://msdn.microsoft.com/ja-jp/1fbada8e-4867-4ed1-8d97-62c07dad7ebc)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCoerced">
      <MemberSignature Language="C#" Value="public bool IsCoerced { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCoerced" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCoerced" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この値が依存関係プロパティに適用される <see cref="T:System.Windows.CoerceValueCallback" /> 実装から生成されたものかどうかを宣言する値を取得します。</summary>
        <value>値が依存関係プロパティに適用される <see cref="T:System.Windows.CoerceValueCallback" /> 実装から生成されている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 強制型変換がプロパティ値で動作している場合は、プロパティは、目的の値を保持し、特定の強制型変換の制約が変更されたか、リフト場合その目的の値に到達するプロパティの値を試みます。 その目的の値ではない資格情報を持つプロパティを報告する <xref:System.Windows.ValueSource.IsCoerced%2A> は `true`です。  
  
 強制型変換は、底の値よりも高い優先順位では機能し、厳密に言えばの参加者に底の値を設定する方法ではありません。 そのための値ではなく、このプロパティによって強制的に変換中の状態が報告、 <xref:System.Windows.BaseValueSource> 列挙します。 強制変換、底の値と優先順位についての詳細については、次を参照してください。 [依存関係プロパティの値の優先順位](http://msdn.microsoft.com/ja-jp/1fbada8e-4867-4ed1-8d97-62c07dad7ebc)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCurrent">
      <MemberSignature Language="C#" Value="public bool IsCurrent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCurrent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>値が設定されたかどうかを取得、 <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> メソッドです。</summary>
        <value>
          <see langword="true" /> 値が設定された場合、 <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> メソッド以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExpression">
      <MemberSignature Language="C#" Value="public bool IsExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExpression" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この値が、評価された式から生じたかどうかを示す値を取得します。 これは、場合があります、 <see cref="T:System.Windows.Data.BindingExpression" /> サポートするバインディング、または内部の式をサポートするよう、 [DynamicResource マークアップ拡張機能](http://msdn.microsoft.com/ja-jp/7324f243-03af-4c2b-b0db-26ac6cdfcbe4)します。</summary>
        <value>
          <see langword="true" /> 値が評価された式から付属している場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 式の評価結果は条件を設定するには、ここで、式が適用されたの値として特定の基本値も報告 <xref:System.Windows.ValueSource.BaseValueSource%2A>します。<xref:System.Windows.ValueSource.BaseValueSource%2A> はまだ非常に任意のプロパティ、 <xref:System.Windows.ValueSource.IsExpression%2A> は `true`です。 値が式によって生成されたものかどうかを知ることは、値が設定されていない場合、直接など、テンプレート、または継承されたプロパティ値に特に役立ちます。  
  
 式が評価に失敗した場合 \(バインドに失敗した、その名前のリソースが見つかりませんでした\)、この値は既定値、プロパティ システムは、最も可能性の高いいくつかの他の参加者から得られるが、します。 そのソースはそのに報告 <xref:System.Windows.ValueSource.BaseValueSource%2A>します。 障害が発生した式の評価が返す `false` の <xref:System.Windows.ValueSource.IsExpression%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1">比較対象となる最初の <see cref="T:System.Windows.ValueSource" />。</param>
        <param name="vs2">比較対象となる 2 番目の <see cref="T:System.Windows.ValueSource" />。</param>
        <summary>2 つの <see cref="T:System.Windows.ValueSource" /> インスタンスの値が同一かどうかを判断します。</summary>
        <returns>
          <see langword="true" /> 場合は、2 つ <see cref="T:System.Windows.ValueSource" /> インスタンスが等しいそれ以外の場合場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装を呼び出す <xref:System.Windows.ValueSource.Equals%2A>, 、値のすべてのプロパティに基づいて、等価性のサポートと <xref:System.Windows.ValueSource>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1">比較対象となる最初の <see cref="T:System.Windows.ValueSource" />。</param>
        <param name="vs2">比較対象となる 2 番目の <see cref="T:System.Windows.ValueSource" />。</param>
        <summary>2 つの <see cref="T:System.Windows.ValueSource" /> インスタンスの値が同一でないかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> 場合は、2 つ <see cref="T:System.Windows.ValueSource" /> インスタンスが等しい場合、それ以外の場合ではありません <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装を呼び出す <xref:System.Windows.ValueSource.Equals%2A>, 、その否定とのすべてのプロパティに基づくサポート値の等価性を返す <xref:System.Windows.ValueSource>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
  </Members>
</Type>