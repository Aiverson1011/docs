<Type Name="PropertyPath" FullName="System.Windows.PropertyPath">
  <TypeSignature Language="C#" Value="public sealed class PropertyPath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PropertyPath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyPath" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>別のプロパティの下、または所有している型の下のパスとして、プロパティを記述するためのデータ構造を実装します。 プロパティ パスは、オブジェクトへのデータ バインディングと、アニメーション用のストーリーボードやタイムラインで使用されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスには、文字列が含まれています。 <xref:System.Windows.PropertyPath.Path%2A>, 、および依存関係プロパティのリスト、 <xref:System.Windows.PropertyPath.PathParameters%2A> 文字列に<xref:System.Windows.PropertyPath.Path%2A>します。  
  
 <xref:System.Windows.PropertyPath> 動作の 2 つのモードをサポートしています。  
  
 **ソース モード** その他の操作のソースとして使用されているプロパティへのパスについて説明します。 このモードを使用して、 <xref:System.Windows.Data.Binding> データ バインディングをサポートするクラス。  
  
 **ターゲット モード** 対象のプロパティとして設定されるプロパティへのパスについて説明します。 このモードは、ストーリー ボードおよびタイムラインの setter をサポートするためのアニメーションを使用します。  
  
 たとえば、 `Background.Opacity` 2 段階のパスです。 このパスは: 最初に、検索、 `Background` 、オブジェクトのプロパティの取得された値オブジェクト、 `Background` プロパティに設定されの値を取得し、 `Opacity` そのオブジェクトのプロパティです。  
  
<a name="xamlAttributeUsage_PropertyPath"></a>   
## XAML 属性の使用方法  
  
```  
<object property="propertyPath" .../>  
```  
  
<a name="xamlValues_PropertyPath"></a>   
## XAML 値  
 *propertyPath*  
 単純または複雑なプロパティ パスに評価される文字列。 設定の構文、 <xref:System.Windows.PropertyPath> で [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 汎用性が複雑では、別のトピックに記載されて [PropertyPath の XAML 構文](http://msdn.microsoft.com/ja-jp/0e3cdf07-abe6-460a-a9af-3764b4fd707f)します。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">パスを記述するプロパティのパス、 共通言語ランタイム (CLR) プロパティ、または単一の依存関係プロパティ。</param>
        <summary>
          <see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターには、バインディング、またはストーリー ボードのターゲットにターゲット モード シングル ステップのプロパティのパスのソース モード プロパティ パスに対して使用されているかどうかに応じて 2 つのまったく異なる用法があります。  
  
 これを使用する場合 <xref:System.Windows.PropertyPath> 、バインディングの元のモードで `parameter` プロパティの名前を表す文字列またはプロパティに「ステップ実行」のパスを記述する文字列は、 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] バインディングのソースとして使用されているオブジェクトのオブジェクト モデルです。 バインディング プロパティのパスを「ステップ」を識別する文字は、ドット \(.\) です。 インデクサー参照 \(複数のインデクサーと型の区別を含む\) もサポートされています。 具体的に使用する文字列の構文の詳細については、 <xref:System.Windows.Data.Binding> オブジェクトは、「 <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>します。 バインド ソースとして使用されるプロパティの依存関係プロパティではない必要があります。 双方向のバインドを更新する場合、参照されるプロパティは読み取り\/書き込みをする必要があります。 バインディング ターゲットが依存関係プロパティをする必要はあるにも注意してください。 詳細については、「 [データ バインドの概要](http://msdn.microsoft.com/ja-jp/c707c95f-7811-401d-956e-2fffd019a211)します。  
  
 これを使用する場合は、 <xref:System.Windows.PropertyPath> 目的のモードでストーリー ボードのターゲットのシングル ステップ パスの `parameter` は、通常、型として指定 <xref:System.Windows.DependencyProperty>します。 ある文字列を指定することも、 <xref:System.Windows.DependencyProperty.Name%2A>です。 これらのいずれかにより、文字列として内部的に保存されているので、同じ結果に評価されます。 指定された <xref:System.Windows.DependencyProperty> を文字列に変換 <xref:System.Windows.Markup.DependencyPropertyConverter>します。<xref:System.Windows.Markup.DependencyPropertyConverter> 指定できるように、依存関係プロパティの場合は、修飾された名前付け形式をサポートしている、 *typeName*.*propertyName* に依存関係プロパティ名の文字列を修飾、 <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName> コード コンス トラクターにします。 依存関係プロパティの識別子を修飾パスは、複雑なパスとは異なる概念です。 複合パス <xref:System.Windows.PropertyPath> で作成する代わりに、 <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName> コンス トラクターです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.Binding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (string path, object[] pathParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, object[] pathParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">指定する文字列、 <see cref="P:System.Windows.PropertyPath.Path" />、トークン化された形式でします。</param>
        <param name="pathParameters">設定するオブジェクトの配列、<see cref="P:System.Windows.PropertyPath.PathParameters" />です。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Windows.PropertyPath" />クラス、トークン文字列の指定されたパスとパラメーターを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この署名は通常、に対してのみ使用ターゲット モード<xref:System.Windows.PropertyPath>複合パスを使用します。  
  
 このコンス トラクターは`params`の`pathParameters`コンス トラクターの引数。 そのための内容を指定できます`pathParameters`一連のコンマ区切りのコンス トラクター引数を配列の次元し、で設定する必要があるのではなく、配列を設定すると、`pathParameters`項目。 指定する各項目は、次の種類のいずれかを指定する必要があります: <xref:System.Windows.DependencyProperty>、 <xref:System.Reflection.PropertyInfo>、<xref:System.ComponentModel.PropertyDescriptor>です。  
  
 パラメーターの要件の詳細については、次を参照してください。<xref:System.Windows.PropertyPath.Path%2A>と<xref:System.Windows.PropertyPath.PathParameters%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはパスを表す文字列を設定します。</summary>
        <value>パスを表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティに含まれる文字列はかどうかに応じて 3 つのまったく異なる意味を持つ、 <xref:System.Windows.PropertyPath> ソース モード プロパティのパスのストーリー ボード ターゲット ターゲット モード シングル ステップのプロパティのパスのバインディング、またはストーリー ボードのターゲットの複雑なパスが使用されています。  
  
 これを使用する場合 <xref:System.Windows.PropertyPath> 、バインディングの元のモードで <xref:System.Windows.PropertyPath.Path%2A> プロパティの名前を表す文字列またはプロパティに「ステップ実行」のパスを記述する文字列は、 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] バインディングのソースとして使用されているオブジェクトのオブジェクト モデルです。 バインディング プロパティのパスを「ステップ」を識別する文字は、ドット \(.\) です。 インデクサー参照 \(複数のインデクサーと型の区別を含む\) もサポートされています。 具体的に使用する文字列の構文の詳細については、 <xref:System.Windows.Data.Binding> オブジェクトは、「 <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>します。 バインド ソースとして使用されるプロパティの依存関係プロパティではない必要があります。 双方向のバインドを更新する場合、プロパティのソースは読み取り\/書き込みをする必要があります。 バインディング ターゲットが依存関係プロパティをする必要はあるにも注意してください。 詳細については、「 [データ バインドの概要](http://msdn.microsoft.com/ja-jp/c707c95f-7811-401d-956e-2fffd019a211)します。  
  
 これを使用する場合は、 <xref:System.Windows.PropertyPath> 目的のモードでストーリー ボードのターゲットのシングル ステップ パスの <xref:System.Windows.PropertyPath> 文字列では、 *typeName*.*propertyName* 依存関係プロパティ名の文字列を修飾します。  
  
 これを使用する場合 <xref:System.Windows.PropertyPath> ストーリー ボードのターゲットの複雑なパスの <xref:System.Windows.PropertyPath.Path%2A> トークン化された文字列形式で指定されたさまざまなオブジェクトのリレーションシップを説明するは、 <xref:System.Windows.PropertyPath.PathParameters%2A>です。  
  
-   配列内の各項目は、かっこで囲まれた項目の配列インデックスで、この形式で指定されます。 たとえば、配列内の最初の項目を指定する文字列トークンは `(0)`です。  
  
-   項目 \(パス内の「ステップ」\) 間の関係は、ドット \(.\) によって指定されます。 ピリオドの前のプロパティの最初の手順は、パスより後のプロパティには、2 番目の手順では、\(2 つのステップを指定することができます\)。 チェーンの最後の手順は、常にアニメーション化するプロパティを表します。  
  
-   コレクションのプロパティ内の項目を取得するのには、角かっこ内のインデックスのインデクサー構文 \(\[と\]\)。 インデクサーは、プロパティを表すトークンへの追加。 たとえば、項目を指定して、2 番目からそのプロパティのコレクション内の最初の手順では、トークンの組み合わせで、2 段階のパスを次に示します: `(0)[1].(1)` です。 チェーン内の最後のプロパティでインデクサーを使用することはできません。実際のコレクションの位置をアニメーション化することはできません、そのオブジェクトのプロパティをアニメーション化する必要があります。  
  
 パス文字列を <xref:System.Windows.PropertyPath> は通常、コンス トラクターを介して確立: <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> バインドまたはシングル ステップのストーリー ボードのターゲットに対する署名、 <xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29> 複数手順のストーリー ボードのターゲットの署名。  
  
 **XAML:** を使用すると、 <xref:System.Windows.PropertyPath> プロパティの参照を記述する [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], 属性値を指定する文字列が最初に型コンバーターによって処理済みとして、\(<xref:System.Windows.PropertyPathConverter>\)。 この型コンバーターは、文字列を処理し、に基づいてその構文は、のいずれかを呼び出しますが、 <xref:System.Windows.PropertyPath> コンス トラクター シグネチャ。 属性値を処理する型コンバーターをこの間接的な処理が使用する方法は、通常 <xref:System.Windows.PropertyPath> で [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], を宣言するのではなく、 <xref:System.Windows.PropertyPath> オブジェクトの要素などの属性にその特定の値を適用する <xref:System.Windows.PropertyPath.Path%2A> と <xref:System.Windows.PropertyPath.PathParameters%2A>です。 詳細については、次を参照してください。 [PropertyPath の XAML 構文](http://msdn.microsoft.com/ja-jp/0e3cdf07-abe6-460a-a9af-3764b4fd707f)します。  
  
<a name="xamlTextUsage_Path"></a>   
## XAML テキストの使用方法  
 メンバー、 <xref:System.Windows.PropertyPath> 型が通常直接設定されていない [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文です。 「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathParameters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;object&gt; PathParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;object&gt; PathParameters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.PathParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パスは、インデックス付きのパラメーターを参照するときに使用するパラメーターの一覧を取得します。</summary>
        <value>パラメーターのリスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロパティ、 <xref:System.Windows.PropertyPath> 通常コンス トラクターを使用して確立されます。 設定の <xref:System.Windows.PropertyPath.PathParameters%2A>, 、 <xref:System.Windows.PropertyPath.%23ctor%2A> コンス トラクターは、特に便利なので、 `pathParameters` としてコンス トラクターの引数が指定されている `params`, を作成またはディメンションの配列を構築する必要がないことを意味します。 追加パラメーターとして、配列の各メンバーを指定するだけです。  
  
 最終的なプロパティを対象となっている場合は、 <xref:System.Windows.Freezable> 入力すると、値が複製されます。 詳細については、「 [ストーリー ボードの概要](http://msdn.microsoft.com/ja-jp/1a698c3c-30f1-4b30-ae56-57e8a39811bd)します。  
  
 プロパティのチェーンの実際の評価は、ストーリー ボード アニメーション機構によって実行されます。<xref:System.Windows.PropertyPath> レベル、検証は実行されません、パスの手順がすべての接続を確認します。 インスタンスを持つプロパティのパスを構築できます <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> 最初の手順として、 <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName> 2 番目の手順として。 ブラシの種類を送り返すために、このようなプロパティのパスを実際には、ターゲットとして適用されている場合は失敗が、 <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> が、 <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName> プロパティです。 無効なプロパティのパスは、サイレント モードで失敗します。 詳細については、次を参照してください。 [ストーリー ボードの概要](http://msdn.microsoft.com/ja-jp/1a698c3c-30f1-4b30-ae56-57e8a39811bd)します。  
  
 **XAML:** を使用すると、 <xref:System.Windows.PropertyPath> プロパティの参照を記述する [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], 属性値を指定する文字列が最初に型コンバーターによって処理済みとして、\(<xref:System.Windows.PropertyPathConverter>\)。 この型コンバーターは、文字列を処理し、に基づいてその構文は、のいずれかを呼び出しますが、 <xref:System.Windows.PropertyPath> コンス トラクター シグネチャ。 属性値を処理する型コンバーターをこの間接的な処理が使用する方法は、通常 <xref:System.Windows.PropertyPath> で [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], を宣言するのではなく、 <xref:System.Windows.PropertyPath> オブジェクトの要素などの属性にその特定の値を適用する <xref:System.Windows.PropertyPath.Path%2A> と <xref:System.Windows.PropertyPath.PathParameters%2A>です。 詳細については、次を参照してください。 [PropertyPath の XAML 構文](http://msdn.microsoft.com/ja-jp/0e3cdf07-abe6-460a-a9af-3764b4fd707f)します。  
  
<a name="xamlTextUsage_PathParameters"></a>   
## XAML テキストの使用方法  
 メンバー、 <xref:System.Windows.PropertyPath> 型が通常直接設定されていない [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 構文です。 「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.PropertyPath" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>