<Type Name="Point" FullName="System.Windows.Point">
  <TypeSignature Language="C#" Value="public struct Point : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Point extends System.ValueType implements class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Point" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.PointConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.PointValueSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>2 次元空間における、x 座標と y 座標の組を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 XAML では、間の区切り文字、 <xref:System.Windows.Point.X%2A> と <xref:System.Windows.Point.Y%2A> の値、 <xref:System.Windows.Point> 、コンマまたは空白にすることができます。  
  
 一部のカルチャは、ピリオド文字ではなく 10 進数の区切り記号としてコンマ文字を使用する場合があります。 インバリアント カルチャの XAML 処理では、ほとんどの XAML プロセッサ実装では、EN\-US に既定値で小数点区切り文字にピリオドが必要です。 指定する場合は、10 進数の区切り記号としてコンマ文字を使用しないでください、 <xref:System.Windows.Point> XAML では、文字列型の変換に競合が発生するので、 <xref:System.Windows.Point> 属性の値に、 <xref:System.Windows.Point.X%2A> と <xref:System.Windows.Point.Y%2A> コンポーネントです。  
  
<a name="xamlAttributeUsage_Duration"></a>   
## XAML 属性の使用方法  
  
```  
<object property="x,y"/>  
-or-  
<object property="x y"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## XAML 値  
 *x*  
 これの x 座標 <xref:System.Windows.Point>します。  
  
 *Y*  
 これの y 座標 <xref:System.Windows.Point>します。  
  
   
  
## 例  
 次の例は、2 つをチェックする方法を示しています。 <xref:System.Windows.Point> 構造が等しくないです。  値を割り当てる方法も示しています、 <xref:System.Windows.Point> 構造体、構造体は宣言されている場合、および構造体が宣言された後です。  
  
 [!code-csharp[PointExamples\_snip\#PointInequalityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#pointinequalityexample)]
 [!code-vb[PointExamples\_snip\#PointInequalityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#pointinequalityexample)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Point (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.#ctor(System.Double,System.Double)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">新しいの x 座標 <see cref="T:System.Windows.Point" /> 構造体。</param>
        <param name="y">新しいの y 座標 <see cref="T:System.Windows.Point" /> 構造体。</param>
        <summary>新しい <see cref="T:System.Windows.Point" /> 指定された座標を格納する構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Add (System.Windows.Point point, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Add(valuetype System.Windows.Point point, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="point">
          <see cref="T:System.Windows.Point" /> 構造を追加します。</param>
        <param name="vector">
          <see cref="T:System.Windows.Vector" /> 構造を追加します。</param>
        <summary>追加、 <see cref="T:System.Windows.Vector" /> に、 <see cref="T:System.Windows.Point" /> として結果を返す、 <see cref="T:System.Windows.Point" /> 構造体。</summary>
        <returns>合計を返して <paramref name="point" /> と <paramref name="vector" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 追加する、 <xref:System.Windows.Point> 構造の <xref:System.Windows.Point> 構造は禁止されています。  
  
   
  
## 例  
 この例では追加、 <xref:System.Windows.Point> に、 <xref:System.Windows.Vector> し、その結果として、 <xref:System.Windows.Vector> 構造体。  
  
 [!code-csharp[PointExamples\_snip\#AddPointAndVectorExample\_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#addpointandvectorexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">比較対象の <see cref="T:System.Object" />。</param>
        <summary>決定するかどうか、指定した <see cref="T:System.Object" /> は、 <see cref="T:System.Windows.Point" /> これと同じ座標が含まれているかどうかと <see cref="T:System.Windows.Point" />です。</summary>
        <returns>
          <see langword="true" /> 場合 <paramref name="o" /> は、 <see cref="T:System.Windows.Point" /> が含まれている同じ <see cref="P:System.Windows.Point.X" /> と <see cref="P:System.Windows.Point.Y" /> 値は次のよう <see cref="T:System.Windows.Point" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Point> 座標を使用して記述 <xref:System.Double> 値。 の値、 <xref:System.Double> 操作、2 つの間で比較したときに精度が低下する <xref:System.Windows.Point> が論理的に等しい値が失敗する可能性があります。  
  
   
  
## 例  
 次の例は、2 つをチェックする方法を示しています。 <xref:System.Windows.Point> 構造体が等しく、静的でないを使用して <xref:System.Windows.Point.Equals%2A> メソッドです。  
  
 [!code-csharp[PointExamples\_snip\#NonStaticEqualsExample\_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#nonstaticequalsexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Point value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Point value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Equals(System.Windows.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="value">このインスタンスと比較するポイント。</param>
        <summary>2 つを比較して <see cref="T:System.Windows.Point" /> 構造体が等しいかどうか。</summary>
        <returns>
          <see langword="true" /> 両方 <see cref="T:System.Windows.Point" /> 構造体を含む同じ <see cref="P:System.Windows.Point.X" /> と <see cref="P:System.Windows.Point.Y" /> 値はそれ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Point> 座標を使用して表されます <xref:System.Double> 値。 の値、 <xref:System.Double> 2 つの比較に操作したときに精度が低下する <xref:System.Windows.Point> が論理的に等しい値が失敗する可能性があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Point point1, System.Windows.Point point2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point1">比較する最初のポイント。</param>
        <param name="point2">比較する 2 番目のポイント。</param>
        <summary>2 つを比較して <see cref="T:System.Windows.Point" /> 構造体が等しいかどうか。</summary>
        <returns>
          <see langword="true" /> 場合 <paramref name="point1" /> と <paramref name="point2" /> が <see cref="P:System.Windows.Point.X" /> と <see cref="P:System.Windows.Point.Y" /> 値はそれ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使ってポイント座標が記述されて <xref:System.Double> 値。 の値、 <xref:System.Double> 操作、2 つの間で比較したときに精度が低下する <xref:System.Windows.Point> が論理的に等しい値が失敗する可能性があります。  
  
   
  
## 例  
 次の例は、2 つをチェックする方法を示しています。 <xref:System.Windows.Point> 構造体が等しく、静的 using <xref:System.Windows.Point.Equals%2A> メソッドです。  
  
 [!code-csharp[PointExamples\_snip\#StaticEqualsExample\_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#staticequalsexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Point" /> のハッシュ コードを返します。</summary>
        <returns>そのためのハッシュ コード <see cref="T:System.Windows.Point" /> 構造体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例のハッシュ コードを取得する方法を示しています、 <xref:System.Windows.Point> 構造体。  
  
 [!code-csharp[PointExamples\_snip\#GetHashCodeExample\_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#gethashcodeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Multiply (System.Windows.Point point, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Multiply(valuetype System.Windows.Point point, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="point">変換するポイント。</param>
        <param name="matrix">変換行列。</param>
        <summary>指定した変換 <see cref="T:System.Windows.Point" /> 構造体を渡し、指定した <see cref="T:System.Windows.Media.Matrix" /> 構造体。</summary>
        <returns>変換されたポイント。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例を乗算する方法を示しています、 <xref:System.Windows.Point> で構造体、 <xref:System.Windows.Media.Matrix> を使用して、 <xref:System.Windows.Point.Multiply%2A> メソッドです。  
  
 [!code-csharp[PointExamples\_snip\#MultiplyPointByMatrixExample\_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#multiplypointbymatrixexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public void Offset (double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Offset(float64 offsetX, float64 offsetY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Offset(System.Double,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="offsetX">点のオフセット量  
  
 <see cref="P:System.Windows.Point.X" /> 調整します。</param>
        <param name="offsetY">オフセット量、  
  
 ポイントの <see cref="P:System.Windows.Point.Y" /> を調整します。</param>
        <summary>ポイントのオフセット <see cref="P:System.Windows.Point.X" /> と <see cref="P:System.Windows.Point.Y" /> 座標を指定した比率。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作を追加するのには、 <xref:System.Windows.Point> に、 <xref:System.Windows.Vector>です。  
  
 呼び出して、 <xref:System.Windows.Point.Offset%2A> メソッドのみが影響を変更できる場合、 <xref:System.Windows.Point.X%2A> と <xref:System.Windows.Point.Y%2A> プロパティに直接します。<xref:System.Windows.Point> 値の型を参照している場合は、 <xref:System.Windows.Point> オブジェクトのプロパティまたはインデクサーを使用すると、オブジェクトへの参照ではなく、オブジェクトのコピーを取得します。 変更しようとすると <xref:System.Windows.Point.X%2A> または <xref:System.Windows.Point.Y%2A> プロパティまたはインデクサーの参照でコンパイラ エラーが発生します。 同様に、呼び出す <xref:System.Windows.Point.Offset%2A> プロパティ、インデクサーには変更されません基になるオブジェクト。  値を変更する場合、 <xref:System.Windows.Point> プロパティまたはインデクサーとして参照される、新しい <xref:System.Windows.Point>, 、そのフィールドを変更し、割り当てる、 <xref:System.Windows.Point> プロパティまたはインデクサーにします。  
  
   
  
## 例  
 次の例のオフセットでは、 <xref:System.Windows.Point.X%2A> と <xref:System.Windows.Point.Y%2A> の値、 <xref:System.Windows.Point> 構造体。  
  
 [!code-csharp[PointExamples\_snip\#OffsetExample\_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#offsetexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Point op_Addition (System.Windows.Point point, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Addition(valuetype System.Windows.Point point, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="point">変換対象のポイント。</param>
        <param name="vector">平行移動する量 <c>point</c>します。</param>
        <summary>指定した変換 <see cref="T:System.Windows.Point" /> において指定した <see cref="T:System.Windows.Vector" /> し、結果を返します。</summary>
        <returns>指定したポイントで、指定されたベクトル変換した結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例を追加する方法を示しています、 <xref:System.Windows.Point> に、 <xref:System.Windows.Vector> オーバー ロードされた \(\+\) を使用する演算子です。  
  
 [!code-csharp[PointExamples\_snip\#OverloadedAdditionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedadditionoperatorexample)]
 [!code-vb[PointExamples\_snip\#OverloadedAdditionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedadditionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Windows.Point point1, System.Windows.Point point2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point1">比較する最初の <see cref="T:System.Windows.Point" /> 構造体。</param>
        <param name="point2">比較する 2 番目の <see cref="T:System.Windows.Point" /> 構造体。</param>
        <summary>2 つを比較して <see cref="T:System.Windows.Point" /> 構造体が等しいかどうか。</summary>
        <returns>
          <see langword="true" /> どちらの場合、 <see cref="P:System.Windows.Point.X" /> と <see cref="P:System.Windows.Point.Y" /> の座標 <paramref name="point1" /> と <paramref name="point2" /> は同一です。 それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、点の座標が記述した <xref:System.Double> 値。 の値 <xref:System.Double> に 2 つの比較の算術演算が実行されるときに精度が低下する <xref:System.Windows.Point> が論理的に等しい値が失敗する可能性があります。  
  
   
  
## 例  
 次の例は、2 つをチェックする方法を示しています。 <xref:System.Windows.Point> 構造体が等しい \(\= \=\) をオーバー ロードされた演算子を使用します。  
  
 [!code-csharp[PointExamples\_snip\#OverloadedEqualityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedequalityoperatorexample)]
 [!code-vb[PointExamples\_snip\#OverloadedEqualityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Point.Equals" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static System.Windows.Size op_Explicit (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Size op_Explicit(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">変換するポイント。</param>
        <summary>作成、 <see cref="T:System.Windows.Size" /> 構造体、 <see cref="P:System.Windows.Size.Width" /> このポイントと等しい <see cref="P:System.Windows.Point.X" /> 値と <see cref="P:System.Windows.Size.Height" /> このポイントと等しい <see cref="P:System.Windows.Point.Y" /> 値。</summary>
        <returns>A <see cref="T:System.Windows.Size" /> 構造体、 <see cref="P:System.Windows.Size.Width" /> このポイントと等しい <see cref="P:System.Windows.Point.X" /> 値と <see cref="P:System.Windows.Size.Height" /> このポイントと等しい <see cref="P:System.Windows.Point.Y" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Size> 構造体を負の値にすることはできません、ポイントの絶対値 <xref:System.Windows.Point.X%2A> と <xref:System.Windows.Point.Y%2A> のプロパティを使用します。  
  
   
  
## 例  
 次の例では、明示的に変換する方法、 <xref:System.Windows.Point> に、 <xref:System.Windows.Size>です。  
  
 [!code-csharp[PointExamples\_snip\#OverloadedExplicitOperatorSizeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedexplicitoperatorsizeexample)]
 [!code-vb[PointExamples\_snip\#OverloadedExplicitOperatorSizeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedexplicitoperatorsizeexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector op_Explicit (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Explicit(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">変換するポイント。</param>
        <summary>作成、 <see cref="T:System.Windows.Vector" /> 構造体、 <see cref="P:System.Windows.Vector.X" /> 、ポイントと等しい値 <see cref="P:System.Windows.Point.X" /> 値と <see cref="P:System.Windows.Vector.Y" /> ポイントの値 <see cref="P:System.Windows.Point.Y" /> 値。</summary>
        <returns>持つベクター、 <see cref="P:System.Windows.Vector.X" /> 、ポイントと等しい値 <see cref="P:System.Windows.Point.X" /> 値と <see cref="P:System.Windows.Vector.Y" /> ポイントの値 <see cref="P:System.Windows.Point.Y" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、明示的に変換する方法、 <xref:System.Windows.Point> に、 <xref:System.Windows.Vector>です。  
  
 [!code-csharp[PointExamples\_snip\#OverloadedExplicitOperatorVectorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedexplicitoperatorvectorexample)]
 [!code-vb[PointExamples\_snip\#OverloadedExplicitOperatorVectorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedexplicitoperatorvectorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Windows.Point point1, System.Windows.Point point2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point1">比較する最初のポイント。</param>
        <param name="point2">比較する 2 番目のポイント。</param>
        <summary>2 つを比較して <see cref="T:System.Windows.Point" /> の非等値構造体。</summary>
        <returns>
          <see langword="true" /> 場合 <paramref name="point1" /> と <paramref name="point2" /> が異なる <see cref="P:System.Windows.Point.X" /> または <see cref="P:System.Windows.Point.Y" /> 座標 <see langword="false" /> 場合 <paramref name="point1" /> と <paramref name="point2" /> が同じである <see cref="P:System.Windows.Point.X" /> と <see cref="P:System.Windows.Point.Y" /> 座標。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ポイントの <xref:System.Windows.Point.X%2A> と <xref:System.Windows.Point.Y%2A> を使って座標が記述されて <xref:System.Double> 値。<xref:System.Double> 値には、2 つの比較に、卓越したときに有効桁数が失われる可能性が <xref:System.Windows.Point> が論理的に等しい値が失敗する可能性があります。  
  
   
  
## 例  
 次の例は、2 つあるかどうかを確認する方法を示しています。 <xref:System.Windows.Point> 構造が、オーバー ロードを使用して、等しくない \(\! \=\) 演算子。  
  
 [!code-csharp[PointExamples\_snip\#OverloadedInequalityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedinequalityoperatorexample)]
 [!code-vb[PointExamples\_snip\#OverloadedInequalityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedinequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Point op_Multiply (System.Windows.Point point, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Multiply(valuetype System.Windows.Point point, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="point">変換するポイント。</param>
        <param name="matrix">変換行列。</param>
        <summary>指定した変換 <see cref="T:System.Windows.Point" /> において指定した <see cref="T:System.Windows.Media.Matrix" />します。</summary>
        <returns>指定した行列を使用して、指定したポイントを変換した結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例を乗算する方法を示しています、 <xref:System.Windows.Point> によって、 <xref:System.Windows.Media.Matrix> オーバー ロードされた \(\*\) 演算子を使用します。  
  
 [!code-csharp[PointExamples\_snip\#OverloadedMultiplyPointByMatrixOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedmultiplypointbymatrixoperatorexample)]
 [!code-vb[PointExamples\_snip\#OverloadedMultiplyPointByMatrixOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedmultiplypointbymatrixoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector op_Subtraction (System.Windows.Point point1, System.Windows.Point point2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Subtraction(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point1">元のポイント <c>point2</c> 差し引かれます。</param>
        <param name="point2">1 から減算するポイント <c>point1</c>します。</param>
        <summary>減算、指定した <see cref="T:System.Windows.Point" /> から指定した別 <see cref="T:System.Windows.Point" /> との差を返すと、 <see cref="T:System.Windows.Vector" />です。</summary>
        <returns>違い <paramref name="point1" /> と <paramref name="point2" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、減算する方法を示しています。、 <xref:System.Windows.Point> 別の <xref:System.Windows.Point> を返すと、 <xref:System.Windows.Vector> \(\-\) のオーバー ロードされた演算子を使用します。  
  
 [!code-csharp[PointExamples\_snip\#OverloadedSubtractionOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedsubtractionoperatorexample2)]
 [!code-vb[PointExamples\_snip\#OverloadedSubtractionOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedsubtractionoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Windows.Point op_Subtraction (System.Windows.Point point, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Subtraction(valuetype System.Windows.Point point, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="point">元のポイント <c>vector</c> 差し引かれます。</param>
        <param name="vector">ベクターから減算するには <c>point1</c></param>
        <summary>指定した減算 <see cref="T:System.Windows.Vector" /> 指定された対象から <see cref="T:System.Windows.Point" /> し、その結果を返します <see cref="T:System.Windows.Point" />します。</summary>
        <returns>違い <paramref name="point" /> と <paramref name="vector" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、減算する方法、 <xref:System.Windows.Vector> から、 <xref:System.Windows.Point> \(\-\) のオーバー ロードされた演算子を使用します。  
  
 [!code-csharp[PointExamples\_snip\#OverloadedSubtractionOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#overloadedsubtractionoperatorexample1)]
 [!code-vb[PointExamples\_snip\#OverloadedSubtractionOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#overloadedsubtractionoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Parse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">点の文字列形式。</param>
        <summary>構築、 <see cref="T:System.Windows.Point" /> 指定された対象から <see cref="T:System.String" />します。</summary>
        <returns>同じ <see cref="T:System.Windows.Point" /> 構造体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例を使用する方法を示しています、 <xref:System.Windows.Point.Parse%2A> に変換する方法、 <xref:System.String> 上のポイントを表現、 <xref:System.Windows.Point> 構造体。  
  
 [!code-csharp[PointExamples\_snip\#ParseExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#parseexample)]
 [!code-vb[PointExamples\_snip\#ParseExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#parseexample)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="source" /> コンマまたはスペースで区切られた 2 つの double 値で構成ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> 2 つの数値は含まれません。  
  
 または  
  
 <paramref name="source" /> 多くの区切り記号が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Subtract (System.Windows.Point point1, System.Windows.Point point2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Subtract(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point1">元のポイント <c>point2</c> 差し引かれます。</param>
        <param name="point2">1 から減算するポイント <c>point1</c>します。</param>
        <summary>減算、指定した <see cref="T:System.Windows.Point" /> から指定した別 <see cref="T:System.Windows.Point" /> との差を返すと、 <see cref="T:System.Windows.Vector" />です。</summary>
        <returns>違い <paramref name="point1" /> と <paramref name="point2" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、減算する方法、 <xref:System.Windows.Point> 別の <xref:System.Windows.Point> 、静的 using <xref:System.Windows.Point.Subtract%2A> メソッドです。  
  
 [!code-csharp[PointExamples\_snip\#SubtractExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#subtractexample2)]
 [!code-vb[PointExamples\_snip\#SubtractExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#subtractexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Subtract (System.Windows.Point point, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Subtract(valuetype System.Windows.Point point, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="point">元のポイント <c>vector</c> 差し引かれます。</param>
        <param name="vector">
          <c>vector</c> から減算する <c>point</c>です。</param>
        <summary>指定した減算 <see cref="T:System.Windows.Vector" /> 指定された対象から <see cref="T:System.Windows.Point" /> し、その結果を返します <see cref="T:System.Windows.Point" />します。</summary>
        <returns>違い <paramref name="point" /> と <paramref name="vector" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、減算する方法、 <xref:System.Windows.Vector> から、 <xref:System.Windows.Point> 、静的 using <xref:System.Windows.Point.Subtract%2A> メソッドです。  
  
 [!code-csharp[PointExamples\_snip\#SubtractExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#subtractexample1)]
 [!code-vb[PointExamples\_snip\#SubtractExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#subtractexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Point.Subtract" />
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">使用する形式を指定する文字列。  
  
 または  
  
 <see langword="null" /> 型に対して定義されている既定の形式を使用する、 <see cref="T:System.IFormattable" /> 実装します。</param>
        <param name="provider">
          <see langword="IFormatProvider" /> を使用して値の書式設定します。  
  
 または  
  
 <see langword="null" /> オペレーティング システムの現在のロケール設定から数値の書式情報を取得できます。</param>
        <summary>このメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。 このメンバーの詳細については、「<see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />」を参照してください。</summary>
        <returns>指定した形式で現在のインスタンスの値を表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作成、 <see cref="T:System.String" /> この表現 <see cref="T:System.Windows.Point" />します。</summary>
        <returns>A <see cref="T:System.String" /> を含む、 <see cref="P:System.Windows.Point.X" /> と <see cref="P:System.Windows.Point.Y" /> この値 <see cref="T:System.Windows.Point" /> 構造体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 使用する例を次に示します、 <xref:System.Windows.Point.ToString%2A> 取得するメソッド、 <xref:System.String> の表現、 <xref:System.Windows.Point> 構造体。  
  
 [!code-csharp[PointExamples\_snip\#ToStringExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#tostringexample)]
 [!code-vb[PointExamples\_snip\#ToStringExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#tostringexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Point.ToString(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">カルチャに固有の書式設定情報。</param>
        <summary>作成、 <see cref="T:System.String" /> この表現 <see cref="T:System.Windows.Point" />します。</summary>
        <returns>A <see cref="T:System.String" /> を含む、 <see cref="P:System.Windows.Point.X" /> と <see cref="P:System.Windows.Point.Y" /> この値 <see cref="T:System.Windows.Point" /> 構造体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Point.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="P:System.Windows.Point.X" />\-この値を調整 <see cref="T:System.Windows.Point" /> 構造体。</summary>
        <value>
          <see cref="P:System.Windows.Point.X" />\-この値を調整 <see cref="T:System.Windows.Point" /> 構造体。  既定値は <c>0</c> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、2 つをチェックする方法を示しています。 <xref:System.Windows.Point> 構造が等しくないです。  値を割り当てる方法も示しています、 <xref:System.Windows.Point> 構造体、構造体は宣言されている場合、および構造体が宣言された後です。  
  
 [!code-csharp[PointExamples\_snip\#PointInequalityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#pointinequalityexample)]
 [!code-vb[PointExamples\_snip\#PointInequalityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#pointinequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Point.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Point.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="P:System.Windows.Point.Y" />\-この値を調整 <see cref="T:System.Windows.Point" />します。</summary>
        <value>
          <see cref="P:System.Windows.Point.Y" />\-この値を調整 <see cref="T:System.Windows.Point" /> 構造体。  既定値は <c>0</c> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、2 つをチェックする方法を示しています。 <xref:System.Windows.Point> 構造が等しくないです。  値を割り当てる方法も示しています、 <xref:System.Windows.Point> 構造体、構造体は宣言されている場合、および構造体が宣言された後です。  
  
 [!code-csharp[PointExamples\_snip\#PointInequalityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/PointExamples_snip/CSharp/PointExample.cs#pointinequalityexample)]
 [!code-vb[PointExamples\_snip\#PointInequalityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PointExamples_snip/visualbasic/pointexample.vb#pointinequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Point.X" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した減算 <see cref="T:System.Windows.Point" /> または <see cref="T:System.Windows.Vector" /> 指定された対象から <see cref="T:System.Windows.Point" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した減算 <see cref="T:System.Windows.Vector" /> または <see cref="T:System.Windows.Point" /> 指定された対象から <see cref="T:System.Windows.Point" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>変換、 <see cref="T:System.Windows.Point" /> に、 <see cref="T:System.Windows.Size" /> または <see cref="T:System.Windows.Vector" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つを比較して <see cref="T:System.Windows.Point" /> 構造体が等しいかどうか。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>作成、 <see cref="T:System.String" /> この表現 <see cref="T:System.Windows.Point" /> 構造体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>