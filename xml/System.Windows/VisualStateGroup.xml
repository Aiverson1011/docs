<Type Name="VisualStateGroup" FullName="System.Windows.VisualStateGroup">
  <TypeSignature Language="C#" Value="public class VisualStateGroup : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateGroup extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateGroup" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("States")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>相互に排他的なを含む <see cref="T:System.Windows.VisualState" /> オブジェクトおよび <see cref="T:System.Windows.VisualTransition" /> オブジェクトから 1 つの状態別に移行するために使用します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 各 <xref:System.Windows.VisualStateGroup> のコレクションを含む <xref:System.Windows.VisualState> オブジェクトです。 A <xref:System.Windows.VisualState> のコレクションを含む <xref:System.Windows.Media.Animation.Storyboard> コントロールが特定の状態のときに、コントロールの外観がどのように変化するかを指定するオブジェクト。 たとえば、 <xref:System.Windows.Controls.Button> が押されていない場合よりも押されている場合、やや異なる外観があります。 2 つの状態、 <xref:System.Windows.Controls.Button> 定義が押されたときに対応 \(`"Pressed"`\) がない場合、\(`"Normal"`\)。  
  
 追加する <xref:System.Windows.VisualState> 設定によってコントロールに、 `VisualStateManager.VisualStateGroups` コントロールのプロパティをアタッチします。 同じで互いに相互に排他的な状態を保存する <xref:System.Windows.VisualStateGroup>です。 たとえば、 <xref:System.Windows.Controls.CheckBox> に 2 つ <xref:System.Windows.VisualStateGroup> オブジェクトです。 1 つに、状態が含まれています。 `Normal`, 、`MouseOver`, 、`Pressed`, 、および `Disabled`です。 状態が含まれている `Checked`, 、`UnChecked`, 、および `Indeterminate`です。<xref:System.Windows.Controls.CheckBox> の状態があります `MouseOver` と `UnChecked` 同時にすることはできませんが、 `MouseOver` と `Pressed` のインポート時の状態。  
  
 追加できますが、 <xref:System.Windows.VisualState> の視覚的な動作を再定義可能にするに特に便利な方法は、任意の要素へのオブジェクト、 <xref:System.Windows.Controls.Control>です。 使用するカスタム コントロールを作成する場合、 <xref:System.Windows.Controls.ControlTemplate>, 、コントロールに追加することで想定されている旨が記載を指定する、 <xref:System.Windows.TemplateVisualStateAttribute> クラス定義です。 すべてのユーザーを新たに作成 <xref:System.Windows.Controls.ControlTemplate> コントロールを追加できるの <xref:System.Windows.VisualState> テンプレートへのオブジェクト。<xref:System.Windows.TemplateVisualStateAttribute> コントロールの状態を公開する、Expression Blend などのデザイナー ツールを使用します。 州を対象と同じ <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName> 同じ属する <xref:System.Windows.VisualStateGroup>します。  
  
 使用する方法の詳細についての <xref:System.Windows.VisualStateGroup> 内のオブジェクト、 <xref:System.Windows.Controls.ControlTemplate>, を参照してください [ControlTemplate を作成することで、既存のコントロールの外観のカスタマイズ](http://msdn.microsoft.com/ja-jp/678dd116-43a2-4b8c-82b5-6b826f126e31)します。 作成する方法の詳細についてはコントロールを使用して、 <xref:System.Windows.VisualStateManager>, を参照してください [を作成する、コントロールのある外観をカスタマイズできる](http://msdn.microsoft.com/ja-jp/9e356d3d-a3d0-4b01-a25f-2d43e4d53fe5)します。  
  
 <xref:System.Windows.VisualStateGroup.Transitions%2A> プロパティを含む <xref:System.Windows.VisualTransition> で制御遷移の状態のときに適用されるオブジェクトが定義されている、 <xref:System.Windows.VisualStateGroup>です。  
  
   
  
## 例  
 次の例では、単純な <xref:System.Windows.Controls.ControlTemplate> の <xref:System.Windows.Controls.Button> を含む 1 つ <xref:System.Windows.Controls.Grid>します。 含まれています、 <xref:System.Windows.VisualStateGroup> という `CommonStates`, を定義する、 `MouseOver` と `Normal` 状態です。<xref:System.Windows.VisualStateGroup> も、 <xref:System.Windows.VisualTransition> 0.5 秒間のかかるを指定する、 <xref:System.Windows.Controls.Grid> 上にマウス ポインターを置いたときに、緑から赤に変更する、 <xref:System.Windows.Controls.Button>です。  
  
 [!code-xml[VSMButtonTemplate\#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateGroup.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.VisualStateGroup" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.VisualState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.VisualState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Windows.VisualState" /> コントロールに現在適用されています。</summary>
        <value>
          <see cref="T:System.Windows.VisualState" /> コントロールに現在適用されています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが別の状態に遷移した後に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、新しい状態に制御遷移した後に発生し、 <xref:System.Windows.VisualStateGroup.CurrentStateChanging> イベントが発生します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanging" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが別の状態への遷移を開始すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールが状態の遷移を開始すると、イベントが発生します。 場合、 <xref:System.Windows.VisualTransition> が適用される移行の開始時に状態の変化にこのイベントは発生します。 場合、 <xref:System.Windows.VisualTransition> が適用されず、このイベントが発生する前に、コントロールが新しい状態に遷移した後、 <xref:System.Windows.VisualStateGroup.CurrentStateChanged> イベントです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.VisualStateGroup" /> の名前を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.VisualStateGroup" /> の名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールの作成者を指定する状態、コントロールに追加することで、 <xref:System.Windows.TemplateVisualStateAttribute> クラス定義です。 州を対象と同じ <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName> 同じ属する <xref:System.Windows.VisualStateGroup>します。 設定、 <xref:System.Windows.VisualStateGroup.Name%2A> の <xref:System.Windows.VisualStateGroup> の値に、 <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=fullName> プロパティです。  
  
   
  
## 例  
 次の例では、2 つ作成されます <xref:System.Windows.VisualStateGroup> というオブジェクト `CommonStates` と `FocusStates`です。 コントロールは、それぞれから 1 つの状態になります <xref:System.Windows.VisualStateGroup> を常にします。 全体の例では、次を参照してください。 [ControlTemplate を作成することで、既存のコントロールの外観のカスタマイズ](http://msdn.microsoft.com/ja-jp/678dd116-43a2-4b8c-82b5-6b826f126e31)します。  
  
 [!code-xml[VSMButtonTemplate\#5](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="States">
      <MemberSignature Language="C#" Value="public System.Collections.IList States { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList States" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.States" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>相互に排他的のコレクションを取得 <see cref="T:System.Windows.VisualState" /> オブジェクトです。</summary>
        <value>コレクションの相互に排他的な <see cref="T:System.Windows.VisualState" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、単純な <xref:System.Windows.Controls.ControlTemplate> の <xref:System.Windows.Controls.Button> を含む 1 つ <xref:System.Windows.Controls.Grid>します。 含まれています、 <xref:System.Windows.VisualStateGroup> という `CommonStates`, を定義する、 `MouseOver` と `Normal` 状態です。<xref:System.Windows.VisualStateGroup> も、 <xref:System.Windows.VisualTransition> 0.5 秒間のかかるを指定する、 <xref:System.Windows.Controls.Grid> 上にマウス ポインターを置いたときに、緑から赤に変更する、 <xref:System.Windows.Controls.Button>です。  
  
 [!code-xml[VSMButtonTemplate\#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transitions">
      <MemberSignature Language="C#" Value="public System.Collections.IList Transitions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Transitions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Transitions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションを取得 <see cref="T:System.Windows.VisualTransition" /> オブジェクトです。</summary>
        <value>
          <see cref="T:System.Windows.VisualTransition" /> オブジェクトのコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.VisualTransition> オブジェクト <xref:System.Windows.VisualStateGroup.Transitions%2A> コントロール間の遷移状態で定義されている場合は適用、 <xref:System.Windows.VisualStateGroup>です。  
  
   
  
## 例  
 次の例では、単純な <xref:System.Windows.Controls.ControlTemplate> の <xref:System.Windows.Controls.Button> を含む 1 つ <xref:System.Windows.Controls.Grid>します。 含まれています、 <xref:System.Windows.VisualStateGroup> という `CommonStates`, を定義する、 `MouseOver` と `Normal` 状態です。<xref:System.Windows.VisualStateGroup> も、 <xref:System.Windows.VisualTransition> 0.5 秒間のかかるを指定する、 <xref:System.Windows.Controls.Grid> 上にマウス ポインターを置いたときに、緑から赤に変更する、 <xref:System.Windows.Controls.Button>です。  
  
 [!code-xml[VSMButtonTemplate\#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>