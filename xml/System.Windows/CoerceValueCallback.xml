<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d">プロパティが存在するオブジェクト。 コールバックが呼び出されたときに、プロパティ システムはこの値を渡します。</param>
    <param name="baseValue">強制が試行する前に、プロパティの新しい値。</param>
    <summary>強制型変換が明確に要求された依存関係プロパティの値が再評価されるたびに呼び出されるメソッドのテンプレートを提供します。</summary>
    <returns>\(適切な型\) の資格情報を持つ値です。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 コールバックがに基づいて <xref:System.Windows.CoerceValueCallback> 、複数の手法を使用して依存関係プロパティに割り当てることができます。 これらの手法は、最初に新しいプロパティのメタデータ オブジェクトを作成することが必要です \(<xref:System.Windows.PropertyMetadata>, 、やなどの派生クラス <xref:System.Windows.FrameworkPropertyMetadata>\)。 受け取るコンス トラクターのシグネチャを使用してメタデータ オブジェクトを作成、 `coerceValueCallback` パラメーター、コールバック ハンドラーにそのパラメーターを割り当てます。 または、署名およびメタデータを作成するとき、 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> プロパティを使用してメタデータを配置する前にします。  
  
 このメタデータを使用する場合は、次のことができます。  
  
-   いずれかの署名を使用して、新しいクラスで新しい依存関係プロパティを定義する  <xref:System.Windows.DependencyProperty.Register%2A>, 、としてのメタデータを与える、 `typeMetadata` 値。  
  
-   メタデータをオーバーライド \(呼び出し <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>\) の既存の依存関係プロパティを依存関係プロパティを所有するクラスから派生したとき。  
  
-   既存の依存関係プロパティを新規に追加 <xref:System.Windows.DependencyObject> クラスの新しいメタデータを使用して呼び出すことによって <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>します。  
  
 このコールバックの実装は、値を確認する必要があります `baseValue` を決定し、これは、さらに強制的に変換する必要がある値かどうか、値または型のいずれかに基づいています。  
  
 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> プロパティには依存関係のプロパティのシステムまたはその他の任意の呼び出し元がいつでもが呼び出される <xref:System.Windows.DependencyObject.CoerceValue%2A> 上、 <xref:System.Windows.DependencyObject> とそのプロパティの識別子を指定するインスタンス、 `dp`です。  
  
 プロパティ値を変更は、プロパティ システムに関係するあらゆる原因由来が場合があります。 これには、スタイル、ジェネリックの無効化、トリガー、プロパティ値の継承、およびローカルの値の設定が含まれます。  
  
 1 つ以上を指定することを避ける必要があります通常 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> いずれかの依存関係プロパティを指定します \(既にが依存関係プロパティの新しいメタデータを追加またはオーバーライド、 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>\)。 コールバックの 1 つだけは、機能することができます。 コールバックと比較して継承の最派生クラスに適用されている人であるが、 <xref:System.Windows.DependencyObject> 呼び出し元です。 メタデータがオーバーライドされると、所有者階層内の高い状態に依存関係プロパティのメタデータに割り当てられたその他のコールバックが置き換えられます。  
  
   
  
## 例  
 次の例には、別のプロパティの値などの他の入力値に基づく依存関係プロパティの格納されている値を強制するこのコールバックの実装が含まれます。 コールバックを確認する場合は、かどうか、 `ShirtType` プロパティは、ボタンを持つシャツの型に対応しています。 その場合の既定の開始色を確立します、 `ButtonColor`, 、強制的に変換ボタン シャツ型がない場合は、、 `ButtonColor` 値を、開始値に戻します、 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] \(非表示\) を有効な選択肢の中からそのドロップダウン リストを削除します。  
  
 [!code-csharp[DPCustom\#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom\#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>