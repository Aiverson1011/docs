<Type Name="EventTrigger" FullName="System.Windows.EventTrigger">
  <TypeSignature Language="C#" Value="public class EventTrigger : System.Windows.TriggerBase, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventTrigger extends System.Windows.TriggerBase implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventTrigger" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Actions")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>イベントへの応答で一連のアクションを適用するトリガーを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Trigger> objects have the <xref:System.Windows.Trigger.Setters%2A>, <xref:System.Windows.TriggerBase.EnterActions%2A>, and <xref:System.Windows.TriggerBase.ExitActions%2A> properties that apply changes or actions based on the state of certain properties, while <xref:System.Windows.EventTrigger> objects start a set of <xref:System.Windows.EventTrigger.Actions%2A> when a specified routed event occurs. For example, you may want to use an <xref:System.Windows.EventTrigger> to start a set of animations when the mouse pointer is over a certain [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] control. Unlike <xref:System.Windows.Trigger>, <xref:System.Windows.EventTrigger> has no concept of termination of state, so the action will not be undone once the condition that raised the event is no longer true.  
  
 Note that when using an <xref:System.Windows.EventTrigger>, you need to choose events that do not interfere with the inherent behavior of your control. Controls such as <xref:System.Windows.Controls.Button> or <xref:System.Windows.Controls.TextBox> perform specific actions on user input events such as mouse clicks and keyboard events. For example, if you are styling a button and try to set the <xref:System.Windows.Input.Mouse.MouseDown> event as the <xref:System.Windows.EventTrigger.RoutedEvent%2A> of an <xref:System.Windows.EventTrigger>, the <xref:System.Windows.EventTrigger> never gets applied because the event first gets handled by the button. Instead, you can use the <xref:System.Windows.Input.Mouse.PreviewMouseDown> event or a different event.  
  
 When using data binding, if you are using the <xref:System.Windows.Data.Binding.TargetUpdated> event, you must set the <xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A> value of your <xref:System.Windows.Data.Binding> object to **languageKeyword tag is not supported!!!!**  
 for the event to be raised.  
  
 Adding a <xref:System.Windows.TriggerAction> child to an <xref:System.Windows.EventTrigger> object implicitly adds it to the <xref:System.Windows.TriggerActionCollection> for the <xref:System.Windows.EventTrigger> object.  
  
   
  
## 例  
 This example shows how to use event triggers in a style to animate the <xref:System.Windows.UIElement.MouseEnter> and <xref:System.Windows.UIElement.MouseLeave> events of a <xref:System.Windows.FrameworkElement>. In this example, the <xref:System.Windows.Style> has the <xref:System.Windows.Style.TargetType%2A> set to <xref:System.Windows.Shapes.Rectangle>. Therefore, there is no need to qualify the `MouseEnter` and `MouseLeave` event names with the class name.  
  
 [!code-xml[StyleEventTriggerAnimation\#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
 [!code-xml[StyleEventTriggerAnimation\#EventTriggerSnippet](~/samples/snippets/xaml/VS_Snippets_Wpf/StyleEventTriggerAnimation/XAML/Default.xaml#eventtriggersnippet)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.EventSetter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.EventTrigger" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger (System.Windows.RoutedEvent routedEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor(System.Windows.RoutedEvent)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <see cref="T:System.Windows.RoutedEvent" /> するこのトリガーを起動できるようにします。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.EventTrigger" /> クラス イベントを指定しています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Actions">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerActionCollection Actions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerActionCollection Actions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.Actions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerActionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベントが発生したときに適用するアクションのコレクションを取得します。</summary>
        <value>既定値は空のコレクションです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 異なり <xref:System.Windows.Trigger>, 、<xref:System.Windows.EventTrigger> イベントを発生させた条件が true では不要になった後、アクションが元に戻すにならないように、状態の終了の概念がありません。  
  
 追加する、 <xref:System.Windows.TriggerAction> の子、 <xref:System.Windows.EventTrigger> オブジェクトが暗黙的に追加して、 <xref:System.Windows.TriggerActionCollection> の <xref:System.Windows.EventTrigger> オブジェクトです。  
  
> [!NOTE]
>  このプロパティでのみ設定できる [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] に示すコレクション構文を使用してまたはコレクション オブジェクトへのアクセスや追加などのさまざまなメソッドを使用します。 コレクション オブジェクト自体にアクセスするプロパティは読み取り専用で、コレクション自体は読み取り\/書き込みです。  
  
<a name="xamlPropertyElementUsage_Actions"></a>   
## XAML プロパティ要素の使用  
  
```  
<object>  
  <object.Actions>  
    OneOrMoreTriggerActions  
  </object.Actions>  
</object>  
```  
  
<a name="xamlValues_Actions"></a>   
## XAML 値  
 *OneOrMoreTriggerActions*  
 1 つまたは複数 <xref:System.Windows.TriggerAction> オブジェクトです。  
  
   
  
## 例  
 この例のスタイルでイベント トリガーを使用して、アニメーション化する方法を説明する、 <xref:System.Windows.UIElement.MouseEnter> と <xref:System.Windows.UIElement.MouseLeave> のイベント、 <xref:System.Windows.FrameworkElement>です。 前述のように、追加、 <xref:System.Windows.TriggerAction> の子、 <xref:System.Windows.EventTrigger> オブジェクトが暗黙的に追加して、 <xref:System.Windows.TriggerActionCollection> の <xref:System.Windows.EventTrigger> オブジェクトです。 この例ではこのため、 `<EventTrigger.Actions>` は暗黙の型。  
  
 [!code-xml[StyleEventTriggerAnimation\#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
 [!code-xml[StyleEventTriggerAnimation\#EventTriggerSnippet](~/samples/snippets/xaml/VS_Snippets_Wpf/StyleEventTriggerAnimation/XAML/Default.xaml#eventtriggersnippet)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="protected virtual void AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddChild(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.Windows.TriggerAction" /> に追加するオブジェクト、 <see cref="P:System.Windows.EventTrigger.Actions" /> このトリガーのコレクション。</param>
        <summary>指定したオブジェクトを追加、 <see cref="P:System.Windows.EventTrigger.Actions" /> 現在のイベント トリガーのコレクション。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddText">
      <MemberSignature Language="C#" Value="protected virtual void AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddText(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">このパラメーターは使用されません。</param>
        <summary>このメソッドはサポートされていませんし、例外が発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutedEvent">
      <MemberSignature Language="C#" Value="public System.Windows.RoutedEvent RoutedEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.RoutedEvent RoutedEvent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.RoutedEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このトリガーをアクティブにする <see cref="T:System.Windows.RoutedEvent" /> を取得または設定します。</summary>
        <value>既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.EventTrigger>s は、指定したルーティングされたイベントが発生したときに、一連のアクションを適用します。 などを使用する場合 <xref:System.Windows.EventTrigger>マウス ポインターが特定の一連のアニメーションを開始する s [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] コントロールです。  
  
 場合テンプレートまたはスタイルを格納している <xref:System.Windows.EventTrigger> はありません、 `TargetType` プロパティが指定されている必要があります品質にクラス名を使用して、イベント名、 `ClassName.EventName` 構文です。  
  
 <xref:System.Windows.EventTrigger> オブジェクトは済みのイベントを処理できない <xref:System.Windows.RoutedEventArgs.Handled%2A>します。 などのコントロール <xref:System.Windows.Controls.Button> または <xref:System.Windows.Controls.TextBox> マウス クリックなどのユーザー入力イベントを特定の操作を行い、キーボード イベントです。 たとえば、ボタンのスタイル設定は設定しようとする場合、 <xref:System.Windows.Input.Mouse.MouseDown> イベントとして、 <xref:System.Windows.EventTrigger.RoutedEvent%2A> の <xref:System.Windows.EventTrigger>, 、 <xref:System.Windows.EventTrigger> イベント最初取得によって処理されるため、ボタンは、適用されることはありません。 代わりに、使用、 <xref:System.Windows.Input.Mouse.PreviewMouseDown> イベントまたは別のイベントです。  
  
 使用している場合は、データ バインディングを使用する場合、 <xref:System.Windows.Data.Binding.TargetUpdated> 設定する必要があります、イベント、 <xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A> の値、 <xref:System.Windows.Data.Binding> を true にイベントを発生させるオブジェクトです。  
  
   
  
## 例  
 この例では、スタイルのイベント トリガーを使用して、アニメーション化する、 <xref:System.Windows.UIElement.MouseEnter> と <xref:System.Windows.UIElement.MouseLeave> のイベント、 <xref:System.Windows.FrameworkElement>です。 この例では、 <xref:System.Windows.Style> が、 <xref:System.Windows.Style.TargetType%2A> 設定 <xref:System.Windows.Shapes.Rectangle>します。 そのため、修飾する必要はありません、 `MouseEnter` と `MouseLeave` クラス名を使用します。  
  
 [!code-xml[StyleEventTriggerAnimation\#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
 [!code-xml[StyleEventTriggerAnimation\#EventTriggerSnippet](~/samples/snippets/xaml/VS_Snippets_Wpf/StyleEventTriggerAnimation/XAML/Default.xaml#eventtriggersnippet)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Windows.EventTrigger.RoutedEvent" /> プロパティを null にすることはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeActions">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeActions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.ShouldSerializeActions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>シリアル化処理が有効な値をシリアル化する必要かどうかを返す、 <see cref="P:System.Windows.EventTrigger.Actions" /> このクラスのインスタンスのプロパティです。</summary>
        <returns>返します。 <see langword="true " />場合、 <see cref="P:System.Windows.EventTrigger.Actions" /> シリアル化された以外の場合、プロパティ値にする必要があります <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.SourceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このトリガーをアクティブにするイベントでオブジェクトの名前を取得または設定します。 これは、要素トリガーまたはテンプレート トリガーでのみ使用されます。</summary>
        <value>既定値は <see langword="null" /> です。 このプロパティ値が <see langword="null" /> の場合、イベントの発生について監視される要素は、テンプレートが適用される親または論理ツリー ルートです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Where のスコープ内の任意の要素の名前に、このプロパティを設定することができますトリガー コレクション \(コレクションがこの <xref:System.Windows.EventTrigger> の一部である\) を適用します。 これは、これを格納しているテンプレート内にある名前付き要素では通常 <xref:System.Windows.EventTrigger>です。 設定する場合は、 <xref:System.Windows.FrameworkElement.Triggers%2A> 、直接要素のプロパティがその親要素のスコープ内で名前付き要素。  
  
 使用して、オブジェクトを名前を [x:Name Attribute](http://msdn.microsoft.com/ja-jp/b7e61222-e8cf-48d2-acd0-6df3b7685d48) 構文です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.EventTrigger" /> は、使用中になったら変更できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">追加する子オブジェクト。</param>
        <summary>子オブジェクトを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.EventTrigger> のインスタンスが <xref:System.Windows.Markup.IAddChild> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">オブジェクトに追加するテキスト。</param>
        <summary>オブジェクトにノードのテキスト コンテンツを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Windows.EventTrigger> のインスタンスが <xref:System.Windows.Markup.IAddChild> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.EventTrigger" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>