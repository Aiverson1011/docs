<Type Name="DataTemplate" FullName="System.Windows.DataTemplate">
  <TypeSignature Language="C#" Value="public class DataTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DataTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("DataTemplateKey")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データ オブジェクトの視覚的な構造をについて説明します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Windows.DataTemplate> データ オブジェクトの視覚エフェクトを指定します。<xref:System.Windows.DataTemplate> バインドするときに、オブジェクトが特に便利ですが、 <xref:System.Windows.Controls.ItemsControl> など、 <xref:System.Windows.Controls.ListBox> コレクション全体にします。 詳細については、なし、 <xref:System.Windows.Controls.ListBox> コレクションにオブジェクトの文字列表現を表示します。 この場合は、使用できる、 <xref:System.Windows.DataTemplate> データ オブジェクトの外観を定義します。 内容、 <xref:System.Windows.DataTemplate> データ オブジェクトの視覚的な構造になります。  
  
 詳細については、次を参照してください。 [データ テンプレートの概要](http://msdn.microsoft.com/ja-jp/0f4d9f8c-0230-4013-bd7b-e8e7fed01b4a)します。  
  
   
  
## 例  
 次の例では、作成する方法、 <xref:System.Windows.DataTemplate> インラインです。<xref:System.Windows.DataTemplate> 3 つの各データ項目が表示されることを示す <xref:System.Windows.Controls.TextBlock> 内の要素、 <xref:System.Windows.Controls.StackPanel>です。 この例では、データ オブジェクトと呼ばれるクラスを `Task`です。<xref:System.Windows.Controls.TextBlock> のプロパティにこのテンプレート内の要素がバインドされている、 `Task` クラスです。  
  
 [!code-xml[DataTemplatingIntro\_snip\#Inline](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#inline)]  
  
 定義する方が一般的である、 <xref:System.Windows.DataTemplate> ため、次の例に示すように、再利用可能なオブジェクトの resources セクションにします。  
  
 [!code-xml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xml[DataTemplatingIntro_snip#AsResource](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#asresource)]  
[!code-xml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 使用できるようになりました `myTaskTemplate` 次の例のように、リソースとして。  
  
 [!code-xml[DataTemplatingIntro\_snip\#MyTaskTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#mytasktemplate)]  
  
 完全なサンプルを参照してください。 [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009)します。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Data.Binding" />
    <altmember cref="T:System.Windows.Controls.DataTemplateSelector" />
    <altmember cref="T:System.Windows.HierarchicalDataTemplate" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.DataTemplate" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplate (object dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.#ctor(System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataType">場合は、テンプレート オブジェクトのデータを対象には、これは、データ オブジェクトの型名です。</param>
        <summary>指定した <see cref="T:System.Windows.DataTemplate" /> プロパティを使用して、<see cref="P:System.Windows.DataTemplate.DataType" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クラスの型名、参照を使用して、 [x:Type Markup Extension](http://msdn.microsoft.com/ja-jp/e0e0ce6f-e873-49c7-8ad7-8b840eb353ec)です。 テンプレートを使用する場合 [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] データ、これは、データのタグ名を表す文字列。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataTemplateKey">
      <MemberSignature Language="C#" Value="public object DataTemplateKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataTemplateKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataTemplateKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既定のキーを取得、 <see cref="T:System.Windows.DataTemplate" />です。</summary>
        <value>既定のキー、 <see cref="T:System.Windows.DataTemplate" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定しない場合、 [x:Key attribute](http://msdn.microsoft.com/ja-jp/1985cd45-f197-42d5-b75e-886add64b248) 上、 <xref:System.Windows.DataTemplate> 内にある、 <xref:System.Windows.ResourceDictionary>, 、 <xref:System.Windows.DataTemplate.DataTemplateKey%2A> キーとして使用します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public object DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.DataTemplate" /> が対象としている型を取得または設定します。</summary>
        <value>既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This property is very similar to the <xref:System.Windows.Style.TargetType%2A> property of the <xref:System.Windows.Style> class. When you set this property to the data type without specifying an **languageKeyword tag is not supported!!!!**  
, the <xref:System.Windows.DataTemplate> gets applied automatically to data objects of that type. Note that when you do that the **languageKeyword tag is not supported!!!!**  
 is set implicitly. Therefore, if you assign this <xref:System.Windows.DataTemplate> an **languageKeyword tag is not supported!!!!**  
 value, you are overriding the implicit **languageKeyword tag is not supported!!!!**  
 and the <xref:System.Windows.DataTemplate> would not be applied automatically.  
  
 Also note that if you are binding a <xref:System.Windows.Controls.ContentControl> to a collection of `Task` objects, the <xref:System.Windows.Controls.ContentControl> does not use the <xref:System.Windows.DataTemplate> automatically. This is because the binding on a <xref:System.Windows.Controls.ContentControl> needs more information to distinguish whether you want to bind to an entire collection or the individual objects. If your <xref:System.Windows.Controls.ContentControl> is tracking the selection of an <xref:System.Windows.Controls.ItemsControl> type, you can set the <xref:System.Windows.Data.Binding.Path%2A> property of the <xref:System.Windows.Controls.ContentControl> binding to "`/`" to indicate that you are interested in the current item. For an example, see [How to: Bind to a Collection and Display Information Based on Selection](http://msdn.microsoft.com/ja-jp/952a7d76-dd29-49e5-86f5-32c4530e70eb). Otherwise, you need to specify the <xref:System.Windows.DataTemplate> explicitly by setting the <xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> property.  
  
 The <xref:System.Windows.DataTemplate.DataType%2A> property is particularly useful when you have a <xref:System.Windows.Data.CompositeCollection> of different types of data objects.  
  
 If this property targets an XML element that is not in the default namespace, you must precede the element name with the namespace or a namespace designator. For XML exposed through LINQ for XML, the namespace appears in braces, preceded by a brace escape sequence:  
  
```xaml  
<DataTemplate DataType="{}{http://myNamespace}Details">  
```  
  
 For XML exposed through XPath, the element name is preceded by a namespace designator established by an instance of <xref:System.Windows.Data.XmlNamespaceMapping>:  
  
```xaml  
<DataTemplate DataType="mn:Details">  
```  
  
<a name="xamlAttributeUsage_DataType"></a>   
## XAML Attribute Usage  
  
```  
<object DataType="typeName"/>  
```  
  
<a name="xamlValues_DataType"></a>   
## XAML Values  
 *typeName*  
 If the template is intended for object data, this property contains the type name of the data object \(as a string\). To refer to the type name of the class, use the [x:Type Markup Extension](http://msdn.microsoft.com/ja-jp/e0e0ce6f-e873-49c7-8ad7-8b840eb353ec). If the template is intended for [!INCLUDE[TLA#tla_xml](~/includes/tlasharptla-xml-md.md)] data, this property contains the XML element name. See the documentation remarks for details about specifying a non\-default namespace for the XML element.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プロパティの値を適用したり、1 つまたは複数の条件に基づいてアクションを実行するトリガーのコレクションを取得します。</summary>
        <value>トリガーのオブジェクトのコレクション。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データ テンプレート内でトリガーを作成する場合、トリガーの set アクセス操作子はデータ テンプレートのスコープ内にあるプロパティを設定する必要があります。 それ以外の場合、データを格納している型を対象とするスタイルを使用してトリガーを作成するより適切な場合があります。 バインドする場合など、 <xref:System.Windows.Controls.ListBox> 、コントロール コンテナーが <xref:System.Windows.Controls.ListBoxItem> オブジェクトです。 スコープ内ではないプロパティを設定するトリガーを使用している場合、 <xref:System.Windows.DataTemplate>, を作成するより適切な場合があります、 <xref:System.Windows.Controls.ListBoxItem> のスタイルを設定し、そのスタイル内でトリガーを作成します。 詳細については、DataTemplate に属しているものを参照してくださいでしょうか。[データ テンプレートの概要](http://msdn.microsoft.com/ja-jp/0f4d9f8c-0230-4013-bd7b-e8e7fed01b4a)します。  
  
> [!NOTE]
>  このプロパティでのみ設定できる [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] に示すコレクション構文を使用してまたはコレクション オブジェクトへのアクセスや追加などのさまざまなメソッドを使用します。 コレクション オブジェクト自体にアクセスするプロパティは読み取り専用で、コレクション自体は読み取り\/書き込みです。  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## XAML プロパティ要素の使用  
  
```  
<object>  
  <object.Triggers>  
    OneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## XAML 値  
 *OneOrMoreTriggers*  
 0 個以上 <xref:System.Windows.TriggerBase> オブジェクトです。  
  
   
  
## 例  
 次 <xref:System.Windows.DataTemplate> の使用方法、 <xref:System.Windows.DataTemplate.Triggers%2A> プロパティです。  
  
 [!code-xml[DataBindingLab\#AuctionItemDataTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#auctionitemdatatemplate)]  
  
 完全なサンプルを参照してください。 [Data Binding Demo](http://go.microsoft.com/fwlink/?LinkID=163703)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.MultiDataTrigger" />
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">要素にこのテンプレートが適用されます。</param>
        <summary>ルールのセットに対してテンプレートの親を確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、次の規則を使用します。  
  
-   `templatedParent` Null 以外である必要があります <xref:System.Windows.FrameworkElement>します。  
  
-   <xref:System.Windows.DataTemplate> に適用する必要があります、 <xref:System.Windows.Controls.ContentPresenter>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.DataTemplate" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>