<Type Name="DataContractAttribute" FullName="System.Runtime.Serialization.DataContractAttribute">
  <TypeSignature Language="C#" Value="public sealed class DataContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.DataContractAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>この型が、データ コントラクトを定義または実装し、<see cref="T:System.Runtime.Serialization.DataContractSerializer" /> などのシリアライザーによってシリアル化可能であることを指定します。 型をシリアル化可能にするには、型作成者が、型のデータ コントラクトを定義する必要があります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 Apply the <xref:System.Runtime.Serialization.DataContractAttribute> attribute to types \(classes, structures, or enumerations\) that are used in serialization and deserialization operations by the <xref:System.Runtime.Serialization.DataContractSerializer>. If you send or receive messages by using the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] infrastructure, you should also apply the <xref:System.Runtime.Serialization.DataContractAttribute> to any classes that hold and manipulate data sent in messages. [!INCLUDE[crabout](~/includes/crabout-md.md)] data contracts, see [Using Data Contracts](http://msdn.microsoft.com/ja-jp/a3ae7b21-c15c-4c05-abd8-f483bcbf31af).  
  
 You must also apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any field, property, or event that holds values you want to serialize. By applying the <xref:System.Runtime.Serialization.DataContractAttribute>, you explicitly enable the <xref:System.Runtime.Serialization.DataContractSerializer> to serialize and deserialize the data.  
  
> [!CAUTION]
>  You can apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to private fields. Be aware that the data returned by the field \(even if it is private\) is serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process.  
  
 [!INCLUDE[crabout](~/includes/crabout-md.md)] data contracts, see the topics listed in [Using Data Contracts](http://msdn.microsoft.com/ja-jp/a3ae7b21-c15c-4c05-abd8-f483bcbf31af).  
  
## Data Contracts  
 A **newTerm tag is not supported!!!!**  
 is an abstract description of a set of fields with a name and data type for each field. The data contract exists outside of any single implementation to allow services on different platforms to interoperate. As long as the data passed between the services conforms to the same contract, all the services can process the data. This processing is also known as a **newTerm tag is not supported!!!!**  
. A data contract is also similar to an interface in that the contract specifies how data must be delivered so that it can be processed by an application. For example, the data contract may call for a data type named "Person" that has two text fields, named "FirstName" and "LastName". To create a data contract, apply the <xref:System.Runtime.Serialization.DataContractAttribute> to the class and apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any fields or properties that must be serialized. When serialized, the data conforms to the data contract that is implicitly built into the type.  
  
> [!NOTE]
>  A data contract differs significantly from an actual interface in its inheritance behavior. Interfaces are inherited by any derived types. When you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a base class, the derived types do not inherit the attribute or the behavior. However, if a derived type has a data contract, the data members of the base class are serialized. However, you must apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to new members in a derived class to make them serializable.  
  
## XML Schema Documents and the SvcUtil Tool  
 If you are exchanging data with other services, you must describe the data contract. For the current version of the <xref:System.Runtime.Serialization.DataContractSerializer>, an XML schema can be used to define data contracts. \(Other forms of metadata\/description could be used for the same purpose.\) To create an XML schema from your application, use the [Service Model Metadata Utility Tool \(Svcutil.exe\)](http://msdn.microsoft.com/ja-jp/1abf3d9f-b420-46f1-b628-df238751f308) with the **system tag is not supported!!!!**  
 command line option. When the input to the tool is an assembly, by default, the tool generates a set of XML schemas that define all the data contract types found in that assembly. Conversely, you can also use the Svcutil.exe tool to create Visual Basic or C\# class definitions that conform to the requirements of XML schemas that use constructs that can be expressed by data contracts. In this case, the **system tag is not supported!!!!**  
 command line option is not required.  
  
 If the input to the Svcutil.exe tool is an XML schema, by default, the tool creates a set of classes. If you examine those classes, you find that the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied. You can use those classes to create a new application to process data that must be exchanged with other services.  
  
 You can also run the tool against an endpoint that returns a Web Services Description Language \(WSDL\) document to automatically generate the code and configuration to create an [!INCLUDE[indigo1](~/includes/indigo1-md.md)] client. The generated code includes types that are marked with the <xref:System.Runtime.Serialization.DataContractAttribute>.  
  
## Reusing Existing Types  
 A data contract has two basic requirements: a stable name and a list of members. The stable name consists of the namespace uniform resource identifier \(URI\) and the local name of the contract. By default, when you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a class, it uses the class name as the local name and the class's namespace \(prefixed with "http:\/\/schemas.datacontract.org\/2004\/07\/"\) as the namespace URI. You can override the defaults by setting the <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> properties. You can also change the namespace by applying the <xref:System.Runtime.Serialization.ContractNamespaceAttribute> to the namespace. Use this capability when you have an existing type that processes data exactly as you require but has a different namespace and class name from the data contract. By overriding the default values, you can reuse your existing type and have the serialized data conform to the data contract.  
  
> [!NOTE]
>  In any code, you can use the word **languageKeyword tag is not supported!!!!**  
>  instead of the longer <xref:System.Runtime.Serialization.DataContractAttribute>.  
  
## Versioning  
 A data contract can also accommodate later versions of itself. That is, when a later version of the contract includes extra data, that data is stored and returned to a sender untouched. To do this, implement the <xref:System.Runtime.Serialization.IExtensibleDataObject> interface.  
  
 [!INCLUDE[crabout](~/includes/crabout-md.md)] versioning, see [Data Contract Versioning](http://msdn.microsoft.com/ja-jp/4a0700cb-5f5f-4137-8705-3a3ecf06461f).  
  
   
  
## 例  
 The following example serializes and deserializes a class named `Person` to which the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied. Note that the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> properties have been set to values that override the default settings.  
  
 [!code-csharp[DataContractAttribute\#1](~/samples/snippets/csharp/VS_Snippets_CFX/datacontractattribute/cs/overview.cs#1)]
 [!code-vb[DataContractAttribute\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/datacontractattribute/vb/overview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.IExtensibleDataObject" />
    <altmember cref="T:System.Runtime.Serialization.ExtensionDataObject" />
    <altmember cref="T:System.Runtime.Serialization.DataContractSerializer" />
    <altmember cref="T:System.Runtime.Serialization.DataMemberAttribute" />
    <altmember cref="T:System.Runtime.Serialization.ISerializable" />
    <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.DataContractAttribute.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsNameSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得するかどうか <see cref="P:System.Runtime.Serialization.DataContractAttribute.Name" /> 明示的に設定されています。</summary>
        <value>名前が明示的に設定されている場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNamespaceSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsNamespaceSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNamespaceSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Runtime.Serialization.DataContractAttribute.Namespace" /> が明示的に設定されているかどうかを取得します。</summary>
        <value>名前空間が明示的に設定されている場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public bool IsReference { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReference" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsReference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクト参照データを保持するかどうかを示す値を取得または設定します。</summary>
        <value>標準 XML を使用してオブジェクト参照データを保持する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `IsReference` プロパティを使用して、<xref:System.Runtime.Serialization.DataContractSerializer> に、オブジェクト参照情報を保持する XML コンストラクトの挿入を指示します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences" />
      </Docs>
    </Member>
    <Member MemberName="IsReferenceSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsReferenceSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReferenceSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Runtime.Serialization.DataContractAttribute.IsReference" /> が明示的に設定されているかどうかを取得します。</summary>
        <value>参照が明示的に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>型のデータ コントラクトの名前を取得または設定します。</summary>
        <value>データ コントラクトのローカル名。 既定値は、この属性が適用されるクラスの名前です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> プロパティを使用して、データ コントラクトに名前を割り当てます。この名前は、XML スキーマ内の型の名前にもなります。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Data Contract Names](http://msdn.microsoft.com/ja-jp/31f87e6c-247b-48f5-8e94-b9e1e33d8d09).  
  
 既定では、データ コントラクトの名前は、<xref:System.Runtime.Serialization.DataContractAttribute> が適用される型の名前になります。 ただし、理由によっては、この既定の名前を変更することができます。 1 つ目の理由は、既存のデータ コントラクトに準拠させる必要があるデータを既存の型で処理できるようにすることです。 たとえば、`Person` という名前の型が存在するが、XML スキーマのデータ コントラクトでは、その型が `Customer` という名前でなければならないとします。 この場合、プロパティ値を `Customer` に設定することで、コントラクトを活用できます。  
  
 2 つ目の理由は、型名としては無効な名前を生成できるようにすることです。 たとえば、データ コントラクトで、型名としては許されない名前が必要な場合は、プロパティ値をその許されない名前に設定します。 たとえば、文字列 "$value" は型名としては使用できませんが、<xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> プロパティの値としては設定できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>型のデータ コントラクトの名前空間を取得または設定します。</summary>
        <value>コントラクトの名前空間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 型で特定のデータ コントラクトに準拠するデータを返す必要がある場合は、このプロパティを使用して特定の名前空間を指定します。  
  
> [!TIP]
>  データを正常に送信するには、クライアントとサーバーの両方でデータ コントラクト内のデータの名前が同じでなければなりません。 Visual Basic プロジェクトでは、既定で、各ファイルに定義された名前空間にプレフィックスが追加されます \(プロジェクトに基づいて "ルート名前空間" と呼ばれます\)。 このプレフィックスを追加すると、クライアントとサーバーの名前空間は同じ型の別々の名前空間になります。 この問題を解決するには、<xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> プロパティを "" に設定するか、このプロパティでデータ コントラクト名前空間を明示的に設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>