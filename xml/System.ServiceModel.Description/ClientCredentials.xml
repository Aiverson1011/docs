<Type Name="ClientCredentials" FullName="System.ServiceModel.Description.ClientCredentials">
  <TypeSignature Language="C#" Value="public class ClientCredentials : System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClientCredentials extends System.Object implements class System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.ClientCredentials" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Security.SecurityCredentialsManager</BaseTypeName>
    <BaseTypeName FrameworkAlternate="xamarinandroid-7.1">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Description.IEndpointBehavior</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>クライアントとサービスの資格情報、および、クライアント側の通信で使用するサービス資格情報の認証設定をユーザーが構成できるようにします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceModel.Description.ClientCredentials> には、<xref:System.ServiceModel.ClientBase%601.ClientCredentials%2A> クラスの <xref:System.ServiceModel.ClientBase%601> プロパティを使用してアクセスします。  
  
 <xref:System.ServiceModel.Description.ClientCredentials> オブジェクトは、<xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> コレクションに追加されます。<xref:System.ServiceModel.ClientBase%601.ClientCredentials%2A> プロパティは、そのコレクション内のエントリの "*ファサード*" \(よく知られたデザイン パターン\) です。 このクラスのプロパティの多くは、主にプロパティで構成されるオブジェクトを返します。 これらのオブジェクトを、構成に使用できます。オブジェクトを `get` した後で、それを使用してそのメンバーを呼び出すことにより、プロパティを `set` できます。  
  
   
  
## 例  
 このクラスをオーバーライドし、カスタム セキュリティ トークン マネージャーを含む独自のカスタム クライアント資格情報を実装する方法を、次のコード例に示します。  
  
> [!IMPORTANT]
>  カスタム セキュリティ トークン マネージャーを作成するために、<xref:System.ServiceModel.Security.SecurityCredentialsManager.CreateSecurityTokenManager%2A> メソッドがオーバーライドされることに注意する必要があります。<xref:System.ServiceModel.ClientCredentialsSecurityTokenManager> から派生したセキュリティ トークン マネージャーは、 実際のセキュリティ トークンを作成するために、<xref:System.IdentityModel.Selectors.SecurityTokenProvider> から派生したカスタム セキュリティ トークン プロバイダーを返す必要があります。 このパターンに従ってセキュリティ トークンを作成しないと、アプリケーションがセキュリティ攻撃のリスク、特に権限の昇格のリスクにさらされます。 このコーディング パターンによって、チャネル ファクトリがキャッシュされるときに正しい資格情報が使用されるようになります。  
  
 [!code-csharp[c\_CustomCredentials\#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_customcredentials/cs/source.cs#1)]
 [!code-vb[c\_CustomCredentials\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customcredentials/vb/client/client.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.ServiceModel.Description.ClientCredentials" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスを使用する最も一般的な方法は、直接インスタンス化するのではなく、クライアント オブジェクトのプロパティにアクセスすることです。 この方法を次のコードに示します。  
  
 [!code-csharp[c\_CreateSTS\#31](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClientCredentials ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ClientCredentials.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ServiceModel.Description.ClientCredentials" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This constructor creates a <xref:System.ServiceModel.Description.ClientCredentials> object with default settings, for example, <xref:System.ServiceModel.Description.ClientCredentials.SupportInteractive%2A> \= **languageKeyword tag is not supported!!!!**  
.  
  
   
  
## 例  
 The most common way to use this class is to access its properties from the client object and not to instantiate it directly. The following code shows how to do this.  
  
 [!code-csharp[c\_CreateSTS\#31](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ClientCredentials (System.ServiceModel.Description.ClientCredentials other);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.Description.ClientCredentials other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ClientCredentials.#ctor(System.ServiceModel.Description.ClientCredentials)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.ServiceModel.Description.ClientCredentials" />
      </Parameters>
      <Docs>
        <param name="other">
          <see cref="T:System.ServiceModel.Description.ClientCredentials" /> 新しく構築されたインスタンスのすべてのプロパティに、このパラメーターの値が反映されます。</param>
        <summary>これはコピー コンストラクターです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 The most common way to use this class is to access its properties from the client object and not to instantiate it directly. The following code shows how to do this.  
  
 [!code-csharp[c\_CreateSTS\#31](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public virtual void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Dispatcher.ClientRuntime behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, class System.ServiceModel.Dispatcher.ClientRuntime behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ClientCredentials.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceEndpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="behavior" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="serviceEndpoint">指定したクライアント動作を適用するエンドポイント。</param>
        <param name="behavior">指定したエンドポイントに適用するクライアント動作。</param>
        <summary>指定したクライアント動作をエンドポイントに適用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クライアント動作は、エンドポイントに <xref:System.ServiceModel.Channels.SecurityBindingElement> が関連付けられていない場合にのみエンドポイントに適用されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceEndpoint" /> または<paramref name=" behavior" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificate">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.X509CertificateInitiatorClientCredential ClientCertificate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.X509CertificateInitiatorClientCredential ClientCertificate" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ClientCredentials.ClientCertificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.X509CertificateInitiatorClientCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントがサービスに対して自身を認証するために使用する X.509 証明書を提供するオブジェクトを取得します。</summary>
        <value>クライアント証明書を表す <see cref="T:System.ServiceModel.Security.X509CertificateInitiatorClientCredential" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can also set this value using the [\<certificate\> of \<clientCertificate\> Element](http://msdn.microsoft.com/ja-jp/00297efb-a7f2-4e03-bc2b-943d545610fc) in a client application configuration file.  
  
   
  
## 例  
 The following code shows how you can use this property to configure the X.509 certificate.  
  
 [!code-csharp[S\_UEClientCredentials\#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueclientcredentials/cs/program.cs#3)]
 [!code-vb[S\_UEClientCredentials\#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueclientcredentials/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Description.ClientCredentials Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ServiceModel.Description.ClientCredentials Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ClientCredentials.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ClientCredentials</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.ServiceModel.Description.ClientCredentials" /> インスタンスの新しいコピーを作成します。</summary>
        <returns>
          <see cref="T:System.ServiceModel.Description.ClientCredentials" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected virtual System.ServiceModel.Description.ClientCredentials CloneCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.ServiceModel.Description.ClientCredentials CloneCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ClientCredentials.CloneCore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Description.ClientCredentials</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.ServiceModel.Description.ClientCredentials" /> インスタンスの新しいコピーを作成します。</summary>
        <returns>
          <see cref="T:System.ServiceModel.Description.ClientCredentials" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceModel.Description.ClientCredentials.Clone%2A> メソッドと <xref:System.ServiceModel.Description.ClientCredentials.CloneCore%2A> メソッドは、コア デザイン パターンに従います。<xref:System.ServiceModel.Description.ClientCredentials.CloneCore%2A> は、複製する必要がある新しいフィールドを追加する場合、派生クラスでオーバーライドできます。  
  
 <xref:System.ServiceModel.Description.ClientCredentials.CloneCore%2A> メソッドは <xref:System.ServiceModel.Description.ClientCredentials.%23ctor%2A> コンストラクターを呼び出します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenManager">
      <MemberSignature Language="C#" Value="public override System.IdentityModel.Selectors.SecurityTokenManager CreateSecurityTokenManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IdentityModel.Selectors.SecurityTokenManager CreateSecurityTokenManager() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ClientCredentials.CreateSecurityTokenManager" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.SecurityTokenManager</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのセキュリティ トークン マネージャーを作成します。 このメソッドを明示的に呼び出すことはほとんどありません。このメソッドは主に拡張シナリオで使用され、システム自体によって呼び出されます。</summary>
        <returns>この <see cref="T:System.ServiceModel.ClientCredentialsSecurityTokenManager" /> インスタンスの <see cref="T:System.ServiceModel.Description.ClientCredentials" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは通常、このクラスを継承するカスタム クライアント資格情報の実装によってオーバーライドされます。 このメソッドは、<xref:System.IdentityModel.Selectors.SecurityTokenManager> の実装の新しいインスタンスを返す役割を果たします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInfoCardSecurityToken">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Tokens.SecurityToken GetInfoCardSecurityToken (bool requiresInfoCard, System.IdentityModel.Selectors.CardSpacePolicyElement[] chain, System.IdentityModel.Selectors.SecurityTokenSerializer tokenSerializer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken GetInfoCardSecurityToken(bool requiresInfoCard, class System.IdentityModel.Selectors.CardSpacePolicyElement[] chain, class System.IdentityModel.Selectors.SecurityTokenSerializer tokenSerializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ClientCredentials.GetInfoCardSecurityToken(System.Boolean,System.IdentityModel.Selectors.CardSpacePolicyElement[],System.IdentityModel.Selectors.SecurityTokenSerializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requiresInfoCard" Type="System.Boolean" />
        <Parameter Name="chain" Type="System.IdentityModel.Selectors.CardSpacePolicyElement[]" />
        <Parameter Name="tokenSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
      </Parameters>
      <Docs>
        <param name="requiresInfoCard">CardSpace が必要かどうかを示す値。</param>
        <param name="chain">クライアントが最終的なトークンにアンワインドを要求するフェデレーション セキュリティ チェーンを説明する <see cref="T:System.IdentityModel.Selectors.CardSpacePolicyElement" /> の配列。</param>
        <param name="tokenSerializer">
          <see cref="T:System.IdentityModel.Selectors.SecurityTokenSerializer" /> 句を読み取ることができる <see langword="KeyInfo" />。</param>
        <summary>CardSpace システムを使用し、ポリシー チェーンおよびトークン シリアライザーを指定して、セキュリティ トークンを生成して返します。</summary>
        <returns>生成されたセキュリティ トークンを表す <see cref="T:System.IdentityModel.Tokens.GenericXmlSecurityToken" />。<see langword="null" /> が <paramref name="requiresInfoCard" /> である場合、<see langword="false" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpDigest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.HttpDigestClientCredential HttpDigest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.HttpDigestClientCredential HttpDigest" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ClientCredentials.HttpDigest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.HttpDigestClientCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の HTTP ダイジェスト資格情報を取得します。</summary>
        <value>HTTP ダイジェスト認証方法が選択されているときに、クライアントがサービスに対して自身を認証するために使用する資格情報を表す <see cref="T:System.ServiceModel.Security.HttpDigestClientCredential" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティによって返されるオブジェクトを使用して <xref:System.ServiceModel.Security.HttpDigestClientCredential.AllowedImpersonationLevel%2A> プロパティを呼び出すことにより、資格情報を構成できます。  
  
 ネットワーク資格情報が現在のスレッドのトークンと異なる場合は、同様にネットワーク資格情報も指定できます。  
  
   
  
## 例  
 このプロパティを使用して資格情報のユーザー名とパスワードを設定する方法を次のコードに示します。  
  
 [!code-csharp[S\_UE\_HttpDigestClientCredential\#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpdigestclientcredential/cs/source.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IssuedToken">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.IssuedTokenClientCredential IssuedToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.IssuedTokenClientCredential IssuedToken" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ClientCredentials.IssuedToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.IssuedTokenClientCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このプロパティを使用して、ローカル セキュリティ トークン サービスに接続するときに使用するエンドポイントのアドレスとバインディングを指定します。 この情報は、発行されたトークンを使用する認証がサービスで必要だが、発行されたトークンを取得する方法と場所が \(クライアント上のバインディングとして表される\) サービスのポリシーで明示的に指定されていない場合に使用されます。</summary>
        <value>ローカル セキュリティ トークン サービスからトークンを取得するために使用するパラメーターを指定する <see cref="T:System.ServiceModel.Security.IssuedTokenClientCredential" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティによって返されるオブジェクトを使用してそのメンバーを呼び出すことにより、ローカル セキュリティ トークン サービスの設定を構成できます。  
  
   
  
## 例  
 このプロパティを使用して <xref:System.ServiceModel.Security.IssuedTokenClientCredential> のインスタンスを取得する方法を次のコードに示します。  
  
 [!code-csharp[C\_CreateSTS\#9](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#9)]
 [!code-vb[C\_CreateSTS\#9](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_creatests/vb/source.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Peer">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.PeerCredential Peer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.PeerCredential Peer" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ClientCredentials.Peer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.PeerCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ピア ノードがメッシュ内の他のノードに対して自身を認証するために使用する資格情報と、ピア ノードが他のピア ノードを認証するために使用する認証設定を制御します。</summary>
        <value>現在のピア資格情報を表す <see cref="T:System.ServiceModel.Security.PeerCredential" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティによって返されるオブジェクトを使用して、そのメンバー \(<xref:System.ServiceModel.Security.PeerCredential.Certificate%2A>、<xref:System.ServiceModel.Security.PeerCredential.MeshPassword%2A>、<xref:System.ServiceModel.Security.PeerCredential.MessageSenderAuthentication%2A>、<xref:System.ServiceModel.Security.PeerCredential.PeerAuthentication%2A> など\) を呼び出すことにより、資格情報を構成できます。  
  
   
  
## 例  
 このプロパティにアクセスする方法を次のコードに示します。  
  
 [!code-csharp[c\_CreateSTS\#26](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityTokenHandlerCollectionManager">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager SecurityTokenHandlerCollectionManager { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager SecurityTokenHandlerCollectionManager" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ClientCredentials.SecurityTokenHandlerCollectionManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはクライアントの資格情報のセキュリティ トークン ハンドラーを設定します。</summary>
        <value>クライアントの資格情報のセキュリティ トークン ハンドラー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceCertificate">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.X509CertificateRecipientClientCredential ServiceCertificate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.X509CertificateRecipientClientCredential ServiceCertificate" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ClientCredentials.ServiceCertificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.X509CertificateRecipientClientCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスの X.509 証明書を指定するために使用するオブジェクトを取得します。</summary>
        <value>特定のサービスに使用する証明書を表す <see cref="T:System.ServiceModel.Security.X509CertificateRecipientClientCredential" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can use the object returned by this property to configure the certificate's properties by calling its members.  
  
 You can specify a single default certificate as well as a different certificate to be used when communicating with a particular URI.  
  
 Through this class, you also control the authentication settings for service certificates negotiated through SSL\/TLS negotiation performed at the message level.  
  
 This property does not always have to be specified. Whether it is required depends on the authentication mode and negotiation options set on the binding that is used to communicate with the service. Some relevant classes that control this behavior are <xref:System.ServiceModel.MessageSecurityOverHttp> and <xref:System.ServiceModel.MessageSecurityOverTcp>.  
  
 You can also set this value using the [\<certificate\> for \<identity\>](http://msdn.microsoft.com/ja-jp/4aeccaf7-8f23-495c-aa5f-5bd8b5d4a10c) element in a client application configuration file.  
  
   
  
## 例  
 This code shows how to use this property to get the service's certificate and set its properties.  
  
 [!code-csharp[c\_CreateSTS\#33](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportInteractive">
      <MemberSignature Language="C#" Value="public bool SupportInteractive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportInteractive" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ClientCredentials.SupportInteractive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>必要に応じてシステムがユーザーに対話的に資格情報を要求できるようにするかどうかを示す値を取得または設定します。 たとえば、中間層シナリオでは <see langword="false" /> に設定する必要があります。</summary>
        <value>資格情報で対話型モードがサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、資格情報のプロビジョニング中にユーザー インターフェイスをポップアップ表示できるようにするかどうかを制御します。 この最も一般的なケースは、[!INCLUDE[infocard](~/includes/infocard-md.md)] を使用する場合です。  
  
   
  
## 例  
 次のコードに、このプロパティを設定する方法を示します。  
  
 [!code-csharp[c\_CreateSTS\#27](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters">
      <MemberSignature Language="C#" Value="void IEndpointBehavior.AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection parameters);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceEndpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>バインディング パラメーターのコレクションにこのクラスのこのインスタンスを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceModel.Description.ClientCredentials.System%23ServiceModel%23Description%23IEndpointBehavior%23AddBindingParameters%2A> メソッドの明示的な実装。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="void IEndpointBehavior.ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceEndpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint">To be added.</param>
        <param name="dispatcher">To be added.</param>
        <summary>エンドポイント全体にわたってサービスの変更または拡張を実装します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ServiceModel.Description.IEndpointBehavior.Validate">
      <MemberSignature Language="C#" Value="void IEndpointBehavior.Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ServiceModel.Description.IEndpointBehavior.Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ClientCredentials.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceEndpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">To be added.</param>
        <summary>将来使用するために予約されています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseIdentityConfiguration">
      <MemberSignature Language="C#" Value="public bool UseIdentityConfiguration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseIdentityConfiguration" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ClientCredentials.UseIdentityConfiguration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または使用のクライアント資格情報かどうかを設定 id 構成します。</summary>
        <value>
          <see langword="True" /> クライアントの資格情報は、id の構成を使用している場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserName">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.UserNamePasswordClientCredential UserName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.UserNamePasswordClientCredential UserName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ClientCredentials.UserName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.UserNamePasswordClientCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントがサービスに対して自身を認証するために使用するユーザー名とパスワードを設定するために使用する資格情報オブジェクトを取得します。</summary>
        <value>現在の UserName 資格情報を表す <see cref="T:System.ServiceModel.Security.UserNamePasswordClientCredential" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティによって返されるオブジェクトを使用して、そのメンバー \(<xref:System.ServiceModel.Security.UserNamePasswordClientCredential.UserName%2A>、<xref:System.ServiceModel.Security.UserNamePasswordClientCredential.Password%2A> など\) を呼び出すことにより、資格情報を構成できます。  
  
   
  
## 例  
 資格情報を構成する方法を次のコード例に示します。  
  
 [!code-csharp[S\_UEClientCredentials\#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueclientcredentials/cs/program.cs#4)]
 [!code-vb[S\_UEClientCredentials\#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueclientcredentials/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Windows">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.WindowsClientCredential Windows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.Security.WindowsClientCredential Windows" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Description.ClientCredentials.Windows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.WindowsClientCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントがサービスに対して自身を認証するために使用する Windows 資格情報の制御に使用されるオブジェクトを取得します。</summary>
        <value>現在の Windows 資格情報を表す <see cref="T:System.ServiceModel.Security.WindowsClientCredential" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティによって返されるオブジェクトを使用してそのメンバー \(<xref:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm%2A>、<xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> など\) を呼び出すことにより、Windows 資格情報を構成できます。  
  
 これらの設定は、SPNEGO ネゴシエーション中にメッセージ レベルまたはトランスポート レベルで使用される Windows 資格情報や、メッセージ レベルの認証に使用される Kerberos トークンのプロパティを制御します。  
  
   
  
## 例  
 このプロパティによって返されるオブジェクトを使用して偽装レベルを構成する方法を次のコードに示します。  
  
 [!code-csharp[S\_UEClientCredentials\#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueclientcredentials/cs/program.cs#5)]
 [!code-vb[S\_UEClientCredentials\#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueclientcredentials/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>