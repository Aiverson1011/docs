<Type Name="PrefixEndpointAddressMessageFilter" FullName="System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter">
  <TypeSignature Language="C#" Value="public class PrefixEndpointAddressMessageFilter : System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PrefixEndpointAddressMessageFilter extends System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Dispatcher.MessageFilter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>URI コンポーネントの*最長プレフィックス マッチ*を使用してメッセージが EndpointAddress と一致しているかどうかを検査するクエリを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceModel.EndpointAddress> オブジェクトは、URI とオプションのアドレス指定ヘッダーのコレクションからなります。 アドレス指定ヘッダーとメッセージ ヘッダーは、等価性の比較のために正規化されます。<xref:System.ServiceModel.EndpointAddress> 内に同じパラメーターが 2 回以上現れる場合は、少なくともそれと同じ回数だけ、対応するヘッダーがメッセージ内に出現する必要があります。  
  
 このフィルターは <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> と同じクエリを実行しますが、メッセージがエンドポイント アドレスと一致するかどうかの検査を*最長プレフィックス マッチ*で行う点だけが異なります。 これは、フィルターで指定されている URI がメッセージの URI に厳密に一致している必要はないが、プレフィックスとして URI に含まれている必要があるという意味です。 たとえば、フィルターでアドレス "www.foo.com" が指定されており、メッセージの宛先が "www.foo.com\/customerA" である場合、フィルター クエリ条件の URI 部分は満たされます。 ただし、フィルター クエリのヘッダー部分はまだ、実行される必要があります。  
  
 インターネット インフォメーション サービス \(IIS\) と基になるファイル システム \(NTFS または FAT\) は、大文字と小文字を区別しません。 このクラスによって実行される URI の比較も、大文字と小文字を区別しません。 したがって、たとえば、http:\/\/www.microsoft.com と http:\/\/WWW.microsoft.com では評価結果が等しくなります。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrefixEndpointAddressMessageFilter (System.ServiceModel.EndpointAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.EndpointAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="address">メッセージの判定に使用される <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
        <summary>
          <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrefixEndpointAddressMessageFilter (System.ServiceModel.EndpointAddress address, bool includeHostNameInComparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.EndpointAddress address, bool includeHostNameInComparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.#ctor(System.ServiceModel.EndpointAddress,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="includeHostNameInComparison" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="address">メッセージの判定に使用される <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
        <param name="includeHostNameInComparison">エンドポイント アドレスの比較にホスト名が含まれている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Web サービスをローカル コンピューターにインストールしている場合は、次のようなさまざまな参照方法があります。  
  
-   http:\/\/localhost\/foo.svc  
  
-   http:\/\/192.168.1.100\/foo.svc  
  
-   http:\/\/\[コンピューター名\]\/foo.svc  
  
-   http:\/\/\[コンピューター名\].\[会社\].com\/foo.svc  
  
 `includeHostNameInComparison` パラメーターの値が `false` の場合、上記の URI はすべて同じエンドポイントに解決されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> がメッセージを検査する対象のエンドポイント アドレスを取得します。</summary>
        <value>
          <see cref="T:System.ServiceModel.EndpointAddress" /> がメッセージを比較するとき基準とする <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterTable&lt;FilterData&gt;">
      <MemberSignature Language="C#" Value="protected override System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt; CreateFilterTable&lt;FilterData&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.ServiceModel.Dispatcher.IMessageFilterTable`1&lt;!!FilterData&gt; CreateFilterTable&lt;FilterData&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.CreateFilterTable``1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="FilterData" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="FilterData">テーブル内のフィルターに関連付けられたデータ。</typeparam>
        <summary>メッセージを複数のエンドポイント アドレスについて同時に検査する新しいフィルター テーブルを作成します。</summary>
        <returns>
          <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> および対応する <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> を格納できる <paramref name="FilterData" /> インターフェイスを実装するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The method returns an instance of <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601> that is optimized to test for specific message endpoints.  
  
 This method is intended to be used by <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeHostNameInComparison">
      <MemberSignature Language="C#" Value="public bool IncludeHostNameInComparison { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostNameInComparison" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エンドポイント アドレスの比較にホスト名が含まれるかどうかを示す値を取得します。</summary>
        <value>エンドポイント アドレスの比較にホスト名が含まれている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Web サービスをローカル コンピューターにインストールしている場合は、次のようなさまざまな参照方法があります。  
  
-   http:\/\/localhost\/foo.svc  
  
-   http:\/\/192.168.1.100\/foo.svc  
  
-   http:\/\/\[コンピューター名\]\/foo.svc  
  
-   http:\/\/\[コンピューター名\].\[会社\].com\/foo.svc  
  
 このプロパティの既定値は `false` であるため、プロパティを変更しない限り、上記の URI はすべて同じエンドポイントに解決されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>メッセージまたはバッファー内のメッセージがエンドポイント フィルターの基準を満たすかどうかを検査します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このフィルターは、メッセージ本文を検査せず、最長プレフィックス マッチを行うためにアドレスのみを検査した後にヘッダーを検査するため、このメソッドの 2 つのオーバーロードは等価です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public override bool Match (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Match(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.Message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message">テスト対象の <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</param>
        <summary>メッセージが指定したエンドポイント アドレスを満たすかどうかを検査します。</summary>
        <returns>
          <see langword="true" /> オブジェクトがフィルターに指定されたエンドポイント アドレスとの一致条件を満たす場合は <see cref="T:System.ServiceModel.Channels.Message" />、そうでない場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このフィルターは、メッセージ本文を検査せず、最長プレフィックス マッチを行うためにアドレスのみを検査した後にヘッダーを検査するため、このメソッドの 2 つのオーバーロードは等価です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public override bool Match (System.ServiceModel.Channels.MessageBuffer messageBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Match(class System.ServiceModel.Channels.MessageBuffer messageBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageBuffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <param name="messageBuffer">テスト対象の <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> オブジェクト。</param>
        <summary>バッファー内のメッセージが指定したエンドポイント アドレスを満たすかどうかを検査します。</summary>
        <returns>
          <see langword="true" /> オブジェクトがエンドポイント アドレスとの一致条件を満たす場合は <see cref="T:System.ServiceModel.Channels.MessageBuffer" />、そうでない場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このフィルターは、メッセージ本文を検査せず、最長プレフィックス マッチを行うためにアドレスのみを検査した後にヘッダーを検査するため、このメソッドの 2 つのオーバーロードは等価です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="messageBuffer" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>