<Type Name="AspLog" FullName="Microsoft.VisualBasic.Logging.AspLog">
  <TypeSignature Language="C#" Value="public class AspLog : Microsoft.VisualBasic.Logging.Log" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi AspLog extends Microsoft.VisualBasic.Logging.Log" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.AspLog" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.VisualBasic.Logging.Log</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>プロパティとイベントと例外の情報をアプリケーションのログ リスナーに書き込むためのメソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 `My.Application.Log`オブジェクトにアクセスするための簡単なエントリ ポイントを提供する、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]services のログ記録します。`WriteEntry`と`WriteException`メソッドは、アプリケーションのログ リスナーにメッセージを書き込みます。 リスナーは、アプリケーションの構成ファイルで構成できます。 詳細については、[Walkthrough: Changing Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/ecc74f95-743c-450d-93f6-09a30db0fe4a) および [Working with Application Logs in Visual Basic](http://msdn.microsoft.com/ja-jp/2581afd1-5791-4bc4-86b2-46244e9fe468) を参照してください。  
  
 `My.Application.Log`オブジェクトはクライアント アプリケーションでのみ使用できます。 Web アプリケーションを使用して`My.Log`です。 詳細については、「<xref:Microsoft.VisualBasic.Logging.Log?displayProperty=fullName>」を参照してください。  
  
 次の表に、関連するタスクの例については、`My.Application.Log`オブジェクト。  
  
|目的|参照トピック|  
|--------|------------|  
|イベント情報をアプリケーションのログ リスナーに書き込む|[How to: Write Log Messages](http://msdn.microsoft.com/ja-jp/972a3e0c-2996-4623-a7a9-d7ebc4d207f8)|  
|例外情報をアプリケーションのログ リスナーに書き込む|[How to: Log Exceptions in Visual Basic](http://msdn.microsoft.com/ja-jp/a26c60e2-ae39-444a-aebb-33eccadc0eeb)|  
|場所を特定する`My.Application.Log`情報を書き込みます|[Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)|  
  
   
  
## 例  
 この例では、`My.Application.Log.WriteEntry` メソッドを使用してトレース情報をログに記録する方法を示します。 詳細については、「[How to: Write Log Messages](http://msdn.microsoft.com/ja-jp/972a3e0c-2996-4623-a7a9-d7ebc4d207f8)」を参照してください。  
  
 [!code-vb[VbVbalrMyApplicationLog\#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AspLog ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.AspLog.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:Microsoft.VisualBasic.Logging.AspLog" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `My.Log`オブジェクトにアクセスするための簡単なエントリ ポイントを提供する、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]services のログ記録します。`WriteEntry`と`WriteException`メソッドは、アプリケーションのログ リスナーにメッセージを書き込みます。 リスナーは、アプリケーションの構成ファイルで構成できます。 詳細については、[Walkthrough: Changing Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/ecc74f95-743c-450d-93f6-09a30db0fe4a) および [Working with Application Logs in Visual Basic](http://msdn.microsoft.com/ja-jp/2581afd1-5791-4bc4-86b2-46244e9fe468) を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AspLog (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.AspLog.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see cref="T:System.String" />。 指定する名前、<see cref="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />プロパティ オブジェクト。</param>
        <summary>
          <see cref="T:Microsoft.VisualBasic.Logging.AspLog" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `My.Log`オブジェクトにアクセスするための簡単なエントリ ポイントを提供する、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]services のログ記録します。`WriteEntry`と`WriteException`メソッドは、アプリケーションのログ リスナーにメッセージを書き込みます。 リスナーは、アプリケーションの構成ファイルで構成できます。 詳細については、[Walkthrough: Changing Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/ecc74f95-743c-450d-93f6-09a30db0fe4a) および [Working with Application Logs in Visual Basic](http://msdn.microsoft.com/ja-jp/2581afd1-5791-4bc4-86b2-46244e9fe468) を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
      </Docs>
    </Member>
    <Member MemberName="InitializeWithDefaultsSinceNoConfigExists">
      <MemberSignature Language="C#" Value="protected override void InitializeWithDefaultsSinceNoConfigExists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void InitializeWithDefaultsSinceNoConfigExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.AspLog.InitializeWithDefaultsSinceNoConfigExists" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新たに作成 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> に追加し、 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> コレクションです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが、新たに作成 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, 、その名前を設定 `FileLog`, 、重要度レベルのメッセージを記録するように構成および <xref:System.Diagnostics.SourceLevels.Information> およびそれ以降。 新しい <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> オブジェクトに追加し、 <xref:System.Diagnostics.TraceSource.Listeners%2A> コレクションです。  
  
 <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> メソッドを呼び出し、 <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> プロパティが構成されていません。 トレース ソースは、アプリケーションの構成ファイルで構成できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:Microsoft.VisualBasic.Logging.AspLog" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>