<Type Name="FileLogTraceListener" FullName="Microsoft.VisualBasic.Logging.FileLogTraceListener">
  <TypeSignature Language="C#" Value="public class FileLogTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileLogTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ファイルにログを出力するように指示する単純なリスナーを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスには、毎日またはアプリケーションごとに、必要に応じて、ログ ファイルをアーカイブする自動メンテナンス機能が用意されています。 この自動アーカイブ機能により、開発者および管理者の保守作業の負担を軽減できます。  
  
 インスタンス <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> に追加できる、 <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> または <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> をテキスト ファイルにログ記録からの出力にリダイレクトするコレクション。 このクラスのインスタンスを追加することも `My.Application.Log` または `My.Log` \(Web アプリケーションの\) 用に [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] アプリケーションです。 詳細については、次を参照してください。 [Walkthrough: Changing Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/ecc74f95-743c-450d-93f6-09a30db0fe4a)`.`  
  
 このクラスの主な機能は次のとおりです。  
  
1.  *アーカイブ機能*します。 このクラスで生成されるログ ファイル名は基本名とログ ファイルに、ログの連続するバージョンを区別するために、多くの日付に従って付けます。 必要な場合に、新しいログ ファイルが作成されます。  
  
     ファイル名の明示的な形式は `baseName`\[\-`dateStamp`\] \[\-`version`\] .log、場所。  
  
    -   `baseName` の部分がで指定された、基本的なログの名前、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> プロパティです。  
  
    -   `dateStamp` 一部形式"の YYYY\-MM\-DD"であり、時に表示される <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> は <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> または <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>です。  
  
    -   は、同じ 2 つ以上のログ ファイルが必要な場合は `baseName` と `dateStamp`, 、 `version` パート、正 `Integer`, 、ファイル名に追加します。  
  
2.  *クラスのインスタンスを複数*します。 インスタンスの場合、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスが使用されているファイルに書き込みます。  
  
    -   クラスは、別のインスタンスで使用されている場合にファイルを共有、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 同じプロセス内のクラスです。  
  
    -   クラスでは、ファイルが別のプロセスによって使用されている場合は、次の使用可能な名前を使用して、新しいログ ファイルを作成します。  
  
3.  *スレッド セーフ*します。<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスはスレッド セーフであります。 これにより、安全になく、作成するメッセージをログに複数のスレッドからロックを使用することができます。  
  
 **ログ ファイルの場所**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> プロパティは、 <xref:Microsoft.VisualBasic.Logging.LogFileLocation> にログ ファイルを書き込むための一般的なディレクトリのいずれかを指定する列挙体です。  
  
-   別の場所にログを書き込む、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> プロパティをその場所。  
  
 **ログ ファイル名**  
  
-   ログ ファイルのベース名がで指定された、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> プロパティです。  
  
-   現在のログ ファイル名を読み取ることができます、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> プロパティです。 ファイル システムの他のいくつかのプロパティと、ログの現在の状態から派生します。  
  
 **ログのメンテナンス**  
  
-   新しいログ ファイルを作成するための最低限の頻度によって決まります、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> プロパティです。 値が <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> または <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>, 日または週ごとに 1 回以上、新しいログ ファイルを作成、および日付スタンプに組み込まれて、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 名。  
  
-   ログ ファイルの最大サイズ \(単位: バイト\) が基準、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> プロパティです。 ログ ファイルのサイズがこのサイズを超えている場合、ログに書き込まれた追加のメッセージは、破棄された、に応じて、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> プロパティには、例外がスローされます。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> プロパティは、空き容量 \(バイト\) を使用できなければならないを決定します。 これにより、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスがすべての使用可能なディスク容量を使用していません。 使用して、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> ログの動作を指定するプロパティが存在する場合の書き込みより小さい <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> 空きバイト数。  
  
 **ログ ファイルの出力設定**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> かどうか、基になるストリームをフラッシュする自動的に書き込むたびログ ファイルにプロパティを指定します。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> プロパティには、許可された場合、メッセージを現在のログ ファイルに追加するか、新しいログ ファイルに書き込むかどうかを指定します。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> プロパティのログ メッセージ内のフィールドを区切り記号として使用する文字列を指定します。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> プロパティは、新しいログ ファイルを作成するときに使用するエンコーディングを指定します。  
  
 **ログ ファイルの出力**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> と <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> メソッドは、ログ ファイルにメッセージを書き込みます。 これらのメソッドを確認して、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> と共に、新しいログを作成するかどうかを判断する場合は、同じ基本名に既存のログのプロパティです。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> メソッドは、ログ ファイルに出力バッファーに現在あるメッセージをフラッシュします。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> メソッドは、他のプロセスで使用できるように、ログ ファイルを閉じます。  
  
 **出力を有効にします。**  
  
 トレース出力またはデバッグ、トレース リスナーを有効にする必要があります。 次の構文は、コンパイラに固有です。 C\# 以外のコンパイラを使用する場合、または [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], 、コンパイラのドキュメントを参照してください。  
  
-   C\# でのデバッグを有効にする、 `/d:DEBUG` フラグ、コードをコンパイルするか、追加するときに、コンパイラのコマンドラインを `#define DEBUG` 、ファイルの先頭にします。[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], 、追加、 `/d:DEBUG=True` フラグをコンパイラ コマンドライン。  
  
-   C\# でのトレースを有効にする、 `/d:TRACE` フラグを追加したり、コードをコンパイルすると、コンパイラのコマンドライン `#define TRACE` 、ファイルの先頭にします。[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], 、追加、 `/d:TRACE=True` フラグをコンパイラ コマンドライン。  
  
 リスナーのレベルを設定するには、アプリケーションの構成ファイルを編集します。 このファイル内でことができますリスナーを追加、その型を設定し、パラメーターの設定、リスナーの削除またはオフにするアプリケーションで設定したすべてのリスナーです。 構成ファイルは、次の例のようにフォーマットされている必要があります。  
  
 この例を実行するには、完全修飾アセンブリ名を指定する必要があります。 アセンブリの完全修飾名を取得する方法については、次を参照してください。 [Assembly Names](http://msdn.microsoft.com/ja-jp/8f8c2c90-f15d-400e-87e7-a757e4f04d0e)します。  
  
```  
<configuration>  
    <system.diagnostics>  
        <sharedListeners>  
            <add name="FileLog"  
                type="Microsoft.VisualBasic.Logging.FileLogTraceListener,   
                      Microsoft.VisualBasic, Version=8.0.0.0,   
                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   
                      processorArchitecture=MSIL"   
                initializeData="FileLogWriter"/>  
        </sharedListeners>  
    </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> クラスは既定の名前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドのインスタンス名を設定、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> FileLogTraceListener するクラス。  
  
 使って、インスタンス名にアクセスすることができます、 <xref:System.Diagnostics.TraceListener.Name%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see langword="String" />。 インスタンス オブジェクトの名前。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 指定された名前を持つクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドのインスタンス名を設定、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスを `name`します。  
  
 考えるインスタンス名にアクセスすることができます、 <xref:System.Diagnostics.TraceListener.Name%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public bool Append { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Append" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のファイルに出力を追加または新しいファイルに記述するかどうかを判断します。</summary>
        <value>
          <see langword="Boolean" />、で<see langword="True" />、出力が、現在のファイルに追加されることを示すと<see langword="False" />新しいファイルに出力を書き込むことを示すです。 このプロパティは、の既定の設定<see langword="True" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A>プロパティは`False`、新しいファイルに出力が書き込まれます。 このプロパティが`True`、しない限り、現在のファイルに出力が追加されます。  
  
-   出力ファイルは、別のプロセスによってロックされています。 このような状況に組み込まれているバージョン番号を持つ、新しいログ ファイルを作成、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名。  
  
-   現在のファイル サイズがどのようなより大きい、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>プロパティを使用します。 この場合、追加のメッセージは破棄され、に応じて、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>プロパティ、例外がスローされます。  
  
-   既存のファイル名がで指定されたログの作成のスケジュールに従って期限切れ、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>プロパティです。 このような状況で、新しいログ ファイルが作成され、日付スタンプに組み込まれます、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログ ファイルのストリームへの書き込みが、バッファーをフラッシュするかどうかを示します。</summary>
        <value>
          <see langword="Boolean" />、で<see langword="True" />; すべての書き込み後にストリームがフラッシュされることを示すそれ以外の場合、ログ エントリがバッファーされより効率的に書き込まれます。 このプロパティは、の既定の設定<see langword="False" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `False`の設定、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A>プロパティは、ログ ファイルに同時に複数のメッセージを記述する方が効率的になっているため、ほとんどのアプリケーションのパフォーマンスを最高を提供します。 使用することができます、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>ログ ファイルに現在あるメッセージをフラッシュするメソッドのバッファーを出力します。 使用することも、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>メソッドで、暗黙的に、ログ ファイルを閉じる前に、ストリームをフラッシュします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      </Docs>
    </Member>
    <Member MemberName="BaseFileName">
      <MemberSignature Language="C#" Value="public string BaseFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはログ ファイルの完全名の作成に使用されるログ ファイルのベース名を設定します。</summary>
        <value>
          <see langword="String" />。 ログ ファイルの基本名です。 既定では、アプリケーションの製品名です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>プロパティをログ ファイルのベース名を決定、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>クラスに書き込みます。  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>プロパティの現在のログ ファイルの完全名を示します。 ログの異なるバージョンを区別するためにログのパス、基本名、日付、および数値に基づいて生成されます。 新しいログ ファイルは、必要に応じてごとに作成されます。  
  
 完全なログ ファイル名の明示的な形式は`path`\\`baseName`\[\-`dateStamp`\] \[\-`iteration`\] .log、場所  
  
-   `path`部分はによって決定されます、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>プロパティと、そのプロパティの値に設定されている場合<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>プロパティです。  
  
-   `baseName`要素は、基本的なログ名で指定された、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>プロパティです。  
  
-   `dateStamp`ときに表示され、一部が、形式"YYYY MM DD"、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>に設定されている<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>または<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>です。  
  
-   同じ 1 つ以上のログ ファイルが必要な場合`baseName`と`dateStamp`、`iteration`部品、正の値`Integer`ファイル名に追加されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のログ ファイルの基になるストリームを閉じ、現在のストリームに関連付けられているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す必要はありません、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>メソッドに明示的に、ため、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>クラスは、基になるストリームを管理します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomLocation">
      <MemberSignature Language="C#" Value="public string CustomLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomLocation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはログ ファイルのディレクトリを設定するときに、<see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />プロパティに設定されている<see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />です。</summary>
        <value>
          <see langword="String" />、これは、ログ ファイル ディレクトリの名前。 このプロパティの既定の設定は、アプリケーション データ用のユーザーのディレクトリです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>プロパティが設定されており、また、設定、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>プロパティを<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>です。  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>プロパティ ディレクトリは解決できない場合、例外がスローされます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはログ メッセージのフィールドを区切るために使用する区切り記号を設定します。</summary>
        <value>
          <see langword="String" />, 、これは、ログ メッセージのフィールドの区切り記号。 このプロパティの既定の設定は、タブ文字です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> プロパティでは、既定の区切り記号を変更することができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiskSpaceExhaustedBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログ ファイルに書き込むときの対処方法を決定し、小さいディスクの空き領域が利用可能なで指定されて、 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> プロパティです。</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />。 ファイルし、小さいディスクの空き領域が利用可能なで指定されてログに書き込もうとしている場合の対処方法を決定、 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> プロパティには、ログ ファイルのサイズがどのようなより大きい場合や、 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" /> プロパティを使用します。 既定値は <see cref="F:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> にプロパティが設定されている <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>, 、十分な予約済みのディスク領域がない場合、サイレント モードでログ メッセージは破棄されます。 これは、既定の動作であり、単純なアプリケーションは失敗の場合は、ディスクが十分な空き領域を取得できなくなります。  
  
 堅牢なアプリケーションを設定できます、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> プロパティを <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>, 、追加 `Try...Catch` ログに書き込まれるすべてのコード ブロックです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="True" /> マネージ コードとアンマネージの両方のリソースを解放します。 <see langword="False" /> アンマネージ リソースだけを解放します。</param>
        <summary>基になるストリームを閉じ、マネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `disposing` パラメーターが `True` の場合、このメソッドは、この <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。 このメソッドは、参照される各オブジェクトの `Dispose` メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.  
  
 This method calls the <see langword="Dispose" /> method of the base class, <see langword="Dispose" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または、新しいログ ファイルを作成するときに使用するエンコーディングを設定します。</summary>
        <value>
          <see cref="T:System.Text.Encoding" />, 、、新しいログ ファイル作成するときに使用するエンコーディングです。 このプロパティの既定値は <see cref="T:System.Text.UTF8Encoding" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定したエンコーディングではなくそのファイルのエンコーディングを使用する既存のログ ファイルにテキストを追加するときに、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.Text.UTF8Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のログ ファイルに書き込む基になるストリームをフラッシュします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> バッファリングされているすべてのデータを現在のログ ファイルに書き込みます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullLogFileName">
      <MemberSignature Language="C#" Value="public string FullLogFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullLogFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のログ ファイルの完全名を取得します。</summary>
        <value>
          <see langword="String" />, 、これは現在のログ ファイルの完全名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> プロパティは現在のログ ファイルの完全名を提供します。 ログのパス、基本名、日付、および、ログのさまざまなバージョンを区別するために、数に従って生成されます。 必要な場合に、新しいログ ファイルが作成されます。  
  
 明示的な形式のログ ファイルの完全名は `path`\\`baseName`\[\-`dateStamp`\] \[\-`iteration`\] .log、場所。  
  
-   `path` 部分はによって決定されます、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> プロパティと、そのプロパティ値に設定されている <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, 、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> プロパティです。  
  
-   `baseName` の部分がで指定された、基本的なログの名前、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> プロパティです。  
  
-   `dateStamp` ときに表示され、一部が形式の YYYY\-MM\-DD、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> は <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> または <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>です。  
  
-   は、同じ 2 つ以上のログ ファイルが必要な場合は `baseName` と `dateStamp`, 、 `iteration` パート、正 `Integer`, 、ファイル名に追加します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>トレース リスナーによってサポートされるカスタムの XML 構成属性を取得します。</summary>
        <returns>
          <see langword="String" /> このリスナーで認識可能 XML 構成属性を含む配列です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 カスタムの属性を <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> のインスタンスの動作を制御するための XML 構成ファイルで使用できる、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> クラスです。 その他の属性を使用して、構成例外が発生します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IncludeHostName">
      <MemberSignature Language="C#" Value="public bool IncludeHostName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>出力のログ記録のマシンのホスト名を含める必要があるかどうかを示します。</summary>
        <value>
          <see langword="Boolean" />。 使用して <see langword="True" /> ホストの識別子が含まれる場合はそれ以外の場合使用 <see langword="False" />します。 既定値は <see langword="False" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 動作を構成するプロパティを使用して、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> と <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileLocation Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはログ ファイルの場所を設定します。</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />, 、ログ ファイルの場所です。 既定値は <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> によって決定される定義済みのパスのいずれかにログのパスを設定するプロパティ、 <xref:Microsoft.VisualBasic.Logging.LogFileLocation> 列挙値。  
  
|**場所の値**|**パス**|  
|--------------|------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|形式でのすべてのユーザーが共有するアプリケーション データのパス:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> 一般的な値 `BasePath` は。<br /><br /> C:\\Documents と \\all users \\application Data<br /><br /> 値 `CompanyName`, 、`ProductName`, 、および `ProductVersion` アセンブリから取得します。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|アプリケーションを開始した実行可能ファイルのパス。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|形式を持つ、ユーザーのアプリケーション データのパス。<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> 一般的な値 `BasePath` は。<br /><br /> C:\\Documents and Settings\\`username`\\Application Data<br /><br /> 値 `CompanyName`, 、`ProductName`, 、および `ProductVersion` は、アセンブリを形成します。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|現在のシステムの一時フォルダーのパス。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|文字列を指定して場合 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> いないを空にし、パスとして使用。 それ以外の場合、ユーザーのアプリケーション データのパスを使用します。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />
      </Docs>
    </Member>
    <Member MemberName="LogFileCreationSchedule">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログ ファイルの名前に含める日付を決定します。</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />。 これは、ログ ファイル名に追加する日付を示します。 既定値は <see cref="F:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 いずれかを割り当て、 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> 列挙型の値を <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> プロパティをログ ファイルの名前に追加する日付を指定します。  
  
 日付の形式は YYYY\-MM\-DD ログ ファイル名の形式の詳細については、次を参照してください。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>します。  
  
|**LogFileCreationSchedule 値**|**ログ ファイルの名前を日付します。**|  
|-----------------------------------|---------------------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|ログ ファイルの名前で、現在の日付が含まれます。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|ログ ファイル名には、日付は含まれません。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|ログ ファイル名には、現在の週の最初の日を含めます。<br /><br /> 週の開始日は土曜日です。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="MaxFileSize">
      <MemberSignature Language="C#" Value="public long MaxFileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxFileSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはログ ファイルの最大許容サイズをバイト単位で設定します。</summary>
        <value>
          <see langword="Long" />。 これは、最大で許可されているログ ファイル サイズ \(バイト\) です。 既定値は、5000000 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、あるログ ファイルは大きくなりすぎないかどうかを確認します。  
  
 ログ ファイル サイズ \(バイト単位\) が大きい場合、このプロパティの値よりも、ときに、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> の値に応じて、メッセージは破棄され、エラーは、サイレントまたは例外をログにメッセージを作成しようとクラスがスローされます、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> プロパティです。 それ以外の場合、メッセージを記述、ログに空きディスク領域 \(バイト単位\) の量がある場合より小さい <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">このプロパティ設定されている場合、値に 1,000 より小さい。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="ReserveDiskSpace">
      <MemberSignature Language="C#" Value="public long ReserveDiskSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReserveDiskSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、空きディスク領域の量 \(バイト単位\) に必要なメッセージをログ ファイルに書き込む前にします。</summary>
        <value>
          <see langword="Long" />。 これは、必要な空きディスク領域の量です。 既定値は 10000000 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、あるログ ファイルが完全にいっぱいになるディスクかどうかを確認します。  
  
 ディスクの空き領域をバイト単位でが、このプロパティの値より小さい、ときに、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> の値に応じて、メッセージは破棄され、エラーは、サイレントまたは例外をログにメッセージを作成しようとクラスがスローされます、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> プロパティです。 それ以外の場合、メッセージを記述、ログに、ログ ファイル サイズ \(バイト単位\) がより大きい場合 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">このプロパティを 0 より小さい値に設定するとします。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>トレース出力ファイルにデータを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> メソッドは、アプリケーション コードから呼び出すものではありません。 メンバーによってこれらのメソッドが呼び出されます、 <xref:System.Diagnostics.Debug>, 、<xref:System.Diagnostics.Trace>, 、および <xref:System.Diagnostics.TraceSource> を出力するトレース データを書き込みます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" /> オブジェクト。</param>
        <param name="source">このメソッドを呼び出したトレース ソースの名前です。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 列挙値のいずれか。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="data">出力するトレース データ。</param>
        <summary>トレース情報、データ オブジェクト、およびイベント情報を出力ファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この方法では:  
  
1.  出力のデータとコンテキスト情報を書式設定します。  
  
2.  必要な場合は、新しいログ ファイルを作成します。  
  
3.  ログ ファイルに情報を書き込みます。  
  
 ログ ファイルの新規作成の詳細については、次を参照してください。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>します。  
  
 次の表では、出力フィールドを出現順に一覧表示します。 フィールドは、文字列で区切られますが、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> プロパティを指定すると、および行終端記号が続きます。  
  
|**フィールド**|**出力条件**|**説明**|  
|---------------|--------------|------------|  
|`source`|Always|`name` の値。|  
|`severity`|Always|列挙値の名前 `eventType`します。|  
|`id`|Always|`id` の文字列形式。|  
|`message`|Always|`data` の文字列形式。|  
|`callStack`|ときに、 <xref:System.Diagnostics.TraceOptions.Callstack> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> の `eventCache`です。|  
|`CorrelationID`|ときに、 <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> の `eventCache`です。|  
|`DateTime`|ときに、 <xref:System.Diagnostics.TraceOptions.DateTime> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|文字列表現、 <xref:System.Diagnostics.TraceEventCache.DateTime%2A> の `eventCache`です。 インバリアント カルチャは、文字列の変換に使用されます。|  
|`ProcessID`|ときに、 <xref:System.Diagnostics.TraceOptions.ProcessId> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|文字列表現、 <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> の `eventCache`です。 インバリアント カルチャは、文字列の変換に使用されます。|  
|`ThreadID`|ときに、 <xref:System.Diagnostics.TraceOptions.ThreadId> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> の `eventCache`です。|  
|`Timestamp`|ときに、 <xref:System.Diagnostics.TraceOptions.Timestamp> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|文字列表現、 <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> の `eventCache`です。 インバリアント カルチャは、文字列の変換に使用されます。|  
|`HostName`|ときに、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> プロパティは `True`です。|コンピューターの名前。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" /> オブジェクト。</param>
        <param name="source">このメソッドを呼び出したトレース ソースの名前。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 列挙値のいずれか。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="data">データとして出力するオブジェクトの配列。</param>
        <summary>トレース情報、さまざまなデータ オブジェクト、およびイベント情報を出力ファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この方法では:  
  
1.  出力ではデータとコンテキスト情報を書式設定します。  
  
2.  必要に応じて、新しいログ ファイルを作成します。  
  
3.  ログ ファイルに情報を書き込みます。  
  
 ログ ファイルの新規作成の詳細については、次を参照してください。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>します。  
  
 次の表では、出力フィールドを出現順に一覧表示します。 フィールドは、文字列で区切られますが、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> プロパティを指定すると、および行終端記号が続きます。  
  
|**フィールド**|**出力条件**|**説明**|  
|---------------|--------------|------------|  
|`source`|Always|`name` の値。|  
|`severity`|Always|列挙値の名前 `eventType`します。|  
|`id`|Always|`id` の文字列形式。|  
|`message`|Always|内の各要素の文字列形式から成る文字列 `data`, それぞれ区切って <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>します。|  
|`callStack`|ときに、 <xref:System.Diagnostics.TraceOptions.Callstack> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> の `eventCache`です。|  
|`CorrelationID`|ときに、 <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> の `eventCache`です。|  
|`DateTime`|ときに、 <xref:System.Diagnostics.TraceOptions.DateTime> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|文字列表現、 <xref:System.Diagnostics.TraceEventCache.DateTime%2A> の `eventCache`です。 インバリアント カルチャは、文字列の変換に使用されます。|  
|`ProcessID`|ときに、 <xref:System.Diagnostics.TraceOptions.ProcessId> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|文字列表現、 <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> の `eventCache`です。 インバリアント カルチャは、文字列の変換に使用されます。|  
|`ThreadID`|ときに、 <xref:System.Diagnostics.TraceOptions.ThreadId> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> の `eventCache`です。|  
|`Timestamp`|ときに、 <xref:System.Diagnostics.TraceOptions.Timestamp> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|文字列表現、 <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> の `eventCache`です。 インバリアント カルチャは、文字列の変換に使用されます。|  
|`HostName`|ときに、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> プロパティは `True`です。|コンピューターの名前。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>出力ファイルまたはストリームに書き込みトレースおよびイベント情報です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> メソッドは、アプリケーション コードから呼び出すものではありません。 メンバーによってこれらのメソッドが呼び出されます、 <xref:System.Diagnostics.Debug>, 、<xref:System.Diagnostics.Trace>, 、および <xref:System.Diagnostics.TraceSource> を出力するトレース データを書き込みます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" /> オブジェクト。</param>
        <param name="source">このメソッドを呼び出したトレース ソースの名前です。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 列挙値のいずれか。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="message">書き込むメッセージ。</param>
        <summary>トレース情報、メッセージ、およびイベント情報を出力ファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この方法では:  
  
1.  出力のデータとコンテキスト情報を書式設定します。  
  
2.  必要な場合は、新しいログ ファイルを作成します。  
  
3.  ログ ファイルに情報を書き込みます。  
  
 ログ ファイルの新規作成の詳細については、次を参照してください。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>します。  
  
 次の表は、表示される順序で出力フィールドを一覧表示します。 フィールドは、文字列で区切られますが、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> プロパティを指定すると、および行終端記号が続きます。  
  
|**フィールド**|**出力条件**|**説明**|  
|---------------|--------------|------------|  
|`source`|常に。|`name` の値。|  
|`severity`|常に。|列挙値の名前 `eventType`します。|  
|`id`|常に。|`id` の文字列形式。|  
|`message`|常に。|`message` の値。|  
|`callStack`|ときに、 <xref:System.Diagnostics.TraceOptions.Callstack> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> の `eventCache`です。|  
|`CorrelationID`|ときに、 <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> の `eventCache`です。|  
|`DateTime`|ときに、 <xref:System.Diagnostics.TraceOptions.DateTime> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|文字列表現、 <xref:System.Diagnostics.TraceEventCache.DateTime%2A> の `eventCache`です。 インバリアント カルチャは、文字列の変換に使用されます。|  
|`ProcessID`|ときに、 <xref:System.Diagnostics.TraceOptions.ProcessId> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|文字列表現、 <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> の `eventCache`です。 インバリアント カルチャは、文字列の変換に使用されます。|  
|`ThreadID`|ときに、 <xref:System.Diagnostics.TraceOptions.ThreadId> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> の `eventCache`です。|  
|`Timestamp`|ときに、 <xref:System.Diagnostics.TraceOptions.Timestamp> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|文字列表現、 <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> の `eventCache`です。 インバリアント カルチャは、文字列の変換に使用されます。|  
|`HostName`|ときに、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> プロパティは `True`です。|コンピューターの名前。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" /> オブジェクト。</param>
        <param name="source">このメソッドを呼び出したトレース ソースの名前です。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 列挙値のいずれか。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="format">0 個以上の書式項目を格納している書式指定文字列。<c>args</c> 配列内のオブジェクトに対応します。</param>
        <param name="args">0 個以上の書式設定対象オブジェクトを含んだ <see langword="Object" /> 配列。</param>
        <summary>トレース情報、書式付き配列、オブジェクト、およびイベント情報を出力ファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この方法では:  
  
1.  出力のデータとコンテキスト情報を書式設定します。  
  
2.  新たに作成、新しいログ ファイルでは、必要な場合です。  
  
3.  ログ ファイルに情報を書き込みます。  
  
 新しいログ ファイルの作成の詳細については、次を参照してください。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>します。  
  
 次の表は、表示される順序で出力フィールドを一覧表示します。 フィールドは、文字列で区切られますが、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> プロパティを指定すると、し、続けて行終端記号です。  
  
|**フィールド**|**出力条件**|**説明**|  
|---------------|--------------|------------|  
|`source`|Always|`name` の値。|  
|`severity`|Always|列挙値の名前 `eventType`します。|  
|`id`|Always|`id` の文字列形式。|  
|`message`|Always|内のデータ `args` 付きで書式設定、 `format` 文字列および文字列変換にインバリアント カルチャを使用します。|  
|`callStack`|ときに、 <xref:System.Diagnostics.TraceOptions.Callstack> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|<xref:System.Diagnostics.TraceEventCache.Callstack%2A> の `eventCache`です。|  
|`CorrelationID`|ときに、 <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> の `eventCache`です。|  
|`DateTime`|ときに、 <xref:System.Diagnostics.TraceOptions.DateTime> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|文字列表現、 <xref:System.Diagnostics.TraceEventCache.DateTime%2A> の `eventCache`です。 インバリアント カルチャは、文字列の変換に使用されます。|  
|`ProcessID`|ときに、 <xref:System.Diagnostics.TraceOptions.ProcessId> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|文字列表現、 <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> の `eventCache`です。 インバリアント カルチャは、文字列の変換に使用されます。|  
|`ThreadID`|ときに、 <xref:System.Diagnostics.TraceOptions.ThreadId> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|<xref:System.Diagnostics.TraceEventCache.ThreadId%2A> の `eventCache`です。|  
|`Timestamp`|ときに、 <xref:System.Diagnostics.TraceOptions.Timestamp> フラグが設定されて、 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> プロパティです。|文字列表現、 <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> の `eventCache`です。 インバリアント カルチャは、文字列の変換に使用されます。|  
|`HostName`|ときに、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> プロパティは `True`です。|コンピューターの名前。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <see langword="String" />。 書き込むカスタム メッセージ。</param>
        <summary>逐語的メッセージを追加のコンテキスト情報なしのディスクに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A> メソッドは、追加のコンテキスト情報がないまま、ログ ファイルを特定のメッセージを書き込みます。  
  
 いずれかを使用して、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> にコンテキスト情報をログ出力に含める方法です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <see langword="String" />。 書き込むカスタム メッセージ。</param>
        <summary>逐語的メッセージを追加のコンテキスト情報がない場合、現在の行終端記号をディスクに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A> メソッドは、追加のコンテキスト情報がないまま、ログ ファイルを特定のメッセージを書き込みます。  
  
 いずれかを使用して、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> にコンテキスト情報をログ出力に含める方法です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しいインスタンスを初期化、 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> クラスし、名前を設定します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>