<Type Name="Log" FullName="Microsoft.VisualBasic.Logging.Log">
  <TypeSignature Language="C#" Value="public class Log" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Log extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.Log" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>プロパティとイベントと例外情報をアプリケーションのログ リスナーに書き込むためのメソッドを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 `My.Application.Log` オブジェクトにアクセスするための簡単なエントリ ポイントを提供する、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]サービスのログ記録します。`WriteEntry` と `WriteException` メソッドは、アプリケーションのログ リスナーにメッセージを書き込みます。 リスナーは、アプリケーションの構成ファイルによって構成できます。 詳細については、[Walkthrough: Changing Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/ecc74f95-743c-450d-93f6-09a30db0fe4a) および [Working with Application Logs in Visual Basic](http://msdn.microsoft.com/ja-jp/2581afd1-5791-4bc4-86b2-46244e9fe468) を参照してください。  
  
 `My.Application.Log` オブジェクトはクライアント アプリケーションでのみ使用できます。 Web アプリケーションを使用して `My.Log`します。 詳細については、「<xref:Microsoft.VisualBasic.Logging.AspLog>」を参照してください。  
  
 次の表に、関連するタスクの例については、 `My.Application.Log` オブジェクトです。  
  
|目的|参照トピック|  
|--------|------------|  
|イベント情報をアプリケーションのログ リスナーに書き込む|[How to: Write Log Messages](http://msdn.microsoft.com/ja-jp/972a3e0c-2996-4623-a7a9-d7ebc4d207f8)|  
|例外情報をアプリケーションのログ リスナーに書き込む|[How to: Log Exceptions in Visual Basic](http://msdn.microsoft.com/ja-jp/a26c60e2-ae39-444a-aebb-33eccadc0eeb)|  
|場所を決定する `My.Application.Log` 情報を書き込みます|[Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)|  
  
   
  
## 例  
 この例では、`My.Application.Log.WriteEntry` メソッドを使用してトレース情報をログに記録する方法を示します。 詳細については、「[How to: Write Log Messages](http://msdn.microsoft.com/ja-jp/972a3e0c-2996-4623-a7a9-d7ebc4d207f8)」を参照してください。  
  
 [!code-vb[VbVbalrMyApplicationLog\#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:Microsoft.VisualBasic.Logging.Log" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see cref="T:System.String" />。 付ける名前、 <see cref="P:Microsoft.VisualBasic.Logging.Log.TraceSource" /> プロパティ オブジェクト。</param>
        <summary>
          <see cref="T:Microsoft.VisualBasic.Logging.Log" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultFileLogWriter">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.FileLogTraceListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイルを取得、 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> の基盤となるオブジェクト、 <see langword="Log" /> オブジェクトです。</summary>
        <value>返します。、 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> の基盤となるオブジェクト、 <see langword="Log" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用するには現在の構成を決定する、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> オブジェクトです。  
  
 クライアント アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Application.Log` オブジェクトです。 Web アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Log` オブジェクトです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="InitializeWithDefaultsSinceNoConfigExists">
      <MemberSignature Language="C#" Value="protected virtual void InitializeWithDefaultsSinceNoConfigExists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblynewslot virtual instance void InitializeWithDefaultsSinceNoConfigExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新たに作成 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> オブジェクトおよびに追加、 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> コレクションです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが、新たに作成 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, 、その名前を設定 `FileLog`, 、重要度レベルのメッセージを記録するように構成および <xref:System.Diagnostics.SourceLevels.Information> およびそれ以降。 新しい <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> オブジェクトに追加し、 <xref:System.Diagnostics.TraceSource.Listeners%2A> コレクションです。  
  
 <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> メソッドを呼び出し、 <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> プロパティが構成されていません。 トレース ソースは、アプリケーションの構成ファイルで構成できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="TraceSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceSource TraceSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceSource TraceSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Diagnostics.TraceSource" /> の基盤となるオブジェクト、 <see langword="Log" /> オブジェクトです。</summary>
        <value>返します。、 <see cref="T:System.Diagnostics.TraceSource" /> の基盤となるオブジェクト、 <see langword="Log" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用するには現在の構成を決定する、 `Log` オブジェクトです。  
  
 クライアント アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Application.Log` オブジェクトです。 Web アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Log` オブジェクトです。  
  
 これは、高度なメンバーの場合です。選択しないと、IntelliSense に表示されない、 **すべて** \] タブをクリックします。  
  
 次の表に、関連するタスクの例、 `TraceSource` プロパティです。  
  
|目的|参照トピック|  
|--------|------------|  
|各情報の取得、 `Log` オブジェクトのログのリスナーです。|[Troubleshooting: Log Listeners](http://msdn.microsoft.com/ja-jp/ac6eb760-3d5d-461e-aedd-40599ee22e49)|  
  
## プロジェクトの種類別の可用性  
  
|プロジェクトの種類|使用可能|  
|---------------|----------|  
|Windows アプリケーション|**はい**|  
|クラス ライブラリ|**はい**|  
|コンソール アプリケーション|**はい**|  
|Windows コントロール ライブラリ|**はい**|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|**はい**|  
|Web サイト|**はい**|  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSource" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">必須です。 記録するメッセージ。 場合 <c>message</c> は <see langword="Nothing" />, 、空の文字列を使用します。</param>
        <summary>アプリケーションのログ リスナーにメッセージを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `WriteEntry` メソッドは、アプリケーションのイベント ログのリスナーにメッセージを書き込みます。  
  
 クライアント アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Application.Log` オブジェクトです。 Web アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Log` オブジェクトです。  
  
 リスナーが受信先のログについて、 `WriteEntry` メソッドのメッセージを参照してください [Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)します。 既定のログ リスナーを変更することができます。 詳細については、「[Working with Application Logs in Visual Basic](http://msdn.microsoft.com/ja-jp/2581afd1-5791-4bc4-86b2-46244e9fe468)」を参照してください。  
  
 いずれのオーバー ロードがない、 `id` 引数、 `id` に書き込まれるログが次の表で定義されています。  
  
|`severity`|既定値 `id`|  
|----------------|--------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|9|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 次の表に、関連するタスクの例については、 `WriteEntry` メソッドです。  
  
|目的|参照トピック|  
|--------|------------|  
|イベント情報をアプリケーションのログ リスナーに書き込む|[How to: Write Log Messages](http://msdn.microsoft.com/ja-jp/972a3e0c-2996-4623-a7a9-d7ebc4d207f8)|  
|場所を決定する `Log` 情報を書き込みます|[Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)|  
  
## プロジェクトの種類別の可用性  
  
|プロジェクトの種類|使用可能|  
|---------------|----------|  
|Windows アプリケーション|**はい**|  
|クラス ライブラリ|**はい**|  
|コンソール アプリケーション|**はい**|  
|Windows コントロール ライブラリ|**はい**|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|**はい**|  
|Web サイト|**はい**|  
  
   
  
## 例  
 この例では、`My.Application.Log.WriteEntry` メソッドを使用してトレース情報をログに記録する方法を示します。 詳細については、「[How to: Write Log Messages](http://msdn.microsoft.com/ja-jp/972a3e0c-2996-4623-a7a9-d7ebc4d207f8)」を参照してください。  
  
 [!code-vb[VbVbalrMyApplicationLog\#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 このコード例は、クライアント アプリケーション内でのみ実行できます。 変更 `My.Application.Log.WriteEntry` に `My.Log.WriteEntry` Web アプリケーションにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">部分信頼コードでは、メソッドを呼び出しますが、完全な信頼を必要とするイベント ログ リスナーに書き込みます。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
      </Parameters>
      <Docs>
        <param name="message">必須です。 記録するメッセージ。 場合 <c>message</c> は <see langword="Nothing" />, 、空の文字列を使用します。</param>
        <param name="severity">メッセージの種類。 既定では、 <see langword="TraceEventType.Information" />です。</param>
        <summary>アプリケーションのログ リスナーにメッセージを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `WriteEntry` メソッドは、アプリケーションのイベント ログのリスナーにメッセージを書き込みます。  
  
 クライアント アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Application.Log` オブジェクトです。 Web アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Log` オブジェクトです。  
  
 リスナーが受信先のログについて、 `WriteEntry` メソッドのメッセージを参照してください [Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)します。 既定のログ リスナーを変更することができます。 詳細については、「[Working with Application Logs in Visual Basic](http://msdn.microsoft.com/ja-jp/2581afd1-5791-4bc4-86b2-46244e9fe468)」を参照してください。  
  
 いずれのオーバー ロードがない、 `id` 引数、 `id` に書き込まれるログが次の表で定義されています。  
  
|`severity`|既定値 `id`|  
|----------------|--------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|9|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 次の表に、関連するタスクの例については、 `WriteEntry` メソッドです。  
  
|目的|参照トピック|  
|--------|------------|  
|イベント情報をアプリケーションのログ リスナーに書き込む|[How to: Write Log Messages](http://msdn.microsoft.com/ja-jp/972a3e0c-2996-4623-a7a9-d7ebc4d207f8)|  
|場所を決定する `Log` 情報を書き込みます|[Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)|  
  
## プロジェクトの種類別の可用性  
  
|プロジェクトの種類|使用可能|  
|---------------|----------|  
|Windows アプリケーション|**はい**|  
|クラス ライブラリ|**はい**|  
|コンソール アプリケーション|**はい**|  
|Windows コントロール ライブラリ|**はい**|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|**はい**|  
|Web サイト|**はい**|  
  
   
  
## 例  
 この例では、`My.Application.Log.WriteEntry` メソッドを使用してトレース情報をログに記録する方法を示します。 詳細については、「[How to: Write Log Messages](http://msdn.microsoft.com/ja-jp/972a3e0c-2996-4623-a7a9-d7ebc4d207f8)」を参照してください。  
  
 [!code-vb[VbVbalrMyApplicationLog\#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 このコード例は、クライアント アプリケーション内でのみ実行できます。 変更 `My.Application.Log.WriteEntry` に `My.Log.WriteEntry` Web アプリケーションにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">メッセージの種類が 1 つの <see cref="T:System.Diagnostics.TraceEventType" /> 列挙値。</exception>
        <exception cref="T:System.Security.SecurityException">部分信頼コードでは、メソッドを呼び出しますが、完全な信頼を必要とするイベント ログ リスナーに書き込みます。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">必須です。 記録するメッセージ。 場合 <c>message</c> は <see langword="Nothing" />, 、空の文字列を使用します。</param>
        <param name="severity">メッセージの種類。 既定では、 <see langword="TraceEventType.Information" />です。</param>
        <param name="id">関連付けに使用される通常のメッセージ id。 既定に関連する <c>entryType</c> 、表で説明します。</param>
        <summary>アプリケーションのログ リスナーにメッセージを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `WriteEntry` メソッドは、アプリケーションのイベント ログのリスナーにメッセージを書き込みます。  
  
 クライアント アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Application.Log` オブジェクトです。 Web アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Log` オブジェクトです。  
  
 リスナーが受信先のログについて、 `WriteEntry` メソッドのメッセージを参照してください [Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)します。 既定のログ リスナーを変更することができます。 詳細については、「[Working with Application Logs in Visual Basic](http://msdn.microsoft.com/ja-jp/2581afd1-5791-4bc4-86b2-46244e9fe468)」を参照してください。  
  
 いずれのオーバー ロードがない、 `id` 引数、 `id` に書き込まれるログが次の表で定義されています。  
  
|`severity`|既定値 `id`|  
|----------------|--------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|9|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 次の表に、関連するタスクの例については、 `WriteEntry` メソッドです。  
  
|目的|参照トピック|  
|--------|------------|  
|イベント情報をアプリケーションのログ リスナーに書き込む|[How to: Write Log Messages](http://msdn.microsoft.com/ja-jp/972a3e0c-2996-4623-a7a9-d7ebc4d207f8)|  
|場所を決定する `Log` 情報を書き込みます|[Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)|  
  
## プロジェクトの種類別の可用性  
  
|プロジェクトの種類|使用可能|  
|---------------|----------|  
|Windows アプリケーション|**はい**|  
|クラス ライブラリ|**はい**|  
|コンソール アプリケーション|**はい**|  
|Windows コントロール ライブラリ|**はい**|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|**はい**|  
|Web サイト|**はい**|  
  
   
  
## 例  
 この例では、`My.Application.Log.WriteEntry` メソッドを使用してトレース情報をログに記録する方法を示します。 詳細については、「[How to: Write Log Messages](http://msdn.microsoft.com/ja-jp/972a3e0c-2996-4623-a7a9-d7ebc4d207f8)」を参照してください。  
  
 [!code-vb[VbVbalrMyApplicationLog\#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 このコード例は、クライアント アプリケーション内でのみ実行できます。 変更 `My.Application.Log.WriteEntry` に `My.Log.WriteEntry` Web アプリケーションにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">メッセージの種類が 1 つの <see cref="T:System.Diagnostics.TraceEventType" /> 列挙値。</exception>
        <exception cref="T:System.Security.SecurityException">部分信頼コードでは、メソッドを呼び出しますが、完全な信頼を必要とするイベント ログ リスナーに書き込みます。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">必須です。 ログに記録する例外。</param>
        <summary>例外情報をアプリケーションのログ リスナーに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `WriteException` メソッドは、アプリケーションのイベント ログ リスナーの例外に含まれる情報を書き込みます。  
  
 クライアント アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Application.Log` オブジェクトです。 Web アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Log` オブジェクトです。  
  
 リスナーが受信先のログについて、 `WriteException` メソッドのメッセージを参照してください [Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)します。 既定のログ リスナーを変更することができます。 詳細については、「[Working with Application Logs in Visual Basic](http://msdn.microsoft.com/ja-jp/2581afd1-5791-4bc4-86b2-46244e9fe468)」を参照してください。  
  
 いずれのオーバー ロードがない、 `id` 引数、ログに書き込まれる id が次の表で定義されています。  
  
|`severity`|既定値 `id`|  
|----------------|--------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|9|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 次の表に、関連するタスクの例については、 `WriteException` メソッドです。  
  
|目的|参照トピック|  
|--------|------------|  
|例外情報をアプリケーションのイベント ログのリスナーに書き込みます。|[How to: Log Exceptions in Visual Basic](http://msdn.microsoft.com/ja-jp/a26c60e2-ae39-444a-aebb-33eccadc0eeb)|  
|場所を決定する `Log` 情報を書き込みます。|[Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)|  
  
## プロジェクトの種類別の可用性  
  
|プロジェクトの種類|使用可能|  
|---------------|----------|  
|Windows アプリケーション|**はい**|  
|クラス ライブラリ|**はい**|  
|コンソール アプリケーション|**はい**|  
|Windows コントロール ライブラリ|**はい**|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|**はい**|  
|Web サイト|**はい**|  
  
   
  
## 例  
 この例では、使用、 `My.Application.Log.WriteException` 例外ログに記録します。 コメントを解除、 `Dim` と `MsgBox` が発生する行、 <xref:System.NullReferenceException> 例外です。 詳細については、「[How to: Log Exceptions in Visual Basic](http://msdn.microsoft.com/ja-jp/a26c60e2-ae39-444a-aebb-33eccadc0eeb)」を参照してください。  
  
 [!code-vb[VbVbalrMyApplicationLog\#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 このコード例は、クライアント アプリケーション内でのみ実行できます。 変更 `My.Application.Log.WriteException` に `My.Log.WriteException` Web アプリケーションにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">部分信頼コードでは、メソッドを呼び出しますが、完全な信頼を必要とするイベント ログ リスナーに書き込みます。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">必須です。 ログに記録する例外。</param>
        <param name="severity">メッセージの種類。 既定では、 <see cref="F:System.Diagnostics.TraceEventType.Error" />です。</param>
        <param name="additionalInfo">メッセージに追加する文字列。 既定では、これは、空の文字列です。</param>
        <summary>例外情報をアプリケーションのログ リスナーに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `WriteException` メソッドは、アプリケーションのイベント ログ リスナーの例外に含まれる情報を書き込みます。  
  
 クライアント アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Application.Log` オブジェクトです。 Web アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Log` オブジェクトです。  
  
 リスナーが受信先のログについて、 `WriteException` メソッドのメッセージを参照してください [Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)します。 既定のログ リスナーを変更することができます。 詳細については、「[Working with Application Logs in Visual Basic](http://msdn.microsoft.com/ja-jp/2581afd1-5791-4bc4-86b2-46244e9fe468)」を参照してください。  
  
 いずれのオーバー ロードがない、 `id` 引数、ログに書き込まれる id が次の表で定義されています。  
  
|`severity`|既定値 `id`|  
|----------------|--------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|9|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 次の表に、関連するタスクの例については、 `WriteException` メソッドです。  
  
|目的|参照トピック|  
|--------|------------|  
|例外情報をアプリケーションのイベント ログのリスナーに書き込みます。|[How to: Log Exceptions in Visual Basic](http://msdn.microsoft.com/ja-jp/a26c60e2-ae39-444a-aebb-33eccadc0eeb)|  
|場所を決定する `Log` 情報を書き込みます。|[Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)|  
  
## プロジェクトの種類別の可用性  
  
|プロジェクトの種類|使用可能|  
|---------------|----------|  
|Windows アプリケーション|**はい**|  
|クラス ライブラリ|**はい**|  
|コンソール アプリケーション|**はい**|  
|Windows コントロール ライブラリ|**はい**|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|**はい**|  
|Web サイト|**はい**|  
  
   
  
## 例  
 この例では、使用、 `My.Application.Log.WriteException` 例外ログに記録します。 コメントを解除、 `Dim` と `MsgBox` が発生する行、 <xref:System.NullReferenceException> 例外です。 詳細については、「[How to: Log Exceptions in Visual Basic](http://msdn.microsoft.com/ja-jp/a26c60e2-ae39-444a-aebb-33eccadc0eeb)」を参照してください。  
  
 [!code-vb[VbVbalrMyApplicationLog\#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 このコード例は、クライアント アプリケーション内でのみ実行できます。 変更 `My.Application.Log.WriteException` に `My.Log.WriteException` Web アプリケーションにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">メッセージの種類が 1 つの <see cref="T:System.Diagnostics.TraceEventType" /> 列挙値。</exception>
        <exception cref="T:System.Security.SecurityException">部分信頼コードでは、メソッドを呼び出しますが、完全な信頼を必要とするイベント ログ リスナーに書き込みます。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ex">必須です。 ログに記録する例外。</param>
        <param name="severity">メッセージの種類。 既定では、 <see cref="F:System.Diagnostics.TraceEventType.Error" />です。</param>
        <param name="additionalInfo">メッセージに追加する文字列。 既定では、これは、空の文字列です。</param>
        <param name="id">関連付けに使用される通常のメッセージ id。 既定に関連する <c>entryType</c> 「解説」セクションの表で説明します。</param>
        <summary>例外情報をアプリケーションのログ リスナーに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `WriteException` メソッドは、アプリケーションのイベント ログ リスナーの例外に含まれる情報を書き込みます。  
  
 クライアント アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Application.Log` オブジェクトです。 Web アプリケーションで、 `Log` オブジェクトがを通じて使用できる、 `My.Log` オブジェクトです。  
  
 リスナーが受信先のログについて、 `WriteException` メソッドのメッセージを参照してください [Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)します。 既定のログ リスナーを変更することができます。 詳細については、「[Working with Application Logs in Visual Basic](http://msdn.microsoft.com/ja-jp/2581afd1-5791-4bc4-86b2-46244e9fe468)」を参照してください。  
  
 いずれのオーバー ロードがない、 `id` 引数、ログに書き込まれる id が次の表で定義されています。  
  
|`severity`|既定値 `id`|  
|----------------|--------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|9|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 次の表に、関連するタスクの例については、 `WriteException` メソッドです。  
  
|目的|参照トピック|  
|--------|------------|  
|例外情報をアプリケーションのイベント ログのリスナーに書き込みます。|[How to: Log Exceptions in Visual Basic](http://msdn.microsoft.com/ja-jp/a26c60e2-ae39-444a-aebb-33eccadc0eeb)|  
|場所を決定する `Log` 情報を書き込みます。|[Walkthrough: Determining Where My.Application.Log Writes Information](http://msdn.microsoft.com/ja-jp/5b70143a-7741-45f2-ae1d-03324a3a4189)|  
  
## プロジェクトの種類別の可用性  
  
|プロジェクトの種類|使用可能|  
|---------------|----------|  
|Windows アプリケーション|**はい**|  
|クラス ライブラリ|**はい**|  
|コンソール アプリケーション|**はい**|  
|Windows コントロール ライブラリ|**はい**|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|**はい**|  
|Web サイト|**はい**|  
  
   
  
## 例  
 この例では、使用、 `My.Application.Log.WriteException` 例外ログに記録します。 コメントを解除、 `Dim` と `MsgBox` が発生する行、 <xref:System.NullReferenceException> 例外です。 詳細については、「[How to: Log Exceptions in Visual Basic](http://msdn.microsoft.com/ja-jp/a26c60e2-ae39-444a-aebb-33eccadc0eeb)」を参照してください。  
  
 [!code-vb[VbVbalrMyApplicationLog\#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 このコード例は、クライアント アプリケーション内でのみ実行できます。 変更 `My.Application.Log.WriteException` に `My.Log.WriteException` Web アプリケーションにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ex" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">メッセージの種類が 1 つの <see cref="T:System.Diagnostics.TraceEventType" /> 列挙値。</exception>
        <exception cref="T:System.Security.SecurityException">部分信頼コードでは、メソッドを呼び出しますが、完全な信頼を必要とするイベント ログ リスナーに書き込みます。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteException">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>例外情報をアプリケーションのログ リスナーに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:Microsoft.VisualBasic.Logging.Log" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>アプリケーションのログ リスナーにメッセージを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>