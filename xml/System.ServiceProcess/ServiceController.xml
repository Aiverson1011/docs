<Type Name="ServiceController" FullName="System.ServiceProcess.ServiceController">
  <TypeSignature Language="C#" Value="public class ServiceController : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceController extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceController" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.ServiceProcess.Design.ServiceControllerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceControllerDesc")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Windows サービスを表し、実行中のサービスまたは停止したサービスへの接続、サービスの操作、またはサービスに関する情報の取得を実現します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can use the <xref:System.ServiceProcess.ServiceController> class to connect to and control the behavior of existing services. When you create an instance of the <xref:System.ServiceProcess.ServiceController> class, you set its properties so it interacts with a specific Windows service. You can then use the class to start, stop, and otherwise manipulate the service.  
  
 You will most likely use the <xref:System.ServiceProcess.ServiceController> component in an administrative capacity. For example, you could create a Windows or Web application that sends custom commands to a service through the <xref:System.ServiceProcess.ServiceController> instance. This would be useful, because the Service Control Manager \(SCM\) Microsoft Management Console snap\-in does not support custom commands.  
  
 After you create an instance of <xref:System.ServiceProcess.ServiceController>, you must set two properties on it to identify the service with which it interacts: the computer name and the name of the service you want to control.  
  
> [!NOTE]
>  By default, <xref:System.ServiceProcess.ServiceController.MachineName%2A> is set to the local computer, so you do not need to change it unless you want to set the instance to point to another computer.  
  
 Generally, the service author writes code that customizes the action associated with a specific command. For example, a service can contain code to respond to an <xref:System.ServiceProcess.ServiceBase.OnPause%2A?displayProperty=fullName> command. In that case, the custom processing for the <xref:System.ServiceProcess.ServiceController.Pause%2A> task runs before the system pauses the service.  
  
 The set of commands a service can process depends on its properties; for example, you can set the <xref:System.ServiceProcess.ServiceController.CanStop%2A> property for a service to **languageKeyword tag is not supported!!!!**  
. This setting renders the **languageKeyword tag is not supported!!!!**  
 command unavailable on that particular service; it prevents you from stopping the service from the SCM by disabling the necessary button. If you try to stop the service from your code, the system raises an error and displays the error message "Failed to stop **parameterReference tag is not supported!!!!**  
."  
  
   
  
## 例  
 The following example demonstrates the use of the <xref:System.ServiceProcess.ServiceController> class to control the `SimpleService` service example.  
  
 [!code-csharp[ServiceControllerClass\#1](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#1)]
 [!code-vb[ServiceControllerClass\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="T:System.ServiceProcess.ServiceControllerStatus" />
    <altmember cref="T:System.ServiceProcess.ServiceType" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ServiceProcess.ServiceController" /> 特定のサービスに関連付けられていないクラス。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceController (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">システムでサービスを識別するための名前。 これは、サービスの表示名とすることもできます。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ServiceProcess.ServiceController" /> 、ローカル コンピューター上の既存のサービスに関連付けられているクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、使用、 <xref:System.ServiceProcess.ServiceController.%23ctor%28System.String%29?displayProperty=fullName> コンス トラクターを作成する、 <xref:System.ServiceProcess.ServiceController> サンプル サービスの制御に使用されるオブジェクト。 この例はに対して提供されているサンプルが大きく、 <xref:System.ServiceProcess.ServiceController> クラスです。  
  
 [!code-csharp[ServiceControllerClass\#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#2)]
 [!code-vb[ServiceControllerClass\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceController (string name, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.#ctor(System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">システムでサービスを識別するための名前。 これは、サービスの表示名とすることもできます。</param>
        <param name="machineName">サービスが常駐するコンピューター。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ServiceProcess.ServiceController" /> 指定したコンピューター上の既存のサービスに関連付けられているクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `machineName` 使用する、パラメーター"です。"ローカル コンピューターを表す。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> が無効です。  
  
 または  
  
 <paramref name="machineName" /> が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanPauseAndContinue">
      <MemberSignature Language="C#" Value="public bool CanPauseAndContinue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPauseAndContinue" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.CanPauseAndContinue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPCanPauseAndContinue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスを一時中断および再開できるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> サービスを一時停止できる場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、使用、 <xref:System.ServiceProcess.ServiceController.CanPauseAndContinue%2A> プロパティをサービスが一時停止し、続行するかどうかを判断します。 この例はに対して提供されているサンプルが大きく、 <xref:System.ServiceProcess.ServiceController> クラスです。  
  
 [!code-csharp[ServiceControllerClass\#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#2)]
 [!code-vb[ServiceControllerClass\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanShutdown">
      <MemberSignature Language="C#" Value="public bool CanShutdown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShutdown" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.CanShutdown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPCanShutdown")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>システムのシャットダウン時に、サービスにそれを通知する必要があるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 場合は、システムがシャット ダウン時にサービスに通知する必要があります。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、使用、 <xref:System.ServiceProcess.ServiceController.CanShutdown%2A> プロパティをサービスがシャット ダウン イベントのハンドラーを提供するかどうかを判断します。 この例はに対して提供されているサンプルが大きく、 <xref:System.ServiceProcess.ServiceController> クラスです。  
  
 [!code-csharp[ServiceControllerClass\#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#2)]
 [!code-vb[ServiceControllerClass\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanStop">
      <MemberSignature Language="C#" Value="public bool CanStop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanStop" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.CanStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPCanStop")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスをいったん開始してから停止できるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> サービスを停止する場合、 <see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> メソッドが呼び出されます。 それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、使用、 <xref:System.ServiceProcess.ServiceController.CanStop%2A> プロパティをサービスが停止イベントのハンドラーを提供するかどうかを判断します。 この例はに対して提供されているサンプルが大きく、 <xref:System.ServiceProcess.ServiceController> クラスです。  
  
 [!code-csharp[ServiceControllerClass\#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#2)]
 [!code-vb[ServiceControllerClass\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この接続が切断 <see cref="T:System.ServiceProcess.ServiceController" /> サービスからインスタンス化し、インスタンスが割り当てられているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceProcess.ServiceController.Close%2A> 関連付けられているすべてのハンドルが解放、 <xref:System.ServiceProcess.ServiceController> インスタンス。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public void Continue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Continue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Continue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>サービスが一時中断された後に、続行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと <xref:System.ServiceProcess.ServiceController.Continue%2A> サービスの場合、ステータスは最初に変更 `ContinuePending` 後、 <xref:System.ServiceProcess.ServiceController.Continue%2A> に変更は、メソッドが戻る `Running`します。  
  
 呼び出すことができない <xref:System.ServiceProcess.ServiceController.Continue%2A> サービス コント ローラーの状態になるまで、サービスの `Paused`です。  
  
   
  
## 例  
 次の例では、使用、 <xref:System.ServiceProcess.ServiceController.Continue%2A> メソッドを一時停止したサービスを続行します。 この例はに対して提供されているサンプルが大きく、 <xref:System.ServiceProcess.ServiceController> クラスです。  
  
 [!code-csharp[ServiceControllerClass\#5](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#5)]
 [!code-vb[ServiceControllerClass\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">for controlling services on the computer. Associated enumeration: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for unrestricted access to service information. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.ServiceProcess.ServiceController.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceController.Pause" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="DependentServices">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceController[] DependentServices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceProcess.ServiceController[] DependentServices" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.DependentServices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPDependentServices")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>これに関連付けられているサービスに依存するサービスのセットを取得 <see cref="T:System.ServiceProcess.ServiceController" /> インスタンス。</summary>
        <value>配列 <see cref="T:System.ServiceProcess.ServiceController" /> 場合、それぞれがこのサービスに依存するサービスに関連付けられています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceProcess.ServiceController.DependentServices%2A> 配列は、アプリケーションが呼び出す場合、システムが停止したサービスを表す <xref:System.ServiceProcess.ServiceController.Stop%2A> このサービスを使用します。  
  
   
  
## 例  
 次の例では、 <xref:System.ServiceProcess.ServiceController> イベント ログ サービスに依存するサービスのセットを表示するクラス。  
  
 [!code-cpp[ServiceController\#3](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#3)]
 [!code-csharp[ServiceController\#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#3)]
 [!code-vb[ServiceController\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">for connecting to existing services on the computer. Associated enumeration: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Browse" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスの表示名を取得または設定します。</summary>
        <value>サービスの表示名。サービスを識別するために使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定することができます、 <xref:System.ServiceProcess.ServiceController.DisplayName%2A> に空の文字列 \(""\)、プロパティを設定するが、 `null` は例外をスローします。  
  
   
  
## 例  
 次の例では、 <xref:System.ServiceProcess.ServiceController> イベント ログ サービスに依存するサービスのセットを表示するクラス。  
  
 [!code-cpp[ServiceController\#3](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#3)]
 [!code-csharp[ServiceController\#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#3)]
 [!code-vb[ServiceController\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.ServiceProcess.ServiceController.DisplayName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.ServiceProcess.ServiceController" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by the public **languageKeyword tag is not supported!!!!**  
**legacyBold tag is not supported!!!!**  
method and the <xref:System.Object.Finalize%2A> method. **languageKeyword tag is not supported!!!!**  
 invokes the protected **languageKeyword tag is not supported!!!!**  
 method with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> invokes **languageKeyword tag is not supported!!!!**  
 with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is true, this method releases all resources held by any managed objects that this <xref:System.ServiceProcess.ServiceController> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ExecuteCommand">
      <MemberSignature Language="C#" Value="public void ExecuteCommand (int command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteCommand(int32 command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command">実行するカスタム コマンドを示す、アプリケーション定義のコマンド フラグ。 有効値の範囲は 128 ～ 256 です。</param>
        <summary>サービスでカスタム コマンドを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A>, 、サービスの状態は変わりません。 サービスが開始された場合、状態のまま `Running`します。 サービスが停止された場合、状態のまま `Stopped`, 、という具合です。 カスタム コマンドを処理するサービスをオーバーライドする必要があります、 <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> メソッドで指定されたコマンドのハンドラーを用意し、 `command` パラメーター。  
  
   
  
## 例  
 コード例を次の使用を示しています、 <xref:System.ServiceProcess.ServiceController.ExecuteCommand%28System.Int32%29?displayProperty=fullName> にカスタム コマンドを実行するメソッド、 `SimpleService` サービスの例です。  
  
 [!code-csharp[ServiceContoller\_ExecuteCommand\#1](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceContoller_ExecuteCommand/CS/program.cs#1)]
 [!code-vb[ServiceContoller\_ExecuteCommand\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceContoller_ExecuteCommand/VB/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">for controlling services on the computer. Associated enumeration: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for unrestricted access to service information. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDevices">
      <MemberSignature Language="C#" Value="public static System.ServiceProcess.ServiceController[] GetDevices ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceProcess.ServiceController[] GetDevices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.GetDevices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ローカル コンピューターのデバイス ドライバー サービスを取得します。</summary>
        <returns>型の配列 <see cref="T:System.ServiceProcess.ServiceController" /> の各要素は、ローカル コンピューター上のデバイス ドライバー サービスに関連付けられています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceProcess.ServiceController.GetDevices%2A> ローカル コンピューターからのみ、デバイス ドライバー サービスを返します。 デバイス ドライバー以外のサービスまたはドライバーではないサービスを取得する、 <xref:System.ServiceProcess.ServiceController.GetServices%2A> メソッドです。 同時に、2 つのメソッドは、コンピューター上のすべてのサービスへのアクセスを提供します。  
  
   
  
## 例  
 次の例では、 <xref:System.ServiceProcess.ServiceController> クラスをローカル コンピューター上のデバイス ドライバー サービスを表示します。  
  
 [!code-cpp[ServiceController\#5](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#5)]
 [!code-csharp[ServiceController\#5](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#5)]
 [!code-vb[ServiceController\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceController.GetServices" />
      </Docs>
    </Member>
    <Member MemberName="GetDevices">
      <MemberSignature Language="C#" Value="public static System.ServiceProcess.ServiceController[] GetDevices (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceProcess.ServiceController[] GetDevices(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.GetDevices(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName">デバイス ドライバー サービスを取得する対象のコンピューター。</param>
        <summary>指定したコンピューターのデバイス ドライバー サービスを取得します。</summary>
        <returns>型の配列 <see cref="T:System.ServiceProcess.ServiceController" /> の各要素は指定したコンピューター上のデバイス ドライバー サービスに関連付けられています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceProcess.ServiceController.GetDevices%2A> 指定したコンピューターからのみ、デバイス ドライバー サービスを返します。 デバイス ドライバー以外のサービスまたはドライバーではないサービスを取得する、 <xref:System.ServiceProcess.ServiceController.GetServices%2A> メソッドです。 同時に、2 つのメソッドは、コンピューター上のすべてのサービスへのアクセスを提供します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="machineName" /> パラメーターは構文が無効です。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceController.GetServices" />
      </Docs>
    </Member>
    <Member MemberName="GetServices">
      <MemberSignature Language="C#" Value="public static System.ServiceProcess.ServiceController[] GetServices ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceProcess.ServiceController[] GetServices() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.GetServices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>デバイス ドライバー サービス以外の、ローカル コンピューターのすべてのサービスを取得します。</summary>
        <returns>型の配列 <see cref="T:System.ServiceProcess.ServiceController" /> の各要素は、ローカル コンピューター上のサービスに関連付けられています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceProcess.ServiceController.GetServices%2A> デバイス ドライバー以外のサービスだけと、ローカル コンピューターからドライバー サービスを返します。 デバイス ドライバー サービスを取得する、 <xref:System.ServiceProcess.ServiceController.GetDevices%2A> メソッドです。 同時に、2 つのメソッドは、コンピューター上のすべてのサービスへのアクセスを提供します。  
  
   
  
## 例  
 次の例では、 <xref:System.ServiceProcess.ServiceController> 、ローカル コンピューターで実行されているサービスを表示するクラス。  
  
 [!code-cpp[ServiceController\#6](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#6)]
 [!code-csharp[ServiceController\#6](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#6)]
 [!code-vb[ServiceController\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceController.GetDevices" />
      </Docs>
    </Member>
    <Member MemberName="GetServices">
      <MemberSignature Language="C#" Value="public static System.ServiceProcess.ServiceController[] GetServices (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceProcess.ServiceController[] GetServices(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.GetServices(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName">サービスを取得する対象のコンピューター。</param>
        <summary>デバイス ドライバー サービス以外の、指定したコンピューターのすべてのサービスを取得します。</summary>
        <returns>型の配列 <see cref="T:System.ServiceProcess.ServiceController" /> の各要素は指定したコンピューター上のサービスに関連付けられています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceProcess.ServiceController.GetServices%2A> 指定したコンピューターからドライバーではないサービス デバイス以外のドライバー サービスのみを返します。 デバイス ドライバー サービスを取得する、 <xref:System.ServiceProcess.ServiceController.GetDevices%2A> メソッドです。 同時に、2 つのメソッドは、コンピューター上のすべてのサービスへのアクセスを提供します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="machineName" /> パラメーターは構文が無効です。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceController.GetDevices" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(".")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPMachineName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このサービスが常駐しているコンピューターの名前を取得または設定します。</summary>
        <value>これに関連付けられているサービスを実行しているコンピューターの名前 <see cref="T:System.ServiceProcess.ServiceController" /> インスタンス。 既定値はローカル コンピューター \("."\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コンピューター名は、上記の円記号 \(\\\) せず、このサービスを実行しているサーバーの名前です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.ServiceProcess.ServiceController.MachineName" /> 構文が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Pause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>サービスの操作を中断します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すことができない <xref:System.ServiceProcess.ServiceController.Continue%2A> サービス コント ローラーの状態になるまで、サービスの `Paused`です。  
  
   
  
## 例  
 次の例では、使用、 <xref:System.ServiceProcess.ServiceController.Pause%2A> メソッドをサービスを一時停止します。 この例はに対して提供されているサンプルが大きく、 <xref:System.ServiceProcess.ServiceController> クラスです。  
  
 [!code-csharp[ServiceControllerClass\#4](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#4)]
 [!code-vb[ServiceControllerClass\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">for controlling services on the computer. Associated enumeration: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for unrestricted access to service information. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.ServiceProcess.ServiceController.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceController.Continue" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Refresh" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>プロパティを現在の値に再設定し、プロパティ値を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.ServiceProcess.ServiceController.Refresh%2A> method causes the <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>, <xref:System.ServiceProcess.ServiceController.DependentServices%2A>, and <xref:System.ServiceProcess.ServiceController.Status%2A> properties to be reset to their current values when they are next referenced.  
  
   
  
## 例  
 The following example demonstrates the use of the <xref:System.ServiceProcess.ServiceController.Refresh%2A> method to obtain the status of a service. The code instructs a service to pause, and then waits for the status to reflect the change. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  
  
 [!code-csharp[ServiceControllerClass\#4](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceControllerClass/CS/program.cs#4)]
 [!code-vb[ServiceControllerClass\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceControllerClass/VB/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.SafeHandle ServiceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.SafeHandle ServiceHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.ServiceHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.SafeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービスのハンドルを取得します。</summary>
        <value>A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> サービスのハンドルを格納しています。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for access to unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ServiceProcess.Design.ServiceNameConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPServiceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスが参照するサービスを識別する名前を取得または設定します。</summary>
        <value>サービスを識別する名前がこの <see cref="T:System.ServiceProcess.ServiceController" /> インスタンスが参照されます。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceProcess.ServiceController.ServiceName%2A> サービス コントロール マネージャーにサービスを識別します。 このプロパティを変更すると、 <xref:System.ServiceProcess.ServiceController> インスタンスの別のサービスにバインドするには変更されませんどのようなサービス コントロール マネージャーの Microsoft 管理コンソール スナップインが表示されます。  
  
 このプロパティの値をサービスの記録された名前と同一である必要がありますカスタム サービスを実装するとき、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 対応するプロパティ <xref:System.ServiceProcess.ServiceInstaller> クラスです。 コードでは、 <xref:System.ServiceProcess.ServiceController.ServiceName%2A> 設定は、通常、 `main()` 実行可能ファイルの関数です。  
  
 リセットするときに、 <xref:System.ServiceProcess.ServiceController.ServiceName%2A> プロパティには、プロパティを設定するメソッドがこのインスタンスを設定する <xref:System.ServiceProcess.ServiceController.DisplayName%2A> に空の文字列 \(""\) です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.ServiceProcess.ServiceController.ServiceName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">構文、 <see cref="P:System.ServiceProcess.ServiceController.ServiceName" /> プロパティが無効です。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceController[] ServicesDependedOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceProcess.ServiceController[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceController[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>対象となるサービスが依存している一連のサービス。</summary>
        <value>配列 <see cref="T:System.ServiceProcess.ServiceController" /> 場合、それぞれがこのサービスを実行する実行されている必要があるサービスに関連付けられています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべてのサービスの場合、 <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A> 配列が実行されていない、このサービスを開始することはできません。  
  
   
  
## 例  
 次の例では、 <xref:System.ServiceProcess.ServiceController> メッセンジャー サービスが依存するサービスのセットを表示するクラス。  
  
 [!code-cpp[ServiceController\#4](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#4)]
 [!code-csharp[ServiceController\#4](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#4)]
 [!code-vb[ServiceController\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">for connecting to existing services on the computer. Associated enumeration: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Browse" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ServiceType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceType ServiceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceType ServiceType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.ServiceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPServiceType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>対象となるオブジェクトが参照するサービスの種類を取得します。</summary>
        <value>いずれか、 <see cref="T:System.ServiceProcess.ServiceType" /> ネットワーク サービスの種類を示すために使用される値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サービスの種類は、システムによってサービスを使用する方法を示します。 値、 <xref:System.ServiceProcess.ServiceController.ServiceType%2A> プロパティは、一連のフラグのビットごとの OR 演算子を使用して結合を表します。  
  
   
  
## 例  
 次の例では、 <xref:System.ServiceProcess.ServiceController> クラスをローカル コンピューター上のデバイス ドライバー サービスを表示します。  
  
 [!code-cpp[ServiceController\#5](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#5)]
 [!code-csharp[ServiceController\#5](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#5)]
 [!code-vb[ServiceController\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
        <altmember cref="T:System.ServiceProcess.ServiceType" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>引数を渡さずに、サービスを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すことができない <xref:System.ServiceProcess.ServiceController.Stop%2A> サービス コント ローラーの状態になるまで、サービスの `Running`です。  
  
   
  
## 例  
 次の例では、 <xref:System.ServiceProcess.ServiceController> Alerter サービスが停止しているかどうかをチェックするクラス。 例では、サービスを開始しに設定されているサービスの状態になるまで待機する場合は、サービスを停止すると、 <xref:System.ServiceProcess.ServiceControllerStatus.Running>です。  
  
 [!code-cpp[ServiceController\#1](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#1)]
 [!code-csharp[ServiceController\#1](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#1)]
 [!code-vb[ServiceController\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">for controlling services on the computer. Associated enumeration: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for unrestricted access to service information. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.ServiceProcess.ServiceController.Stop" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Start(System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args">サービスを開始するときに、サービスに渡す引数の配列。</param>
        <summary>指定した引数を渡して、サービスを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すことができない <xref:System.ServiceProcess.ServiceController.Stop%2A> サービス コント ローラーの状態になるまで、サービスの `Running`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスを開始することはできません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="args" /> は <see langword="null" /> です。  
  
 または  
  
 配列のメンバーは <see langword="null" />です。</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">for controlling services on the computer. Associated enumeration: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for unrestricted access to service information. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="M:System.ServiceProcess.ServiceController.Stop" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.ServiceProcess.ServiceController" /> オブジェクトによって表されるサービスの開始方法を示す値を取得します。</summary>
        <value>サービスを開始する方法を示す値。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">for browsing services on the computer. Associated enumeration: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Browse" />.</permission>
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceControllerStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceControllerStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceController.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SPStatus")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceControllerStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>対象となるインスタンスが参照するサービスのステータスを取得します。</summary>
        <value>いずれか、 <see cref="T:System.ServiceProcess.ServiceControllerStatus" /> 、サービスが実行されている、停止、または一時停止、または、かどうか開始、停止、停止、または続行コマンドが保留中かどうかを示す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ステータスは、サービスの現在の状態を示します。 使用可能な値のセットでは、状態を変更するコマンドが保留になっているかどうかを示すいくつか含まれています。  
  
   
  
## 例  
 次の例では、 <xref:System.ServiceProcess.ServiceController> クラス Telnet サービスの現在の状態を確認します。 サービスが停止している場合の例は、サービスを開始します。 サービスが実行されている場合の例は、サービスを停止します。  
  
 [!code-cpp[ServiceController\#2](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#2)]
 [!code-csharp[ServiceController\#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#2)]
 [!code-vb[ServiceController\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.Stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このサービスと、このサービスに依存しているすべてのサービスを停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべてのサービスは、その操作には、このサービスに依存している、このサービスを停止するには、停止します。<xref:System.ServiceProcess.ServiceController.DependentServices%2A> プロパティには、この 1 つに依存するサービスのセットが含まれています。  
  
 このサービスが依存しているサービスを停止する場合、 <xref:System.ServiceProcess.ServiceController.Stop%2A> メソッド内でこのサービスを <xref:System.ServiceProcess.ServiceController.Stop%2A> 親サービスのメソッドです。<xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A> プロパティには、このサービスが依存するサービスが含まれています。  
  
   
  
## 例  
 次の例では、 <xref:System.ServiceProcess.ServiceController> クラス Telnet サービスの現在の状態を確認します。 サービスが停止している場合の例は、サービスを開始します。 サービスが実行されている場合の例は、サービスを停止します。  
  
 [!code-cpp[ServiceController\#2](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#2)]
 [!code-csharp[ServiceController\#2](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#2)]
 [!code-vb[ServiceController\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">システム API にアクセス中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">サービスは見つかりませんでした。</exception>
        <permission cref="T:System.ServiceProcess.ServiceControllerPermission">for controlling services on the computer. Associated enumeration: <see cref="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for unrestricted access to service information. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.ServiceProcess.ServiceController.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceController.Start" />
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="WaitForStatus">
      <MemberSignature Language="C#" Value="public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WaitForStatus(valuetype System.ServiceProcess.ServiceControllerStatus desiredStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="desiredStatus" Type="System.ServiceProcess.ServiceControllerStatus" />
      </Parameters>
      <Docs>
        <param name="desiredStatus">待機に対するステータス。</param>
        <summary>サービスが指定したステータスになるまで、無期限に待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> アプリケーションを中断するのには、サービスが必要な状態に到達するまでの処理です。  
  
> [!NOTE]
>  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> メソッドは約 250 ミリ秒ごとの状態の確認の間、待機します。<xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> 観察対象のサービスに変更するのケースを検出することはできません、 `desiredStatus` し以外の状態にすぐにその間隔。  
  
   
  
## 例  
 次の例では、 <xref:System.ServiceProcess.ServiceController> Alerter サービスが停止しているかどうかをチェックするクラス。 例では、サービスを開始しに設定されているサービスの状態になるまで待機する場合は、サービスを停止すると、 <xref:System.ServiceProcess.ServiceControllerStatus.Running>です。  
  
 [!code-cpp[ServiceController\#1](~/samples/snippets/cpp/VS_Snippets_CLR/ServiceController/CPP/servicecontroller.cpp#1)]
 [!code-csharp[ServiceController\#1](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceController/CS/servicecontroller.cs#1)]
 [!code-vb[ServiceController\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceController/VB/servicecontroller.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="desiredStatus" /> パラメーターで定義されている値のいずれかではありません、 <see cref="T:System.ServiceProcess.ServiceControllerStatus" /> 列挙します。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <Member MemberName="WaitForStatus">
      <MemberSignature Language="C#" Value="public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WaitForStatus(valuetype System.ServiceProcess.ServiceControllerStatus desiredStatus, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="desiredStatus" Type="System.ServiceProcess.ServiceControllerStatus" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="desiredStatus">待機に対するステータス。</param>
        <param name="timeout">サービスが指定したステータスになるまでの待機時間を指定する <see cref="T:System.TimeSpan" /> オブジェクト。</param>
        <summary>サービスが指定したステータスになるまで、または指定したタイムアウトの期限が切れるまで待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> to suspend an application's processing until the service has reached the required status.  
  
> [!NOTE]
>  The <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> method waits approximately 250 milliseconds between each status check.  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A> cannot detect the case of the observed service changing to the **parameterReference tag is not supported!!!!**  
>  and then immediately to another status in that interval.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="desiredStatus" /> パラメーターは、<see cref="T:System.ServiceProcess.ServiceControllerStatus" /> 列挙値に定義されている値のいずれかではありません。</exception>
        <exception cref="T:System.ServiceProcess.TimeoutException">
          <paramref name="timeout" /> パラメーターに指定した値は期限切れです。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceController.Status" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDevices">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コンピューターのデバイス ドライバー サービスを取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetServices">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コンピューターのデバイス以外のドライバー サービス、およびドライバー以外のサービスを取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>サービスを開始します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WaitForStatus">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess.ServiceController</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>サービスが指定したステータスになるまで、待機します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.ServiceProcess.ServiceController" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>