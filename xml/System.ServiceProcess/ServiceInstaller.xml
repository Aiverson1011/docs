<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>拡張するクラスをインストール <see cref="T:System.ServiceProcess.ServiceBase" /> サービスを実装します。 このクラスは、サービス アプリケーションをインストールするときに、インストール ユーティリティによって呼び出されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceProcess.ServiceInstaller> が関連付けられているサービスに固有の機能です。 Hkey\_local\_machine \\system\\currentcontrolset\\services レジストリ キーのサブキーにサービスに関連付けられたレジストリ値を書き込むため、インストール ユーティリティによって使用されます。 サービスは、このサブキー内で識別されます。 サブキーには、実行可能ファイルまたはサービスが属する .dll の名前も含まれています。  
  
 継承されるプロジェクト インストーラー クラスを作成、サービスをインストールする、 <xref:System.Configuration.Install.Installer> クラス、 <xref:System.ComponentModel.RunInstallerAttribute> クラスに属性 `true`します。 作成、プロジェクト内で <xref:System.ServiceProcess.ServiceProcessInstaller> サービス アプリケーションと 1 つあたりのインスタンス <xref:System.ServiceProcess.ServiceInstaller> アプリケーション内の各サービスのインスタンス。 クラスにコンス トラクター、プロジェクト インストーラー内でサービスを使用して、インストールのプロパティを設定、 <xref:System.ServiceProcess.ServiceProcessInstaller> と <xref:System.ServiceProcess.ServiceInstaller> インスタンスし、するインスタンスを追加、 <xref:System.Configuration.Install.Installer.Installers%2A> コレクションです。  
  
> [!NOTE]
>  インストーラーのインスタンスを追加するため、コンス トラクターを使用することをお勧めただしに追加する必要がある場合、 <xref:System.Configuration.Install.Installer.Installers%2A> 内のコレクション、 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> メソッドでコレクションに同じ追加機能を実行してください、 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> メソッドです。  
  
 すべてのクラスから派生する、 <xref:System.Configuration.Install.Installer> クラスの状態、 <xref:System.Configuration.Install.Installer.Installers%2A> コレクションが同じである必要があります、 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> と <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> メソッドです。 ただし、コレクション間でのメンテナンスをしないようにする、 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> と <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> メソッドするインストーラーのインスタンスを追加する場合、 <xref:System.Configuration.Install.Installer.Installers%2A> カスタム インストーラー クラスのコンス トラクター内のコレクション。インストール ユーティリティが呼び出されると、検索、 <xref:System.ComponentModel.RunInstallerAttribute> 属性です。 属性がある場合 `true`, 、ユーティリティに追加されたすべてのサービスのインストール、 <xref:System.Configuration.Install.Installer.Installers%2A> プロジェクト インストーラーに関連付けられたコレクション。 場合 <xref:System.ComponentModel.RunInstallerAttribute> は `false` か、存在しないか、インストール ユーティリティには、プロジェクト インストーラーが無視されます。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller> プロジェクト インストールのクラスのインストール情報すべてに共通に関連付けられている <xref:System.ServiceProcess.ServiceInstaller> プロジェクト内のインスタンス。 このサービスが何もインストール プロジェクト内の他のサービスから分離する場合、そのサービスに固有の情報は、このメソッドによってインストールされます。  
  
> [!NOTE]
>  ために重要ですが、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> と同一である、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> から派生したクラスの <xref:System.ServiceProcess.ServiceBase>です。 値では、通常、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> サービス アプリケーションの実行可能ファイルの Main\(\) 関数内で、サービスのプロパティを設定します。 サービス コントロール マネージャーを使用して、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> プロパティをこの実行可能ファイル内のサービスを検索します。  
  
 その他のプロパティを変更する、 <xref:System.ServiceProcess.ServiceInstaller> 前に、または後に追加すること、 <xref:System.Configuration.Install.Installer.Installers%2A> プロジェクト インストーラーのコレクション。 たとえば、サービスの <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> 再起動時に自動的にサービスを開始またはサービスを手動で開始するユーザーが必要に設定することがあります。  
  
 通常はないのメソッドを呼び出す <xref:System.ServiceProcess.ServiceInstaller> 、コード内で一般的にして呼び出されただけインストール ユーティリティです。 インストール ユーティリティは、 <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> と <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> インストール プロセス中にメソッドです。 バックアップ実行の障害を必要に応じてを呼び出して <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> \(または <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>\) 以前にインストールされたすべてのコンポーネントにします。  
  
 インストール ユーティリティ呼び出し <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> オブジェクトを削除します。  
  
 アプリケーションのインストールにはプロジェクトのインストーラーを使用して、既にインストールされているコンポーネントを自動的に情報が格納 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>します。 この状態が継続的に情報として、 <xref:System.ServiceProcess.ServiceProcessInstaller> インスタンス、および各 <xref:System.ServiceProcess.ServiceInstaller> ユーティリティによってインスタンスがインストールされています。 場合によっては、通常、状態情報を明示的に変更するコードの必要はありません。  
  
 自動的に作成、インストールを実行するときに、 <xref:System.Diagnostics.EventLogInstaller> に関連付けられているイベント ログのソースをインストールする、 <xref:System.ServiceProcess.ServiceBase> クラスを派生します。<xref:System.Diagnostics.EventLog.Log%2A> このソースのプロパティで設定されて、 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> コンピューターのアプリケーション ログにコンス トラクターです。 設定すると、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> の <xref:System.ServiceProcess.ServiceInstaller> \(と同じにする必要がありますが、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> サービスの\)、 <xref:System.Diagnostics.EventLog.Source%2A> は自動的に同じ値に設定します。 インストールの失敗では、ソースのインストールは、ロールバックを以前にインストールされているサービスと共にです。  
  
 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> メソッドは実行されている場合は、サービスを停止しようとしています。 か、これが成功するかどうか <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> による変更を元に戻します <xref:System.ServiceProcess.ServiceInstaller.Install%2A>します。 新しいソースは、イベント ログ用に作成されている場合は、ソースが削除されます。  
  
   
  
## 例  
 次の例と呼ばれる、プロジェクト インストーラー `MyProjectInstaller`, から継承される <xref:System.Configuration.Install.Installer>します。 2 つのサービスでは、「Hello World サービス 1」を含むサービス実行可能ファイルがあることが前提とし、"Hello World サービス 2" です。 コンス トラクター内で `MyProjectInstaller` \(これと呼ぶことインストール ユーティリティによって\)、 <xref:System.ServiceProcess.ServiceInstaller> オブジェクトが作成されるはこれらの各サービス、および <xref:System.ServiceProcess.ServiceProcessInstaller> 実行可能ファイルが作成されます。 インストール ユーティリティが認識する `MyProjectInstaller` 有効なインストーラーとして、 <xref:System.ComponentModel.RunInstallerAttribute> に属性が設定されている `true`します。  
  
 インストーラーに追加される前に、プロセスのインストーラーおよびサービスのインストーラーで省略可能なプロパティが設定されて、 <xref:System.Configuration.Install.Installer.Installers%2A> コレクションです。 インストール ユーティリティにアクセスするとき `MyProjectInstaller`, に追加されたオブジェクト、 <xref:System.Configuration.Install.Installer.Installers%2A> を呼び出すことによってコレクション <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=fullName> 順番でインストールされています。 処理中には、インストーラーには、それぞれのバックアップさらでインストール エラーが発生した場合、どのオブジェクトがインストールされているを示す状態情報が保持されます。  
  
 通常、プロジェクト インストーラー クラスのインスタンスを明示的に作成したはありません。 作成し、追加すると、 <xref:System.ComponentModel.RunInstallerAttribute> 、構文に属性しますが、実際に呼び出すし、そのため、クラスを初期化するインストール ユーティリティです。  
  
 [!code-cpp[Classic ServiceInstaller Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ServiceProcess.ServiceInstaller" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 継承されるプロジェクト インストーラー クラスを作成、サービスをインストールする、 <xref:System.Configuration.Install.Installer> クラス、 <xref:System.ComponentModel.RunInstallerAttribute> クラスに属性 `true`します。 作成、プロジェクト内で <xref:System.ServiceProcess.ServiceProcessInstaller> サービス アプリケーションと 1 つあたりのインスタンス <xref:System.ServiceProcess.ServiceInstaller> アプリケーション内の各サービスのインスタンス。 クラスにコンス トラクター、プロジェクト インストーラー内でサービスを使用して、インストールのプロパティを設定、 <xref:System.ServiceProcess.ServiceProcessInstaller> と <xref:System.ServiceProcess.ServiceInstaller> インスタンスし、するインスタンスを追加、 <xref:System.Configuration.Install.Installer.Installers%2A> コレクションです。  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> コンス トラクターは、イベント ログを自動的に生成されますがソース <xref:System.Diagnostics.EventLog.Log%2A> プロパティが、コンピューターのアプリケーション ログと <xref:System.Diagnostics.EventLogInstaller>です。 設定すると、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> の <xref:System.ServiceProcess.ServiceInstaller>, と同じにする必要がありますが、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> 、サービスの <xref:System.Diagnostics.EventLog.Source%2A> イベント ログのプロパティは自動的に同じ値に設定します。 インストール エラーの場合、ソースが自動的に削除されます。  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> コンス トラクターのセット、 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> プロパティを `ServiceStartMode.Manual` をユーザーがサービスを開始することを指定します。 プロパティをリセットできます `ServiceStartMode.Automatic` コンピューターが再起動したら、サービスを開始するかを指定します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">
          <see cref="T:System.ComponentModel.IComponent" /> コピー先となるからです。</param>
        <summary>インスタンスからプロパティをコピー <see cref="T:System.ServiceProcess.ServiceBase" /> このインストーラーにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、コード内で呼び出すことはほとんどありません。<xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> 通常、デザイナーによってのみ呼び出されます。  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> サービス名を保存、 `component` パラメーターを <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> の <xref:System.ServiceProcess.ServiceInstaller> インスタンス。 \(パラメーターから派生したクラスのインスタンスである必要がありますので <xref:System.ServiceProcess.ServiceBase>, 、`component` を持つという保証、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> プロパティです\)。  
  
> [!NOTE]
>  Visual Studio デザイナーを使用している場合は、このメソッドはデザイン時のユーザーがクリックしたときに `Add Installer` コンポーネントのインストーラーとしてこのクラスを指定します。 インストーラーは、すべての情報をライブのコンポーネントから、インストール時に使用するため保存します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">このインストーラーとを関連付けるコンポーネントを継承しない <see cref="T:System.ServiceProcess.ServiceBase" />します。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはサービスを自動的に開始される他のサービスが実行するまでは開始遅延させるかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 自動遅延には、サービスを開始します。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> プロパティは、任意のサービスに適用されることができますが、サービスの開始モードがない場合、これは無視されます <xref:System.ServiceProcess.ServiceStartMode.Automatic>します。 設定は、次に、システムが再起動したときに有効にします。 サービス コントロール マネージャーでは、サービスの特定の開始時刻は保証されません。  
  
 遅延自動開始サービスが、読み込み順序グループのメンバーにすることはできませんが、別の自動開始サービスに依存できます。 アプリケーションで読み込まれる前に遅延自動起動サービスを呼び出す場合、呼び出しが失敗します。  
  
 遅延自動起動をサポートしないオペレーティング システムでこのプロパティの設定は影響しません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはサービスの説明を設定します。</summary>
        <value>サービスの説明。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.ServiceProcess.ServiceInstaller.Description%2A> プロパティをユーザーがインストールされているサービスの目的を説明します。 ユーザーは、インストールされているサービスの詳細を表示するアプリケーションでサービスの説明を表示できます。  
  
 Windows XP を使用して、サービス コントロール コマンド ライン ユーティリティ \(Sc.exe\) を使用してサービスの説明を表示するなど、サービスの説明を表示する、 **サービス** のノード、 **コンピューターの管理** コンソールです。  
  
   
  
## 例  
 次のコード例では、新しい Windows サービス アプリケーションのインストール プロパティを設定します。 この例では、表示名と説明のほか、サービス名を設定します。 この例で追加、サービスのインストール プロパティを割り当てた後、 <xref:System.ServiceProcess.ServiceInstaller> オブジェクトを <xref:System.Configuration.Install.Installer.Installers%2A> コレクションです。  
  
 [!code-csharp[ServiceProcess\_ServiceInstaller\#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess\_ServiceInstaller\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーにサービスを識別するフレンドリ名を示します。</summary>
        <value>対話型ツールに頻繁に使用する、サービスに関連付けられた名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> は、たとえばなど、使用、サービス コントロール マネージャーで、サービスにユーザーが判読できるわかりやすい名前を指定します。<xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> レジストリ値ですが、レジストリ キーとしては使用されません。 したがって、に関する制限事項、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> プロパティの値は適用されません。<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> 制限されているので、HKEY\_LOCAL\_MACHINES\\System\\CurrentControlSet\\Services のレジストリ キーとして使用されます。  
  
 表示名はく使用インストール ユーティリティでためには、名前の選択に制限はありませんので、サービスを識別するために、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">
          <see cref="T:System.Collections.IDictionary" /> 、インストールに関連付けられているコンテキスト情報を格納します。</param>
        <summary>サービス アプリケーションの情報をレジストリに書き込むことにより、サービスをインストールします。 このメソッドは、インストール ツールは、適切なメソッドを自動的に処理が使用することはできます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常はないのメソッドを呼び出す <xref:System.ServiceProcess.ServiceInstaller> 、コード内で一般的にして呼び出されただけインストール ユーティリティです。 インストール ユーティリティは、 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> のインストール中にメソッドです。 バックアップ実行の障害を必要に応じてを呼び出して <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> 例外を生成したオブジェクトにします。  
  
 アプリケーションのインストールは既にインストールされて、プロジェクトのインストーラーを使用してコンポーネントを自動的に情報を格納 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>します。 この状態情報が渡された <xref:System.ServiceProcess.ServiceInstaller.Install%2A> として、 `stateSaver` パラメーターは継続的に更新、 <xref:System.ServiceProcess.ServiceProcessInstaller> インスタンスとその各 <xref:System.ServiceProcess.ServiceInstaller> ユーティリティによってインスタンスがインストールされています。 場合によっては、通常、この状態情報を明示的に変更するコードの必要はありません。  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller> プロジェクト インストールのクラスのインストール情報すべてに共通に関連付けられている <xref:System.ServiceProcess.ServiceInstaller> プロジェクト内のインスタンス。 このサービスが何もインストール プロジェクト内の他のサービスから分離する場合、そのサービスに固有の情報は、このメソッドによってインストールされます。  
  
 継承されるプロジェクト インストーラー クラスを作成、サービスをインストールする、 <xref:System.Configuration.Install.Installer> クラス、 <xref:System.ComponentModel.RunInstallerAttribute> クラスに属性 `true`します。 作成、プロジェクト内で <xref:System.ServiceProcess.ServiceProcessInstaller> サービス アプリケーションと 1 つあたりのインスタンス <xref:System.ServiceProcess.ServiceInstaller> アプリケーション内の各サービスのインスタンス。 クラスにコンス トラクター、プロジェクト インストーラー内でサービスを使用して、インストールのプロパティを設定、 <xref:System.ServiceProcess.ServiceProcessInstaller> と <xref:System.ServiceProcess.ServiceInstaller> インスタンスし、するインスタンスを追加、 <xref:System.Configuration.Install.Installer.Installers%2A> コレクションです。  
  
> [!NOTE]
>  インストーラーのインスタンスを追加するため、コンス トラクターを使用することをお勧めただしに追加する必要がある場合、 <xref:System.Configuration.Install.Installer.Installers%2A> 内のコレクション、 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> メソッドでコレクションに同じ追加機能を実行してください、 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> メソッドです。  
  
 すべてのクラスから派生する、 <xref:System.Configuration.Install.Installer> クラスの状態、 <xref:System.Configuration.Install.Installer.Installers%2A> コレクションが同じである必要があります、 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> と <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> メソッドです。 ただし、コレクション間でのメンテナンスをしないようにする、 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> と <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> メソッドするインストーラーのインスタンスを追加する場合、 <xref:System.Configuration.Install.Installer.Installers%2A> カスタム インストーラー クラスのコンス トラクター内のコレクション。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">インストールが含まれていない、 <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> 実行可能ファイルです。  
  
 または  
  
 アセンブリのファイル名は <see langword="null" /> または空の文字列です。  
  
 または  
  
 サービス名が正しくありません。  
  
 または  
  
 サービス コントロール マネージャーを開いていない可能性があります。</exception>
        <exception cref="T:System.ArgumentException">サービスの表示名は、複数の 255 文字の長さです。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">システムは、サービスへのハンドルを生成できませんでした。  
  
 または  
  
 この名前のサービスが既にインストールされています。</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">A <see cref="T:System.Configuration.Install.ComponentInstaller" /> 現在インストーラーを比較します。</param>
        <summary>2 つのインストーラーが、同じサービスをインストールするかどうかを示します。</summary>
        <returns>
          <see langword="true" /> 呼び出す場合 <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> これらのインストーラーの両方でのインストールと同じになるサービス以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> たとえば、2 つのインストーラーと同じユーザー アカウントで同じサービスをインストールするかどうかをも示します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" /> インストールに関連付けられているコンテキスト情報を格納します。</param>
        <summary>インストール プロシージャによって、レジストリに書き込まれたサービス アプリケーションの情報をロールバックします。 このメソッドは、インストール ツールは、適切なメソッドを自動的に処理が使用することはできます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常はないのメソッドを呼び出す <xref:System.ServiceProcess.ServiceInstaller> 、コード内で一般的にして呼び出されただけインストール ユーティリティです。 インストール ユーティリティは、 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> インストール プロセス中にメソッドです。 バックアップ実行の障害を必要に応じてを呼び出して <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> 例外を生成したオブジェクトにします。  
  
 アプリケーションのインストールにはプロジェクトのインストーラーを使用して、既にインストールされているコンポーネントを自動的に情報が格納 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>します。 この状態情報が渡された <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> として、 `savedState` パラメーターは継続的に更新、 <xref:System.ServiceProcess.ServiceProcessInstaller> インスタンスとその各 <xref:System.ServiceProcess.ServiceInstaller> ユーティリティによってインスタンスがインストールされています。 場合によっては、通常、この状態情報を明示的に変更するコードの必要はありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このサービスを識別するために、システムで使用される名前を示します。 このプロパティと同一である、 <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> をインストールするサービスです。</summary>
        <value>インストールするサービスの名前。 この値は、サービスをインストールするのには、インストールする前に設定する必要があります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ために重要ですが、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> と同一である、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> から派生したクラスの <xref:System.ServiceProcess.ServiceBase>です。 値では、通常、 <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=fullName> サービス アプリケーションの実行可能ファイルの Main\(\) 関数内で、サービスのプロパティを設定します。 サービス コントロール マネージャーを使用して、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> プロパティをこの実行可能ファイル内のサービスを検索します。  
  
 設定すると、 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> サービスのインストーラーの <xref:System.Diagnostics.EventLog.Source%2A> 関連のイベント ログの同じ値に設定されています。 これにより、コンピューター上のアプリケーション ログにサービスのコマンド \(開始、停止\) などの呼び出しを自動的にログオンするサービス。  
  
> [!NOTE]
>  同じ名前のソースが既に存在するコンピューターでがアプリケーション ログ以外のログで例外がスローされます。 ソースが存在し、アプリケーション ログに関連付けられている場合は、そのソースは、サービスにコマンドの呼び出しをレポートに使用し、例外はスローされません。  
  
 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> することはできません `null` か、長さがゼロです。 最大サイズは、256 文字です。 前方または後方のスラッシュ、含めることはできません '\/' または ' \\'、または文字セット 10 進値 32 未満の値の ascii 文字。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> プロパティが無効です。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このサービスを実行するために実行されているサービスを示します。</summary>
        <value>このインストーラーに関連するサービスを実行前に実行する必要があるサービスの配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サービスは、開始する前に実行するには、その他のサービスを要求できます。 このプロパティの情報は、レジストリのキーに書き込まれます。 ユーザー \(または自動的に起動した場合に、システム\) は、サービスの実行を試みると、サービス コントロール マネージャー \(SCM\) では、各配列内のサービスが既に開始されていることを確認します。  
  
 配列内のサービスが、実行されていない場合、SCM は、開始しようとします。 これにより、サービスが含まれます。 `Manual`<xref:System.ServiceProcess.ServiceInstaller.StartType%2A>します。  
  
 このサービスが依存しているすべてのサービスが開始しなかった場合、このサービスは開始されません。 これを検出するシステム レベル例外処理がないために、システムが開始されていない場合、例外はスローされません。 サービスの開始の失敗を処理して、コードに実装する方法を決定します。 通常、サービスが開始しない場合は、\[スタートアップ時にダイアログが表示されます。  
  
 サービスが起動しない場合は、アプリケーション イベント ログにエントリが書き込まれます。  
  
 このサービスが依存しているサービスは、同じ実行可能ファイル内にある必要はありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このサービスを開始する方法とタイミングを示します。</summary>
        <value>A <see cref="T:System.ServiceProcess.ServiceStartMode" /> を表すサービスを開始する方法です。 既定値は <see langword="Manual" />, 、再起動後に、サービスは自動的に開始されませんを指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定、 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> を指定の再起動後に、サービスが自動的に開始するか、ユーザーが、サービスを手動で開始する必要があります。 サービスも無効にできますを起動できない、手動またはプログラムによってを有効にするまでを指定することです。  
  
 変更することはできません <xref:System.ServiceProcess.ServiceInstaller> インストール後にプロパティ値です。 変更する、 <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, 、か、アンインストールし、サービスを再インストールするか、サービス コントロール マネージャーを使用して、設定を手動で変更する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">開始モードは、の値ではない、 <see cref="T:System.ServiceProcess.ServiceStartMode" /> 列挙します。</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" /> インストールに関連付けられているコンテキスト情報を格納します。</param>
        <summary>レジストリからその情報を削除することで、サービスをアンインストールします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これをアンインストールする前に、サービスを停止する最初の試みをアンインストールします。 サービスを停止できない場合は、例外がキャッチされないと、メソッドは、サービスの削除を続行します。  
  
 通常はないのメソッドを呼び出す <xref:System.ServiceProcess.ServiceInstaller> 、コード内で一般的にして呼び出されただけインストール ユーティリティです。 InstallUtil を使用してサービスをアンインストールするだけでなく、それらをインストールするにはアンインストールするには、コマンドラインの呼び出しで、スイッチです。  
  
 アプリケーションのアンインストール ルーチンに自動的に、コンポーネントに関する情報を保持プロジェクトのインストーラーを使用して、アンインストールして <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>します。 この状態情報が渡された <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> として、 `savedState` パラメーターは継続的に更新、 <xref:System.ServiceProcess.ServiceProcessInstaller> インスタンスとその各 <xref:System.ServiceProcess.ServiceInstaller> ユーティリティによってインスタンスがインストールされています。 場合によっては、通常、この状態情報を明示的に変更するコードの必要はありません。  
  
 すべてのクラスから派生する、 <xref:System.Configuration.Install.Installer> クラスの状態、 <xref:System.Configuration.Install.Installer.Installers%2A> コレクションが同じである必要があります、 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> と <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> メソッドです。 ただし、コレクション間でのメンテナンスをしないようにする、 <xref:System.ServiceProcess.ServiceInstaller.Install%2A> と <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> メソッドするインストーラーのインスタンスを追加する場合、 <xref:System.Configuration.Install.Installer.Installers%2A> カスタム インストーラー クラスのコンス トラクター内のコレクション。  
  
 1 つのサービスは、アンインストールに失敗すると、これには影響しません、他のサービス \(通常、同じインストール プロジェクト\) 内でアンインストールされているためをアンインストールするためのロールバック メカニズムはありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">サービス コントロール マネージャーを開いていない可能性があります。  
  
 または  
  
 システムは、サービスへのハンドルを取得できませんでした。</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>