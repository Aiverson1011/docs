<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>ASP.NET が同期的にカスタム HTTP ハンドラーを使用して HTTP Web 要求を処理するために実装するコントラクトを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 カスタムの HTTP ハンドラーが、定義済みの特定の種類を共通言語仕様 \(CLS\) 準拠の言語での HTTP 要求の処理を記述できます。 定義された実行可能コード、 `HttpHandler` これら特定の要求に従来の ASP または ASP.NET Web ページではなく、クラス、応答します。 HTTP ハンドラーは、低レベルの要求および IIS Web サーバーの応答サービスと対話する手段を提供し、ISAPI 拡張機能に似ていますが、比較的単純なプログラミング モデルの機能を提供します。  
  
 これを実装する必要があります、ハンドラーは、セッション状態の値にアクセスする場合、 <xref:System.Web.SessionState.IRequiresSessionState> インターフェイス \(メソッドを持たないマーカー インターフェイス\)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>別の要求が使用できるかどうかを示す値を取得、 <see cref="T:System.Web.IHttpHandler" /> インスタンス。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Web.IHttpHandler" /> インスタンスが再利用可能な以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 明示的に設定する、 <xref:System.Web.IHttpHandler.IsReusable%2A> プロパティを `true` または `false` をオーバーライドする、指定したコードによって、 <xref:System.Web.IHttpHandler.IsReusable%2A> プロパティ アクセサー \(get アクセス操作子\) です。  
  
   
  
## 例  
 次のコード例は、4 行のテキストを handler.aspx という名前のページのクライアント要求に対して HTTP 出力ストリームに書き込みます。 Handler.aspx に対するすべての要求はサービス、 `MyHttpHandler` 、名前空間クラス `HandlerExample` HandlerTest.dll アセンブリに含まれています。  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" /> 組み込みサーバー オブジェクトへの参照を提供するオブジェクト \(たとえば、 <see langword="Request" />, 、<see langword="Response" />, 、<see langword="Session" />, 、および <see langword="Server" />\) HTTP 要求を処理するために使用します。</param>
        <summary>カスタム HTTP Web 要求の処理を有効に <see langword="HttpHandler" /> を実装する、 <see cref="T:System.Web.IHttpHandler" /> インターフェイスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 カスタムの配置 `HttpHandler` 内のコード、 <xref:System.Web.IHttpHandler.ProcessRequest%2A> 仮想メソッドは、次の例で示すようにします。  
  
   
  
## 例  
 次のコード例は、4 行のテキストを handler.aspx という名前のページのクライアント要求に対して HTTP 出力ストリームに書き込みます。 Handler.aspx に対するすべての要求はサービス、 `MyHttpHandler` 、名前空間クラス `HandlerExample` HandlerTest.dll アセンブリに含まれています。  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>