<Type Name="HttpException" FullName="System.Web.HttpException">
  <TypeSignature Language="C#" Value="public class HttpException : System.Runtime.InteropServices.ExternalException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit HttpException extends System.Runtime.InteropServices.ExternalException" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpException" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.InteropServices.ExternalException</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>HTTP 要求の処理中に発生した例外を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.HttpException> クラスは、ASP.NET の例外情報を生成できるようにする HTTP 固有の例外クラスです。 スローすることと、例外の処理の詳細については、次を参照してください。 [Handling and Throwing Exceptions](http://msdn.microsoft.com/ja-jp/f99a1d29-a2a8-47af-9707-9909f9010735)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.HttpException> クラスをカスタマイズされた例外が発生します。`Button_Click` メソッドを調べ、どのボタンがクリックされたいずれかを呼び出す、 `CheckNumber` または `CheckBoolean` メソッドです。 テキスト ボックスにユーザーが入力した値が必要な型に対応していない場合、 <xref:System.Web.HttpException> 例外が作成され、エラーの種類に基づいてカスタマイズされたメッセージと共にスローされます。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[HttpException\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException/cs/httpexceptioncs.aspx#1)]
 [!code-vb[HttpException\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException/vb/httpexceptionvb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.HttpException" /> クラスし、空の作成 <see cref="T:System.Web.HttpException" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 例外を処理する場合は、一連の外部に内部例外への応答でスローされた例外に関連する例外をキャプチャすると便利ですができます。  
  
 外側の例外の原因となった内部例外への参照は、 <xref:System.Exception.InnerException%2A> 外部例外のプロパティです。 この機構では、元の例外を可能になった例外を作成するなど、以前の例外によって示されているエラー情報が保持されます。 詳細については、「<xref:System.Exception.InnerException%2A>」を参照してください。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Web.HttpException.%23ctor%2A> のコンス トラクター、 <xref:System.Web.HttpException> クラスです。`CheckNumber` メソッドは、テキスト ボックスのユーザーが入力した値を受け取り、これは整数であるかどうかを確認します。 値が整数でない場合、例外がスローされますとし、新しい <xref:System.Web.HttpException> オブジェクトが作成され、スローされます。 例外がキャッチされたこと、 `Button_Click` イベント ハンドラーとエラー メッセージは、ブラウザーに表示されます。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[HttpException\_Constructor1\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor1/CS/httpexception_constructor1.cs.aspx#1)]
 [!code-vb[HttpException\_Constructor1\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor1/VB/httpexception_constructor1.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">クライアントでは、例外がスローされたときに表示されるエラー メッセージ。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Web.HttpException" />クラスの指定されたエラー メッセージを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例を示しています、<xref:System.Web.HttpException.%23ctor%2A>のコンス トラクター、<xref:System.Web.HttpException>クラスです。<xref:System.Web.HttpException>が、ユーザーが入力した値が 0 の場合にスローされます。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[Classic HttpException.HttpException1 Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpException.HttpException1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpException.HttpException1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpException.HttpException1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (int httpCode, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 httpCode, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Int32,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="httpCode" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="httpCode">このエラーに対応するクライアントに送信される HTTP 応答状態コードです。</param>
        <param name="message">クライアントでは、例外がスローされたときに表示されるエラー メッセージ。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Web.HttpException" />クラスの HTTP 応答のステータス コードとエラー メッセージを使用します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">スローされた例外に関する、シリアル化されたオブジェクト データを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo" /> です。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> 元または転送先に関するコンテキスト情報を保持しています。</param>
        <summary>シリアル化したデータを使用して、<see cref="T:System.Web.HttpException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.HttpException.%23ctor%2A> コンス トラクターは、ストリームで送信された例外オブジェクトを再構成する逆シリアル化中に呼び出されます。 詳細については、「[XML and SOAP Serialization](http://msdn.microsoft.com/ja-jp/832ac524-21bc-419a-a27b-ca8bfc45840f)」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.String,System.Exception)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">クライアントで例外がスローされたときに表示されるエラー メッセージ。</param>
        <param name="innerException">現在の例外をスローした <see cref="P:System.Exception.InnerException" /> \(存在する場合\)。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.HttpException" /> クラスのエラー メッセージを使用して、 <see cref="P:System.Exception.InnerException" /> プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 例外を処理する場合は、一連の外部に内部例外への応答でスローされた例外に関連する例外をキャプチャすると便利ですができます。  
  
 外側の例外の原因となった内部例外への参照は、 <xref:System.Exception.InnerException%2A> 外部例外のプロパティです。 この機構では、元の例外を可能になった例外を作成するなど、以前の例外によって示されているエラー情報が保持されます。 詳細については、「<xref:System.Exception.InnerException%2A>」を参照してください。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Web.HttpException.%23ctor%2A> のコンス トラクター、 <xref:System.Web.HttpException> クラスです。`CheckNumber` メソッドは、テキスト ボックスのユーザーが入力した値を受け取り、これは整数であるかどうかを確認します。 値が整数でない場合、例外がスローされますが、catch ブロックで、新しい <xref:System.Web.HttpException> オブジェクトが作成され、スローされます。 例外がキャッチされたこと、 `Button_Click` イベント ハンドラーとエラー メッセージは、ブラウザーに表示されます。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[HttpException\_Constructor2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor2/CS/httpexception_constructor2.cs.aspx#1)]
 [!code-vb[HttpException\_Constructor2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor2/VB/httpexception_constructor2.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (string message, int hr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, int32 hr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.String,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="hr" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">クライアントで例外がスローされたときに表示されるエラー メッセージ。</param>
        <param name="hr">エラーを定義する例外コードです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.HttpException" /> クラスのエラー メッセージと例外コードを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例を示しています、 <xref:System.Web.HttpException.%23ctor%2A> のコンス トラクター、 <xref:System.Web.HttpException> クラスです。<xref:System.Web.HttpException> ユーザーが入力した値が 0 の場合、例外がスローされます。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[Classic HttpException.HttpException2 Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpException.HttpException2 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpException.HttpException2 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpException.HttpException2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (int httpCode, string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 httpCode, string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Int32,System.String,System.Exception)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="httpCode" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="httpCode">クライアントに表示される HTTP 応答ステータス コード。</param>
        <param name="message">クライアントで例外がスローされたときに表示されるエラー メッセージ。</param>
        <param name="innerException">現在の例外をスローした <see cref="P:System.Exception.InnerException" /> \(存在する場合\)。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.HttpException" /> クラスの HTTP 応答ステータス コード、エラー メッセージを使用して、 <see cref="P:System.Exception.InnerException" /> プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 例外を処理する場合は、一連の外部に内部例外への応答でスローされた例外に関連する例外をキャプチャすると便利ですができます。  
  
 外側の例外の原因となった内部例外への参照は、 <xref:System.Exception.InnerException%2A> 外部例外のプロパティです。 この機構では、元の例外を可能になった例外を作成するなど、以前の例外によって示されているエラー情報が保持されます。 詳細については、「<xref:System.Exception.InnerException%2A>」を参照してください。  
  
   
  
## 例  
 次のコード例を示しています、 <xref:System.Web.HttpException.%23ctor%2A> のコンス トラクター、 <xref:System.Web.HttpException> クラスです。`CheckNumber` メソッドは、ユーザーが入力した値を受け取り、これは整数であるかどうかを確認します。 値が整数でない場合、例外がスローされますとし、新しい <xref:System.Web.HttpException> HTTP 応答のステータス コード、例外のメッセージおよび内部例外を含むオブジェクトを作成します。 例外がキャッチされたこと、 `Button_Click` イベント ハンドラーとエラー メッセージ、エラー コード、および内部例外が表示されます。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[HttpException\_Constructor3\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor3/CS/httpexception_constructor3.cs.aspx#1)]
 [!code-vb[HttpException\_Constructor3\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor3/VB/httpexception_constructor3.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (int httpCode, string message, int hr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 httpCode, string message, int32 hr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Int32,System.String,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="httpCode" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="hr" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="httpCode">クライアントに表示される HTTP 応答ステータス コード。</param>
        <param name="message">クライアントで例外がスローされたときに表示されるエラー メッセージ。</param>
        <param name="hr">エラーを定義する例外コードです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.HttpException" /> クラスの HTTP 応答のステータス コード、エラー メッセージ、および例外コードを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例を示しています、 <xref:System.Web.HttpException.%23ctor%2A> のコンス トラクター、 <xref:System.Web.HttpException> クラスです。 ユーザー名と電子メールの情報は、指定されたテキスト ボックス内のユーザーが入力されます。 任意のテキスト ボックスは空白のままでいる場合、 <xref:System.Web.HttpException> オブジェクトが作成され、スローされます。 エラー コード、 <xref:System.Web.HttpException> で取得した、 <xref:System.Web.HttpException.GetHttpCode%2A> メソッドと Web ページに表示されます。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[HttpException\_Constructor\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor/CS/httpexception_constructor5.cs.aspx#1)]
 [!code-vb[HttpException\_Constructor\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor/VB/httpexception_constructor5.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="CreateFromLastError">
      <MemberSignature Language="C#" Value="public static System.Web.HttpException CreateFromLastError (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpException CreateFromLastError(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.CreateFromLastError(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpException</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">クライアントで例外がスローされたときに表示されるエラー メッセージ。</param>
        <summary>新たに作成 <see cref="T:System.Web.HttpException" /> 例外は、Win32 API から返されたエラー コードに基づく <see langword="GetLastError()" /> メソッドです。</summary>
        <returns>
          <see cref="T:System.Web.HttpException" /> Win32 API の呼び出しから返されるエラー コードに基づく <see langword="GetLastError()" /> メソッドです。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="GetHtmlErrorMessage">
      <MemberSignature Language="C#" Value="public string GetHtmlErrorMessage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetHtmlErrorMessage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.GetHtmlErrorMessage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クライアントに返される HTML エラー メッセージを取得します。</summary>
        <returns>HTML のエラー メッセージ。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="GetHttpCode">
      <MemberSignature Language="C#" Value="public int GetHttpCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetHttpCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.GetHttpCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クライアントに返される HTTP 応答のステータス コードを取得します。</summary>
        <returns>例外を表す、0 以外の HTTP コードまたは <see cref="P:System.Exception.InnerException" /> コード;、それ以外の場合、HTTP 応答のステータス コード 500 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 0 以外の HTTP コードが返されます。 それ以外の場合、 <xref:System.Exception.InnerException%2A> コードが返されます。 どちらの場合、 <xref:System.Exception.InnerException%2A> コードや 0 以外の HTTP コードは、使用できますが、HTTP 応答のステータス コード 500 が返されます。 HTTP 応答のステータス コードの詳細については、ハイパー テキスト転送のプロトコルの世界では、http\/1.1 の状態コードの定義を参照してください。 [Wide Web Consortium \(W3C\) Web site](http://go.microsoft.com/fwlink/?linkid=37125)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">スローされた例外に関する、シリアル化されたオブジェクト データを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo" /> です。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> 元または転送先に関するコンテキスト情報を保持しています。</param>
        <summary>例外に関する情報を取得し、追加して、 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.HttpException.GetObjectData%2A> メソッドに例外に関する情報を追加、 <xref:System.Runtime.Serialization.SerializationInfo> シリアル化の対象となるオブジェクト。 逆シリアル化中に例外を再構成、 <xref:System.Runtime.Serialization.SerializationInfo> 、ストリームで送信されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="WebEventCode">
      <MemberSignature Language="C#" Value="public int WebEventCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WebEventCode" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpException.WebEventCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTTP 例外に関連付けられているイベントのコードを取得します。</summary>
        <value>Web イベント コードを表す整数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.HttpException" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>