<Type Name="Timer" FullName="System.Timers.Timer">
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>一定の間隔の経過後にイベントを生成します。オプションとして、反復イベントを生成することもできます。  
  
 この型の .NET Framework ソース コードを参照するには、[参照ソース](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082)をご覧ください。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/timers/system/timers/Timer.cs#897683f27faba082). You can browse through the source code online, download the reference for offline viewing, and step through the sources \(including patches and updates\) during debugging; see [instructions](http://referencesource.microsoft.com/).  
  
 The <xref:System.Timers.Timer> component is a server\-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed. You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property. Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed. You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing. For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week. You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running. If the system is not responding, the service could attempt to restart the server or notify an administrator.  
  
> [!IMPORTANT]
>  The <xref:System.Timers.Timer> class is available in the .NET Framework only. It is not included in the .NET Standard Library and is not available on other platforms, such as .NET Core or the Universal Windows Platform. On these platforms, as well as for portability across all .NET platforms, you should use the <xref:System.Threading.Timer?displayProperty=fullName> class instead.  
  
 This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a **languageKeyword tag is not supported!!!!**  
\/**languageKeyword tag is not supported!!!!**  
 block. To dispose of it indirectly, use a language construct such as **languageKeyword tag is not supported!!!!**  
 \(in C\#\) or **languageKeyword tag is not supported!!!!**  
 \(in Visual Basic\). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  
  
 The server\-based <xref:System.Timers.Timer?displayProperty=fullName> class is designed for use with worker threads in a multithreaded environment. Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.  
  
 The <xref:System.Timers.Timer?displayProperty=fullName> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value \(in milliseconds\) of the <xref:System.Timers.Timer.Interval%2A> property. You can handle this event to perform the processing you need. For example, suppose that you have an online sales application that continuously posts sales orders to a database. The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually. You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.  
  
> [!IMPORTANT]
>  The System.Timers.Timer class has the same resolution as the system clock. This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock. For more information, see the <xref:System.Timers.Timer.Interval%2A> property.  
  
 When <xref:System.Timers.Timer.AutoReset%2A> is set to **languageKeyword tag is not supported!!!!**  
, a <xref:System.Timers.Timer?displayProperty=fullName> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed. To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to **languageKeyword tag is not supported!!!!**  
, which is the default value.  
  
 The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event. This behavior is subject to change in future releases of the .NET Framework. Note, however, that this is not true of event handlers that execute asynchronously and include the **languageKeyword tag is not supported!!!!**  
 operator \(in C\#\)  or the **languageKeyword tag is not supported!!!!**  
 operator \(in Visual Basic\). Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates. For more information on exceptions thrown in asynchronous methods, see   [Exception Handling \(Task Parallel Library\)](http://msdn.microsoft.com/ja-jp/beb51e50-9061-4d3d-908c-56a4f7c2e8c1).  
  
 [!code-csharp[System.Timers.Timer\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is **languageKeyword tag is not supported!!!!**  
, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread. If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread. In this situation, the event handler should be reentrant.  
  
> [!NOTE]
>  The event\-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to **languageKeyword tag is not supported!!!!**  
> . This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped. The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.  
  
 Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not **languageKeyword tag is not supported!!!!**  
, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to **languageKeyword tag is not supported!!!!**  
, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.  
  
 If you use the <xref:System.Timers.Timer?displayProperty=fullName> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread.  
  
 For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor.  
  
> [!TIP]
>  Be aware that the .NET Framework Class Library includes four classes named **languageKeyword tag is not supported!!!!**  
> , each of which offers different functionality:  
>   
>  -   <xref:System.Timers.Timer?displayProperty=fullName> \(this topic\): fires an event at regular intervals. The class is intended for use as a server\-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  
> -   <xref:System.Threading.Timer?displayProperty=fullName>: executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the <xref:System.Timers.Timer?displayProperty=fullName> class, this class is intended for use as a server\-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.  
> -   <xref:System.Windows.Forms.Timer?displayProperty=fullName>: a Windows Forms component that fires an event at regular intervals. The component has no user interface and is designed for use in a single\-threaded environment.  
> -   <xref:System.Web.UI.Timer?displayProperty=fullName>: an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.  
  
   
  
## 例  
 The following example instantiates a **languageKeyword tag is not supported!!!!**  
 object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds \(2,000 milliseconds\), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  
  
 [!code-csharp[System.Timers.Timer\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Any public **languageKeyword tag is not supported!!!!**  
 members of this type are thread safe. Any instance members are not guaranteed to be thread safe.</threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、すべてのプロパティを初期値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、のインスタンスの初期プロパティ値を示しています。 <xref:System.Timers.Timer>します。  
  
|プロパティ|初期値|  
|-----------|---------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|100 ミリ秒|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|null 参照 \(Visual Basic の場合は `Nothing`\)。|  
  
   
  
## 例  
 次の例のインスタンスを作成、 <xref:System.Timers.Timer> を発生させたオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> 2 秒 \(2000年ミリ秒\) ごとのイベントがイベントのイベント ハンドラーを設定し、タイマーを起動します。 イベント ハンドラーの値を表示する、 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> プロパティごとにこのイベントは発生します。  
  
 [!code-cpp[System.Timers.Timer\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval">ミリ秒単位でのイベントの発生間隔。 この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。</param>
        <summary>
          <see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、<see cref="P:System.Timers.Timer.Interval" /> プロパティを指定したミリ秒数に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを設定、<xref:System.Timers.Timer.Interval%2A>タイマーの新しいインスタンスのプロパティが、タイマーを有効にしません。  
  
   
  
## 例  
 次の例のインスタンスを作成、<xref:System.Timers.Timer>を発生させるオブジェクト、<xref:System.Timers.Timer.Elapsed?displayProperty=fullName>イベントすべて 2 秒 \(2000 ミリ秒\) が、イベントのイベント ハンドラーを設定し、タイマーを開始します。 イベント ハンドラーの値を表示する、<xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName>プロパティが発生するたびにします。  
  
 [!code-csharp[System.Timers.Timer\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="interval" /> パラメーターの値は 0 以下か、または <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Timers.Timer" /> が <see cref="E:System.Timers.Timer.Elapsed" /> イベントを一度のみ発生させる \(<see langword="false" />\) か、または繰り返し発生させる \(<see langword="true" />\) かを示すブール値を取得または設定します。</summary>
        <value>指定した間隔が経過するたびに <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。最初の間隔が経過した後に 1 回だけ <see langword="false" /> イベントを発生させる場合は <see cref="E:System.Timers.Timer.Elapsed" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset. If <xref:System.Timers.Timer.AutoReset%2A> is **languageKeyword tag is not supported!!!!**  
, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.  
  
 Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised. For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to **languageKeyword tag is not supported!!!!**  
, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to **languageKeyword tag is not supported!!!!**  
.  
  
   
  
## 例  
 The following example creates a <xref:System.Timers.Timer> whose <xref:System.Timers.Timer.Elapsed> event fires after 1.5 seconds. Its event handler then displays "Hello World\!" on the console.  
  
 [!code-cpp[Classic Timer.Timer1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用されるコンポーネントの初期化を開始します。<xref:System.Timers.Timer.EndInit%2A> メソッドが初期化を終了します。 使用して、 <xref:System.Timers.Timer.BeginInit%2A> と <xref:System.Timers.Timer.EndInit%2A> メソッドによって、コントロールが完全に初期化される前に使用されないようにします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Timers.Timer" /> で使用したリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Timers.Timer.Close%2A> method in turn calls the **languageKeyword tag is not supported!!!!**  
 method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>現在の <see cref="T:System.Timers.Timer" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>間隔が経過すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is **languageKeyword tag is not supported!!!!**  
 and the time interval \(in milliseconds\) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses. If the <xref:System.Timers.Timer.AutoReset%2A> property is **languageKeyword tag is not supported!!!!**  
, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses.  
  
 If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset. For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to **languageKeyword tag is not supported!!!!**  
, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set. If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to **languageKeyword tag is not supported!!!!**  
.  
  
 If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is **languageKeyword tag is not supported!!!!**  
,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread. If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread. In this situation, the event handler should be reentrant.  
  
> [!NOTE]
>  The event\-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to **languageKeyword tag is not supported!!!!**  
> . This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped. The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.  
  
 Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not **languageKeyword tag is not supported!!!!**  
, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to **languageKeyword tag is not supported!!!!**  
, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread. One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.  
  
 The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event. This behavior is subject to change in future releases of the .NET Framework.  
  
   
  
## 例  
 The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event every two seconds \(2000 milliseconds\), sets up an event handler for the event, and starts the timer. The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> property each time it is raised.  
  
 [!code-cpp[System.Timers.Timer\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる必要があるかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定 <xref:System.Timers.Timer.Enabled%2A> に `true` 呼び出しと同じには、 <xref:System.Timers.Timer.Start%2A>, 、設定中に <xref:System.Timers.Timer.Enabled%2A> に `false` 呼び出しと同じには、 <xref:System.Timers.Timer.Stop%2A>です。  
  
> [!NOTE]
>  シグナルを発生させる、 <xref:System.Timers.Timer.Elapsed> イベントが常に実行するためキューに配置、 <xref:System.Threading.ThreadPool> スレッドです。 起こりえます、 <xref:System.Timers.Timer.Elapsed> イベントが発生した後、 <xref:System.Timers.Timer.Enabled%2A> にプロパティが設定されている `false`します。 コード例を <xref:System.Timers.Timer.Stop%2A> メソッドは、この競合状態を回避する方法を示しています。  
  
 場合 <xref:System.Timers.Timer.Enabled%2A> に設定されている `true` と <xref:System.Timers.Timer.AutoReset%2A> に設定されている `false`, 、 <xref:System.Timers.Timer> を発生させる、 <xref:System.Timers.Timer.Elapsed> が経過すると、最初の間隔に 1 回だけです。  
  
 後の間隔が設定されている場合、 <xref:System.Timers.Timer> が開始されると、カウントがリセットされます。 たとえば、間隔を 5 秒に設定し、設定すると、 <xref:System.Timers.Timer.Enabled%2A> プロパティを `true`, 、カウントの開始時に <xref:System.Timers.Timer.Enabled%2A> 設定されています。 間隔を 10 秒間の数が 3 秒の場合にリセットする場合、 <xref:System.Timers.Timer.Elapsed> イベントは 13 秒後に初めて <xref:System.Timers.Timer.Enabled%2A> に設定されている `true`します。  
  
> [!NOTE]
>  ビジュアル デザイナー、Microsoft Visual Studio などの設定、 <xref:System.Timers.Timer.Enabled%2A> プロパティを `true` 新しいを挿入するときに <xref:System.Timers.Timer>します。  
  
   
  
## 例  
 次の例のインスタンスを作成、 <xref:System.Timers.Timer> を発生させたオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> 2 秒 \(2000年ミリ秒\) ごとのイベントがイベントのイベント ハンドラーを設定し、タイマーを起動します。 イベント ハンドラーの値を表示する、 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> プロパティごとにこのイベントは発生します。  
  
 [!code-cpp[System.Timers.Timer\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">タイマーが破棄されているために、このプロパティを設定できません。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Timers.Timer.Interval" /> プロパティがより大きい値に設定されました <see cref="F:System.Int32.MaxValue" /> 、タイマーが有効にします。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component. The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization. Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔を取得または設定します。</summary>
        <value>ミリ秒単位での <see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔。 この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。 既定値は 100 ミリ秒です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Timers.Timer.Interval%2A> する頻度を決定するプロパティ、 <xref:System.Timers.Timer.Elapsed> イベントが発生します。<xref:System.Timers.Timer> は、システム時計と同じ解像度を持つクラスは、システム クロックによって異なります。 つまり、 <xref:System.Timers.Timer.Elapsed> 場合システム クロックの分解能によって定義された間隔でイベントが起動、 <xref:System.Timers.Timer.Interval%2A> プロパティは、システム時計の解像度より小さい。 次の例のセット、 <xref:System.Timers.Timer.Interval%2A> 5 ミリ秒プロパティです。 実行すると、 [!INCLUDE[win7](~/includes/win7-md.md)] システム 15 ミリ秒ごとに約 5 ミリ秒間隔ではなく、システム時計が解像度は約 15 ミリ秒、イベントが発生します。  
  
 [!code-csharp[System.Timers.Timer.Interval\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 次のコードを使用すると、現在のシステムのシステム時計の解像度を判断します。  
  
 [!code-csharp[System.Timers.Timer.Interval\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 かどうか、必要とする以上の解像度によって提供されるよりも、 <xref:System.Timers.Timer> クラスまたはシステム クロック、高解像度のマルチ メディア タイマーを使用して、参照してください。 [How to: Use the High\-Resolution Timer](http://msdn.microsoft.com/library/aa964692.aspx)します。  
  
 後の間隔が設定されている場合、 <xref:System.Timers.Timer> が開始されると、カウントがリセットされます。 たとえば、間隔を 5 秒に設定し、設定すると、 <xref:System.Timers.Timer.Enabled%2A> プロパティを `true`, 、カウントの開始時に <xref:System.Timers.Timer.Enabled%2A> 設定されています。 間隔を 10 秒間の数が 3 秒の場合にリセットする場合、 <xref:System.Timers.Timer.Elapsed> イベントは 13 秒後に初めて <xref:System.Timers.Timer.Enabled%2A> に設定されている `true`します。  
  
 場合 <xref:System.Timers.Timer.Enabled%2A> に設定されている `true` と <xref:System.Timers.Timer.AutoReset%2A> に設定されている `false`, 、 <xref:System.Timers.Timer> を発生させる、 <xref:System.Timers.Timer.Elapsed> が経過すると、最初の間隔に 1 回だけです。<xref:System.Timers.Timer.Enabled%2A> 設定されている、 `false`です。  
  
> [!NOTE]
>  場合 <xref:System.Timers.Timer.Enabled%2A> と <xref:System.Timers.Timer.AutoReset%2A> に設定されて `false`, 、およびタイマーが既に有効になって、設定、 <xref:System.Timers.Timer.Interval%2A> プロパティと、 <xref:System.Timers.Timer.Elapsed> イベントが 1 回発生するかのよう、 <xref:System.Timers.Timer.Enabled%2A> プロパティが設定されている `true`します。 間隔を設定すると、イベントを発生させることがなく、一時的に設定できます、 <xref:System.Timers.Timer.Enabled%2A> プロパティを `true`, 、設定されて、 <xref:System.Timers.Timer.Interval%2A> プロパティを希望する時間間隔にすぐに設定し、 <xref:System.Timers.Timer.Enabled%2A> プロパティ `false`します。  
  
   
  
## 例  
 次の例のインスタンスを作成、 <xref:System.Timers.Timer> を発生させたオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> 2 秒 \(2000年ミリ秒\) ごとのイベントがイベントのイベント ハンドラーを設定し、タイマーを起動します。 イベント ハンドラーの値を表示する、 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> プロパティごとにこのイベントは発生します。  
  
 [!code-cpp[System.Timers.Timer\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">間隔は、0 以下です。  
  
 または  
  
 間隔がより大きい <see cref="F:System.Int32.MaxValue" />, 、タイマーが現在有効になっているとします。 \(タイマーが現在有効でない場合は、例外はスローされませんが有効にするまでです。\)</exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>デザイン モードで <see cref="T:System.Timers.Timer" /> をコンテナーにバインドするサイトを取得または設定します。</summary>
        <value>
          <see cref="T:System.Timers.Timer" /> オブジェクトをコンテナーにバインドするサイトを表す <see cref="T:System.ComponentModel.ISite" /> インターフェイス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サイトのバインド、 <xref:System.ComponentModel.Component> に、 <xref:System.ComponentModel.Container> と、それらの間の通信を有効にするだけでなく、コンテナーは、そのコンポーネントを管理するための手段を提供することです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Timers.Timer.Enabled" /> を <see langword="true" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 <xref:System.Timers.Timer.Start%2A> と呼びますと <xref:System.Timers.Timer.AutoReset%2A> に設定されている `false`, 、 <xref:System.Timers.Timer> を発生させる、 <xref:System.Timers.Timer.Elapsed> が経過すると、最初の間隔に 1 回だけです。 場合 <xref:System.Timers.Timer.Start%2A> と呼びますと <xref:System.Timers.Timer.AutoReset%2A> は `true`, 、 <xref:System.Timers.Timer> を発生させます、 <xref:System.Timers.Timer.Elapsed> イベント最初の時間間隔が経過して、指定した間隔でイベントが発生し続けます。  
  
 設定してタイミングを開始することもできます。 <xref:System.Timers.Timer.Enabled%2A> に `true`します。  
  
> [!NOTE]
>  場合 <xref:System.Timers.Timer.AutoReset%2A> は `false`, 、 <xref:System.Timers.Timer.Start%2A> カウントをもう一度開始するのには、メソッドを呼び出す必要があります。  
  
 呼び出し、 <xref:System.Timers.Timer.Start%2A> タイマーが有効になっている場合は、メソッドには影響を及ぼしません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="T:System.Timers.Timer" /> の作成時に設定された間隔が <see cref="F:System.Int32.MaxValue" /> \+ 1 以上か、0 未満に設定されています。</exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Timers.Timer.Enabled" /> を <see langword="false" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定してタイミングを停止することも <xref:System.Timers.Timer.Enabled%2A> に `false`します。  
  
> [!NOTE]
>  シグナルを発生させる、 <xref:System.Timers.Timer.Elapsed> イベントが常に実行するためキューに配置、 <xref:System.Threading.ThreadPool> スレッド、スレッドは同じ 1 つのイベント処理メソッドが実行されるようにへの呼び出し、 <xref:System.Timers.Timer.Stop%2A> メソッドが別のスレッドで実行します。 起こりえます、 <xref:System.Timers.Timer.Elapsed> イベントが発生した後、 <xref:System.Timers.Timer.Stop%2A> メソッドが呼び出されます。 次のセクションのコード例では、この競合状態を回避する 1 つの方法を示します。  
  
   
  
## 例  
 次の例のインスタンスを作成、 `System.Timers.Timer` を発生させたオブジェクト、 <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> イベント \(2,000 ミリ秒\)、2 秒ごと、イベントのイベント ハンドラーを設定し、タイマーを起動します。 イベント ハンドラーの値を表示する、 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=fullName> プロパティごとにこのイベントは発生します。 ユーザーは、Enter キーを押すを呼び出して、  <xref:System.Timers.Timer.Stop%2A> 、アプリケーションを終了する前にメソッドです。  
  
 [!code-csharp[System.Timers.Timer\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 次のコード例を呼び出すスレッドを防ぐために 1 つの方法を示しています、 <xref:System.Timers.Timer.Stop%2A> メソッドのレベルまで、現在実行中の <xref:System.Timers.Timer.Elapsed> イベント終了すると、2 つの操作を防止するためにも <xref:System.Timers.Timer.Elapsed> \(再入可能性とも呼ばれます\)、同時にイベント ハンドラーの実行からのイベントです。  
  
 この例では、100 のテストの実行を実行します。 テストを実行するたびに、150 のミリ秒単位の間隔でタイマーが開始します。 イベント ハンドラーを使用して、 <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> 50 からの長さは 200 ミリ秒をランダムに変化するタスクをシミュレートするメソッドです。 テスト メソッドでは、1 秒間待機し、タイマーを停止し、コントロールのスレッドも起動されます。 コントロールのスレッドが、タイマーを停止すると、イベントが処理される、コントロールのスレッドは続行する前に、イベントが終了するまでに待つ必要があります。  
  
 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> メソッドのオーバー ロードを使用して再入可能性を回避し、コントロールのスレッドが実行中のイベントが終了するまでの操作を続行するを防ぐためです。 イベント ハンドラーを使用して、 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> を 1 に、変数が、値が 0 では現在場合にのみ、コントロールを設定します。 これは、分割不可能な操作です。 戻り値が 0 の場合は、制御変数が 1 に設定されているし、イベント ハンドラーが行われます。 戻り値が 0 以外の場合は、イベントは単に再入を破棄します。 \(そうで、すべてのイベントを実行するために必要な場合、 <xref:System.Threading.Monitor> クラスは、イベントを同期を効果的になります\)。 イベント ハンドラーの終了時に設定制御変数戻るゼロにします。 例では、記録を実行、再入が原因で破棄されたされ後に、発生したイベントの総数、 <xref:System.Timers.Timer.Stop%2A> メソッドが呼び出されました。  
  
 コントロールのスレッドを使用して、 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> \-1 \(マイナス 1 つ\) を変数にその値が 0 では現在場合にのみ、コントロールを設定するメソッドです。 分割不可能な操作では、0 以外が返された場合、イベントが実行中です。 コントロールのスレッドは待機し、もう一度試みます。 この例では、コントロールのスレッドが終了するイベントを待機しなければならなかった回数を記録します。  
  
 [!code-csharp[Timer.Stop\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを取得または設定します。</summary>
        <value>指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを表す <see cref="T:System.ComponentModel.ISynchronizeInvoke" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに<xref:System.Timers.Timer.SynchronizingObject%2A>は`null`、処理するメソッド、<xref:System.Timers.Timer.Elapsed>イベントは、システムのスレッド プールのスレッドで呼び出されます。 システム スレッド プールの詳細については、次を参照してください。<xref:System.Threading.ThreadPool>です。  
  
 ときに、<xref:System.Timers.Timer.Elapsed>可能性がありますか、例外の結果が動作しないシステム スレッド プールを介したコンポーネントにアクセスする、ボタンなどの visual Windows フォームのコンポーネントでイベントが処理されます。 この特殊効果を設定して回避<xref:System.Timers.Timer.SynchronizingObject%2A>を処理するメソッドを停止する Windows フォームのコンポーネントを<xref:System.Timers.Timer.Elapsed>コンポーネントが作成された同じスレッドで呼び出されるイベント。  
  
> [!NOTE]
>  場合でも、<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティは使用されません`null`、<xref:System.Timers.Timer.Elapsed>後にイベントが発生する可能性が、<xref:System.Timers.Timer.Dispose%2A>または<xref:System.Timers.Timer.Stop%2A>メソッドが呼び出されたか、後、<xref:System.Timers.Timer.Enabled%2A>プロパティに設定されて`false`ため、シグナルを発生させる、<xref:System.Timers.Timer.Elapsed>イベントが常にスレッド プールのスレッドで実行をキューに登録します。 イベント ハンドラーを示すフラグを設定するは、この競合状態を解決するのには 1 つの方法、<xref:System.Timers.Timer.Elapsed>を後続のイベントを無視するイベントです。  
  
 場合、<xref:System.Timers.Timer>が Visual Studio 内で、Windows フォーム デザイナーで使用<xref:System.Timers.Timer.SynchronizingObject%2A>を含むコントロールに自動的に設定されている、<xref:System.Timers.Timer>です。 配置する場合など、<xref:System.Timers.Timer>をデザイナーで`Form1`\(から継承される<xref:System.Windows.Forms.Form>\) では、<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティの<xref:System.Timers.Timer>のインスタンスに設定されている`Form1`です。  
  
   
  
## 例  
 次の例は、非常に単純なテキスト ファイル エディターとして機能する Windows フォーム アプリケーションです。 テキスト ボックス内のテキストが保存されていないときに、アプリをユーザーに確認 1 分間隔でそのユーザーがテキスト ボックスの内容を保存するかどうか。  これを行う、<xref:System.Timers.Timer.Interval%2A>プロパティが 1 分 \(60,000 ミリ秒\) に設定と<xref:System.Timers.Timer.SynchronizingObject%2A>プロパティに設定されている、<xref:System.Windows.Forms.Form>オブジェクト。  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 The example requires that you add the following controls to the form:  
  
-   A <xref:System.Windows.Forms.TextBox> control named `TextBox1` \(its default name\).  
  
-   A <xref:System.Windows.Forms.Button> control named `Button1` \(its default name\).  
  
-   A <xref:System.Windows.Forms.SaveFileDialog> control named `SaveSaveFileDialog1` \(its default name\) .  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>