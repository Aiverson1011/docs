<Type Name="SmtpClient" FullName="System.Net.Mail.SmtpClient">
  <TypeSignature Language="C#" Value="public class SmtpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SmtpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Mail.SmtpClient" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Mail</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("SmtpClient and its network of types are poorly designed, we strongly recommend you use https://github.com/jstedfast/MailKit and https://github.com/jstedfast/MimeKit instead")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>簡易メール転送プロトコル \(SMTP\) を使用して電子メールを送信するアプリケーションを使用します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Mail.SmtpClient> 配信用の SMTP サーバーに電子メールを送信するクラスを使用します。 利用可能な RFC 2821 で SMTP プロトコルが定義されている [http:\/\/www.ietf.org](http://www.ietf.org/)します。  
  
 次の表に示すようにクラスを使用して、使用して送信される電子メール メッセージの構築 <xref:System.Net.Mail.SmtpClient>します。  
  
|クラス|説明|  
|---------|--------|  
|<xref:System.Net.Mail.Attachment>|添付をファイルに表します。 このクラスを使用すると、ファイル、ストリーム、またはテキストを電子メール メッセージに添付できます。|  
|<xref:System.Net.Mail.MailAddress>|送信者と受信者の電子メール アドレスを表します。|  
|<xref:System.Net.Mail.MailMessage>|電子メール メッセージを表します。|  
  
 構築し、を使用して電子メール メッセージの送信を <xref:System.Net.Mail.SmtpClient>, 、次の情報を指定する必要があります。  
  
-   電子メールを送信するために使用する SMTP ホスト サーバー。 参照してください、 <xref:System.Net.Mail.SmtpClient.Host%2A> と <xref:System.Net.Mail.SmtpClient.Port%2A> プロパティです。  
  
-   SMTP サーバーで必要な場合、認証の資格情報。<xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティを参照してください。  
  
-   送信者の電子メール アドレス。 参照してください、 <xref:System.Net.Mail.SmtpClient.Send%2A> と <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドが、 `from` パラメーター。 また、 <xref:System.Net.Mail.MailMessage.From%2A?displayProperty=fullName> プロパティです。  
  
-   電子メール アドレスまたは受信者のアドレス。 参照してください、 <xref:System.Net.Mail.SmtpClient.Send%2A> と <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドが、 `recipient` パラメーター。 また、 <xref:System.Net.Mail.MailMessage.To%2A?displayProperty=fullName> プロパティです。  
  
-   メッセージの内容。 参照してください、 <xref:System.Net.Mail.SmtpClient.Send%2A> と <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドが、 `body` パラメーター。 また、 <xref:System.Net.Mail.MailMessage.Body%2A?displayProperty=fullName> プロパティです。  
  
 電子メール メッセージに添付ファイルを含めるを使用して最初に、添付ファイルを作成、 <xref:System.Net.Mail.Attachment> クラス、およびを使って、メッセージに追加し、 <xref:System.Net.Mail.MailMessage.Attachments%2A?displayProperty=fullName> プロパティです。 受信者と添付ファイルのファイルの種類で使用される電子メール リーダー、によって、一部の受信者は可能性があります、添付ファイルを読み取ることができません。 元の形式で添付ファイルを表示できないクライアントの場合は、使用して代替ビューを指定することができます、 <xref:System.Net.Mail.MailMessage.AlternateViews%2A?displayProperty=fullName> プロパティです。  
  
 アプリケーションを使用する、またはマシン構成ファイルを指定するすべてのホスト、ポート、および資格情報の値を既定 <xref:System.Net.Mail.SmtpClient> オブジェクトです。 詳細については、「[mailSettings for system.net](http://msdn.microsoft.com/ja-jp/54f0f153-17e5-4f49-afdc-deadb940c9c1)」を参照してください。  
  
 SMTP サーバーに送信する電子メールの待機中に、電子メール メッセージとブロックを送信する 1 つの同期を使用して <xref:System.Net.Mail.SmtpClient.Send%2A> メソッドです。 電子メールの送信中の実行を続行する、プログラムのメイン スレッドを許可するように、非同期のいずれかの操作を使用して <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドです。<xref:System.Net.Mail.SmtpClient.SendCompleted> イベントが発生したときに、 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 操作が完了します。 このイベントを提供するには、追加する必要があります、 <xref:System.Net.Mail.SendCompletedEventHandler> に委任 <xref:System.Net.Mail.SmtpClient.SendCompleted>します。<xref:System.Net.Mail.SendCompletedEventHandler> デリゲートでの通知を処理するコールバック メソッドを参照する必要があります <xref:System.Net.Mail.SmtpClient.SendCompleted> イベントです。 非同期の電子メール転送を取り消す場合にを使用して、 <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> メソッドです。  
  
> [!NOTE]
>  進行中の電子メールの送信が呼び出すと <xref:System.Net.Mail.SmtpClient.SendAsync%2A> または <xref:System.Net.Mail.SmtpClient.Send%2A> にお届け、 <xref:System.InvalidOperationException>です。  
  
 現在のインスタンスによって確立された接続、 <xref:System.Net.Mail.SmtpClient> アプリケーションが同一の SMTP サーバーに複数のメッセージを送信したい場合に、SMTP サーバーへのクラスが再利用になることができます。 これは、認証や暗号化を使用すると、SMTP サーバーへの接続を確立します。 認証および TLS セッションを確立するプロセスは、負荷の高い操作を指定できます。 同じ SMTP サーバーに大量の電子メールを送信するときに、メッセージごとに接続を再確立するための要件は、パフォーマンスに大きな影響を与える可能性があります。 ニュースレターの配布、電子メールのステータス更新を送信またはアラートを電子メールで送信する大量の電子メール アプリケーションの数があります。 多くの電子メール クライアント アプリケーションは、ユーザーが SMTP サーバーへの接続が確立されたときに後で送信される多くの電子メール メッセージを作成できますオフラインのモードをサポートします。 特定の SMTP サーバー \(インターネット サービス プロバイダーによって提供される\) を他の SMTP サーバーにこの電子メールを転送するすべての SMTP メッセージを送信する電子メール クライアントで一般的になります。  
  
 <xref:System.Net.Mail.SmtpClient> クラスの実装は、同じサーバーへのすべてのメッセージに対して接続が再度確立のオーバーヘッドを回避できますに SMTP 接続をプールします。 アプリケーションで再利用と同じことがあります <xref:System.Net.Mail.SmtpClient> 同じ SMTP サーバーと多数の SMTP サーバーに多くのさまざまな電子メールを送信するオブジェクト。 その結果、アプリケーションが終了したら判断する方法はありませんを使用して、 <xref:System.Net.Mail.SmtpClient> オブジェクトとそれをクリーンアップするようにします。  
  
 SMTP セッションの終了すると、クライアントが接続を終了したいは、QUIT メッセージを送信するメッセージがあることを示すために、サーバーに送信する必要があります。 これにより、サーバーがクライアントからの接続に関連付けられているリソースを解放し、クライアントによって送信されたメッセージを処理できます。  
  
 <xref:System.Net.Mail.SmtpClient> クラスには \[いいえ `Finalize` メソッド、アプリケーションを呼び出す必要がありますので <xref:System.Net.Mail.SmtpClient.Dispose%2A> を明示的にリソースを解放します。<xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドは、指定された SMTP サーバーへのすべての確立された接続を反復処理、 <xref:System.Net.Mail.SmtpClient.Host%2A> プロパティと、TCP 接続を正常に終了後に終了メッセージを送信します。<xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドで使用されるアンマネージ リソースも解放、 <xref:System.Net.Sockets.Socket> オプションでマネージ リソースを破棄します。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> を使い終わったら <xref:System.Net.Mail.SmtpClient> を呼び出します。<xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドによって、<xref:System.Net.Mail.SmtpClient> は使用不可の状態になります。 呼び出した後 <xref:System.Net.Mail.SmtpClient.Dispose%2A>, 、に対するすべての参照を解放する必要があります、 <xref:System.Net.Mail.SmtpClient> ガベージ コレクターがメモリをクリアできるようにする、 <xref:System.Net.Mail.SmtpClient> によって占有されていた。  
  
   
  
## 例  
 次のコード例では、電子メール メッセージを非同期的に送信を示します。  
  
 [!code-cpp[NclMailAsync\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Net.Mime" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Net.Mail.SmtpClient" /> 構成ファイルの設定を使用して、クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクター、 <xref:System.Net.Mail.SmtpClient.Host%2A>, 、<xref:System.Net.Mail.SmtpClient.Credentials%2A>, 、および <xref:System.Net.Mail.SmtpClient.Port%2A> の新しいプロパティ <xref:System.Net.Mail.SmtpClient> アプリケーションまたはマシン構成ファイルで設定を使用しています。 詳細については、「[mailSettings for system.net](http://msdn.microsoft.com/ja-jp/54f0f153-17e5-4f49-afdc-deadb940c9c1)」を参照してください。  
  
   
  
## 例  
 次のコード例では、電子メール メッセージの送信を示します。  
  
 [!code-cpp[NclMailSync\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#4)]
 [!code-csharp[NclMailSync\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#4)]  
  
 アプリケーションまたはマシン構成ファイルで \< mailSettings \> ノードの例は、次を参照してください。 [mailSettings for system.net](http://msdn.microsoft.com/ja-jp/54f0f153-17e5-4f49-afdc-deadb940c9c1)します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.Mail.SmtpPermission">to construct an <see cref="T:System.Net.Mail.SmtpClient" />. Associated enumeration: <see cref="F:System.Net.Mail.SmtpAccess.Connect" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient (string host);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">A <see cref="T:System.String" /> 名または SMTP トランザクションで使用するホスト コンピューターの IP アドレスを含みます。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Net.Mail.SmtpClient" /> クラスにより、指定した SMTP サーバーを使用して電子メールを送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `host` の値を初期化するためにパラメーターが使用される、 <xref:System.Net.Mail.SmtpClient.Host%2A> プロパティです。<xref:System.Net.Mail.SmtpClient.Credentials%2A> と <xref:System.Net.Mail.SmtpClient.Port%2A> プロパティは、アプリケーションまたはマシン構成ファイルで設定を使用して初期化します。 場合 `host` は `null` に等しいかそれ <xref:System.String.Empty?displayProperty=fullName>, 、<xref:System.Net.Mail.SmtpClient.Host%2A> アプリケーションまたはマシン構成ファイルで設定を使用して初期化します。  
  
 詳細については、アプリケーションやマシン構成ファイルを使用して、次を参照してください。 [mailSettings for system.net](http://msdn.microsoft.com/ja-jp/54f0f153-17e5-4f49-afdc-deadb940c9c1)します。 使用して情報を指定する場合 <xref:System.Net.Mail.SmtpClient> コンス トラクターまたはプロパティでこの情報は、構成ファイルの設定をオーバーライドします。  
  
   
  
## 例  
 次のコード例では、このコンス トラクターを呼び出す方法を示します。  
  
 [!code-cpp[NclMailSync\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#3)]
 [!code-csharp[NclMailSync\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.Mail.SmtpPermission">to construct an <see cref="T:System.Net.Mail.SmtpClient" />. Associated enumeration: <see cref="F:System.Net.Mail.SmtpAccess.Connect" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor(System.String,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">A <see cref="T:System.String" /> 名または SMTP トランザクションで使用されるホストの IP アドレスを含みます。</param>
        <param name="port">
          <see cref="T:System.Int32" /> で使用されるポートが含まれる 0 より大きい <c>host</c>します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Net.Mail.SmtpClient" /> クラスにより、指定した SMTP サーバーとポートを使用して電子メールを送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `host` と `port` パラメーターの値の設定、 <xref:System.Net.Mail.SmtpClient.Host%2A> と <xref:System.Net.Mail.SmtpClient.Port%2A> プロパティそれぞれします。 場合 `host` は `null` に等しいかそれ <xref:System.String.Empty?displayProperty=fullName>, 、<xref:System.Net.Mail.SmtpClient.Host%2A> アプリケーションまたはマシン構成ファイルで設定を使用して初期化します。 場合 `port` 0 の場合は、 <xref:System.Net.Mail.SmtpClient.Port%2A> アプリケーションまたはマシン構成ファイルで設定を使用して初期化します。<xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティは、アプリケーションまたはマシン構成ファイルで設定を使用して、初期化します。  
  
 詳細については、アプリケーションやマシン構成ファイルを使用して、次を参照してください。 [mailSettings for system.net](http://msdn.microsoft.com/ja-jp/54f0f153-17e5-4f49-afdc-deadb940c9c1)します。 使用して情報を指定する場合 <xref:System.Net.Mail.SmtpClient> コンス トラクターまたはプロパティでこの情報は、構成ファイルの設定をオーバーライドします。  
  
   
  
## 例  
 次のコード例では、このコンス トラクターを呼び出す方法を示します。  
  
 [!code-cpp[NclMailSync\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> は 0 未満には設定できません。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">to specify the port. Associated enumeration: <see cref="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.ClientCertificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Client certificates not used")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509CertificateCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定する証明書は、Secure Sockets Layer \(SSL\) 接続を確立するために使用する必要があります。</summary>
        <value>
          <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />, 、1 つまたは複数のクライアント証明書を保持します。 既定値は、構成ファイルのメールの構成属性から派生します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クライアント証明書は、既定で、省略可能です。ただし、サーバーの構成では、クライアントが最初の接続のネゴシエーションの一部として有効な証明書を提示する必要があります。  
  
> [!NOTE]
>  フレームワークは、SSL セッションを作成にキャッシュし、可能であれば、新しい要求のキャッシュされているセッションを再利用しようとします。 フレームワークでの最初の要素を使用して SSL セッションを再利用しようとすると、 <xref:System.Net.Mail.SmtpClient.ClientCertificates%2A> \(かどうかは 1 つ\)、または匿名のセッションを再利用しようと <xref:System.Net.Mail.SmtpClient.ClientCertificates%2A> が空です。  
  
   
  
## 例  
 次のコード例では、SMTP サーバーで SSL 接続を確立し、接続を使用して電子メールを送信します。  
  
 [!code-csharp[NclSSLMailSync\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSSLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentialsByHost Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentialsByHost Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentialsByHost</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または送信者の認証に使用する資格情報を設定します。</summary>
        <value>
          <see cref="T:System.Net.ICredentialsByHost" /> 認証を使用する資格情報を表すまたは <see langword="null" /> 資格情報が指定されていない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部の SMTP サーバーでは、サーバーは、代わりに電子メールを送信する前にクライアントを認証することが必要です。 既定のネットワーク資格情報を使用するに設定することができます、 <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> に `true` このプロパティを設定する代わりにします。 場合、 <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> にプロパティが設定されている `false,` 値を設定し、 <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティがサーバーに接続するときに資格情報に使用されます。 場合、 <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> にプロパティが設定されている `false` と <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティが設定されていない、メールが匿名でのサーバーに送信されます。  
  
 アプリケーションとコンピューターの構成ファイルを使用して資格情報を指定することもできます。 詳細については、「[mailSettings for system.net](http://msdn.microsoft.com/ja-jp/54f0f153-17e5-4f49-afdc-deadb940c9c1)」を参照してください。 使用して情報を指定する場合、 <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティには、この情報は、構成ファイルの設定をオーバーライドします。  
  
> [!CAUTION]
>  基本認証の資格情報を指定する場合は、クリア テキストでサーバーに送信されます。 これは、により、資格情報を表示、および他のユーザーが使用しているためセキュリティ上の問題が発生することができます。  
  
   
  
## 例  
 次のコード例では、電子メールを送信するために使用する資格情報の設定を示しています。  
  
 [!code-cpp[NclMailSync\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">電子メールが送信されるときに、このプロパティの値を変更することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeliveryFormat">
      <MemberSignature Language="C#" Value="public System.Net.Mail.SmtpDeliveryFormat DeliveryFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Mail.SmtpDeliveryFormat DeliveryFormat" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.DeliveryFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SmtpDeliveryFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定で使用される配信形式 <see cref="T:System.Net.Mail.SmtpClient" /> 電子メールを送信します。</summary>
        <value>
          <see cref="T:System.Net.Mail.SmtpDeliveryFormat" /> を返します。  
  
 使用される配信形式 <see cref="T:System.Net.Mail.SmtpClient" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliveryMethod">
      <MemberSignature Language="C#" Value="public System.Net.Mail.SmtpDeliveryMethod DeliveryMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Mail.SmtpDeliveryMethod DeliveryMethod" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.DeliveryMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SmtpDeliveryMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>どのように送信する電子メール メッセージの処理を指定します。</summary>
        <value>
          <see cref="T:System.Net.Mail.SmtpDeliveryMethod" /> 電子メール メッセージの配信方法を示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 配信方法は次のとおりです。  
  
-   SMTP サーバーの場合です。  
  
-   Iis を電子メールをピックアップ ディレクトリに移動し、メッセージを提供します。  
  
-   電子メールで指定されたディレクトリに移動 <xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A> 別のアプリケーションによって後で配信します。  
  
 このプロパティの既定値は、マシン上で設定することもできます。 またはアプリケーション構成ファイル。 加えられた変更、 <xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A> プロパティは、構成ファイルの設定をオーバーライドします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="P:System.Net.Configuration.SmtpSection.DeliveryMethod" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>終了メッセージを SMTP サーバーに送信する、適切に TCP 接続を終了およびの現在のインスタンスによって使用されているすべてのリソースを解放、 <see cref="T:System.Net.Mail.SmtpClient" /> クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のインスタンスによって確立された接続、 <xref:System.Net.Mail.SmtpClient> アプリケーションが同一の SMTP サーバーに複数のメッセージを送信したい場合に、SMTP サーバーへのクラスが再利用になることができます。 これは、認証や暗号化を使用すると、SMTP サーバーへの接続を確立します。 認証および TLS セッションを確立するプロセスは、負荷の高い操作を指定できます。 同じ SMTP サーバーに大量の電子メールを送信するときに、メッセージごとに接続を再確立するための要件は、パフォーマンスに大きな影響を与える可能性があります。 ニュースレターの配布、電子メールのステータス更新を送信またはアラートを電子メールで送信する大量の電子メール アプリケーションの数があります。 多くの電子メール クライアント アプリケーションは、ユーザーが SMTP サーバーへの接続が確立されたときに後で送信される多くの電子メール メッセージを作成できますオフラインのモードをサポートします。 特定の SMTP サーバー \(インターネット サービス プロバイダーによって提供される\) を他の SMTP サーバーにこの電子メールを転送するすべての SMTP メッセージを送信する電子メール クライアントで一般的になります。  
  
 <xref:System.Net.Mail.SmtpClient> クラスの実装は、同じサーバーへのすべてのメッセージに対して接続が再度確立のオーバーヘッドを回避できますに SMTP 接続をプールします。 アプリケーションで再利用と同じことがあります <xref:System.Net.Mail.SmtpClient> 同じ SMTP サーバーと多数の SMTP サーバーに多くのさまざまな電子メールを送信するオブジェクト。 その結果、アプリケーションが終了したら判断する方法はありませんを使用して、 <xref:System.Net.Mail.SmtpClient> オブジェクトとそれをクリーンアップするようにします。  
  
 SMTP セッションの終了すると、クライアントが接続を終了したいは、QUIT メッセージを送信するメッセージがあることを示すために、サーバーに送信する必要があります。 これにより、サーバーがクライアントからの接続に関連付けられているリソースを解放し、クライアントによって送信されたメッセージを処理できます。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> TCP 接続を正常に終了して後にメソッドが確立されているすべて接続し、各 SMTP サーバーに終了メッセージを送信を反復処理します。 これらのメソッドによって使用されているアンマネージ リソースを解放します。、 <xref:System.Net.Sockets.Socket> オプションでマネージ リソースを破棄します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>終了メッセージを SMTP サーバーに送信する、適切に TCP 接続を終了およびの現在のインスタンスによって使用されているすべてのリソースを解放、 <see cref="T:System.Net.Mail.SmtpClient" /> クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のインスタンスによって確立された接続、 <xref:System.Net.Mail.SmtpClient> アプリケーションが同一の SMTP サーバーに複数のメッセージを送信したい場合に、SMTP サーバーへのクラスが再利用になることができます。 これは、認証や暗号化を使用すると、SMTP サーバーへの接続を確立します。 認証および TLS セッションを確立するプロセスは、負荷の高い操作を指定できます。 同じ SMTP サーバーに大量の電子メールを送信するときに、メッセージごとに接続を再確立するための要件は、パフォーマンスに大きな影響を与える可能性があります。 ニュースレターの配布、電子メールのステータス更新を送信またはアラートを電子メールで送信する大量の電子メール アプリケーションの数があります。 多くの電子メール クライアント アプリケーションは、ユーザーが SMTP サーバーへの接続が確立されたときに後で送信される多くの電子メール メッセージを作成できますオフラインのモードをサポートします。 特定の SMTP サーバー \(インターネット サービス プロバイダーによって提供される\) を他の SMTP サーバーにこの電子メールを転送するすべての SMTP メッセージを送信する電子メール クライアントで一般的になります。  
  
 <xref:System.Net.Mail.SmtpClient> クラスの実装は、同じサーバーへのすべてのメッセージに対して接続が再度確立のオーバーヘッドを回避できますに SMTP 接続をプールします。 アプリケーションで再利用と同じことがあります <xref:System.Net.Mail.SmtpClient> 同じ SMTP サーバーと多数の SMTP サーバーに多くのさまざまな電子メールを送信するオブジェクト。 その結果、アプリケーションが終了したら判断する方法はありませんを使用して、 <xref:System.Net.Mail.SmtpClient> オブジェクトとそれをクリーンアップするようにします。  
  
 SMTP セッションの終了すると、クライアントが接続を終了したいは、QUIT メッセージを送信するメッセージがあることを示すために、サーバーに送信する必要があります。 これにより、サーバーがクライアントからの接続に関連付けられているリソースを解放し、クライアントによって送信されたメッセージを処理できます。  
  
 呼び出す、 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドを <xref:System.Net.Mail.SmtpClient> 非同期で実行されているオブジェクト <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 操作では、送信操作を同様キャンセルされます、 <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> メソッドが呼び出されています。  
  
 <xref:System.Net.Mail.SmtpClient> クラスには \[いいえ `Finalize` メソッドです。 アプリケーションを呼び出す必要があります <xref:System.Net.Mail.SmtpClient.Dispose%2A> を明示的にリソースを解放します。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドは、指定された SMTP サーバーへのすべての確立された接続を反復処理、 <xref:System.Net.Mail.SmtpClient.Host%2A> プロパティと、TCP 接続を正常に終了後に終了メッセージを送信します。<xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドは、基になるによって使用されているアンマネージ リソースも解放 <xref:System.Net.Sockets.Socket>します。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> を使い終わったら <xref:System.Net.Mail.SmtpClient> を呼び出します。<xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドによって、<xref:System.Net.Mail.SmtpClient> は使用不可の状態になります。 呼び出した後 <xref:System.Net.Mail.SmtpClient.Dispose%2A>, 、に対するすべての参照を解放する必要があります、 <xref:System.Net.Mail.SmtpClient> ガベージ コレクターがメモリをクリアできるようにする、 <xref:System.Net.Mail.SmtpClient> によって占有されていた。  
  
 詳細については、[Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) および [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9) を参照してください。  
  
> [!NOTE]
>  <xref:System.Net.Mail.SmtpClient.Dispose%2A> への最後の参照を解放する前に、必ず <xref:System.Net.Mail.SmtpClient> を呼び出してください。 それ以外の場合、ガベージ コレクターがメモリをクリアできるように、使用されているリソースは解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Does nothing at the moment.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>終了メッセージを SMTP サーバーに送信 TCP 接続を終了、適切の現在のインスタンスによって使用されているすべてのリソースを解放、 <see cref="T:System.Net.Mail.SmtpClient" /> クラス、および必要に応じてマネージ リソースを破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のインスタンスによって確立された接続、 <xref:System.Net.Mail.SmtpClient> アプリケーションが同一の SMTP サーバーに複数のメッセージを送信したい場合に、SMTP サーバーへのクラスが再利用になることができます。 これは、認証や暗号化を使用すると、SMTP サーバーへの接続を確立します。 認証および TLS セッションを確立するプロセスは、負荷の高い操作を指定できます。 同じ SMTP サーバーに大量の電子メールを送信するときに、メッセージごとに接続を再確立するための要件は、パフォーマンスに大きな影響を与える可能性があります。 ニュースレターの配布、電子メールのステータス更新を送信またはアラートを電子メールで送信する大量の電子メール アプリケーションの数があります。 多くの電子メール クライアント アプリケーションは、ユーザーが SMTP サーバーへの接続が確立されたときに後で送信される多くの電子メール メッセージを作成できますオフラインのモードをサポートします。 特定の SMTP サーバー \(インターネット サービス プロバイダーによって提供される\) を他の SMTP サーバーにこの電子メールを転送するすべての SMTP メッセージを送信する電子メール クライアントで一般的になります。  
  
 <xref:System.Net.Mail.SmtpClient> クラスの実装は、同じサーバーへのすべてのメッセージに対して接続が再度確立のオーバーヘッドを回避できますに SMTP 接続をプールします。 アプリケーションで再利用と同じことがあります <xref:System.Net.Mail.SmtpClient> 同じ SMTP サーバーと多数の SMTP サーバーに多くのさまざまな電子メールを送信するオブジェクト。 その結果、アプリケーションが終了したら判断する方法はありませんを使用して、 <xref:System.Net.Mail.SmtpClient> オブジェクトとそれをクリーンアップするようにします。  
  
 SMTP セッションの終了すると、クライアントが接続を終了したいは、QUIT メッセージを送信するメッセージがあることを示すために、サーバーに送信する必要があります。 これにより、サーバーがクライアントからの接続に関連付けられているリソースを解放し、クライアントによって送信されたメッセージを処理できます。  
  
 呼び出す、 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドを <xref:System.Net.Mail.SmtpClient> 非同期で実行されているオブジェクト <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 操作では、送信操作を同様キャンセルされます、 <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> メソッドが呼び出されています。  
  
 <xref:System.Net.Mail.SmtpClient> クラスには \[いいえ `Finalize` メソッドです。 アプリケーションを呼び出す必要があります <xref:System.Net.Mail.SmtpClient.Dispose%2A> を明示的にリソースを解放します。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドは、指定された SMTP サーバーへのすべての確立された接続を反復処理、 <xref:System.Net.Mail.SmtpClient.Host%2A> プロパティと、TCP 接続を正常に終了後に終了メッセージを送信します。<xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドで使用されるアンマネージ リソースも解放、 <xref:System.Net.Sockets.Socket> オプションでマネージ リソースを破棄します。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> を使い終わったら <xref:System.Net.Mail.SmtpClient> を呼び出します。<xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドによって、<xref:System.Net.Mail.SmtpClient> は使用不可の状態になります。 呼び出した後 <xref:System.Net.Mail.SmtpClient.Dispose%2A>, 、に対するすべての参照を解放する必要があります、 <xref:System.Net.Mail.SmtpClient> ガベージ コレクターがメモリをクリアできるようにする、 <xref:System.Net.Mail.SmtpClient> によって占有されていた。  
  
 詳細については、[Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) および [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9) を参照してください。  
  
> [!NOTE]
>  <xref:System.Net.Mail.SmtpClient.Dispose%2A> への最後の参照を解放する前に、必ず <xref:System.Net.Mail.SmtpClient> を呼び出してください。 それ以外の場合、ガベージ コレクターがメモリをクリアできるように、使用されているリソースは解放されません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSsl">
      <MemberSignature Language="C#" Value="public bool EnableSsl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSsl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.EnableSsl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定するかどうか、 <see cref="T:System.Net.Mail.SmtpClient" /> Secure Sockets Layer \(SSL\) を使用して接続を暗号化します。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Net.Mail.SmtpClient" /> SSL を使用しない場合は、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> プロパティは、指定の SMTP メール サーバーへのアクセスに SSL を使用するかどうかを指定します。  
  
 このプロパティの既定値は、マシン上で設定することもできます。 またはアプリケーション構成ファイル。 加えられた変更、 <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> プロパティは、構成ファイルの設定をオーバーライドします。  
  
 <xref:System.Net.Mail.SmtpClient> クラスのみをサポート、SMTP サービスの拡張 smtp のセキュリティで保護されたトランスポート層セキュリティ経由での RFC 3207 で定義されています。 このモードで暗号化されていないチャネルで SMTP セッションを開始し、SSL を使用してセキュリティで保護された通信への切り替えをサーバーにクライアントによって STARTTLS コマンドが発行されたします。 詳細についてはインターネット技術標準化委員会 \(IETF\) によって発行の RFC 3207 を参照してください。  
  
 代替の接続方法は、SSL セッションが事前に任意のプロトコルをコマンドが送信される前に確立されています。 この接続方法は、SMTP\/SSL を呼び出すことがありますが、SMTP over SSL または SMTPS と既定ではポート 465 されます。 SSL を使用してこの代替の接続方法は現在サポートされていません。  
  
 使用する <xref:System.Net.Mail.SmtpClient.ClientCertificates%2A> を指定するクライアント証明書は、SSL 接続を確立するために使用する必要があります。<xref:System.Net.ServicePointManager.ServerCertificateValidationCallback%2A> SMTP サーバーによって提供される証明書を拒否することができます。<xref:System.Net.ServicePointManager.SecurityProtocol%2A> プロパティでは、使用する SSL プロトコルのバージョンを指定することができます。  
  
> [!NOTE]
>  場合、 <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> にプロパティが設定されている `true`, 、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後の呼び出しをアドバタイズしていないと、 <xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドがスローされます、 <xref:System.Net.Mail.SmtpException>です。  
  
   
  
## 例  
 次のコード例では、SMTP サーバーで SSL 接続を確立し、接続を使用して電子メールを送信します。  
  
 [!code-csharp[NclSSLMailSync\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSSLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="T:System.Net.Configuration.SmtpNetworkElement" />
        <altmember cref="P:System.Net.Configuration.SmtpNetworkElement.EnableSsl" />
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public string Host { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Host" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または名または SMTP トランザクションで使用されるホストの IP アドレスを設定します。</summary>
        <value>A <see cref="T:System.String" /> 名または SMTP トランザクションに使用するコンピューターの IP アドレスを含みます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Net.Mail.SmtpClient.Host%2A> コンス トラクターまたはアプリケーションまたはマシン構成ファイルを使用してプロパティを設定することもできます。 詳細については、「[mailSettings for system.net](http://msdn.microsoft.com/ja-jp/54f0f153-17e5-4f49-afdc-deadb940c9c1)」を参照してください。  
  
 このプロパティを使用して情報を指定すると、この情報は構成ファイルの設定を上書きします。  
  
   
  
## 例  
 次のコード例では、ホストと、アプリケーション構成ファイルで指定されたポートを使用して電子メール メッセージの送信を示します。  
  
 [!code-cpp[NclMailSync\#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#7)]
 [!code-csharp[NclMailSync\#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">指定された設定操作に等しい値 <see cref="F:System.String.Empty" /> \(""\) です。</exception>
        <exception cref="T:System.InvalidOperationException">電子メールが送信されるときに、このプロパティの値を変更することはできません。</exception>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="T:System.Net.Configuration.SmtpNetworkElement" />
        <altmember cref="P:System.Net.Configuration.SmtpNetworkElement.Host" />
        <altmember cref="P:System.Net.Mail.SmtpClient.Port" />
      </Docs>
    </Member>
    <Member MemberName="OnSendCompleted">
      <MemberSignature Language="C#" Value="protected void OnSendCompleted (System.ComponentModel.AsyncCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnSendCompleted(class System.ComponentModel.AsyncCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.AsyncCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。</param>
        <summary>
          <see cref="E:System.Net.Mail.SmtpClient.SendCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 継承するクラス、 <xref:System.Net.Mail.SmtpClient> クラスをオーバーライドできる、 <xref:System.Net.Mail.SmtpClient.OnSendCompleted%2A> メソッドを追加するときの操作、 <xref:System.Net.Mail.SmtpClient.SendCompleted> イベントが発生します。  
  
 <xref:System.Net.Mail.SmtpClient.OnSendCompleted%2A> 派生クラスを処理することもできます <xref:System.Net.Mail.SmtpClient.SendCompleted> デリゲートを結び付けずにします。 これは、処理のための手法をお勧め <xref:System.Net.Mail.SmtpClient.SendCompleted> 派生クラスでします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> in a derived class, be sure to call the base class’s <see cref="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> method so that registered delegates receive the <see cref="E:System.Net.Mail.SmtpClient.SendCompleted" /> event.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PickupDirectoryLocation">
      <MemberSignature Language="C#" Value="public string PickupDirectoryLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PickupDirectoryLocation" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.PickupDirectoryLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはアプリケーションがローカルの SMTP サーバーで処理するメール メッセージを保存するフォルダーを設定します。</summary>
        <value>A <see cref="T:System.String" /> メール メッセージ用のピックアップ ディレクトリを指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ピックアップ ディレクトリ内のメッセージは、ローカル SMTP サーバー \(存在する場合\)、IIS などによって自動的に送信されます。  
  
 このプロパティの既定値は、マシン上で設定することもできます。 またはアプリケーション構成ファイル。 加えられた変更、 <xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A> プロパティは、構成ファイルの設定をオーバーライドします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="P:System.Net.Configuration.SmtpSection.DeliveryMethod" />
      </Docs>
    </Member>
    <Member MemberName="Port">
      <MemberSignature Language="C#" Value="public int Port { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Port" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Port" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または SMTP トランザクションで使用されるポートを設定します。</summary>
        <value>
          <see cref="T:System.Int32" /> SMTP ホストのポート番号を格納しています。 既定値は 25 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Net.Mail.SmtpClient.Port%2A> コンス トラクターまたはアプリケーションまたはマシン構成ファイルを使用してプロパティを設定することもできます。 構成ファイルの使用についての詳細については、次を参照してください。 [mailSettings for system.net](http://msdn.microsoft.com/ja-jp/54f0f153-17e5-4f49-afdc-deadb940c9c1)します。 このプロパティを使用して情報を指定すると、この情報は構成ファイルの設定を上書きします。  
  
   
  
## 例  
 次のコード例では、ホストと、アプリケーション構成ファイルで指定されたポートを使用して電子メール メッセージの送信を示します。  
  
 [!code-cpp[NclMailSync\#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#7)]
 [!code-csharp[NclMailSync\#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">セット操作に指定された値は、0 以下です。</exception>
        <exception cref="T:System.InvalidOperationException">電子メールが送信されるときに、このプロパティの値を変更することはできません。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">to set the <see cref="P:System.Net.Mail.SmtpClient.Port" /> property. Associated enumeration: <see cref="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort" />.</permission>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="T:System.Net.Configuration.SmtpNetworkElement" />
        <altmember cref="P:System.Net.Configuration.SmtpNetworkElement.Port" />
        <altmember cref="P:System.Net.Mail.SmtpClient.Host" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Net.Mail.MailMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Net.Mail.MailMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Send(System.Net.Mail.MailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
      </Parameters>
      <Docs>
        <param name="message">A <see cref="T:System.Net.Mail.MailMessage" /> を送信するメッセージが含まれています。</param>
        <summary>指定したメッセージを配信用の SMTP サーバーに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、電子メールの送信中にブロックします。 使用してタイムアウト値を指定する、 <xref:System.Net.Mail.SmtpClient.Timeout%2A> プロパティを指定した時間が経過するまでの経過後、メソッドを返すことを確認します。  
  
 このメソッドを呼び出す前に、 <xref:System.Net.Mail.SmtpClient.Host%2A> と <xref:System.Net.Mail.SmtpClient.Port%2A> プロパティ設定する必要がいずれかの構成ファイルによって関連するプロパティを設定するかにこの情報を渡すことによって、 <xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29> コンス トラクターです。  
  
 非同期的に送信されるメッセージがある場合は、このメソッドを呼び出すことはできません。  
  
 SMTP ホストには、資格情報が必要とする場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、使用、 <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> または <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティです。  
  
 表示された場合、 <xref:System.Net.Mail.SmtpException> 例外チェック、 <xref:System.Net.Mail.SmtpException.StatusCode%2A> 理由に、操作を検索するプロパティに失敗しました。<xref:System.Net.Mail.SmtpException> 、操作が失敗した理由を示す内部例外を含めることもできます。  
  
 使用して電子メールを送信するときに <xref:System.Net.Mail.SmtpClient.Send%2A> に複数の受信者と、SMTP サーバーとして有効な一部の受信者を受け入れるし、他のユーザーを拒否した <xref:System.Net.Mail.SmtpClient.Send%2A> 承認済みの受信者に電子メールを送信し、 <xref:System.Net.Mail.SmtpFailedRecipientsException> がスローされます。 例外は、拒否された受信者の一覧が格納されます。  
  
> [!NOTE]
>  場合、 <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> にプロパティが設定されている `true`, 、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後の呼び出しをアドバタイズしていないと、 <xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドがスローされます、 <xref:System.Net.Mail.SmtpException>です。  
  
   
  
## 例  
 次のコード例では、このメソッドの使用方法を示します。  
  
 [!code-cpp[NclMailSync\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#2)]
 [!code-csharp[NclMailSync\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、 <see cref="T:System.Net.Mail.SmtpClient" /> が、 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 通話中です。  
  
 または  
  
 <see cref="P:System.Net.Mail.MailMessage.From" /> は <see langword="null" /> です。  
  
 または  
  
 指定されている受信者がない <see cref="P:System.Net.Mail.MailMessage.To" />, 、<see cref="P:System.Net.Mail.MailMessage.CC" />, 、および <see cref="P:System.Net.Mail.MailMessage.Bcc" /> プロパティです。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティに設定されている <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> と <see cref="P:System.Net.Mail.SmtpClient.Host" /> は <see langword="null" />です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティに設定されて <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> と <see cref="P:System.Net.Mail.SmtpClient.Host" /> は空の文字列 \(""\) です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティに設定されて <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> と <see cref="P:System.Net.Mail.SmtpClient.Port" /> 番号、または 65535 を超える負の値は 0 です。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが破棄されています。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
 または  
  
 認証に失敗しました。  
  
 または  
  
 操作はタイムアウトしました。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 設定されている <see langword="true" /> が、 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> にプロパティが設定されている <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> または <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 設定されている <see langword="true," /> が SMTP メール サーバーは、EHLO コマンドへの応答で STARTTLS をアドバタイズしませんでした。</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">
          <paramref name="message" /> 1 つまたは複数の受信者に配信できませんでした <see cref="P:System.Net.Mail.MailMessage.To" />, 、<see cref="P:System.Net.Mail.MailMessage.CC" />, 、または <see cref="P:System.Net.Mail.MailMessage.Bcc" />です。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">to connect to the SMTP server. Associated enumeration: <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string from, string to, string subject, string body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string from, string to, string subject, string body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Send(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="recipients" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="body" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="from">A <see cref="T:System.String" /> メッセージの送信者のアドレス情報を格納します。</param>
        <param name="to">To be added.</param>
        <param name="subject">A <see cref="T:System.String" /> 、メッセージの件名の行を格納しています。</param>
        <param name="body">A <see cref="T:System.String" /> メッセージ本文を含んでいます。</param>
        <summary>指定した電子メール メッセージを配信用の SMTP サーバーに送信します。 メッセージの送信者、受信者、件名、およびメッセージ本文を使用して指定 <see cref="T:System.String" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、電子メールの送信中にブロックします。 使用してタイムアウト値を指定する、 <xref:System.Net.Mail.SmtpClient.Timeout%2A> プロパティを指定した時間が経過するまでの経過後、メソッドを返すことを確認します。  
  
 このメソッドを呼び出す前に、 <xref:System.Net.Mail.SmtpClient.Host%2A> と <xref:System.Net.Mail.SmtpClient.Port%2A> プロパティ設定する必要がいずれかの構成ファイルによって関連するプロパティを設定するかにこの情報を渡すことによって、 <xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29> コンス トラクターです。  
  
 非同期的に送信されるメッセージがある場合は、このメソッドを呼び出すことはできません。  
  
 SMTP ホストには、資格情報が必要とする場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、使用、 <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> または <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティです。  
  
 表示された場合、 <xref:System.Net.Mail.SmtpException> 例外チェック、 <xref:System.Net.Mail.SmtpException.StatusCode%2A> 理由に、操作を検索するプロパティに失敗しました。<xref:System.Net.Mail.SmtpException> 、操作が失敗した理由を示す内部例外を含めることもできます。  
  
 使用して電子メールを送信するときに <xref:System.Net.Mail.SmtpClient.Send%2A> に複数の受信者と、SMTP サーバーとして有効な一部の受信者を受け入れるし、他のユーザーを拒否した <xref:System.Net.Mail.SmtpClient.Send%2A> 承認済みの受信者に電子メールを送信し、 <xref:System.Net.Mail.SmtpFailedRecipientsException> がスローされます。 例外は、拒否された受信者の一覧が格納されます。  
  
> [!NOTE]
>  場合、 <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> にプロパティが設定されている `true`, 、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後の呼び出しをアドバタイズしていないと、 <xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドがスローされます、 <xref:System.Net.Mail.SmtpException>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="recipients" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> は <see cref="F:System.String.Empty" /> です。  
  
 \-または\-  
  
 <paramref name="recipients" /> は <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、 <see cref="T:System.Net.Mail.SmtpClient" /> が、 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 通話中です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティに設定されている <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> と <see cref="P:System.Net.Mail.SmtpClient.Host" /> は <see langword="null" />です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティに設定されて <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> と <see cref="P:System.Net.Mail.SmtpClient.Host" /> は空の文字列 \(""\) です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティに設定されて <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> と <see cref="P:System.Net.Mail.SmtpClient.Port" /> 番号、または 65535 を超える負の値は 0 です。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが破棄されています。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
 または  
  
 認証に失敗しました。  
  
 または  
  
 操作はタイムアウトしました。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 設定されている <see langword="true" /> が、 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> にプロパティが設定されている <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> または <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 設定されている <see langword="true," /> が SMTP メール サーバーは、EHLO コマンドへの応答で STARTTLS をアドバタイズしませんでした。</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">メッセージは、1 つまたは複数の受信者に配信されませんでした <paramref name="recipients" />します。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">to connect to the SMTP server. Associated enumeration: <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.Mail.MailMessage message, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.Mail.MailMessage message, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsync(System.Net.Mail.MailMessage,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">A <see cref="T:System.Net.Mail.MailMessage" /> を送信するメッセージが含まれています。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>指定した電子メール メッセージを配信用の SMTP サーバーに送信します。 このメソッドは、呼び出し元のスレッドをブロックしませんし、オブジェクトを渡し、操作が完了したときに呼び出されるメソッドを呼び出し元を開きます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 電子メールを送信または操作が取り消されたときに通知を受信するには、イベント ハンドラーを追加、 <xref:System.Net.Mail.SmtpClient.SendCompleted> イベントです。 取り消すことができます、 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 操作を呼び出して、 <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> メソッドです。  
  
 呼び出した後 <xref:System.Net.Mail.SmtpClient.SendAsync%2A>, 、電子メールの送信が電子メール メッセージを使用して別の送信を試みる前に完了するまで待機する必要があります <xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A>です。  
  
 このメソッドを呼び出す前に、 <xref:System.Net.Mail.SmtpClient.Host%2A> と <xref:System.Net.Mail.SmtpClient.Port%2A> 関連するプロパティを設定するかにこの情報を渡すことによって構成ファイルを設定する必要があります、 <xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29> コンス トラクターです。  
  
 SMTP ホストには、資格情報が必要とする場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、使用、 <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> または <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティです。  
  
 表示された場合、 <xref:System.Net.Mail.SmtpException> 例外チェック、 <xref:System.Net.Mail.SmtpException.StatusCode%2A> 理由に、操作を検索するプロパティに失敗しました。<xref:System.Net.Mail.SmtpException> 、操作が失敗した理由を示す内部例外を含めることもできます。  
  
 使用して電子メールを送信するときに <xref:System.Net.Mail.SmtpClient.SendAsync%2A> を複数の受信者に SMTP サーバーの有効なものとして、一部の受信者の受け付けし、他のユーザーを拒否する場合、 <xref:System.Net.Mail.SmtpException> がスローされ、 <xref:System.NullReferenceException> 内部例外のです。 この場合、 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 受信者のいずれかに電子メールの送信に失敗します。  
  
 アプリケーションは、確認するには、サーバー証明書の検証エラーを検出できます、 <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> に渡されたプロパティ、 <xref:System.Net.Mail.SendCompletedEventHandler> を委任します。  
  
 <xref:System.Net.Mail.SmtpClient.Timeout%2A> プロパティは、任意の効果はありません、 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 呼び出します。  
  
 SMTP サーバーに送信するときにメールとブロックを送信するのいずれかの操作を使用して、 <xref:System.Net.Mail.SmtpClient.Send%2A> メソッドです。  
  
> [!NOTE]
>  場合、 <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> にプロパティが設定されている `true`, 、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後の呼び出しをアドバタイズしていないと、 <xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドがスローされます、 <xref:System.Net.Mail.SmtpException>です。  
  
   
  
## 例  
 次のコード例では、このメソッドを呼び出す方法を示します。  
  
 [!code-cpp[NclMailAsync\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <see cref="P:System.Net.Mail.MailMessage.From" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、 <see cref="T:System.Net.Mail.SmtpClient" /> が、 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 通話中です。  
  
 または  
  
 指定されている受信者がない <see cref="P:System.Net.Mail.MailMessage.To" />, 、<see cref="P:System.Net.Mail.MailMessage.CC" />, 、および <see cref="P:System.Net.Mail.MailMessage.Bcc" /> プロパティです。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティに設定されている <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> と <see cref="P:System.Net.Mail.SmtpClient.Host" /> は <see langword="null" />です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティに設定されて <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> と <see cref="P:System.Net.Mail.SmtpClient.Host" /> は空の文字列 \(""\) です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティに設定されて <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> と <see cref="P:System.Net.Mail.SmtpClient.Port" /> 番号、または 65535 を超える負の値は 0 です。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが破棄されています。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
 または  
  
 認証に失敗しました。  
  
 または  
  
 操作はタイムアウトしました。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 設定されている <see langword="true" /> が、 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> にプロパティが設定されている <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> または <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 設定されている <see langword="true," /> が SMTP メール サーバーは、EHLO コマンドへの応答で STARTTLS をアドバタイズしませんでした。  
  
 または  
  
 <paramref name="message" /> 1 つまたは複数の受信者に配信できませんでした <see cref="P:System.Net.Mail.MailMessage.To" />, 、<see cref="P:System.Net.Mail.MailMessage.CC" />, 、または <see cref="P:System.Net.Mail.MailMessage.Bcc" />です。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">to connect to the SMTP server. Associated enumeration: <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string from, string to, string subject, string body, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string from, string to, string subject, string body, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsync(System.String,System.String,System.String,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="recipients" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="body" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="from">A <see cref="T:System.String" /> メッセージの送信者のアドレス情報を格納します。</param>
        <param name="to">To be added.</param>
        <param name="subject">A <see cref="T:System.String" /> 、メッセージの件名の行を格納しています。</param>
        <param name="body">A <see cref="T:System.String" /> メッセージ本文を含んでいます。</param>
        <param name="userToken">非同期操作が完了したときに呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>配信用の SMTP サーバーに電子メール メッセージを送信します。 メッセージの送信者、受信者、件名、およびメッセージ本文を使用して指定 <see cref="T:System.String" /> オブジェクトです。 このメソッドは、呼び出し元のスレッドをブロックしませんし、オブジェクトを渡し、操作が完了したときに呼び出されるメソッドを呼び出し元を開きます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 電子メールを送信または操作が取り消されたときに通知を受信するには、イベント ハンドラーを追加、 <xref:System.Net.Mail.SmtpClient.SendCompleted> イベントです。 取り消すことができます、 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 操作を呼び出して、 <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> メソッドです。  
  
 呼び出した後 <xref:System.Net.Mail.SmtpClient.SendAsync%2A>, 、電子メールの送信が電子メール メッセージを使用して別の送信を試みる前に完了するまで待機する必要があります <xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A>です。  
  
 このメソッドを呼び出す前に、 <xref:System.Net.Mail.SmtpClient.Host%2A> と <xref:System.Net.Mail.SmtpClient.Port%2A> 構成ファイルまたはプロパティを設定またはこの情報を渡すことによって、プロパティを設定する必要があります、 <xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29> コンス トラクターです。  
  
 SMTP ホストには、資格情報が必要とする場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、使用、 <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> または <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティです。  
  
 表示された場合、 <xref:System.Net.Mail.SmtpException> 例外チェック、 <xref:System.Net.Mail.SmtpException.StatusCode%2A> 理由に、操作を検索するプロパティに失敗しました。<xref:System.Net.Mail.SmtpException> 、操作が失敗した理由を示す内部例外を含めることもできます。  
  
 使用して電子メールを送信するときに <xref:System.Net.Mail.SmtpClient.SendAsync%2A> を複数の受信者に SMTP サーバーの有効なものとして、一部の受信者の受け付けし、他のユーザーを拒否する場合、 <xref:System.Net.Mail.SmtpException> がスローされ、 <xref:System.NullReferenceException> 内部例外のです。 この場合、 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 受信者のいずれかに電子メールの送信に失敗します。  
  
 アプリケーションは、確認するには、サーバー証明書の検証エラーを検出できます、 <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> に渡されたプロパティ、 <xref:System.Net.Mail.SendCompletedEventHandler> を委任します。  
  
 <xref:System.Net.Mail.SmtpClient.Timeout%2A> プロパティは、任意の効果はありません、 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 呼び出します。  
  
 SMTP サーバーに送信するときにメールとブロックを送信するのいずれかの操作を使用して、 <xref:System.Net.Mail.SmtpClient.Send%2A> メソッドです。  
  
> [!NOTE]
>  場合、 <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> にプロパティが設定されている `true`, 、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後の呼び出しをアドバタイズしていないと、 <xref:System.Net.Mail.SmtpClient.Send%2A> または <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドがスローされます、 <xref:System.Net.Mail.SmtpException>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="recipient" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> は <see cref="F:System.String.Empty" /> です。  
  
 \-または\-  
  
 <paramref name="recipient" /> は <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、 <see cref="T:System.Net.Mail.SmtpClient" /> が、 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 通話中です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティに設定されている <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> と <see cref="P:System.Net.Mail.SmtpClient.Host" /> は <see langword="null" />です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティに設定されて <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> と <see cref="P:System.Net.Mail.SmtpClient.Host" /> は空の文字列 \(""\) です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> プロパティに設定されて <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> と <see cref="P:System.Net.Mail.SmtpClient.Port" /> 番号、または 65535 を超える負の値は 0 です。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが破棄されています。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
 または  
  
 認証に失敗しました。  
  
 または  
  
 操作はタイムアウトしました。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 設定されている <see langword="true" /> が、 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> にプロパティが設定されている <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> または <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 設定されている <see langword="true," /> が SMTP メール サーバーは、EHLO コマンドへの応答で STARTTLS をアドバタイズしませんでした。  
  
 または  
  
 メッセージは、1 つまたは複数の受信者に配信されませんでした <paramref name="recipients" />します。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">To connect to the SMTP server. Associated enumeration: <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsyncCancel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>電子メール メッセージを送信する非同期操作をキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> をキャンセルする方法、保留中 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> 操作します。 メールの送信を待機している場合は、このメソッドは、メールの格納に使用されているリソースを解放します。 送信待ちのメールがない場合は、このメソッドは何も行われません。  
  
   
  
## 例  
 次のコード例では、電子メール メッセージを非同期的に送信を示します。 ユーザーには、送信されていない場合、メールをキャンセルするオプションがあります。  
  
 [!code-cpp[NclMailAsync\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.Mail.SendCompletedEventHandler SendCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.Mail.SendCompletedEventHandler SendCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.Mail.SmtpClient.SendCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SendCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期の電子メールの送信操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Mail.SmtpClient.SendCompleted> イベントが送信操作が完了すると、電子メール メッセージが非同期で送信するたびに発生します。 電子メール メッセージを非同期的に送信するには、 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドです。  
  
 <xref:System.Net.Mail.SendCompletedEventHandler> デリゲートは、 <xref:System.Net.Mail.SmtpClient.SendCompleted>です。<xref:System.ComponentModel.AsyncCompletedEventArgs> クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
   
  
## 例  
 次のコード例では、電子メール メッセージを非同期的に送信を示します。  
  
 [!code-cpp[NclMailAsync\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendMailAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendMailAsync (System.Net.Mail.MailMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SendMailAsync(class System.Net.Mail.MailMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendMailAsync(System.Net.Mail.MailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
      </Parameters>
      <Docs>
        <param name="message">A <see cref="T:System.Net.Mail.MailMessage" /> を送信するメッセージが含まれています。</param>
        <summary>非同期操作として配信用の SMTP サーバーを指定したメッセージを送信します。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task>\> オブジェクトは、メッセージが送信された後、完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendMailAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendMailAsync (string from, string recipients, string subject, string body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SendMailAsync(string from, string recipients, string subject, string body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendMailAsync(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="recipients" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="body" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="from">A <see cref="T:System.String" /> メッセージの送信者のアドレス情報を格納します。</param>
        <param name="recipients">A <see cref="T:System.String" /> にメッセージが送信されるアドレスを格納します。</param>
        <param name="subject">A <see cref="T:System.String" /> 、メッセージの件名の行を格納しています。</param>
        <param name="body">A <see cref="T:System.String" /> メッセージ本文を含んでいます。</param>
        <summary>非同期操作として配信用の SMTP サーバーを指定したメッセージを送信します。 」を参照してください。 メッセージの送信者、受信者、件名、およびメッセージ本文を使用して指定 <see cref="T:System.String" /> オブジェクトです。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task>\> オブジェクトは、メッセージが送信された後、完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="recipients" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> は <see cref="F:System.String.Empty" /> です。  
  
 \-または\-  
  
 <paramref name="recipients" /> は <see cref="F:System.String.Empty" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicePoint">
      <MemberSignature Language="C#" Value="public System.Net.ServicePoint ServicePoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ServicePoint ServicePoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.ServicePoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ServicePoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>電子メール メッセージの送信に使用するネットワーク接続を取得します。</summary>
        <value>A <see cref="T:System.Net.ServicePoint" /> に接続する、 <see cref="P:System.Net.Mail.SmtpClient.Host" /> SMTP に使用されるプロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定、 <xref:System.Net.Mail.SmtpClient.ServicePoint%2A> プロパティは、アプリケーションまたはマシン構成ファイルで指定された既定値を使用して作成され、 <xref:System.Net.ServicePointManager> クラスです。  
  
   
  
## 例  
 次のコード例へのアクセスを示しています、 <xref:System.Net.Mail.SmtpClient.ServicePoint%2A> プロパティです。  
  
 [!code-cpp[NclMailSync\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Net.Mail.SmtpClient.Host" /> <see langword="null" /> または空の文字列 \(""\) です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.Port" /> 0 です。</exception>
      </Docs>
    </Member>
    <Member MemberName="TargetName">
      <MemberSignature Language="C#" Value="public string TargetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetName" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.TargetName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または拡張保護を使用する場合は、認証に使用するサービス プロバイダー名 \(SPN\) を設定します。</summary>
        <value>A <see cref="T:System.String" /> 拡張保護に使用する SPN を指定します。 フォームのこの SPN の既定値は、"SMTPSVC\]、\[&lt; ホスト &gt;"、&lt; ホスト &gt; は、SMTP メール サーバーのホスト名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Mail.SmtpClient.TargetName%2A> プロパティは、アプリケーションが拡張保護を使用した統合 Windows 認証で使用します。<xref:System.Net.Mail.SmtpClient> に資格情報のチャレンジ応答サービス固有の情報 \(SPN\) を含むし、必要に応じて、チャネル固有の拡張保護を提供できますし、チャネル バインディング トークン \(CBT\) の情報です。 資格情報の交換では、この情報は、サービスが不正に取得した資格情報のチャレンジ応答の悪用に対する保護を強化することです。  
  
 このプロパティの既定値は、マシン上で設定することもできます。 またはアプリケーション構成ファイル。 加えられた変更、 <xref:System.Net.Mail.SmtpClient.TargetName%2A> プロパティは、構成ファイルの設定をオーバーライドします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Configuration.SmtpSection" />
        <altmember cref="T:System.Net.Configuration.SmtpNetworkElement" />
        <altmember cref="P:System.Net.Configuration.SmtpNetworkElement.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得するまでの時間を指定する値を設定または同期 <see cref="Overload:System.Net.Mail.SmtpClient.Send" /> 呼び出しがタイムアウトします。</summary>
        <value>
          <see cref="T:System.Int32" /> タイムアウト値 \(ミリ秒単位\) を指定します。 既定値は、100,000 \(100 秒\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、呼び出し、 <xref:System.Net.Mail.SmtpClient.Send%2A> 操作が完了するまでブロックするメソッドです。 設定した場合、 <xref:System.Net.Mail.SmtpClient.Timeout%2A> プロパティに正の値を <xref:System.Net.Mail.SmtpClient.Send%2A> 、割り当てられた時間内に操作が完了できない、 <xref:System.Net.Mail.SmtpClient> クラスがスローされます、 <xref:System.Net.Mail.SmtpException> 例外です。  
  
 メッセージを送信し、アプリケーションのスレッドで実行の継続使用、 <xref:System.Net.Mail.SmtpClient.SendAsync%2A> メソッドです。  
  
   
  
## 例  
 次のコード例は、取得とタイムアウト値の設定を示します。  
  
 [!code-cpp[NclMailSync\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#3)]
 [!code-csharp[NclMailSync\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">セット操作が指定された値が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">電子メールが送信されるときに、このプロパティの値を変更することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.MonoNotSupported("no DefaultCredential support in Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Boolean" /> 値を制御するのかどうか、 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 要求と共に送信します。</summary>
        <value>既定の資格情報を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部の SMTP サーバーでは、サーバーは、代わりに電子メールを送信する前にクライアントを認証することが必要です。 このプロパティを設定 `true` ときにこの <xref:System.Net.Mail.SmtpClient> オブジェクト認証するか、サーバーによって要求された場合、現在ログオンしているユーザーの既定の資格情報を使用しています。 クライアント アプリケーションでは、ほとんどのシナリオでは、目的の動作です。  
  
 アプリケーションとコンピューターの構成ファイルを使用して資格情報を指定することもできます。 詳細については、「[mailSettings for system.net](http://msdn.microsoft.com/ja-jp/54f0f153-17e5-4f49-afdc-deadb940c9c1)」を参照してください。  
  
 場合、 <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> にプロパティが設定されている `false,` 値を設定し、 <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティがサーバーに接続するときに資格情報に使用されます。 場合、 <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> にプロパティが設定されている `false` と <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティが設定されていない、メールが匿名でのサーバーに送信されます。  
  
> [!CAUTION]
>  基本認証の資格情報を指定する場合は、クリア テキストでサーバーに送信されます。 これは、により、資格情報を表示、および他のユーザーが使用しているためセキュリティ上の問題が発生することができます。  
  
   
  
## 例  
 次のコード例では、このプロパティの使用方法を示します。  
  
 [!code-cpp[NclMailSync\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#2)]
 [!code-csharp[NclMailSync\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">電子メールが送信されるときに、このプロパティの値を変更することはできません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>電子メール メッセージを送信します。 これらのメソッドでは、呼び出し元のスレッドはブロックされません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SendMailAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同期操作として配信用の SMTP サーバーを指定したメッセージを送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>配信用の SMTP サーバーに電子メール メッセージを送信します。 これらのメソッドは、メッセージの送信中にブロックします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Net.Mail.SmtpClient" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>