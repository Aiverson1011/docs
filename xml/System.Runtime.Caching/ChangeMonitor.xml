<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>キャッシュ アイテムに依存するデータの状態の変化を監視する派生したカスタム型の基本クラスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Caching.ChangeMonitor> クラスは、特定のキャッシュの実装に特化してモニターの派生クラスの基本クラスとして使用します。 A <xref:System.Runtime.Caching.ChangeMonitor> インスタンスがキャッシュ アイテムに依存するデータの状態の変化を監視します。 たとえばの項目には、キャッシュの内容がファイルまたはデータのエンティティがあります。 ファイルまたはデータのエンティティが更新された場合も、関連付けられているキャッシュ エントリを変更してください。 監視できる共通の項目には、データ エンティティ \(データベースのフィールド、値、行、またはテーブル\) など、別のキャッシュ エントリとファイルおよびファイル属性が含まれます。  
  
 依存関係の変更は、依存関係の状態の変更です。 一般的なキャッシュの実装で後に、 <xref:System.Runtime.Caching.ChangeMonitor> インスタンス キャッシュ依存関係が変更されたことを通知する、キャッシュは、挿入されたキャッシュ エントリを無効化など、必要なアクションを実行します。  
  
 派生 <xref:System.Runtime.Caching.ChangeMonitor> 固有のさまざまなデータ ストアの依存関係の変更を監視するクラスをカスタマイズすることができます。 たとえば、ファイル システム、物理メモリまたはデータベースのキャッシュ実装があります。<xref:System.Runtime.Caching.ChangeMonitor> クラスは、キャッシュの外部で行われる変更内容を検査し、変更が発生したキャッシュを警告します。  
  
 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] から派生する次のクラスが含まれる <xref:System.Runtime.Caching.ChangeMonitor> クラス。  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 これらの各クラスは、さまざまな種類の依存関係と連携します。 たとえば、派生 <xref:System.Runtime.Caching.FileChangeMonitor> クラスは、キャッシュ項目が依存しているファイル システム データ \(ファイルおよびフォルダー\) のキャッシュへの変更を監視します。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
    <block subset="none" type="overrides">
      <para>If you create a custom cache implementation or a derived change monitor type, you must follow certain guidelines. The following list summarizes these guidelines. For more information, see the documentation for individual methods or properties.  
  
-   The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the method returns. If a constructor encounters an error during constructions and must have to dispose of resources, the constructor can only call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called because the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload will throw an <see cref="T:System.InvalidOperationException" /> exception if initialization is not completed.  
  
-   If changes occur in the data that is being monitored before initialization is complete, the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.  
  
-   After a derived <see cref="T:System.Runtime.Caching.ChangeMonitor" /> type is instantiated, you must insert the monitor into a custom <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation. Or if you are finished using the change monitor, call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.  
  
-   After a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance is inserted into a <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation, the <see cref="T:System.Runtime.Caching.ObjectCache" /> instance require that the change monitor is disposed. Even if the insertion is invalid and causes an exception, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.  
  
-   After a derived change monitor is inserted into a cache, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, by passing a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object. The <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method can be called only one time. If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called. Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called only one time. This one time call occurs either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called because the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance detected a change, or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called on the <see cref="T:System.Runtime.Caching.ChangeMonitor" />, whichever occurs first.  
  
-   The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance that is provided by an <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation should remove the associated cache entry and specify a reason by using the <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> enumeration.  
  
-   A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method either before a cache implementation has called <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or after. If the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called before <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called, the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementation will notify the cache that this has occurred and will trigger the callback to be passed to <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is invoked. Any state data that is passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is saved by the change monitor and subsequently passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method when the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method is invoked.  
  
-   A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method. For more information, see the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method documentation.  
  
-   The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload must be called to dispose of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance. The rules for calling Dispose are as follows:  
  
    -   Before an item is inserted into the cache, it is the responsibility of caller to dispose of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.  
  
    -   Once cache item and the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances that are associated with it are passed to a cache, the cache implementer must make sure that that the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, even if the insert fails.  
  
    -   After an item and its associated <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances are passed to a cache, the caller must not dispose the dependency because when the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, the call is treated as if the dependency has changed. As a result, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is automatically invoked.  
  
-   Taking these rules into consideration, the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method must be called in one of the following ways:  
  
    -   Users must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload if they decide not to insert the derived change-monitor instance into a cache.  
  
    -   If the implementation tries to insert the change-monitor instance into an object cache but the insertion fails, the cache implementation is responsible for calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload. When the insertion attempt causes an exception, the cache implementation must dispose of any associated dependencies.  
  
    -   If the cache entry is removed, the cache implementation must also dispose of the dependency.  
  
    -   The internal implementation of the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method automatically calls the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method after it calls a callback that is registered through <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.  
  
 <block subset="none" type="note"><para>  
 This automatic call to the dispose method during the event firing only occurs if the initialization of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance was previously completed.  
  
</para></block>  
  
 When a derived change monitor's constructor calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method, if the state of the change monitor has already changed (that is, the state that is monitored already changed when the constructor was still active) then the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method will automatically dispose of the change monitor.  
  
-   The <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> property is set to <see langword="true" /> after the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called by the derived change-monitor instance, regardless of whether a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object has been set by a call to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or not.</para>
    </block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの新しいインスタンスを初期化します。 このコンス トラクターは、基本クラスを初期化するために派生クラスのコンス トラクターから呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Caching.ChangeMonitor> クラスには既定のコンス トラクターです。 ただし、クラスから継承した基本 <xref:System.Runtime.Caching.ChangeMonitor> クラスし、カスタム変更監視の定義の動作は、コンス トラクターで初期化を実行する必要があります。 詳細については、継承元のセクションのノートを参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> class before it returns. If a dependency changes before initialization is complete (for example, if a dependent cache key is not found in the cache), the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before it calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method. In this case, constructor can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is used to release the <xref:System.Runtime.Caching.ChangeMonitor> instance and related resources. The public <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is invoked to coordinate the disposal process with key life\-cycle events of derived change\-monitor classes \(such as initialization\), and to release the <xref:System.Runtime.Caching.ChangeMonitor> instance so that the instance can be garbage collected. The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is implemented by derived change\-monitor classes to dispose of their managed and unmanaged resources.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> メソッドを呼び出す、 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 派生クラスを 1 回だけ、初めて呼び出されたメソッド。 以降の呼び出し、 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> メソッドを使用しないため、影響を与えます。 メソッドが呼び出された後、 <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> にプロパティが設定されている `true`します。  
  
 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> を破棄するオーバー ロードを呼び出す必要があります、 <xref:System.Runtime.Caching.ChangeMonitor> インスタンス。 Dispose メソッドを呼び出すための規則を次に示します。  
  
-   破棄する呼び出し元の責任は、キャッシュに項目が、前に、 <xref:System.Runtime.Caching.ChangeMonitor> インスタンス。  
  
-   キャッシュ項目を 1 回、 <xref:System.Runtime.Caching.ChangeMonitor> ように注意してくださいキャッシュ実行者、キャッシュにそれに関連付けられているインスタンスが渡される <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> と呼ばれる場合は、挿入が失敗した場合でもです。  
  
-   項目とそれに関連する <xref:System.Runtime.Caching.ChangeMonitor> インスタンスがキャッシュに渡される、ため、呼び出し元が、依存関係を破棄しなければならないときに、 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> メソッドが呼び出されると、呼び出しが依存関係が変更されたかのように扱われます。 結果として、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> メソッドが自動的に呼び出されます。  
  
-   これらの規則を考慮に入れて、 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> メソッドは、次の方法のいずれかで呼び出す必要があります。  
  
    -   ユーザーが呼び出す必要があります、 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 派生の変更モニターのインスタンスをキャッシュに挿入しないと判断した場合のメソッドのオーバー ロードします。  
  
    -   キャッシュの実装は呼び出しを <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 実装では、変更監視インスタンスをオブジェクト キャッシュに挿入しようとしましたが、挿入が失敗する場合、オーバー ロードします。 挿入の試行は、例外を発生させ、キャッシュの実装が関連付けられている依存関係を破棄する必要があります。  
  
    -   キャッシュ エントリが削除されると、キャッシュの実装に依存関係が破棄もしなければなりません。  
  
 内部の実装、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> メソッドを自動的に呼び出して、 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> を通してメソッドが呼び出された後、コールバックを登録している、 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> メソッドです。  
  
> [!NOTE]
>  この自動破棄イベントの発生時に、場合にのみ発生の初期化、 <xref:System.Runtime.Caching.ChangeMonitor> 完了済みのインスタンス。  
  
 派生した変更モニターのコンス トラクターを呼び出すと、 <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> メソッドでは、既に変更されて変更モニターの状態 \(は、監視されている状態が既に変更されてコンス トラクターがまだアクティブの場合\)、 <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> メソッドが変更の監視を自動的に破棄されます。  
  
> [!NOTE]
>  ユーザーが呼び出さないように、 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> メソッドです。 ただし、メソッドの呼び出しからユーザーを防ぐことはできません。 したがってされる場合、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> メソッドが呼び出されます。 その場合は、キャッシュ エントリは、依存関係が変更されたかのように通知されます。  
  
 派生クラスを上書きできないようにする <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> メソッド、メソッドは、明示的なインターフェイスの実装ではありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">初期化が、ベースと呼ばれる変更監視の派生クラスで不完全 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> メソッドです。</exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> マネージ コードとアンマネージ リソースおよびへの参照を解放する、 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンス; <see langword="false" /> アンマネージ リソースのみ解放します。 ときに <see langword="false" /> を越えた場合は、 <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> メソッドによって呼び出されます、 <see langword="finalizer" /> スレッドとの外部のマネージ参照の多くはガベージ コレクションが既にあるため、不要になった無効です。</param>
        <summary>すべてのマネージ コードとアンマネージ リソースおよびへの参照を解放、 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンス。 このオーバー ロードは、変更監視の派生クラスで実装する必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 時の値 `disposing` 値は `true`, 、すべてのマネージ コードとアンマネージ リソースが破棄され、派生の変更モニターのインスタンスがガベージ コレクトできるように、このオブジェクトへの参照を公開しました。 保証ベース <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> メソッドは、実装を呼び出します <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> メソッドの 1 回だけです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload to release all managed and unmanaged resources when the value of <paramref name="disposing" /> is <see langword="true" />. The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method overload that has a <paramref name="disposing" /> value of <see langword="true" /> is called only one time, namely, when the instance is disposed for the first time. A change monitor must not call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload directly. A derived change monitor can call the public parameter-less <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method on the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.  
  
 Alternatively, a change monitor can implement a finalizer method. In that case, the finalizer can invoke the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method and pass it a <paramref name="disposing" /> value of <see langword="false" />. However, this is usually unnecessary. Monitoring for dependency changes is typically performed by a service that maintains a reference to the change-monitor instance. The reference prevents the instance from being garbage collected, and therefore makes a finalizer method unnecessary. To avoid memory leaks, when a dependency changes, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method disposes the change-monitor instance (unless initialization has not finished).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>状態監視していることを示す値を取得、 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスが変更されました。</summary>
        <value>
          <see langword="true" /> 場合によって監視されている状態、 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> インスタンスが変更されました。 それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生では、このプロパティの値をチェックする <xref:System.Runtime.Caching.ChangeMonitor> クラス依存関係が変更されたかどうかを確認します。  
  
 設定されて `true` 依存関係の変更が発生した \(された場合、つまり、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> メソッドが呼び出されます\)。 後に、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> メソッドは、派生クラスの値によって、 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> プロパティになります `true`, かどうかに関係なく、 <xref:System.Runtime.Caching.OnChangedCallback> インスタンスへの呼び出しによって通知、 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> メソッドです。  
  
> [!NOTE]
>  呼び出し元が確認できる、 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> プロパティを依存関係が変更されたかどうかを参照してください。 ただし、マルチ スレッド環境で、簡素化され、保守しやすくなります挿入する方法がデータ キャッシュの実装に確認せず、 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> プロパティです。 キャッシュ実装を確認する必要があります、 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> のプロパティとする必要がありますの挿入を実行しなかったり 1 つまたは複数の関連する依存関係を設定している場合は、操作を設定します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初期化の完了を示すために派生クラスのコンス トラクターから呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 初期化が派生クラスで完了する前に、依存関係が変更された場合、派生クラスのコンス トラクターを呼び出す必要があります、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> メソッドです。  
  
 ときに、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> メソッドが呼び出される、 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> プロパティが自動的に設定 `true` 変更モニターを使用しています。 その結果、変更監視のコンス トラクターを呼び出すと、 <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> メソッドでは、基本クラスが自動的に呼び出さ、 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> メソッドです。 初期化が完了すると場合、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> メソッドは、派生の変更モニターのインスタンスを自動的に破棄します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The constructor of a derived class must call the base <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the constructor returns. The constructor of a derived class can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生インスタンスのことを示す値を取得、 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスが破棄されます。</summary>
        <value>
          <see langword="true" /> インスタンスを破棄する場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定されて `true` 後ろ <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> メソッドの呼び出し、 <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> インスタンスを破棄する派生クラスでメソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback">依存関係が変更されたときに呼び出されるメソッドへの参照。</param>
        <summary>キャッシュ実装は、コールバックを登録し、通知によって呼び出される、 <see cref="T:System.Runtime.Caching.ObjectCache" /> を通じてインスタンス、 <see cref="T:System.Runtime.Caching.OnChangedCallback" /> 依存関係が変更されたときに、委任します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 キャッシュの実装側は、変更監視機能に自身を接続するのにこのメソッドを使用します。 いずれかに関連付ける、または変更するキャッシュ項目にモニターの詳細、渡す、 <xref:System.Runtime.Caching.CacheItemPolicy> キャッシュ項目に設定されている変更モニターのプロパティを使用してインスタンス。 キャッシュ実行者が変更モニターのサポートはに対する繰り返し処理を担当する、 <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> プロパティとレジスタ、 <xref:System.Runtime.Caching.OnChangedCallback> 各デリゲートが検出したモニターを変更します。  
  
 <xref:System.Runtime.Caching.OnChangedCallback> デリゲートには、省略可能な状態パラメーターが含まれています。、、変更の具体的なモニターの実装は、省略可能な状態情報を渡すことができます。 キャッシュの実装側では、カスタムの変更の監視は、コールバックの一部として渡される状態の種類への明示的な依存関係を取得できるかどうかを決定します。  
  
> [!NOTE]
>  基本のキャッシュ機能拡張 API には、状態の型に明示的な依存関係の要件はありません。  
  
 実装、 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> メソッドが自動的にモニターの状態が、時に変更が既にかどうかを決定 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> メソッドが呼び出されます。 場合、 <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> プロパティは、 `true`, 、メソッドが自動的に呼び出して、 <xref:System.Runtime.Caching.OnChangedCallback> を通じて、登録されたイベント ハンドラー、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> メソッドです。 これは、キャッシュの実装は、キャッシュの実装に監視機能を取得し、それ自体まで、ワイヤ時刻への変更のモニタを作成時刻から基になる監視の状態が変化する可能性があるために発生します。 状態が既に変更されたかどうか、オブジェクトに渡される、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> メソッドは `null`です。  
  
 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> メソッドは、1 回だけ呼び出すことができ、以降の呼び出しで例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">コールバック メソッドは既に呼び出されています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="onChangedCallback" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="overrides">
          <para>1.  You must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method to be notified of any dependency changes. If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called. Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called one time, either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, whichever occurs first. The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance provided by the cache implementation should remove the cache entry and if it is requested by the cache caller, raise the necessary change or update event back to the original cache caller.  
  
2.  The object cache implementation must remove the cache entry that is associated with a dependency change.</para>
        </block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">変更イベントのデータ。 この値は、<see langword="null" /> の場合もあります。</param>
        <summary>依存関係が変更されたときのイベントを生成する派生クラスによって呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 依存関係の変更が発生したときにメソッドが呼び出されます。<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 破棄が発生するは、コールバックが既に呼び出されていない場合にのみ変更監視インスタンスが破棄されるときにもメソッドが呼び出されます。  
  
 場合、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> メソッドは、前に呼び出されます、 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> メソッドは、状態データへの呼び出し、 <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> メソッドは、キャッシュの実装で保存されます。 コールバックも、 <xref:System.Runtime.Caching.OnChangedCallback> メソッドが即座に起動されるときに、 <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> メソッドが呼び出されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す値を取得、 <see cref="T:System.Runtime.Caching.ChangeMonitor" /> クラスのインスタンス。</summary>
        <value>変更監視インスタンスの識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> プロパティ値通常から成る依存名は結合する文字列データを一意に識別子が監視されているデータ、 <xref:System.Runtime.Caching.ChangeMonitor> インスタンス。 値、 <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> プロパティは文字列です。 一意の ID を割り当てる文字列の値が使用される、 <xref:System.Runtime.Caching.ChangeMonitor> インスタンス。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>By overriding the property, you can define a custom implementation for the string value of the property in order to assign it a unique ID.</para>
        </block>
        <block subset="none" type="overrides">
          <para>In derived classes, you must set the value of the property in the constructor.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>