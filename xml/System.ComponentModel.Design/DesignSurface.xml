<Type Name="DesignSurface" FullName="System.ComponentModel.Design.DesignSurface">
  <TypeSignature Language="C#" Value="public class DesignSurface : IDisposable, IServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DesignSurface extends System.Object implements class System.IDisposable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.DesignSurface" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>コンポーネントを設計するためのユーザー インターフェイスを表示します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.DesignSurface> デザイナーとして認識し、ユーザー クラスを実装します。<xref:System.ComponentModel.Design.DesignSurface> ユーザーのユーザー インターフェイスをデザイン時機能を変更する操作です。<xref:System.ComponentModel.Design.DesignSurface> 自己完結型のデザイン サーフェイスを提供します。  
  
 <xref:System.ComponentModel.Design.DesignSurface> クラスは、スタンドアロンのデザイナーとして使用することかと組み合わせることがあります、 <xref:System.ComponentModel.Design.DesignSurfaceManager> 複数をホストするアプリケーションの一般的な実装を提供するクラス <xref:System.ComponentModel.Design.DesignSurface> オブジェクトです。  
  
 <xref:System.ComponentModel.Design.DesignSurface> 自体は、クラスを使用することができますか、ユーザーはそこから新しいクラスを派生し、動作を拡張します。  
  
 <xref:System.ComponentModel.Design.DesignSurface> クラスが自動的にいくつかのデザイン時のサービスを提供します。<xref:System.ComponentModel.Design.DesignSurface> クラスのコンス トラクター内でそのすべてのサービスが追加されます。 これらのサービスのほとんどは、protected で置き換えることによってオーバーライドできます <xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> プロパティです。 サービスを置き換えるには、コンス トラクターをオーバーライド、基本およびを通じて保護対象の変更を加える <xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> プロパティです。 サービス コンテナーに追加されると、実装しているすべてのサービス <xref:System.IDisposable> デザイン サーフェイスが破棄されるときに破棄されます。 置き換え可能の既定のセットの各サービス、 <xref:System.ComponentModel.Design.DesignSurface> クラスは、次の表に示すようには用意されています。  
  
|サービス|説明|  
|----------|--------|  
|<xref:System.ComponentModel.Design.IExtenderProviderService>|独自の拡張プロバイダーを提供するコンテナーのコンポーネントのコレクションの一部ではないオブジェクトを有効にします。|  
|<xref:System.ComponentModel.Design.IExtenderListService>|使用される <xref:System.ComponentModel.TypeDescriptor> 拡張プロバイダーの一覧を取得します。 このサービスに拡張プロバイダーは、コンテナー外ライブことができます。|  
|<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>|デザイナーのメタデータのフックを提供します。 これは、メタデータのフィルター処理の基本インターフェイスです。|  
|<xref:System.ComponentModel.Design.ISelectionService>|デザイナーでコンポーネントを選択する方法を提供します。|  
|<xref:System.ComponentModel.Design.IReferenceService>|これらのオブジェクトが配置されていない場合でも、オブジェクトの名前を取得する方法を提供します。|  
|<xref:System.ComponentModel.Design.DesignSurface>|デザイン画面は、サービスとして提供しています。|  
|<xref:System.ComponentModel.Design.DesignerOptionService>|取得およびデザイナーのオプションの値を設定するには、基本クラスを提供します。|  
  
 次の表は、既定では提供が交換可能なサービスを示します。  
  
|サービス|説明|  
|----------|--------|  
|<xref:System.ComponentModel.Design.IComponentChangeService>|コンポーネントに変更が行われると、イベントを発生させます。|  
|<xref:System.ComponentModel.Design.IDesignerHost>|種類、サービス、およびトランザクションへのアクセスを制御します。 デザイナーのマスター インターフェイスです。|  
|<xref:System.ComponentModel.IContainer>|デザインされているコンポーネントのセットを所有しています。 各デザイナーには、 <xref:System.ComponentModel.IContainer> コンポーネントを所有しています。|  
|<xref:System.ComponentModel.Design.IServiceContainer>|派生した <xref:System.IServiceProvider> しを追加し、デザイナーからサービスを削除する方法を提供します。|  
  
 これらのサービスだけでなく、 <xref:System.ComponentModel.Design.DesignSurface> クラスも、コンポーネントのサイトから利用できる 1 つのサービスを提供します。 このサービスは、各コンポーネントに一意です。 次の表は、置き換えることのできないサービスを示します。  
  
|サービス|説明|  
|----------|--------|  
|<xref:System.ComponentModel.Design.IDictionaryService>|コンポーネントは任意のデータを格納するために使用するキー\/値ペアのジェネリック ディクショナリ。|  
|<xref:System.ComponentModel.INestedContainer>|その他の子コンポーネントをデザイナーに追加するコンポーネントを有効にするコンテナーです。 これらのコンポーネントでは、デザイン サーフェイスの一部になりますが、シリアル化に参加しません。 これは、デザイナーで、それ自体の領域を公開できるコントロールをデザインする場合に便利ですが、シリアル化に参加する地域したくないです。|  
  
 他に、 <xref:System.ComponentModel.ISite>, 、サイトでは、次のインターフェイスも実装されています。  
  
> [!CAUTION]
>  その他のサイトの実装がそれらを実装しないので、無差別なキャストを使用するのではなく、これらのインターフェイスの存在を確認します。  
  
|サービス|説明|  
|----------|--------|  
|<xref:System.ComponentModel.Design.IServiceContainer>|サイト固有のサービスのコンテナーを取得する方法を提供します。 たとえば、 <xref:System.ComponentModel.Design.IDictionaryService> サイト固有のサービスです。 このサービスでは、サイト固有の他のサービスを追加できます。|  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.NamedPermissionSet">for full access to system resources. Demand values: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Associated state:</permission>
    <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
    <altmember cref="T:System.IServiceProvider" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignSurface ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.Design.DesignSurface" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignSurface (IServiceProvider parentProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider parentProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parentProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="parentProvider">親サービス プロバイダーまたは <see langword="null" /> かどうかは親が存在しないサービスを解決するために使用します。</param>
        <summary>
          <see cref="T:System.ComponentModel.Design.DesignSurface" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `parentProvide` が含まれている、画面に含まれるデザイナーは、アプリケーションからサービスを取得することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignSurface (Type rootComponentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type rootComponentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.#ctor(System.Type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rootComponentType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="rootComponentType">作成するルート コンポーネントの型。</param>
        <summary>
          <see cref="T:System.ComponentModel.Design.DesignSurface" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用すると、 <xref:System.ComponentModel.Design.DesignSurface.%23ctor%2A> コンス トラクター、さらに、指定された型のコンポーネントを作成し、読み込みプロセスを終了する単純なデザイナー ローダーを作成しています。 簡単な方法は、このことを前提として、デザイナーを作成するすべての状態の保存が外部で実行します。 内部的には、これを呼び出す <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> ルート コンポーネントの種類を渡します。  
  
> [!NOTE]
>  <xref:System.ComponentModel.Design.DesignSurface.%23ctor%2A> オーバー ロードが受けない <xref:System.Windows.Forms.Design.DesignerOptions>します。<xref:System.Windows.Forms.Design.DesignerOptions> デザイン画面が読み込まれる前に、サービス コンテナーにある必要があります。 アクセスが必要な場合 <xref:System.Windows.Forms.Design.DesignerOptions>, 、空のコンス トラクターを呼び出し、追加、 <xref:System.Windows.Forms.Design.DesignerOptions> に、 <xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> を呼び出すと <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> と `rootComponentType`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rootComponent" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignSurface (IServiceProvider parentProvider, Type rootComponentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider parentProvider, class System.Type rootComponentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider,System.Type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parentProvider" Type="System.IServiceProvider" />
        <Parameter Name="rootComponentType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="parentProvider">親サービス プロバイダーまたは <see langword="null" /> かどうかは親が存在しないサービスを解決するために使用します。</param>
        <param name="rootComponentType">作成するルート コンポーネントの型。</param>
        <summary>
          <see cref="T:System.ComponentModel.Design.DesignSurface" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.ComponentModel.Design.DesignSurface.%23ctor%2A> コンス トラクターは、指定された型のコンポーネントを作成し、読み込みプロセスを終了する単純なデザイナー ローダーを作成します。 簡単な方法は、このことを前提として、デザイナーを作成するすべての状態の保存が外部で実行します。 内部的には、これを呼び出す <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> ルート コンポーネントの種類を渡します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rootComponent" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public void BeginLoad (System.ComponentModel.Design.Serialization.DesignerLoader loader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginLoad(class System.ComponentModel.Design.Serialization.DesignerLoader loader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loader" Type="System.ComponentModel.Design.Serialization.DesignerLoader" />
      </Parameters>
      <Docs>
        <param name="loader">デザイナーの読み込みに使用するデザイナー ローダー。</param>
        <summary>指定したデザイナー ローダーを使用して、読み込みプロセスを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デザイナーの読み込みは、読み込みはこの呼び出しが返された後に進行状況を引き続きように非同期、できます。 イベント ハンドラーをアタッチ、 <xref:System.ComponentModel.Design.IDesignerHost.LoadComplete> デザイン画面には、読み込みが完了したときに通知するイベントです。  
  
 後に <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> が呼び出されると、すぐに取得できます、ビュー、デザイナーのデザイナー ローダーは必要があります提供ためには、少なくともルート コンポーネントに非同期的に読み込むときにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="loader" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService" />
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public void BeginLoad (Type rootComponentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginLoad(class System.Type rootComponentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.BeginLoad(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootComponentType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="rootComponentType">デザイン モードで作成するコンポーネントの型。</param>
        <summary>読み込みプロセスを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `rootComponentType` が指定されている既定のデザイナー ローダーのインスタンスを作成する `rootComponentType` が適用されます。 デザイナーの読み込みは、読み込みはこの呼び出しが返された後に進行状況を引き続きように非同期、できます。 イベント ハンドラーをアタッチ、 <xref:System.ComponentModel.Design.IDesignerHost.LoadComplete> デザイン画面には、読み込みが完了したときに通知するイベントです。  
  
 後に <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> が呼び出されると、すぐに取得できます、ビュー、デザイナーのデザイナー ローダーは必要があります提供ためには、少なくともルート コンポーネントに非同期的に読み込むときにします。  
  
> [!NOTE]
>  <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> メソッドは、コンポーネントの種類のインスタンスを作成し、このインスタンスのデザイナーを初期化します。<xref:System.ComponentModel.Design.DesignSurface.Loaded> イベントは、このメソッドが戻る前に発生します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rootComponentType" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ComponentContainer">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IContainer ComponentContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IContainer ComponentContainer" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignSurface.ComponentContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.ComponentModel.IContainer" /> デザイン画面内で実装します。</summary>
        <value>
          <see cref="T:System.ComponentModel.IContainer" /> デザイン画面内で実装します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.DesignSurface.ComponentContainer%2A> プロパティはデザイン モードで機能しているすべてのオブジェクトを保持します。 コンポーネントを追加するときに <xref:System.ComponentModel.Design.DesignSurface.ComponentContainer%2A>, 、そのデザイナーは読み込まれます。 コンポーネントがデザイン サーフェイスへのフル アクセスを提供しているサイトに位置します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateComponent">
      <MemberSignature Language="C#" Value="protected virtual System.ComponentModel.IComponent CreateComponent (Type componentType);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ComponentModel.IComponent CreateComponent(class System.Type componentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.CreateComponent(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CreateComponent has been replaced by CreateInstance and will be removed after Beta2")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="componentType">作成するコンポーネントの型。</param>
        <summary>コンポーネントのインスタンスを作成します。</summary>
        <returns>新しく作成されたコンポーネントです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.DesignSurface.CreateComponent%2A> メソッドは、デザイン サーフェイスの <xref:System.ComponentModel.Design.IDesignerHost.CreateComponent%2A> コンポーネントのインスタンスを作成します。 コンポーネントは作成され、パブリック コンテナー、デザイン サーフェイスに追加する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="componentType" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDesigner">
      <MemberSignature Language="C#" Value="protected virtual System.ComponentModel.Design.IDesigner CreateDesigner (System.ComponentModel.IComponent component, bool rootDesigner);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ComponentModel.Design.IDesigner CreateDesigner(class System.ComponentModel.IComponent component, bool rootDesigner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.CreateDesigner(System.ComponentModel.IComponent,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.IDesigner</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="rootDesigner" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="component">デザイナーの作成対象となるコンポーネントです。</param>
        <param name="rootDesigner">
          <see langword="true" /> ルート デザイナーを作成するには <see langword="false" /> 標準のデザイナーを作成します。</param>
        <summary>コンポーネントが、コンテナーに追加されると、デザイナーを作成します。</summary>
        <returns>要求されたデザイナーのインスタンスまたは <see langword="null" /> 場合は対応するデザイナーが見つかりませんでした。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.DesignSurface.CreateDesigner%2A> メソッドは、デザイン サーフェイスの <xref:System.ComponentModel.IContainer> コンテナーにコンポーネントを追加するとします。 このメソッドは、デザイナーを作成しますが、初期化は行いません。 返されると、デザイナーがコンテナーで初期化されます。  
  
 <xref:System.ComponentModel.Design.DesignSurface.CreateDesigner%2A> 2 つの異なる種類のデザイナーを作成できます。 設計者と通常のデザイナーをルートします。 ルート デザイナーは、定義では、コンテナーに追加された最初のコンポーネントをデザイン画面のルート コンポーネント デザイナーです。 ルート デザイナーは、ユーザー インターフェイスをエンドユーザーに提供を担当しているために、通常のデザイナーとは異なります。 ルート デザイナーは、通常、デザイン サーフェイスにデザイナーで、このインターフェイスを提供の残りの部分と調整します。  
  
 このメソッドの既定の実装を代行 <xref:System.ComponentModel.TypeDescriptor>, を渡すことで <xref:System.ComponentModel.Design.IRootDesigner> ルート デザイナーのデザイナー型としてまたは <xref:System.ComponentModel.Design.IDesigner> の通常の設計者です。 デザイナーの特定の種類を要求するには、このメソッドをオーバーライドすることができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="component" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected virtual object CreateInstance (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance object CreateInstance(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.CreateInstance(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">作成する型。</param>
        <summary>指定された型のインスタンスを作成します。</summary>
        <returns>新しく作成されたオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `type` は、 <xref:System.ComponentModel.IComponent>, 、<xref:System.ComponentModel.Design.DesignSurface.CreateInstance%2A> 型のコンス トラクターを検索 <xref:System.ComponentModel.IContainer> 最初に、空のコンス トラクターを続けています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateNestedContainer">
      <MemberSignature Language="C#" Value="public System.ComponentModel.INestedContainer CreateNestedContainer (System.ComponentModel.IComponent owningComponent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.INestedContainer CreateNestedContainer(class System.ComponentModel.IComponent owningComponent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.INestedContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owningComponent" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="owningComponent">入れ子になったコンテナーを管理するコンポーネント。</param>
        <summary>入れ子のコントロールやコンポーネントの適切なコンテナーを作成します。</summary>
        <returns>入れ子になったコンテナーです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コンポーネントを入れ子になったコンテナーに追加すると、そのデザイナーを作成し、すべてのサービスの対象で使用できるようにデザイン画面からします。 入れ子になったコンテナーに追加されたコンポーネントは、シリアル化には参加しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="owningComponent" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateNestedContainer">
      <MemberSignature Language="C#" Value="public System.ComponentModel.INestedContainer CreateNestedContainer (System.ComponentModel.IComponent owningComponent, string containerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.INestedContainer CreateNestedContainer(class System.ComponentModel.IComponent owningComponent, string containerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.INestedContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owningComponent" Type="System.ComponentModel.IComponent" />
        <Parameter Name="containerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="owningComponent">入れ子になったコンテナーを管理するコンポーネント。</param>
        <param name="containerName">入れ子になったコンテナーの追加の名前。</param>
        <summary>入れ子のコントロールやコンポーネントの適切なコンテナーを作成します。</summary>
        <returns>入れ子になったコンテナーです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コンポーネントを入れ子になったコンテナーに追加すると、そのデザイナーを作成し、すべてのサービスの対象で使用できるようにデザイン画面からします。 入れ子になったコンテナーに追加されたコンポーネントは、シリアル化には参加しません。  
  
 追加の名前を指定する、 <xref:System.ComponentModel.Design.DesignSurface.CreateNestedContainer%2A> メソッドに値を渡すことによって `containerName`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="owningComponent" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.Design.DesignSurface" /> で使用したリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The public <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> method follows the standard <xref:System.IDisposable> pattern. Calling this method destroys the design surface. The protected version of this method is **languageKeyword tag is not supported!!!!**  
 and follows the normal <xref:System.IDisposable> pattern.  
  
> [!NOTE]
>  Because <xref:System.ComponentModel.Design.DesignSurface> does not have any native code to clean up, it does not have a finalizer that calls <xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29>. If you need to call <xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29>, you must add a finalizer yourself.  
  
 Call <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> when you are finished using the <xref:System.ComponentModel.Design.DesignSurface>. The <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> method leaves the <xref:System.ComponentModel.Design.DesignSurface> in an unusable state. After calling <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>, you must release all references to the <xref:System.ComponentModel.Design.DesignSurface> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Design.DesignSurface> was occupying. For more information, see [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) and [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9).  
  
> [!NOTE]
>  Always call <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> before you release your last reference to the <xref:System.ComponentModel.Design.DesignSurface>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Design.DesignSurface> object's **languageKeyword tag is not supported!!!!**  
>  method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.ComponentModel.Design.DesignSurface" /> で使用したリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The public <xref:System.ComponentModel.Design.DesignSurface.Dispose> method follows the standard <xref:System.IDisposable> pattern. Calling this method destroys the design surface. The protected version of this method is **languageKeyword tag is not supported!!!!**  
 and follows the normal <xref:System.IDisposable> pattern.  
  
> [!NOTE]
>  Because <xref:System.ComponentModel.Design.DesignSurface> does not have any native code to clean up, it does not have a finalizer that calls <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>. If you need to call <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>, you must add a finalizer yourself.  
  
 This method is called by the public **languageKeyword tag is not supported!!!!**  
**legacyBold tag is not supported!!!!**  
method and the <xref:System.Object.Finalize%2A> method. **languageKeyword tag is not supported!!!!**  
 invokes the protected **languageKeyword tag is not supported!!!!**  
 method with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> invokes **languageKeyword tag is not supported!!!!**  
 with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.Design.DesignSurface> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Disposed">
      <MemberSignature Language="C#" Value="public event EventHandler Disposed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Disposed" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.Disposed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>デザイン サーフェイスが破棄されるときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サーフェイスが破棄された場合にのみ、パブリック <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> メソッドを <xref:System.ComponentModel.Design.DesignSurface> と呼びます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DtelLoading">
      <MemberSignature Language="C#" Value="public bool DtelLoading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DtelLoading" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignSurface.DtelLoading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 **デザイン時のエラー一覧** が読み込み中です。</summary>
        <value>
          <see langword="true" /> 場合、 **デザイン時のエラー一覧** 読み込み中でない場合は、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>デザイン画面への変更をシリアル化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.DesignSurface.Flush%2A> シリアライザーまでデザイン サーフェイスに加えられた変更をプッシュするメソッドを呼び出すことができます。 これにより、デザイン画面と、シリアル化された状態が同期されます。 このメソッドの実際の実装は、デザイン サーフェイスに関連付けられたデザイナー ローダーに転送されます。 デザイナー ローダーのまでの変更を遅らせることもできます <xref:System.ComponentModel.Design.DesignSurface.Flush%2A> が呼び出されるか、シリアル化されたデータをすべてのユーザーの変更で最新の状態に保つことできます。<xref:System.ComponentModel.Design.DesignSurface.Flush%2A> メソッドは、モデルをデザイナー ローダーを使用することを選択するに関係なくシリアル化された状態が同期されるは、実際のデザイン サーフェイスを確認します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flushed">
      <MemberSignature Language="C#" Value="public event EventHandler Flushed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Flushed" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.Flushed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼び出しが行われたときに発生する、 <see cref="M:System.ComponentModel.Design.DesignSurface.Flush" /> メソッドの <see cref="T:System.ComponentModel.Design.DesignSurface" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デザイナー ローダーが最初に、フラッシュし、 <xref:System.ComponentModel.Design.DesignSurface.Flushed> イベントが発生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.GetService(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">取得するサービスの型。</param>
        <summary>サービス コンテナーからサービスを取得します。</summary>
        <returns>実装する、または、派生クラスであるオブジェクト <paramref name="serviceType" />, 、または <see langword="null" /> サービス コンテナーには、サービスが存在しない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.DesignSurface.GetService%2A> メソッドは、デザイン サーフェイスのサービス コンテナーにサービスを取得します。 さらに、これは構築時に、デザイン画面に指定されたサービス プロバイダーに転送します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignSurface.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>デザイン画面が現在読み込まれているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> デザイン画面が現在読み込まれている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.Design.LoadedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.Design.LoadedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.Loaded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.LoadedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>デザイナーの読み込みが完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.DesignSurface.Loaded> 読み込みに成功と失敗のイベントが発生します。 このイベント ハンドラーのコードでは、例外をスローする場合に、デザイナーはアンロードされます。  
  
 <xref:System.ComponentModel.Design.LoadedEventArgs> オブジェクトを使用して読み込み、成功したかを確認して、読み込み中に発生したエラーの一覧も提供します。  
  
> [!NOTE]
>  シリアル化システムは、エラーを許容できることも、読み込みに成功のエラーが発生することができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadErrors">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection LoadErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection LoadErrors" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignSurface.LoadErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エラーまたは void コレクションの読み込み中のコレクションを返します。</summary>
        <value>A <see cref="T:System.Collections.ICollection" /> の読み込みエラーです。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loading">
      <MemberSignature Language="C#" Value="public event EventHandler Loading;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Loading" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.Loading" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>デザイナーが読み込まれるときに発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLoaded">
      <MemberSignature Language="C#" Value="protected virtual void OnLoaded (System.ComponentModel.Design.LoadedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLoaded(class System.ComponentModel.Design.LoadedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.OnLoaded(System.ComponentModel.Design.LoadedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Design.LoadedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.Design.LoadedEventArgs" />。</param>
        <summary>
          <see cref="E:System.ComponentModel.Design.DesignSurface.Loaded" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLoading">
      <MemberSignature Language="C#" Value="protected virtual void OnLoading (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLoading(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.OnLoading(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.ComponentModel.Design.DesignSurface.Loading" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnloaded">
      <MemberSignature Language="C#" Value="protected virtual void OnUnloaded (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUnloaded(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.OnUnloaded(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.ComponentModel.Design.DesignSurface.Unloaded" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnloading">
      <MemberSignature Language="C#" Value="protected virtual void OnUnloading (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUnloading(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.OnUnloading(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.ComponentModel.Design.DesignSurface.Unloading" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnViewActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnViewActivate (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnViewActivate(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.OnViewActivate(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.ComponentModel.Design.DesignSurface.ViewActivated" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceContainer">
      <MemberSignature Language="C#" Value="protected System.ComponentModel.Design.ServiceContainer ServiceContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.ServiceContainer ServiceContainer" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignSurface.ServiceContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ServiceContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービス コンテナーを取得します。</summary>
        <value>デザイン画面に含まれるデザイナーにすべてのサービスを提供するサービス コンテナーです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 構築時に <xref:System.ComponentModel.Design.DesignSurface> このサービス コンテナーを既定のサービスに追加します。 現在の状態で、既定のサービスをおくことができますかに削除して、自分で置き換えることができます。 既定のサービスはすべて要求に応じて作成、構築時にそれらを追加するためのパフォーマンスの損失はないためにであることです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event EventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.Unloaded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>デザイナーがアンロードを完了したときに発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unloading">
      <MemberSignature Language="C#" Value="public event EventHandler Unloading;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Unloading" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.Unloading" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>デザイナーはアンロードするときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デザイナーがアンロードされると、デザイナーのビューを含むすべてのデザイナーの状態が破棄されます。 この時点で、ビューが親必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public object View { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object View" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignSurface.View" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ルート デザイナーのビューを取得します。</summary>
        <value>ルート デザイナーのビュー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> メソッドは、読み込みプロセスを開始する時刻呼び出す必要があります。 ビューを返すため、ビューを提供するルート デザイナーは、デザイナー ローダーによって作成された最初のオブジェクトを読み込むときに、デザイナー ローダーが終了する前に行うことができます。 ビューを使用できない場合 <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> で例外が発生します。  
  
 ビュー技術の概念は今後使用しません。 しかし、旧バージョンとの互換性のためのルート デザイナーのインターフェイスに残ります。 使用してすべてのユーザーからの使用が非表示 <xref:System.ComponentModel.Design.DesignSurface> オブジェクトです。<xref:System.ComponentModel.Design.DesignSurface.View%2A> プロパティは、ルート デザイナーにサポートされているテクノロジを渡すことによってビュー テクノロジを非表示にします。  
  
   
  
## 例  
 次のコード例に示す方法 <xref:System.ComponentModel.Design.DesignSurface.View%2A> 非表示には、テクノロジを表示します。  
  
 \[C\#\]  
  
 `IRootDesigner d;`  
  
 `ViewTechnology[] supported = d.SupportedTechnologies;`  
  
 `return d.GetView(supported[0]);`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">デザイン サーフェイスを読み込まない、デザイナー ローダーがルート デザイナーをまだ作成していないまたはデザイン サーフェイスが完了しましたが、失敗の負荷。 詳細についてはで利用可能な場合があります、 <see cref="P:System.Exception.InnerException" />です。</exception>
        <exception cref="T:System.NotSupportedException">デザイナーが読み込まれますが、このデザイン サーフェイスと互換性のあるビューを提供しません。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Design.IDesignerHost" /> に接続されている、 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 破棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ViewActivated">
      <MemberSignature Language="C#" Value="public event EventHandler ViewActivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ViewActivated" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.ViewActivated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="M:System.ComponentModel.Design.IDesignerHost.Activate" /> にメソッドが呼び出された <see cref="T:System.ComponentModel.Design.IDesignerHost" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サポートする場合、 <xref:System.ComponentModel.Design.IDesignerHost.Activate%2A> メソッド、イベント ハンドラーには、このデザイン サーフェイスでのウィンドウがアクティブ化する必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.Design.DesignSurface" /> で使用したリソースを解放します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CreateNestedContainer">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>入れ子のコントロールやコンポーネントの適切なコンテナーを作成します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BeginLoad">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>読み込みプロセスを開始します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.Design.DesignSurface" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>