<Type Name="ServiceContainer" FullName="System.ComponentModel.Design.ServiceContainer">
  <TypeSignature Language="C#" Value="public class ServiceContainer : IDisposable, IServiceProvider, System.ComponentModel.Design.IServiceContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceContainer extends System.Object implements class System.ComponentModel.Design.IServiceContainer, class System.IDisposable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.ServiceContainer" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IServiceContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>単純な実装を提供、 <see cref="T:System.ComponentModel.Design.IServiceContainer" /> インターフェイスです。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.ServiceContainer> を格納し、サービスを提供するオブジェクトを使用できます。<xref:System.ComponentModel.Design.ServiceContainer> は、<xref:System.ComponentModel.Design.IServiceContainer> インターフェイスを実装します。  
  
 <xref:System.ComponentModel.Design.ServiceContainer> 親を追加するコンス トラクターを使用してオブジェクトを作成できる <xref:System.ComponentModel.Design.IServiceContainer> を通じてサービスを必要に応じて追加またはすべての親から削除 <xref:System.ComponentModel.Design.IServiceContainer> オブジェクトの直接の親を含む <xref:System.ComponentModel.Design.IServiceContainer>します。 追加またはすべてからサービスを削除する <xref:System.ComponentModel.Design.IServiceContainer> これにリンクされている実装 <xref:System.ComponentModel.Design.IServiceContainer> 、親で呼び出し、 <xref:System.ComponentModel.Design.ServiceContainer.AddService%2A> または <xref:System.ComponentModel.Design.ServiceContainer.RemoveService%2A> サービス要求を昇格するかどうかを示すブール値を受け取るメソッド オーバー ロードします。  
  
> [!NOTE]
>  <xref:System.Security.Permissions.HostProtectionAttribute> このクラスに適用される属性が次 <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> プロパティ値: <xref:System.Security.Permissions.HostProtectionResource.SharedState>です。<xref:System.Security.Permissions.HostProtectionAttribute> は、デスクトップ アプリケーション \(通常、アイコンのダブルクリック、コマンドの入力、またはブラウザーへの URL の入力により起動されます\) には影響しません。 詳細については、<xref:System.Security.Permissions.HostProtectionAttribute> クラスのトピックまたは「[SQL Server Programming and Host Protection Attributes](http://msdn.microsoft.com/ja-jp/7dfa36b4-e773-4c75-a3ff-ff1af3ce4c4f)」を参照してください。  
  
   
  
## 例  
 次のサンプル プログラムでは、サービスのチェーンを示していて、結果のサービスの可用性のチェーンにリンクされている <xref:System.ComponentModel.Design.ServiceContainer> オブジェクトです。 プログラムを使用すると、リンクされたサービスのチェーン内のサービスの可用性を確認および使用するユーザー インターフェイスを提供、 <xref:System.ComponentModel.Design.ServiceContainer.AddService%2A>, 、<xref:System.ComponentModel.Design.ServiceContainer.GetService%2A>, 、および <xref:System.ComponentModel.Design.ServiceContainer.RemoveService%2A> メソッドだけのリンクされたサービスのコンテナーです。  
  
 [!code-cpp[ServiceArchitectureExample\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ServiceArchitectureExample/CPP/serviceform.cpp#1)]
 [!code-csharp[ServiceArchitectureExample\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ServiceArchitectureExample/CS/serviceform.cs#1)]
 [!code-vb[ServiceArchitectureExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ServiceArchitectureExample/VB/serviceform.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IServiceProvider" />
    <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
    <altmember cref="T:System.ComponentModel.Design.ServiceCreatorCallback" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.Design.ServiceContainer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceContainer (IServiceProvider parentProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider parentProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parentProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="parentProvider">親サービス プロバイダー。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> クラスの指定した親サービス プロバイダーを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サービス コンテナーでは、コンテナーにローカルで利用可能なが解除される場合に、サービスを取得するこのサービス オブジェクト プロバイダーを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddService(class System.Type serviceType, class System.ComponentModel.Design.ServiceCreatorCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.ComponentModel.Design.ServiceCreatorCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType">追加するサービスの型。</param>
        <param name="callback">サービスを作成できるコールバック オブジェクト。 これにより、サービスを利用可能として宣言するが、サービスが要求されるまでは、オブジェクトの作成を延期します。</param>
        <summary>指定したサービスをサービス コンテナーに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、サービスを追加する方法、 <xref:System.ComponentModel.Design.ServiceContainer>です。  
  
 [!code-cpp[ServiceContainerExample\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/ServiceContainerExample/CPP/form1.cpp#3)]
 [!code-csharp[ServiceContainerExample\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ServiceContainerExample/CS/form1.cs#3)]
 [!code-vb[ServiceContainerExample\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ServiceContainerExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> または <paramref name="callback" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">型のサービス <paramref name="serviceType" /> コンテナーに既に存在します。</exception>
        <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (Type serviceType, object serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddService(class System.Type serviceType, object serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceInstance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">追加するサービスの型。</param>
        <param name="serviceInstance">追加するサービスのインスタンス。 このオブジェクトが実装かによって指定された型から継承する必要があります、 <c>serviceType</c> パラメーター。</param>
        <summary>指定したサービスをサービス コンテナーに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、サービスを追加する方法、 <xref:System.ComponentModel.Design.ServiceContainer>です。  
  
 [!code-cpp[ServiceContainerExample\#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ServiceContainerExample/CPP/form1.cpp#2)]
 [!code-csharp[ServiceContainerExample\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ServiceContainerExample/CS/form1.cs#2)]
 [!code-vb[ServiceContainerExample\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ServiceContainerExample/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> または <paramref name="serviceInstance" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">型のサービス <paramref name="serviceType" /> コンテナーに既に存在します。</exception>
        <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public virtual void AddService (Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback, bool promote);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddService(class System.Type serviceType, class System.ComponentModel.Design.ServiceCreatorCallback callback, bool promote) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.ComponentModel.Design.ServiceCreatorCallback" />
        <Parameter Name="promote" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serviceType">追加するサービスの型。</param>
        <param name="callback">サービスを作成できるコールバック オブジェクト。 これにより、サービスを利用可能として宣言するが、サービスが要求されるまでは、オブジェクトの作成を延期します。</param>
        <param name="promote">
          <see langword="true" /> このサービスを任意の親サービス コンテナーに追加する場合それ以外の場合、 <see langword="false" />です。</param>
        <summary>指定したサービスをサービス コンテナーに追加します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> または <paramref name="callback" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">型のサービス <paramref name="serviceType" /> コンテナーに既に存在します。</exception>
        <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public virtual void AddService (Type serviceType, object serviceInstance, bool promote);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddService(class System.Type serviceType, object serviceInstance, bool promote) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceInstance" Type="System.Object" />
        <Parameter Name="promote" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serviceType">追加するサービスの型。</param>
        <param name="serviceInstance">追加するサービス型のインスタンス。 このオブジェクトが実装かによって指定された型から継承する必要があります、 <c>serviceType</c> パラメーター。</param>
        <param name="promote">
          <see langword="true" /> このサービスを任意の親サービス コンテナーに追加する場合それ以外の場合、 <see langword="false" />です。</param>
        <summary>指定したサービスをサービス コンテナーに追加します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> または <paramref name="serviceInstance" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">型のサービス <paramref name="serviceType" /> コンテナーに既に存在します。</exception>
        <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
      </Docs>
    </Member>
    <Member MemberName="DefaultServices">
      <MemberSignature Language="C#" Value="protected virtual Type[] DefaultServices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] DefaultServices" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.ServiceContainer.DefaultServices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>によって直接実装されている既定のサービスを取得 <see cref="T:System.ComponentModel.Design.ServiceContainer" />します。</summary>
        <value>既定のサービスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、これで直接実装される既定のサービスを返します。 <xref:System.ComponentModel.Design.IServiceContainer>します。 このプロパティの既定の実装を返すには、 <xref:System.ComponentModel.Design.IServiceContainer> と <xref:System.ComponentModel.Design.ServiceContainer> 型です。 このプロパティをオーバーライドしての既定の動作を変更する、独自の型を返すことが <xref:System.ComponentModel.Component.GetService%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このサービス コンテナーを破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> コンテナー内のインスタンスが作成されたすべてのサービス検索し、破棄することも、実装する <xref:System.IDisposable>, 、サービスの一覧をクリアします。  
  
 <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> を使い終わったら <xref:System.ComponentModel.Design.ServiceContainer> を呼び出します。<xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> メソッドによって、<xref:System.ComponentModel.Design.ServiceContainer> は使用不可の状態になります。 呼び出した後 <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A>, 、に対するすべての参照を解放する必要があります、 <xref:System.ComponentModel.Design.ServiceContainer> ガベージ コレクターがメモリをクリアできるようにする、 <xref:System.ComponentModel.Design.ServiceContainer> によって占有されていた。 詳細については、[Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) および [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9) を参照してください。  
  
> [!NOTE]
>  <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> への最後の参照を解放する前に、必ず <xref:System.ComponentModel.Design.ServiceContainer> を呼び出してください。 そうしないと、ガベージ コレクターが <xref:System.ComponentModel.Design.ServiceContainer> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 場合、 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 中の破棄された以外の場合、処理を行っています <see langword="false" />します。</param>
        <summary>このサービス コンテナーを破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.Design.ServiceContainer.Dispose%2A> コンテナー内のインスタンスが作成されたすべてのサービス検索し、破棄することも、実装する <xref:System.IDisposable>, 、サービスの一覧をクリアします。  
  
 このメソッドは、パブリック `Dispose()`メソッドおよび <xref:System.Object.Finalize%2A> メソッドです。`Dispose()` 保護対象の起動 `Dispose(Boolean)` メソッドを `disposing` パラメーターを設定する `true`です。<xref:System.Object.Finalize%2A> 呼び出す `Dispose` と `disposing` 設定 `false`します。  
  
 ときに、 `disposing` パラメーターが true の場合、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放します。 この <xref:System.ComponentModel.Design.ServiceContainer> 参照します。 このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public virtual object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">取得するサービスの型。</param>
        <summary>要求したサービスを取得します。</summary>
        <returns>検出できなかった場合、サービスのインスタンスまたは <see langword="null" /> 場合に見つかりませんでした。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public void RemoveService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">削除するサービスの型。</param>
        <summary>指定されたサービス型をサービス コンテナーから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例からサービスを削除する方法、 <xref:System.ComponentModel.Design.ServiceContainer>です。  
  
 [!code-cpp[ServiceContainerExample\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ServiceContainerExample/CPP/form1.cpp#4)]
 [!code-csharp[ServiceContainerExample\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ServiceContainerExample/CS/form1.cs#4)]
 [!code-vb[ServiceContainerExample\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ServiceContainerExample/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public virtual void RemoveService (Type serviceType, bool promote);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveService(class System.Type serviceType, bool promote) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="promote" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serviceType">削除するサービスの型。</param>
        <param name="promote">
          <see langword="true" /> このサービスを任意の親サービス コンテナーから削除する場合それ以外の場合、 <see langword="false" />です。</param>
        <summary>指定されたサービス型をサービス コンテナーから削除します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.ComponentModel.Design.IServiceContainer" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveService">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたサービス型をサービス コンテナーから削除します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このサービス コンテナーを破棄します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AddService">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したサービスをサービス コンテナーに追加します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.Design.ServiceContainer" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>