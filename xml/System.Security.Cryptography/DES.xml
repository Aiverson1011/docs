<Type Name="DES" FullName="System.Security.Cryptography.DES">
  <TypeSignature Language="C#" Value="public abstract class DES : System.Security.Cryptography.SymmetricAlgorithm" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DES extends System.Security.Cryptography.SymmetricAlgorithm" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.DES" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.SymmetricAlgorithm</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>すべての <see cref="T:System.Security.Cryptography.DES" /> の実装の派生元となる DES \(Data Encryption Standard\) アルゴリズムの基底クラスを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 This algorithm supports a key length of 64 bits.  
  
> [!NOTE]
>  A newer asymmetric encryption algorithm, Advanced Encryption Standard \(AES\), is available. Consider using the <xref:System.Security.Cryptography.Aes> class instead of the <xref:System.Security.Cryptography.DES> class. Use <xref:System.Security.Cryptography.DES> only for compatibility with legacy applications and data.  
  
   
  
## 例  
 The following code example uses <xref:System.Security.Cryptography.DESCryptoServiceProvider> \(an implementation of <xref:System.Security.Cryptography.DES>\) to encrypt a string to an in\-memory buffer. It then decrypts and displays the round\-tripped string.  
  
 [!code-csharp[TripleDESCryptoServiceProvider\#1](~/samples/snippets/csharp/VS_Snippets_CLR/tripledescryptoserviceprovider/cs/program.cs#1)]
 [!code-vb[TripleDESCryptoServiceProvider\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/tripledescryptoserviceprovider/vb/program.vb#1)]  
  
 Decryption can be handled in the same way; use <xref:System.Security.Cryptography.DESCryptoServiceProvider.CreateDecryptor%2A> instead of <xref:System.Security.Cryptography.DESCryptoServiceProvider.CreateEncryptor%2A>. The same key \(<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>\) and initialization vector \(<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>\) used to encrypt the file must be used to decrypt it.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DES ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DES.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Security.Cryptography.DES" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  
  
 This method initializes the protected fields of the <xref:System.Security.Cryptography.SymmetricAlgorithm> class to the default values shown in the following table.  
  
|Field|Default Value|  
|-----------|-------------------|  
|<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|64|  
|<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|64|  
|<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DES Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DES Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DES.Create" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DES</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>暗号オブジェクトのインスタンスを作成して、Data Encryption Standard \(<see cref="T:System.Security.Cryptography.DES" />\) アルゴリズムを実行します。</summary>
        <returns>暗号オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Creates an instance of the <xref:System.Security.Cryptography.DES> object that can be used for encrypting and decrypting data.  
  
   
  
## 例  
 The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in a file.  
  
 [!code-cpp[Cryptography.DES.Create.File\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.DES.Create.File/CPP/fileexample.cpp#1)]
 [!code-csharp[Cryptography.DES.Create.File\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.DES.Create.File/CS/fileexample.cs#1)]
 [!code-vb[Cryptography.DES.Create.File\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.DES.Create.File/VB/fileexample.vb#1)]  
  
 The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in memory.  
  
 [!code-cpp[Cryptography.DES.Create.Memory\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.DES.Create.Memory/CPP/memoryexample.cpp#1)]
 [!code-csharp[Cryptography.DES.Create.Memory\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.DES.Create.Memory/CS/memoryexample.cs#1)]
 [!code-vb[Cryptography.DES.Create.Memory\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.DES.Create.Memory/VB/memoryexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DES Create (string algName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DES Create(string algName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DES.Create(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.DES</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algName">特定の実装の名前 <see cref="T:System.Security.Cryptography.DES" /> を使用します。</param>
        <summary>データ暗号化標準の指定した実装を実行する暗号オブジェクトのインスタンスを作成 \(<see cref="T:System.Security.Cryptography.DES" />\) アルゴリズム。</summary>
        <returns>暗号オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例を作成して使用する方法を示しています、 <xref:System.Security.Cryptography.DES> を暗号化し、ファイル内のデータを復号化オブジェクト。  
  
 [!code-cpp[Cryptography.DES.Createstring.File\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.DES.Createstring.File/CPP/fileexample.cpp#1)]
 [!code-csharp[Cryptography.DES.Createstring.File\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.DES.Createstring.File/CS/fileexample.cs#1)]
 [!code-vb[Cryptography.DES.Createstring.File\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.DES.Createstring.File/VB/fileexample.vb#1)]  
  
 次のコード例を作成して使用する方法を示しています、 <xref:System.Security.Cryptography.DES> を暗号化し、メモリ内のデータを復号化オブジェクト。  
  
 [!code-cpp[Cryptography.DES.Createstring.Memory\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.DES.Createstring.Memory/CPP/memoryexample.cpp#1)]
 [!code-csharp[Cryptography.DES.Createstring.Memory\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.DES.Createstring.Memory/CS/memoryexample.cs#1)]
 [!code-vb[Cryptography.DES.Createstring.Memory\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.DES.Createstring.Memory/VB/memoryexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSemiWeakKey">
      <MemberSignature Language="C#" Value="public static bool IsSemiWeakKey (byte[] rgbKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSemiWeakKey(unsigned int8[] rgbKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbKey" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbKey">半脆弱性をテストする共有キー。</param>
        <summary>指定したキーが半脆弱であるかどうかを判断します。</summary>
        <returns>キーが半脆弱である場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 半脆弱キーは、暗号解読しやすいを生成するキーのペアです。 テキストが部分的に弱いキーで暗号化されている場合に、元のテキスト度の低い脆弱なキーのパートナーと結果の暗号の暗号化を返します。 ペアがあります。 6 つ既知度の低い脆弱なキーのデータ暗号化標準 \(<xref:System.Security.Cryptography.DES>\) アルゴリズム。 このメソッドは、それらの半脆弱なキーをチェックします。  
  
 半脆弱キー結果を設定しようとして、 <xref:System.Security.Cryptography.CryptographicException>です。<xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A> を呼び出して、ランダムなキー、キーが返されることはありませんが、セミコロン弱を作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="rgbKey" /> パラメーターのサイズが無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsWeakKey">
      <MemberSignature Language="C#" Value="public static bool IsWeakKey (byte[] rgbKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWeakKey(unsigned int8[] rgbKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbKey" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbKey">脆弱性をテストする共有キー。</param>
        <summary>指定したキーが脆弱であるかどうかを判断します。</summary>
        <returns>キーが脆弱な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 脆弱なキーは、キーの暗号を解読しやすい結果です。 テキストが脆弱なキーで暗号化されている場合に、元のテキスト結果の暗号をもう一度同じ脆弱なキーで暗号化を返します。 データ暗号化標準の 4 つの既知の脆弱なキーがある \(<xref:System.Security.Cryptography.DES>\) アルゴリズム。 このメソッドは、それらの弱いキーを確認します。  
  
 脆弱なキー結果を設定しようとして、 <xref:System.Security.Cryptography.CryptographicException>です。<xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A> と呼ばれるランダムなキーを作成するには、脆弱なキーが返されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="rgbKey" /> パラメーターのサイズが無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public override byte[] Key { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Key" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.DES.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Security.Cryptography.DES" /> \(Data Encryption Standard\) アルゴリズム用の秘密鍵 \(共通鍵\) を取得または設定します。</summary>
        <value>
          <see cref="T:System.Security.Cryptography.DES" /> アルゴリズムの秘密鍵 \(共通鍵\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティが場合 `null` を使用している場合 <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> を呼び出して新しいランダムな値を作成します。  
  
 キーの長さでなければなりません <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>します。  
  
 このアルゴリズムは、64 ビットのキーの長さをサポートします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">鍵を <see langword="null" /> に設定しようとしました。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue" /> と等しくない長さの鍵を設定しようとしました。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">弱い \(脆弱\) 鍵 \(<see cref="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])" /> を参照\) または部分的に弱い \(準脆弱\) 鍵 \(<see cref="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])" /> を参照\) を設定しようとしました。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>暗号オブジェクトのインスタンスを作成して、Data Encryption Standard \(<see cref="T:System.Security.Cryptography.DES" />\) アルゴリズムを実行します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>