<Type Name="Rfc2898DeriveBytes" FullName="System.Security.Cryptography.Rfc2898DeriveBytes">
  <TypeSignature Language="C#" Value="public class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Rfc2898DeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Rfc2898DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.Security.Cryptography.HMACSHA1" /> に基づく擬似乱数ジェネレーターを使用して、パスワード ベースのキー派生機能 \(PBKDF2\) を実装します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> takes a password, a salt, and an iteration count, and then generates keys through calls to the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> method.  
  
 RFC 2898 includes methods for creating a key and initialization vector \(IV\) from a password and salt. You can use PBKDF2, a password\-based key derivation function, to derive keys using a pseudo\-random function that allows keys of virtually unlimited length to be generated. The <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class can be used to produce a derived key from a base key and other parameters. In a password\-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count.  
  
 For more information about PBKDF2, see RFC 2898, "PKCS \#5: Password\-Based Cryptography Specification Version 2.0," available on the [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119). See section 5.2, "PBKDF2," for complete details.  
  
> [!IMPORTANT]
>  Never hard\-code a password within your source code.  Hard\-coded passwords can be retrieved from an assembly by using the [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), by using a hexadecimal editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  
  
   
  
## 例  
 The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.  It then encrypts and decrypts some data using the keys.  
  
 [!code-cpp[rfc28981\#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981\#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password">キーを派生させるために使用するパスワード。</param>
        <param name="salt">キーを派生させるために使用するキー salt。</param>
        <summary>キーを派生させるために使用するパスワードおよび salt を指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Salt のサイズは 8 バイトである必要がありますかそれ以上。  
  
 RFC 2898 には、パスワードおよび salt からキーと初期化ベクター \(IV\) を作成するためのメソッドが含まれています。 擬似乱数関数により、生成される数は事実上無制限の長さのキーを使用するキーを派生させる PBKDF2、キー派生のパスワードに基づく関数を使用できます。<xref:System.Security.Cryptography.Rfc2898DeriveBytes> 基本キーおよびその他のパラメーターからの派生キーを生成するクラスを使用することができます。 キー派生のパスワードに基づく関数では、基本のキーがパスワードでし、その他のパラメーターは salt 値および反復回数します。  
  
 PBKDF2 に関する詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化仕様のバージョン 2.0 では、"で使用できる、 [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119)します。 詳細については、セクション 5.2、"PBKDF2、"を参照してください。  
  
> [!IMPORTANT]
>  ハードコーディングしないソース コード内でのパスワード。  使用してパスワードをハードコーディングをアセンブリから取得できます、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 16 進エディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開き、します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> に対するキーのと同じ 2 つ作成するクラス、 <xref:System.Security.Cryptography.TripleDES> クラスです。  暗号化し、キーを使用して一部のデータを復号化します。  
  
 [!code-cpp[rfc28981\#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981\#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定された salt サイズが 8 バイト未満または、イテレーションのカウントが 1 より小さい値です。</exception>
        <exception cref="T:System.ArgumentNullException">パスワード、または salt が <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">キーを派生させるために使用するパスワード。</param>
        <param name="saltSize">クラスで生成するランダム salt のサイズ。</param>
        <summary>キーを派生させるために使用するパスワードおよび salt サイズを指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Salt のサイズは 8 バイトである必要がありますかそれ以上。  
  
 RFC 2898 には、パスワードおよび salt からキーと初期化ベクター \(IV\) を作成するためのメソッドが含まれています。 擬似乱数関数により、生成される数は事実上無制限の長さのキーを使用するキーを派生させる PBKDF2、キー派生のパスワードに基づく関数を使用できます。<xref:System.Security.Cryptography.Rfc2898DeriveBytes> 基本キーおよびその他のパラメーターからの派生キーを生成するクラスを使用することができます。 キー派生のパスワードに基づく関数では、基本のキーがパスワードでし、その他のパラメーターは salt 値および反復回数します。  
  
 PBKDF2 に関する詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化仕様のバージョン 2.0 では、"で使用できる、 [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119)します。 詳細については、セクション 5.2、"PBKDF2、"を参照してください。  
  
> [!IMPORTANT]
>  ハードコーディングしないソース コード内でのパスワード。  使用してパスワードをハードコーディングをアセンブリから取得できます、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 16 進エディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開き、します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定した salt のサイズは 8 バイト未満です。</exception>
        <exception cref="T:System.ArgumentNullException">パスワード、または salt が <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">キーを派生させるために使用するパスワード。</param>
        <param name="salt">キーを派生させるために使用するキー salt。</param>
        <param name="iterations">演算の反復処理回数。</param>
        <summary>キーを派生させるために使用するパスワード、salt、および反復回数を指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Salt のサイズは 8 バイトである必要がありますかそれ以上反復回数を 0 より大きい値にする必要があります。 イテレーションの最小の推奨される数は 1000年です。  
  
 RFC 2898 には、パスワードおよび salt からキーと初期化ベクター \(IV\) を作成するためのメソッドが含まれています。 擬似乱数関数により、生成される数は事実上無制限の長さのキーを使用するキーを派生させる PBKDF2、キー派生のパスワードに基づく関数を使用できます。[Rfc2898DeriveBytes コンストラクター \(Byte\[\], Byte\<xref:System.Security.Cryptography.Rfc2898DeriveBytes> 基本キーおよびその他のパラメーターからの派生キーを生成するクラスを使用することができます。 キー派生のパスワードに基づく関数では、基本のキーがパスワードでし、その他のパラメーターは salt 値および反復回数します。  
  
 PBKDF2 に関する詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化仕様のバージョン 2.0 では、"で使用できる、 [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119)します。 詳細については、セクション 5.2、"PBKDF2、"を参照してください。  
  
> [!IMPORTANT]
>  ハードコーディングしないソース コード内でのパスワード。  使用してパスワードをハードコーディングをアセンブリから取得できます、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 16 進エディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開き、します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定された salt サイズが 8 バイト未満または、イテレーションのカウントが 1 より小さい値です。</exception>
        <exception cref="T:System.ArgumentNullException">パスワード、または salt が <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">キーを派生させるために使用するパスワード。</param>
        <param name="salt">キーを派生させるために使用するキー salt。</param>
        <param name="iterations">演算の反復処理回数。</param>
        <summary>キーを派生させるために使用するパスワード、salt、および反復回数を指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Salt のサイズは 8 バイトである必要がありますかそれ以上反復回数を 0 より大きい値にする必要があります。 イテレーションの最小の推奨される数は 1000年です。  
  
 RFC 2898 には、パスワードおよび salt からキーと初期化ベクター \(IV\) を作成するためのメソッドが含まれています。 擬似乱数関数により、生成される数は事実上無制限の長さのキーを使用するキーを派生させる PBKDF2、キー派生のパスワードに基づく関数を使用できます。[Rfc2898DeriveBytes コンストラクター \(String, Byte\<xref:System.Security.Cryptography.Rfc2898DeriveBytes> 基本キーおよびその他のパラメーターからの派生キーを生成するクラスを使用することができます。 キー派生のパスワードに基づく関数では、基本のキーがパスワードでし、その他のパラメーターは salt 値および反復回数します。  
  
 PBKDF2 に関する詳細については、RFC 2898 を参照してください。"PKCS 5: パスワードに基づく暗号化仕様のバージョン 2.0 では、"で使用できる、 [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119)します。 詳細については、セクション 5.2、"PBKDF2、"を参照してください。  
  
> [!IMPORTANT]
>  ハードコーディングしないソース コード内でのパスワード。  使用してパスワードをハードコーディングをアセンブリから取得できます、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 16 進エディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開き、します。  
  
   
  
## 例  
 次のコード例では、 [Rfc2898DeriveBytes コンストラクター \(String, Byte\<xref:System.Security.Cryptography.Rfc2898DeriveBytes> に対するキーのと同じ 2 つ作成するクラス、 [Rfc2898DeriveBytes コンストラクター \(String, Byte\<xref:System.Security.Cryptography.TripleDES> クラスです。  暗号化し、キーを使用して一部のデータを復号化します。  
  
 [!code-cpp[rfc28981\#1](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#1)]
 [!code-csharp[rfc28981\#1](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#1)]
 [!code-vb[rfc28981\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定された salt サイズが 8 バイト未満または、イテレーションのカウントが 1 より小さい値です。</exception>
        <exception cref="T:System.ArgumentNullException">パスワード、または salt が <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password">キーを派生させるために使用するパスワード。</param>
        <param name="saltSize">クラスで生成するランダム salt のサイズ。</param>
        <param name="iterations">演算の反復処理回数。</param>
        <summary>キーを派生させるために使用するパスワード、salt サイズ、および反復回数を指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Salt のサイズは 8 バイトである必要がありますか、大きい反復回数を 0 より大きい値にする必要があります。 イテレーションの推奨される最小数は 1000 です。  
  
 RFC 2898 には、パスワードおよび salt からキーと初期化ベクター \(IV\) を作成するためのメソッドが含まれます。 擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。<xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます。 関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。  
  
 PBKDF2 の詳細については、RFC 2898 を参照してください。"PKCS \#5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、"で使用できる、 [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkID=37119)です。 詳細については、セクション 5.2、"PBKDF2、"を参照してください。  
  
> [!IMPORTANT]
>  ハードコーディングしないでをソース コード内のパスワード。  使用してパスワードをハードコーディング アセンブリから取得できる、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b)16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定された salt のサイズが 8 バイトより小さいか、イテレーションのカウントが 1 より小さい。</exception>
        <exception cref="T:System.ArgumentNullException">パスワード、または salt が<see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="iterations " />範囲外です。 このパラメーターには、負でない値が必要です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="salt">To be added.</param>
        <param name="iterations">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, unsigned int8[] salt, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="salt">To be added.</param>
        <param name="iterations">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rfc2898DeriveBytes (string password, int saltSize, int iterations, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string password, int32 saltSize, int32 iterations, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="saltSize" Type="System.Int32" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="password">To be added.</param>
        <param name="saltSize">To be added.</param>
        <param name="iterations">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname">キーを派生させる対象となるアルゴリズム名。</param>
        <param name="alghashname">キーを派生させるために使用するハッシュ アルゴリズム名。</param>
        <param name="keySize">派生させるキーのサイズ \(ビット単位\)。</param>
        <param name="rgbIV">キーを派生させるために使用する初期化ベクター \(IV: Initialization Vector\)。</param>
        <summary>
          <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> オブジェクトから暗号キーを派生させます。</summary>
        <returns>派生させたキー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この関数は CryptDeriveKey\(\)、Crypto API 関数のラッパーであり、目的は、Crypto API を使用するアプリケーションとの相互運用性を提供します。  
  
 場合、 `keySize` パラメーターが 0 のビットに設定されている、指定されたアルゴリズムの既定のキー サイズを使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="keySize" /> パラメーターが正しくありません。  
  
 または  
  
 暗号化サービス プロバイダー \(CSP\) を取得できません。  
  
 または  
  
 <paramref name="algname" /> パラメーターが有効なアルゴリズム名ではありません。  
  
 または  
  
 <paramref name="alghashname" /> パラメーターが有効なハッシュ アルゴリズムの名前ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスによって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by the public **languageKeyword tag is not supported!!!!**  
 method and the **languageKeyword tag is not supported!!!!**  
 method. **languageKeyword tag is not supported!!!!**  
 invokes the protected **languageKeyword tag is not supported!!!!**  
 method with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. **languageKeyword tag is not supported!!!!**  
 invokes **languageKeyword tag is not supported!!!!**  
 with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.Rfc2898DeriveBytes> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb">生成する擬似ランダム キー バイトの数。</param>
        <summary>このオブジェクトの擬似ランダム キーを返します。</summary>
        <returns>擬似ランダム キー バイトを格納したバイト配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> クラスに基づく擬似乱数ジェネレーターを使用して、PBKDF2 機能を実装する <xref:System.Security.Cryptography.HMACSHA1>です。<xref:System.Security.Cryptography.Rfc2898DeriveBytes> クラスは、パスワード、salt、および反復カウントとへの呼び出しからのキーを生成、 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> メソッドです。 このメソッドを繰り返し呼び出すには、同じキーは生成されません。2 つの呼び出しを追加する代わりに、 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> メソッドを `cb` のパラメーター値 `20` は呼び出すことと同等、 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> メソッドを 1 回、 `cb` のパラメーター値 `40`です。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A> のインスタンスのキーを取得するメソッド <xref:System.Security.Cryptography.Rfc2898DeriveBytes>します。 このコード例が示されている例の一部は、 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> クラスです。  
  
 [!code-cpp[rfc28981\#2](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#2)]
 [!code-csharp[rfc28981\#2](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#2)]
 [!code-vb[rfc28981\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="cb " />範囲外です。 このパラメーターには、負でない数値が必要です。</exception>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.HashAlgorithmName HashAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.HashAlgorithmName HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithmName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>演算の反復処理回数を取得または設定します。</summary>
        <value>演算の反復処理回数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イテレーションのカウントが何回の操作を実行します。 このメソッドのカウントが 0 より大きくなければなりません。 イテレーションの最小の推奨される数は 1000年です。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount%2A> キーの生成時に使用するイテレーションの数を表示するプロパティです。 このコード例が示されている例の一部は、 <xref:System.Security.Cryptography.Rfc2898DeriveBytes> クラスです。  
  
 [!code-cpp[rfc28981\#3](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#3)]
 [!code-csharp[rfc28981\#3](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#3)]
 [!code-vb[rfc28981\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">イテレーションの数は、1 より小さい値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>演算の状態をリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is automatically called if the salt or iteration count is modified.  
  
   
  
## 例  
 The following example shows how to use the <xref:System.Security.Cryptography.Rfc2898DeriveBytes.Reset%2A> method. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.  
  
 [!code-cpp[rfc28981\#5](~/samples/snippets/cpp/VS_Snippets_CLR/rfc28981/CPP/rfc28981.cpp#5)]
 [!code-csharp[rfc28981\#5](~/samples/snippets/csharp/VS_Snippets_CLR/rfc28981/CS/rfc28981.cs#5)]
 [!code-vb[rfc28981\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/rfc28981/vb/rfc28981.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>演算で使用するキー salt 値を取得または設定します。</summary>
        <value>演算で使用するキー salt 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Salt のバイトのランダムなセットを使用して、承認されていない難しくメッセージの暗号化を解除するのに。 辞書攻撃とは、攻撃、攻撃者が事前に計算された暗号化キーの値を最も可能性の高いで暗号化された値を比較することによって、暗号化されたメッセージを復号化しようとします。 このような攻撃は、キーの派生前に、パスワードの最後に、salt、またはランダムなバイト数の導入によってはるかに困難になります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定した salt のサイズは 8 バイト未満です。</exception>
        <exception cref="T:System.ArgumentNullException">ソルトは、 <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>