<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ハッシュ ベース メッセージ認証コード \(HMAC\) を使用して、計算、 <see cref="T:System.Security.Cryptography.RIPEMD160" /> ハッシュ関数。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.Cryptography.HMACRIPEMD160> ripemd\-160 ハッシュ関数から構築され、として、ハッシュ ベース メッセージ認証コード \(HMAC\) を使用するキー付きハッシュ アルゴリズムの一種です。 HMAC プロセスとメッセージ データの共有キーの合成、結果のハッシュ関数に、ここでも、秘密キーとそのハッシュ値を合成し、ハッシュ関数をもう一度します。 出力ハッシュは、160 ビットの長さです。  
  
 HMAC を使用して、送信者と受信者に、共有シークレット キーを共有すると、安全でないチャネル経由で送信されるメッセージを改ざんするかどうかを決定します。 送信者は、元のデータのハッシュ値を計算し、単一のメッセージと、元のデータとハッシュ値の両方を送信します。 受信者は、受信したメッセージに対してハッシュ値を再計算され、計算の HMAC に送信された HMAC が一致することを確認します。  
  
 メッセージを変更し、正しいハッシュ値を再現するのには、秘密キーが必要なために、データや、ハッシュ値を変更の結果は、不一致が発生します。 そのため、元と計算されたハッシュ値が一致した場合、メッセージが認証されます。  
  
 <xref:System.Security.Cryptography.HMACRIPEMD160> 任意のサイズのキーを受け付ける、160 ビット長であるハッシュ シーケンスを生成します。  
  
 RIPEMD ハッシュ アルゴリズムとその後続言語は、ヨーロッパ成熟プロジェクトによって開発されました。 元の RIPEMD アルゴリズムでは、MD4、MD5 を置き換えるために設計されて、その後し、および ripemd\-160 の名前を変更します。 Ripemd\-160 ハッシュ アルゴリズムは、160 ビットのハッシュ値を生成します。 アルゴリズムは、開発者をパブリック ドメインに配置しました。  
  
   
  
## 例  
 次の例を使用して、ファイルに署名する方法を示しています、 <xref:System.Security.Cryptography.HMACRIPEMD160> オブジェクトおよびファイルを確認する方法です。  
  
 [!code-cpp[HMACRIPEMD160\#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160\#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 64 バイトのランダムに生成されたキーを持つクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.Cryptography.HMACRIPEMD160> ripemd\-160 ハッシュ関数から構築され、として、ハッシュ ベース メッセージ認証コード \(HMAC\) を使用するキー付きハッシュ アルゴリズムの一種です。 HMAC プロセスとメッセージ データの共有キーの合成、結果のハッシュ関数に、ここでも、秘密キーとそのハッシュ値を合成し、ハッシュ関数をもう一度します。 出力ハッシュは、160 バイトの長さです。  
  
 このコンス トラクターは、64 バイトのランダムに生成されたキーを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> 暗号化の共有キー。 キーは、任意の長さを指定できますが、64 バイト以上である場合にハッシュされています \(sha\-1 を使用して\) 64 バイトのキーを派生させる。 したがって、秘密キーの推奨サイズは 64 バイトです。</param>
        <summary>キー データを指定して、<see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.Cryptography.HMACRIPEMD160> ripemd\-160 ハッシュ関数から構築され、として、ハッシュ ベース メッセージ認証コード \(HMAC\) を使用するキー付きハッシュ アルゴリズムの一種です。 HMAC プロセスとメッセージ データの共有キーの合成、結果のハッシュ関数に、ここでも、秘密キーとそのハッシュ値を合成し、ハッシュ関数をもう一度します。 出力ハッシュは、160 バイトの長さです。  
  
   
  
## 例  
 このコンス トラクターを使用する方法の例は、次を参照してください。、 <xref:System.Security.Cryptography.HMACRIPEMD160> クラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>