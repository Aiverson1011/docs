<Type Name="RC2CryptoServiceProvider" FullName="System.Security.Cryptography.RC2CryptoServiceProvider">
  <TypeSignature Language="C#" Value="public sealed class RC2CryptoServiceProvider : System.Security.Cryptography.RC2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RC2CryptoServiceProvider extends System.Security.Cryptography.RC2" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.RC2CryptoServiceProvider" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.RC2</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>暗号化サービス プロバイダー \(CSP\) の実装にアクセスするラッパー オブジェクトの定義、 <see cref="T:System.Security.Cryptography.RC2" /> アルゴリズムです。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.Cryptography.RC2CryptoServiceProvider> 実装では、8 ビット単位で 40 ビットから 128 ビットのキー長がサポートしています。  
  
 <xref:System.Security.Cryptography.RC2CryptoServiceProvider> オブジェクトは、ブロック暗号を暗号化し、8 バイトのブロック内のデータを復号化です。  このクラスは、8 バイト未満である場合に、データの最後のブロックを埋め込みます。  この埋め込みの結果として暗号化されたデータの長さは、元のプレーン テキストを超える場合があります。  
  
 なお、 <xref:System.Security.Cryptography.RC2CryptoServiceProvider> オブジェクトはソルトを使用しません。  
  
> [!NOTE]
>  新しい対称暗号化アルゴリズムでは、Advanced Encryption Standard \(AES\) では、使用できます。 使用を検討して、 <xref:System.Security.Cryptography.Aes> アルゴリズムとその派生クラスの代わりに、 <xref:System.Security.Cryptography.RC2CryptoServiceProvider> クラスです。 使用 <xref:System.Security.Cryptography.RC2CryptoServiceProvider> レガシ アプリケーションやデータとの互換性のためだけです。  
  
   
  
## 例  
 次のコード例では、暗号化し、文字列を復号化します。  
  
 [!code-csharp[System.Security.Cryptography.RC2CryptoServiceProvider Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/CS/class1.cs#1)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RC2CryptoServiceProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RC2CryptoServiceProvider.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Security.Cryptography.RC2CryptoServiceProvider" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、暗号化し、文字列を復号化します。  
  
 [!code-csharp[System.Security.Cryptography.RC2CryptoServiceProvider Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/CS/class1.cs#1)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">暗号化サービス プロバイダー \(CSP\) を取得できません。</exception>
        <exception cref="T:System.InvalidOperationException">非対応の FIPS アルゴリズムが見つかりませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDecryptor">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Cryptography.ICryptoTransform CreateDecryptor(unsigned int8[] rgbKey, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ICryptoTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbKey" Type="System.Byte[]" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbKey">対称アルゴリズムに使用する共有キー。</param>
        <param name="rgbIV">対称アルゴリズムに使用する初期化ベクター。</param>
        <summary>作成、対称 <see cref="T:System.Security.Cryptography.RC2" /> 指定したキーを復号化オブジェクト \(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />\) と初期化ベクター \(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />\)。</summary>
        <returns>対称 <see cref="T:System.Security.Cryptography.RC2" /> 復号化オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して作成、暗号化されたメッセージを復号化に使用、 [CreateDecryptor メソッド \(Byte\<xref:System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor%2A> 同じパラメーターを持つオーバー ロードします。  
  
   
  
## 例  
 次のコード例では、暗号化し、文字列を復号化します。  
  
 [!code-csharp[System.Security.Cryptography.RC2CryptoServiceProvider Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/CS/class1.cs#1)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="F:System.Security.Cryptography.CipherMode.OFB" /> 暗号モードを使用します。  
  
 または  
  
 A <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 8 ビット以外からのフィードバック サイズで暗号モードを使用します。  
  
 または  
  
 無効なキー サイズが使用されました。  
  
 または  
  
 アルゴリズムのキーのサイズは使用できませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateEncryptor">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Cryptography.ICryptoTransform CreateEncryptor(unsigned int8[] rgbKey, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ICryptoTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbKey" Type="System.Byte[]" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbKey">対称アルゴリズムに使用する共有キー。</param>
        <param name="rgbIV">対称アルゴリズムに使用する初期化ベクター。</param>
        <summary>作成、対称 <see cref="T:System.Security.Cryptography.RC2" /> 指定したキーに暗号化オブジェクト \(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />\) と初期化ベクター \(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />\)。</summary>
        <returns>対称 <see cref="T:System.Security.Cryptography.RC2" /> 暗号化オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 [CreateEncryptor メソッド \(Byte\<xref:System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor%2A> このメソッドの結果を復号化に同じパラメーターを持つオーバー ロードします。  
  
   
  
## 例  
 次のコード例では、暗号化し、文字列を復号化します。  
  
 [!code-csharp[System.Security.Cryptography.RC2CryptoServiceProvider Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/CS/class1.cs#1)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <see cref="F:System.Security.Cryptography.CipherMode.OFB" /> 暗号モードを使用します。  
  
 または  
  
 A <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 8 ビット以外からのフィードバック サイズで暗号モードを使用します。  
  
 または  
  
 無効なキー サイズが使用されました。  
  
 または  
  
 アルゴリズムのキーのサイズは使用できませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="EffectiveKeySize">
      <MemberSignature Language="C#" Value="public override int EffectiveKeySize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EffectiveKeySize" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有効なサイズで使用される秘密キーのビット単位で設定を取得または、 <see cref="T:System.Security.Cryptography.RC2" /> アルゴリズムです。</summary>
        <value>使用されるビットでは、有効なキー サイズ、 <see cref="T:System.Security.Cryptography.RC2" /> アルゴリズムです。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
          <see cref="P:System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize" /> プロパティが以外の値に設定された、 <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue" /> プロパティです。</exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateIV">
      <MemberSignature Language="C#" Value="public override void GenerateIV ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateIV() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ランダムな初期化ベクターが生成されます \(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />\)、アルゴリズムで使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して乱数を生成 <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> none を指定するとします。  
  
   
  
## 例  
 次のコード例では、暗号化し、文字列を復号化します。  
  
 [!code-csharp[System.Security.Cryptography.RC2CryptoServiceProvider Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/CS/class1.cs#1)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public override void GenerateKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ランダムなキーが生成されます \(<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />\) アルゴリズムに使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用するが指定されなかった場合は、ランダムなキーを生成できます。  
  
 <xref:System.Security.Cryptography.RC2CryptoServiceProvider> 実装では、8 ビット単位で 40 ビットから 128 ビットのキー長がサポートしています。  
  
   
  
## 例  
 次のコード例では、暗号化し、文字列を復号化します。  
  
 [!code-csharp[System.Security.Cryptography.RC2CryptoServiceProvider Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/CS/class1.cs#1)]
 [!code-vb[System.Security.Cryptography.RC2CryptoServiceProvider Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSalt">
      <MemberSignature Language="C#" Value="public bool UseSalt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSalt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または salt を 11 バイト長、値 0 キーを作成するかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> キー作成する場合は、salt を 11 バイト長、ゼロ値です。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt%2A> プロパティでは、11 バイト長、ゼロ値のソルトを使用する既存のアプリケーションとの相互運用することができます。  ほとんどのシナリオを使用しないでくださいと salt、 <xref:System.Security.Cryptography.RC2CryptoServiceProvider> キー。  
  
   
  
## 例  
 次のコード例、 <xref:System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt%2A> プロパティを `true`, 、暗号化して、値の暗号化を解除します。  
  
 [!code-cpp[Cryptography.RC2CryptoServiceProvider\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RC2CryptoServiceProvider/cpp/example.cpp#1)]
 [!code-csharp[Cryptography.RC2CryptoServiceProvider\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RC2CryptoServiceProvider/CS/example.cs#1)]
 [!code-vb[Cryptography.RC2CryptoServiceProvider\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RC2CryptoServiceProvider/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDecryptor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>対称復号化オブジェクトを作成します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CreateEncryptor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>対称暗号化オブジェクトを作成します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>