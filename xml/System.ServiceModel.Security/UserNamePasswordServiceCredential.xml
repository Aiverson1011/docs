<Type Name="UserNamePasswordServiceCredential" FullName="System.ServiceModel.Security.UserNamePasswordServiceCredential">
  <TypeSignature Language="C#" Value="public sealed class UserNamePasswordServiceCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit UserNamePasswordServiceCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.UserNamePasswordServiceCredential" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>使用して、サービスがユーザー名\/パスワード認証を使用するユーザーを認証する方法を構成し、ログオン トークンのキャッシュを構成するクラスを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 サービスで使用されるバインディングがユーザー名とパスワードに基づく認証を使用するように構成されていない場合、このクラスの関連するプロパティは無視されます。 このようなプロパティには、<xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.CustomUserNamePasswordValidator%2A>、<xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.IncludeWindowsGroups%2A>、<xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.MembershipProvider%2A>、および <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.UserNamePasswordValidationMode%2A> プロパティがあります。  
  
 サービスで使用されるバインディングが Windows 認証のユーザー名とパスワードを使用するように構成されていない場合、ログオン トークンのキャッシュに関連する設定は無視されます。 このような設定には、<xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.CachedLogonTokenLifetime%2A>、<xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.CacheLogonTokens%2A>、および <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.MaxCachedLogonTokens%2A> プロパティがあります。  
  
   
  
## 例  
 サービスの <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential> のプロパティの値を表示する例を次に示します。  
  
 [!code-csharp[UserNamePasswordServiceCredential\#1](~/samples/snippets/csharp/VS_Snippets_CFX/usernamepasswordservicecredential/cs/source.cs#1)]
 [!code-vb[UserNamePasswordServiceCredential\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/usernamepasswordservicecredential/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CachedLogonTokenLifetime">
      <MemberSignature Language="C#" Value="public TimeSpan CachedLogonTokenLifetime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan CachedLogonTokenLifetime" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.CachedLogonTokenLifetime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トークンがキャッシュ内に保持される最大時間を取得または設定します。</summary>
        <value>トークンがキャッシュ内に保持される最大時間を表す <see cref="T:System.TimeSpan" />。<c>.</c>既定値は 15 分です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)] <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.CacheLogonTokens%2A>.  
  
   
  
## 例  
 このプロパティの値を取得する例を次に示します。  
  
 [!code-csharp[UserNamePasswordServiceCredential\#1](~/samples/snippets/csharp/VS_Snippets_CFX/usernamepasswordservicecredential/cs/source.cs#1)]
 [!code-vb[UserNamePasswordServiceCredential\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/usernamepasswordservicecredential/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheLogonTokens">
      <MemberSignature Language="C#" Value="public bool CacheLogonTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CacheLogonTokens" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.CacheLogonTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログオン トークンをキャッシュするかどうかを示す値を取得または設定します。</summary>
        <value>ログオン トークンをキャッシュする場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 By default, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] security asks the Windows security subsystem to create a logon token for every incoming user name\/password security token if the user name is being mapped to a Windows account. This behavior can be changed by setting the <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.UserNamePasswordValidationMode%2A> property.  
  
 For <xref:System.ServiceModel.Security.UserNamePasswordValidationMode.Windows> mode, the service uses Win32's **languageKeyword tag is not supported!!!!**  
 function for user name\/password authentication. If the <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.CacheLogonTokens%2A> is set to **languageKeyword tag is not supported!!!!**  
, the resulting Windows token is cached and reused for the same user name\/password pair. The cache is valid for <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.CachedLogonTokenLifetime%2A>. The maximum number of caches is limited to <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.MaxCachedLogonTokens%2A>.  
  
   
  
## 例  
 The following example gets the value of this property.  
  
 [!code-csharp[UserNamePasswordServiceCredential\#1](~/samples/snippets/csharp/VS_Snippets_CFX/usernamepasswordservicecredential/cs/source.cs#1)]
 [!code-vb[UserNamePasswordServiceCredential\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/usernamepasswordservicecredential/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomUserNamePasswordValidator">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Selectors.UserNamePasswordValidator CustomUserNamePasswordValidator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Selectors.UserNamePasswordValidator CustomUserNamePasswordValidator" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.CustomUserNamePasswordValidator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.UserNamePasswordValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カスタム ユーザー名およびパスワード検証を取得または設定します。</summary>
        <value>カスタム ユーザー名およびパスワード検証します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.UserNamePasswordValidationMode%2A> を有効にするには、<xref:System.ServiceModel.Security.UserNamePasswordValidationMode.MembershipProvider> プロパティを <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.MembershipProvider%2A> に設定する必要があります。<xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.MembershipProvider%2A> プロパティが設定されていて <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.UserNamePasswordValidationMode%2A> プロパティが設定されていない場合、[!INCLUDE[indigo2](~/includes/indigo2-md.md)] は Windows 認証を使用し、<xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.MembershipProvider%2A> プロパティの値を無視します。  
  
 <xref:System.ServiceModel.Security.UserNamePasswordValidationMode.Custom> モードでは、サービスは <xref:System.IdentityModel.Selectors.UserNamePasswordValidator> メソッドを呼び出すことによりユーザー名\/パスワード認証に <xref:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate%2A> を使用します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeWindowsGroups">
      <MemberSignature Language="C#" Value="public bool IncludeWindowsGroups { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeWindowsGroups" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.IncludeWindowsGroups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セキュリティ コンテキストに Windows グループが含まれるかどうかを示す値を取得または設定します。</summary>
        <value>Windows グループがセキュリティ コンテキストに含まれている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Windows ユーザー名とパスワードを検証するほとんどのシナリオでは、ユーザーが属する Windows グループが承認決定に役立つ情報となります。 一方、Windows グループが不要な場合には、このプロパティを `false` に設定すると、グループ全体のクレーム設定を行わずに済み、パフォーマンスを向上させることができます。  
  
   
  
## 例  
 このプロパティの値を取得する例を次に示します。  
  
 [!code-csharp[UserNamePasswordServiceCredential\#1](~/samples/snippets/csharp/VS_Snippets_CFX/usernamepasswordservicecredential/cs/source.cs#1)]
 [!code-vb[UserNamePasswordServiceCredential\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/usernamepasswordservicecredential/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxCachedLogonTokens">
      <MemberSignature Language="C#" Value="public int MaxCachedLogonTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxCachedLogonTokens" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.MaxCachedLogonTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キャッシュするログオン トークンの最大数を取得または設定します。</summary>
        <value>キャッシュするログオン トークンの最大数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値は 128 です。[!INCLUDE[crdefault](~/includes/crdefault-md.md)]<xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.CacheLogonTokens%2A>.  
  
   
  
## 例  
 このプロパティの値を取得する例を次に示します。  
  
 [!code-csharp[UserNamePasswordServiceCredential\#1](~/samples/snippets/csharp/VS_Snippets_CFX/usernamepasswordservicecredential/cs/source.cs#1)]
 [!code-vb[UserNamePasswordServiceCredential\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/usernamepasswordservicecredential/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MembershipProvider">
      <MemberSignature Language="C#" Value="public System.Web.Security.MembershipProvider MembershipProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Security.MembershipProvider MembershipProvider" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.MembershipProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メンバーシップ プロバイダーを取得または設定します。</summary>
        <value>このサービスの <see cref="T:System.Web.Security.MembershipProvider" />。 既定値は <see cref="T:System.Web.Security.SqlMembershipProvider" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceModel.Security.UserNamePasswordValidationMode.MembershipProvider> モードでは、サービスは <xref:System.Web.Security.MembershipProvider> メソッドを呼び出すことによりユーザー名\/パスワード認証に <xref:System.Web.Security.MembershipProvider.ValidateUser%2A> を使用します。  
  
> [!NOTE]
>  <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.UserNamePasswordValidationMode%2A> を有効にするには、<xref:System.ServiceModel.Security.UserNamePasswordValidationMode.MembershipProvider> プロパティを <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.MembershipProvider%2A> に設定する必要があります。<xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.MembershipProvider%2A> プロパティが設定されていて <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.UserNamePasswordValidationMode%2A> プロパティが設定されていない場合、[!INCLUDE[indigo2](~/includes/indigo2-md.md)] は Windows 認証を使用し、<xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.MembershipProvider%2A> プロパティの値を無視します。  
  
 <xref:System.ServiceModel.Security.UserNamePasswordValidationMode> プロパティが `MembershipProvider` に設定されていて `MembershipProvider` プロパティに値が設定されていない場合、既定は <xref:System.Web.Security.SqlMembershipProvider> クラスとなります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">資格情報が読み取り専用のときにこのプロパティを設定しようとしました。</exception>
      </Docs>
    </Member>
    <Member MemberName="UserNamePasswordValidationMode">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Security.UserNamePasswordValidationMode UserNamePasswordValidationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceModel.Security.UserNamePasswordValidationMode UserNamePasswordValidationMode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.UserNamePasswordServiceCredential.UserNamePasswordValidationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Security.UserNamePasswordValidationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザー名とパスワードを検証する方法を取得または設定します。</summary>
        <value>
          <see cref="T:System.ServiceModel.Security.UserNamePasswordValidationMode" /> 内の列挙値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定できる値は次のとおりです。  
  
-   <xref:System.ServiceModel.Security.UserNamePasswordValidationMode.Custom>  
  
-   <xref:System.ServiceModel.Security.UserNamePasswordValidationMode.MembershipProvider>  
  
-   <xref:System.ServiceModel.Security.UserNamePasswordValidationMode.Windows>  
  
 このプロパティが <xref:System.ServiceModel.Security.UserNamePasswordValidationMode.Custom> に設定されている場合、サービスは <xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.CustomUserNamePasswordValidator%2A> によって返されるオブジェクトを使用して、受信メッセージ内のユーザー名とパスワードを検証します。  
  
> [!NOTE]
>  [!INCLUDE[indigo2](~/includes/indigo2-md.md)] サービスがインターネット インフォメーション サービス \(IIS\) でトランスポート レベルのセキュリティを使用してホストされており、<xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.UserNamePasswordValidationMode%2A> プロパティが <xref:System.ServiceModel.Security.UserNamePasswordValidationMode.Custom> に設定されている場合、カスタム認証方式では Windows 認証のサブセットが使用されます。 これは、このシナリオの場合、[!INCLUDE[indigo2](~/includes/indigo2-md.md)] がカスタム認証を呼び出す前に IIS によって Windows 認証が実行されるためです。  
  
 このプロパティの値が <xref:System.ServiceModel.Security.UserNamePasswordValidationMode.MembershipProvider> に設定されている場合は、<xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.MembershipProvider%2A> プロパティを設定してメンバーシップ プロバイダーを指定します。これにより、<xref:System.ServiceModel.Security.UserNamePasswordServiceCredential.MembershipProvider%2A> プロパティで指定したメンバーシップ プロバイダーのインスタンスが、受信メッセージ内のユーザー名とパスワードの検証に使用されます。  
  
   
  
## 例  
 このプロパティの値を取得する例を次に示します。  
  
 [!code-csharp[UserNamePasswordServiceCredential\#1](~/samples/snippets/csharp/VS_Snippets_CFX/usernamepasswordservicecredential/cs/source.cs#1)]
 [!code-vb[UserNamePasswordServiceCredential\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/usernamepasswordservicecredential/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>