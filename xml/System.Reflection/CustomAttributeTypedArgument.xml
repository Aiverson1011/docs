<Type Name="CustomAttributeTypedArgument" FullName="System.Reflection.CustomAttributeTypedArgument">
  <TypeSignature Language="C#" Value="public struct CustomAttributeTypedArgument" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit CustomAttributeTypedArgument extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.CustomAttributeTypedArgument" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>リフレクションのみのコンテキスト内でのカスタム属性の引数、つまり配列引数の要素を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 Code that is being examined in the reflection\-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>, <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName>, and so on. If the code for the attribute type itself is loaded into the reflection\-only context, it cannot be executed.  
  
 The <xref:System.Reflection.CustomAttributeNamedArgument> structure is used by the <xref:System.Reflection.CustomAttributeData> class to provide access to the type and value of a positional argument specified for a custom attribute instance, without executing the attribute constructor. It also provides access to the type and value of a named argument without executing the code of the corresponding property of the custom attribute type.  
  
 The types and values of all the positional and named arguments of an attribute instance are provided by <xref:System.Reflection.CustomAttributeTypedArgument> structures. The positional attributes returned by the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A?displayProperty=fullName> property are directly represented by <xref:System.Reflection.CustomAttributeTypedArgument> structures, but the named arguments returned by the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A?displayProperty=fullName> property are represented by <xref:System.Reflection.CustomAttributeNamedArgument> structures; to get the <xref:System.Reflection.CustomAttributeTypedArgument> structure for a named argument, use the <xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=fullName> property.  
  
 If an argument is an array of values, the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A> property of the <xref:System.Reflection.CustomAttributeTypedArgument> that represents the argument returns a generic <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Reflection.CustomAttributeTypedArgument> objects. Each <xref:System.Reflection.CustomAttributeTypedArgument> object in the collection represents the corresponding element of the array.  
  
 To create instances of the <xref:System.Reflection.CustomAttributeData> class, use the **languageKeyword tag is not supported!!!!**  
<xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> factory method.  
  
   
  
## 例  
 The following example defines a custom attribute with four constructors and four properties. Two of the properties are read\-only, and are set by using the positional parameters of the constructors. The other two properties are read\/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  
  
 The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection\-only context and displays the custom attributes.  
  
 The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  
  
 [!code-cpp[CustomAttributeData\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Reflection.CustomAttributeData" />
    <altmember cref="T:System.Reflection.CustomAttributeNamedArgument" />
    <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomAttributeTypedArgument (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">カスタム属性の引数の値。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 指定の値を持つクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value` パラメーターを指定できません `null` このコンス トラクターの引数の型がの型から推論されるため `value`です。 指定する、 `null` 値を使用して、 <xref:System.Reflection.CustomAttributeTypedArgument.%23ctor%28System.Type%2CSystem.Object%29> コンス トラクターです。  
  
 このコンス トラクターの継承元により使用は、 <xref:System.Reflection.CustomAttributeTypedArgument> クラスです。 アプリケーション コードで使用するためのものではありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomAttributeTypedArgument (Type argumentType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type argumentType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="argumentType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="argumentType">カスタム属性の引数の型。</param>
        <param name="value">カスタム属性の引数の値。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 指定した型と値を持つクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの継承元により使用は、 <xref:System.Reflection.CustomAttributeTypedArgument> クラスです。 アプリケーション コードで使用するためのものではありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="argumentType" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ArgumentType">
      <MemberSignature Language="C#" Value="public Type ArgumentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ArgumentType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>または引数の配列要素の引数の型を取得します。</summary>
        <value>A <see cref="T:System.Type" /> 、または配列要素の引数の型を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティがによって返される値の実際の型を識別する単純な引数または引数の配列の要素では、 <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A> プロパティです。 配列引数に対してはこのプロパティが配列型を返しますが、 <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A> プロパティを返します。、 `ReadOnlyCollection<CustomAttributeTypedArgument>` \(`ReadOnlyCollection(Of CustomAttributeTypedArgument)` Visual Basic で\) コレクションの各要素では、配列の引数の対応する要素を表します。  
  
   
  
## 例  
 次の例では、次の 4 つのコンス トラクターと 4 つのプロパティを持つカスタム属性を定義します。 2 つのプロパティは読み取り専用し、コンス トラクターの位置指定パラメーターを使用して設定します。 その他の 2 つのプロパティは読み取り\/書き込み、および名前付き引数を使用して設定できます。 1 つの位置指定プロパティは、文字列の配列で、1 つの名前付きプロパティは整数の配列です。  
  
 属性は、アセンブリ、アセンブリで宣言された型、型のメソッドおよびメソッドのパラメーターに適用されます。 さまざまなコンス トラクターは、このような場合に使用されます。 実行すると、アセンブリがリフレクションのみのコンテキストに読み込まし、カスタム属性を表示します。  
  
 型に適用される属性は、位置指定引数と名前付きの両方の引数の配列プロパティを示します。  
  
 <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A> プロパティを使用、 `ShowValueOrArray` 属性の種類を表示するカスタム属性のデータを表示するメソッドです。  
  
 [!code-cpp[CustomAttributeData\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.CustomAttributeTypedArgument.Value" />
        <altmember cref="Overload:System.Reflection.Assembly.ReflectionOnlyLoad" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">比較対象のもう 1 つのオブジェクト。</param>
        <summary>このインスタンスと指定したオブジェクトが等しいかどうかを示します。</summary>
        <returns>
          <see langword="true" /> とこのインスタンスが同じ型で、同じ値を表している場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ValueType.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>このインスタンスのハッシュ コードである 32 ビット符号付き整数。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.ValueType.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Reflection.CustomAttributeTypedArgument left, valuetype System.Reflection.CustomAttributeTypedArgument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.CustomAttributeTypedArgument" />
        <Parameter Name="right" Type="System.Reflection.CustomAttributeTypedArgument" />
      </Parameters>
      <Docs>
        <param name="left">等値演算子の左側に表示される <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 構造体。</param>
        <param name="right">等値演算子の右側に表示される <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 構造体。</param>
        <summary>2 つの <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 構造体が等しいかどうかテストします。</summary>
        <returns>2 つの <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 構造体が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.Reflection.CustomAttributeTypedArgument.Equals%28System.Reflection.CustomAttributeTypedArgument%2CSystem.Reflection.CustomAttributeTypedArgument%29?displayProperty=fullName>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Reflection.CustomAttributeTypedArgument left, valuetype System.Reflection.CustomAttributeTypedArgument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.CustomAttributeTypedArgument" />
        <Parameter Name="right" Type="System.Reflection.CustomAttributeTypedArgument" />
      </Parameters>
      <Docs>
        <param name="left">非等値演算子の左側に表示される <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 構造体。</param>
        <param name="right">非等値演算子の右側に表示される <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 構造体。</param>
        <summary>2 つの <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 構造体が異なるかどうかテストします。</summary>
        <returns>2 つの <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 構造体が異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[The equivalent method for this operator is <xref:System.Reflection.CustomAttributeTypedArgument.Compare%28System.Reflection.CustomAttributeTypedArgument%2CSystem.Reflection.CustomAttributeTypedArgument%29?displayProperty=fullName>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.CustomAttributeTypedArgument.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>引数名、等号 \(\=\) および引数値の文字列表現から成る文字列を返します。</summary>
        <returns>引数名、等号 \(\=\) および引数値の文字列表現から成る文字列。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.CustomAttributeTypedArgument.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>単純な引数、または配列引数の要素の引数の値を取得します。配列引数の値のコレクションを取得します。</summary>
        <value>引数または要素、またはジェネリック型の値を表すオブジェクト <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> の <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 配列型の引数の値を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Reflection.CustomAttributeTypedArgument> 返します配列引数を表す、 `ReadOnlyCollection<CustomAttributeTypedArgument>` \(`ReadOnlyCollection(Of CustomAttributeTypedArgument)` Visual Basic で\)。 コレクションの各要素は、配列の引数の対応する要素を表します。  
  
 使用して、値の型を取得できます、 <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A> プロパティです。<xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A> によって返される値の実際の型を取得、 <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A> 単純な引数または引数の配列の要素のプロパティです。 配列引数の配列型を返します。  
  
   
  
## 例  
 次の例では、次の 4 つのコンス トラクターと 4 つのプロパティを持つカスタム属性を定義します。 2 つのプロパティは読み取り専用し、コンス トラクターの位置指定パラメーターを使用して設定します。 その他の 2 つのプロパティは読み取り\/書き込み、および名前付き引数を使用して設定できます。 1 つの位置指定プロパティは、文字列の配列で、1 つの名前付きプロパティは整数の配列です。  
  
 属性は、アセンブリ、アセンブリで宣言された型、型のメソッドおよびメソッドのパラメーターに適用されます。 さまざまなコンス トラクターは、このような場合に使用されます。 実行すると、アセンブリがリフレクションのみのコンテキストに読み込まし、カスタム属性を表示します。  
  
 型に適用される属性は、位置指定引数と名前付きの両方の引数の配列プロパティを示します。  
  
 <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A> プロパティを使用、 `ShowValueOrArray` 属性の値を表示するカスタム属性のデータを表示するメソッドです。  
  
 [!code-cpp[CustomAttributeData\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source.cpp#1)]
 [!code-csharp[CustomAttributeData\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source.cs#1)]
 [!code-vb[CustomAttributeData\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source.vb#1)]  
  
 <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A> &#124; <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>