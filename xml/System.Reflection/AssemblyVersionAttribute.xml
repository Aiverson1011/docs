<Type Name="AssemblyVersionAttribute" FullName="System.Reflection.AssemblyVersionAttribute">
  <TypeSignature Language="C#" Value="public sealed class AssemblyVersionAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AssemblyVersionAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.AssemblyVersionAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>属性を付けるアセンブリのバージョンを指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Reflection.AssemblyVersionAttribute> attribute is used to assign a version number to an assembly. That version number is then stored with the assembly's metadata.  
  
 The assembly version number is part of an assembly's identity and plays a key part in binding to the assembly and in version policy. The default version policy for the runtime is that applications run only with the versions they were built and tested with, unless overridden by explicit version policy in configuration files \(the application configuration file, the publisher policy file, and the computer's administrator configuration file\). See [&#91;\<topic:\/\/cpconassembliesoverview\>&#93;](http://msdn.microsoft.com/ja-jp/2cfebe19-7436-49f1-bd99-3c4019f0b676) for more information.  
  
> [!NOTE]
>  Version checking only occurs with strong\-named assemblies.  
  
 The version number has four parts, as follows:  
  
 \<major version\>.\<minor version\>.\<build number\>.\<revision\>  
  
> [!IMPORTANT]
>  All components of the version must be integers greater than or equal to 0. Metadata restricts the major, minor, build, and revision components for an assembly to a maximum value of <xref:System.UInt16.MaxValue?displayProperty=fullName> \- 1. If a component exceeds this value, a compilation error occurs.  
  
 You can specify all the values or you can accept the default build number, revision number, or both by using an asterisk \(\*\). For example, `[assembly:AssemblyVersion("2.3.25.1")]` indicates 2 as the major version, 3 as the minor version, 25 as the build number, and 1 as the revision number. A version number such as `[assembly:AssemblyVersion("1.2.*")]` specifies 1 as the major version, 2 as the minor version, and accepts the default build and revision numbers. A version number such as `[assembly:AssemblyVersion("1.2.15.*")]` specifies 1 as the major version, 2 as the minor version, 15 as the build number, and accepts the default revision number. The default build number increments daily. The default revision number is the number of seconds since midnight local time \(without taking into account time zone adjustments for daylight saving time\), divided by 2.  
  
> [!NOTE]
>  If you specify an asterisk for the build number, you cannot specify a revision number.  
  
 The assembly major and minor versions are used as the type library version number when the assembly is exported. Some COM hosts do not accept type libraries with the version number 0.0. Therefore, if you want to expose an assembly to COM clients, set the assembly version explicitly to 1.0 in the **languageKeyword tag is not supported!!!!**  
 page for projects created outside [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] and with no **languageKeyword tag is not supported!!!!**  
 specified. Do this even when the assembly version is 0.0. All projects created in [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] have a default assembly version of 1.0.\*.  
  
 To get the name of an assembly you have loaded, call <xref:System.Reflection.Assembly.GetName%2A> on the assembly to get an <xref:System.Reflection.AssemblyName>, and then get the <xref:System.Reflection.AssemblyName.Version%2A> property. To get the name of an assembly you have not loaded, call <xref:System.Reflection.AssemblyName.GetAssemblyName%2A> from your client application to check the assembly version that your application uses.  
  
 The <xref:System.Reflection.AssemblyVersionAttribute> attribute can only be applied once. Some Visual Studio project templates already include the attribute. In those projects, adding the attribute in code causes a compiler error.  
  
   
  
## 例  
 The following example uses the <xref:System.Reflection.AssemblyVersionAttribute> attribute to assign a version number to an assembly. At compile time, this version information is stored with the assembly's metadata. At run time, the example retrieves the value of the <xref:System.Type.Assembly%2A?displayProperty=fullName> property on a type found in the assembly to get a reference to the executing assembly, and it retrieves the assembly's version information from the <xref:System.Reflection.AssemblyName.Version%2A> property of the <xref:System.Reflection.AssemblyName> object returned by the <xref:System.Reflection.Assembly.GetName%2A?displayProperty=fullName> method.  
  
 [!code-csharp[System.Version.Class\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Version.Class/cs/example1.cs#6)]
 [!code-vb[System.Version.Class\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Version.Class/vb/example1.vb#6)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Reflection.AssemblyName.Version" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AssemblyVersionAttribute (string version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="version" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="version">属性付きアセンブリのバージョン番号。</param>
        <summary>属性を付けるアセンブリのバージョン番号を指定して、<see langword="AssemblyVersionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 形式、 `version` 文字列: `major`です。`minor`。`build`。`revision`。  
  
 バージョンを指定する場合に、少なくとも指定する必要が `major`です。 指定した場合 `major` と `minor`, のアスタリスク \(\*\) を指定する `build`です。 これにより、 `build` 2000 年 1 月 1 日からの日数の数と等しくなります現地時刻、および `revision` ローカル時間の深夜から \(を考慮しながら夏時間のタイム ゾーン調整のアカウント\)、なし 2 で割った値の秒数と等しくなります。  
  
 `major`、`minor`、および `build` を指定する場合、`revision` に対してアスタリスクを指定できます。 これにより、 `revision` 2 で割った、午前 0 時の現地時刻からの経過秒数と等しくなります。  
  
 有効なバージョン文字列の例は次のとおりです。  
  
 1  
  
 1.1  
  
 1.1.\*  
  
 1.1.1  
  
 1.1.1.\*  
  
 1.1.1.1  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public string Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Version" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.AssemblyVersionAttribute.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>属性付きアセンブリのバージョン番号を取得します。</summary>
        <value>アセンブリのバージョン番号を格納している文字列。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>