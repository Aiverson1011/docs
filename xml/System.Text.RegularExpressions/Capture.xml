<Type Name="Capture" FullName="System.Text.RegularExpressions.Capture">
  <TypeSignature Language="C#" Value="public class Capture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Capture extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Capture" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>正常にマッチした単一部分式キャプチャの結果を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Text.RegularExpressions.Capture> オブジェクトは不変であり、パブリック コンス トラクターを持たない。 インスタンスは、 <xref:System.Text.RegularExpressions.CaptureCollection> によって返されるオブジェクト、 `Match.Captures` と <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> プロパティです。 ただし、 `Match.Captures` プロパティと同じ一致に関する情報を提供する、 <xref:System.Text.RegularExpressions.Match> オブジェクトです。  
  
 適用しない場合、キャプチャ グループに、 <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> プロパティを返します。、 <xref:System.Text.RegularExpressions.CaptureCollection> を 1 つの <xref:System.Text.RegularExpressions.Capture> として同じキャプチャについての情報を提供するオブジェクト、 <xref:System.Text.RegularExpressions.Group> オブジェクトです。 量指定子キャプチャ グループに適用する場合、 `Group.Index`, 、`Group.Length`, 、および `Group.Value` は最後のキャプチャ グループについてのみ情報を指定、 <xref:System.Text.RegularExpressions.Capture> 内のオブジェクト、 <xref:System.Text.RegularExpressions.CaptureCollection> 提供のすべての部分式に関する情報をキャプチャします。 具体的な例を次に示します。  
  
   
  
## 例  
 次の例では、ピリオド以外の句読点が含まれていない文に一致する正規表現 \("です。"\) です。  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 正規表現パターン `((\w+)[\s.])+` は、次の表に示すように定義されています。 この正規表現で量指定子 \(\+\) に適用される正規表現全体に注意してください。  
  
|パターン|説明|  
|----------|--------|  
|`(\w+)`|1 つ以上の単語文字に一致します。 これが 2 番目のキャプチャ グループです。|  
|`[\s.])`|個の空白文字またはピリオド \("です。"\) です。|  
|`((\w+)[\s.])`|個の空白文字または期間後に 1 つまたは複数の単語文字に一致 \("です。"\) です。 これが最初のキャプチャ グループです。|  
|`((\w+)[\s.])+`|単語文字または文字の後に空白文字または期間の 1 つまたは複数回の出現に一致 \("です。"\) です。|  
  
 この例では、入力文字列は、2 つの文で構成されます。 最初の文から成る 1 つだけの word では、出力に示すように、ため、 <xref:System.Text.RegularExpressions.CaptureCollection> オブジェクトには、1 つ <xref:System.Text.RegularExpressions.Capture> と同じキャプチャを表すオブジェクト、 <xref:System.Text.RegularExpressions.Group> オブジェクトです。 2 番目の文は、複数の単語で構成されていますので、 <xref:System.Text.RegularExpressions.Group> オブジェクトでは、最後の一致した部分式に関する情報のみが格納されます。 グループ 1、最初のキャプチャを表すには、期間は終了する文の最後の単語が含まれています。 グループ 2、2 番目のキャプチャを表すには、文の最後の単語が含まれています。 ただし、 <xref:System.Text.RegularExpressions.Capture> 、グループ内のオブジェクト <xref:System.Text.RegularExpressions.CaptureCollection> オブジェクトは、各文字列を部分式をキャプチャします。<xref:System.Text.RegularExpressions.Capture> のキャプチャの最初のキャプチャ グループのコレクション内のオブジェクトには、各キャプチャされた単語および空白文字または期間に関する情報が含まれています。<xref:System.Text.RegularExpressions.Capture> のキャプチャの 2 番目のキャプチャ グループのコレクション内のオブジェクトには、各キャプチャされた単語についての情報が含まれています。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.CaptureCollection" />
  </Docs>
  <Members>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キャプチャされた部分文字列の最初の文字が検出される場合、元の文字列内の位置。</summary>
        <value>0 から始まる開始位置、元の文字列でキャプチャされた部分文字列が検出される場合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キャプチャされた部分文字列の長さを取得します。</summary>
        <value>キャプチャされた部分文字列の長さ。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Capture.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>入力文字列から呼び出すことによってキャプチャされた部分文字列を取得、 <see cref="P:System.Text.RegularExpressions.Capture.Value" /> プロパティです。</summary>
        <returns>一致でキャプチャされた部分文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `ToString` 内部呼び出しが実際には、 <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>入力文字列からキャプチャされた部分文字列を取得します。</summary>
        <value>一致でキャプチャされた部分文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出し、<xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName>または<xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName>メソッドは、返された値、一致を見つける失敗`Match.Value`プロパティは<xref:System.String.Empty?displayProperty=fullName>します。 正規表現エンジンがない場合、キャプチャ グループに一致することです。 返された値`Group.Value`プロパティは<xref:System.String.Empty?displayProperty=fullName>します。 図については、2 番目の例を参照してください。  
  
   
  
## 例  
 次の例では、ピリオドを除く句読点を含まない文に一致する正規表現 \("です。"\) です。`Match.Value`プロパティが一致した各文字列の一致の文で構成される結果の文字列が表示されます。`Group.Value`のキャプチャ グループによってキャプチャされた最後の文字列で構成されます。 プロパティには、キャプチャ グループごとに結果の文字列が表示されます。<xref:System.Text.RegularExpressions.Capture.Value%2A?displayProperty=fullName>プロパティには、各キャプチャの結果の文字列が表示されます。  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 正規表現パターン `((\w+)[\s.])+` は、次の表に示すように定義されています。 この正規表現、量指定子 \(\+\) に適用される正規表現全体に注意してください。  
  
|パターン|説明|  
|----------|--------|  
|`(\w+)`|1 つ以上の単語文字に一致します。 これが 2 番目のキャプチャ グループです。|  
|`[\s.])`|空白文字または期間と一致 \("です。"\) です。|  
|`((\w+)[\s.])`|空白文字またはピリオドが続く 1 つまたは複数の単語文字に一致 \("です。"\) です。 これが最初のキャプチャ グループです。|  
|`((\w+)[\s.])+`|単語文字または文字の後に空白文字または期間の 1 つ以上の出現と一致 \("です。"\) です。|  
  
 この例では、入力文字列は 2 つの文で構成されます。 出力では、最初の文は、単語で構成 1 つだけため、<xref:System.Text.RegularExpressions.CaptureCollection>オブジェクトには、1 つ<xref:System.Text.RegularExpressions.Capture>と同じキャプチャを表すオブジェクト、<xref:System.Text.RegularExpressions.Group>オブジェクト。 2 番目の文は、複数の単語で構成されていますので、<xref:System.Text.RegularExpressions.Group>オブジェクトには、最後の一致した部分式に関する情報にはのみが含まれています。 グループ 1、最初のキャプチャを表すには、期間は終了する文の最後の単語が含まれています。 グループ 2、2 番目のキャプチャを表すには、文の最後の単語が含まれています。 ただし、<xref:System.Text.RegularExpressions.Capture>グループのオブジェクト<xref:System.Text.RegularExpressions.CaptureCollection>オブジェクトは、各一致文字列の部分式をキャプチャします。<xref:System.Text.RegularExpressions.Capture>キャプチャの最初のキャプチャ グループのコレクション内のオブジェクトには、各キャプチャされた単語および空白文字または期間に関する情報が含まれています。<xref:System.Text.RegularExpressions.Capture>キャプチャの 2 番目のキャプチャ グループのコレクション内のオブジェクトには、各キャプチャされた単語に関する情報が含まれています。  
  
 次の例では、正規表現パターンでは、`^([a-z]+)(\d+)*\.([a-z]+(\d)*)$`ピリオドで区切られた 2 つの部分で構成されている製品の数に一致します。 両方の部分は省略可能な数字が続くのアルファベット文字で構成されます。 最初の入力文字列がパターンで、返された値と一致しないため<xref:System.Text.RegularExpressions.Match?displayProperty=fullName>オブジェクトの`Value`プロパティは<xref:System.String.Empty?displayProperty=fullName>します。 同様に、ときに、正規表現パターンはできません、キャプチャ グループの対応する値を一致するように<xref:System.Text.RegularExpressions.Group>オブジェクトの`Value`プロパティは<xref:System.String.Empty?displayProperty=fullName>します。  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Value\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/cs/value1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Value\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/vb/value1.vb#1)]  
  
 The regular expression pattern is defined as shown in the following table:  
  
|Pattern|Description|  
|-------------|-----------------|  
|`^`|Begin the match at the beginning of the string.|  
|`([a-z]+)`|Match one or more occurrences of any character from a to z. Because the regular expression engine is passed the <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=fullName> option, this comparison is case\-insensitive. This is the first capturing group.|  
|`(\d+)?`|Match zero or one occurrence of one or more decimal digits. This is the second capturing group.|  
|`\.`|Match a literal period character.|  
|`([a-z]+`|Match one or more occurrences of any character from a to z. The comparison is case\-insensitive.|  
|`(\d)*`|Match zero or more decimal digits. A single matched digit is the fourth capturing group.|  
|`([a-z]+(\d)*)`|Match one or more alphabetic characters from a to z followed by zero, one, or more decimal digits. This is the fourth capturing group.|  
|`$`|Conclude the match at the end of the string.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>