<Type Name="Regex" FullName="System.Text.RegularExpressions.Regex">
  <TypeSignature Language="C#" Value="public class Regex : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Regex extends System.Object implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Regex" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>変更不可の正規表現を表します。  
  
 この型の .NET Framework ソース コードを参照するには、[参照ソース](http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/Regex.cs#bbe3b2eb80ae5526)をご覧ください。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/Regex.cs#bbe3b2eb80ae5526). You can browse through the source code online, download the reference for offline viewing, and step through the sources \(including patches and updates\) during debugging; see [instructions](http://referencesource.microsoft.com/).  
  
 The <xref:System.Text.RegularExpressions.Regex> class represents the .NET Framework's regular expression engine. It can be used to quickly parse large amounts of text to find specific character patterns; to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection to generate a report.  
  
> [!NOTE]
>  If your primary interest is to validate a string by determining whether it conforms to a particular pattern, you can use the <xref:System.Configuration.RegexStringValidator?displayProperty=fullName> class.  
  
 To use regular expressions, you define the pattern that you want to identify in a text stream by using the syntax documented in [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c). Next, you can optionally instantiate a <xref:System.Text.RegularExpressions.Regex> object. Finally, you call a method that performs some operation, such as replacing text that matches the regular expression pattern, or identifying a pattern match.  
  
> [!NOTE]
>  For some common regular expression patterns, see [Regular Expression Examples](http://msdn.microsoft.com/ja-jp/e9fd53f2-ed56-4b09-b2ea-e9bc9d65e6d6). There are also a number of online libraries of regular expression patterns, such as the one at [Regular\-Expressions.info](http://www.regular-expressions.info/examples.html).  
  
<a name="remarks"></a> For more information about using the <xref:System.Text.RegularExpressions.Regex> class, see the following sections in this topic:  
  
-   [Regex vs. String Methods](#regex_vs_string)  
  
-   [Static vs. Instance Methods](#static_vs_instance)  
  
-   [Performing Regular Expression Operations](#regex_ops)  
  
-   [Defining a Time\-Out Value](#define_timeout)  
  
 For more information about the regular expression language, see [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c) or download and print one of these brochures:  
  
 [Quick Reference in Word \(.docx\) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)  
 [Quick Reference in PDF \(.pdf\) format](http://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)  
  
<a name="regex_vs_string"></a>   
## Regex vs. String Methods  
 The <xref:System.String?displayProperty=fullName> class includes several search and comparison methods that you can use to perform pattern matching with text. For example, the <xref:System.String.Contains%2A?displayProperty=fullName>, <xref:System.String.EndsWith%2A?displayProperty=fullName>, and <xref:System.String.StartsWith%2A?displayProperty=fullName> methods determine whether a string instance contains a specified substring; and the <xref:System.String.IndexOf%2A?displayProperty=fullName>, <xref:System.String.IndexOfAny%2A?displayProperty=fullName>, <xref:System.String.LastIndexOf%2A?displayProperty=fullName>, and <xref:System.String.LastIndexOfAny%2A?displayProperty=fullName> methods return the starting position of a specified substring in a string. Use the methods of the <xref:System.String?displayProperty=fullName> class when you are searching for a specific string. Use the <xref:System.Text.RegularExpressions.Regex> class when you are searching for a specific pattern in a string. For more information and examples, see [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d).  
  
 [Back to Remarks](#remarks)  
  
<a name="static_vs_instance"></a>   
## Static vs. Instance Methods  
 After you define a regular expression pattern, you can provide it to the regular expression engine in either of two ways:  
  
-   By instantiating a <xref:System.Text.RegularExpressions.Regex> object that represents the regular expression. To do this, you pass the regular expression pattern to a <xref:System.Text.RegularExpressions.Regex.%23ctor%2A> constructor. A <xref:System.Text.RegularExpressions.Regex> object is immutable; when you instantiate a <xref:System.Text.RegularExpressions.Regex> object with a regular expression, that object's regular expression cannot be changed.  
  
-   By supplying both the regular expression and the text to search to a **languageKeyword tag is not supported!!!!**  
     \(**languageKeyword tag is not supported!!!!**  
     in Visual Basic\) <xref:System.Text.RegularExpressions.Regex> method. This enables you to use a regular expression without explicitly creating a <xref:System.Text.RegularExpressions.Regex> object.  
  
 All <xref:System.Text.RegularExpressions.Regex> pattern identification methods include both static and instance overloads.  
  
 The regular expression engine must compile a particular pattern before the pattern can be used. Because <xref:System.Text.RegularExpressions.Regex> objects are immutable, this is a one\-time procedure that occurs when a <xref:System.Text.RegularExpressions.Regex> class constructor or a static method is called. To eliminate the need to repeatedly compile a single regular expression, the regular expression engine caches the compiled regular expressions used in static method calls. As a result, regular expression pattern\-matching methods offer comparable performance for static and instance methods.  
  
> [!IMPORTANT]
>  In the .NET Framework versions 1.0 and 1.1, all compiled regular expressions, whether they were used in instance or static method calls, were cached. Starting with the .NET Framework 2.0, only regular expressions used in static method calls are cached.  
  
 However, caching can adversely affect performance in the following two cases:  
  
-   When you use static method calls with a large number of regular expressions. By default, the regular expression engine caches the 15 most recently used static regular expressions. If your application uses more than 15 static regular expressions, some regular expressions must be recompiled. To prevent this recompilation, you can increase the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A?displayProperty=fullName> property.  
  
-   When you instantiate new <xref:System.Text.RegularExpressions.Regex> objects with regular expressions that have previously been compiled. For example, the following code defines a regular expression to locate duplicated words in a text stream. Although the example uses a single regular expression, it instantiates a new <xref:System.Text.RegularExpressions.Regex> object to process each line of text. This results in the recompilation of the regular expression with each iteration of the loop.  
  
     [!code-csharp[System.Text.RegularExpressions.Class.Caching\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#1)]
     [!code-vb[System.Text.RegularExpressions.Class.Caching\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#1)]  
  
     To prevent recompilation, you should instantiate a single <xref:System.Text.RegularExpressions.Regex> object that is accessible to all code that requires it, as shown in the following rewritten example.  
  
     [!code-csharp[System.Text.RegularExpressions.Class.Caching\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/cs/caching1.cs#2)]
     [!code-vb[System.Text.RegularExpressions.Class.Caching\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.class.caching/vb/caching1.vb#2)]  
  
 [Back to Remarks](#remarks)  
  
<a name="regex_ops"></a>   
## Performing Regular Expression Operations  
 Whether you decide to instantiate a <xref:System.Text.RegularExpressions.Regex> object and call its methods or call static methods, the <xref:System.Text.RegularExpressions.Regex> class offers the following pattern\-matching functionality:  
  
-   Validation of a match. You call the <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> method to determine whether a match is present.  
  
-   Retrieval of a single match. You call the <xref:System.Text.RegularExpressions.Regex.Match%2A> method to retrieve a <xref:System.Text.RegularExpressions.Match> object that represents the first match in a string or in part of a string. Subsequent matches can be retrieved by calling the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method.  
  
-   Retrieval of all matches. You call the <xref:System.Text.RegularExpressions.Regex.Matches%2A> method to retrieve a <xref:System.Text.RegularExpressions.MatchCollection?displayProperty=fullName> object that represents all the matches found in a string or in part of a string.  
  
-   Replacement of matched text. You call the <xref:System.Text.RegularExpressions.Regex.Replace%2A> method to replace matched text. The replacement text can also be defined by a regular expression. In addition, some of the <xref:System.Text.RegularExpressions.Regex.Replace%2A> methods include a <xref:System.Text.RegularExpressions.MatchEvaluator> parameter that enables you to programmatically define the replacement text.  
  
-   Creation of a string array that is formed from parts of an input string. You call the <xref:System.Text.RegularExpressions.Regex.Split%2A> method to split an input string at positions that are defined by the regular expression.  
  
 In addition to its pattern\-matching methods, the <xref:System.Text.RegularExpressions.Regex> class includes several special\-purpose methods:  
  
-   The <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes any characters that may be interpreted as regular expression operators in a regular expression or input string.  
  
-   The <xref:System.Text.RegularExpressions.Regex.Unescape%2A> method removes these escape characters.  
  
-   The <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> method creates an assembly that contains predefined regular expressions. The .NET Framework contains examples of these special\-purpose assemblies in the <xref:System.Web.RegularExpressions?displayProperty=fullName> namespace.  
  
 [Back to Remarks](#remarks)  
  
<a name="define_timeout"></a>   
## Defining a Time\-Out Value  
 The .NET Framework supports a full\-featured regular expression language that provides substantial power and flexibility in pattern matching. However, the power and flexibility come at a cost: the risk of poor performance. Regular expressions that perform poorly are surprisingly easy to create. In some cases, regular expression operations that rely on excessive backtracking can appear to stop responding when they process text that nearly matches the regular expression pattern. For more information about the .NET Framework regular expression engine, see [Details of Regular Expression Behavior](http://msdn.microsoft.com/ja-jp/0ee1a6b8-caac-41d2-917f-d35570021b10). For more information about excessive backtracking, see [Backtracking](http://msdn.microsoft.com/ja-jp/34df1152-0b22-4a1c-a76c-3c28c47b70d8).  
  
 Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], you can define a time\-out interval for regular expression matches. If the regular expression engine cannot identify a match within this time interval, the matching operation throws a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception. In most cases, this prevents the regular expression engine from wasting processing power by trying to match text that nearly matches the regular expression pattern. It also could indicate, however, that the timeout interval has been set too low, or that the current machine load has caused an overall degradation in performance.  
  
 How you handle the exception depends on the cause of the exception. If the exception occurs because the time\-out interval is set too low or because of excessive machine load, you can increase the time\-out interval and retry the matching operation. If the exception occurs because the regular expression relies on excessive backtracking, you can assume that a match does not exist, and, optionally, you can log information that will help you modify the regular expression pattern.  
  
 You can set a time\-out interval by calling the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> constructor when you instantiate a regular expression object. For static methods, you can set a time\-out interval by calling an overload of a matching method that has a **parameterReference tag is not supported!!!!**  
 parameter. If you do not set a time\-out value explicitly, the default time\-out value  is determined as follows:  
  
-   By using the application\-wide time\-out value, if one exists. This can be any time\-out value that applies to the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is instantiated or the static method call is made. You can set the application\-wide time\-out value by calling the <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method to assign the string representation of a <xref:System.TimeSpan> value to the "REGEX\_DEFAULT\_MATCH\_TIMEOUT" property.  
  
-   By using the value <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout>, if no application\-wide time\-out value has been set.  
  
> [!IMPORTANT]
>  We recommend that you set a time\-out value in all regular expression pattern\-matching operations. For more information, see [Best Practices for Regular Expressions in the .NET Framework](http://msdn.microsoft.com/ja-jp/618e5afb-3a97-440d-831a-70e4c526a51c).  
  
 [Back to Remarks](#remarks)  
  
   
  
## 例  
 The following example uses a regular expression to check for repeated occurrences of words in a string. The regular expression `\b(?<word>\w+)\s+(\k<word>)\b` can be interpreted as shown in the following table.  
  
|Pattern|Description|  
|-------------|-----------------|  
|`\b`|Start the match at a word boundary.|  
|`(?<word>\w+)`|Match one or more word characters up to a word boundary. Name this captured group `word`.|  
|`\s+`|Match one or more white\-space characters.|  
|`(\k<word>)`|Match the captured group that is named `word`.|  
|`\b`|Match a word boundary.|  
  
 [!code-cpp[Regex\_Words\#0](~/samples/snippets/cpp/VS_Snippets_CLR/Regex_Words/CPP/words.cpp#0)]
 [!code-csharp[Regex\_Words\#0](~/samples/snippets/csharp/VS_Snippets_CLR/Regex_Words/CS/words.cs#0)]
 [!code-vb[Regex\_Words\#0](~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex_Words/VB/words.vb#0)]  
  
 The following example illustrates the use of a regular expression to check whether a string either represents a currency value or has the correct format to represent a currency value. In this case, the regular expression is built dynamically from the <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A?displayProperty=fullName>, <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A?displayProperty=fullName>, <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName>, and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties for the user's current culture. If the system's current culture is en\-US, the resulting regular expression is `^\s*[\+-]?\s?\$?\s?(\d*\.?\d{2}?){1}$`. This regular expression can be interpreted as shown in the following table.  
  
|Pattern|Description|  
|-------------|-----------------|  
|`^`|Start at the beginning of the string.|  
|`\s*`|Match zero or more white\-space characters.|  
|`[\+-]?`|Match zero or one occurrence of either the positive sign or the negative sign.|  
|`\s?`|Match zero or one white\-space character.|  
|`\$?`|Match zero or one occurrence of the dollar sign.|  
|`\s?`|Match zero or one white\-space character.|  
|`\d*`|Match zero or more decimal digits.|  
|`\.?`|Match zero or one decimal point symbol.|  
|`\d{2}?`|Match two decimal digits zero or one time.|  
|`(\d*\.?\d{2}?){1}`|Match the pattern of integral and fractional digits separated by a decimal point symbol at least one time.|  
|`$`|Match the end of the string.|  
  
 In this case, the regular expression assumes that a valid currency string does not contain group separator symbols, and that it has either no fractional digits or the number of fractional digits defined by the current culture's <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> property.  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/cs/regex_example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.class/vb/regex_example1.vb#1)]  
  
 Because the regular expression in this example is built dynamically, we do not know at design time whether the current culture's currency symbol, decimal sign, or positive and negative signs might be misinterpreted by the regular expression engine as regular expression language operators. To prevent any misinterpretation, the example passes each dynamically generated string to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method.  
  
 ]]></format>
    </remarks>
    <threadsafe>The <see cref="T:System.Text.RegularExpressions.Regex" /> class is immutable \(read\-only\) and thread safe. <see cref="T:System.Text.RegularExpressions.Regex" /> objects can be created on any thread and shared between threads. For more information, see [[&lt;topic:\/\/cpconThreadSafety&gt;]](http://msdn.microsoft.com/ja-jp/7c4a167b-5236-4cde-a2ca-58646230730f).</threadsafe>
    <altmember cref="T:System.Configuration.RegexStringValidator" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Regex ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターが保護されているに注意してください。派生したクラスによってのみ呼び出すことができます、 <xref:System.Text.RegularExpressions.Regex> クラスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Text.RegularExpressions.Regex" /> 指定した正規表現のクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。、 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c) トピックです。  
  
 呼び出す、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%29> コンス トラクターは呼び出すことと同じ、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> の値を持つコンス トラクター <xref:System.Text.RegularExpressions.RegexOptions.None> の `options` 引数。  
  
 A <xref:System.Text.RegularExpressions.Regex> オブジェクトは作成するときに定義する一致パターンに対してのみ使用できることを意味する、変更できません。 ただし、何回でも再コンパイルせずに使用します。  
  
 このコンス トラクターで定義されているアルファベット文字の大文字と小文字をしようとする正規表現オブジェクトをインスタンス化 `pattern`します。 小文字を区別しない一致を使用して、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> コンス トラクターです。  
  
   
  
## 例  
 次の例は、このコンス トラクターを使用して、文字で始まる単語と一致する正規表現をインスタンス化する方法を示しています。"a"または"t"です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Constructors\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/constructors1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Constructors\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/constructors1.vb#1)]  
  
 正規表現パターンが単語を照合できないことに注意してください、テキストの先頭に"The"比較処理は既定では大文字小文字が区別されるためです。 大文字と小文字の例は、次を参照してください。、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> コンス トラクターです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>This constructor creates a <see cref="T:System.Text.RegularExpressions.Regex" /> object that uses the default time-out value of the application domain in which it is created. If a time-out value has not been defined for the application domain,  the <see cref="T:System.Text.RegularExpressions.Regex" /> object uses the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the operation from timing out. The recommended constructor for creating a <see cref="T:System.Text.RegularExpressions.Regex" /> object is <see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Regex (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">シリアル化されたパターンを格納するオブジェクトと <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 情報。</param>
        <param name="context">このシリアル化のシリアル化先。 \(このパラメーターは使用されません。<see langword="null" /> を指定してください。\)</param>
        <summary>シリアル化したデータを使用して、<see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">パターンを <paramref name="info" /> が含まれていますが <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="info" /> 無効なを含む <see cref="T:System.Text.RegularExpressions.RegexOptions" /> フラグ。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">正規表現を変更する列挙値のビットごとの組み合わせ。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Text.RegularExpressions.Regex" /> パターンを変更するオプションでは、指定した正規表現のクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。、 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c) トピックです。  
  
 A <xref:System.Text.RegularExpressions.Regex> オブジェクトは不変ですので、作成するときに定義する一致するパラメーターにのみ使用できます。 ただし、何回でも再コンパイルせずに使用します。  
  
   
  
## 例  
 次の例は、このコンス トラクターを使用して、文字で始まる単語と一致する正規表現をインスタンス化する方法を示しています。"a"または"t"です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Constructors\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/cs/Constructors2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Constructors\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Constructors/vb/Constructors2.vb#2)]  
  
 Matchcollection にために、テキストを開始する「、」という単語が含まれることに注意してください、 `options` パラメーターには、小文字を区別しない比較が定義されています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> 無効なフラグが含まれています。</exception>
        <block subset="none" type="usage">
          <para>This constructor creates a <see cref="T:System.Text.RegularExpressions.Regex" /> object that uses the default time-out value of the application domain in which it is created. If a time-out value has not been defined for the application domain, the <see cref="T:System.Text.RegularExpressions.Regex" /> object uses the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the operation from timing out. The recommended constructor for creating a <see cref="T:System.Text.RegularExpressions.Regex" /> object is <see cref="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Regex (string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">正規表現を変更する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Text.RegularExpressions.Regex" /> 、パターンと、どのくらいの時間のパターン一致メソッドを指定する値を変更するオプションを使用して、指定したの正規表現クラスは、タイムアウトになる前に、一致を試みる。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。、 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c) トピックです。  
  
 A <xref:System.Text.RegularExpressions.Regex> オブジェクトは作成するときに定義する一致パターンに対してのみ使用できることを意味する、変更できません。 ただし、何回でも再コンパイルせずに使用します。  
  
 `matchTimeout` パラメーターを指定時間、パターン一致メソッドがタイムアウトになるまで、検索するしようとする必要があります。 パターン一致メソッドがスローする時間間隔の一致が見つからない場合、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外です。`matchTimeout` これでアプリケーション ドメインに対して定義されている既定のタイムアウト値をオーバーライドします、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 観察するインスタンスのパターン一致メソッドの `matchTimeout`タイムアウト間隔には、次が含まれます。  
  
-   <xref:System.Text.RegularExpressions.Regex.IsMatch%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Match%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Matches%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%2A>  
  
-   <xref:System.Text.RegularExpressions.Regex.Split%2A>  
  
-   <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName>  
  
 禁止タイムアウト間隔を設定する入力を処理するときに応答を停止させない過度なバックトラッ キングに依存する正規表現を近い一致が含まれています。 詳細については、[Best Practices for Regular Expressions in the .NET Framework](http://msdn.microsoft.com/ja-jp/618e5afb-3a97-440d-831a-70e4c526a51c) および [Backtracking](http://msdn.microsoft.com/ja-jp/34df1152-0b22-4a1c-a76c-3c28c47b70d8) を参照してください。 妥当なタイムアウトの間隔を設定するには、次の要因を検討します。  
  
-   長さと正規表現パターンは複雑です。 時間が長く、複雑な正規表現では、短くてわかりやすいものよりも時間がかかります。  
  
-   予想されるマシンの負荷します。 処理では、CPU およびメモリ使用率が高いシステムでより多くの時間がかかります。  
  
   
  
## 例  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> インスタンスを作成するコンス トラクター、 <xref:System.Text.RegularExpressions.Regex> 1 秒間のタイムアウト値を持つオブジェクト。 正規表現パターン `(a+)+$` は、行の末尾にある 1 つ以上の "a" 文字の 1 つ以上のシーケンスに一致しますが、過度なバックトラッキングの対象になります。 場合、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> は例では、スローされると、3 秒の最大値までのタイムアウト値が増加します。 それ以外の場合、パターンに一致させる試行を中止します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.ctor\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.ctor\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ctor/vb/ctor1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> が有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。  
  
 または  
  
 <paramref name="matchTimeout" /> が負の値、0、または約 24 日より大きい。</exception>
        <block subset="none" type="usage">
          <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  
  
-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  
  
-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  
  
-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CacheSize">
      <MemberSignature Language="C#" Value="public static int CacheSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CacheSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.CacheSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンパイルされた正規表現の現在の静的キャッシュ内の最大エントリ数を取得または設定します。</summary>
        <value>静的キャッシュの最大エントリ数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Text.RegularExpressions.Regex> class maintains an internal cache of compiled regular expressions used in static method calls. If the value specified in a set operation is less than the current cache size, cache entries are discarded until the cache size is equal to the specified value.  
  
 By default, the cache holds 15 compiled static regular expressions. Your application typically will not have to modify the size of the cache. Use the <xref:System.Text.RegularExpressions.Regex.CacheSize%2A> property only when you want to turn off caching or when you have an unusually large cache.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作の値が 0 より小さい値です。</exception>
        <block subset="none" type="usage">
          <para>In the .NET Framework prior to the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], regular expressions used in both static and instance method calls were cached. Beginning with the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], only regular expressions used in static method calls are cached.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="capnames">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable capnames;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Collections.Hashtable capnames" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capnames" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用される、 <see cref="T:System.Text.RegularExpressions.Regex" /> によって生成されたオブジェクト、 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CapNames">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary CapNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary CapNames" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.CapNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="caps">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable caps;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Collections.Hashtable caps" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.caps" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用される、 <see cref="T:System.Text.RegularExpressions.Regex" /> によって生成されたオブジェクト、 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Caps">
      <MemberSignature Language="C#" Value="protected System.Collections.IDictionary Caps { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Caps" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.Caps" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="capsize">
      <MemberSignature Language="C#" Value="protected int capsize;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly int32 capsize" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capsize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用される、 <see cref="T:System.Text.RegularExpressions.Regex" /> によって生成されたオブジェクト、 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="capslist">
      <MemberSignature Language="C#" Value="protected string[] capslist;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly string[] capslist" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.capslist" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用される、 <see cref="T:System.Text.RegularExpressions.Regex" /> によって生成されたオブジェクト、 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="regexinfos">コンパイルする正規表現を記述する配列。</param>
        <param name="assemblyname">アセンブリのファイル名。</param>
        <summary>1 つ以上の指定されたコンパイル <see cref="T:System.Text.RegularExpressions.Regex" /> 名前付きのアセンブリへのオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> メソッドで定義されている各正規表現の .NET Framework アセンブリを生成する、 `regexinfos` 配列がクラスによって表されます。 通常、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%29> コンパイルされる正規表現のアセンブリを生成する別のアプリケーションから呼び出されます。 アセンブリに含まれる各正規表現では、次の特性があります。  
  
-   派生、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Text.RegularExpressions.Regex> クラスです。  
  
-   定義されている完全修飾名が割り当てられているが、 `fullnamespace` と `name` 、対応するパラメーター [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Text.RegularExpressions.RegexCompilationInfo> オブジェクトです。  
  
-   既定 \(またはパラメーターなし\) があるコンス トラクターです。  
  
 通常は、インスタンス化してコンパイルされた正規表現を使用するコードでは、アセンブリまたはアセンブリを作成するコードから分離されたアプリケーションでが見つかります。  
  
   
  
## 例  
 次の例では、RegexLib.dll という名前のアセンブリを作成します。 アセンブリには、2 つのコンパイルされた正規表現が含まれています。 まず、 `Utilities.RegularExpressions.DuplicatedString`, 、同じ 2 つの連続する単語と一致します。 2 番目の `Utilities.RegularExpressions.EmailAddress`, 、文字列は正しい形式の電子メール アドレスである場合があるかどうかを確認します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile1.vb#1)]  
  
 重複する単語の文字列をチェックする正規表現は、インスタンス化し、次の例で使用されます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  
  
 この 2 番目の例のコンパイルが成功には、プロジェクトに追加する \(アセンブリは、最初の例で作成された\) RegexLib.dll への参照が必要です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">値、 <paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティが空または null 文字列。  
  
 または  
  
 正規表現パターン内の 1 つまたは複数のオブジェクトの <paramref name="regexinfos" /> 無効な構文が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>If you are developing on a system that has [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or its point releases installed, you target [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], and you use the <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> method to create an assembly that contains compiled regular expressions. Trying to use one of the regular expressions in that assembly on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] throws an exception. To work around this problem, you can do either of the following:  
  
-   Build the assembly that contains the compiled regular expressions on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] instead of later versions installed.  
  
-   Instead of calling <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> and retrieving the compiled regular expression from an assembly, use either static or instance <see cref="T:System.Text.RegularExpressions.Regex" /> methods with the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option when you instantiate a <see cref="T:System.Text.RegularExpressions.Regex" /> object or call a regular expression pattern matching method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname, class System.Reflection.Emit.CustomAttributeBuilder[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" />
        <Parameter Name="attributes" Type="System.Reflection.Emit.CustomAttributeBuilder[]" />
      </Parameters>
      <Docs>
        <param name="regexinfos">コンパイルする正規表現を記述する配列。</param>
        <param name="assemblyname">アセンブリのファイル名。</param>
        <param name="attributes">アセンブリに適用する属性を定義する配列。</param>
        <summary>1 つ以上の指定されたコンパイル <see cref="T:System.Text.RegularExpressions.Regex" /> 指定した属性の名前付きのアセンブリへのオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> メソッドで定義されている各正規表現の .NET Framework アセンブリを生成する、 `regexinfos` 配列がクラスによって表されます。 通常、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29> コンパイルされる正規表現のアセンブリを生成する別のアプリケーションから呼び出されます。 アセンブリに含まれる各正規表現では、次の特性があります。  
  
-   派生、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Text.RegularExpressions.Regex> クラスです。  
  
-   定義されている完全修飾名が割り当てられているが、 `fullnamespace` と `name` 、対応するパラメーター [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Text.RegularExpressions.RegexCompilationInfo> オブジェクトです。  
  
-   既定 \(またはパラメーターなし\) があるコンス トラクターです。  
  
 通常は、インスタンス化してコンパイルされた正規表現を使用するコードでは、アセンブリまたはアセンブリを作成するコードから分離されたアプリケーションでが見つかります。  
  
 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> メソッドでは、特定の言語のクラス定義のキーワードを使用する代わりにメソッドの呼び出しから .NET Framework アセンブリが生成されます \(など `class` C\# の場合または `Class`...`End Class` Visual Basic で\)、.NET Framework の属性を開発言語の標準的な属性の構文を使用して、アセンブリに割り当てることはできません。`attributes` パラメーターが別のアセンブリに適用される属性を定義する手段を提供します。 アセンブリに適用する属性ごとに、次の操作を行います。  
  
1.  配列を作成する [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Type> 呼び出そうとする属性のコンス トラクターのパラメーターの型を表すオブジェクト。  
  
2.  取得、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Type> 新しいアセンブリに適用する属性クラスを表すオブジェクト。  
  
3.  呼び出す、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Type.GetConstructor%2A> メソッド属性の [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Type> オブジェクトを取得し、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Reflection.ConstructorInfo> を呼び出そうとする属性のコンス トラクターを表すオブジェクト。 渡す、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Type.GetConstructor%2A> メソッド、配列の [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Type> コンス トラクターのパラメーターの型を表すオブジェクト。  
  
4.  作成、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Object> 属性のコンス トラクターに渡すパラメーターを定義する配列。  
  
5.  インスタンスを作成、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Reflection.Emit.CustomAttributeBuilder> コンス トラクターに渡すことによって、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Reflection.ConstructorInfo> オブジェクトは、手順 3. で取得し、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Object> 手順 4. で作成された配列。  
  
 これらの配列を渡すことができますし、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Reflection.Emit.CustomAttributeBuilder> オブジェクトの代わりに、 `attributes` パラメーターを [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%29?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例は、RegexLib.dll という名前のアセンブリを作成し、適用、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Reflection.AssemblyTitleAttribute> 属性にします。 アセンブリには、2 つのコンパイルされた正規表現が含まれています。 まず、 `Utilities.RegularExpressions.DuplicatedString`, 、同じ 2 つの連続する単語と一致します。 2 番目の `Utilities.RegularExpressions.EmailAddress`, 、文字列は正しい形式の電子メール アドレスである場合があるかどうかを確認します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile3.vb#3)]  
  
 確認することができます、 [CompileToAssembly メソッド \(RegexCompilationInfo\<xref:System.Reflection.AssemblyTitleAttribute> ILDasm などのリフレクション ユーティリティでマニフェストを確認するには属性がアセンブリに適用されています。  
  
 重複する単語の文字列をチェックする正規表現は、インスタンス化し、次の例で使用されます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.CompileToAssembly\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/cs/Compile2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.CompileToAssembly\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.CompileToAssembly/vb/Compile2.vb#2)]  
  
 この 2 番目の例のコンパイルが成功には、プロジェクトに追加する \(アセンブリは、最初の例で作成された\) RegexLib.dll への参照が必要です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">値、 <paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティが空または null 文字列。  
  
 または  
  
 正規表現パターン内の 1 つまたは複数のオブジェクトの <paramref name="regexinfos" /> 無効な構文が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>If you are developing on a system that has [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or its point releases installed, you target [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], and you use the <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> method to create an assembly that contains compiled regular expressions. Trying to use one of the regular expressions in that assembly on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] throws an exception. To work around this problem, you can do either of the following:  
  
-   Build the assembly that contains the compiled regular expressions on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] instead of later versions installed.  
  
-   Instead of calling <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> and retrieving the compiled regular expression from an assembly, use either static or instance <see cref="T:System.Text.RegularExpressions.Regex" /> methods with the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option when you instantiate a <see cref="T:System.Text.RegularExpressions.Regex" /> object or call a regular expression pattern matching method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompileToAssembly">
      <MemberSignature Language="C#" Value="public static void CompileToAssembly (System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CompileToAssembly(class System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, class System.Reflection.AssemblyName assemblyname, class System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regexinfos" Type="System.Text.RegularExpressions.RegexCompilationInfo[]" />
        <Parameter Name="assemblyname" Type="System.Reflection.AssemblyName" />
        <Parameter Name="attributes" Type="System.Reflection.Emit.CustomAttributeBuilder[]" />
        <Parameter Name="resourceFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="regexinfos">コンパイルする正規表現を記述する配列。</param>
        <param name="assemblyname">アセンブリのファイル名。</param>
        <param name="attributes">アセンブリに適用する属性を定義する配列。</param>
        <param name="resourceFile">アセンブリに含める Win32 リソース ファイルの名前。</param>
        <summary>1 つ以上の指定されたコンパイル <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトと指定した属性の名前付きアセンブリに指定されたリソース ファイル。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> メソッドで定義されている各正規表現の .NET Framework アセンブリを生成する、 `regexinfos` 配列がクラスによって表されます。 通常、 [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> コンパイルされる正規表現のアセンブリを生成する別のアプリケーションから呼び出されます。 アセンブリに含まれる各正規表現では、次の特性があります。  
  
-   派生、 [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex> クラスです。  
  
-   定義されている完全修飾名が割り当てられているが、 `fullnamespace` と `name` 、対応するパラメーター [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.RegexCompilationInfo> オブジェクトです。  
  
-   既定 \(またはパラメーターなし\) があるコンス トラクターです。  
  
 通常は、インスタンス化してコンパイルされた正規表現を使用するコードでは、アセンブリまたはアセンブリを作成するコードから分離されたアプリケーションでが見つかります。  
  
 [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> メソッドでは、特定の言語のクラス定義のキーワードを使用する代わりにメソッドの呼び出しから .NET Framework アセンブリが生成されます \(など `class` C\# の場合または `Class`...`End Class` Visual Basic で\)、.NET Framework の属性を開発言語の標準的な属性の構文を使用して、アセンブリに割り当てることはできません。`attributes` パラメーターが別のアセンブリに適用される属性を定義する手段を提供します。 アセンブリに適用する属性ごとに、次の操作を行います。  
  
1.  配列を作成する [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Type> 呼び出そうとする属性のコンス トラクターのパラメーターの型を表すオブジェクト。  
  
2.  取得、 [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Type> 新しいアセンブリに適用する属性クラスを表すオブジェクト。  
  
3.  呼び出す、 [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Type.GetConstructor%2A> メソッド属性の [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Type> オブジェクトを取得し、 [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Reflection.ConstructorInfo> を呼び出そうとする属性のコンス トラクターを表すオブジェクト。 渡す、 [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Type.GetConstructor%2A> メソッド、配列の [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Type> コンス トラクターのパラメーターの型を表すオブジェクト  
  
4.  作成、 [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Object> 属性のコンス トラクターに渡すパラメーターを定義する配列。  
  
5.  インスタンスを作成、 [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Reflection.Emit.CustomAttributeBuilder> コンス トラクターに渡すことによって、 [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Reflection.ConstructorInfo> オブジェクトは、手順 3. で取得し、 [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Object> 手順 4. で作成された配列。  
  
 これらの配列を渡すことができますし、 [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Reflection.Emit.CustomAttributeBuilder> オブジェクトの代わりに、 `attributes` パラメーターを [CompileToAssembly メソッド \(RegexCompilationInfo\[\], AssemblyName, CustomAttributeBuilder\<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%28System.Text.RegularExpressions.RegexCompilationInfo%5B%5D%2CSystem.Reflection.AssemblyName%2CSystem.Reflection.Emit.CustomAttributeBuilder%5B%5D%2CSystem.String%29> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">値、 <paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティが空または null 文字列。  
  
 または  
  
 正規表現パターン内の 1 つまたは複数のオブジェクトの <paramref name="regexinfos" /> 無効な構文が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <paramref name="resourceFile" /> パラメーターは無効な Win32 リソース ファイルを指定します。</exception>
        <exception cref="T:System.IO.FileNotFoundException">によって指定されたファイル、 <paramref name="resourceFile" /> パラメーターが見つかりません。</exception>
        <block subset="none" type="usage">
          <para>If you are developing on a system that has [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or its point releases installed, you target [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], and you use the <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> method to create an assembly that contains compiled regular expressions. Trying to use one of the regular expressions in that assembly on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] throws an exception. To work around this problem, you can do either of the following:  
  
-   Build the assembly that contains the compiled regular expressions on a system that has [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] instead of later versions installed.  
  
-   Instead of calling <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> and retrieving the compiled regular expression from an assembly, use either static or instance <see cref="T:System.Text.RegularExpressions.Regex" /> methods with the <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> option when you instantiate a <see cref="T:System.Text.RegularExpressions.Regex" /> object or call a regular expression pattern matching method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Escape">
      <MemberSignature Language="C#" Value="public static string Escape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Escape(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Escape(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">変換対象のテキストを含んでいる入力文字列。</param>
        <summary>文字 \(\\、\*、\+、?、|、{、\[、\(、\)、^、$、.、\#、および空白\) をエスケープ コードに置き換えることにより、このような文字をエスケープします。 これにより、正規表現エンジンではこのような文字がメタ文字ではなくリテラルとして解釈されます。</summary>
        <returns>メタ文字がエスケープされた形式に変換された文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Escape%2A> converts a string so that the regular expression engine will interpret any metacharacters that it may contain as character literals. For example, consider a regular expression that is designed to extract comments that are delimited by straight opening and closing brackets \(\[ and \]\) from text. In the following example, the regular expression "\[\(.\*?\)\]" is interpreted as a character class. Rather than matching comments embedded in the input text, the regular expression matches each opening or closing parenthesis, period, asterisk, or question mark.  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#1)]  
  
 However, if the opening bracket is escaped by passing it to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method, the regular expression succeeds in matching comments that are embedded in the input string. The following example illustrates this.  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape1.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape1.vb#2)]  
  
 In a regular expression that is defined by using static text, characters that are to be interpreted literally rather than as metacharacters can be escaped by preceding them with a backslash symbol \(\\\) as well as by calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method. In a regular expression that is defined dynamically using characters that are not known at design time, calling the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method is particularly important to ensure that the regular expression engine interprets individual characters as literals rather than as metacharacters.  
  
> [!NOTE]
>  If a regular expression pattern includes either the number sign \(\#\) or literal white\-space characters, they must be escaped if input text is parsed with the <xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=fullName> option enabled.  
  
 While the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method escapes the straight opening bracket \(\[\) and opening brace \({\) characters, it does not escape their corresponding closing characters \(\] and }\). In most cases, escaping these is not necessary. If a closing bracket or brace is not preceded by its corresponding opening character, the regular expression engine interprets it literally. If an opening braket or brace is interpreted as a metacharacter, the regular expression engine interprets the first corresponding closing character as a metacharacter. If this is not the desired behavior, the closing bracket or brace should be escaped by explicitly prepending the backslash \(\\\) character. For an illustration, see the Example section.  
  
   
  
## 例  
 The following example extracts comments from text. It assumes that the comments are delimited by a begin comment symbol and an end comment symbol that is selected by the user. Because the comment symbols are to be interpreted literally, they are passed to the <xref:System.Text.RegularExpressions.Regex.Escape%2A> method to ensure that they cannot be misinterpreted as metacharacters. In addition, the example explicitly checks whether the end comment symbol entered by the user is a closing bracket \(\]\) or brace \(}\). If it is, a backslash character \(\\\) is prepended to the bracket or brace so that it is interpreted literally. Note that the example also uses the <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> collection to display the comment only, rather than the comment together with its opening and closing comment symbols.  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Escape\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/cs/Escape3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Escape\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Escape/vb/Escape3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Unescape(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="factory">
      <MemberSignature Language="C#" Value="protected System.Text.RegularExpressions.RegexRunnerFactory factory;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly class System.Text.RegularExpressions.RegexRunnerFactory factory" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.factory" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexRunnerFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用される、 <see cref="T:System.Text.RegularExpressions.Regex" /> によって生成されたオブジェクト、 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroupNames">
      <MemberSignature Language="C#" Value="public string[] GetGroupNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetGroupNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GetGroupNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>正規表現で使用されるキャプチャ グループ名の配列を返します。</summary>
        <returns>グループ名の文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グループ名のコレクションには、式のキャプチャ グループの名前を使用する文字列のセットが含まれています。 キャプチャ グループが明示的に名を指定しない場合でもは自動的に割り当てられている数値名前 \(「0」、「1」、「2」、「3」、およびなど\)。 「0」には、グループを表す正規表現パターンと一致するすべてのテキストがという名前です。 番号付きグループは、コレクションに明示的に指定されたグループをよりも優先され、正規表現パターンで定義されている順序で名前付きのグループが表示されます。  
  
 使用することができます、 <xref:System.Array.Length%2A> 正規表現内のグループの数を確認するには、このメソッドによって返される配列のプロパティです。  
  
   
  
## 例  
 次の例は、汎用的な定義 `ShowMatches` を正規表現グループと、一致したテキストの名前を表示するメソッドです。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GetGroupNames\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/cs/getgroupnames1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GetGroupNames\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnames/vb/getgroupnames1.vb#1)]  
  
 In this case, the regular expression pattern `\b(?<FirstWord>\w+)\s?((\w+)\s)*(?<LastWord>\w+)?(?<Punctuation>\p{Po})` is intended to parse a simple sentence, and to identify its first word, last word, and ending punctuation mark. The following table shows how the regular expression pattern is interpreted:  
  
|Pattern|Description|  
|-------------|-----------------|  
|`\b`|Begin the match at a word boundary.|  
|`(?<FirstWord>\w+)`|Match one or more word characters. This is the `FirstWord` named group.|  
|\\s?|Match zero or one white\-space characters.|  
|\(\\w\+\)|Match one or more word characters. This is the second capturing group.|  
|\\s|Match a white\-space character.|  
|\(\(\\w\+\)\\s\)\*|Match zero or more occurrences of one or more word characters followed by a white space. This is the first capturing group.|  
|\(?\<LastWord\>\\w\+\)?|Match zero or one occurrence of one or more word characters. This is the `LastWord` named group.|  
|\(?\<Punctuation\>\\p{Po}\)|Match a character whose Unicode category is Punctuation, Other. This is the `Punctuation` named group.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
      </Docs>
    </Member>
    <Member MemberName="GetGroupNumbers">
      <MemberSignature Language="C#" Value="public int[] GetGroupNumbers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32[] GetGroupNumbers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GetGroupNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>配列内のグループ名に対応したキャプチャ グループ番号の配列を返します。</summary>
        <returns>グループ番号の整数配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 名前のないと、名前付きのキャプチャ グループは、番号でアクセスできます。 名前のないグループは左から右へ 1 で始まる番号が付けられます。 \(インデックス 0 \(ゼロ\) でのキャプチャ グループ全体を表します、一致している。\)  名前付きグループは左から右へ 1 だけ大きい数値である値で始まる番号数よりも、名前のないキャプチャ グループです。  
  
 文字列の名前での代わりに番号を使用してグループを参照すると、高速アクセスを提供できます。  
  
   
  
## 例  
 次の例は、正規表現を定義 `\b((?<word>\w+)\s*)+(?<end>[.?!])`, 、文と一致します。 正規表現には、次の 3 つのキャプチャ グループが含まれています個々 の単語に続くことがあります。 空白文字およびをキャプチャする名前のないグループ。という名前のグループ `word` ;、センテンス内の個々 の単語をキャプチャして、グループの名前を `end` 文の終了の区切り文字をキャプチャします。 呼び出しの例、 <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A> すべてキャプチャするための番号を取得するメソッドは、グループ、およびそのキャプチャされた文字列を表示します。 さらに、 <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> メソッドが特定の番号付きグループは、名前付きグループに対応するかどうかを示すために使用します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GetGroupNumbers\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/cs/getgroupnumbers1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GetGroupNumbers\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.getgroupnumbers/vb/getgroupnumbers1.vb#1)]  
  
 The regular expression pattern is interpreted as shown in the following table.  
  
|Pattern|Description|  
|-------------|-----------------|  
|`\b`|Begin the match at a word boundary.|  
|`(?<word>\w+)`|Match one or more word characters and assign the matched strings to a group named `word`.|  
|`\s*`|Match zero or more white\-space characters.|  
|`((?<word>\w+)\s*)`|Assign the `word` captured group followed by any captured white\-space characters to the first captured group.|  
|`((?<word>\w+)\s*)+`|Match the pattern of one or more word characters followed by any white\-space characters one or more times.|  
|`(?<end>[.?!])`|Match a period, question mark, or exclamation point. Assign the matched character to the `end` capturing group.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
      </Docs>
    </Member>
    <Member MemberName="GroupNameFromNumber">
      <MemberSignature Language="C#" Value="public string GroupNameFromNumber (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GroupNameFromNumber(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">対応するグループ名に変換するグループ番号。</param>
        <summary>指定したグループ番号に対応するグループ名を取得します。</summary>
        <returns>指定したグループ番号に関連付けられたグループ名を含んでいる文字列。 対応するグループ名が存在しない場合 <paramref name="i" />, 、メソッドが返す <see cref="F:System.String.Empty" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 正規表現パターンでは、名前付きまたは番号付きキャプチャ グループ、パターン一致内の部分式を表すを含めることができます。 番号付きグループは、構文で区切られます \(*subexpression*\) と、正規表現での順序に基づいて数値が割り当てられます。 名前付きグループは、構文で区切られます \(?`<`*名*`>`*subexpression*\) または \(ですか?'*名*'*subexpression*\) ここで、 *名* 、部分式を識別する名前を指定します。 \(詳細については、「[Grouping Constructs](http://msdn.microsoft.com/ja-jp/0fc18634-f590-4062-8d5c-f0b71abe405b)」を参照してください\)。<xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> メソッドは、名前付きのグループと正規表現内の序数位置によって番号付きグループの両方を識別します。 序数位置は 0 は、常に、正規表現全体を表します。 すべての番号付きグループは正規表現パターンの実際の位置に関係なく、名前付きグループの前にカウントされます。  
  
 場合 `i` 数は、メソッドは、名前付きグループのグループの名前を返します。 場合 `i` 数は、メソッドは、名前のないグループの数の文字列形式を返します。 たとえば場合、 `i` は 1 ですが、メソッドは「1」を返します。 場合 `i` はキャプチャ グループの数を返します <xref:System.String.Empty?displayProperty=fullName>します。  
  
 このメソッドによって返される値を取得し、使用するパターン一致が見つかった場合、 <xref:System.Text.RegularExpressions.Group> からキャプチャされたグループを表すオブジェクト、 <xref:System.Text.RegularExpressions.GroupCollection.Item%2A?displayProperty=fullName> プロパティです。<xref:System.Text.RegularExpressions.GroupCollection> によってオブジェクトが返される、 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> プロパティです。  
  
   
  
## 例  
 次の例では、米国の都市名、状態名、および郵便番号を含む住所行に一致する正規表現パターンを定義します。 例では、 <xref:System.Text.RegularExpressions.Regex.GroupNameFromNumber%2A> キャプチャ グループの名前を取得します。 これらの名前を使用して、一致するものを対応するキャプチャされたグループを取得します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.GroupNameFromNumber\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/cs/groupnamefromnumberex.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.GroupNameFromNumber\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.groupnamefromnumber/vb/groupnamefromnumberex.vb#1)]  
  
 正規表現パターンは、次の式によって定義されます。  
  
 `(?<city>[A-Za-z\s]+), (?<state>[A-Za-z]{2}) (?<zip>\d{5}(-\d{4})?)`  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|----------|--------|  
|`(?<city>[A-Za-z\s]+)`|1 つ以上のアルファベット順または空白文字と一致します。 このキャプチャされたグループの名前を割り当てる `city`します。|  
|`,`|空白文字が後ろにコンマ \(,\) と一致します。|  
|`(?<state>[A-Za-z]{2})`|2 つのアルファベット文字に一致します。 このキャプチャされたグループの名前を割り当てる `state`します。 このグループは、空白文字が従う必要があります。|  
|`(?<zip>\d{5}(-\d{4})?)`|0 回または 1 個のハイフン、4 桁の数字の後に続く 5 桁の数字と一致します。 このキャプチャされたグループの名前を割り当てる `zip`します。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <altmember cref="M:System.Text.RegularExpressions.Regex.GetGroupNumbers" />
      </Docs>
    </Member>
    <Member MemberName="GroupNumberFromName">
      <MemberSignature Language="C#" Value="public int GroupNumberFromName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GroupNumberFromName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">対応するグループ番号に変換するグループ名。</param>
        <summary>指定したグループ名に対応するグループ番号を返します。</summary>
        <returns>場合に、指定したグループ名または\-1 に対応するグループ番号 <paramref name="name" /> 有効なグループ名ではありません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 正規表現パターンでは、名前付きまたは番号付きキャプチャ グループ、パターン一致内の部分式を表すを含めることができます。 番号付きグループは、構文で区切られます \(*subexpression*\) と、正規表現での順序に基づいて数値が割り当てられます。 名前付きグループは、構文で区切られます \(?`<`*名*`>`*subexpression*\) または \(ですか?'*名*'*subexpression*\) ここで、 *名* 、部分式を識別する名前を指定します。 \(詳細については、「[Grouping Constructs](http://msdn.microsoft.com/ja-jp/0fc18634-f590-4062-8d5c-f0b71abe405b)」を参照してください\)。<xref:System.Text.RegularExpressions.Regex.GroupNumberFromName%2A> メソッドは、名前付きのグループと正規表現内の序数位置によって番号付きグループの両方を識別します。 序数位置は 0 は、常に、正規表現全体を表します。 すべての番号付きグループは正規表現パターンの実際の位置に関係なく、名前付きグループの前にカウントされます。  
  
 場合 `name` 番号をメソッドの戻り値を正規表現パターンに存在するグループ番号の文字列表現です。 場合 `name` 名前に対応する正規表現パターンに存在するグループを取得するには、メソッドは、対応する番号を返します。 比較した結果 `name` 、グループ名は大文字小文字を区別します。 場合 `name` は対応していないキャプチャ グループの名前に、またはメソッドのキャプチャ グループの数の文字列表記には\-1 を返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> が <see langword="null" /> です。</exception>
        <altmember cref="T:System.Text.RegularExpressions.GroupCollection" />
        <altmember cref="M:System.Text.RegularExpressions.Regex.GetGroupNames" />
      </Docs>
    </Member>
    <Member MemberName="InfiniteMatchTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteMatchTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteMatchTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パターン一致の操作がタイムアウトしないことを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> クラス コンス トラクターおよび静的な一致メソッドの使用の数、 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> パターン一致を検索する試行がタイムアウトしない必要があるかを示す定数です。  
  
> [!WARNING]
>  正規表現エンジンのタイムアウト値を設定する <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> 正規表現パターンにほぼ一致するテキストを処理するときの応答を停止するように見えます過度なバックトラッ キングに依存する正規表現が発生することができます。 タイムアウトを無効にした場合、正規表現は、過度なバックトラッ キングに依存しないことと、正規表現パターンにほぼ一致するテキストを処理することを確認してください。  
>   
>  バックトラッ キングの処理の詳細については、次を参照してください。 [Backtracking](http://msdn.microsoft.com/ja-jp/34df1152-0b22-4a1c-a76c-3c28c47b70d8)します。  
  
 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout> の値として定数を指定できます、 `matchTimeout` 、次のメンバーの引数。  
  
-   <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29?displayProperty=fullName>  
  
-   <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
-   <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.RegularExpressions.Regex.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="InitializeReferences">
      <MemberSignature Language="C#" Value="protected void InitializeReferences ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializeReferences() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.InitializeReferences" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用される、 <see cref="T:System.Text.RegularExpressions.Regex" /> によって生成されたオブジェクト、 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドです。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">参照は既に初期化されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="internalMatchTimeout">
      <MemberSignature Language="C#" Value="protected TimeSpan internalMatchTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly valuetype System.TimeSpan internalMatchTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.internalMatchTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OptionalField(VersionAdded=2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>操作がタイムアウトになる前に、パターン一致操作で経過できる最大時間。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public bool IsMatch (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsMatch(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <summary>正規表現が指定されているかどうか、 <see cref="T:System.Text.RegularExpressions.Regex" /> コンス トラクターは、指定した入力文字列の一致を検出します。</summary>
        <returns>
          <see langword="true" /> 正規表現検索に一致する場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> 文字列を検証する、またはそれ以降の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認するメソッドは通常使用します。 1 つまたは複数の文字列が、正規表現パターン一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、 <xref:System.Text.RegularExpressions.Regex.Match%2A> または <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドです。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 照合操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> コンス トラクターです。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作は、アプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合、例外がスローされます。、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 タイムアウトが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合、または <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません。  
  
   
  
## 例  
 次の例では、使用する、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> メソッド \(string\) が有効な部品番号であるかどうかを確認します。 正規表現では、部品番号の 3 つのハイフンで区切られた文字のセットで構成される特定の形式であると想定しています。 最初のセットは、次の 4 つの文字が含まれている必要があります、2 つの数値文字の英数字 1 文字後に続く英数字 1 文字で構成されます。 次の 3 つの文字で構成され、2 番目のセットは、数値でなければなりません。 3 番目のセットは、次の 4 つの文字で構成され、次の 3 つの数値文字の後に英数字 1 文字が必要です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch2.vb#2)]  
  
 正規表現パターンは次のとおりです。  
  
```  
^[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|----------|--------|  
|`^`|行の先頭から照合を開始します。|  
|`[a-zA-Z0-9]`|単一のアルファベット文字に一致します \(`a` を通じて `z` または `A` を通じて `Z`\) または文字の数字です。|  
|`\d{2}`|2 つの数値文字に一致します。|  
|`[a-zA-Z0-9]`|単一のアルファベット文字に一致します \(`a` を通じて `z` または `A` を通じて `Z`\) または文字の数字です。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3 つの数値文字に一致します。|  
|`(-\d{3}){2}`|ハイフン、および 3 つの数字を検索し、このパターンの 2 つの出現と一致します。|  
|`[a-zA-Z0-9]`|単一のアルファベット文字に一致します \(`a` を通じて `z` または `A` を通じて `Z`\) または文字の数字です。|  
|`$`|行の末尾で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public bool IsMatch (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsMatch(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="startat">検索を開始する文字の位置。</param>
        <summary>正規表現が指定されているかどうか、 <see cref="T:System.Text.RegularExpressions.Regex" /> コンス トラクターは、文字列内の指定した開始位置から始まる、指定した入力文字列で、一致を検索します。</summary>
        <returns>
          <see langword="true" /> 正規表現検索に一致する場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> メソッドは通常、文字列を検証するか、後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認に使用します。 1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、 <xref:System.Text.RegularExpressions.Regex.Match%2A> または <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドです。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 照合操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> コンス トラクターです。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作は、アプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合、例外がスローされます。、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 タイムアウトが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合、または <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません。  
  
   
  
## 例  
 次の例では、使用する、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> メソッド \(string\) が有効な部品番号であるかどうかを確認します。 文字列にコロン \(:\) 文字に続く部品番号を検索します。<xref:System.String.IndexOf%28System.Char%29> メソッドを使用するには、コロンの位置を調べるため、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.Int32%29> メソッドです。 正規表現では、部品番号の 3 つのハイフンで区切られた文字のセットで構成される特定の形式であると仮定します。 最初のセットは、次の 4 つの文字が含まれている必要があります、2 つの数値文字の英数字 1 文字後に続く英数字 1 文字で構成されます。 次の 3 つの文字で構成され、2 番目のセットは、数値でなければなりません。 3 番目のセットは、次の 4 つの文字で構成され、次の 3 つの数値文字の後に英数字 1 文字が必要です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch3.vb#3)]  
  
 正規表現パターンは次のとおりです。  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|----------|--------|  
|`[a-zA-Z0-9]`|単一のアルファベット文字に一致します \(`a` を通じて `z` または `A` を通じて `Z`\) または文字の数字です。|  
|`\d{2}`|2 つの数値文字に一致します。|  
|`[a-zA-Z0-9]`|単一のアルファベット文字に一致します \(`a` を通じて `z` または `A` を通じて `Z`\) または文字の数字です。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3 つの数値文字に一致します。|  
|`(-\d{3}){2}`|ハイフン、および 3 つの数字を検索し、このパターンの 2 つの出現と一致します。|  
|`[a-zA-Z0-9]`|単一のアルファベット文字に一致します \(`a` を通じて `z` または `A` を通じて `Z`\) または文字の数字です。|  
|`$`|行の末尾で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startat" /> が、0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
        <returns>
          <see langword="true" /> 正規表現検索に一致する場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> メソッドは通常、文字列を検証するか、後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認に使用します。 1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、 <xref:System.Text.RegularExpressions.Regex.Match%2A> または <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドです。  
  
 静的な <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> メソッドを構築するのには、 <xref:System.Text.RegularExpressions.Regex> オブジェクトで指定された正規表現パターンで `pattern` を呼び出すと、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> メソッドをインスタンス化します。 この正規表現パターンは、迅速な検索の正規表現エンジンによってキャッシュされます。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 照合操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインの指定されたタイムアウト期間を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません。  
  
   
  
## 例  
 次の例では、使用する、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> メソッド \(string\) が有効な部品番号であるかどうかを確認します。 正規表現では、部品番号の 3 つのハイフンで区切られた文字のセットで構成される特定の形式であると想定しています。 最初のセットは、次の 4 つの文字が含まれている必要があります、2 つの数値文字の英数字 1 文字後に続く英数字 1 文字で構成されます。 次の 3 つの文字で構成され、2 番目のセットは、数値でなければなりません。 3 番目のセットは、次の 4 つの文字で構成され、次の 3 つの数値文字の後に英数字 1 文字が必要です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch1.vb#1)]  
  
 正規表現パターンは次のとおりです。  
  
```  
^[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|----------|--------|  
|`^`|行の先頭から照合を開始します。|  
|`[a-zA-Z0-9]`|単一のアルファベット文字に一致します \(`a` を通じて `z` または `A` を通じて `Z`\) または文字の数字です。|  
|`\d{2}`|2 つの数値文字に一致します。|  
|`[a-zA-Z0-9]`|単一のアルファベット文字に一致します \(`a` を通じて `z` または `A` を通じて `Z`\) または文字の数字です。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3 つの数値文字に一致します。|  
|`(-\d{3}){2}`|ハイフン、および 3 つの数字を検索し、このパターンの 2 つの出現と一致します。|  
|`[a-zA-Z0-9]`|単一のアルファベット文字に一致します \(`a` を通じて `z` または `A` を通じて `Z`\) または文字の数字です。|  
|`$`|行の末尾で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>This method times out after an interval that is equal to the default time-out value of the application domain in which the method is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for verifying a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した一致オプションを使用して、指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
        <returns>
          <see langword="true" /> 正規表現検索に一致する場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> メソッドは通常、文字列を検証するか、後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認に使用します。 1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、 <xref:System.Text.RegularExpressions.Regex.Match%2A> または <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドです。  
  
 静的な <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドを構築するのには、 <xref:System.Text.RegularExpressions.Regex> オブジェクトで指定された正規表現パターンで `pattern` で指定された正規表現のオプションと `options` を呼び出すと、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> インスタンス メソッドです。 この正規表現パターンは、迅速な検索の正規表現エンジンによってキャッシュされます。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 照合操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインの指定されたタイムアウト期間を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません。  
  
   
  
## 例  
 次の例では、使用する、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> メソッド \(string\) が有効な部品番号であるかどうかを確認します。 正規表現では、部品番号の 3 つのハイフンで区切られた文字のセットで構成される特定の形式であると想定しています。 最初のセットは、次の 4 つの文字が含まれている必要があります、2 つの数値文字の英数字 1 文字後に続く英数字 1 文字で構成されます。 次の 3 つの文字で構成され、2 番目のセットは、数値でなければなりません。 3 番目のセットは、次の 4 つの文字で構成され、次の 3 つの数値文字の後に英数字 1 文字が必要です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch4.vb#4)]  
  
 正規表現パターンは次のとおりです。  
  
```  
^[A-Z0-9]\d{2}[A-Z0-9](-\d{3}){2}[A-Z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|----------|--------|  
|`^`|文字列の先頭から照合を開始します。|  
|`[A-Z0-9]`|単一のアルファベット文字から `A` を通じて `Z`, 、または任意の数値文字です。|  
|`\d{2}`|2 つの数値文字に一致します。|  
|`[A-Z0-9]`|単一のアルファベット文字から `A` を通じて `Z`, 、または任意の数値文字です。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3 つの数値文字に一致します。|  
|`(-\d{3}){2}`|次の 3 つの数値文字が後にハイフンを検索して、このパターンの 2 つの出現と一致.|  
|`[A-Z0-9]`|単一のアルファベット文字から `A` を通じて `Z`, 、または任意の数値文字です。|  
|`$`|入力文字列の末尾で照合を終了します。|  
  
 呼び出す、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドを `options` パラメーターを設定する <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=fullName> は、次の正規表現の定義に相当します。  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]  
```  
  
 比較を行うための例を参照してください、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> 無効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for verifying a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public static bool IsMatch (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMatch(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した一致オプションとタイムアウト間隔を使用して、指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
        <returns>
          <see langword="true" /> 正規表現検索に一致する場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.IsMatch%2A> メソッドは通常、文字列を検証するか、後続の操作のためには、その文字列を取得せず、その文字列が特定のパターンに準拠していることを確認に使用します。 1 つまたは複数の文字列が正規表現パターンに一致し、して後続の操作の呼び出しを取得するかどうかを決定する場合、 <xref:System.Text.RegularExpressions.Regex.Match%2A> または <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドです。  
  
 静的な <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドを構築するのには、 <xref:System.Text.RegularExpressions.Regex> オブジェクトで指定された正規表現パターンで `pattern` で指定された正規表現のオプションと `options` を呼び出すと、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%29> インスタンス メソッドです。 この正規表現パターンは、迅速な検索の正規表現エンジンによってキャッシュされます。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
 `matchTimeout` パラメーターする方法を指定時間、パターン一致メソッドがタイムアウトになるまで、検索するしようとする必要があります。 禁止タイムアウト間隔を設定する入力を処理するときに応答を停止させない過度なバックトラッ キングに依存する正規表現を近い一致が含まれています。 詳細については、[Best Practices for Regular Expressions in the .NET Framework](http://msdn.microsoft.com/ja-jp/618e5afb-3a97-440d-831a-70e4c526a51c) および [Backtracking](http://msdn.microsoft.com/ja-jp/34df1152-0b22-4a1c-a76c-3c28c47b70d8) を参照してください。 メソッドをスローする時間間隔の一致が見つからない場合、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外です。`matchTimeout` メソッドが実行されているアプリケーション ドメインに対して定義されている既定のタイムアウト値を上書きします。  
  
   
  
## 例  
 次の例では、使用する、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッド \(string\) が有効な部品番号であるかどうかを確認します。 正規表現では、部品番号の 3 つのハイフンで区切られた文字のセットで構成される特定の形式であると想定しています。 最初のセットは、次の 4 つの文字が含まれている必要があります、2 つの数値文字の英数字 1 文字後に続く英数字 1 文字で構成されます。 次の 3 つの文字で構成され、2 番目のセットは、数値でなければなりません。 3 番目のセットは、次の 4 つの文字で構成され、次の 3 つの数値文字の後に英数字 1 文字が必要です。 正規表現パターンに一致するメソッドが 500 ミリ秒のタイムアウト間隔を設定するための入力文字列を最小限に抑える検索に関連する必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.IsMatch\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/cs/ismatch5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.IsMatch\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.ismatch/vb/ismatch5.vb#5)]  
  
 正規表現パターンは次のとおりです。  
  
```  
^[A-Z0-9]\d{2}[A-Z0-9](-\d{3}){2}[A-Z0-9]$  
```  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|----------|--------|  
|`^`|文字列の先頭から照合を開始します。|  
|`[A-Z0-9]`|単一のアルファベット文字から `A` を通じて `Z`, 、または任意の数値文字です。|  
|`\d{2}`|2 つの数値文字に一致します。|  
|`[A-Z0-9]`|単一のアルファベット文字から `A` を通じて `Z`, 、または任意の数値文字です。|  
|`-`|ハイフンと一致します。|  
|`\d{3}`|3 つの数値文字に一致します。|  
|`(-\d{3}){2}`|ハイフン、および 3 つの数字を検索し、このパターンの 2 つの出現と一致します。|  
|`[A-Z0-9]`|単一のアルファベット文字から `A` を通じて `Z`, 、または任意の数値文字です。|  
|`$`|入力文字列の末尾で照合を終了します。|  
  
 呼び出す、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドを `options` パラメーターを設定する <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=fullName> は、次の正規表現の定義に相当します。  
  
```  
[a-zA-Z0-9]\d{2}[a-zA-Z0-9](-\d{3}){2}[A-Za-z0-9]  
```  
  
 比較を行うための例を参照してください、 <xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> が有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。  
  
 または  
  
 <paramref name="matchTimeout" /> が負の値、0、または約 24 日より大きい。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。</exception>
        <block subset="none" type="usage">
          <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  
  
-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  
  
-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  
  
-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <summary>指定された正規表現の最初に見つかった位置の指定した入力文字列を検索、 <see cref="T:System.Text.RegularExpressions.Regex" /> コンス トラクターです。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> メソッドは、入力文字列内の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンのビルドに使用される言語要素については、次を参照してください。 [Regular Expression Language \- Quick Reference](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)します。  
  
 正規表現パターンが、返された値をチェックして、入力文字列内見つかったされているかどうかを判断できます <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A> プロパティです。 一致が見つかった場合、返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティから部分文字列が含まれています。 `input` 正規表現パターンに一致します。 一致が検出されない場合、値は <xref:System.String.Empty?displayProperty=fullName>です。  
  
 このメソッドは、\[最初の部分文字列を返します。 `input` 正規表現パターンに一致します。 後続の一致を取得するには、返されたを繰り返し呼び出す <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> メソッドです。 呼び出して、1 つのメソッドの呼び出しですべての一致項目を取得することも、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName> メソッドです。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 照合操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> コンス トラクターです。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作は、アプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合、例外がスローされます。、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 タイムアウトが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合、または <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません。  
  
   
  
## 例  
 正規表現パターン文字列に一致し、リスト、一致する検索の例を次のグループ、キャプチャ、およびキャプチャの位置。  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures\#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures\#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 正規表現パターン `(\w+)\s+(car)` と共にその前にある単語"car"という単語の出現と一致します。 次の表に示すように解釈されます。  
  
|パターン|説明|  
|----------|--------|  
|`(\w+)`|1 つ以上の単語文字に一致します。 これが最初のキャプチャ グループです。|  
|`\s+`|1 つ以上の空白文字と一致します。|  
|\(car\)|リテラル文字列"car"に一致します。 これが 2 番目のキャプチャ グループです。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="startat">検索を開始する 0 から始まる文字位置。</param>
        <summary>入力文字列内の指定した開始位置から開始して、その入力文字列内で正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> 以降に、正規表現パターンに一致する最初の部分文字列を返します、 `startat` 文字入力文字列内の位置。 正規表現パターンのビルドに使用される言語要素については、次を参照してください。 [Regular Expression Language \- Quick Reference](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)します。  
  
 正規表現パターンを <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> のいずれかの呼び出しでメソッドの検索が定義されている、 <xref:System.Text.RegularExpressions.Regex> クラスのコンス トラクターです。 正規表現パターンを形成する要素の詳細については、次を参照してください。 [Regular Expression Language \- Quick Reference](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)します。  
  
 使用して、文字列内の開始位置を指定できます、 `startat` パラメーター。 正規表現エンジンは、左から右 \(既定値\) を解析、ときに、一致していると、スキャンを移動し、右方向で指定した文字で始まる `startat`します。 正規表現エンジンが右から左に解析して \(で正規表現パターンを作成する場合、 <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=fullName> オプション\)、反対方向に移動し、位置にある文字で始まる一致してスキャン `startat` \-1 です。 既定値から検索を開始する場合は、開始位置を指定しないと、 `startat` 位置。 正規表現が左から右へ、既定値から検索する場合 `startat` の左端に配置されて `input`かどうかに、右から検索は左、既定値 `startat` の右端に配置されて `input`します。  
  
 文字列内の特定の文字位置から開始し、正規表現エンジンが一致する対象文字列の残りの部分をスキャンしないように、一致するものを制限する場合は、固定、正規表現を `\G` \(左から右へのパターンでは、左または右から左へのパターンを右にある\)。 これによって、制限、一致しているのため、ちょうどに開始する必要があります `startat`します。  
  
 正規表現パターンが、返された値をチェックして、入力文字列内見つかったされているかどうかを判断できます <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A> プロパティです。 一致が見つかった場合、返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティから部分文字列が含まれています。 `input` 正規表現パターンに一致します。 一致が検出されない場合、値は <xref:System.String.Empty?displayProperty=fullName>です。  
  
 このメソッドは、以降に見つかった最初の部分文字列を返します。、 `startat` 内の位置の文字 `input` 正規表現パターンに一致します。 後続の一致を取得するには、返されたを繰り返し呼び出す <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> メソッドです。 呼び出して、1 つのメソッドの呼び出しですべての一致項目を取得することも、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=fullName> メソッドです。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 照合操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> コンス トラクターです。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作超えていますをアプリケーション ドメインの任意のタイムアウト値が確立されている場合、例外がスローされます。、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 タイムアウトが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合、または <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startat" /> が、0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>指定した入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> メソッドは、入力文字列内の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンのビルドに使用される言語要素については、次を参照してください。 [Regular Expression Language \- Quick Reference](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)します。  
  
 静的な <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> メソッドを構築するのには、 <xref:System.Text.RegularExpressions.Regex> 指定した正規表現パターンを持つオブジェクトおよびインスタンスの呼び出し <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> メソッドです。 この場合、正規表現エンジンは、正規表現パターンをキャッシュします。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language \- Quick Reference](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
 正規表現パターンが、返された値をチェックして、入力文字列内見つかったされているかどうかを判断できます <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A> プロパティです。 一致が見つかった場合、返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティから部分文字列が含まれています。 `input` 正規表現パターンに一致します。 一致が検出されない場合、値は <xref:System.String.Empty?displayProperty=fullName>です。  
  
 このメソッドは、\[最初の部分文字列を返します。 `input` 正規表現パターンに一致します。 後続の一致を取得するには、返されたを繰り返し呼び出す <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> メソッドです。 呼び出して、1 つのメソッドの呼び出しですべての一致項目を取得することも、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName> メソッドです。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 照合操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインの指定されたタイムアウト期間を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません。  
  
   
  
## 例  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> には、少なくとも 1 つ含まれる最初の単語を検索するメソッド `z` 文字とし、呼び出し、 <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> 、追加の一致を検索するメソッドです。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Match\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Match\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match1.vb#1)]  
  
 The regular expression pattern `\b\w*z+\w*\b` is interpreted as shown in the following table.  
  
|Pattern|Description|  
|-------------|-----------------|  
|`\b`|Begin the match at a word boundary.|  
|`\w*`|Match zero, one, or more word characters.|  
|`z+`|Match one or more occurrences of the `z` character.|  
|`\w*`|Match zero, one, or more word characters.|  
|`\b`|End the match at a word boundary.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for retrieving a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />, which lets you set the time-out interval.</para>
        </block>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match Match (string input, int beginning, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match Match(string input, int32 beginning, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="beginning" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="beginning">検索する左端の位置を定義する、入力文字列内の 0 から始まる文字位置。</param>
        <param name="length">検索に含める部分文字列の文字数。</param>
        <summary>入力文字列内の指定した開始位置から開始し、指定した文字数だけを検索対象として、その入力文字列内で正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method returns the first substring that matches a regular expression pattern in a portion of an input string. For information about the language elements used to build a regular expression pattern, see [Regular Expression Language \- Quick Reference](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c).  
  
 The regular expression pattern for which the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches is defined by the call to one of the <xref:System.Text.RegularExpressions.Regex> class constructors. For more information about the elements that can form a regular expression pattern, see [Regular Expression Language \- Quick Reference](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c).  
  
 The <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%2CSystem.Int32%29> method searches the portion of **parameterReference tag is not supported!!!!**  
 defined by the **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters for the regular expression pattern. **parameterReference tag is not supported!!!!**  
 always defines the index of the leftmost character to include in the search, and **parameterReference tag is not supported!!!!**  
 defines the maximum number of characters to search. Together, they define the range of the search. If the search proceeds from left to right \(the default\), the regular expression engine searches from the character at index **parameterReference tag is not supported!!!!**  
 to the character at index **parameterReference tag is not supported!!!!**  
**languageKeyword tag is not supported!!!!**  
**parameterReference tag is not supported!!!!**  
**languageKeyword tag is not supported!!!!**  
. If the regular expression engine was instantiated by using the <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft?displayProperty=fullName> option so that the search proceeds from right to left, the regular expression engine searches from the character at index **parameterReference tag is not supported!!!!**  
**languageKeyword tag is not supported!!!!**  
**parameterReference tag is not supported!!!!**  
**languageKeyword tag is not supported!!!!**  
 to the character at index **parameterReference tag is not supported!!!!**  
. This method returns the first match that it finds within this range. You can retrieve subsequent matches by repeatedly calling the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method.  
  
 You can determine whether the regular expression pattern has been found in the input string by checking the value of the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Group.Success%2A> property. If a match is found, the returned <xref:System.Text.RegularExpressions.Match> object's <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the substring from **parameterReference tag is not supported!!!!**  
 that matches the regular expression pattern. If no match is found, its value is <xref:System.String.Empty?displayProperty=fullName>.  
  
 The <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> exception is thrown if the execution time of the matching operation exceeds the time\-out interval specified by the <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> constructor. If you do not set a time\-out value when you call the constructor, the exception is thrown if the operation exceeds any time\-out value established for the application domain in which the <xref:System.Text.RegularExpressions.Regex> object is created. If no time\-out is defined in the <xref:System.Text.RegularExpressions.Regex> constructor call or in the application domain's properties, or if the time\-out value is <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, no exception is thrown.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="beginning" /> が、0 未満か、<paramref name="input" /> の長さを超えています。  
  
 または  
  
 <paramref name="length" /> が、0 未満か、<paramref name="input" /> の長さを超えています。  
  
 または  
  
 <paramref name="beginning" /> <see langword="+" /> <paramref name="length" /> <see langword="–1" /> は、<paramref name="input" /> の範囲外の位置を識別します。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した一致オプションを使用して、入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドは、入力文字列内の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンのビルドに使用される言語要素については、次を参照してください。 [Regular Expression Language \- Quick Reference](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)します。  
  
 静的な <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドを構築するのには、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%29> コンス トラクターと、インスタンスを呼び出す <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> メソッドです。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language \- Quick Reference](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
 正規表現パターンが、返された値をチェックして、入力文字列内見つかったされているかどうかを判断できます <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A> プロパティです。 一致が見つかった場合、返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティから部分文字列が含まれています。 `input` 正規表現パターンに一致します。 一致が検出されない場合、値は <xref:System.String.Empty?displayProperty=fullName>です。  
  
 このメソッドで見つかった最初の部分文字列を返します。 `input` 正規表現パターンに一致します。 後続の一致を取得するには、返されたを繰り返し呼び出す <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Match.NextMatch%2A> メソッドです。 呼び出して、1 つのメソッドの呼び出しですべての一致項目を取得することも、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> メソッドです。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 照合操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインの指定されたタイムアウト期間を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません。  
  
   
  
## 例  
 次の例では、英字で始まる単語と一致する正規表現"a"です。 使用して、 <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=fullName> 正規表現が"a"と小文字を両方大文字で始まる単語を検索することを確認するにはオプション"a"です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Match\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/cs/match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Match\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.match/vb/match2.vb#2)]  
  
 The regular expression pattern `\ba\w*\b` is interpreted as shown in the following table.  
  
|Pattern|Description|  
|-------------|-----------------|  
|`\b`|Begin the match at a word boundary.|  
|`a`|Match the character "a".|  
|`\w*`|Match zero, one, or more word characters.|  
|`\b`|End the match at a word boundary.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for retrieving a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)" />, which lets you set the time-out interval.</para>
        </block>
        <altmember cref="M:System.Text.RegularExpressions.Match.NextMatch" />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Match (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Match(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した一致オプションとタイムアウト間隔を使用して、入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</summary>
        <returns>一致に関する情報を格納しているオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドは、入力文字列内の正規表現パターンに一致する最初の部分文字列を返します。 正規表現パターンのビルドに使用される言語要素については、次を参照してください。 [Regular Expression Language \- Quick Reference](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)します。  
  
 静的な <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドを構築するのには、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> コンス トラクターと、インスタンスを呼び出す <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> メソッドです。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language \- Quick Reference](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
 正規表現パターンが、返された値をチェックして、入力文字列内見つかったされているかどうかを判断できます <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Group.Success%2A> プロパティです。 一致が見つかった場合、返された <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> プロパティから部分文字列が含まれています。 `input` 正規表現パターンに一致します。 一致が検出されない場合、値は <xref:System.String.Empty?displayProperty=fullName>です。  
  
 このメソッドで見つかった最初の部分文字列を返します。 `input` 正規表現パターンに一致します。 後続の一致を取得するには、返されたを繰り返し呼び出す <xref:System.Text.RegularExpressions.Match> オブジェクトの <xref:System.Text.RegularExpressions.Match.NextMatch%2A> メソッドです。 呼び出して、1 つのメソッドの呼び出しですべての一致項目を取得することも、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName> メソッドです。  
  
 `matchTimeout` パラメーターする方法を指定時間、パターン一致メソッドがタイムアウトになるまで、検索するしようとする必要があります。 禁止タイムアウト間隔を設定する入力を処理するときに応答を停止させない過度なバックトラッ キングに依存する正規表現を近い一致が含まれています。 詳細については、[Best Practices for Regular Expressions in the .NET Framework](http://msdn.microsoft.com/ja-jp/618e5afb-3a97-440d-831a-70e4c526a51c) および [Backtracking](http://msdn.microsoft.com/ja-jp/34df1152-0b22-4a1c-a76c-3c28c47b70d8) を参照してください。 メソッドをスローする時間間隔の一致が見つからない場合、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外です。`matchTimeout` メソッドが実行されているアプリケーション ドメインに対して定義されている既定のタイムアウト値を上書きします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
 または  
  
 <paramref name="matchTimeout" /> が負の値、0、または約 24 日より大きい。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  
  
-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  
  
-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  
  
-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.MatchCollection Matches (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.MatchCollection Matches(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <summary>指定した入力文字列内で、正規表現と一致する対象をすべて検索します。</summary>
        <returns>コレクション、 <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトは、検索で見つかりませんでした。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> メソッドは、 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> メソッド、ことは、すべての一致項目に関する情報を返す点が異なりますが、単一の一致ではなく、入力文字列内に検出します。 これは、次のコードに相当します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#5)]  
  
 コレクションは、マッチするものだけが含まれていて、以外に一致する、最初に終了します。  
  
 正規表現パターンを <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> のいずれかの呼び出しでメソッドの検索が定義されている、 <xref:System.Text.RegularExpressions.Regex> クラスのコンス トラクターです。 正規表現パターンを形成する要素の詳細については、次を参照してください。 [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)します。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドでは、レイジー評価を使用して、返された事前設定 <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトです。 このコレクションのメンバーなどへのアクセス <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> と <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> にすぐに自動的に入力されるコレクションが発生します。 レイジー評価を利用する必要がありますなどのコンストラクトを使用して、コレクションを反復処理. `foreach` C\# の場合と `For``Each`...`Next` Visual Basic でします。  
  
 レイジー評価のための呼び出し、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> をスローせず、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外です。 ただし、操作を行うときに例外がスロー、 <xref:System.Text.RegularExpressions.MatchCollection> 場合、このメソッドによって返されるオブジェクト、 <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> プロパティは使用されません <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> と一致する操作がタイムアウト間隔を超えています。  
  
   
  
## 例  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29> "es"で終了する文で単語を識別する方法です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches1.vb#1)]  
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|----------|--------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列"es"と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.MatchCollection Matches (string input, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.MatchCollection Matches(string input, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="startat">入力文字列内の検索を開始する文字位置。</param>
        <summary>入力文字列内の指定した開始位置から検索を開始した場合に、その指定入力文字列内で正規表現と一致する対象をすべて検索します。</summary>
        <returns>コレクション、 <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトは、検索で見つかりませんでした。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> メソッドは、  <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29> メソッド、ことは、すべての一致項目に関する情報を返す点が異なりますが、単一の一致ではなく、入力文字列内に検出します。 これは、次のコードに相当します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#6)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#6)]  
  
 正規表現パターンを <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> のいずれかの呼び出しでメソッドの検索が定義されている、 <xref:System.Text.RegularExpressions.Regex> クラスのコンス トラクターです。 正規表現パターンを形成する要素の詳細については、次を参照してください。 [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)します。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドでは、レイジー評価を使用して、返された事前設定 <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトです。 このコレクションのメンバーなどへのアクセス <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> と <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> にすぐに自動的に入力されるコレクションが発生します。 レイジー評価を利用する必要がありますなどのコンストラクトを使用して、コレクションを反復処理. `foreach` C\# の場合と `For``Each`...`Next` Visual Basic でします。  
  
 レイジー評価のための呼び出し、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> をスローせず、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外です。 ただし、操作を行うときに例外がスロー、 <xref:System.Text.RegularExpressions.MatchCollection> 場合、このメソッドによって返されるオブジェクト、 <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> プロパティは使用されません <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> と一致する操作がタイムアウト間隔を超えています.  
  
   
  
## 例  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> "es"で終わるを呼び出してから、文の最初の単語を検索するメソッド、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29> "es"で終わる追加の語句を識別する方法です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches3.vb#3)]  
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|----------|--------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列"es"と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startat" /> が、0 未満か、<paramref name="input" /> の長さを超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>指定した入力文字列内で、指定した正規表現に一致する箇所をすべて検索します。</summary>
        <returns>コレクション、 <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトは、検索で見つかりませんでした。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> メソッドは、 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> メソッド、ことは、すべての一致項目に関する情報を返す点が異なりますが、単一の一致ではなく、入力文字列内に検出します。 これは、次のコードに相当します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#7)]  
  
 静的な `Matches` メソッドは等価の構築に、 <xref:System.Text.RegularExpressions.Regex> 指定した正規表現パターンを持つオブジェクトおよびインスタンス メソッドを呼び出すこと `Matches`します。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドでは、レイジー評価を使用して、返された事前設定 <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトです。 このコレクションのメンバーなどへのアクセス <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> と <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> にすぐに自動的に入力されるコレクションが発生します。 レイジー評価を利用する必要がありますなどのコンストラクトを使用して、コレクションを反復処理. `foreach` C\# の場合と `For``Each`...`Next` Visual Basic でします。  
  
 レイジー評価のための呼び出し、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> をスローせず、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外です。 ただし、操作を行うときに例外がスロー、 <xref:System.Text.RegularExpressions.MatchCollection> タイムアウト期間が現在のアプリケーション ドメインの"REGEX\_DEFAULT\_MATCH\_TIMEOUT"プロパティによって定義されているを対応する操作がこのタイムアウト間隔を超えている場合、このメソッドによって返されるオブジェクト。  
  
   
  
## 例  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> "es"で終わる文にある単語を識別する方法です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches2.vb#2)]  
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|----------|--------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列"es"と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for retrieving multiple pattern matches is <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you specify the time-out interval.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した一致オプションを使用して、指定した入力文字列内で、指定した正規表現に一致する箇所をすべて検索します。</summary>
        <returns>コレクション、 <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトは、検索で見つかりませんでした。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドは、 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッド、ことは、すべての一致項目に関する情報を返す点が異なりますが、単一の一致ではなく、入力文字列内に検出します。 これは、次のコードに相当します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#8)]  
  
 静的な `Matches` メソッドは等価の構築に、 <xref:System.Text.RegularExpressions.Regex> 指定した正規表現パターンを持つオブジェクトおよびインスタンス メソッドを呼び出すこと `Matches`します。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドでは、レイジー評価を使用して、返された事前設定 <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトです。 このコレクションのメンバーなどへのアクセス <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> と <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> にすぐに自動的に入力されるコレクションが発生します。 レイジー評価を利用する必要がありますなどのコンストラクトを使用して、コレクションを反復処理. `foreach` C\# の場合と `For``Each`...`Next` Visual Basic でします。  
  
 レイジー評価のための呼び出し、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> をスローせず、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外です。 ただし、操作を行うときに例外がスロー、 <xref:System.Text.RegularExpressions.MatchCollection> タイムアウト期間が現在のアプリケーション ドメインの"REGEX\_DEFAULT\_MATCH\_TIMEOUT"プロパティによって定義されているを対応する操作がこのタイムアウト間隔を超えている場合、このメソッドによって返されるオブジェクト。  
  
   
  
## 例  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29> "es"で終了しを呼び出して文で任意の単語を識別する方法、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> 、パターンと入力文字列の小文字を区別しない比較を実行するメソッドです。 出力に示すように、2 つの方法は異なる結果を返します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches4.vb#4)]  
  
 正規表現パターン `\b\w+es\b` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|----------|--------|  
|`\b`|ワード境界から照合を開始します。|  
|`\w+`|1 つ以上の単語文字に一致します。|  
|`es`|リテラル文字列"es"と一致します。|  
|`\b`|ワード境界で照合を終了します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <block subset="none" type="usage">
          <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for retrieving multiple pattern matches is <see cref="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.MatchCollection Matches (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.MatchCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した一致オプションとタイムアウト間隔を使用して、指定した入力文字列内で、指定した正規表現に一致するすべての箇所を検索します。</summary>
        <returns>コレクション、 <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトは、検索で見つかりませんでした。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドは、 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッド、ことは、すべての一致項目に関する情報を返す点が異なりますが、単一の一致ではなく、入力文字列内に検出します。 これは、次のコードに相当します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matchespattern.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matchespattern.vb#10)]  
  
 静的な `Matches` メソッドは等価の構築に、 <xref:System.Text.RegularExpressions.Regex> 指定した正規表現パターンを持つオブジェクトおよびインスタンス メソッドを呼び出すこと `Matches`します。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
 <xref:System.Text.RegularExpressions.Regex.Matches%2A> メソッドでは、レイジー評価を使用して、返された事前設定 <xref:System.Text.RegularExpressions.MatchCollection> オブジェクトです。 このコレクションのメンバーなどへのアクセス <xref:System.Text.RegularExpressions.MatchCollection.Count%2A?displayProperty=fullName> と <xref:System.Text.RegularExpressions.MatchCollection.CopyTo%2A?displayProperty=fullName> にすぐに自動的に入力されるコレクションが発生します。 レイジー評価を利用する必要がありますなどのコンストラクトを使用して、コレクションを反復処理. `foreach` C\# の場合と `For``Each`...`Next` Visual Basic でします。  
  
 レイジー評価のための呼び出し、 <xref:System.Text.RegularExpressions.Regex.Matches%2A> をスローせず、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外です。 ただし、例外が、操作を行うときに、 <xref:System.Text.RegularExpressions.MatchCollection> 一致操作がこの指定されたタイムアウト間隔を超えた場合に、このメソッドによって返されるオブジェクト、`matchTimeout` パラメーター。  
  
   
  
## 例  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> "es"で終わる文で任意の単語に一致する区別する比較を実行するメソッドです。 呼び出して、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> 、パターンと入力文字列の小文字を区別しない比較を実行するメソッドです。 どちらの場合も、タイムアウト間隔は 1 秒に設定します。 出力に示すように、2 つの方法は異なる結果を返します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/matches5.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/matches5.vb#11)]  
  
 The regular expression pattern `\b\w+es\b` is defined as shown in the following table.  
  
|Pattern|Description|  
|-------------|-----------------|  
|`\b`|Begin the match at a word boundary.|  
|`\w+`|Match one or more word characters.|  
|`es`|Match the literal string "es".|  
|`\b`|End the match at a word boundary.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
 または  
  
 <paramref name="matchTimeout" /> が負の値、0、または約 24 日より大きい。</exception>
        <block subset="none" type="usage">
          <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  
  
-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  
  
-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  
  
-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のインスタンスのタイムアウト間隔を取得します。</summary>
        <value>前に、パターン一致操作で経過できる最大時間間隔、 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> スローされると、または <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> タイムアウトが無効な場合です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A> プロパティ用のおおよその最大時間間隔を定義する、 <xref:System.Text.RegularExpressions.Regex> 操作がタイムアウトする前に、単一の一致する操作を実行するインスタンス。 正規表現エンジンがスロー、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> タイムアウト間隔が経過した後、次のタイミング チェック中に例外です。 これは、正規表現エンジンが過度なバックトラッ キングを必要とする入力文字列を処理することを防止できます。 詳細については、[Backtracking](http://msdn.microsoft.com/ja-jp/34df1152-0b22-4a1c-a76c-3c28c47b70d8) および [Best Practices for Regular Expressions in the .NET Framework](http://msdn.microsoft.com/ja-jp/618e5afb-3a97-440d-831a-70e4c526a51c) を参照してください。  
  
 このプロパティは読み取り専用です。 その値を明示的に設定するには、個々 の <xref:System.Text.RegularExpressions.Regex> を呼び出してオブジェクト、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> すべてに対して、値を設定し、コンス トラクター <xref:System.Text.RegularExpressions.Regex> 照合、アプリケーション ドメインでの操作を呼び出すことによって、 <xref:System.AppDomain.SetData%2A?displayProperty=fullName> メソッドを提供して、 <xref:System.TimeSpan> "REGEX\_DEFAULT\_MATCH\_TIMEOUT"プロパティの値として次の例に示すようにします。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.MatchTimeout\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/cs/regexmatchtimeout1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.MatchTimeout\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matchtimeout/vb/regexmatchtimeout1.vb#1)]  
  
 かどうかに明示的に設定しないタイムアウト時間、既定値 <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName> は、使用、および一致する操作はタイムアウトしません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>渡されたオプションを取得、 <see cref="T:System.Text.RegularExpressions.Regex" /> コンス トラクターです。</summary>
        <value>1 つまたは複数のメンバー、 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> に渡されたオプションを表す列挙体、 <see cref="T:System.Text.RegularExpressions.Regex" /> コンス トラクター</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Text.RegularExpressions.Regex.Options%2A> プロパティの 1 つまたは複数のメンバーから成る、 <xref:System.Text.RegularExpressions.RegexOptions> 列挙します。 オプションが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> クラスのコンス トラクターは、その値は <xref:System.Text.RegularExpressions.RegexOptions.None?displayProperty=fullName>です。 使用可能なオプションでの詳細については、 [Regular Expression Options](http://msdn.microsoft.com/ja-jp/c82dc689-7e82-4767-a18d-cd24ce5f05e9) トピックです。  
  
 なお、 <xref:System.Text.RegularExpressions.Regex.Options%2A> プロパティでは、インライン オプションが正規表現で定義されているパターン自体は反映されません。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Text.RegularExpressions.Regex" /> is the base class of regular expressions created by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. These compiled regular expressions use the base class implementation of the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property. If called from a derived class, the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property returns the options that were passed to the <paramref name="options" /> parameter of the <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> class constructor that was used to define the regular expression.</para>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="pattern">
      <MemberSignature Language="C#" Value="protected string pattern;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly string pattern" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.pattern" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用される、 <see cref="T:System.Text.RegularExpressions.Regex" /> によって生成されたオブジェクト、 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="replacement">置換文字列。</param>
        <summary>指定した入力文字列内で正規表現パターンに一致するすべての文字列を、指定した置換文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一致の検索の先頭から開始、 `input` 文字列。 正規表現とは、現在のコンス トラクターで定義されたパターン <xref:System.Text.RegularExpressions.Regex> オブジェクトです。  
  
 `replacement` パラメーターを各一致文字列を置換する文字列を指定 `input`します。`replacement` リテラル テキストの任意の組み合わせから成ると [置換](http://msdn.microsoft.com/ja-jp/d1f52431-1c7d-4dc6-8792-6b988256892e)します。 たとえば、置換パターン `a*${test}b` 文字列を挿入する"、\*"と一致した部分文字列を続けて、 `test` キャプチャ グループが存在する場合、その後に文字列"b"です。 \* 文字を置換パターンではメタ文字ではありません。  
  
> [!NOTE]
>  置換は、置換パターンで認識されている唯一の正規表現言語要素です。 すべての他の正規表現言語要素を含む [文字のエスケープ](http://msdn.microsoft.com/ja-jp/f49cc9cc-db7d-4058-8b8a-422bc08b29b0), 正規表現パターンにのみでは許可、および置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 置換操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> コンス トラクターです。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作は、アプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合、例外がスローされます。、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 タイムアウトが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合、または <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません  
  
 メソッドを返すため `input` が一致しない場合は、変更せずに、行うこともできます、 <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> メソッドが入力文字列に置換を行ったかどうかを決定する方法です。  
  
   
  
## 例  
 次の例は、正規表現を定義 `\s+`, 、1 つ以上の空白文字と一致します。 置換文字列""、単一の空白文字に置き換えます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample5.vb#5)]  
  
 次の例は、正規表現を定義 `(\p{Sc}\s?)?(\d+\.?((?<=\.)\d+)?)(?(1)|\s?\p{Sc})?`, 、および置換パターンでは、 `$2`, 、数値の値から先頭または末尾の通貨記号を削除します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample7.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample7.vb#7)]  
  
 この正規表現の解釈を次の表に示します。  
  
|パターン|説明|  
|----------|--------|  
|`\p{Sc}`|通貨記号と一致します。`{Sc}` Unicode の Symbol, Currency カテゴリのメンバーである任意の文字を表します。|  
|`\s?`|0 個または 1 個の空白文字と一致します。|  
|`(\p{Sc}\s?)?`|通貨記号の後に 0 個または 1 個の空白文字の組み合わせの 0 個または 1 回一致します。 これが最初のキャプチャ グループです。|  
|`\d+`|1 個以上の 10 進数と一致します。|  
|`\.?`|などのピリオド \(桁区切り記号の文字として使用\)、0 個または 1 回一致します。|  
|`((?<=\.)\d+)?`|ピリオドが前の文字の場合は、1 つ以上の 10 進数字に一致します。 このパターンは、0 個または 1 回を照合することができます。|  
|`(\d+\.?((?<=\.)\d+)?)`|1 つ以上の 10 進数字を使用して、後に省略可能な期間と 10 進数字のパターンに一致します。 これが 2 番目のキャプチャ グループです。 呼び出し、 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%29> メソッドでは、このキャプチャされたグループの値に一致した文字列全体が置き換えられます。|  
|`(?(1)&#124;\s?\p{Sc})?`|最初のキャプチャ グループが存在する場合は、空の文字列と一致します。 それ以外の場合、通貨記号に続く 0 個または 1 つの空白文字に一致します。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置換するために役立ちます。  
  
-   置換文字列は、正規表現置換パターンで簡単に指定できません。  
  
-   置換文字列に一致した文字列に対して実行される処理によって発生します。  
  
-   置換文字列の結果は、条件付き処理します。  
  
 メソッドが呼び出すことと同じ、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName> メソッドをそれぞれを渡すこと <xref:System.Text.RegularExpressions.Match> 、返されるオブジェクト <xref:System.Text.RegularExpressions.MatchCollection> コレクション、 `evaluator` を委任します。  
  
 正規表現とは、現在のコンス トラクターで定義されたパターン <xref:System.Text.RegularExpressions.Regex> オブジェクトです。  
  
 `evaluator` パラメーターを定義するカスタム メソッドのデリゲートは、一致した各文字列を調べる。 カスタム メソッドには、次のシグネチャと一致する必要があります、 <xref:System.Text.RegularExpressions.MatchEvaluator> を委任します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 カスタム メソッドは、一致する入力を置換する文字列を返します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 置換操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> コンス トラクターです。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作は、アプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合、例外がスローされます。、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 タイムアウトが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合、または <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません  
  
 メソッドを返すため `input` が一致しない場合は、変更せずに、行うこともできます、 <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> メソッドが入力文字列に置換を行ったかどうかを決定する方法です。  
  
   
  
## 例  
 次のコード例では、元の文字列内の各単語と一致する、各一致文字列を表示し、大文字の最初の文字を変換後の文字列に変換元の文字列を表示します。  
  
 [!code-csharp[Regex.Replace\-Instance\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Regex.Replace-Instance/cs/sample.cs#1)]
 [!code-vb[Regex.Replace\-Instance\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Regex.Replace-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="replacement">置換文字列。</param>
        <param name="count">置換を行う最大回数。</param>
        <summary>指定した入力文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一致の検索の先頭から開始、 `input` 文字列。 正規表現とは、現在のコンス トラクターで定義されているパターン <xref:System.Text.RegularExpressions.Regex> オブジェクトです。 場合 `count` は負の値の置換は、文字列の末尾に続行します。 場合 `count` 一致の数を超える場合、すべての一致項目が置き換えられます。  
  
 `replacement` パラメーターを 1 つ目を置換する文字列を指定 `count` に一致する `input`です。`replacement` リテラル テキストの任意の組み合わせから成ると [置換](http://msdn.microsoft.com/ja-jp/d1f52431-1c7d-4dc6-8792-6b988256892e)します。 たとえば、置換パターン `a*${test}b` 文字列を挿入する"、\*"と一致した部分文字列を続けて、 `test` キャプチャ グループが存在する場合、その後に文字列"b"です。 \* 文字を置換パターンではメタ文字ではありません。  
  
> [!NOTE]
>  置換は、置換パターンで認識されている唯一の正規表現言語要素です。 すべての他の正規表現言語要素を含む [文字のエスケープ](http://msdn.microsoft.com/ja-jp/f49cc9cc-db7d-4058-8b8a-422bc08b29b0), 正規表現パターンにのみでは許可、および置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 置換操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> コンス トラクターです。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作は、アプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合、例外がスローされます。、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 タイムアウトが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合、または <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません  
  
 メソッドを返すため `input` が一致しない場合は、変更せずに、行うこともできます、 <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> メソッドが入力文字列に置換を行ったかどうかを決定する方法です。  
  
   
  
## 例  
 次の例では、単一の文字と文字の最初の 5 つの出現を置換します。 正規表現パターン `(\w)\1` 単一の文字の連続するいくつかの出現と一致し、最初のキャプチャ グループに最初に見つかった位置を割り当てます。 置換パターン `$1` 最初のキャプチャ グループに一致した文字列全体を置き換えます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample8.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="replacement">置換文字列。</param>
        <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。<paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 静的な `Replace` メソッドは等価の構築に、 <xref:System.Text.RegularExpressions.Regex> 指定した正規表現パターンを持つオブジェクトおよびインスタンス メソッドを呼び出すこと `Replace`します。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。 一致の検索の先頭から開始、 `input` 文字列。  
  
 `replacement` パラメーターを各一致文字列を置換する文字列を指定 `input`します。`replacement` リテラル テキストの任意の組み合わせから成ると [置換](http://msdn.microsoft.com/ja-jp/d1f52431-1c7d-4dc6-8792-6b988256892e)します。 たとえば、置換パターン `a*${test}b` 文字列を挿入する"、\*"と一致した部分文字列を続けて、 `test` キャプチャ グループが存在する場合、その後に文字列"b"です。 \* 文字を置換パターンではメタ文字ではありません。  
  
> [!NOTE]
>  置換は、置換パターンで認識されている唯一の正規表現言語要素です。 すべての他の正規表現言語要素を含む [文字のエスケープ](http://msdn.microsoft.com/ja-jp/f49cc9cc-db7d-4058-8b8a-422bc08b29b0), 正規表現パターンにのみでは許可、および置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 置換操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインの指定されたタイムアウト期間を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません。  
  
 メソッドを返すため `input` が一致しない場合は、変更せずに、行うこともできます、 <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> メソッドが入力文字列に置換を行ったかどうかを決定する方法です。  
  
   
  
## 例  
 次の例は、正規表現を定義 `\s+`, 、1 つ以上の空白文字と一致します。 置換文字列""、単一の空白文字に置き換えます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample6.cs#6)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample6.vb#6)]  
  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> メソッドをローカル ファイルのパスと UNC パスには、ローカルのマシンとドライブの次の名前を置換します。 正規表現を使用して、 <xref:System.Environment.MachineName%2A?displayProperty=fullName> 、ローカル コンピューターの名前を含めるプロパティを <xref:System.Environment.GetLogicalDrives%2A?displayProperty=fullName> メソッドの論理ドライブの名前を追加します。 例を正常に実行するには、ローカル コンピューター名とリテラル文字列"MyMachine"を置き換える必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace3.vb#3)]  
  
 正規表現パターンは、次の式によって定義されます。  
  
 `"\\\\(?i:" + Environment.MachineName + ")(?:\.\w+)*\\((?i:[" + driveNames + "]))\$"`  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|----------|--------|  
|`\\\\`|一致する 2 つの連続する円 \(`\`\) 文字です。 円記号のエスケープ文字として解釈するため、各円記号は、別の円記号でエスケープする必要があります。|  
|`(?i:" + Environment.MachineName + ")`|によって返される文字列の大文字と小文字の実行、 <xref:System.Environment.MachineName%2A?displayProperty=fullName> プロパティです。|  
|`(?:\.\w+)*`|期間の一致 \(`.`\) 1 つまたは複数の単語文字が後ろに文字です。 0 回以上一致できます。 一致した部分式はキャプチャされません。|  
|`\\`|円記号に一致 \(`\`\) 文字です。|  
|`((?i:[" + driveNames + "]))`|個々 のドライブ文字で構成される文字クラスの小文字を区別しない一致を実行します。 この照合は、最初のキャプチャされた部分式です。|  
|`\$`|リテラルのドル記号に一致 \(`$`\) 文字です。|  
  
 置換パターン `$1` 最初のキャプチャされた部分式に一致した文字列全体を置き換えます。 つまり、ドライブ文字を UNC コンピューターおよびドライブ名を置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for replacing a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。<paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName>メソッドは、次の条件のいずれかが当てはまる場合は、正規表現の一致を置き換えるために役立ちます。  
  
-   置換文字列が正規表現置換パターンで簡単に指定できません。  
  
-   置換文字列、一致した文字列に対して実行されるいくつかの処理に起因します。  
  
-   置換文字列の結果は、条件付き処理します。  
  
 メソッドを呼び出すことと同じ、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName>メソッドを渡す各<xref:System.Text.RegularExpressions.Match>、返されたオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションに、`evaluator`委任します。  
  
 `pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。[.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d)と[Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
 `evaluator`パラメーター定義したカスタム メソッドのデリゲートは、一致した各文字列を調べる。 カスタム メソッドに次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 カスタム メソッドは、一致した入力を置換する文字列を返します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインに指定したタイムアウト間隔を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>例外はスローされません。  
  
 メソッドを返すため`input`一致が存在しない場合は変更されません、行うこともできます、<xref:System.Object.ReferenceEquals%2A?displayProperty=fullName>メソッドが入力文字列に置換を行ったかどうかを調べます。  
  
   
  
## 例  
 次の例は、正規表現を使用して、文字列から個々 の単語を抽出しを使用して、<xref:System.Text.RegularExpressions.MatchEvaluator>という名前のメソッドを呼び出すデリゲートを`WordScramble`単語の各文字にスクランブルをかけることです。 これを行う、`WordScramble`メソッドは、一致している文字を含む配列を作成します。 ランダムな浮動小数点数を設定する並列配列が作成されます。 呼び出すことによって、配列は並べ替えられます、<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=fullName>メソッド、および並べ替えられた配列が引数として提供される、<xref:System.String>クラスのコンス トラクターです。 新しく作成されたこの文字列がによって返されるし、`WordScramble`メソッドです。 正規表現パターン`\w+`1 つ以上の単語文字と一致する正規表現エンジンが単語以外の文字、空白文字などを検出するまでの一致に文字を追加し続けます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace5.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace5.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for evaluating and replacing a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <param name="count">置換を実行する最大回数。</param>
        <summary>指定した入力文字列の置換によって返される文字列で正規表現パターンに一致する文字列の場合は、指定した最大数、 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> を委任します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%29?displayProperty=fullName> メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置換するために役立ちます。  
  
-   置換文字列は、正規表現置換パターンで簡単に指定できません。  
  
-   置換文字列に一致した文字列に対して実行される処理によって発生します。  
  
-   置換文字列の結果は、条件付き処理します。  
  
 メソッドが呼び出すことと同じ、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%29?displayProperty=fullName> メソッドを 1 つ目を渡すこと `count`<xref:System.Text.RegularExpressions.Match> 、返されるオブジェクト <xref:System.Text.RegularExpressions.MatchCollection> コレクション、 `evaluator` を委任します。  
  
 正規表現とは、現在のコンス トラクターで定義されたパターン <xref:System.Text.RegularExpressions.Regex> オブジェクトです。  
  
 `evaluator` パラメーターを定義するカスタム メソッドのデリゲートは、一致した各文字列を調べる。 カスタム メソッドには、次のシグネチャと一致する必要があります、 <xref:System.Text.RegularExpressions.MatchEvaluator> を委任します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 カスタム メソッドは、一致する入力を置換する文字列を返します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 置換操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> コンス トラクターです。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作は、アプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合、例外がスローされます。、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 タイムアウトが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合、または <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません  
  
 メソッドを返すため `input` が一致しない場合は、変更せずに、行うこともできます、 <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> メソッドが入力文字列に置換を行ったかどうかを決定する方法です。  
  
   
  
## 例  
 次の例では、正規表現を使用して、意図的にリスト内の単語の半分の綴りを間違えた場合します。 正規表現を使用して `\w*(ie|ei)\w*` "ie"または"ei"の文字が含まれている単語に一致するようにします。 渡す最初に一致する単語の半分、 `ReverseLetter` を使用するには、メソッド、 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> "i"と一致した文字列の"e"を逆にする方法です。 残りの部分は変更されません。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace7.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace7.vb#11)]  
  
 The regular expression `\w*(ie|ei)\w*` is defined as shown in the following table.  
  
|Pattern|Description|  
|-------------|-----------------|  
|`\w*`|Match zero or more word characters.|  
|`(ie&#124;ei)`|Match either "ie" or "ei".|  
|`\w*`|Match zero or more word characters.|  
  
 The regular expression pattern `([ie])([ie])` in the `ReverseLetter` method matches the first "i" or "e" in the diphthong "ie" or "ei" and assigns the letter to the first capturing group. It matches the second "i" or "e" and assigns the letter to the second capturing group. The two characters are then reversed by calling the <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%29> method with the replacement pattern `$2$1`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, string replacement, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, string replacement, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="replacement">置換文字列。</param>
        <param name="count">置換を実行する最大回数。</param>
        <param name="startat">入力文字列中で検索を開始する文字位置。</param>
        <summary>指定した入力部分文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一致するものを検索を開始、 `input` で指定された位置の文字列に、 `startat` パラメーター。 正規表現とは、現在のコンス トラクターで定義されたパターン <xref:System.Text.RegularExpressions.Regex> オブジェクトです。 場合 `count` は負の値の置換は、文字列の末尾に続行します。 場合 `count` 一致の数を超える場合、すべての一致項目が置き換えられます。  
  
 `replacement` パラメーターを各一致文字列を置換する文字列を指定 `input`します。`replacement` リテラル テキストの任意の組み合わせから成ると [置換](http://msdn.microsoft.com/ja-jp/d1f52431-1c7d-4dc6-8792-6b988256892e)します。 たとえば、置換パターン `a*${test}b` 文字列を挿入する"、\*"と一致した部分文字列を続けて、 `test` キャプチャ グループが存在する場合、その後に文字列"b"です。 \* 文字を置換パターンではメタ文字ではありません。  
  
> [!NOTE]
>  置換は、置換パターンで認識されている唯一の正規表現言語要素です。 すべての他の正規表現言語要素を含む [文字のエスケープ](http://msdn.microsoft.com/ja-jp/f49cc9cc-db7d-4058-8b8a-422bc08b29b0), 正規表現パターンにのみでは許可、および置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 置換操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> コンス トラクターです。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作は、アプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合、例外がスローされます。、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 タイムアウトが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合、または <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません  
  
 メソッドを返すため `input` が一致しない場合は、変更せずに、行うこともできます、 <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> メソッドが入力文字列に置換を行ったかどうかを決定する方法です。  
  
   
  
## 例  
 文字列の最初の行を除くすべての行間を 2 次の例です。 正規表現パターンを定義 `^.*$`, 、テキスト、呼び出しの行に一致する、 <xref:System.Text.RegularExpressions.Regex.Match%28System.String%29> メソッドを使用して、文字列の最初の行に一致する、 `Match.Index` と `Match.Count` プロパティを 2 番目の行の開始位置を確認します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replaceexample9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replaceexample9.vb#9)]  
  
 正規表現パターン `^.*$` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|----------|--------|  
|`^`|行の先頭に一致します。 \(なお、 <xref:System.Text.RegularExpressions.Regex> を使用してオブジェクトがインスタンス化された、 <xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=fullName> オプションそれ以外の場合、この文字クラスはのみと一致する入力文字列の先頭。\)。|  
|`.*`|任意の文字を 0 回以上一致します。|  
|`$`|行の末尾と一致します。 \(なお、 <xref:System.Text.RegularExpressions.Regex> を使用してオブジェクトがインスタンス化された、 <xref:System.Text.RegularExpressions.RegexOptions.Multiline?displayProperty=fullName> オプションそれ以外の場合、この文字クラスはのみと一致する入力文字列の先頭。\)。|  
  
 置換後の文字列 \(`vbCrLf + "$&"` Visual basic で `"\n$&"` C\# の場合\)、一致した文字列の前に新しい行を追加します。 なお `\n` 、c\# では、改行文字としての使用例を解釈、c\# コンパイラ; 正規表現の文字エスケープは表しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startat" /> が、0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="replacement">置換文字列。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。 指定したオプションで、一致操作を変更します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。<paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 静的な `Replace` メソッドは等価の構築に、 <xref:System.Text.RegularExpressions.Regex> 指定した正規表現パターンを持つオブジェクトおよびインスタンス メソッドを呼び出すこと `Replace`します。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。 指定した場合 <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> の `options` パラメーター、一致の検索は、入力文字列の末尾で開始し、左に移動させる。 それ以外の場合、検索は、入力文字列の先頭から開始し、右に移動します。  
  
 `replacement` パラメーターを各一致文字列を置換する文字列を指定 `input`します。`replacement` リテラル テキストの任意の組み合わせから成ると [置換](http://msdn.microsoft.com/ja-jp/d1f52431-1c7d-4dc6-8792-6b988256892e)します。 たとえば、置換パターン `a*${test}b` 文字列を挿入する"、\*"と一致した部分文字列を続けて、 `test` キャプチャ グループが存在する場合、その後に文字列"b"です。 \* 文字を置換パターンではメタ文字ではありません。  
  
> [!NOTE]
>  置換は、置換パターンで認識されている唯一の正規表現言語要素です。 すべての他の正規表現言語要素を含む [文字のエスケープ](http://msdn.microsoft.com/ja-jp/f49cc9cc-db7d-4058-8b8a-422bc08b29b0), 正規表現パターンにのみでは許可、および置換パターンでは認識されません。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 置換操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインの指定されたタイムアウト期間を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません。  
  
 メソッドを返すため `input` が一致しない場合は、変更せずに、行うこともできます、 <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> メソッドが入力文字列に置換を行ったかどうかを決定する方法です。  
  
   
  
## 例  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29> メソッドをローカル ファイルのパスと UNC パスには、ローカルのマシンとドライブの次の名前を置換します。 正規表現を使用して、 <xref:System.Environment.MachineName%2A?displayProperty=fullName> 、ローカル コンピューターの名前を含めるプロパティを <xref:System.Environment.GetLogicalDrives%2A?displayProperty=fullName> メソッドの論理ドライブの名前を追加します。 正規表現の文字列比較結果は、すべてが区別されます。 例を正常に実行するには、ローカル コンピューター名とリテラル文字列"MyMachine"を置き換える必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace4.vb#4)]  
  
 正規表現パターンは、次の式によって定義されます。  
  
 `"\\\\" + Environment.MachineName + "(?:\.\w+)*\\([" + driveNames + "])\$"`  
  
 次の表に、正規表現パターンがどのように解釈されるかを示します。  
  
|パターン|説明|  
|----------|--------|  
|`\\\\`|一致する 2 つの連続する円 \(`\`\) 文字です。 円記号のエスケープ文字として解釈するため、各円記号は、別の円記号でエスケープする必要があります。|  
|`+ Environment.MachineName +`|によって返される文字列と一致、 <xref:System.Environment.MachineName%2A?displayProperty=fullName> プロパティです。|  
|`(?:\.\w+)*`|期間の一致 \(`.`\) 1 つまたは複数の単語文字が後ろに文字です。 0 回以上一致できます。 一致した部分式はキャプチャされません。|  
|`\\`|円記号に一致 \(`\`\) 文字です。|  
|`([" + driveNames + "])`|個々 のドライブ文字で構成される文字クラスと一致します。 この照合は、最初のキャプチャされた部分式です。|  
|`\$`|リテラルのドル記号に一致 \(`$`\) 文字です。|  
  
 置換パターン `$1` 最初のキャプチャされた部分式に一致した文字列全体を置き換えます。 つまり、ドライブ文字を UNC コンピューターおよびドライブ名を置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>This method times out after an interval that is equal to the default time-out value of the application domain in which it is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for replacing a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置換します。 指定したオプションで、一致操作を変更します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。<paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName>メソッドは、次の条件のいずれかが当てはまる場合に正規表現の一致を置き換えるために役立ちます。  
  
-   置換文字列が正規表現置換パターンで簡単に指定できません。  
  
-   置換文字列、一致した文字列に対して実行されるいくつかの処理に起因します。  
  
-   置換文字列の結果は、条件付き処理します。  
  
 メソッドが呼び出しに相当の<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName>メソッドをそれぞれを渡すこと<xref:System.Text.RegularExpressions.Match>で返されたオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションには`evaluator`デリゲートします。  
  
 `pattern`パラメーターは、シンボルに一致する文字列で表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。[.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d)と[Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
 `evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、一致した各文字列を調べる。 カスタム メソッドに次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 カスタム メソッドは、一致した入力を置換する文字列を返します。  
  
 指定した場合<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>の`options`パラメーター、一致の検索は、入力文字列の末尾から開始し、左に移動させるです。 それ以外の場合、検索は、入力文字列の先頭から開始し、右に移動します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException>置換操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインに指定したタイムアウト間隔を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は<xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>例外はスローされません。  
  
 メソッドを返すため`input`一致が存在しない場合は変更されません、行うこともできます、<xref:System.Object.ReferenceEquals%2A?displayProperty=fullName>メソッドが入力文字列に置換を行ったかどうかを調べます。  
  
   
  
## 例  
 次の例は、正規表現を使用して、文字列から個々 の単語を抽出しを使用して、<xref:System.Text.RegularExpressions.MatchEvaluator>という名前のメソッドを呼び出すデリゲートを`WordScramble`単語の個々 の文字にスクランブルをかけることです。 これを行う、`WordScramble`メソッドは、一致している文字を含む配列を作成します。 ランダムな浮動小数点数を設定する並列配列が作成されます。 呼び出すことによって、配列は並べ替えられます、<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=fullName>メソッド、および並べ替えられた配列が引数として提供される、<xref:System.String>クラスのコンス トラクターです。 新しく作成されたこの文字列がによって返されるし、`WordScramble`メソッドです。 正規表現パターン`\w+`1 つ以上の単語文字と一致する正規表現エンジンが単語以外の文字、空白文字などを検出するまでの一致に文字を追加し続けます。 呼び出しの<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドが含まれていますの<xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=fullName>オプションように正規表現パターンでコメント`\w+  # Matches all the characters in a word.`正規表現エンジンでは無視されます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace6.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace6.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string input, class System.Text.RegularExpressions.MatchEvaluator evaluator, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <param name="count">置換を実行する最大回数。</param>
        <param name="startat">入力文字列中で検索を開始する文字位置。</param>
        <summary>指定した入力部分文字列の置換によって返される文字列で正規表現パターンに一致する文字列の場合は、指定した最大数、 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> を委任します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置換するために役立ちます。  
  
-   置換文字列は、正規表現置換パターンで簡単に指定できません。  
  
-   置換文字列に一致した文字列に対して実行される処理によって発生します。  
  
-   置換文字列の結果は、条件付き処理します。  
  
 メソッドが呼び出すことと同じ、 <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.Int32%29?displayProperty=fullName> メソッドを 1 つ目を渡すこと `count`<xref:System.Text.RegularExpressions.Match> 、返されるオブジェクト <xref:System.Text.RegularExpressions.MatchCollection> コレクション、 `evaluator` を委任します。  
  
 正規表現とは、現在のコンス トラクターで定義されたパターン <xref:System.Text.RegularExpressions.Regex> オブジェクトです。  
  
 `evaluator` パラメーターを定義するカスタム メソッドのデリゲートは、一致した各文字列を調べる。 カスタム メソッドには、次のシグネチャと一致する必要があります、 <xref:System.Text.RegularExpressions.MatchEvaluator> を委任します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 カスタム メソッドは、一致する入力を置換する文字列を返します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 置換操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> コンス トラクターです。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作は、アプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合、例外がスローされます。、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 タイムアウトが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合、または <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません  
  
 メソッドを返すため `input` が一致しない場合は、変更せずに、行うこともできます、 <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> メソッドが入力文字列に置換を行ったかどうかを決定する方法です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startat" /> が、0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <altmember cref="T:System.Text.RegularExpressions.MatchEvaluator" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, string replacement, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="replacement" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="replacement">置換文字列。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。 追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。<paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 静的な `Replace` メソッドは等価の構築に、 <xref:System.Text.RegularExpressions.Regex> 指定した正規表現パターンを持つオブジェクトおよびインスタンス メソッドを呼び出すこと `Replace`します。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。 指定した場合 <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> の `options` パラメーター、一致の検索は、入力文字列の末尾で開始し、左に移動させる。 それ以外の場合、検索は、入力文字列の先頭から開始し、右に移動します。  
  
 `replacement` パラメーターを各一致文字列を置換する文字列を指定 `input`します。`replacement` リテラル テキストの任意の組み合わせから成ると [置換](http://msdn.microsoft.com/ja-jp/d1f52431-1c7d-4dc6-8792-6b988256892e)します。 たとえば、置換パターン `a*${test}b` 文字列を挿入する"、\*"と一致した部分文字列を続けて、 `test` キャプチャ グループが存在する場合、その後に文字列"b"です。 \* 文字を置換パターンではメタ文字ではありません。  
  
> [!NOTE]
>  置換は、置換パターンで認識されている唯一の正規表現言語要素です。 すべての他の正規表現言語要素を含む [文字のエスケープ](http://msdn.microsoft.com/ja-jp/f49cc9cc-db7d-4058-8b8a-422bc08b29b0), 正規表現パターンにのみでは許可、および置換パターンでは認識されません。  
  
 `matchTimeout` パラメーターする方法を指定時間、パターン一致メソッドがタイムアウトになるまで、検索するしようとする必要があります。 禁止タイムアウト間隔を設定する入力を処理するときに応答を停止させない過度なバックトラッ キングに依存する正規表現を近い一致が含まれています。 詳細については、[Best Practices for Regular Expressions in the .NET Framework](http://msdn.microsoft.com/ja-jp/618e5afb-3a97-440d-831a-70e4c526a51c) および [Backtracking](http://msdn.microsoft.com/ja-jp/34df1152-0b22-4a1c-a76c-3c28c47b70d8) を参照してください。 メソッドをスローする時間間隔の一致が見つからない場合、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外です。`matchTimeout` メソッドが実行されているアプリケーション ドメインに対して定義されている既定のタイムアウト値を上書きします。  
  
 メソッドを返すため `input` が一致しない場合は、変更せずに、行うこともできます、 <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> メソッドが入力文字列に置換を行ったかどうかを決定する方法です。  
  
   
  
## 例  
 次の例では、 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29> メソッドをローカル ファイルのパスと UNC パスには、ローカルのマシンとドライブの次の名前を置換します。 正規表現を使用して、 <xref:System.Environment.MachineName%2A?displayProperty=fullName> 、ローカル コンピューターの名前を含めるプロパティを <xref:System.Environment.GetLogicalDrives%2A?displayProperty=fullName> メソッドの論理ドライブの名前を追加します。 すべての正規表現文字列比較は、大文字と 0.5 秒間に一致するものが見つからない場合、1 つの置換操作がタイムアウトになります。 例を正常に実行するには、ローカル コンピューター名とリテラル文字列"MyMachine"を置き換える必要があります。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace12.cs#12)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace12.vb#12)]  
  
 The regular expression pattern is defined by the following expression:  
  
 `"\\\\" + Environment.MachineName + "(?:\.\w+)*\\([" + driveNames + "])\$"`  
  
 The following table shows how the regular expression pattern is interpreted.  
  
|Pattern|Description|  
|-------------|-----------------|  
|`\\\\`|Match two consecutive backslash \(`\`\) characters. Because the backslash character is interpreted as the escape character, each backslash must be escaped with another backslash.|  
|`+ Environment.MachineName +`|Match the string that is returned by the <xref:System.Environment.MachineName%2A?displayProperty=fullName> property.|  
|`(?:\.\w+)*`|Match the period \(`.`\) character followed by one or more word characters. This match can occur zero or more times. The matched subexpression is not captured.|  
|`\\`|Match a backslash \(`\`\) character.|  
|`([" + driveNames + "])`|Match the character class that consists of the individual drive letters. This match is the first captured subexpression.|  
|`\$`|Match the literal dollar sign \(`$`\) character.|  
  
 The replacement pattern **languageKeyword tag is not supported!!!!**  
 replaces the entire match with the first captured subexpression. That is, it replaces the UNC machine and drive name with the drive letter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
 または  
  
 <paramref name="matchTimeout" /> が負の値、0、または約 24 日より大きい。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  
  
-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  
  
-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  
  
-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Replace(string input, string pattern, class System.Text.RegularExpressions.MatchEvaluator evaluator, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="evaluator" Type="System.Text.RegularExpressions.MatchEvaluator" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">一致する対象を検索する文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定した入力文字列内で指定した正規表現に一致するすべての部分文字列を、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置換します。 追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</summary>
        <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。<paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName>メソッドは、次の条件のいずれかが当てはまる場合に、正規表現の一致を置き換えるために役立ちます。  
  
-   場合はすぐに、正規表現置換パターンで置換文字列は指定できません。  
  
-   置換文字列結果の場合、一致した文字列の一部の処理が行われます。  
  
-   条件付き処理から結果が置換文字列場合。  
  
 メソッドを呼び出すことと同じ、<xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.RegexOptions%29?displayProperty=fullName>メソッドを渡す各<xref:System.Text.RegularExpressions.Match>、返されたオブジェクト<xref:System.Text.RegularExpressions.MatchCollection>コレクションに、`evaluator`委任します。  
  
 `pattern`シンボルに一致する文字列を記述する正規表現言語要素のパラメーターで構成されます。 正規表現の詳細については、次を参照してください。[.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d)と[Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
 `evaluator`パラメーターを定義するカスタム メソッドのデリゲートは、一致した各文字列を調べる。 カスタム メソッドに次のシグネチャと一致する必要があります、<xref:System.Text.RegularExpressions.MatchEvaluator>を委任します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/syntax1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/syntax1.vb#1)]  
  
 カスタム メソッドは、一致した入力を置換する文字列を返します。  
  
 指定した場合<xref:System.Text.RegularExpressions.RegexOptions.RightToLeft>の`options`パラメーター、一致の検索は、入力文字列の末尾から開始し、左に移動させるです。 それ以外の場合、検索は、入力文字列の先頭から開始し、右に移動します。  
  
 `matchTimeout`パラメーターする方法を指定時間、パターン一致メソッドがタイムアウトになる前に、一致を見つけるを試行します。 正規表現に表示されないように、過度なバックトラッ キングに依存するタイムアウト間隔を設定しないように"の入力を処理するときに応答を停止する近い一致を格納しています。 詳細については、[Best Practices for Regular Expressions in the .NET Framework](http://msdn.microsoft.com/ja-jp/618e5afb-3a97-440d-831a-70e4c526a51c) および [Backtracking](http://msdn.microsoft.com/ja-jp/34df1152-0b22-4a1c-a76c-3c28c47b70d8) を参照してください。 メソッドをスローする時間間隔の一致が見つからない場合、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>例外。`matchTimeout`メソッドが実行されるアプリケーション ドメインに対して定義されている既定のタイムアウト値をオーバーライドします。  
  
 メソッドを返すため`input`一致が存在しない場合が変更されないようにすることができますを使用して、<xref:System.Object.ReferenceEquals%2A?displayProperty=fullName>メソッドが入力文字列に置換を行ったかどうかを調べます。  
  
   
  
## 例  
 次の例は、文字列から個々 の単語を抽出する正規表現を使用しを使用して、<xref:System.Text.RegularExpressions.MatchEvaluator>という名前のメソッドを呼び出すデリゲートを`WordScramble`単語の個々 の文字にスクランブルをかけることです。 これを行う、`WordScramble`メソッドは、一致している文字を含む配列を作成します。 ランダムな浮動小数点数を設定する並列配列が作成されます。 呼び出すことによって、配列は並べ替えられます、<xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=fullName>メソッド、および並べ替えられた配列が引数として提供される、<xref:System.String>クラスのコンス トラクターです。 新しく作成されたこの文字列がによって返されるし、`WordScramble`メソッドです。 正規表現パターン`\w+`1 つ以上の単語文字と一致する正規表現エンジンが単語以外の文字、空白文字などを検出するまでの一致に文字を追加し続けます。 呼び出し、<xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%2CSystem.Text.RegularExpressions.RegexOptions%29>メソッドが含まれています、<xref:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace?displayProperty=fullName>オプションように、正規表現パターン内のコメント`\w+  # Matches all the characters in a word.`正規表現エンジンでは無視されます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Replace\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/cs/replace13.cs#13)]
 [!code-vb[System.Text.RegularExpressions.Regex.Replace\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.replace/vb/replace13.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
 または  
  
 <paramref name="matchTimeout" /> が負の値、0、または約 24 日より大きい。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  
  
-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  
  
-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  
  
-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
        </block>
        <altmember cref="T:System.Text.RegularExpressions.RegexOptions" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public bool RightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Regex.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正規表現が右から左の方向に検索するかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 正規表現が右から左に検索する場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.RightToLeft%2A> `true` 場合、 <xref:System.Text.RegularExpressions.Regex> でインスタンスが作成された、 <xref:System.Text.RegularExpressions.RegexOptions.RightToLeft> オプション。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="roptions">
      <MemberSignature Language="C#" Value="protected System.Text.RegularExpressions.RegexOptions roptions;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly valuetype System.Text.RegularExpressions.RegexOptions roptions" />
      <MemberSignature Language="DocId" Value="F:System.Text.RegularExpressions.Regex.roptions" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用される、 <see cref="T:System.Text.RegularExpressions.Regex" /> によって生成されたオブジェクト、 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">分割対象の文字列。</param>
        <summary>入力文字列で指定された正規表現パターンによって定義される位置にある部分文字列の配列に分割、 <see cref="T:System.Text.RegularExpressions.Regex" /> コンス トラクターです。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> メソッドはのような <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> メソッドの点を除いて、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> 文字のセットではなく正規表現によって決定される区切り記号で文字列を分割します。 文字列は、可能な回数だけ分割します。 区切り記号が見つからない場合、戻り値には、値が元の入力文字列は、1 つの要素が含まれています。  
  
 複数の一致が互いに隣接する場合は、空の文字列は、配列に挿入されます。 たとえば、空の文字列の位置に隣接する 2 つのハイフンは、ここで次のコードに示すように返される配列を 1 つのハイフンで文字列を分割します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split1.vb#1)]  
  
 先頭または入力文字列の末尾に一致するものが見つかった場合は空の文字列は、先頭または返される配列の末尾に記載されています。 次のコードの例では、正規表現パターン `\d+` を数字で入力文字列を分割します。 返される配列の最初と最後の要素の値は、文字列を開始し、一致する文字の数値で終わる、ため <xref:System.String.Empty?displayProperty=fullName>です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split21.cs#21)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split21.vb#21)]  
  
 キャプチャかっこが使用する場合、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> 式のキャプチャされたテキストは、結果の文字列配列に含まれています。 たとえば、"プラム pear"ハイフンでかっこをキャプチャ内に配置される文字列を分割した場合、返される配列にはハイフンを含む文字列の要素が含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split2.vb#2)]  
  
 ただし、正規表現パターンには、キャプチャするためのかっこの複数のセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。 .NET Framework 1.0 および 1.1 では、かっこ、キャプチャするための最初のセット内に一致するものが見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストは、返される配列に含まれません。 以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも返される配列に追加します。 たとえば、次のコードは、日付文字列から、日付の区切り文字を含む日付の要素を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。 キャプチャするためのかっこは、最初のセットは、ハイフンをキャプチャし、2 番目のセットがスラッシュをキャプチャします。 コード例をコンパイルして、.NET Framework 1.0 または 1.1 で実行する場合、スラッシュ文字は含まれませんコンパイルし、.NET Framework 2.0 またはそれ以降のバージョンで実行し、それらが含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split3.vb#3)]  
  
 正規表現が空の文字列を一致する場合 <xref:System.Text.RegularExpressions.Regex.Split%28System.String%29> はすべての場所に空の文字列の区切り記号が見つからないので、一文字文字列の配列に文字列を分割します。 例:  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split11.cs#11)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split11.vb#11)]  
  
 返される配列にも先頭と配列の末尾に空の文字列が含まれることに注意してください。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> コンス トラクターです。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作は、アプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合、例外がスローされます。、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 タイムアウトが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合、または <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">分割する文字列。</param>
        <param name="count">分割を実行する最大回数。</param>
        <summary>指定された正規表現によって定義される位置での部分文字列の配列に分割入力の文字列の場合は、指定した最大回数、 <see cref="T:System.Text.RegularExpressions.Regex" /> コンス トラクターです。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> メソッドはのような <xref:System.String.Split%2A?displayProperty=fullName> メソッドの点を除いて、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> 文字のセットではなく正規表現によって決定される区切り記号で文字列を分割します。`count` パラメーターを指定する部分文字列の最大数、 `input` 文字列を分割することができます。 最後の文字列に分割されていない残りの文字列が含まれています。 A `count` ゼロの値が可能な回数だけ分割の既定の動作を提供します。  
  
 複数の一致が互いに隣接している場合、またはの先頭または末尾で一致が見つかった場合 `input`, と一致する項目数が少なくとも 2 つ未満 `count`, 、配列に空の文字列を挿入します。 一致した部分文字列の equals の数かどうかを決定する際にカウントが隣接する一致、または先頭または入力文字列の末尾に一致する結果を空の文字列は、 `count`です。 次の例では、正規表現で `/d+` を 3 つの部分文字列の最大数に 1 つ以上の 10 進数字を含む入力文字列を分割するために使用します。 配列の最初の要素が含まれていますので、入力文字列の先頭には、正規表現パターンが一致すると、 <xref:System.String.Empty?displayProperty=fullName>, 、英字、入力文字列内の最初のセットを含むファイル、および 3 つ目には、3 番目の一致の直後の文字列の残りの部分が含まれています。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split25.cs#25)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split25.vb#25)]  
  
 正規表現の中かっこのキャプチャを使用している場合は、分割文字列の配列でキャプチャされたテキストが含まれています。 ただし、キャプチャされたテキストを含む配列の要素はカウントされませんを決定する際の一致項目の数に達しているかどうか `count`します。 たとえば、文字列"apple\-アンズ\-プラム\-pear\-banana"最大 7 要素配列では、次のコードとして、次の 4 つの部分文字列結果への分割を示しています。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split4.cs#4)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split4.vb#4)]  
  
 ただし、正規表現パターンには、キャプチャするためのかっこの複数のセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。 .NET Framework 1.0 および 1.1 で返される配列にキャプチャするためのかっこは、最初のセットからキャプチャされたテキストのみが含まれています。 以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストが返される配列に追加します。 ただし、キャプチャされたテキストを含む、返された配列の要素はカウントされませんを決定する際の数に一致した部分文字列があるかどうか `count`します。 たとえばで次のコードでは、正規表現を使用してキャプチャするためのかっこの 2 つのセット日付文字列から日付の要素を抽出します。 キャプチャするためのかっこは、最初のセットは、ハイフンをキャプチャし、2 番目のセットがスラッシュをキャプチャします。 呼び出し、 <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> メソッドが返される配列にし、2 つの要素の最大値を指定します。 サンプル コードがコンパイルされ、.NET Framework 1.0 または 1.1 での実行、メソッドは 2 つの要素の文字列配列を返します。 コンパイルされて、.NET Framework 2.0 またはそれ以降のバージョンで実行された場合は、3 要素の文字列配列を返します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split5.cs#5)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split5.vb#5)]  
  
 正規表現が空の文字列を一致する場合 <xref:System.Text.RegularExpressions.Regex.Split%28System.String%2CSystem.Int32%29> はすべての場所に空の文字列の区切り記号が見つからないので、一文字文字列の配列に文字列を分割します。 次の例は、多くの要素が入力文字列中のために文字列「文字」を分割します。 Null 文字列が入力文字列の先頭に一致するため、null 文字列が返される配列の先頭に挿入されます。 これは、入力文字列の末尾の 2 つの文字で構成される 10 番目の要素です。  
  
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split12.vb#12)]  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> コンス トラクターです。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作は、アプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合、例外がスローされます。、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 タイムアウトが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合、または <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">分割対象の文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <summary>正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> メソッドはのような <xref:System.String.Split%2A?displayProperty=fullName> メソッドの点を除いて、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> 文字のセットではなく正規表現によって決定される区切り記号で文字列を分割します。`input` 文字列は、可能な回数だけ分割します。 場合 `pattern` に格納されていない、 `input` 文字列、戻り値には 1 つの要素、元の値にはが含まれています `input` 文字列。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
> [!IMPORTANT]
>  コンパイルされる正規表現を静的に呼び出しで使用される <xref:System.Text.RegularExpressions.Regex.Split%2A> メソッドは自動的にキャッシュします。 コンパイルされた正規表現の有効期間を自分で管理するには、インスタンスを使用する <xref:System.Text.RegularExpressions.Regex.Split%2A> メソッドです。  
  
 複数の一致が互いに隣接する場合は、空の文字列は、配列に挿入されます。 たとえば、空の文字列の位置に隣接する 2 つのハイフンは、ここで次のコードに示すように返される配列を 1 つのハイフンで文字列を分割します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split8.cs#8)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split8.vb#8)]  
  
 先頭または入力文字列の末尾に一致するものが見つかった場合は空の文字列は、先頭または返される配列の末尾に記載されています。 次のコードの例では、正規表現パターン `\d+` を数字で入力文字列を分割します。 返される配列の最初と最後の要素の値は、文字列を開始し、一致する文字の数値で終わる、ため <xref:System.String.Empty?displayProperty=fullName>です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split22.cs#22)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split22.vb#22)]  
  
 キャプチャかっこが使用する場合、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> 式のキャプチャされたテキストは、結果の文字列配列に含まれています。 たとえば、"プラム pear"ハイフンでかっこをキャプチャ内に配置される文字列を分割した場合、返される配列にはハイフンを含む文字列の要素が含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 ただし、正規表現パターンには、キャプチャするためのかっこの複数のセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。 .NET Framework 1.0 および 1.1 では、かっこ、キャプチャするための最初のセット内に一致するものが見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストは、返される配列に含まれません。 以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも返される配列に追加します。 たとえば、次のコードは、日付文字列から、日付の区切り文字を含む日付の要素を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。 キャプチャするためのかっこは、最初のセットは、ハイフンをキャプチャし、2 番目のセットがスラッシュをキャプチャします。 コード例をコンパイルして、.NET Framework 1.0 または 1.1 で実行する場合、スラッシュ文字は含まれませんコンパイルし、.NET Framework 2.0 またはそれ以降のバージョンで実行し、それらが含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 正規表現が空の文字列を一致する場合 <xref:System.Text.RegularExpressions.Regex.Split%2A> はすべての場所に空の文字列の区切り記号が見つからないので、一文字文字列の配列に文字列を分割します。 例:  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split13.cs#13)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split13.vb#13)]  
  
 返される配列にも先頭と配列の末尾に空の文字列が含まれることに注意してください。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインの指定されたタイムアウト期間を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>This method times out after an interval that is equal to the default time-out value of the application domain in which the method is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for splitting text on a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string input, int count, int startat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string input, int32 count, int32 startat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="startat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">分割する文字列。</param>
        <param name="count">分割を実行する最大回数。</param>
        <param name="startat">入力文字列中で検索を開始する文字位置。</param>
        <summary>指定された正規表現によって定義される位置での部分文字列の配列に分割入力の文字列の場合は、指定した最大回数、 <see cref="T:System.Text.RegularExpressions.Regex" /> コンス トラクターです。 正規表現パターンの検索は、入力文字列の指定した文字位置から開始します。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> メソッドはのような <xref:System.String.Split%2A?displayProperty=fullName> メソッドの点を除いて、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> 文字のセットではなく正規表現によって決定される区切り記号で文字列を分割します。`count` パラメーターを指定する部分文字列の最大数、 `input` 文字列の分割\]; 最後の文字列に分割されていない残り文字列にはが含まれています。 A `count` ゼロの値が可能な回数だけ分割の既定の動作を提供します。`startat` パラメーターは、最初の区切り記号の検索を開始するポイントを定義します \(先頭の空白をスキップするためこの使用できます\)。  
  
 一致が見つからない場合、 `count`\+1 が、文字列内で位置、メソッドを含む 1 つの要素の配列を返します、 `input` 文字列。 1 つまたは複数の一致が見つかった場合、返される配列の最初の要素には、一致の前に、の 1 つの文字までの最初の文字から文字列の最初の部分が含まれています。  
  
 複数の一致が互いに隣接するいると、検索された一致項目の数が少なくとも 2 つ未満 `count`, 、配列に空の文字列を挿入します。 同様で一致が見つかった場合 `startat`, 、文字列内の最初の文字は、返される配列の最初の要素は空の文字列です。 一致した部分文字列の equals の数かどうかを決定する際にカウントが隣接する一致から作成される空の文字列は、 `count`です。 次の例では、正規表現で `\d+` 、文字列内の文字の最初の部分文字列の開始位置を検索するために使用し、文字列の最大値を分割する、その位置にある 3 回開始します。 正規表現パターンには、入力文字列の先頭が一致すると、ので、返される文字列の配列が空の文字列、5 文字の英数字文字列および文字列の残りの部分の構成します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split26.cs#26)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split26.vb#26)]  
  
 正規表現の中かっこのキャプチャを使用している場合は、分割文字列の配列でキャプチャされたテキストが含まれています。 ただし、キャプチャされたテキストを含む配列の要素はカウントされませんを決定する際の一致項目の数に達しているかどうか `count`します。 たとえば、文字列の分割 ' 最大で 4 回に"apple\-apricot\-plum\-pear\-pomegranate\-pineapple\-peach"の部分文字列を開始位置として文字 15 7 要素の配列では、文字列結果の次のコードに示すようにします。  
  
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split6.vb#6)]  
  
 ただし、正規表現パターンには、キャプチャするためのかっこの複数のセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。 .NET Framework 1.0 および 1.1 は、かっこをキャプチャするための最初のセット内に一致するものが見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストは、返される配列に含まれません。 以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも返される配列に追加します。 たとえば、次のコードは、文字列内の個々 の単語を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。 キャプチャするためのかっこは、最初のセットは、ハイフンをキャプチャし、2 番目のセットは、垂直バーをキャプチャします。 このコード例をコンパイルして、.NET Framework 1.0 または 1.1 で実行する場合、垂直は含まれませんバーの文字です。コンパイルし、.NET Framework 2.0 またはそれ以降のバージョンで実行し、それらが含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split7.cs#7)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split7.vb#7)]  
  
 正規表現が空の文字列を一致する場合 <xref:System.Text.RegularExpressions.Regex.Split%2A> はすべての場所に空の文字列の区切り記号が見つからないので、一文字文字列の配列に文字列を分割します。 次の例では、入力文字列が含まれる文字で始まる数の要素に「文字」という文字列を分割"a"です。 Null 文字列では、入力文字列の末尾と一致する、null 文字列が返される配列の末尾に挿入されます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split14.cs#14)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split14.vb#14)]  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間が指定されたタイムアウト間隔を超えた場合に例外がスローされます、 <xref:System.Text.RegularExpressions.Regex.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.TimeSpan%29?displayProperty=fullName> コンス トラクターです。 コンス トラクターを呼び出すときにタイムアウト間隔を設定しない場合、操作は、アプリケーション ドメイン用に確立された任意のタイムアウト値を超えた場合、例外がスローされます。、 <xref:System.Text.RegularExpressions.Regex> オブジェクトを作成します。 タイムアウトが定義されていない場合、 <xref:System.Text.RegularExpressions.Regex> コンス トラクターの呼び出しまたはアプリケーション ドメインのプロパティでは、タイムアウト値がある場合、または <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startat" /> が、0 未満か、<paramref name="input" /> の長さを超えています。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
      </Parameters>
      <Docs>
        <param name="input">分割対象の文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <summary>指定された正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。 指定したオプションで、一致操作を変更します。</summary>
        <returns>文字列の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> メソッドはのような <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> メソッドの点を除いて、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> 文字のセットではなく正規表現によって決定される区切り記号で文字列を分割します。 文字列は、可能な回数だけ分割します。 戻り値が 1 つの要素を元の値を格納区切り記号が見つからない場合 `input` 文字列。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
> [!IMPORTANT]
>  コンパイルされる正規表現を静的に呼び出しで使用される <xref:System.Text.RegularExpressions.Regex.Split%2A> メソッドは自動的にキャッシュします。 コンパイルされた正規表現の有効期間を自分で管理するには、インスタンスを使用する <xref:System.Text.RegularExpressions.Regex.Split%2A> メソッドです。  
  
 複数の一致が互いに隣接する場合は、空の文字列は、配列に挿入されます。 たとえば、1 つのハイフンで文字列を分割は、返される配列に空の文字列を隣接する 2 つのハイフンが検出された位置に含めるです。  
  
 先頭または入力文字列の末尾に一致するものが見つかった場合は空の文字列は、先頭または返される配列の末尾に記載されています。 次のコードの例では、正規表現パターン `[a-z]+` 、大文字または小文字のアルファベット文字で、入力文字列を分割します。 返される配列の最初と最後の要素の値は、文字列は、開始され、アルファベットの文字の照合で終了、ため <xref:System.String.Empty?displayProperty=fullName>です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split24.cs#24)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split24.vb#24)]  
  
 キャプチャかっこが使用する場合、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> 式のキャプチャされたテキストは、結果の文字列配列に含まれています。 たとえば、"プラム pear"ハイフンでかっこをキャプチャ内に配置される文字列を分割した場合、返される配列にはハイフンを含む文字列の要素が含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 ただし、正規表現パターンには、キャプチャするためのかっこの複数のセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。 .NET Framework 1.0 および 1.1 では、かっこ、キャプチャするための最初のセット内に一致するものが見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストは、返される配列に含まれません。 以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも返される配列に追加します。 たとえば、次のコードは、日付文字列から、日付の区切り文字を含む日付の要素を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。 キャプチャするためのかっこは、最初のセットは、ハイフンをキャプチャし、2 番目のセットがスラッシュをキャプチャします。 コード例をコンパイルして、.NET Framework 1.0 または 1.1 で実行する場合、スラッシュ文字は含まれませんコンパイルし、.NET Framework 2.0 またはそれ以降のバージョンで実行し、それらが含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 正規表現が空の文字列を一致する場合 <xref:System.Text.RegularExpressions.Regex.Split%2A> はすべての場所に空の文字列の区切り記号が見つからないので、一文字文字列の配列に文字列を分割します。  
  
 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> Split 操作の実行時間が、メソッドが呼び出されますアプリケーション ドメインの指定されたタイムアウト期間を超えた場合に例外がスローされます。 アプリケーション ドメインのプロパティでは、タイムアウトが定義されていない場合、またはタイムアウト値は <xref:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout?displayProperty=fullName>, 、例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>This method times out after an interval that is equal to the default time-out value of the application domain in which the method is called. If a time-out value has not been defined for the application domain, the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents the method from timing out, is used. The recommended static method for splitting text on a pattern match is <see cref="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />, which lets you set the time-out interval.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string input, string pattern, System.Text.RegularExpressions.RegexOptions options, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] Split(string input, string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="input">分割対象の文字列。</param>
        <param name="pattern">一致させる正規表現パターン。</param>
        <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
        <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
        <summary>指定された正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。 追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</summary>
        <returns>文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> メソッドはのような <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=fullName> メソッドの点を除いて、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> 文字のセットではなく正規表現によって決定される区切り記号で文字列を分割します。 文字列は、可能な回数だけ分割します。 戻り値が 1 つの要素を元の値を格納区切り記号が見つからない場合 `input` 文字列。  
  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
> [!IMPORTANT]
>  コンパイルされる正規表現を静的に呼び出しで使用される <xref:System.Text.RegularExpressions.Regex.Split%2A> メソッドは自動的にキャッシュします。 コンパイルされた正規表現の有効期間を自分で管理するには、インスタンスを使用する <xref:System.Text.RegularExpressions.Regex.Split%2A> メソッドです。  
  
 複数の一致が互いに隣接する場合は、空の文字列は、配列に挿入されます。 たとえば、1 つのハイフンで文字列を分割は、返される配列に空の文字列を隣接する 2 つのハイフンが検出された位置に含めるです。  
  
 先頭または入力文字列の末尾に一致するものが見つかった場合は空の文字列は、先頭または返される配列の末尾に記載されています。 次のコードの例では、正規表現パターン `[a-z]+` 、大文字または小文字のアルファベット文字で、入力文字列を分割します。 返される配列の最初と最後の要素の値は、文字列は、開始され、アルファベットの文字の照合で終了、ため <xref:System.String.Empty?displayProperty=fullName>です。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split23.cs#23)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split23.vb#23)]  
  
 キャプチャかっこが使用する場合、 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=fullName> 式のキャプチャされたテキストは、結果の文字列配列に含まれています。 たとえば、"プラム pear"ハイフンでかっこをキャプチャ内に配置される文字列を分割した場合、返される配列にはハイフンを含む文字列の要素が含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split9.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split9.vb#9)]  
  
 ただし、正規表現パターンには、キャプチャするためのかっこの複数のセットが含まれている場合、このメソッドの動作は、.NET Framework のバージョンに依存します。 .NET Framework 1.0 および 1.1 では、かっこ、キャプチャするための最初のセット内に一致するものが見つからない場合、追加のキャプチャのかっこからキャプチャされたテキストは、返される配列に含まれません。 以降、.NET Framework 2.0 では、すべてのキャプチャされたテキストも返される配列に追加します。 たとえば、次のコードは、日付文字列から、日付の区切り文字を含む日付の要素を抽出するのにキャプチャするためのかっこの 2 つのセットを使用します。 キャプチャするためのかっこは、最初のセットは、ハイフンをキャプチャし、2 番目のセットがスラッシュをキャプチャします。 コード例をコンパイルして、.NET Framework 1.0 または 1.1 で実行する場合、スラッシュ文字は含まれませんコンパイルし、.NET Framework 2.0 またはそれ以降のバージョンで実行し、それらが含まれます。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Split\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/cs/split10.cs#10)]
 [!code-vb[System.Text.RegularExpressions.Regex.Split\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Regex.Split/vb/split10.vb#10)]  
  
 正規表現が空の文字列を一致する場合 <xref:System.Text.RegularExpressions.Regex.Split%2A> はすべての場所に空の文字列の区切り記号が見つからないので、一文字文字列の配列に文字列を分割します。  
  
 `matchTimeout` パラメーターする方法を指定時間、パターン一致メソッドがタイムアウトになるまで、検索するしようとする必要があります。 禁止タイムアウト間隔を設定する入力を処理するときに応答を停止させない過度なバックトラッ キングに依存する正規表現を近い一致が含まれています。 詳細については、[Best Practices for Regular Expressions in the .NET Framework](http://msdn.microsoft.com/ja-jp/618e5afb-3a97-440d-831a-70e4c526a51c) および [Backtracking](http://msdn.microsoft.com/ja-jp/34df1152-0b22-4a1c-a76c-3c28c47b70d8) を参照してください。 メソッドをスローする時間間隔の一致が見つからない場合、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 例外です。`matchTimeout` メソッドが実行されているアプリケーション ドメインに対して定義されている既定のタイムアウト値を上書きします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
 または  
  
 <paramref name="matchTimeout" /> が負の値、0、または約 24 日より大きい。</exception>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
        <block subset="none" type="usage">
          <para>We recommend that you set the <paramref name="matchTimeout" /> parameter to an appropriate value, such as two seconds. If you disable time-outs by specifying <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, the regular expression engine offers slightly better performance. However, you should disable time-outs only under the following conditions:  
  
-   When the input processed by a regular expression is derived from a known and trusted source or consists of static text. This excludes text that has been dynamically input by users.  
  
-   When the regular expression pattern has been thoroughly tested to ensure that it efficiently handles matches, non-matches, and near matches.  
  
-   When the regular expression pattern contains no language elements that are known to cause excessive backtracking when processing a near match.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">シリアル化情報が設定されるオブジェクト。</param>
        <param name="context">シリアル化データを格納および取得する場所。 このパラメーターは、今後使用するために予約されています。</param>
        <summary>
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、現在の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトの逆シリアル化に必要なデータを入力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>渡された正規表現パターンを返す、 <see langword="Regex" /> コンス トラクターです。</summary>
        <returns>
          <paramref name="pattern" /> に渡されたパラメーター、 <see langword="Regex" /> コンス トラクターです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `pattern` パラメーターは、文字列と一致するシンボルで表す正規表現言語要素で構成されます。 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d) と [Regular Expression Language Elements](http://msdn.microsoft.com/ja-jp/930653a6-95d2-4697-9d5a-52d11bb6fd4c)です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="T:System.Text.RegularExpressions.Regex" /> is the base class of regular expressions created by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method. These compiled regular expressions use the <see cref="M:System.Text.RegularExpressions.Regex.ToString" /> implementation of the base class. If called from a derived class, the <see cref="M:System.Text.RegularExpressions.Regex.ToString" /> method returns the string that was passed to the <paramref name="pattern" /> parameter of the <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> class constructor that was used to define the regular expression.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Unescape">
      <MemberSignature Language="C#" Value="public static string Unescape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Unescape(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.Unescape(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">変換対象のテキストを含んでいる入力文字列。</param>
        <summary>入力文字列内に含まれるエスケープされた文字を変換します。</summary>
        <returns>エスケープされた文字を含む文字列を、エスケープされていない形式に変換したもの。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.Unescape%2A> メソッドでは、次の 2 つの変換のいずれかを実行します。  
  
-   によって実行される変換を元に戻します、 <xref:System.Text.RegularExpressions.Regex.Escape%2A> の各文字のエスケープ文字 \(「\\」\) を削除することでメソッドがメソッドによってエスケープされます。 含まれます、\\、\*、\+、?、&#124;、{、\[、\(、\)、^、$、.、\#、および空白文字。 さらに、 <xref:System.Text.RegularExpressions.Regex.Unescape%2A> メソッドは、閉じ角かっこ \(\]\) を閉じたり、中かっこ \(}\) の文字をエスケープしないためです。  
  
> [!NOTE]
>  <xref:System.Text.RegularExpressions.Regex.Unescape%2A> 正確な文字はエスケープされたを推定できないため、エスケープ後の文字列を完全に取り消すことはできません。  
  
-   文字自体を印刷できない文字の表現を置き換えます。 たとえば、\\a \\x07 を置き換えます。 置換文字表現とは、\\a、\\b、\\e、\\n、\\r、\\f、\\t、および \\v です。  
  
 場合、 <xref:System.Text.RegularExpressions.Regex.Unescape%2A> メソッドには、変換できない場合、その他のエスケープ シーケンスが発生したをスロー \\w \\s など、 <xref:System.ArgumentException>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" /> 認識されないエスケープ シーケンスが含まれます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Escape(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UseOptionC">
      <MemberSignature Language="C#" Value="protected bool UseOptionC ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool UseOptionC() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.UseOptionC" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用される、 <see cref="T:System.Text.RegularExpressions.Regex" /> によって生成されたオブジェクト、 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドです。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティを含む、 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> オプションです。 それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseOptionR">
      <MemberSignature Language="C#" Value="protected bool UseOptionR ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool UseOptionR() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.UseOptionR" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用される、 <see cref="T:System.Text.RegularExpressions.Regex" /> によって生成されたオブジェクト、 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドです。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティを含む、 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> オプションです。 それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateMatchTimeout">
      <MemberSignature Language="C#" Value="protected static void ValidateMatchTimeout (TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblystatic hidebysig void ValidateMatchTimeout(valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="matchTimeout">チェックするタイムアウト間隔。</param>
        <summary>タイムアウト間隔が許容範囲内にあるかどうかを確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Matches">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>入力文字列内で正規表現と一致する対象をすべて検索し、見つかった対象をすべて返します。</summary>
        <block subset="none" type="usage">
          <para>呼び出して、一致する試行が繰り返された場合、 <see cref="Overload:System.Text.RegularExpressions.Regex.Matches" /> メソッド、正規表現エンジンは、空一致特別な処理です。 通常、正規表現エンジンは、正確に前回の一致が中断した次の一致項目の検索を開始します。 ただし、空の一致の後次の一致を試みる前に正規表現エンジンは 1 文字ずつ進みます。 この動作は、正規表現エンジンはその文字列を進行状況のことを保証します。 それ以外の場合、空一致が、前方移動に含まれていないため、前回とまったく同じ場所には次の一致項目を開始し、同じ空の文字列を繰り返しに一致とします。  
  
 次の例では、正規表現パターンで <c>a*</c> の文字の 0 個以上の繰り返しを検索文字列"abaabb"の"a"です。 その結果、例から出力として <see cref="T:System.Text.RegularExpressions.MatchCollection" /> オブジェクトでは、6 つ含まれています <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトです。 初回の一致を検索最初の"a"です。 正確に 1 つ目が終了すると、最初の b の前に一致する 2 番目の一致が起動これは、"a"の 0 回の出現を検索して、空の文字列を返します。 3 番目の一致始まらない正確に 2 番目の一致の終了位置、2 番目の一致には、空の文字列が返されるためです。 代わりに、その後、最初の"b"に 1 つの文字を開始します。 3 番目の一致では、"a"の 2 回の出現を検索して、"aa"を返します。 4 番目の一致する試みが 2 つ目"b"の前に、3 番目の一致の終了位置を開始し、空の文字列を返します。 5 番目の一致する試行は、3 番目の"b"の前に開始し、空の文字列を返すように、1 文字をもう一度進みます。 6 番目の一致では、最後の"b"の後から開始し、もう一度、空の文字列を返します。  
  
 [!code-csharp[System.Text.RegularExpressions.Regex.Matches\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/cs/emptymatches1.cs#9)]
 [!code-vb[System.Text.RegularExpressions.Regex.Matches\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regex.matches/vb/emptymatches1.vb#9)]</para>
        </block>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した入力文字列内には、指定した置換文字列の正規表現パターンに一致する文字列を置換します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>正規表現パターンに一致して、1 つとして最初に出現する部分文字列が入力文字列を検索 <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトです。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CompileToAssembly">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>正規表現をコンパイルして、ディスク上の単一のアセンブリに保存します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsMatch">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>正規表現と一致する対象が入力文字列内で見つかったかどうかを示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Split">
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>正規表現の一致箇所によって定義される位置で、入力文字列を部分文字列の配列に分割します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>