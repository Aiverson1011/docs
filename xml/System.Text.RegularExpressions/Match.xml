<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>1 回の正規表現検索に一致した結果を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Text.RegularExpressions.Match> object is immutable and has no public constructor. An instance of the <xref:System.Text.RegularExpressions.Match> class is returned by the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> method and represents the first pattern match in a string. Subsequent matches are represented by <xref:System.Text.RegularExpressions.Match> objects returned by the <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method. In addition, a <xref:System.Text.RegularExpressions.MatchCollection> object that consists of zero, one, or more <xref:System.Text.RegularExpressions.Match> objects is returned by the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method.  
  
 If the <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=fullName> method fails to match a regular expression pattern in an input string, it returns an empty <xref:System.Text.RegularExpressions.MatchCollection> object. You can then use a **languageKeyword tag is not supported!!!!**  
 construct in C\# or a **languageKeyword tag is not supported!!!!**  
 construct in Visual Basic to iterate the collection.  
  
 If the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> method fails to match the regular expression pattern, it returns a <xref:System.Text.RegularExpressions.Match> object that is equal to <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=fullName>. You can use the <xref:System.Text.RegularExpressions.Group.Success%2A> property to determine whether the match was successful. The following example provides an illustration.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 If a pattern match is successful, the <xref:System.Text.RegularExpressions.Capture.Value%2A> property contains the matched substring, the <xref:System.Text.RegularExpressions.Capture.Index%2A> property indicates the zero\-based starting position of the matched substring in the input string, and the <xref:System.Text.RegularExpressions.Capture.Length%2A> property indicates the length of matched substring in the input string.  
  
 Because a single match can involve multiple capturing groups, <xref:System.Text.RegularExpressions.Match> has a <xref:System.Text.RegularExpressions.Match.Groups%2A> property that returns the <xref:System.Text.RegularExpressions.GroupCollection>. The <xref:System.Text.RegularExpressions.Match> instance itself is equivalent to the first object in the collection, at `Match.Groups[0]` \(`Match.Groups(0)` in Visual Basic\), which represents the entire match. You can access the captured groups in a match in the following ways:  
  
-   You can iterate the members of the <xref:System.Text.RegularExpressions.GroupCollection> object  by using a **languageKeyword tag is not supported!!!!**  
     \(C\#\) or **languageKeyword tag is not supported!!!!**  
     \(Visual Basic\) construct.  
  
-   You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=fullName> property to retrieve groups by the number of the capturing group. Note that you can determine which numbered groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=fullName> method.  
  
-   You can use the <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=fullName> property to retrieve groups by the name of the capturing group. Note that you can determine which named groups are present in a regular expression by calling the instance <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=fullName> method.  
  
   
  
## 例  
 The following examples use the regular expression **languageKeyword tag is not supported!!!!**  
. The regular expression is interpreted as follows:  
  
|||  
|-|-|  
|Console\\.Write|Match the string "Console.Write". Note that the "." character is escaped so that it is interpreted as a literal period rather than as a wildcard that matches any character.|  
|\(Line\)?|Match zero or one occurrence of the string "Line".|  
  
 **Example 1**  
  
 The following example calls the <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=fullName> method to retrieve all pattern matches in an input string. It then iterates the <xref:System.Text.RegularExpressions.Match> objects in the returned <xref:System.Text.RegularExpressions.MatchCollection> object to display information about each match.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **Example 2**  
  
 The following example calls the <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> and <xref:System.Text.RegularExpressions.Match.NextMatch%2A> methods to retrieve one match at a time.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>空のグループを取得します。 一致する対象が見つからなかった検索は、この空一致を返します。</summary>
        <value>空一致。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This property should not be used to determine if a match is successful. Instead, use the **languageKeyword tag is not supported!!!!**  
 property \(which is inherited from <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName>\).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正規表現に一致したグループのコレクションを取得します。</summary>
        <value>パターンに一致した文字グループ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 正規表現パターンでは、正規表現パターンの一部をかっこで囲んでで定義されている部分式を含めることができます。 このようなすべての部分式は、グループを形成します。<xref:System.Text.RegularExpressions.Match.Groups%2A> プロパティは、これらの部分文字列に関する情報へのアクセスを提供します。 たとえば、正規表現パターン `(\d{3})-(\d{3}-\d{4})`, 、2 つの部分式を持つ北アメリカの電話番号に一致します。 1 つ目は、市外局番を表し、電話番号の最初の 3 つの桁で構成されます。 このグループは正規表現の最初の部分によってキャプチャされた `(\d{3})`します。2 つ目は、独立した電話番号を表し、電話番号の最後の 7 桁の数字で構成されます。 このグループは正規表現の 2 番目の部分によってキャプチャされた `(\d{3}-\d{4})`します。 これら 2 つのグループから取得できます、 <xref:System.Text.RegularExpressions.GroupCollection> によって返されるオブジェクト、 <xref:System.Text.RegularExpressions.Match.Groups%2A> プロパティは、次の例のようにです。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 <xref:System.Text.RegularExpressions.GroupCollection> によって返されるオブジェクト、 <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=fullName> プロパティは常に少なくとも 1 つのメンバーには、0 から始まるコレクション オブジェクトです。 正規表現エンジンは、特定の入力文字列に一致するを見つけられない場合、 <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=fullName> 1 つのプロパティ <xref:System.Text.RegularExpressions.Group> \(インデックス 0 位置にあるオブジェクト\) のコレクション内のオブジェクトに設定されている `false` と <xref:System.Text.RegularExpressions.Group> オブジェクトの <xref:System.Text.RegularExpressions.Capture.Value%2A> にプロパティが設定されている <xref:System.String.Empty?displayProperty=fullName>します。 かどうか、正規表現エンジンが一致の先頭の要素を見つけることができます、 <xref:System.Text.RegularExpressions.GroupCollection> によって返されるオブジェクト \(インデックス 0 位置にある要素\)、 <xref:System.Text.RegularExpressions.Match.Groups%2A> プロパティには、正規表現パターンに一致する文字列が含まれています。 後続の各要素のインデックスから上を表しますキャプチャ グループに、正規表現では、キャプチャ グループが含まれる場合。 詳細については、の「グループ化構成体および正規表現オブジェクト」を参照してください、 [Grouping Constructs in Regular Expressions](http://msdn.microsoft.com/ja-jp/0fc18634-f590-4062-8d5c-f0b71abe405b) 記事です。  
  
   
  
## 例  
 次の例は、文字列の例に対して、正規表現パターン一致を試みます。 例では、 <xref:System.Text.RegularExpressions.Match.Groups%2A> 、コンソールに表示するための一致箇所によって取得される情報を格納するプロパティです。  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures\#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures\#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一致する対象が最後に見つかった位置の終了位置 \(最後に一致した文字の後の文字\) から開始して、次に一致する対象を検索した結果の新しい <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトを返します。</summary>
        <returns>次の正規表現一致。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出すことは <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=fullName> 再度と受け渡し \(`Index+Length`\) として、新しい開始位置。  
  
> [!NOTE]
>  このメソッドは、現在のインスタンスを変更しません。 代わりに、新しい返します <xref:System.Text.RegularExpressions.Match> 次の一致項目に関する情報を含むオブジェクト。  
  
 スローする可能性が次の一致項目を取得しようとすると、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> かどうか、照合操作のタイムアウト値で設定されており、次に一致を検索しようとすると、そのタイムアウト間隔を超えています。  
  
   
  
## 例  
 次の例では、 <xref:System.Text.RegularExpressions.Match.NextMatch%2A> 正規表現を取得するメソッドが最初の一致を超えると一致します。  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures\#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures\#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。</exception>
        <block subset="none" type="usage">
          <para>When a match attempt is repeated by calling the <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> method, the regular expression engine gives empty matches special treatment. Usually, <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> begins the search for the next match exactly where the previous match left off. However, after an empty match, the <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> method advances by one character before trying the next match. This behavior guarantees that the regular expression engine will progress through the string. Otherwise, because an empty match does not result in any forward movement, the next match would start in exactly the same place as the previous match, and it would match the same empty string repeatedly.  
  
 The following example provides an illustration. The regular expression pattern <c>a*</c> searches for zero or more occurrences of the letter "a" in the string "abaabb". As the output from the example shows, the search finds six matches. The first match attempt finds the first "a". The second match starts exactly where the first match ends, before the first b; it finds zero occurrences of "a" and returns an empty string. The third match does not begin exactly where the second match ended, because the second match returned an empty string. Instead, it begins one character later, after the first "b". The third match finds two occurrences of "a" and returns "aa". The fourth match attempt begins where the third match ended, before the second "b", and returns an empty string. The fifth match attempt again advances one character so that it begins before the third "b" and returns an empty string. The sixth match begins after the last "b" and returns an empty string again.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">使用する置換パターン。</param>
        <summary>指定された置換パターンを展開して返します。</summary>
        <returns>
          <paramref name="replacement" /> パラメーターの展開形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一方、 <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=fullName> メソッドは、入力文字列内のすべての一致を指定された置換パターンでは、置換、 <xref:System.Text.RegularExpressions.Match.Result%2A> メソッドは、指定された置換パターンで、単一の一致を置き換えます。 個々 の一致を操作するためを呼び出す前に、一致した文字列に対して処理を実行することはまた、 <xref:System.Text.RegularExpressions.Match.Result%2A> メソッドです。  
  
 `replacement` パラメーターは、標準の正規表現置換パターン。 リテラル文字および正規表現の置換の構成することができます。 詳細については、「[Substitutions](http://msdn.microsoft.com/ja-jp/d1f52431-1c7d-4dc6-8792-6b988256892e)」を参照してください。  
  
   
  
## 例  
 次の例は、開始し、終了かっこ付きのかっこで囲まれた式をハイフンに置き換えます。  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 この正規表現パターン `--(.+?)--` の解釈を次の表に示します。  
  
|パターン|説明|  
|----------|--------|  
|`--`|2 つのハイフンと一致します。|  
|`(.+?)`|1 つまたは複数回できるだけが、できるだけ少ない回数を任意の文字に一致します。 これが最初のキャプチャ グループです。|  
|`--`|2 つのハイフンと一致します。|  
  
 正規表現パターン `--(.+?)--` 最短一致の量指定子を使用して `+?`します。 場合、最長一致の量化子 `+` 使用された代わりに、正規表現エンジンは、入力文字列内の単一の一致のみを検索です。  
  
 置換文字列 `($1)` 一致をかっこで囲まれた最初のキャプチャ グループに置き換えます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="replacement" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">このパターンは、拡張することはできません。</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" />
      </Parameters>
      <Docs>
        <param name="inner">要求する一致と等価の正規表現一致。</param>
        <summary>指定されたオブジェクトと等価であり、かつ複数のスレッド間での共有に適した <see cref="T:System.Text.RegularExpressions.Match" /> インスタンスを返します。</summary>
        <returns>複数のスレッド間での共有に適した正規表現一致。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inner" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>