<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>使用してスタンドアロンのアセンブリの正規表現をコンパイルする正規表現について説明します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 配列 <xref:System.Text.RegularExpressions.RegexCompilationInfo> にオブジェクトが渡される、 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> メソッド、アセンブリに含まれる各正規表現に関する情報を提供します。 アセンブリに含まれているコンパイル済みの各正規表現から派生したクラスとして表されます。 <xref:System.Text.RegularExpressions.Regex>します。 プロパティ、 <xref:System.Text.RegularExpressions.RegexCompilationInfo> 型は、正規表現のクラス名、完全修飾名 \(つまり、その名前空間、型の名前\)、その正規表現パターン、\(かどうか、正規表現は小文字を区別しない\) などその他のオプションおよび正規表現エンジンは、一致を検索する時間で指定されたタイムアウト期間を定義します。  
  
 インスタンスを作成できる、 <xref:System.Text.RegularExpressions.RegexCompilationInfo> クラスをオーバー ロードされたコンス トラクターを呼び出すことによってオブジェクトです。  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">コンパイルする正規表現。</param>
        <param name="options">正規表現をコンパイルするときに使用する正規表現のオプションです。</param>
        <param name="name">コンパイルされた正規表現を表す型の名前。</param>
        <param name="fullnamespace">新しい型が属する名前空間。</param>
        <param name="ispublic">
          <see langword="true" /> コンパイル済みの正規表現をパブリックに表示されるようにするにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> アセンブリに含まれる正規表現に関する情報を含むクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各パラメーター、 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> コンス トラクターは、のプロパティに直接対応して、 <xref:System.Text.RegularExpressions.RegexCompilationInfo> クラスです。 すべてのプロパティは読み取り\/書き込みであるため、その値が直接割り当てられるもことができます。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> メソッドは、コンパイルされた正規表現を格納するアセンブリを生成します。 したがっては指定しないで <xref:System.Text.RegularExpressions.RegexOptions.Compiled> の値のいずれかとして `options`します。  
  
 場合 `ispublic` は `true`, 、コンパイルされた正規表現クラスがパブリック アクセシビリティを指定します。 つまり、任意のアセンブリで実行するコードからインスタンス化することができます。 場合 `ispublic` は `false`, 、コンパイルされた正規表現クラスが指定された `internal` \(c\#\) のまたは `Friend` \(Visual Basic\) でユーザー補助機能です。 つまり、正規表現クラスと同じアセンブリで実行するコードからのみインスタンス化することができます。  
  
   
  
## 例  
 次の例では、作成し、2 つの手順でコンパイルされた正規表現を使用します。  
  
 最初の手順でコンパイルし、次のコード例を実行します。<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A> コンス トラクターのコード例ではコンパイルされた正規表現を定義します。 コードを実行した結果をという名前のコンパイルされた正規表現型を含む FishRegex.dll という名前のアセンブリは、 `FishRegex`です。  
  
 [!code-csharp[sys.txt.rgxCompInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 2 番目の手順で、FishRegex.dll への参照を使用して次のコード例をコンパイルし、生成された実行可能ファイルを実行します。 実行可能ファイルを使用してターゲット文字列に一致する、 `FishRegex` を入力し、対象の文字列に一致する、グループ、キャプチャ グループ、およびの一致項目のインデックス位置が表示されます。  
  
 [!code-csharp[sys.txt.rgxCompInfo\#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> は <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="name" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="fullnamespace" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>This constructor creates a compiled regular expression that uses the default time-out value of the application domain in which it is created. If a time-out value is defined for the application domain, the compiled regular expression uses the value <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, which prevents a pattern-matching operation from timing out. The recommended constructor for creating a compiled regular expression is <see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />, which lets you set the time-out interval.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">コンパイルする正規表現。</param>
        <param name="options">正規表現をコンパイルするときに使用する正規表現のオプションです。</param>
        <param name="name">コンパイルされた正規表現を表す型の名前。</param>
        <param name="fullnamespace">新しい型が属する名前空間。</param>
        <param name="ispublic">
          <see langword="true" /> コンパイル済みの正規表現をパブリックに表示されるようにするにはそれ以外の場合、 <see langword="false" />です。</param>
        <param name="matchTimeout">正規表現の既定のタイムアウト間隔。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> アセンブリに含まれる指定されたタイムアウト値を持つ正規表現に関する情報を含むクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各パラメーター、 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> コンス トラクターは、のプロパティに直接対応して、 <xref:System.Text.RegularExpressions.RegexCompilationInfo> クラスです。 すべてのプロパティは読み取り\/書き込みであるため、その値が直接割り当てられるもことができます。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> メソッドは、コンパイルされた正規表現を格納するアセンブリを生成します。 したがっては指定しないで <xref:System.Text.RegularExpressions.RegexOptions.Compiled> の値のいずれかとして `options`します。  
  
 場合 `ispublic` は `true`, 、コンパイルされた正規表現クラスがパブリック アクセシビリティを指定します。 つまり、任意のアセンブリで実行するコードからインスタンス化することができます。 場合 `ispublic` は `false`, 、コンパイルされた正規表現クラスが指定された `internal` \(c\#\) のまたは `Friend` \(Visual Basic\) でユーザー補助機能です。 つまり、正規表現クラスと同じアセンブリで実行するコードからのみインスタンス化することができます。  
  
 `matchTimeout` パラメーターは、コンパイルされた正規表現の既定のタイムアウト間隔を定義します。 この値は、コンパイルされた正規表現オブジェクトは、操作がタイムアウトし、正規表現エンジンをスローする前に、単一の一致する操作が実行するまでのおおよその時間を表す、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 、次のタイミング チェック中に例外です。 タイムアウト値の詳細については、次を参照してください。、 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> プロパティです。  
  
> [!IMPORTANT]
>  常にコンパイルされた正規表現の既定のタイムアウト値を設定することをお勧めします。 渡すことによって、正規表現ライブラリのコンシューマーがそのタイムアウト値のオーバーライド、 <xref:System.TimeSpan> をこのコンス トラクターのオーバー ロードに新しいタイムアウト間隔を表す値。  
  
   
  
## 例  
 次の例では、という単一のコンパイルされた正規表現 `DuplicateChars` 入力文字列内の同じ文字の 2 つ以上の出現回数を識別します。 コンパイルされた正規表現では、2 秒の既定のタイムアウトを持ちます。 この例を実行するときにコンパイルされた正規表現を含む RegexLib.dll をという名前のクラス ライブラリを作成します。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 The regular expression pattern `(\w)\1+` is defined as shown in the following table.  
  
|Pattern|Description|  
|-------------|-----------------|  
|`(\w)`|Match any word character and assign it to the first capturing group.|  
|`\1+`|Match one or more occurrences of the value of the first captured group.|  
  
 次の例では、 `DuplicatedChars` 、文字列配列に重複する文字を識別するために正規表現。 呼び出すとき、 `DuplicatedChars` コンス トラクター、タイムアウト間隔を 5 秒に変更します。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> は <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="name" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="fullnamespace" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="matchTimeout" /> が負の値、0、または約 24 日より大きい。</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコンパイルされた正規表現がパブリックな可視性を持つかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 正規表現にパブリックな可視性がある場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A> プロパティは、 `false`, 、クラスを含んでいるアセンブリで実行されているコードからのみ、現在のインスタンスで定義された正規表現クラスをインスタンス化することができます。 ただし、あるため、 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=fullName> メソッドでコンパイルされた正規表現のみを含み、その他のコードを追加することはできませんアセンブリを生成する、一般にこのプロパティの値を代入する必要はありません `false`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または正規表現の既定のタイムアウト間隔を設定します。</summary>
        <value>前に、パターン一致操作で経過できる既定の最大時間間隔、 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> スローされると、または <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> タイムアウトが無効な場合です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> プロパティは、コンパイルされた正規表現の既定のタイムアウト間隔を定義します。 この値は、コンパイルされた正規表現は、操作がタイムアウトし、正規表現エンジンをスローする前に、単一の一致する操作が実行するまでのおおよその時間を表す、 <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> 、次のタイミング チェック中に例外です。  
  
> [!IMPORTANT]
>  常にコンパイルされた正規表現の既定のタイムアウト値を設定することをお勧めします。 渡すことによって、正規表現ライブラリのコンシューマーがそのタイムアウト値のオーバーライド、 <xref:System.TimeSpan> コンパイルされる正規表現のクラスのコンス トラクターへの新しいタイムアウト間隔を表す値。  
  
 既定のタイムアウト値を割り当てることができます、 <xref:System.Text.RegularExpressions.RegexCompilationInfo> で、次の方法のいずれかのオブジェクト。  
  
-   呼び出して、 <xref:System.AppDomain.SetData%2A?displayProperty=fullName> メソッドとの文字列形式を提供する、 <xref:System.TimeSpan> "REGEX\_DEFAULT\_MATCH\_TIMEOUT"プロパティの値。  
  
-   呼び出して、 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29> コンス トラクターとの値を提供する、 `matchTimeout` パラメーター。  
  
-   このプロパティの値を設定します。  
  
 妥当なタイムアウトの間隔を設定するには、次の要因を検討します。  
  
-   長さと正規表現パターンは複雑です。 時間が長く、複雑な正規表現では、短くてわかりやすいものよりも時間がかかります。  
  
-   予想されるマシンの負荷します。 処理では、CPU およびメモリ使用率が高いシステムでより多くの時間がかかります。  
  
   
  
## 例  
 次の例では、という単一のコンパイルされた正規表現 `DuplicateChars` 入力文字列内の同じ文字の 2 つ以上の出現回数を識別します。 コンパイルされた正規表現では、2 秒の既定のタイムアウトを持ちます。 この例を実行するときにコンパイルされた正規表現を含む RegexLib.dll をという名前のクラス ライブラリを作成します。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 The regular expression pattern `(\w)\1+` is defined as shown in the following table.  
  
|Pattern|Description|  
|-------------|-----------------|  
|`(\w)`|Match any word character and assign it to the first capturing group.|  
|`\1+`|Match one or more occurrences of the value of the first captured group.|  
  
 次の例では、 `DuplicatedChars` 、文字列配列に重複する文字を識別するために正規表現。 呼び出すとき、 `DuplicatedChars` コンス トラクター、タイムアウト間隔を 5 秒に変更します。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコンパイルされた正規表現を表す型の名前を設定します。</summary>
        <value>新しい型の名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo> から派生したクラスとして表されるコンパイルされる正規表現を定義するクラスが使用される <xref:System.Text.RegularExpressions.Regex>します。<xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> プロパティは、正規表現型のクラス名を定義し、 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> と <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> プロパティが同時に、完全修飾名を定義します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">このプロパティの値は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">このプロパティの値は、空の文字列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または新しい型が属する名前空間を設定します。</summary>
        <value>新しい型の名前空間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo> から派生したクラスとして表されるコンパイルされる正規表現を定義するクラスが使用される <xref:System.Text.RegularExpressions.Regex>します。<xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> プロパティは、コンパイルされた正規表現の種類を含む名前空間を定義し、 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> と <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> プロパティが同時に、完全修飾名を定義します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">このプロパティの値は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または正規表現をコンパイルするときに使用するオプションを設定します。</summary>
        <value>列挙値のビットごとの組み合わせ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> メソッドは、コンパイルされた正規表現を格納するアセンブリを生成します。 そのため、指定する必要はない <xref:System.Text.RegularExpressions.RegexOptions.Compiled> としてこのプロパティの値のいずれかです。 存在する場合、 <xref:System.Text.RegularExpressions.RegexOptions.Compiled> オプションは無視されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコンパイルする正規表現を設定します。</summary>
        <value>コンパイルする正規表現。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> プロパティは、任意の有効な正規表現を含めることができます。 場合の値、 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> プロパティは構文的に正しい正規表現パターンでは、呼び出しではありません、 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> メソッドでのスロー、 <xref:System.ArgumentException>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">このプロパティの値は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>