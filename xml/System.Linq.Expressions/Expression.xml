<Type Name="Expression" FullName="System.Linq.Expressions.Expression">
  <TypeSignature Language="C#" Value="public abstract class Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Expression extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>式ツリー ノードを表すクラスの派生元の基底クラスを提供します。 さまざまなノード型を作成する <see langword="static" /> \(Visual Basic では <see langword="Shared" />\) ファクトリ メソッドも含まれています。 これは <see langword="abstract" /> クラスです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 The following code example shows how to create a block expression. The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.Expression" /> の新しいインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Linq.Expressions.ExpressionType nodeType, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nodeType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="nodeType">ノード型として設定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
        <param name="type">この <see cref="P:System.Linq.Expressions.Expression.Type" /> の <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.Expression" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This constructor is called from constructors in derived classes.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">このノードを走査するビジター。</param>
        <summary>このノード型の特定の Visit メソッドにデスパッチします。 たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
        <returns>このノードの走査結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>. Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class. However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>オーバーフロー チェックを行わない算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作の選択したメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 加算演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの加算演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの加算演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 次のコード例では、2 つの整数を加算する式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">加算演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行わない算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Add" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `method` は `null` され、void ではない、表します `static` \(`Shared` Visual Basic で\) を 2 つの引数を受け取るメソッド ノードのメソッドの実装であります。  
  
-   それ以外の場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 加算演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの加算演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの加算演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 2 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> との加算演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例では、整数型の変数に値を追加し、操作の結果を変数に代入する式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#18)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>オーバーフロー チェックを行う算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 加算演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの加算演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの加算演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">加算演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行う算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both **languageKeyword tag is not supported!!!!**  
. Otherwise, they are **languageKeyword tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is **languageKeyword tag is not supported!!!!**  
.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The implementing method for the operation is chosen based on the following rules:  
  
-   If **parameterReference tag is not supported!!!!**  
     is not **languageKeyword tag is not supported!!!!**  
     and it represents a non\-void, **languageKeyword tag is not supported!!!!**  
     \(**languageKeyword tag is not supported!!!!**  
     in Visual Basic\) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either **parameterReference tag is not supported!!!!**  
     or **parameterReference tag is not supported!!!!**  
     represents a user\-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are numeric types, the implementing method is **languageKeyword tag is not supported!!!!**  
    .  
  
#### Node Type and Lifted versus Non\-Lifted  
 If the implementing method is not **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non\-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non\-nullable value type.  
  
 If the implementing method is **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both non\-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> \(Visual Basic では <see langword="Shared" />\) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には加算演算子が定義されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.And" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> いずれかのプロパティ `left` または `right` 演算子をオーバー ロードするユーザー定義型を表す `AND` 演算子、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型は整数またはブール型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、結果の型定義済みのビットごと `AND` 演算子。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、結果の型に定義済みのビットごとの対応する null 許容型 `AND` 演算子。  
  
   
  
## 例  
 次のコード例では、2 つのブール値の論理 AND 演算を表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">ビットごと <see langword="AND" /> の演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。 実装メソッドを指定できます。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.And" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both **languageKeyword tag is not supported!!!!**  
. Otherwise, they are **languageKeyword tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is **languageKeyword tag is not supported!!!!**  
.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The implementing method for the operation is chosen based on the following rules:  
  
-   If **parameterReference tag is not supported!!!!**  
     is not **languageKeyword tag is not supported!!!!**  
     and it represents a non\-void, **languageKeyword tag is not supported!!!!**  
     \(**languageKeyword tag is not supported!!!!**  
     in Visual Basic\) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either **parameterReference tag is not supported!!!!**  
     or **parameterReference tag is not supported!!!!**  
     represents a user\-defined type that overloads the bitwise **languageKeyword tag is not supported!!!!**  
     operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are integral or Boolean types, the implementing method is **languageKeyword tag is not supported!!!!**  
    .  
  
#### Node Type and Lifted versus Non\-Lifted  
 If the implementing method is not **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non\-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non\-nullable value type.  
  
 If the implementing method is **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both non\-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise **languageKeyword tag is not supported!!!!**  
     operator.  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise **languageKeyword tag is not supported!!!!**  
     operator.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> \(Visual Basic では <see langword="Shared" />\) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type にはビット処理 <see langword="AND" /> 演算子が定義されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="AND" /> 演算を表す <see langword="true" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> いずれかのプロパティ `left` または `right` 演算子をオーバー ロードするユーザー定義型を表す `AND` 演算子、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
    > [!NOTE]
    >  条件付き `AND` 演算子は、c\# ではオーバー ロードできませんまたは [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]です。 ただし、条件付き `AND` ビットごとの演算子が評価される `AND` 演算子。 したがってにユーザー定義のオーバー ロード、ビットごとの `AND` 演算子はこのノード型のメソッドの実装があります。  
  
-   それ以外の場合 `left`します。型および `right`です。型がブール型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型を少なくとも 1 つが null 許容型、および対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   `left`.型および `right`です。種類は、同じブール型です。  
  
-   場合 `left`します。型および `right`です。型が null 非許容は、ノードはリフトされていません。 ノードの型は、定義済みの条件式の結果型 `AND` 演算子。  
  
-   場合 `left`します。型および `right`です。型は null を許容、ノードはリフトができます。 ノードの型は、定義済みの条件式の結果型に対応する null 許容型 `AND` 演算子。  
  
   
  
## 例  
 次のコード例では、式の作成は、論理を実行し、場合にのみ、その 2 つのオペランドに対する操作を 1 番目のオペランドが評価される方法を示しています。 `true`します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#19)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">ビットごと <see langword="AND" /> の演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。  
  
 または  
  
 <paramref name="left" />.型および <paramref name="right" />です。型は、同じブール型ではできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>1 番目のオペランドが true に解決された場合にのみ 2 番目のオペランドを評価する条件付き <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。 実装メソッドを指定できます。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 操作のメソッドの実装は、次の規則に基づいて選択されます。  
  
-   場合 `method` は `null` 、void 以外を表します `static` \(`Shared` Visual Basic で\) 2 つの引数を受け取るメソッド ノードのメソッドの実装であります。  
  
-   それ以外の場合、 <xref:System.Linq.Expressions.Expression.Type%2A> いずれかのプロパティ `left` または `right` 演算子をオーバー ロードするユーザー定義型を表す `AND` 、演算子、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
    > [!NOTE]
    >  条件付き `AND` 演算子は、c\# ではオーバー ロードできませんまたは [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]です。 ただし、条件付き `AND` ビットごとの演算子が評価される `AND` 演算子。 したがってにユーザー定義のオーバー ロード、ビットごとの `AND` 演算子はこのノード型のメソッドの実装があります。  
  
-   それ以外の場合 `left`します。型および `right`です。型がブール型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型を少なくとも 1 つが null 許容型、および対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   `left`.型および `right`です。種類は、同じブール型です。  
  
-   場合 `left`します。型および `right`です。型が null 非許容は、ノードはリフトされていません。 ノードの型は、定義済みの条件式の結果型 `AND` 演算子。  
  
-   場合 `left`します。型および `right`です。型は null を許容、ノードはリフトができます。 ノードの型は、定義済みの条件式の結果型に対応する null 許容型 `AND` 演算子。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 2 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> 演算と <see langword="AND" /> の演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。  
  
 または  
  
 <paramref name="method" /> <see langword="null" /> と <paramref name="left" />です。型および <paramref name="right" />です。型は、同じブール型ではできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array">多次元配列を表す式。</param>
        <param name="indexes">配列のインデックス化に使用する式を格納している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
        <summary>多次元配列にアクセスするための <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、配列を表す式を取得できます、 <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> メソッド、または <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> または <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>です。  
  
   
  
## 例  
 次のコード例を使用して多次元配列内の要素の値を変更する方法を示しています、 `ArrayAccess` メソッドです。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#21)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">インデックス化する配列を表す式。</param>
        <param name="indexes">配列のインデックス化に使用する式を格納している配列。</param>
        <summary>配列にアクセスするための <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、配列を表す式を取得できます、 <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> メソッド、または <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> または <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>です。  
  
 多次元配列を使用して、 <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> メソッドです。  
  
   
  
## 例  
 次のコード例を使用して配列の要素の値を変更する方法を示しています、 `ArrayAccess` メソッドです。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#20)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />。</param>
        <param name="indexes">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</param>
        <summary>ランクが 1 より大きい配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各要素 `indexes` 必要 <xref:System.Linq.Expressions.Expression.Type%2A> に等しい <xref:System.Int32>します。<xref:System.Linq.Expressions.Expression.Type%2A> の `array` ランク内の要素数に一致する、配列型を表す必要があります `indexes`します。  
  
 場合のランク `array`します。このメソッドが戻る種類が 1 の場合、 <xref:System.Linq.Expressions.BinaryExpression>です。<xref:System.Linq.Expressions.BinaryExpression.Left%2A> にプロパティが設定されている `array` と <xref:System.Linq.Expressions.BinaryExpression.Right%2A> の 1 つの要素にプロパティが設定されている `indexes`します。<xref:System.Linq.Expressions.Expression.Type%2A> のプロパティ、 <xref:System.Linq.Expressions.BinaryExpression> の要素の型を表す `array`します。入力します。  
  
 場合のランク `array`します。このメソッドが戻る型が 1 つ以上の場合、 <xref:System.Linq.Expressions.MethodCallExpression>です。<xref:System.Linq.Expressions.MethodCallExpression.Method%2A> プロパティに設定されて、 <xref:System.Reflection.MethodInfo> パブリック インスタンス メソッドを記述する `Get` によって表される型で、 <xref:System.Linq.Expressions.Expression.Type%2A> の `array`です。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> を作成する方法、 <xref:System.Linq.Expressions.MethodCallExpression> を表す 2 次元配列のインデックスを作成します。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> または <paramref name="indexes" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" />.型は、配列の種類を表していません。  
  
 または  
  
 ランク <paramref name="array" />します。型が要素の数と一致しません <paramref name="indexes" />します。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティの 1 つまたは複数の要素の <paramref name="indexes" /> は表しません、 <see cref="T:System.Int32" /> 型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="index">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>ランク 1 の配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `index` 型のインデックスを表す必要があります <xref:System.Int32>します。  
  
 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 、その結果のプロパティ <xref:System.Linq.Expressions.BinaryExpression> は `null`, 、および <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> に設定されている `false`します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティが要素の型と等しい `array`します。入力します。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> または <paramref name="index" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" />.型は、配列の種類を表していません。  
  
 または  
  
 <paramref name="array" />.型では、ランクが 1 ではない配列型を表します。  
  
 または  
  
 <paramref name="index" />.種類は表しません、 <see cref="T:System.Int32" /> 型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Linq.Expressions.Expression" /> のインスタンスの配列 \(配列のインデックス操作のインデックス\)。</param>
        <param name="indexes">
          <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</param>
        <summary>多次元配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各要素 `indexes` 必要 <xref:System.Linq.Expressions.Expression.Type%2A> に等しい <xref:System.Int32>します。<xref:System.Linq.Expressions.Expression.Type%2A> の `array` ランク内の要素数に一致する、配列型を表す必要があります `indexes`します。  
  
 場合のランク `array`します。このメソッドが戻る種類が 1 の場合、 <xref:System.Linq.Expressions.BinaryExpression>です。<xref:System.Linq.Expressions.BinaryExpression.Left%2A> にプロパティが設定されている `array` と <xref:System.Linq.Expressions.BinaryExpression.Right%2A> の 1 つの要素にプロパティが設定されている `indexes`します。<xref:System.Linq.Expressions.Expression.Type%2A> のプロパティ、<xref:System.Linq.Expressions.BinaryExpression> の要素の型を表す `array`します。入力します。  
  
 場合のランク `array`します。このメソッドが戻る型が 1 つ以上の場合、 <xref:System.Linq.Expressions.MethodCallExpression>です。<xref:System.Linq.Expressions.MethodCallExpression.Method%2A> プロパティに設定されて、 <xref:System.Reflection.MethodInfo> パブリック インスタンス メソッドを記述する `Get` によって表される型で、 <xref:System.Linq.Expressions.Expression.Type%2A> の `array`です。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> を作成する方法、 <xref:System.Linq.Expressions.MethodCallExpression> を表す 2 次元配列のインデックスを作成します。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> または <paramref name="indexes" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" />.型は、配列の種類を表していません。  
  
 または  
  
 ランク <paramref name="array" />します。型が要素の数と一致しません <paramref name="indexes" />します。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティの 1 つまたは複数の要素の <paramref name="indexes" /> は表しません、 <see cref="T:System.Int32" /> 型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayLength">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ArrayLength(class System.Linq.Expressions.Expression array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <summary>1 次元配列の長さを取得する式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> と等しい <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <paramref name="array" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> の `array` 配列型を表す必要があります。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.UnaryExpression> に等しい <xref:System.Int32>します。<xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティは、 `null`, 、および <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> に設定されている `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" />.型は、配列の種類を表していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Assign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Assign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **languageKeyword tag is not supported!!!!**  
 expression copies a value for value types, and it copies a reference for reference types.  
  
   
  
## 例  
 The following code example shows how to create an expression that represents an assignment operation.  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#12)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="member">
          <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
        <summary>フィールドまたはプロパティの初期化を表す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberAssignment" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティの `expression` によって表される型に代入する必要があります、 <xref:System.Reflection.FieldInfo.FieldType%2A> または <xref:System.Reflection.PropertyInfo.PropertyType%2A> の `member`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="member" /> または <paramref name="expression" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="member" /> フィールドまたはプロパティを表していません。  
  
 または  
  
 によって表されるプロパティ <paramref name="member" /> が、 <see langword="set" /> アクセサー。  
  
 または  
  
 <paramref name="expression" />.型のフィールドまたはプロパティの型に割り当てることがないを <paramref name="member" /> を表します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
        <summary>プロパティ アクセサー メソッドを使用したメンバーの初期化を表す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberAssignment" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、<paramref name="propertyAccessor" /> に設定された <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> を含む <paramref name="expression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of **parameterReference tag is not supported!!!!**  
 must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in **parameterReference tag is not supported!!!!**  
.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyAccessor" /> または <paramref name="expression" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。  
  
 または  
  
 <paramref name="propertyAccessor" /> によってアクセスされるプロパティは <see langword="set" /> アクセサーを持っていません。  
  
 または  
  
 <paramref name="expression" />.Type は、<paramref name="member" /> を表すフィールドまたはプロパティの型に割り当てることができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expressions">ブロック内の式。</param>
        <summary>指定された式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ブロックの式を実行すると、ブロックの最後の式の値を返します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expressions">ブロック内の式。</param>
        <summary>指定された式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When the block expression is executed, it returns the value of the last expression in the block.  
  
   
  
## 例  
 The following code example shows how to create a block expression. The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">ブロック内の変数。</param>
        <param name="expressions">ブロック内の式。</param>
        <summary>指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ブロックの式を実行すると、ブロックの最後の式の値を返します。  
  
   
  
## 例  
 次のコード例では、ブロック式にパラメーターを渡すし、ブロック内では、このパラメーターを処理する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#14)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">ブロック内の変数。</param>
        <param name="expressions">ブロック内の式。</param>
        <summary>指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ブロックの式を実行すると、ブロックの最後の式の値を返します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">ブロック内の 1 つ目の式。</param>
        <param name="arg1">ブロック内の 2 つ目の式。</param>
        <summary>2 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ブロックの式を実行すると、ブロックの最後の式の値を返します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">ブロックの結果の型。</param>
        <param name="expressions">ブロック内の式。</param>
        <summary>指定された式を含み、変数を含まず、特定の結果の型を持つ <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">ブロックの結果の型。</param>
        <param name="expressions">ブロック内の式。</param>
        <summary>指定された式を含み、変数を含まず、特定の結果の型を持つ <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">ブロック内の 1 つ目の式。</param>
        <param name="arg1">ブロック内の 2 つ目の式。</param>
        <param name="arg2">ブロック内の 3 つ目の式。</param>
        <summary>3 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ブロックの式を実行すると、ブロックの最後の式の値を返します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">ブロックの結果の型。</param>
        <param name="variables">ブロック内の変数。</param>
        <param name="expressions">ブロック内の式。</param>
        <summary>指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">ブロックの結果の型。</param>
        <param name="variables">ブロック内の変数。</param>
        <param name="expressions">ブロック内の式。</param>
        <summary>指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">ブロック内の 1 つ目の式。</param>
        <param name="arg1">ブロック内の 2 つ目の式。</param>
        <param name="arg2">ブロック内の 3 つ目の式。</param>
        <param name="arg3">ブロック内の 4 つ目の式。</param>
        <summary>4 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ブロックの式を実行すると、ブロックの最後の式の値を返します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">ブロック内の 1 つ目の式。</param>
        <param name="arg1">ブロック内の 2 つ目の式。</param>
        <param name="arg2">ブロック内の 3 つ目の式。</param>
        <param name="arg3">ブロック内の 4 つ目の式。</param>
        <param name="arg4">ブロック内の 5 つ目の式。</param>
        <summary>5 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When the block expression is executed, it returns the value of the last expression in the block.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <summary>break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
        <returns>Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LoopExpression> object that uses the <xref:System.Linq.Expressions.Expression.Break%2A> method.  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
        <summary>break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。 ジャンプ時にラベルに渡す値を指定できます。</summary>
        <returns>Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>型を指定して、break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
        <returns>Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、および <paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <paramref name="type" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>型を指定して、break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。 ジャンプ時にラベルに渡す値を指定できます。</summary>
        <returns>Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="instance">インスタンス メソッドの呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。<see langword="null" /> \(Visual Basic では <see langword="static" />\) メソッドに <see langword="Shared" /> を渡します。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
        <summary>引数を受け取らないメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しを表すため、 `static` \(`Shared` Visual Basic で\) メソッドでパス `null` の `instance` パラメーターがこのメソッドを呼び出すとします。  
  
 場合 `method` インスタンス メソッドを表す、 <xref:System.Linq.Expressions.Expression.Type%2A> の `instance` によって表されるメソッドの宣言型に代入する必要があります `method`します。  
  
 <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.MethodCallExpression> が空です。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがによって表されるメソッドの戻り値の型と等しい `method`します。  
  
   
  
## 例  
 次のコード例では、引数を使用しないメソッドを呼び出す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#15)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="instance" /> <see langword="null" /> と <paramref name="method" /> インスタンス メソッドを表します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="instance" />.種類はによって表されるメソッドの宣言型に割り当てることがない <paramref name="method" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="method">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <param name="arguments">呼び出しの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> のコレクション。</param>
        <summary>static \(Visual Basic では Shared\) メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
        <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>1 つの引数を受け取る <see cref="T:System.Linq.Expressions.MethodCallExpression" /> \(Visual Basic では <see langword="static" />\) メソッドへの呼び出しを表す <see langword="Shared" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 The following example demonstrates how to create an expression that calls a **languageKeyword tag is not supported!!!!**  
 \(**languageKeyword tag is not supported!!!!**  
 in Visual Basic\) method that takes one argument.  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#16)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> が null です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see langword="static" /> \(Visual Basic では <see langword="Shared" />\) メソッドを表す <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
        <param name="arguments">
          <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</param>
        <summary>引数を持つ <see cref="T:System.Linq.Expressions.MethodCallExpression" /> \(Visual Basic では <see langword="static" />\) メソッドへの呼び出しを表す <see langword="Shared" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `arguments` は `null`, 、によって表されるメソッドのパラメーターの数と同じ数の要素があります `method`します。 内の各要素 `arguments` することはできません `null` の対応するパラメーターに代入する必要があります `method`, 、おそらく後 *を引用符で囲む*します。  
  
> [!NOTE]
>  対応するメソッドのパラメーターが型の場合にのみ、要素は引用符で囲まないで <xref:System.Linq.Expressions.Expression>します。 要素にラップする手段を引用符で囲む、 <xref:System.Linq.Expressions.ExpressionType.Quote> ノードです。 結果として得られるノードは、 <xref:System.Linq.Expressions.UnaryExpression> が <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> プロパティは、要素の `arguments`です。  
  
 <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.MethodCallExpression> 空場合 `arguments` は `null`です。 それ以外の場合と同じ要素が含まれている `arguments`, 、その一部を引用することがあります。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.MethodCallExpression> によって表されるメソッドの戻り値の型と等しい `method`します。<xref:System.Linq.Expressions.MethodCallExpression.Object%2A> プロパティが `null` です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">要素数 <paramref name="arguments" /> によって表されるメソッドのパラメーターの数と等しくない <paramref name="method" />します。  
  
 または  
  
 1 つ以上の要素の <paramref name="arguments" /> によって表されるメソッドの対応するパラメーターに割り当てることができません <paramref name="method" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> \(<see langword="null" /> \(Visual Basic では <see langword="static" />\) メソッドに <see langword="Shared" /> を渡します\)。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
        <param name="arguments">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</param>
        <summary>引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、および <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しを表すため、 `static` \(`Shared` Visual Basic で\) メソッドでパス `null` の `instance` このメソッドを呼び出すときにパラメーターを呼び出したり <xref:System.Linq.Expressions.Expression.Call%2A> 代わりにします。  
  
 場合 `method` インスタンス メソッドを表す、 <xref:System.Linq.Expressions.Expression.Type%2A> の `instance` によって表されるメソッドの宣言型に代入する必要があります `method`します。  
  
 場合 `arguments` は `null`, 、によって表されるメソッドのパラメーターの数と同じ数の要素があります `method`します。 内の各要素 `arguments` することはできません `null` の対応するパラメーターに代入する必要があります `method`, 、おそらく後 *を引用符で囲む*します。  
  
> [!NOTE]
>  対応するメソッドのパラメーターが型の場合にのみ、要素は引用符で囲まないで <xref:System.Linq.Expressions.Expression>します。 要素にラップする手段を引用符で囲む、 <xref:System.Linq.Expressions.ExpressionType.Quote> ノードです。 結果として得られるノードは、 <xref:System.Linq.Expressions.UnaryExpression> が <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> プロパティは、要素の `arguments`です。  
  
 <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.MethodCallExpression> 空場合 `arguments` は `null`です。 それ以外の場合と同じ要素が含まれている `arguments`, 、その一部を引用することがあります。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.MethodCallExpression> によって表されるメソッドの戻り値の型と等しい `method`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="instance" /> <see langword="null" /> と <paramref name="method" /> インスタンス メソッドを表します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="instance" />.種類はによって表されるメソッドの宣言型に割り当てることがない <paramref name="method" />します。  
  
 または  
  
 要素数 <paramref name="arguments" /> によって表されるメソッドのパラメーターの数と等しくない <paramref name="method" />します。  
  
 または  
  
 1 つ以上の要素の <paramref name="arguments" /> によって表されるメソッドの対応するパラメーターに割り当てることができません <paramref name="method" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">インスタンス メソッドの呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。<see langword="null" /> \(Visual Basic では <see langword="static" />\) メソッドに <see langword="Shared" /> を渡します。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
        <param name="arguments">
          <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</param>
        <summary>引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、および <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 To represent a call to a **languageKeyword tag is not supported!!!!**  
 \(**languageKeyword tag is not supported!!!!**  
 in Visual Basic\) method, pass in **languageKeyword tag is not supported!!!!**  
 for the **parameterReference tag is not supported!!!!**  
 parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.  
  
 If **parameterReference tag is not supported!!!!**  
 represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of **parameterReference tag is not supported!!!!**  
 must be assignable to the declaring type of the method represented by **parameterReference tag is not supported!!!!**  
.  
  
 If **parameterReference tag is not supported!!!!**  
 is not **languageKeyword tag is not supported!!!!**  
, it must have the same number of elements as the number of parameters for the method represented by **parameterReference tag is not supported!!!!**  
. Each element in **parameterReference tag is not supported!!!!**  
 must not be **languageKeyword tag is not supported!!!!**  
 and must be assignable to the corresponding parameter of **parameterReference tag is not supported!!!!**  
, possibly after **newTerm tag is not supported!!!!**  
.  
  
> [!NOTE]
>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of **parameterReference tag is not supported!!!!**  
> .  
  
 The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if **parameterReference tag is not supported!!!!**  
 is **languageKeyword tag is not supported!!!!**  
. Otherwise, it contains the same elements as **parameterReference tag is not supported!!!!**  
, some of which may be quoted.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by **parameterReference tag is not supported!!!!**  
.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="instance" /> は <see langword="null" /> で、<paramref name="method" /> はインスタンス メソッドを表します。  
  
 または  
  
 <paramref name="arguments" /> は <see langword="null" /> ではなく、その要素の 1 つ以上が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="instance" />.Type は、<paramref name="method" /> の表すメソッドの宣言型に割り当てることができません。  
  
 または  
  
 <paramref name="arguments" /> の要素の数が、<paramref name="method" /> の表すメソッドのパラメーターの数と一致しません。  
  
 または  
  
 <paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> の表すメソッドの対応するパラメーターに割り当てることができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
        <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>2 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> が null です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance">インスタンス呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。 static \(Visual Basic では Shared\) メソッドの場合は null を渡します。</param>
        <param name="method">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>2 つの引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 The following code example shows how to create an expression that calls an instance method that has two arguments.  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#17)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">特定のメソッドの <see cref="T:System.Linq.Expressions.Expression" /> プロパティ値が検索される <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <param name="methodName">メソッドの名前。</param>
        <param name="typeArguments">ジェネリック メソッドの型パラメーターを指定する <see cref="T:System.Type" /> オブジェクトの配列。 methodName が非ジェネリック メソッドを指定する場合、この引数は null にします。</param>
        <param name="arguments">メソッドへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
        <summary>適切なファクトリ メソッドを呼び出すことにより、インスタンス メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティ、指定したインスタンス メソッドを表す <paramref name="instance" /> に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />、および指定した引数に設定された <see cref="T:System.Reflection.MethodInfo" /> を含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [Call メソッド \(Expression, String, Type\<xref:System.Linq.Expressions.Expression.Type%2A> プロパティ、その結果の [Call メソッド \(Expression, String, Type\<xref:System.Linq.Expressions.MethodCallExpression> で表されるメソッドの戻り値の型と等しい `methodName`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="instance" /> または <paramref name="methodName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">名前のメソッドが存在しません <paramref name="methodName" />, と一致する型パラメーター <paramref name="typeArguments" />, 、およびパラメーターを持つ種類の一致 <paramref name="arguments" /> で見つかった <paramref name="instance" />です。型またはその基本型です。  
  
 または  
  
 名前の 1 つ以上のメソッド <paramref name="methodName" />, と一致する型パラメーター <paramref name="typeArguments" />, 、パラメーターを持つ型の一致と <paramref name="arguments" /> で見つかった <paramref name="instance" />します。型またはその基本型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
        <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arg2">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>3 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> が null です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Type type, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">指定した <see cref="T:System.Type" /> \(Visual Basic では <see langword="static" />\) メソッドを含む型を指定する <see langword="Shared" />。</param>
        <param name="methodName">メソッドの名前。</param>
        <param name="typeArguments">ジェネリック メソッドの型パラメーターを指定する <see cref="T:System.Type" /> オブジェクトの配列。 methodName が非ジェネリック メソッドを指定する場合、この引数は null にします。</param>
        <param name="arguments">メソッドへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
        <summary>適切なファクトリ メソッドを呼び出すことにより、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> \(Visual Basic では <see langword="static" />\) メソッドへの呼び出しを表す <see langword="Shared" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、指定した <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> \(Visual Basic では <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />\) メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> に設定された <see langword="static" /> プロパティ、および指定した引数に設定された <see langword="Shared" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [Call メソッド \(Type, String, Type\<xref:System.Linq.Expressions.Expression.Type%2A> プロパティ、その結果の [Call メソッド \(Type, String, Type\<xref:System.Linq.Expressions.MethodCallExpression> で表されるメソッドの戻り値の型と等しい `methodName`します。[Call メソッド \(Type, String, Type\<xref:System.Linq.Expressions.MethodCallExpression.Object%2A> プロパティが `null` です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> または <paramref name="methodName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">名前のメソッドが存在しません <paramref name="methodName" />, と一致する型パラメーター <paramref name="typeArguments" />, 、およびパラメーターを持つ種類の一致 <paramref name="arguments" /> で見つかった <paramref name="type" /> またはその基本型です。  
  
 または  
  
 名前の 1 つ以上のメソッド <paramref name="methodName" />, と一致する型パラメーター <paramref name="typeArguments" />, 、パラメーターを持つ型の一致と <paramref name="arguments" /> で見つかった <paramref name="type" /> またはその基本型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance">インスタンス呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。 static \(Visual Basic では Shared\) メソッドの場合は null を渡します。</param>
        <param name="method">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arg2">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>3 つの引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
        <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arg2">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arg3">4 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>4 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> が null です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
        <param name="arg0">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arg1">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arg2">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arg3">4 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arg4">5 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>5 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="method" /> が null です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public virtual bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.CanReduce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ノードをより単純なノードに変形できることを示します。 これが true を返す場合、Reduce\(\) を呼び出して単純化された形式を生成できます。</summary>
        <value>ノードを単純化することができる場合は true。それ以外の場合は false。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</param>
        <param name="body">catch ステートメントの本体。</param>
        <summary>ハンドラー本体で使用する、キャッチされた <see cref="T:System.Linq.Expressions.CatchBlock" /> オブジェクトへの参照を指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
        <param name="body">catch ステートメントの本体。</param>
        <summary>catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> の <xref:System.Exception> への参照を検出を指定する、 <xref:System.Exception> オブジェクトで使用するために使用できます、 <xref:System.Linq.Expressions.CatchBlock>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</param>
        <param name="body">catch ステートメントの本体。</param>
        <param name="filter">
          <see cref="T:System.Exception" /> フィルターの本体。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.CatchBlock" /> フィルターおよびキャッチされた <see cref="T:System.Exception" /> オブジェクトへの参照を指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
        <param name="body">catch ステートメントの本体。</param>
        <param name="filter">
          <see cref="T:System.Exception" /> フィルターの本体。</param>
        <summary>キャッチされた <see cref="T:System.Linq.Expressions.CatchBlock" /> オブジェクトへの参照は指定せずに、<see cref="T:System.Exception" /> フィルターを指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearDebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression ClearDebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
      </Parameters>
      <Docs>
        <param name="document">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
        <summary>シーケンス ポイントをクリアするための <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を作成します。</summary>
        <returns>シーケンス ポイントをクリアするための <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 、その結果のプロパティ <xref:System.Linq.Expressions.BinaryExpression> は `null` と <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> に設定されている `false`します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティは、合体演算の結果の型と一致します。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
#### 結果のデータ型  
 次の規則は、結果の型を決定します。  
  
-   場合 `left`します。型が null 許容型を表すと `right`です。型は、対応する null 非許容の型に暗黙的に変換、結果型が null 非許容のと同等の `left`です。入力します。  
  
-   それ以外の場合 `right`します。暗黙的に変換できる型を `left`します。型は、結果の型です `left`します。入力します。  
  
-   それ以外の場合、null 非許容のと同等の `left`です。暗黙的に変換できる型を `right`します。型は、結果の型です `right`します。入力します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Linq.Expressions.Expression.Type" /> の <paramref name="left" /> 参照型または null 許容値型を示していません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="left" />.型および <paramref name="right" />です。型は、相互に変換可能ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>変換関数を指定して合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> 、その結果のプロパティ <xref:System.Linq.Expressions.BinaryExpression> は `null` と <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> に設定されている `false`します。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティ、その結果の <xref:System.Linq.Expressions.BinaryExpression> 合体演算の結果の型と等しい。  
  
 次の規則は、結果の型を決定します。  
  
-   場合 `left`します。型が null 許容型を表すと `right`です。型は、対応する null 非許容の型に暗黙的に変換、結果型が null 非許容のと同等の `left`です。入力します。  
  
-   それ以外の場合 `right`します。暗黙的に変換できる型を `left`します。型は、結果の型です `left`します。入力します。  
  
-   それ以外の場合、null 非許容のと同等の `left`です。暗黙的に変換できる型を `right`します。型は、結果の型です `right`します。入力します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="left" />.型および <paramref name="right" />です。型は、相互に変換可能ではありません。  
  
 または  
  
 <paramref name="conversion" /> <see langword="null" /> と <paramref name="conversion" />です。型は、デリゲート型を正確に 1 つの引数を受け取らないです。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Linq.Expressions.Expression.Type" /> の <paramref name="left" /> 参照型または null 許容値型を示していません。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" /> の <paramref name="left" /> 型のデリゲート型のパラメーターの型に割り当てることができませんを表す <paramref name="conversion" />します。入力します。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" /> の <paramref name="right" /> がデリゲート型の戻り値の型に等しくない <paramref name="conversion" />します。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
        <param name="ifTrue">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
        <param name="ifFalse">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
        <summary>条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.ConditionalExpression> に等しい、 <xref:System.Linq.Expressions.Expression.Type%2A> の `ifTrue`です。  
  
   
  
## 例  
 次のコード例では、条件付きステートメントを表す式を作成する方法を示します。 最初の引数と評価された場合 `true`, 、2 番目の引数は、実行された以外の場合、3 番目の引数を実行します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#3)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="test" />、<paramref name="ifTrue" />、または <paramref name="ifFalse" /> は、<see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="test" />.型がない <see cref="T:System.Boolean" />します。  
  
 または  
  
 <paramref name="ifTrue" />.型と等しくない <paramref name="ifFalse" />します。入力します。</exception>
        <altmember cref="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <altmember cref="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="test">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
        <param name="ifTrue">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
        <param name="ifFalse">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
        <param name="type">
          <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method allows explicitly unifying the result type of the conditional expression in cases where the types of **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 expressions are not equal. Types of both **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 must be implicitly reference assignable to the result type. The **parameterReference tag is not supported!!!!**  
 is allowed to be <xref:System.Void>.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
        <summary>指定した値に設定された <see cref="T:System.Linq.Expressions.ConstantExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.ConstantExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of **parameterReference tag is not supported!!!!**  
. If **parameterReference tag is not supported!!!!**  
 is **languageKeyword tag is not supported!!!!**  
, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.  
  
 To represent **languageKeyword tag is not supported!!!!**  
, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type.  
  
   
  
## 例  
 The following code example shows how to create an expression that represents a constant value.  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#4)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>指定した値に設定された <see cref="T:System.Linq.Expressions.ConstantExpression" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.ConstantExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、null 許容型の値を表すために役立ちます。  
  
   
  
## 例  
 次のコード例は、null 許容型の定数を表す式を作成し、その値に設定する方法を示しています。 `null`します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#22)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> <see langword="null" /> と <paramref name="type" /> の動的な型から割り当てることができません <paramref name="value" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <summary>continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
        <returns>Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 The following example demonstrates how to create a loop expression that uses the <xref:System.Linq.Expressions.Expression.Continue%2A> method.  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#46)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>型を指定して、continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
        <returns>Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>型変換操作を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティ、その結果の <xref:System.Linq.Expressions.UnaryExpression> メソッドの実装に設定されています。<xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> プロパティが `false` です。 ノードが無効になると場合 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> は `true`です。 それ以外の場合は `false` です。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   いずれか `expression`します。型または `type` 暗黙的または明示的な変換演算子を定義するユーザー定義型です、 <xref:System.Reflection.MethodInfo> を表す演算子はメソッドの実装です。  
  
-   それ以外の場合は、次のように処理されます。  
  
    -   両方 `expression`します。型および `type` 数値またはブール値の型または null 許容値または null 非許容の列挙型を表す、メソッドの実装は `null`です。  
  
    -   いずれか `expression`します。型または `type` が参照型であり、明示的なボックス化ボックス化解除、またはから参照変換が存在する `expression`です。型を `type`, 、メソッドの実装 `null`します。  
  
#### リフトされているかいないか.  
 メソッドの実装がない場合 `null`:  
  
-   場合 `expression`します。型が実装するメソッドの引数の型に割り当てることが、実装するメソッドの戻り値の型に割り当てることができる `type`, 、ノードはリフトされていません。  
  
-   1 つまたは両方の `expression`です。型または `type` null 許容値型であり、対応する null 非許容値型が引数の型を実装するメソッドの戻り値の型と同じそれぞれ、ノードは、リフトです。  
  
 メソッドの実装が場合 `null`:  
  
-   両方 `expression`します。型および `type` は null 非許容のノードはリフトされていません。  
  
-   それ以外の場合、ノードが解除されます。  
  
   
  
## 例  
 次のコード例では、型変換演算を表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#23)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">間で変換演算子が定義されていない <paramref name="expression" />します。型および <paramref name="type" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
        <summary>実装メソッドが指定される変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />、<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、および <see cref="P:System.Linq.Expressions.Expression.Type" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティ、その結果の <xref:System.Linq.Expressions.UnaryExpression> メソッドの実装に設定されています。<xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> プロパティが `false` です。 ノードが無効になると場合 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> は `true`です。 それ以外の場合は `false` です。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   メソッドがない場合 `null`, 、メソッドの実装であります。 Void 以外を表す必要があります `static` \(`Shared` Visual basic\) を 1 つの引数を受け取るメソッドです。  
  
-   それ以外の場合、いずれか `expression`します。型または `type` 暗黙的または明示的な変換演算子を定義するユーザー定義型です、 <xref:System.Reflection.MethodInfo> を表す演算子はメソッドの実装です。  
  
-   それ以外の場合は、次のように処理されます。  
  
    -   両方 `expression`します。型および `type` 数値またはブール値の型または null 許容値または null 非許容の列挙型を表す、メソッドの実装は `null`です。  
  
    -   いずれか `expression`します。型または `type` が参照型であり、明示的なボックス化ボックス化解除、またはから参照変換が存在する `expression`です。型を `type`, 、メソッドの実装 `null`します。  
  
#### リフトされているかいないか.  
 メソッドの実装がない場合 `null`:  
  
-   場合 `expression`します。型が実装するメソッドの引数の型に割り当てることが、実装するメソッドの戻り値の型に割り当てることができる `type`, 、ノードはリフトされていません。  
  
-   いずれかまたは両方の場合の `expression`です。型または `type` null 許容値型と対応する null 非許容値型はそれぞれの引数の型と実装するメソッドの戻り値の型に等しく、ノードはリフトされています。  
  
 メソッドの実装が場合 `null`:  
  
-   両方 `expression`します。型および `type` は null 非許容のノードはリフトされていません。  
  
-   それ以外の場合、ノードが解除されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 1 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">間で変換演算子が定義されていない <paramref name="expression" />します。型および <paramref name="type" />です。  
  
 または  
  
 <paramref name="expression" />.種類はによって表されるメソッドの引数の型に割り当てることがない <paramref name="method" />します。  
  
 または  
  
 によって表されるメソッドの戻り値の型 <paramref name="method" /> に割り当てることができません <paramref name="type" />します。  
  
 または  
  
 <paramref name="expression" />.型または <paramref name="type" /> null 許容値型であり、対応する null 非許容値型でない引数の型または戻り値の型それぞれによって表されるメソッドの <paramref name="method" />です。</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">一致する 2 つ以上のメソッド、 <paramref name="method" /> の説明が見つかりました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>変換後の型がオーバーフローした場合に例外をスローする変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティ、その結果の <xref:System.Linq.Expressions.UnaryExpression> メソッドの実装に設定されています。<xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> プロパティが `false` です。 ノードが無効になると場合 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> は `true`です。 それ以外の場合は `false` です。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   いずれか `expression`します。型または `type` 暗黙的または明示的な変換演算子を定義するユーザー定義型です、 <xref:System.Reflection.MethodInfo> を表す演算子はメソッドの実装です。  
  
-   それ以外の場合は、次のように処理されます。  
  
    -   両方 `expression`します。型および `type` 数値またはブール値の型または null 許容値または null 非許容の列挙型を表す、メソッドの実装は `null`です。  
  
    -   いずれか `expression`します。型または `type` が参照型であり、明示的なボックス化ボックス化解除、またはから参照変換が存在する `expression`です。型を `type`, 、メソッドの実装 `null`します。  
  
#### リフトされているかいないか.  
 メソッドの実装がない場合 `null`:  
  
-   場合 `expression`します。型が実装するメソッドの引数の型に割り当てることが、実装するメソッドの戻り値の型に割り当てることができる `type`, 、ノードはリフトされていません。  
  
-   いずれかまたは両方の場合の `expression`です。型または `type` null 許容値型と対応する null 非許容値型はそれぞれの引数の型と実装するメソッドの戻り値の型に等しく、ノードはリフトされています。  
  
 メソッドの実装が場合 `null`:  
  
-   両方 `expression`します。型および `type` は null 非許容のノードはリフトされていません。  
  
-   それ以外の場合、ノードが解除されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">間で変換演算子が定義されていない <paramref name="expression" />します。型および <paramref name="type" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
        <summary>変換後の型がオーバーフローした場合に例外をスローし、実装メソッドが指定される変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />、<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、および <see cref="P:System.Linq.Expressions.Expression.Type" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティ、その結果の <xref:System.Linq.Expressions.UnaryExpression> メソッドの実装に設定されています。<xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> プロパティが `false` です。 ノードが無効になると場合 <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> は `true`です。 それ以外の場合は `false` です。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   メソッドがない場合 `null`, 、メソッドの実装であります。 Void 以外を表す必要があります `static` \(`Shared` Visual basic\) を 1 つの引数を受け取るメソッドです。  
  
-   それ以外の場合、いずれか `expression`します。型または `type` 暗黙的または明示的な変換演算子を定義するユーザー定義型です、 <xref:System.Reflection.MethodInfo> を表す演算子はメソッドの実装です。  
  
-   それ以外の場合は、次のように処理されます。  
  
    -   両方 `expression`します。型および `type` 数値またはブール値の型または null 許容値または null 非許容の列挙型を表す、メソッドの実装は `null`です。  
  
    -   いずれか `expression`します。型または `type` が参照型であり、明示的なボックス化ボックス化解除、またはから参照変換が存在する `expression`です。型を `type`, 、メソッドの実装 `null`します。  
  
#### リフトされているかいないか.  
 メソッドの実装がない場合 `null`:  
  
-   場合 `expression`します。型が実装するメソッドの引数の型に割り当てることが、実装するメソッドの戻り値の型に割り当てることができる `type`, 、ノードはリフトされていません。  
  
-   いずれかまたは両方の場合の `expression`です。型または `type` null 許容値型と対応する null 非許容値型はそれぞれの引数の型と実装するメソッドの戻り値の型に等しく、ノードはリフトされています。  
  
 メソッドの実装が場合 `null`:  
  
-   両方 `expression`します。型および `type` は null 非許容のノードはリフトされていません。  
  
-   それ以外の場合、ノードが解除されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 1 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">間で変換演算子が定義されていない <paramref name="expression" />します。型および <paramref name="type" />です。  
  
 または  
  
 <paramref name="expression" />.種類はによって表されるメソッドの引数の型に割り当てることがない <paramref name="method" />します。  
  
 または  
  
 によって表されるメソッドの戻り値の型 <paramref name="method" /> に割り当てることができません <paramref name="type" />します。  
  
 または  
  
 <paramref name="expression" />.型または <paramref name="type" /> null 許容値型であり、対応する null 非許容値型でない引数の型または戻り値の型それぞれによって表されるメソッドの <paramref name="method" />です。</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">一致する 2 つ以上のメソッド、 <paramref name="method" /> の説明が見つかりました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression DebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
        <Parameter Name="startLine" Type="System.Int32" />
        <Parameter Name="startColumn" Type="System.Int32" />
        <Parameter Name="endLine" Type="System.Int32" />
        <Parameter Name="endColumn" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="document">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
        <param name="startLine">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 先頭行。 1 以上であることが必要です。</param>
        <param name="startColumn">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の先頭列。 1 以上であることが必要です。</param>
        <param name="endLine">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終行。 開始行の値以上である必要があります。</param>
        <param name="endColumn">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終列。 最終行が先頭行と同じである場合、これは開始列の値以上である必要があります。 どのような場合でも、0 より大きい値である必要があります。</param>
        <summary>指定したスパンを使用して、<see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">デクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>デクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この式は、機能され、それに渡されるオブジェクトの値を変更しません。  
  
   
  
## 例  
 次のコード例では、指定された値から 1 を減算する式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#5)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">デクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <summary>式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>デクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This expression is functional and does not change the value of the object passed to it.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Default (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Default(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Default(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>指定した型に設定された <see cref="T:System.Linq.Expressions.DefaultExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DefaultExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した型に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 The following code example shows how to create an expression that represents a default vaule for a given type.  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#6)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>算術除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 除算演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの除算演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの除算演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 次のコード例では、最初の引数の 2 番目の引数で除算する式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#7)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">除算演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>算術除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both **languageKeyword tag is not supported!!!!**  
. Otherwise, they are **languageKeyword tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is **languageKeyword tag is not supported!!!!**  
.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If **parameterReference tag is not supported!!!!**  
     is not **languageKeyword tag is not supported!!!!**  
     and it represents a non\-void, **languageKeyword tag is not supported!!!!**  
     \(**languageKeyword tag is not supported!!!!**  
     in Visual Basic\) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either **parameterReference tag is not supported!!!!**  
     or **parameterReference tag is not supported!!!!**  
     represents a user\-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are numeric types, the implementing method is **languageKeyword tag is not supported!!!!**  
    .  
  
#### Node Type and Lifted versus Non\-Lifted  
 If the implementing method is not **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non\-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non\-nullable value type.  
  
 If the implementing method is **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both non\-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> \(Visual Basic では <see langword="Shared" />\) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には除算演算子が定義されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="binder">動的操作の実行時バインダー。</param>
        <param name="returnType">動的な式の結果の型。</param>
        <param name="arguments">動的操作の引数。</param>
        <summary>指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">動的操作の実行時バインダー。</param>
        <param name="returnType">動的な式の結果の型。</param>
        <param name="arg0">動的操作の 1 番目の引数。</param>
        <summary>指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="binder">動的操作の実行時バインダー。</param>
        <param name="returnType">動的な式の結果の型。</param>
        <param name="arguments">動的操作の引数。</param>
        <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> 結果のプロパティは、引数の型から推論され、指定した型を返します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">動的操作の実行時バインダー。</param>
        <param name="returnType">動的な式の結果の型。</param>
        <param name="arg0">動的操作の 1 番目の引数。</param>
        <param name="arg1">動的操作の 2 番目の引数。</param>
        <summary>指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">動的操作の実行時バインダー。</param>
        <param name="returnType">動的な式の結果の型。</param>
        <param name="arg0">動的操作の 1 番目の引数。</param>
        <param name="arg1">動的操作の 2 番目の引数。</param>
        <param name="arg2">動的操作の 3 番目の引数。</param>
        <summary>指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">動的操作の実行時バインダー。</param>
        <param name="returnType">動的な式の結果の型。</param>
        <param name="arg0">動的操作の 1 番目の引数。</param>
        <param name="arg1">動的操作の 2 番目の引数。</param>
        <param name="arg2">動的操作の 3 番目の引数。</param>
        <param name="arg3">動的操作の 4 番目の引数。</param>
        <summary>指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="addMethod">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
        <param name="arguments">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</param>
        <summary>2 番目の引数として <see cref="T:System.Linq.Expressions.ElementInit" /> を指定して、<see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</summary>
        <returns>指定した値に設定された <see cref="T:System.Linq.Expressions.ElementInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter must represent an instance method named "Add" \(case insensitive\). The add method must have the same number of parameters as the number of elements in **parameterReference tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in **parameterReference tag is not supported!!!!**  
 must be assignable to the type of the corresponding parameter of the add method, possibly after **newTerm tag is not supported!!!!**  
.  
  
> [!NOTE]
>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of **parameterReference tag is not supported!!!!**  
> .  
  
   
  
## 例  
 The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.  
  
 [!code-csharp[System.Linq.Expressions.Expression\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="addMethod" /> または <paramref name="arguments" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="addMethod" /> が表すメソッドに、"Add" \(大文字と小文字を区別しない\) の名前が付いていません。  
  
 または  
  
 <paramref name="addMethod" /> が表すメソッドは、インスタンス メソッドではありません。  
  
 または  
  
 <paramref name="arguments" /> には、<paramref name="addMethod" /> が表すメソッドのパラメーターの数と同じ数の要素が含まれていません。  
  
 または  
  
 <paramref name="arguments" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが、<paramref name="addMethod" /> の表すメソッドの対応するパラメーターの型に割り当てることができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="addMethod">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
        <param name="arguments">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> オブジェクトの配列。</param>
        <summary>2 番目の引数として値の配列を指定して、<see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</summary>
        <returns>指定した値に設定された <see cref="T:System.Linq.Expressions.ElementInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `addMethod` パラメーターは、"Add"\(大文字と小文字\) という名前のインスタンス メソッドを表す必要があります。 Add メソッド内の要素の数と同数のパラメーターを持つ必要があります `arguments`します。<xref:System.Linq.Expressions.Expression.Type%2A> 内の各要素のプロパティ `arguments` add メソッドの対応するパラメーターの型に代入する必要がありますおそらく後 *を引用符で囲む*します。  
  
> [!NOTE]
>  対応するメソッドのパラメーターが型の場合にのみ、要素は引用符で囲まないで <xref:System.Linq.Expressions.Expression>します。 要素にラップする手段を引用符で囲む、 <xref:System.Linq.Expressions.ExpressionType.Quote> ノードです。 結果として得られるノードは、 <xref:System.Linq.Expressions.UnaryExpression> が <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> プロパティは、要素の `arguments`です。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> を作成する方法、 <xref:System.Linq.Expressions.ElementInit> 呼び出しを表す、 <xref:System.Collections.Generic.Dictionary%602.Add%2A> ディクショナリ コレクションの要素を初期化します。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="addMethod" /> または <paramref name="arguments" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">AddMethod を表しますが、メソッドは、"Add"\(大文字と小文字\) という名前です。  
  
 または  
  
 メソッド addMethod を表しますがインスタンス メソッドではありません。  
  
 または  
  
 引数に同じ数値が含まれていない addMethod が表すメソッドのパラメーターの数としての要素。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティの 1 つまたは複数の要素の <paramref name="arguments" /> メソッドの対応するパラメーターの型に割り当てることができませんを <paramref name="addMethod" /> を表します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Empty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Void" /> 型の空の式を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DefaultExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、<see cref="F:System.Linq.Expressions.ExpressionType.Default" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="T:System.Void" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An empty expression can be used where an expression is expected but no action is desired. For example, you can use an empty expression as the last expression in a block expression. In this case, the block expression's return value is void.  
  
   
  
## 例  
 The following code example shows how to create an empty expression and add it to a block expression.  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#31)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> プロパティは `true`です。 それ以外の場合は `false` です。<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 等値演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   メソッドの実装は、それ以外の場合、 `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされているかどうか、ノードがリフトされており、ノードの型は <xref:System.Boolean>:  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は <xref:System.Boolean>です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は <xref:System.Boolean>です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は <xref:System.Boolean>です。  
  
   
  
## 例  
 次のコード例では、2 つの引数の値が等しいかどうかを確認する式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#8)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">等値演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="liftToNull">
          <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> プロパティは `true` と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティに等しい `liftToNull`します。 それ以外の場合、それらが両方とも `false`します。 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `method` は `null` され、void ではない、表します `static` \(`Shared` Visual Basic で\) 2 つの引数を受け取るメソッド メソッドの実装であります。  
  
-   それ以外の場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 等値演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   メソッドの実装は、それ以外の場合、 `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされると、ノードはリフトされています。また、ノードの型は null 許容 <xref:System.Boolean> 場合 `liftToNull` は `true` または <xref:System.Boolean> 場合 `liftToNull` は `false`:  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は <xref:System.Boolean>です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は <xref:System.Boolean>です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型が null 許容 <xref:System.Boolean> 場合 `liftToNull` は `true` または <xref:System.Boolean> 場合 `liftToNull` は `false`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 2 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> との等値演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>ユーザー定義型の <see cref="T:System.Linq.Expressions.BinaryExpression" /> を使用して、ビットごとの <see langword="XOR" /> 演算を表す <c>op_ExclusiveOr</c> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> いずれかのプロパティ `left` または `right` オーバー ロードを持つユーザー定義型を表す、 `XOR` 、演算子、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型は整数またはブール型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの結果型 `XOR` 演算子。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの結果の型に対応する null 許容型 `XOR` 演算子。  
  
   
  
## 例  
 次のコード例では、論理 XOR 演算を表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#9)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see langword="XOR" /> の演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>ユーザー定義型の <see cref="T:System.Linq.Expressions.BinaryExpression" /> を使用して、ビットごとの <see langword="XOR" /> 演算を表す <c>op_ExclusiveOr</c> を作成します。 実装メソッドを指定できます。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both **languageKeyword tag is not supported!!!!**  
. Otherwise, they are **languageKeyword tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is **languageKeyword tag is not supported!!!!**  
.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the chosen implementing method for the operation:  
  
-   If **parameterReference tag is not supported!!!!**  
     is not **languageKeyword tag is not supported!!!!**  
     and it represents a non\-void, **languageKeyword tag is not supported!!!!**  
     \(**languageKeyword tag is not supported!!!!**  
     in Visual Basic\) method that takes two arguments, it is the implementing method.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either **parameterReference tag is not supported!!!!**  
     or **parameterReference tag is not supported!!!!**  
     represents a user\-defined type that overloads the **languageKeyword tag is not supported!!!!**  
     operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are integral or Boolean types, the implementing method is **languageKeyword tag is not supported!!!!**  
    .  
  
#### Node Type and Lifted versus Non\-Lifted  
 If the implementing method is not **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non\-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non\-nullable value type.  
  
 If the implementing method is **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both non\-nullable, the node is not lifted. The type of the node is the result type of the predefined **languageKeyword tag is not supported!!!!**  
     operator.  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined **languageKeyword tag is not supported!!!!**  
     operator.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> \(Visual Basic では <see langword="Shared" />\) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には <see langword="XOR" /> 演算子が定義されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>ユーザー定義型の <see cref="T:System.Linq.Expressions.BinaryExpression" /> を使用して、ビットごとの XOR 代入演算を表す <c>op_ExclusiveOr</c> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>ユーザー定義型の <see cref="T:System.Linq.Expressions.BinaryExpression" /> を使用して、ビットごとの XOR 代入演算を表す <c>op_ExclusiveOr</c> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>ユーザー定義型の <see cref="T:System.Linq.Expressions.BinaryExpression" /> を使用して、ビットごとの XOR 代入演算を表す <c>op_ExclusiveOr</c> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Reflection.FieldInfo field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。<see langword="static" /> \(Visual Basic では <see langword="Shared" />\) の場合、<c>expression</c> は <see langword="null" /> にする必要があります。</param>
        <param name="field">
          <see cref="T:System.Reflection.FieldInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</param>
        <summary>フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.MemberExpression> に等しい、 <xref:System.Reflection.FieldInfo.FieldType%2A> の `field`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="field" /> は <see langword="null" /> です。  
  
 または  
  
 によって表されるフィールド <paramref name="field" /> は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\) と <paramref name="expression" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expression" />.種類はによって表されるフィールドの宣言型に割り当てることがない <paramref name="field" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> に <see cref="P:System.Linq.Expressions.Expression.Type" /> という名前のフィールドが含まれている <c>fieldName</c>。 静的フィールドの場合は null を指定できます。</param>
        <param name="fieldName">アクセスするフィールドの名前。</param>
        <summary>フィールドの名前を指定してフィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> により示されるフィールドを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.FieldInfo" /> プロパティを含む <paramref name="fieldName" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.MemberExpression> に等しい、 <xref:System.Reflection.FieldInfo.FieldType%2A> のプロパティ、 <xref:System.Reflection.FieldInfo> により示されるフィールドを表す `fieldName`します。  
  
 このメソッドは、検索 `expression`します。型およびその基本型の名前を持つフィールドの `fieldName`です。 パブリック フィールドは、非パブリック フィールドに対する基本設定を指定します。 一致するフィールドが見つかった場合、このメソッドは成功 `expression` と <xref:System.Reflection.FieldInfo> にそのフィールドを表す <xref:System.Linq.Expressions.Expression.Field%2A>します。  
  
   
  
## 例  
 次のコード例では、フィールドへのアクセスを表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#37)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> または <paramref name="fieldName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">という名前のフィールド <paramref name="fieldName" /> で定義された <paramref name="expression" />しません。型またはその基本型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Type type, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">フィールドの格納オブジェクト。 静的フィールドの場合は null を指定できます。</param>
        <param name="type">フィールドを格納している <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <param name="fieldName">アクセスされるフィールド。</param>
        <summary>フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionType">
      <MemberSignature Language="C#" Value="public static Type GetActionType (Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetActionType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <see cref="T:System.Type" /> デリゲート型の型引数を指定する最大 16 個の <see langword="System.Action" /> オブジェクトの配列。</param>
        <summary>特定の型引数を持つ汎用 <see cref="T:System.Type" /> デリゲート型を表す <c>System.Action</c> オブジェクトを作成します。</summary>
        <returns>指定した型引数を持つ <c>System.Action</c> デリゲートの型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 たとえば場合の要素 `typeArgs` 型を表す `T1…Tn`, 、その結果 <xref:System.Type> オブジェクトが構築されたデリゲート型を表す `System.Action<T1,…,Tn>` C\# の場合または `System.Action(Of T1,…,Tn)` Visual Basic でします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeArgs" /> 16 個の要素が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeArgs" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDelegateType">
      <MemberSignature Language="C#" Value="public static Type GetDelegateType (Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetDelegateType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">デリゲートの型引数。</param>
        <summary>特定の型引数を持つ汎用 <see cref="P:System.Linq.Expressions.Expression.Type" /> デリゲート型または <c>System.Func</c> デリゲート型を表す <c>System.Action</c> オブジェクトを取得します。</summary>
        <returns>デリゲート型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 最後の型引数では、デリゲートの戻り値の型を決定します。 十分な大きさ Func またはアクションがない場合は、カスタム デリゲート型が生成されます。  
  
 Func と同様には、最後の引数は、戻り値の型です。 アクションを生成する System.Void を設定できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFuncType">
      <MemberSignature Language="C#" Value="public static Type GetFuncType (Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetFuncType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <see cref="T:System.Type" /> デリゲート型の型引数を指定する 1 個から 17 個の <see langword="System.Func" /> オブジェクトの配列。</param>
        <summary>特定の型引数を持つ汎用 <see cref="P:System.Linq.Expressions.Expression.Type" /> デリゲート型を表す <c>System.Func</c> オブジェクトを作成します。 最後の型引数で、作成するデリゲートの戻り値の型を指定します。</summary>
        <returns>指定した型引数を持つ <c>System.Func</c> デリゲートの型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `typeArgs` 少なくとも 1 つと、最大 17 の要素を含める必要があります。  
  
 たとえば場合の要素 `typeArgs` 型を表す `T1…Tn`, 、その結果 <xref:System.Type> オブジェクトが構築されたデリゲート型を表す `System.Func<T1,…,Tn>` C\# の場合または `System.Func(Of T1,…,Tn)` Visual Basic でします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeArgs" /> 少ない 1 つ含まれるまたは 17 以上の要素。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeArgs" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <summary>go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
        <returns>Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、指定された値に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <see cref="P:System.Linq.Expressions.GotoExpression.Target" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例を含む式を作成する方法、 <xref:System.Linq.Expressions.GotoExpression> オブジェクトです。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#45)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
        <summary>go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。 ジャンプ時にラベルに渡す値を指定できます。</summary>
        <returns>Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>型を指定して、go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
        <returns>Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、指定された値に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> プロパティ、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>型を指定して、go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。 ジャンプ時にラベルに渡す値を指定できます。</summary>
        <returns>Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>"大なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> プロパティは `true`です。 それ以外の場合は `false` です。<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 「大なり」演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされているかどうか、ノードがリフトされており、ノードの型は <xref:System.Boolean>:  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は <xref:System.Boolean>です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は <xref:System.Boolean>です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は <xref:System.Boolean>です。  
  
   
  
## 例  
 次のコード例では、2 つの整数を比較する式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#10)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">「大なり」演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="liftToNull">
          <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>"大なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> プロパティは `true` と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティに等しい `liftToNull`します。 それ以外の場合、それらが両方とも `false`します。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `method` は `null` され、void ではない、表します `static` \(`Shared` Visual Basic で\) 2 つの引数を受け取るメソッド メソッドの実装であります。  
  
-   それ以外の場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 「大なり」演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされると、ノードはリフトされています。また、ノードの型は null 許容 <xref:System.Boolean> 場合 `liftToNull` は `true` または <xref:System.Boolean> 場合 `liftToNull` は `false`:  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は <xref:System.Boolean>です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は <xref:System.Boolean>です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型が null 許容 <xref:System.Boolean> 場合 `liftToNull` は `true` または <xref:System.Boolean> 場合 `liftToNull` は `false`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 2 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> とに、「大なり」演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> プロパティは `true`です。 それ以外の場合は `false` です。<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 「以上」演算子をオーバー ロードするユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされているかどうか、ノードがリフトされており、ノードの型は <xref:System.Boolean>:  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は <xref:System.Boolean>です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は <xref:System.Boolean>です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は <xref:System.Boolean>です。  
  
   
  
## 例  
 次のコード例では、2 つの整数を比較する式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#11)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">「以上」演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="liftToNull">
          <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is **languageKeyword tag is not supported!!!!**  
 and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to **parameterReference tag is not supported!!!!**  
. Otherwise, they are both **languageKeyword tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is **languageKeyword tag is not supported!!!!**  
.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If **parameterReference tag is not supported!!!!**  
     is not **languageKeyword tag is not supported!!!!**  
     and it represents a non\-void, **languageKeyword tag is not supported!!!!**  
     \(**languageKeyword tag is not supported!!!!**  
     in Visual Basic\) method that takes two arguments, it is the implementing method.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either **parameterReference tag is not supported!!!!**  
     or **parameterReference tag is not supported!!!!**  
     represents a user\-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are numeric types, the implementing method is **languageKeyword tag is not supported!!!!**  
    .  
  
#### Node Type and Lifted versus Non\-Lifted  
 If the implementing method is not **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if **parameterReference tag is not supported!!!!**  
     is **languageKeyword tag is not supported!!!!**  
     or <xref:System.Boolean> if **parameterReference tag is not supported!!!!**  
     is **languageKeyword tag is not supported!!!!**  
    :  
  
    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non\-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both non\-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if **parameterReference tag is not supported!!!!**  
     is **languageKeyword tag is not supported!!!!**  
     or <xref:System.Boolean> if **parameterReference tag is not supported!!!!**  
     is **languageKeyword tag is not supported!!!!**  
    .  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> \(Visual Basic では <see langword="Shared" />\) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には "greater than or equal" 演算子が定義されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IfThen">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThen(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
        <param name="ifTrue">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.ConditionalExpression" /> ステートメントを指定して、条件付きブロックを表す <see langword="if" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。<see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> プロパティは既定の式に設定されます。また、このメソッドによって返される結果の <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の型は <see cref="T:System.Void" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例では、条件付きブロックを表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#32)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfThenElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThenElse(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
        <param name="ifTrue">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
        <param name="ifFalse">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.ConditionalExpression" /> ステートメントと <see langword="if" /> ステートメントを指定して、条件付きブロックを表す <see langword="else" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。 このメソッドによって返される結果の <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の型は <see cref="T:System.Void" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例では、条件付きブロックを表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#33)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">インクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>インクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この式は、機能され、渡されるオブジェクトの値を変更しません。  
  
   
  
## 例  
 次のコード例では、インクリメント演算を表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#24)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">インクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <summary>式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>インクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この式は、機能され、それに渡されるオブジェクトの値を変更しません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">適用するデリゲートまたはラムダ式を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arguments">デリゲートまたはラムダ式が適用される引数を表す <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトを格納している <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>引数式のリストにデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</summary>
        <returns>指定された引数に、指定されたデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.InvocationExpression> によって表されるデリゲートの戻り値の型を表す `expression`します。入力します。  
  
 <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.InvocationExpression> 空場合 `arguments` は `null`です。 それ以外の場合と同じ要素が含まれている `arguments` これらの一部を除く <xref:System.Linq.Expressions.Expression> オブジェクトがあります *引用符で囲まれた*します。  
  
> [!NOTE]
>  要素は引用符で囲むことによって、デリゲートの対応するパラメーターが表される場合にのみ `expression` 型 <xref:System.Linq.Expressions.Expression>します。 要素にラップする手段を引用符で囲む、 <xref:System.Linq.Expressions.ExpressionType.Quote> ノードです。 結果として得られるノードは、 <xref:System.Linq.Expressions.UnaryExpression> が <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> プロパティは、要素の `arguments`です。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> を作成する方法、 <xref:System.Linq.Expressions.InvocationExpression> を表す、指定された引数がラムダ式の呼び出しです。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expression" />.型がデリゲート型を表すできない、または <see cref="T:System.Linq.Expressions.Expression`1" />です。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素のプロパティに <paramref name="arguments" /> によって表されるデリゲートの対応するパラメーターの型に割り当てることができません <paramref name="expression" />します。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="arguments" /> によって表されるデリゲートのパラメーターの一覧と同じ数要素にはが含まれていない <paramref name="expression" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">適用するデリゲートまたはラムダ式を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arguments">デリゲートまたはラムダ式が適用される引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
        <summary>引数式のリストにデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</summary>
        <returns>指定された引数に、指定されたデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.InvocationExpression> によって表されるデリゲートの戻り値の型を表す `expression`します。入力します。  
  
 <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.InvocationExpression> 空場合 `arguments` は `null`です。 それ以外の場合と同じ要素が含まれている `arguments` これらの一部を除く <xref:System.Linq.Expressions.Expression> オブジェクトがあります *引用符で囲まれた*します。  
  
> [!NOTE]
>  要素は引用符で囲むことによって、デリゲートの対応するパラメーターが表される場合にのみ `expression` 型 <xref:System.Linq.Expressions.Expression>します。 要素にラップする手段を引用符で囲む、 <xref:System.Linq.Expressions.ExpressionType.Quote> ノードです。 結果として得られるノードは、 <xref:System.Linq.Expressions.UnaryExpression> が <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> プロパティは、要素の `arguments`です。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> を作成する方法、 <xref:System.Linq.Expressions.InvocationExpression> を表す、指定された引数がラムダ式の呼び出しです。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expression" />.型がデリゲート型を表すできない、または <see cref="T:System.Linq.Expressions.Expression`1" />です。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素のプロパティに <paramref name="arguments" /> によって表されるデリゲートの対応するパラメーターの型に割り当てることができません <paramref name="expression" />します。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="arguments" /> によって表されるデリゲートのパラメーターの一覧と同じ数要素にはが含まれていない <paramref name="expression" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>式が false に評価されるかどうかを返します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <summary>式が false に評価されるかどうかを返します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>式が true に評価されるかどうかを返します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <summary>式が true に評価されるかどうかを返します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>void 型で名前なしのラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
        <returns>新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例を含む式を作成する方法、 <xref:System.Linq.Expressions.LabelTarget> オブジェクトです。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">この <see cref="T:System.Linq.Expressions.LabelTarget" /> が関連付けられる <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
        <summary>既定値のないラベルを表す <see cref="T:System.Linq.Expressions.LabelExpression" /> を作成します。</summary>
        <returns>既定値のない <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">ラベルの名前。</param>
        <summary>指定された名前を持つ void 型のラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
        <returns>新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">ラベルにジャンプするときに渡す値の型。</param>
        <summary>型を指定して、ラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
        <returns>新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.LabelTarget> ループ式内のオブジェクト。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="defaultValue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">この <see cref="T:System.Linq.Expressions.LabelTarget" /> が関連付けられる <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
        <param name="defaultValue">通常の制御フローを経てラベルに到達した場合のこの <see cref="T:System.Linq.Expressions.LabelExpression" /> の値。</param>
        <summary>指定された既定値を持つラベルを表す <see cref="T:System.Linq.Expressions.LabelExpression" /> を作成します。</summary>
        <returns>指定された既定値を持つ <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">ラベルにジャンプするときに渡す値の型。</param>
        <param name="name">ラベルの名前。</param>
        <summary>指定した型および名前を使用して、ラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
        <returns>新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="parameters">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
        <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
        <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="parameters">
          <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</param>
        <summary>最初にデリゲート型を構築することにより <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `parameters` パラメーターには、16 個の要素が持つことはできません。  
  
 要素 `parameters` の参照のパラメーターの式と同じにする必要があります `body`します。  
  
 このメソッドは、適切なデリゲート型のいずれかを構築、 `System.Func` 汎用デリゲート。 次に、デリゲート型のいずれかに渡します、 <xref:System.Linq.Expressions.ExpressionType.Lambda> を作成するファクトリ メソッド、 <xref:System.Linq.Expressions.LambdaExpression>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> は <see langword="null" /> です。  
  
 または  
  
 1 つまたは複数の要素の <paramref name="parameters" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="parameters" /> 16 個の要素が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
        <param name="parameters">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
        <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
        <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
        <param name="parameters">
          <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</param>
        <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
        <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="name">ラムダの名前。 デバッグ情報を出力するために使用します。</param>
        <param name="parameters">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
        <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
        <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="T:System.Type" />。</param>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="parameters">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
        <summary>最初にデリゲート型を構築することにより <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。 これは、コンパイル時にデリゲート型が不明な場合に使用できます。</summary>
        <returns>
          <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と等しい <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含むラムダ式を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この関数から返されるオブジェクトの型が <xref:System.Linq.Expressions.Expression%601>です。<xref:System.Linq.Expressions.LambdaExpression> をコンパイル時に、ラムダ式の具象型を認識していないため、返されたオブジェクトを表す型を使用します。  
  
 によって表されるデリゲート型のパラメーターの数`delegateType` の長さでなければなりません。 `parameters`します。  
  
 要素 `parameters` の参照のパラメーターの式と同じにする必要があります `body`します。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 結果として得られるオブジェクトのプロパティに等しい `delegateType`します。 場合 `parameters` は `null`, 、 <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> 結果のオブジェクトのプロパティは空のコレクション。  
  
   
  
## 例  
 次の例では、渡された引数に 1 を加算するラムダ式を表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#42)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="delegateType" /> または <paramref name="body" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="delegateType" /> デリゲート型を表していません。  
  
 または  
  
 <paramref name="body" />.型によって表されるデリゲート型の戻り値の型に割り当てることはない型を表す <paramref name="delegateType" />します。  
  
 または  
  
 <paramref name="parameters" /> によって表されるデリゲート型のパラメーターのリストと同じ数の要素を含まない <paramref name="delegateType" />します。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素のプロパティに <paramref name="parameters" /> によって表されるデリゲート型の対応するパラメーターの型の型から割り当てることができません <paramref name="delegateType" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="T:System.Type" />。</param>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="parameters">
          <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</param>
        <summary>最初にデリゲート型を構築することにより <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。 これは、コンパイル時にデリゲート型が不明な場合に使用できます。</summary>
        <returns>
          <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と等しい <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含むラムダ式を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この関数から返されるオブジェクトの型が<xref:System.Linq.Expressions.Expression%601>です。<xref:System.Linq.Expressions.LambdaExpression>をコンパイル時に、ラムダ式の具体的な型を認識していないため、返されたオブジェクトを表す型を使用します。  
  
 によって表されるデリゲート型のパラメーターの数`delegateType`の長さでなければなりません。`parameters`です。  
  
 要素`parameters`でパラメーターの式と同じ参照にする必要があります`body`です。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A>結果として得られるオブジェクトのプロパティと等しい`delegateType`です。 場合`parameters`は`null`、<xref:System.Linq.Expressions.LambdaExpression.Parameters%2A>結果として得られるオブジェクトのプロパティが空のコレクション。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="delegateType" /> または <paramref name="body" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="delegateType" />デリゲート型を表しません。  
  
 または  
  
 <paramref name="body" />.型が型によって表されるデリゲート型の戻り値の型に割り当てることはできませんを表す<paramref name="delegateType" />です。  
  
 または  
  
 <paramref name="parameters" />によって表されるデリゲート型のパラメーターのリストと同じ数の要素を含まない<paramref name="delegateType" />です。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" />の要素のプロパティ<paramref name="parameters" />によって表されるデリゲート型の対応するパラメーターの型の型から割り当てることはできません<paramref name="delegateType" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="name">ラムダの名前。 デバッグ情報を出力するために使用します。</param>
        <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
        <param name="parameters">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
        <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
        <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
        <param name="parameters">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
        <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
        <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
        <param name="parameters">
          <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</param>
        <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
        <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="name">ラムダの名前。 デバッグ情報を出力するために使用します。</param>
        <param name="parameters">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
        <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
        <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="name">ラムダの名前。 デバッグ情報を出力するために使用します。</param>
        <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
        <param name="parameters">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
        <summary>最初にデリゲート型を構築することにより LambdaExpression を作成します。</summary>
        <returns>Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">デリゲート型。</typeparam>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="parameters">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
        <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デリゲート型のパラメーターの数 `TDelegate` 内の要素の数と同じにする必要があります `parameters`します。  
  
 要素 `parameters` の参照のパラメーターの式と同じにする必要があります `body`します。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 結果として得られるオブジェクトのプロパティが型を表す `TDelegate`します。 場合 `parameters` は `null`, 、 <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> 結果のオブジェクトのプロパティは空のコレクション。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="TDelegate" /> デリゲート型がありません。  
  
 または  
  
 <paramref name="body" />.型の戻り値の型に割り当てることはない型を表す <paramref name="TDelegate" />します。  
  
 または  
  
 <paramref name="parameters" /> パラメーターのリストと同じ数の要素を含まない <paramref name="TDelegate" />します。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素のプロパティに <paramref name="parameters" /> の対応するパラメーターの型の型から割り当てることができません <paramref name="TDelegate" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">デリゲート型。</typeparam>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="parameters">
          <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</param>
        <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デリゲート型のパラメーターの数`TDelegate`内の要素の数と同じにする必要があります`parameters`です。  
  
 要素`parameters`でパラメーターの式と同じ参照にする必要があります`body`です。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A>結果として得られるオブジェクトのプロパティが型を表す`TDelegate`です。 場合`parameters`は`null`、<xref:System.Linq.Expressions.LambdaExpression.Parameters%2A>結果として得られるオブジェクトのプロパティが空のコレクション。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="TDelegate" />デリゲート型ではありません。  
  
 または  
  
 <paramref name="body" />.型の戻り値の型に割り当てることはできません型を表す<paramref name="TDelegate" />です。  
  
 または  
  
 <paramref name="parameters" />パラメーターのリストと同じ数の要素を含まない<paramref name="TDelegate" />です。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" />の要素のプロパティ<paramref name="parameters" />の対応するパラメーターの型の型から割り当てることはできません<paramref name="TDelegate" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">デリゲート型。</typeparam>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
        <param name="parameters">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
        <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">デリゲート型。</typeparam>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
        <param name="parameters">
          <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</param>
        <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">デリゲート型。</typeparam>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="name">ラムダの名前。 デバッグ情報を生成するために使用します。</param>
        <param name="parameters">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
        <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">デリゲート型。</typeparam>
        <param name="body">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
        <param name="name">ラムダの名前。 デバッグ情報を生成するために使用します。</param>
        <param name="tailCall">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
        <param name="parameters">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
        <summary>デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作の選択したメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 左シフト演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型は、整数型 \(のいずれかの <xref:System.Byte>, 、<xref:System.SByte>, 、<xref:System.Int16>, 、<xref:System.UInt16>, 、<xref:System.Int32>, 、<xref:System.UInt32>, 、<xref:System.Int64>, 、<xref:System.UInt64>, 、または対応する null 許容型\) と `right`です。種類は <xref:System.Int32>, 、メソッドの実装 `null`します。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの左シフト演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの左シフト演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">左シフト演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作の選択したメソッドの実装を決定します。  
  
-   場合 `method` は `null` 、void 以外を表します `static` \(`Shared` Visual Basic で\) 2 つの引数を受け取るメソッド ノードのメソッドの実装であります。  
  
-   それ以外の場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 左シフト演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型は、整数型 \(のいずれかの <xref:System.Byte>, 、<xref:System.SByte>, 、<xref:System.Int16>, 、<xref:System.UInt16>, 、<xref:System.Int32>, 、<xref:System.UInt32>, 、<xref:System.Int64>, 、<xref:System.UInt64>, 、または対応する null 許容型\) と `right`です。種類は <xref:System.Int32>, 、メソッドの実装 `null`します。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの左シフト演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの左シフト演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 2 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> の左シフト演算子が定義されていないと <paramref name="left" />です。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> プロパティは `true`です。 それ以外の場合は `false` です。<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 操作のメソッドの実装は、次の規則に基づいて選択されます。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 「小なり」演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされているかどうか、ノードがリフトされており、ノードの型は <xref:System.Boolean>:  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は <xref:System.Boolean>です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は <xref:System.Boolean>です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は <xref:System.Boolean>です。  
  
   
  
## 例  
 次のコード例では、2 つの整数を比較する式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#25)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">「小なり」演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="liftToNull">
          <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is **languageKeyword tag is not supported!!!!**  
 and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to **parameterReference tag is not supported!!!!**  
. Otherwise, they are both **languageKeyword tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is **languageKeyword tag is not supported!!!!**  
.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If **parameterReference tag is not supported!!!!**  
     is not **languageKeyword tag is not supported!!!!**  
     and it represents a non\-void, **languageKeyword tag is not supported!!!!**  
     \(**languageKeyword tag is not supported!!!!**  
     in Visual Basic\) method that takes two arguments, it is the implementing method.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either **parameterReference tag is not supported!!!!**  
     or **parameterReference tag is not supported!!!!**  
     represents a user\-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are numeric types, the implementing method is **languageKeyword tag is not supported!!!!**  
    .  
  
#### Node Type and Lifted versus Non\-Lifted  
 If the implementing method is not **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if **parameterReference tag is not supported!!!!**  
     is **languageKeyword tag is not supported!!!!**  
     or <xref:System.Boolean> if **parameterReference tag is not supported!!!!**  
     is **languageKeyword tag is not supported!!!!**  
    :  
  
    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non\-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both non\-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if **parameterReference tag is not supported!!!!**  
     is **languageKeyword tag is not supported!!!!**  
     or <xref:System.Boolean> if **parameterReference tag is not supported!!!!**  
     is **languageKeyword tag is not supported!!!!**  
    .  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> \(Visual Basic では <see langword="Shared" />\) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には "less than" 演算子が定義されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> プロパティは `true`です。 それ以外の場合は `false` です。<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 「以下」演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされているかどうか、ノードがリフトされており、ノードの型は <xref:System.Boolean>:  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は <xref:System.Boolean>です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は <xref:System.Boolean>です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は <xref:System.Boolean>です。  
  
   
  
## 例  
 次のコード例では、2 つの整数を比較する式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#26)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">「以下」演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="liftToNull">
          <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> プロパティは `true` と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティに等しい `liftToNull`します。 それ以外の場合、それらが両方とも `false`します。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `method` は `null` され、void ではない、表します `static` \(`Shared` Visual Basic で\) 2 つの引数を受け取るメソッド メソッドの実装であります。  
  
-   それ以外の場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 「以下」演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされると、ノードはリフトされています。また、ノードの型は null 許容 <xref:System.Boolean> 場合 `liftToNull` は `true` または <xref:System.Boolean> 場合 `liftToNull` は `false`:  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は <xref:System.Boolean>です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は <xref:System.Boolean>です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型が null 許容 <xref:System.Boolean> 場合 `liftToNull` は `true` または <xref:System.Boolean> 場合 `liftToNull` は `false`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 2 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> との「以下」演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="member">
          <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定するフィールドまたはプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
        <param name="initializers">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</param>
        <summary>メンバーがフィールドまたはプロパティである <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="member" /> は <see langword="null" /> です。  
  
 または  
  
 1 つまたは複数の要素の <paramref name="initializers" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="member" /> フィールドまたはプロパティを表していません。  
  
 または  
  
 <see cref="P:System.Reflection.FieldInfo.FieldType" /> または <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> フィールドまたはプロパティを <paramref name="member" /> を表しますが実装していない <see cref="T:System.Collections.IEnumerable" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member">
          <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定するフィールドまたはプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
        <param name="initializers">
          <see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> オブジェクトの配列。</param>
        <summary>メンバーがフィールドまたはプロパティである <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="member" /> は <see langword="null" /> です。  
  
 または  
  
 1 つまたは複数の要素の <paramref name="initializers" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="member" /> フィールドまたはプロパティを表していません。  
  
 または  
  
 <see cref="P:System.Reflection.FieldInfo.FieldType" /> または <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> フィールドまたはプロパティを <paramref name="member" /> を表しますが実装していない <see cref="T:System.Collections.IEnumerable" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <param name="initializers">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</param>
        <summary>指定したプロパティ アクセサー メソッドに基づいて <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.MemberInfo" /> プロパティ、および <paramref name="propertyAccessor" /> の要素が設定された <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> を持つ <paramref name="initializers" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyAccessor" /> は <see langword="null" /> です。  
  
 または  
  
 1 つまたは複数の要素の <paramref name="initializers" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyAccessor" /> プロパティ アクセサー メソッドを表していません。  
  
 または  
  
 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> によって表示される、メソッド、プロパティの <paramref name="propertyAccessor" /> へのアクセスを実装しません <see cref="T:System.Collections.IEnumerable" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <param name="initializers">
          <see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> オブジェクトの配列。</param>
        <summary>指定したプロパティ アクセサー メソッドに基づいて <see cref="T:System.Linq.Expressions.MemberListBinding" /> オブジェクトを作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.MemberInfo" /> プロパティ、および <paramref name="propertyAccessor" /> の要素が設定された <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> を持つ <paramref name="initializers" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyAccessor" /> は <see langword="null" /> です。  
  
 または  
  
 1 つまたは複数の要素の <paramref name="initializers" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyAccessor" /> プロパティ アクセサー メソッドを表していません。  
  
 または  
  
 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> によって表示される、メソッド、プロパティの <paramref name="propertyAccessor" /> へのアクセスを実装しません <see cref="T:System.Collections.IEnumerable" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
        <param name="initializers">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</param>
        <summary>指定した <see cref="T:System.Linq.Expressions.ListInitExpression" /> オブジェクトを使用してコレクションを初期化する <see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> の `newExpression` を実装する型を表す必要があります <xref:System.Collections.IEnumerable>します。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.ListInitExpression> に等しい `newExpression`します。入力します。  
  
   
  
## 例  
 次の例では、使用、 <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> を作成する方法、 <xref:System.Linq.Expressions.ListInitExpression> を表す 2 つのキー\/値ペアの新しいディクショナリ インスタンスを初期化します。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。  
  
 または  
  
 1 つまたは複数の要素の <paramref name="initializers" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="newExpression" />.型が実装していない <see cref="T:System.Collections.IEnumerable" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
        <param name="initializers">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</param>
        <summary>"Add" という名前のメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of **parameterReference tag is not supported!!!!**  
 must represent a type that implements <xref:System.Collections.IEnumerable>.  
  
 In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, **parameterReference tag is not supported!!!!**  
.Type or its base type must declare a single method named "Add" \(case insensitive\) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of **parameterReference tag is not supported!!!!**  
.  
  
 The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of **parameterReference tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of **parameterReference tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on **parameterReference tag is not supported!!!!**  
.Type or its base type.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to **parameterReference tag is not supported!!!!**  
.Type.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="newExpression" />.Type またはその基本型で、"Add" \(大文字と小文字を区別しない\) という名前のインスタンス メソッドは宣言されていません。  
  
 または  
  
 <paramref name="newExpression" />.Type またはその基本型の Add メソッドは、ちょうど 1 つの引数を受け取りません。  
  
 または  
  
 <paramref name="initializers" /> の最初の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが表す型は、<paramref name="newExpression" />.Type またはその基本型の Add メソッドの引数の型に割り当てることができません。  
  
 または  
  
 "Add" \(大文字と小文字を区別しない\) という名前の、複数の引数と互換性のあるメソッドが、<paramref name="newExpression" />.Type および\/またはその基本型に存在します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
        <param name="initializers">
          <see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</param>
        <summary>指定した <see cref="T:System.Linq.Expressions.ListInitExpression" /> オブジェクトを使用してコレクションを初期化する <see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of **parameterReference tag is not supported!!!!**  
 must represent a type that implements <xref:System.Collections.IEnumerable>.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to **parameterReference tag is not supported!!!!**  
.Type.  
  
   
  
## 例  
 The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression>that represents the initialization of a new dictionary instance with two key\-value pairs.  
  
 [!code-csharp[System.Linq.Expressions.Expression\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
        <param name="initializers">
          <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</param>
        <summary>"Add" という名前のメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> の `newExpression` を実装する型を表す必要があります <xref:System.Collections.IEnumerable>します。  
  
 このオーバー ロードを使用するために <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, 、`newExpression`です。型またはその基本データ型は、"Add"\(大文字と小文字\) という名前を正確に 1 つの引数を受け取る 1 つのメソッドを宣言する必要があります。 引数の型によって表される型から割り当て可能な必要があります、 <xref:System.Linq.Expressions.Expression.Type%2A> の最初の要素のプロパティ `initializers`します。  
  
 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 、返されたプロパティ <xref:System.Linq.Expressions.ListInitExpression>型の 1 つの要素が含まれる <xref:System.Linq.Expressions.ElementInit> の各要素に対して `initializers`します。<xref:System.Linq.Expressions.ElementInit.Arguments%2A> の各要素のプロパティ <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> はシングルトン コレクションの対応する要素が含まれる `initializers`です。<xref:System.Linq.Expressions.ElementInit.AddMethod%2A> の各要素のプロパティ <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> が検出された、add メソッドを表す `newExpression`します。型またはその基本型です。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.ListInitExpression> に等しい `newExpression`します。入力します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。  
  
 または  
  
 1 つまたは複数の要素の <paramref name="initializers" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="newExpression" />.型が実装していない <see cref="T:System.Collections.IEnumerable" />します。</exception>
        <exception cref="T:System.InvalidOperationException">"Add"という名前 \(大文字と小文字\) で宣言されているインスタンス メソッドがない <paramref name="newExpression" />します。型またはその基本型です。  
  
 または  
  
 Add メソッドの <paramref name="newExpression" />です。型またはその基本データ型は、引数を 1 つは考慮しません。  
  
 または  
  
 によって表される型、 <see cref="P:System.Linq.Expressions.Expression.Type" /> の最初の要素のプロパティ <paramref name="initializers" /> で add メソッドの引数の型に割り当てることができません <paramref name="newExpression" />します。型またはその基本型です。  
  
 または  
  
 "Add"\(大文字\) という名前の引数と互換性のあるメソッドの 1 つ以上の上にある <paramref name="newExpression" />です。型またはその基本型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
        <param name="addMethod">コレクションに要素を追加する、"Add" \(大文字と小文字は区別されません\) という名前のインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <param name="initializers">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</param>
        <summary>指定したメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> の `newExpression` を実装する型を表す必要があります <xref:System.Collections.IEnumerable>します。  
  
 If `addMethod` is `null`, `newExpression`.型またはその基本データ型は、"Add"\(大文字と小文字\) という名前を正確に 1 つの引数を受け取る 1 つのメソッドを宣言する必要があります。 場合 `addMethod` は `null`, 、"Add"\(大文字と小文字\) という名前を正確に 1 つのパラメーターを持つインスタンス メソッドを表す必要があります。 によって表される型、 <xref:System.Linq.Expressions.Expression.Type%2A> の各要素のプロパティ `initializers` add メソッドの引数の型に代入する必要があります。  
  
 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 、返されたプロパティ <xref:System.Linq.Expressions.ListInitExpression> 型の 1 つの要素が含まれる <xref:System.Linq.Expressions.ElementInit> の各要素に対して `initializers`します。<xref:System.Linq.Expressions.ElementInit.Arguments%2A> の各要素のプロパティ <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> はシングルトン コレクションの対応する要素が含まれる `initializers`です。<xref:System.Linq.Expressions.ElementInit.AddMethod%2A> の各要素のプロパティ <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> に等しい `addMethod`します。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.ListInitExpression> に等しい `newExpression`します。入力します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。  
  
 または  
  
 1 つまたは複数の要素の <paramref name="initializers" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="newExpression" />.型が実装していない <see cref="T:System.Collections.IEnumerable" />します。  
  
 または  
  
 <paramref name="addMethod" /> <see langword="null" /> 、"Add"\(大文字と小文字\) という名前を正確に 1 つの引数を受け取るインスタンス メソッドを表していません。  
  
 または  
  
 <paramref name="addMethod" /> <see langword="null" /> によって表される型と、 <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティの 1 つまたは複数の要素の <paramref name="initializers" /> メソッドの引数の型に割り当てることができませんを <paramref name="addMethod" /> を表します。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="addMethod" /> <see langword="null" /> され上に 1 つの型と互換性のある引数は、"Add"という名前のインスタンス メソッドが存在しない <paramref name="newExpression" />します。型またはその基本型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
        <param name="addMethod">1 つの引数を受け取り、コレクションに要素を追加するインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <param name="initializers">
          <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</param>
        <summary>指定したメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> の `newExpression` を実装する型を表す必要があります <xref:System.Collections.IEnumerable>します。  
  
 If `addMethod` is `null`, `newExpression`.型またはその基本データ型は、"Add"\(大文字と小文字\) という名前を正確に 1 つの引数を受け取る 1 つのメソッドを宣言する必要があります。 場合 `addMethod` は `null`, 、"Add"\(大文字と小文字\) という名前を正確に 1 つのパラメーターを持つインスタンス メソッドを表す必要があります。 によって表される型、 <xref:System.Linq.Expressions.Expression.Type%2A> の各要素のプロパティ `initializers` add メソッドの引数の型に代入する必要があります。  
  
 <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 、返されたプロパティ <xref:System.Linq.Expressions.ListInitExpression>型の 1 つの要素が含まれる <xref:System.Linq.Expressions.ElementInit> の各要素に対して `initializers`します。<xref:System.Linq.Expressions.ElementInit.Arguments%2A> の各要素のプロパティ <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> はシングルトン コレクションの対応する要素が含まれる `initializers`です。<xref:System.Linq.Expressions.ElementInit.AddMethod%2A> の各要素のプロパティ <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> に等しい `addMethod`します。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.ListInitExpression> に等しい `newExpression`します。入力します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。  
  
 または  
  
 1 つまたは複数の要素の <paramref name="initializers" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="newExpression" />.型が実装していない <see cref="T:System.Collections.IEnumerable" />します。  
  
 または  
  
 <paramref name="addMethod" /> <see langword="null" /> 、"Add"\(大文字と小文字\) という名前を正確に 1 つの引数を受け取るインスタンス メソッドを表していません。  
  
 または  
  
 <paramref name="addMethod" /> <see langword="null" /> によって表される型と、 <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティの 1 つまたは複数の要素の <paramref name="initializers" /> メソッドの引数の型に割り当てることができませんを <paramref name="addMethod" /> を表します。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="addMethod" /> <see langword="null" /> され上に 1 つの型と互換性のある引数は、"Add"という名前のインスタンス メソッドが存在しない <paramref name="newExpression" />します。型またはその基本型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">ループの本体。</param>
        <summary>指定した本体を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body">ループの本体。</param>
        <param name="break">ループの本体によって使用される break の移動先。</param>
        <summary>指定した本体および break の移動先を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例を含むブロック式を作成する方法、 <xref:System.Linq.Expressions.LoopExpression> オブジェクトです。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break, class System.Linq.Expressions.LabelTarget continue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="continue" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body">ループの本体。</param>
        <param name="break">ループの本体によって使用される break の移動先。</param>
        <param name="continue">ループの本体によって使用される continue の移動先。</param>
        <summary>指定した本体を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binaryType">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
        <param name="left">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="right">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>適切なファクトリ メソッドを呼び出すことにより、左オペランドと右オペランドを指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `binaryType` パラメーターでは、どれかを判断 <xref:System.Linq.Expressions.BinaryExpression> ファクトリ メソッドがこのメソッドを呼び出します。 たとえば場合、 `binaryType` は <xref:System.Linq.Expressions.ExpressionType.Subtract>, 、このメソッドは <xref:System.Linq.Expressions.Expression.Subtract%2A>です。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> を作成する方法、 <xref:System.Linq.Expressions.BinaryExpression> 別の 1 つの数値の減算を表します。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]
 [!code-vb[System.Linq.Expressions.Expression\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="binaryType" /> 二項式ノードに対応していません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="binaryType">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
        <param name="left">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="right">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="liftToNull">
          <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
        <param name="method">実装メソッドを指定する <see cref="T:System.Reflection.MethodInfo" />。</param>
        <summary>適切なファクトリ メソッドを呼び出すことにより、左オペランド、右オペランド、および実装メソッドを指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `binaryType` パラメーターでは、どれかを判断 <xref:System.Linq.Expressions.BinaryExpression> ファクトリ メソッドこのメソッドを呼び出します。 たとえば場合、 `binaryType` は <xref:System.Linq.Expressions.ExpressionType.Subtract>, 、このメソッドは <xref:System.Linq.Expressions.Expression.Subtract%2A>です。`liftToNull` と `method` 適切なファクトリ メソッドには、対応するパラメーターがない場合、パラメーターは無視されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="binaryType" /> 二項式ノードに対応していません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="binaryType">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
        <param name="left">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="right">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="liftToNull">
          <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
        <param name="method">実装メソッドを指定する <see cref="T:System.Reflection.MethodInfo" />。</param>
        <param name="conversion">型変換関数を表す <see cref="T:System.Linq.Expressions.LambdaExpression" />。 このパラメーターは、<c>binaryType</c> が <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> または複合代入である場合にのみ使用されます。</param>
        <summary>適切なファクトリ メソッドを呼び出すことにより、左オペランド、右オペランド、実装メソッド、および型変換関数を指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `binaryType` パラメーターでは、どれかを判断 <xref:System.Linq.Expressions.BinaryExpression> ファクトリ メソッドこのメソッドを呼び出します。 たとえば場合、 `binaryType` は <xref:System.Linq.Expressions.ExpressionType.Subtract>, 、このメソッドは <xref:System.Linq.Expressions.Expression.Subtract%2A>です。`liftToNull`, 、`method` と `conversion` 適切なファクトリ メソッドには、対応するパラメーターがない場合、パラメーターは無視されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="binaryType" /> 二項式ノードに対応していません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeCatchBlock">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock MakeCatchBlock(class System.Type type, class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
        <param name="variable">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</param>
        <param name="body">catch ステートメントの本体。</param>
        <param name="filter">
          <see cref="T:System.Exception" /> フィルターの本体。</param>
        <summary>指定された要素を使用して、catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `type` 型と一致し、null 以外である必要があります `variable` \(かどうかに指定した場合\)。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
        <param name="binder">動的操作のランタイム バインダー。</param>
        <param name="arguments">動的操作の引数。</param>
        <summary>指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
        <param name="binder">動的操作の実行時バインダー。</param>
        <param name="arg0">動的操作の引数。</param>
        <summary>指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">
          <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
        <param name="binder">動的操作のランタイム バインダー。</param>
        <param name="arguments">動的操作の引数。</param>
        <summary>指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
        <param name="binder">動的操作の実行時バインダー。</param>
        <param name="arg0">動的操作の 1 番目の引数。</param>
        <param name="arg1">動的操作の 2 番目の引数。</param>
        <summary>指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> および 2 つの引数によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
        <param name="binder">動的操作の実行時バインダー。</param>
        <param name="arg0">動的操作の 1 番目の引数。</param>
        <param name="arg1">動的操作の 2 番目の引数。</param>
        <param name="arg2">動的操作の 3 番目の引数。</param>
        <summary>指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> および 3 つの引数によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
        <param name="binder">動的操作の実行時バインダー。</param>
        <param name="arg0">動的操作の 1 番目の引数。</param>
        <param name="arg1">動的操作の 2 番目の引数。</param>
        <param name="arg2">動的操作の 3 番目の引数。</param>
        <param name="arg3">動的操作の 4 番目の引数。</param>
        <summary>指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> および 4 つの引数によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGoto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression MakeGoto(valuetype System.Linq.Expressions.GotoExpressionKind kind, class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="System.Linq.Expressions.GotoExpressionKind" />
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="kind">
          <see cref="T:System.Linq.Expressions.GotoExpression" /> の <see cref="T:System.Linq.Expressions.GotoExpressionKind" />。</param>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>指定した <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプを表す <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> を作成します。 ジャンプ時にラベルに渡す値も指定できます。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.GotoExpression" /> と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression MakeIndex(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">プロパティが属するオブジェクト。 プロパティが <see langword="static" /> \(Visual Basic では <see langword="shared" />\) の場合は、null にします。</param>
        <param name="indexer">インデックス化するプロパティを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="arguments">プロパティのインデックス化に使用する引数を格納している <c>IEnumerable&lt;Expression&gt;</c> \(Visual Basic では <c>IEnumerable (Of Expression)</c>\)。</param>
        <summary>オブジェクトのインデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeMemberAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression MakeMemberAccess(class System.Linq.Expressions.Expression expression, class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="expression">メンバーが属するオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression" />。 静的メンバーの場合は null を指定できます。</param>
        <param name="member">アクセス先のフィールドまたはプロパティを記述する <see cref="T:System.Reflection.MemberInfo" />。</param>
        <summary>フィールドまたはプロパティのいずれかへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
        <returns>適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、作成に使用できる、 <xref:System.Linq.Expressions.MemberExpression> 、フィールドまたはの種類によっては、プロパティのいずれかへのアクセスを表す `member`します。 場合 `member` 型 <xref:System.Reflection.FieldInfo>, 、このメソッドを呼び出す <xref:System.Linq.Expressions.Expression.Field%2A> を作成する、 <xref:System.Linq.Expressions.MemberExpression>です。 場合 `member` 型 <xref:System.Reflection.PropertyInfo>, 、このメソッドを呼び出す <xref:System.Linq.Expressions.Expression.Property%2A> を作成する、 <xref:System.Linq.Expressions.MemberExpression>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="member" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="member" /> フィールドまたはプロパティを表していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeTry">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt; handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression MakeTry(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.Expression fault, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.CatchBlock&gt; handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt;" />
      </Parameters>
      <Docs>
        <param name="type">try 式の結果の型。 null の場合は、本体およびすべてのハンドラーの型が同一である必要があります。</param>
        <param name="body">try ブロックの本体。</param>
        <param name="finally">finally ブロックの本体。 try ブロックに関連付けられている finally ブロックがない場合は、null を渡します。</param>
        <param name="fault">fault ブロックの本体。 try ブロックに関連付けられている fault ブロックがない場合は、null を渡します。</param>
        <param name="handlers">try ブロックに関連付ける catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> のコレクション。</param>
        <summary>指定された要素を使用して、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="unaryType">単項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
        <param name="operand">オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="type">変換後の型を指定する <see cref="T:System.Type" /> \(該当しない場合は <see langword="null" /> を渡します\)。</param>
        <summary>適切なファクトリ メソッドを呼び出すことにより、オペランドを指定して、<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `unaryType` パラメーターでは、どれかを判断 <xref:System.Linq.Expressions.UnaryExpression> ファクトリ メソッドがこのメソッドを呼び出します。 たとえば場合、 `unaryType` に等しい <xref:System.Linq.Expressions.ExpressionType.Convert>, 、このメソッドは <xref:System.Linq.Expressions.Expression.Convert%2A>です。`type`はファクトリ メソッドが呼び出されるには適用しない場合、パラメーターは無視されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operand" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unaryType" /> 単項式ノードに対応していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="unaryType">単項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
        <param name="operand">オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="type">変換後の型を指定する <see cref="T:System.Type" /> \(該当しない場合は <see langword="null" /> を渡します\)。</param>
        <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <summary>適切なファクトリ メソッドを呼び出すことにより、オペランドおよび実装メソッドを指定して、<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `unaryType` パラメーターでは、どれかを判断 <xref:System.Linq.Expressions.UnaryExpression> ファクトリ メソッドがこのメソッドを呼び出します。 たとえば場合、 `unaryType` に等しい <xref:System.Linq.Expressions.ExpressionType.Convert>, 、このメソッドは <xref:System.Linq.Expressions.Expression.Convert%2A>です。`type` と `method` ファクトリ メソッドが呼び出されるには適用しない場合、パラメーターは無視されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operand" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unaryType" /> 単項式ノードに対応していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="member">
          <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
        <param name="bindings">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</param>
        <summary>フィールドまたはプロパティのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `member` パラメーターは、フィールドまたはプロパティを表す必要があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="member" /> または <paramref name="bindings" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="member" /> フィールドまたはプロパティを表していません。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> の要素のプロパティに <paramref name="bindings" /> フィールドまたはプロパティの型のメンバーは表しませんを <paramref name="member" /> を表します。</exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member">
          <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
        <param name="bindings">
          <see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> オブジェクトの配列。</param>
        <summary>フィールドまたはプロパティのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `member` パラメーターは、フィールドまたはプロパティを表す必要があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="member" /> または <paramref name="bindings" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="member" /> フィールドまたはプロパティを表していません。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> の要素のプロパティに <paramref name="bindings" /> フィールドまたはプロパティの型のメンバーは表しませんを <paramref name="member" /> を表します。</exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <param name="bindings">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</param>
        <summary>プロパティ アクセサー メソッドを使用してアクセスされるメンバーのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、および指定した値に設定された <paramref name="propertyAccessor" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyAccessor" /> または <paramref name="bindings" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyAccessor" /> プロパティ アクセサー メソッドを表していません。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> の要素のプロパティに <paramref name="bindings" /> メソッドによってアクセスされるプロパティの型のメンバーは表しませんを <paramref name="propertyAccessor" /> を表します。</exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <param name="bindings">
          <see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> オブジェクトの配列。</param>
        <summary>プロパティ アクセサー メソッドを使用してアクセスされるメンバーのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、および指定した値に設定された <paramref name="propertyAccessor" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyAccessor" /> または <paramref name="bindings" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyAccessor" /> プロパティ アクセサー メソッドを表していません。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> の要素のプロパティに <paramref name="bindings" /> メソッドによってアクセスされるプロパティの型のメンバーは表しませんを <paramref name="propertyAccessor" /> を表します。</exception>
      </Docs>
    </Member>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</param>
        <param name="bindings">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</param>
        <summary>新しいオブジェクトを作成し、そのオブジェクトのプロパティを初期化する式を表します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.MemberInitExpression> に等しい、 <xref:System.Linq.Expressions.Expression.Type%2A> の `newExpression`です。  
  
   
  
## 例  
 次の例では、新しいオブジェクトを作成し、オブジェクトのプロパティを初期化する式を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#40)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newExpression" /> または <paramref name="bindings" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> の要素のプロパティに <paramref name="bindings" /> 型のメンバーは表しませんを <paramref name="newExpression" />します。表して型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</param>
        <param name="bindings">
          <see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> オブジェクトの配列。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.MemberInitExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.MemberInitExpression> に等しい、 <xref:System.Linq.Expressions.Expression.Type%2A> の `newExpression`です。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> を作成する方法、 <xref:System.Linq.Expressions.MemberInitExpression> を表す新しいオブジェクトの 2 つのメンバーの初期化します。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#9)]
 [!code-vb[System.Linq.Expressions.Expression\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newExpression" /> または <paramref name="bindings" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> の要素のプロパティに <paramref name="bindings" /> 型のメンバーは表しませんを <paramref name="newExpression" />します。表して型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作の選択したメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 剰余演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの剰余演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの剰余演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">剰余演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both **languageKeyword tag is not supported!!!!**  
. Otherwise, they are **languageKeyword tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is **languageKeyword tag is not supported!!!!**  
.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The implementing method for the operation is chosen based on the following rules:  
  
-   If **parameterReference tag is not supported!!!!**  
     is not **languageKeyword tag is not supported!!!!**  
     and it represents a non\-void, **languageKeyword tag is not supported!!!!**  
     \(**languageKeyword tag is not supported!!!!**  
     in Visual Basic\) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either **parameterReference tag is not supported!!!!**  
     or **parameterReference tag is not supported!!!!**  
     represents a user\-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are numeric types, the implementing method is **languageKeyword tag is not supported!!!!**  
    .  
  
#### Node Type and Lifted versus Non\-Lifted  
 If the implementing method is not **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non\-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non\-nullable value type.  
  
 If the implementing method is **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both non\-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> \(Visual Basic では <see langword="Shared" />\) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には剰余演算子が定義されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>オーバーフロー チェックを行わない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作の選択したメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 乗算演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの乗算演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの乗算演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 次のコード例では、2 つの値を乗算する式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#27)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">乗算演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行わない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `method` は `null` 、void 以外を表します `static` \(`Shared` Visual Basic で\) 2 つの引数を受け取るメソッド ノードのメソッドの実装であります。  
  
-   それ以外の場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 乗算演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの乗算演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの乗算演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 2 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> の乗算演算子が定義されていないと <paramref name="left" />です。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>オーバーフロー チェックを行う算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作の選択したメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 乗算演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの乗算演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの乗算演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">乗算演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行う算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `method` は `null` 、void 以外を表します `static` \(`Shared` Visual Basic で\) 2 つの引数を受け取るメソッド ノードのメソッドの実装であります。  
  
-   それ以外の場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 乗算演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの乗算演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの乗算演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 2 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> の乗算演算子が定義されていないと <paramref name="left" />です。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <summary>算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティ、その結果の <xref:System.Linq.Expressions.UnaryExpression> メソッドの実装に設定されています。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合、これらは false です。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `expression`します。型は、単項マイナス演算子を定義するユーザー定義型、 <xref:System.Reflection.MethodInfo> を表す演算子はメソッドの実装です。  
  
-   それ以外の場合 `expression`します。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `expression`します。型が実装するメソッドの引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `expression`.型は、null 許容値型と、対応する null 非許容値型が実装するメソッドの引数型と一致します。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`, 、ノードの型は `expression`です。入力します。 場合 `expression`します。型が null 非許容は、ノードはリフトされていません。 それ以外の場合、ノードはリフトされています。  
  
   
  
## 例  
 次の例では、算術否定演算を表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#50](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#50)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#50](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">単項マイナス演算子が定義されていません <paramref name="expression" />します。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
        <summary>算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティ、その結果の <xref:System.Linq.Expressions.UnaryExpression> メソッドの実装に設定されています。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合、これらは false です。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `method` は `null` 、void 以外を表します `static` \(`Shared` Visual Basic で\) を 1 つの引数を受け取るメソッドはノードのメソッドの実装です。  
  
-   場合 `expression`します。型は、単項マイナス演算子を定義するユーザー定義型、 <xref:System.Reflection.MethodInfo> を表す演算子はメソッドの実装です。  
  
-   それ以外の場合 `expression`します。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `expression`します。型が実装するメソッドの引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `expression`.型は、null 許容値型と、対応する null 非許容値型が実装するメソッドの引数型と一致します。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`, 、ノードの型は `expression`です。入力します。 場合 `expression`します。型が null 非許容は、ノードはリフトされていません。 それ以外の場合、ノードはリフトされています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 1 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> の単項マイナス演算子が定義されていないと <paramref name="expression" />です。入力します。  
  
 または  
  
 <paramref name="expression" />.型 \(または、対応するの null 非許容の型が null 許容値型の場合\) はによって表されるメソッドの引数の型に割り当てることがない <paramref name="method" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <summary>オーバーフロー チェックを行う算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティ、その結果の <xref:System.Linq.Expressions.UnaryExpression> メソッドの実装に設定されています。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合、これらは false です。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `expression`します。型は、単項マイナス演算子を定義するユーザー定義型、 <xref:System.Reflection.MethodInfo> を表す演算子はメソッドの実装です。  
  
-   それ以外の場合 `expression`します。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `expression`します。型が実装するメソッドの引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `expression`.型は、null 許容値型と、対応する null 非許容値型が実装するメソッドの引数型と一致します。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`, 、ノードの型は `expression`です。入力します。 場合 `expression`します。型が null 非許容は、ノードはリフトされていません。 それ以外の場合、ノードはリフトされています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">単項マイナス演算子が定義されていません <paramref name="expression" />します。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行う算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティ、その結果の <xref:System.Linq.Expressions.UnaryExpression> メソッドの実装に設定されています。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合、これらは false です。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `method` は `null` 、void 以外を表します `static` \(`Shared` Visual Basic で\) を 1 つの引数を受け取るメソッドはノードのメソッドの実装です。  
  
-   場合 `expression`します。型は、単項マイナス演算子を定義するユーザー定義型、 <xref:System.Reflection.MethodInfo> を表す演算子はメソッドの実装です。  
  
-   それ以外の場合 `expression`します。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `expression`します。型が実装するメソッドの引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `expression`.型は、null 許容値型と、対応する null 非許容値型が実装するメソッドの引数型と一致します。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`, 、ノードの型は `expression`です。入力します。 場合 `expression`します。型が null 非許容は、ノードはリフトされていません。 それ以外の場合、ノードはリフトされています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 1 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> の単項マイナス演算子が定義されていないと <paramref name="expression" />です。入力します。  
  
 または  
  
 <paramref name="expression" />.型 \(または、対応するの null 非許容の型が null 許容値型の場合\) はによって表されるメソッドの引数の型に割り当てることがない <paramref name="method" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
        <summary>引数を受け取らない指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.NewExpression.Arguments%2A> と <xref:System.Linq.Expressions.NewExpression.Members%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.NewExpression> は空のコレクションです。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティによって表されるコンス トラクターの宣言型を表す `constructor`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="constructor" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">コンス トラクターを <paramref name="constructor" /> を表しますが、少なくとも 1 つのパラメーターです。</exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">引数を受け取らないコンストラクターを持つ <see cref="T:System.Type" />。</param>
        <summary>指定した型のパラメーターなしのコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定された型のパラメーターなしのコンストラクターを表す <see cref="F:System.Linq.Expressions.ExpressionType.New" /> に設定された <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="T:System.Reflection.ConstructorInfo" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `type` パラメーターは、パラメーターなしのコンス トラクターを持つ型を表す必要があります。  
  
 <xref:System.Linq.Expressions.NewExpression.Arguments%2A> と <xref:System.Linq.Expressions.NewExpression.Members%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.NewExpression> は空のコレクションです。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティに等しい `type`します。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.New%28System.Type%29> を作成する方法、 <xref:System.Linq.Expressions.NewExpression> を表すパラメーターなしのコンス トラクターを呼び出すことによって、ディクショナリ オブジェクトの新しいインスタンスを構築します。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#10)]
 [!code-vb[System.Linq.Expressions.Expression\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">型を <paramref name="type" /> を表すには、パラメーターなしのコンス トラクターはありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
        <param name="arguments">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</param>
        <summary>指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティおよび <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `arguments` パラメーターによって表されるコンス トラクターのパラメーターの数と同じ数の要素を含める必要があります `constructor`します。 場合 `arguments` は `null`, 、空の場合と見なされますと <xref:System.Linq.Expressions.NewExpression.Arguments%2A> 結果のプロパティ <xref:System.Linq.Expressions.NewExpression> 空のコレクションします。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.NewExpression> によって表されるコンス トラクターの宣言型を表す `constructor`します。<xref:System.Linq.Expressions.NewExpression.Members%2A> プロパティは空のコレクション。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="constructor" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="arguments" /> の要素は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="arguments" /> パラメーターに、コンス トラクターのパラメーターの数と同じ数要素にはが含まれていないを <paramref name="constructor" /> を表します。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素のプロパティに <paramref name="arguments" /> コンス トラクターの対応するパラメーターの型に割り当てることができませんを <paramref name="constructor" /> を表します。</exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor">
          <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
        <param name="arguments">
          <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> オブジェクトの配列。</param>
        <summary>指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティおよび <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter must contain the same number of elements as the number of parameters for the constructor represented by **parameterReference tag is not supported!!!!**  
. If **parameterReference tag is not supported!!!!**  
 is **languageKeyword tag is not supported!!!!**  
, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by **parameterReference tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="constructor" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="arguments" /> の要素は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="arguments" /> の長さが、<paramref name="constructor" /> を表すコンストラクターのパラメーターの数と一致しません。  
  
 または  
  
 <paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="constructor" /> を表すコンストラクターの対応するパラメーターの型に割り当てることができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.MemberInfo&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
        <param name="arguments">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</param>
        <param name="members">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Reflection.MemberInfo" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</param>
        <summary>指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。 コンストラクターが初期化したフィールドにアクセスするメンバーが指定されます。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" />、<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、および <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `arguments` パラメーターによって表されるコンス トラクターのパラメーターの数と同じ数の要素を含める必要があります `constructor`します。 場合 `arguments` は `null`, 、空の場合と見なされますと <xref:System.Linq.Expressions.NewExpression.Arguments%2A> 結果のプロパティ <xref:System.Linq.Expressions.NewExpression> 空のコレクションします。  
  
 場合 `members` は `null`, 、 <xref:System.Linq.Expressions.NewExpression.Members%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.NewExpression> 空のコレクションします。 場合 `members` は `null`, 、同じ数の要素があります `arguments` の各要素が必ず `null`します。 各要素 `members` する必要があります、 <xref:System.Reflection.PropertyInfo>, 、<xref:System.Reflection.FieldInfo> または <xref:System.Reflection.MethodInfo> によって表されるコンス トラクターの宣言型のインスタンス メンバーを表す `constructor`します。 プロパティには、プロパティを表している場合、 `get` アクセサー。 対応する要素の `arguments` の各要素に対して `members` 必要があります、 <xref:System.Linq.Expressions.Expression.Type%2A> メンバーの型に割り当て可能な型を表すプロパティを `members` 要素を表します。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.NewExpression> コンス トラクターの宣言型を表すを `constructor` を表します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="constructor" /> は <see langword="null" /> です。  
  
 または  
  
 要素 <paramref name="arguments" /> は <see langword="null" />です。  
  
 または  
  
 <paramref name="members" /> の要素は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="arguments" /> パラメーターに、コンス トラクターのパラメーターの数と同じ数要素にはが含まれていないを <paramref name="constructor" /> を表します。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素のプロパティに <paramref name="arguments" /> コンス トラクターの対応するパラメーターの型に割り当てることができませんを <paramref name="constructor" /> を表します。  
  
 または  
  
 <paramref name="members" /> パラメーターでは、同じ数の要素のない <paramref name="arguments" />します。  
  
 または  
  
 要素 <paramref name="arguments" /> が、 <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティの対応する要素によって表されるメンバーの型に割り当てることはない型を表す <paramref name="members" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, System.Reflection.MemberInfo[] members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Reflection.MemberInfo[] members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Reflection.MemberInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor">
          <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
        <param name="arguments">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</param>
        <param name="members">
          <see cref="T:System.Reflection.MemberInfo" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewExpression.Members" /> オブジェクトの配列。</param>
        <summary>指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。 コンストラクターが初期化したフィールドにアクセスするメンバーが配列として指定されます。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" />、<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、および <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `arguments` パラメーターによって表されるコンス トラクターのパラメーターの数と同じ数の要素を含める必要があります `constructor`します。 場合 `arguments` は `null`, 、空の場合と見なされますと <xref:System.Linq.Expressions.NewExpression.Arguments%2A> 結果のプロパティ <xref:System.Linq.Expressions.NewExpression> 空のコレクションします。  
  
 場合 `members` は `null`, 、 <xref:System.Linq.Expressions.NewExpression.Members%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.NewExpression> 空のコレクションします。 場合 `members` は `null`, 、同じ数の要素があります `arguments` の各要素が必ず `null`します。 各要素 `members` する必要があります、 <xref:System.Reflection.PropertyInfo>, 、<xref:System.Reflection.FieldInfo> または <xref:System.Reflection.MethodInfo> によって表されるコンス トラクターの宣言型のインスタンス メンバーを表す `constructor`します。 プロパティを表している場合、プロパティが関連付けられているフィールドの値を取得できる必要があります。 対応する要素の `arguments` の各要素に対して `members` 必要があります、 <xref:System.Linq.Expressions.Expression.Type%2A> メンバーの型に割り当て可能な型を表すプロパティを `members` 要素を表します。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.NewExpression> コンス トラクターの宣言型を表すを `constructor` を表します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="constructor" /> は <see langword="null" /> です。  
  
 または  
  
 要素 <paramref name="arguments" /> は <see langword="null" />です。  
  
 または  
  
 <paramref name="members" /> の要素は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="arguments" /> パラメーターに、コンス トラクターのパラメーターの数と同じ数要素にはが含まれていないを <paramref name="constructor" /> を表します。  
  
 または  
  
 <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素のプロパティに <paramref name="arguments" /> コンス トラクターの対応するパラメーターの型に割り当てることができませんを <paramref name="constructor" /> を表します。  
  
 または  
  
 <paramref name="members" /> パラメーターでは、同じ数の要素のない <paramref name="arguments" />します。  
  
 または  
  
 要素 <paramref name="arguments" /> が、 <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティの対応する要素によって表されるメンバーの型に割り当てることはない型を表す <paramref name="members" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">配列の要素の型を表す <see cref="T:System.Type" />。</param>
        <param name="bounds">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</param>
        <summary>指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.NewArrayExpression> ランクがの長さと等しい、配列型を表す `bounds` 要素型があると `type`です。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> の各要素のプロパティ `bounds` 整数型を表す必要があります。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> 文字列配列の作成を表す式ツリーを作成する方法が 2 のランク。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> または <paramref name="bounds" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="bounds" /> の要素は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素のプロパティに <paramref name="bounds" /> は整数型を表しません。</exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Linq.Expressions.Expression[] bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Linq.Expressions.Expression[] bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">配列の要素の型を表す <see cref="T:System.Type" />。</param>
        <param name="bounds">
          <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> オブジェクトの配列。</param>
        <summary>指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.NewArrayExpression> ランクがの長さと等しい、配列型を表す `bounds` 要素型があると `type`です。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> の各要素のプロパティ `bounds` 整数型を表す必要があります。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> 文字列配列の作成を表す式ツリーを作成する方法が 2 のランク。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> または <paramref name="bounds" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="bounds" /> の要素は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素のプロパティに <paramref name="bounds" /> は整数型を表しません。</exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">配列の要素の型を表す <see cref="T:System.Type" />。</param>
        <param name="initializers">
          <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</param>
        <summary>1 次元配列の作成と、要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> の各要素のプロパティ `initializers` によって表される型に割り当て可能な型を表す必要があります `type`, 、場合によっては、後 *引用符で囲まれた*します。  
  
> [!NOTE]
>  場合にのみ、要素は引用符で囲まないで `type` は <xref:System.Linq.Expressions.Expression>です。 要素にラップする手段を引用符で囲む、 <xref:System.Linq.Expressions.ExpressionType.Quote> ノードです。 結果として得られるノードは、 <xref:System.Linq.Expressions.UnaryExpression> が <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> プロパティは、要素の `initializers`です。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.NewArrayExpression> 配列型を表しますランクが 1 で、要素型がある `type`です。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> 1 次元の文字列配列の作成を表す式ツリーを作成する方法は、一連の文字列式で初期化されます。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> または <paramref name="initializers" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="initializers" /> の要素は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素のプロパティ <paramref name="initializers" /> 型に割り当てることができませんが型を表している <paramref name="type" /> を表します。</exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">配列の要素の型を表す <see cref="T:System.Type" />。</param>
        <param name="initializers">
          <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> オブジェクトの配列。</param>
        <summary>1 次元配列の作成と、要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> の各要素のプロパティ `initializers` によって表される型に割り当て可能な型を表す必要があります `type`, 、場合によっては、後 *引用符で囲まれた*します。  
  
> [!NOTE]
>  場合にのみ、要素は引用符で囲まないで `type` は <xref:System.Linq.Expressions.Expression>です。 要素にラップする手段を引用符で囲む、 <xref:System.Linq.Expressions.ExpressionType.Quote> ノードです。 結果として得られるノードは、 <xref:System.Linq.Expressions.UnaryExpression> が <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> プロパティは、要素の `initializers`です。  
  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.NewArrayExpression> 配列型を表しますランクが 1 で、要素型がある `type`です。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> 1 次元の文字列配列の作成を表す式ツリーを作成する方法は、一連の文字列式で初期化されます。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> または <paramref name="initializers" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="initializers" /> の要素は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Linq.Expressions.Expression.Type" /> の要素のプロパティに <paramref name="initializers" /> 型に代入ではない型を表す <paramref name="type" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を取得します。</summary>
        <value>
          <see cref="T:System.Linq.Expressions.ExpressionType" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.NodeType%2A> プロパティのより専門的な説明を提供する、 <xref:System.Linq.Expressions.Expression> よりその派生型だけです。 たとえば、 <xref:System.Linq.Expressions.BinaryExpression> をさまざまな種類のバイナリ式、除算演算など「大なり」演算を表すために使用できます。<xref:System.Linq.Expressions.Expression.NodeType%2A> プロパティを記述してこれらの二項式として <xref:System.Linq.Expressions.ExpressionType.Divide> と <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, 、それぞれします。  
  
 式の静的な CLR 型を <xref:System.Linq.Expressions.Expression> を表すオブジェクトがによって表される、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <summary>ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティ、その結果の <xref:System.Linq.Expressions.UnaryExpression> メソッドの実装に設定されています。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `expression`します。型は、単項演算子ではなくを定義するユーザー定義型、 <xref:System.Reflection.MethodInfo> を表す演算子はメソッドの実装です。  
  
-   それ以外の場合 `expression`します。型が数値またはブール型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `expression`します。型が実装するメソッドの引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `expression`.型は、null 許容値型と、対応する null 非許容の型を実装するメソッドの引数型と一致します。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`, 、ノードの型は `expression`です。入力します。 場合 `expression`します。型が null 非許容は、ノードはリフトされていません。 それ以外の場合、ノードはリフトされています。  
  
   
  
## 例  
 次の例では、論理積を表す式の作成操作ではありません。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#51](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#51)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#51](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">単項演算子ではなくが定義されていません <paramref name="expression" />します。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
        <summary>ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティ、その結果の <xref:System.Linq.Expressions.UnaryExpression> メソッドの実装に設定されています。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `method` は `null` 、void 以外を表します `static` \(`Shared` Visual Basic で\) を 1 つの引数を受け取るメソッドはノードのメソッドの実装です。  
  
-   場合 `expression`します。型は、単項演算子ではなくを定義するユーザー定義型、 <xref:System.Reflection.MethodInfo> を表す演算子はメソッドの実装です。  
  
-   それ以外の場合 `expression`します。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `expression`します。型が実装するメソッドの引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `expression`.型は、null 許容値型と、対応する null 非許容値型が実装するメソッドの引数型と一致します。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`, 、ノードの型は `expression`です。入力します。 場合 `expression`します。型が null 非許容は、ノードはリフトされていません。 それ以外の場合、ノードはリフトされています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 1 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> の単項演算子ではなくが定義されていないと <paramref name="expression" />です。入力します。  
  
 または  
  
 <paramref name="expression" />.型 \(または、対応するの null 非許容の型が null 許容値型の場合\) はによって表されるメソッドの引数の型に割り当てることがない <paramref name="method" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>非等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。 ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`します。 それ以外の場合は `false` です。<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。  
  
#### メソッドを実装します。  
 次の規則では、操作のメソッドの実装を決定します。  
  
-   場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`非等値演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。  
  
-   メソッドの実装は、それ以外の場合、`null`です。  
  
#### ノード型と非リフト リフトと  
 メソッドの実装がない場合`null`:  
  
-   If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。 ノードの型は、実装メソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされているかどうか、ノードがリフトされており、ノードの種類は<xref:System.Boolean>します。  
  
    -   `left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。  
  
    -   実装メソッドの戻り値の型は<xref:System.Boolean>します。  
  
 メソッドの実装が場合`null`:  
  
-   If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。 ノードの種類は<xref:System.Boolean>します。  
  
-   If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。 ノードの種類は<xref:System.Boolean>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">非等値演算子が定義されていない<paramref name="left" />です。型および<paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="liftToNull">
          <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>非等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> プロパティは `true` と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティに等しい `liftToNull`します。 それ以外の場合、それらが両方とも `false`します。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `method` は `null` され、void ではない、表します `static` \(`Shared` Visual Basic で\) 2 つの引数を受け取るメソッド メソッドの実装であります。  
  
-   それ以外の場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 非等値演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   メソッドの実装は、それ以外の場合、 `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされると、ノードはリフトされています。また、ノードの型は null 許容 <xref:System.Boolean> 場合 `liftToNull` は `true` または <xref:System.Boolean> 場合 `liftToNull` は `false`:  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は <xref:System.Boolean>です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は <xref:System.Boolean>です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型が null 許容 <xref:System.Boolean> 場合 `liftToNull` は `true` または <xref:System.Boolean> 場合 `liftToNull` は `false`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 2 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> との非等値演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>1 の補数を表す式を返します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <summary>1 の補数を表す式を返します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="OR" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> いずれかのプロパティ `left` または `right` 演算子をオーバー ロードするユーザー定義型を表す `OR` 演算子、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型は整数またはブール型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、結果の型定義済みのビットごと `OR` 演算子。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、結果の型に定義済みのビットごとの対応する null 許容型 `OR` 演算子。  
  
   
  
## 例  
 次のコード例では、論理 OR 演算を表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#28)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">ビットごと <see langword="OR" /> の演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="OR" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Or" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `method` は `null` され、void ではない、表します `static` \(`Shared` Visual Basic で\) 2 つの引数を受け取るメソッド メソッドの実装であります。  
  
-   それ以外の場合、 <xref:System.Linq.Expressions.Expression.Type%2A> いずれかのプロパティ `left` または `right` 演算子をオーバー ロードするユーザー定義型を表す `OR` 、演算子、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型は整数またはブール型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、結果の型定義済みのビットごと `OR` 演算子。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、結果の型に定義済みのビットごとの対応する null 許容型 `OR` 演算子。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 2 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> 演算と <see langword="OR" /> の演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="OR" /> 演算を表す <see langword="false" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> いずれかのプロパティ `left` または `right` 演算子をオーバー ロードするユーザー定義型を表す `OR` 演算子、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
    > [!NOTE]
    >  条件付き `OR` 演算子は、c\# ではオーバー ロードできませんまたは [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]です。 ただし、条件付き `OR` ビットごとの演算子が評価される `OR` 演算子。 したがってにユーザー定義のオーバー ロード、ビットごとの `OR` 演算子はこのノード型のメソッドの実装があります。  
  
-   それ以外の場合 `left`します。型および `right`です。型がブール型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型を少なくとも 1 つが null 許容型、および対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   `left`.型および `right`です。種類は、同じブール型です。  
  
-   場合 `left`します。型および `right`です。型が null 非許容は、ノードはリフトされていません。 ノードの型は、定義済みの条件式の結果型 `OR` 演算子。  
  
-   場合 `left`します。型および `right`です。型は null を許容、ノードはリフトができます。 ノードの型は、定義済みの条件式の結果型に対応する null 許容型 `OR` 演算子。  
  
   
  
## 例  
 次のコード例は、論理積を表す式を作成する方法を示しています。 `OR` に最初のオペランドが評価される場合にのみ、2 番目のオペランドを評価操作 `false`します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#29)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">ビットごと <see langword="OR" /> の演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。  
  
 または  
  
 <paramref name="left" />.型および <paramref name="right" />です。型は、同じブール型ではできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="OR" /> 演算を表す <see langword="false" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A>プロパティは `null`です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `method` は `null` 、void 以外を表します `static` \(`Shared` Visual Basic で\) 2 つの引数を受け取るメソッド ノードのメソッドの実装であります。  
  
-   それ以外の場合、 <xref:System.Linq.Expressions.Expression.Type%2A> いずれかのプロパティ `left` または `right` 演算子をオーバー ロードするユーザー定義型を表す `OR` 、演算子、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
    > [!NOTE]
    >  条件付き `OR` 演算子は、c\# ではオーバー ロードできませんまたは [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]です。 ただし、条件付き `OR` ビットごとの演算子が評価される `OR` 演算子。 したがってにユーザー定義のオーバー ロード、ビットごとの `OR` 演算子はこのノード型のメソッドの実装があります。  
  
-   それ以外の場合 `left`します。型および `right`です。型がブール型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型を少なくとも 1 つが null 許容型、および対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   `left`.型および `right`です。種類は、同じブール型です。  
  
-   場合 `left`します。型および `right`です。型が null 非許容は、ノードはリフトされていません。 ノードの型は、定義済みの条件式の結果型 `OR` 演算子。  
  
-   場合 `left`します。型および `right`です。型は null を許容、ノードはリフトができます。 ノードの型は、定義済みの条件式の結果型に対応する null 許容型 `OR` 演算子。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 2 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> 演算と <see langword="OR" /> の演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。  
  
 または  
  
 <paramref name="method" /> <see langword="null" /> と <paramref name="left" />です。型および <paramref name="right" />です。型は、同じブール型ではできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">パラメーターまたは変数の型。</param>
        <summary>式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
        <returns>指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、作成、 <xref:System.Linq.Expressions.MethodCallExpression> オブジェクトの値を出力、 <xref:System.Linq.Expressions.ParameterExpression> オブジェクトです。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#49](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#49)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#49](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#49)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">パラメーターまたは変数の型。</param>
        <param name="name">デバッグまたは印刷の目的でのみ使用されるパラメーターまたは変数の名前。</param>
        <summary>式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.ParameterExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> プロパティおよび <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>式の代入と、それに続く元の式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <summary>式の代入と、それに続く元の式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>式の代入と、それに続く元の式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <summary>式の代入と、それに続く元の式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>数値の累乗を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 指数演算子をオーバー ロードするユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型は、どちらも <xref:System.Double>, 、メソッドの実装 <xref:System.Math.Pow%2A>します。  
  
#### ノード型リフトされているかいないか、  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">累乗演算子が定義されていない <paramref name="left" />します。型および <paramref name="right" />です。入力します。  
  
 または  
  
 <paramref name="left" />.型や <paramref name="right" />します。型がしない場合 <see cref="T:System.Double" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>数値の累乗を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Power" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both **languageKeyword tag is not supported!!!!**  
. Otherwise, they are **languageKeyword tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is **languageKeyword tag is not supported!!!!**  
.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If **parameterReference tag is not supported!!!!**  
     is not **languageKeyword tag is not supported!!!!**  
     and it represents a non\-void, **languageKeyword tag is not supported!!!!**  
     \(**languageKeyword tag is not supported!!!!**  
     in Visual Basic\) method that takes two arguments, it is the implementing method.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either **parameterReference tag is not supported!!!!**  
     or **parameterReference tag is not supported!!!!**  
     represents a user\-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.  
  
#### Node Type and Lifted versus Non\-Lifted  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non\-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non\-nullable value type.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> \(Visual Basic では <see langword="Shared" />\) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には累乗演算子が定義されていません。  
  
 または  
  
 <paramref name="method" /> は <see langword="null" /> であり、<paramref name="left" />.Type および\/または <paramref name="right" />.Type は <see cref="T:System.Double" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <summary>式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="method">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <summary>式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo propertyAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 静的プロパティの場合は null を指定できます。</param>
        <param name="propertyAccessor">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
        <summary>プロパティ アクセサー メソッドを使用することによるプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、<paramref name="expression" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティを含む <paramref name="propertyAccessor" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.MemberExpression> に等しい、 <xref:System.Reflection.PropertyInfo.PropertyType%2A> の <xref:System.Linq.Expressions.MemberExpression.Member%2A>です。  
  
 メソッドがによって表される場合 `propertyAccessor` は `static` \(`Shared` Visual Basic で\)、 `expression` できる `null`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyAccessor" /> は <see langword="null" /> です。  
  
 または  
  
 メソッドを <paramref name="propertyAccessor" /> ではありません <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\) と <paramref name="expression" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expression" />.種類はによって表されるメソッドの宣言型に割り当てることがない <paramref name="propertyAccessor" />します。  
  
 または  
  
 メソッドを <paramref name="propertyAccessor" /> プロパティ アクセサー メソッドではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.PropertyInfo property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="property" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 静的プロパティの場合は null を指定できます。</param>
        <param name="property">
          <see cref="T:System.Reflection.PropertyInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</param>
        <summary>プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.MemberExpression> に等しい、 <xref:System.Reflection.PropertyInfo.PropertyType%2A> の <xref:System.Linq.Expressions.MemberExpression.Member%2A>です。  
  
 によって表されるプロパティの場合 `property` は `static` \(`Shared` Visual Basic で\)、 `expression` できる `null`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="property" /> は <see langword="null" /> です。  
  
 または  
  
 プロパティを <paramref name="property" /> ではありません <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\) と <paramref name="expression" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="expression" />.型は、プロパティの宣言型に割り当てることがないを <paramref name="property" /> を表します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> に <see cref="P:System.Linq.Expressions.Expression.Type" /> という名前のプロパティが含まれている <c>propertyName</c>。 静的プロパティの場合は <see langword="null" /> を指定できます。</param>
        <param name="propertyName">アクセスするプロパティの名前。</param>
        <summary>プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> により示されるプロパティを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティを含む <paramref name="propertyName" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.MemberExpression>に等しい、 <xref:System.Reflection.PropertyInfo.PropertyType%2A> のプロパティ、 <xref:System.Reflection.PropertyInfo> により示されるプロパティを表す `propertyName`します。  
  
 このメソッドは、検索 `expression`します。型およびその基本型の名前を持つプロパティの `propertyName`です。 パブリック プロパティには、非パブリック プロパティより優先をして指定します。 一致するプロパティが見つかった場合、このメソッドは成功 `expression` と <xref:System.Reflection.PropertyInfo> がこのプロパティを表す <xref:System.Linq.Expressions.Expression.Property%2A>します。  
  
   
  
## 例  
 次の例では、プロパティへのアクセスを表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#38)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> または <paramref name="propertyName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">という名前のプロパティ <paramref name="propertyName" /> で定義された <paramref name="expression" />しません。型またはその基本型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">プロパティが属するオブジェクト。 プロパティが static \(Visual Basic では Shared\) の場合は、null にする必要があります。</param>
        <param name="indexer">インデックス化するプロパティを表す <see cref="T:System.Reflection.PropertyInfo" />。</param>
        <param name="arguments">プロパティのインデックス化に使用する <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトの <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">プロパティが属するオブジェクト。 プロパティが static \(Visual Basic では Shared\) の場合は、null にする必要があります。</param>
        <param name="indexer">インデックス化するプロパティを表す <see cref="T:System.Reflection.PropertyInfo" />。</param>
        <param name="arguments">プロパティのインデックス化に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
        <summary>インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, string propertyName, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">プロパティが属するオブジェクト。 プロパティが static \(Visual Basic では Shared\) の場合は、null にする必要があります。</param>
        <param name="propertyName">インデクサーの名前。</param>
        <param name="arguments">プロパティのインデックス化に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
        <summary>インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Type type, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">プロパティの格納オブジェクト。 静的プロパティの場合は null を指定できます。</param>
        <param name="type">プロパティを格納する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <param name="propertyName">アクセスするプロパティ。</param>
        <summary>プロパティにアクセスする <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyOrField">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression PropertyOrField(class System.Linq.Expressions.Expression expression, string propertyOrFieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyOrFieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> に <see cref="P:System.Linq.Expressions.Expression.Type" /> という名前のプロパティまたはフィールドが含まれている <c>propertyOrFieldName</c>。 静的メンバーの場合は null を指定できます。</param>
        <param name="propertyOrFieldName">アクセスするプロパティまたはフィールドの名前。</param>
        <summary>プロパティまたはフィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> によって示されるプロパティまたはフィールドを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> または <see cref="T:System.Reflection.PropertyInfo" /> に設定された <see cref="T:System.Reflection.FieldInfo" /> プロパティを含む <paramref name="propertyOrFieldName" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.MemberExpression> に等しい、 <xref:System.Reflection.PropertyInfo.PropertyType%2A> または <xref:System.Reflection.FieldInfo.FieldType%2A> のプロパティ、 <xref:System.Reflection.PropertyInfo> または <xref:System.Reflection.FieldInfo>, をそれぞれプロパティまたはにより示されるフィールドを表す `propertyOrFieldName`します。  
  
 このメソッドは、検索 `expression`します。型およびその基本型のプロパティまたはフィールド名を持つ `propertyOrFieldName`です。 パブリック プロパティおよびフィールドは、非パブリック プロパティおよびフィールドより優先して指定します。 また、プロパティ、フィールドに対する優先をして指定します。 対応するプロパティまたはフィールドが見つかった場合、このメソッドは成功 `expression` と <xref:System.Reflection.PropertyInfo> または <xref:System.Reflection.FieldInfo> そのプロパティまたはフィールドを表す <xref:System.Linq.Expressions.Expression.Property%2A> または <xref:System.Linq.Expressions.Expression.Field%2A>, 、それぞれします。  
  
   
  
## 例  
 次の例では、プロパティまたはフィールドへのアクセスを表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#39)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#39)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> または <paramref name="propertyOrFieldName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">プロパティまたはフィールドの名前付き <paramref name="propertyOrFieldName" /> で定義された <paramref name="expression" />します。型またはその基本型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Quote">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Quote(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> 型の定数値を持つ式を表す <see cref="T:System.Linq.Expressions.Expression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.UnaryExpression> 構築型を表して <xref:System.Linq.Expressions.Expression%601>, によって表される型を型引数がここでは、 `expression`です。入力します。<xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティが `null` です。 両方とも <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> は `false`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Reduce" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このノードをより単純な式に変形します。 CanReduce が true を返す場合、これは有効な式を返します。 このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。</summary>
        <returns>単純化された式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceAndCheck">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceAndCheck ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceAndCheck() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このノードをより単純な式に変形します。 CanReduce が true を返す場合、これは有効な式を返します。 このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。</summary>
        <returns>単純化された式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Reduce とは異なりは、このメソッドは、縮小ノードが特定の不変式を満たすことを確認します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceExtensions">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceExtensions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>式を既知のノード型 \(拡張ノードではない型\) に単純化し、それが既に既知の型である場合は単に式を返します。</summary>
        <returns>単純化された式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>参照が等値であるかどうかの比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceNotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceNotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>参照が等値でないかどうかの比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">式の新しい <see cref="T:System.Type" />。</param>
        <summary>型を指定して、例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <summary>return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
        <returns>Return と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
        <summary>return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。 ジャンプ時にラベルに渡す値を指定できます。</summary>
        <returns>Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例を含む式を作成する方法、 <xref:System.Linq.Expressions.Expression.Return%2A> メソッドです。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>型を指定して、return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
        <returns>Return と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
        <param name="value">ジャンプ時に関連付けられているラベルに渡される値。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>型を指定して、return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。 ジャンプ時にラベルに渡す値を指定できます。</summary>
        <returns>Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作の選択したメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 右シフト演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型は、整数型 \(のいずれかの <xref:System.Byte>, 、<xref:System.SByte>, 、<xref:System.Int16>, 、<xref:System.UInt16>, 、<xref:System.Int32>, 、<xref:System.UInt32>, 、<xref:System.Int64>, 、<xref:System.UInt64>, 、または対応する null 許容型\) と `right`です。種類は <xref:System.Int32>, 、メソッドの実装 `null`します。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの右シフト演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの右シフト演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">右シフト演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作の選択したメソッドの実装を決定します。  
  
-   場合 `method` は `null` 、void 以外を表します `static` \(`Shared` Visual Basic で\) 2 つの引数を受け取るメソッド ノードのメソッドの実装であります。  
  
-   それ以外の場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 右シフト演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型は、整数型 \(のいずれかの <xref:System.Byte>, 、<xref:System.SByte>, 、<xref:System.Int16>, 、<xref:System.UInt16>, 、<xref:System.Int32>, 、<xref:System.UInt32>, 、<xref:System.Int64>, 、<xref:System.UInt64>, 、または対応する null 許容型\) と `right`です。種類は <xref:System.Int32>, 、メソッドの実装 `null`します。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの右シフト演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの右シフト演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 2 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> の右シフト演算子が定義されていないと <paramref name="left" />です。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
          <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> オブジェクトのコレクション。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> プロパティを含む <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Linq.Expressions.ParameterExpression[] variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Linq.Expressions.ParameterExpression[] variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">
          <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> オブジェクトの配列。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> プロパティを含む <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>オーバーフロー チェックを行わない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作の選択したメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 減算演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの減算演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの減算演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 次のコード例では、最初の引数から引数を減算する式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#30)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">減算演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行わない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both **languageKeyword tag is not supported!!!!**  
. Otherwise, they are **languageKeyword tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is **languageKeyword tag is not supported!!!!**  
.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If **parameterReference tag is not supported!!!!**  
     is not **languageKeyword tag is not supported!!!!**  
     and it represents a non\-void, **languageKeyword tag is not supported!!!!**  
     \(**languageKeyword tag is not supported!!!!**  
     in Visual Basic\) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either **parameterReference tag is not supported!!!!**  
     or **parameterReference tag is not supported!!!!**  
     represents a user\-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are numeric types, the implementing method is **languageKeyword tag is not supported!!!!**  
    .  
  
#### Node Type and Lifted versus Non\-Lifted  
 If the implementing method is not **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non\-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non\-nullable value type.  
  
 If the implementing method is **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both non\-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> \(Visual Basic では <see langword="Shared" />\) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には減算演算子が定義されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <param name="conversion">
          <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
        <summary>オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <summary>オーバーフロー チェックを行う算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その結果、 <xref:System.Linq.Expressions.BinaryExpression> が、 <xref:System.Linq.Expressions.BinaryExpression.Method%2A> プロパティ メソッドの実装に設定します。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合は `false`です。<xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。  
  
 次のとおりに、実装のメソッドでは、ノードの種類、およびノードがリフトされているかどうか。  
  
#### メソッドを実装します。  
 次の規則は、操作の選択したメソッドの実装を決定します。  
  
-   場合、 <xref:System.Linq.Expressions.Expression.Type%2A> プロパティのいずれかの `left` または `right` 減算演算子をオーバー ロードを持つユーザー定義型を表す、 <xref:System.Reflection.MethodInfo> メソッドがメソッドの実装であることを表します。  
  
-   それ以外の場合 `left`します。型および `right`です。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `left`します。型および `right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `left`.型および `right`です。種類は、両方の値型うち少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型に等しいです。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`:  
  
-   場合 `left`します。型および `right`です。種類は、両方とも null 非許容のノードはリフトされていません。 ノードの型は、定義済みの減算演算子の結果の型です。  
  
-   場合 `left`します。型および `right`です。種類は、null 許容型、ノードは、リフトの両方です。 ノードの型は、定義済みの減算演算子の結果の型に対応する null 許容型です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">減算演算子が定義されていません <paramref name="left" />します。型および <paramref name="right" />です。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
        <param name="right">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
        <summary>オーバーフロー チェックを行う算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both **languageKeyword tag is not supported!!!!**  
. Otherwise, they are **languageKeyword tag is not supported!!!!**  
. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is **languageKeyword tag is not supported!!!!**  
.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation :  
  
-   If **parameterReference tag is not supported!!!!**  
     is not **languageKeyword tag is not supported!!!!**  
     and it represents a non\-void, **languageKeyword tag is not supported!!!!**  
     \(**languageKeyword tag is not supported!!!!**  
     in Visual Basic\) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either **parameterReference tag is not supported!!!!**  
     or **parameterReference tag is not supported!!!!**  
     represents a user\-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are numeric types, the implementing method is **languageKeyword tag is not supported!!!!**  
    .  
  
#### Node Type and Lifted versus Non\-Lifted  
 If the implementing method is not **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   `left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non\-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non\-nullable value type.  
  
 If the implementing method is **languageKeyword tag is not supported!!!!**  
:  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both non\-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  
  
-   If **parameterReference tag is not supported!!!!**  
    .Type and **parameterReference tag is not supported!!!!**  
    .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> \(Visual Basic では <see langword="Shared" />\) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には減算演算子が定義されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">各ケースに対してテストする値。</param>
        <param name="cases">この switch 式に対するケースのセット。</param>
        <summary>既定のケースのない <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべて <xref:System.Linq.Expressions.SwitchCase> 内のオブジェクト、 <xref:System.Linq.Expressions.SwitchExpression> しない限り、オブジェクトが同じ型を持つ必要があります、 <xref:System.Linq.Expressions.SwitchExpression> 型が含まれます `void`します。  
  
 各 <xref:System.Linq.Expressions.SwitchCase> オブジェクトが暗黙的な `break` ステートメントで、暗黙的なフォール スルー 1 つの case ラベルから間がないことを意味します。  
  
 場合 `switchValue` に一致しない場合も、例外はスローされません。  
  
   
  
## 例  
 次の例では、既定のケースのないスイッチ ステートメントを表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#34)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">各ケースに対してテストする値。</param>
        <param name="defaultBody">
          <c>switchValue</c> がいずれのケースとも一致しない場合の switch の結果。</param>
        <param name="cases">この switch 式に対するケースのセット。</param>
        <summary>既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべて <xref:System.Linq.Expressions.SwitchCase> 内のオブジェクト、 <xref:System.Linq.Expressions.SwitchExpression> しない限り、オブジェクトが同じ型を持つ必要があります、 <xref:System.Linq.Expressions.SwitchExpression> 型が含まれます `void`します。  
  
 各 <xref:System.Linq.Expressions.SwitchCase> オブジェクトが暗黙的な `break` ステートメントで、暗黙的なフォール スルー 1 つの case ラベルから間がないことを意味します。  
  
 場合 `switchValue` によって表される既定では、ケースのいずれかと一致しない `defaultBody` を実行します。  
  
   
  
## 例  
 次の例では、既定のケースを持つスイッチ ステートメントを表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="switchValue">各ケースに対してテストする値。</param>
        <param name="defaultBody">
          <c>switchValue</c> がいずれのケースとも一致しない場合の switch の結果。</param>
        <param name="comparison">使用する等値比較メソッド。</param>
        <param name="cases">この switch 式に対するケースのセット。</param>
        <summary>既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">各ケースに対してテストする値。</param>
        <param name="defaultBody">
          <c>switchValue</c> がいずれのケースとも一致しない場合の switch の結果。</param>
        <param name="comparison">使用する等値比較メソッド。</param>
        <param name="cases">この switch 式に対するケースのセット。</param>
        <summary>既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="type">switch の結果の型。</param>
        <param name="switchValue">各ケースに対してテストする値。</param>
        <param name="defaultBody">
          <c>switchValue</c> がいずれのケースとも一致しない場合の switch の結果。</param>
        <param name="comparison">使用する等値比較メソッド。</param>
        <param name="cases">この switch 式に対するケースのセット。</param>
        <summary>既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">switch の結果の型。</param>
        <param name="switchValue">各ケースに対してテストする値。</param>
        <param name="defaultBody">
          <c>switchValue</c> がいずれのケースとも一致しない場合の switch の結果。</param>
        <param name="comparison">使用する等値比較メソッド。</param>
        <param name="cases">この switch 式に対するケースのセット。</param>
        <summary>既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">case の本体。</param>
        <param name="testValues">case のテスト値。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトで使用される <see cref="T:System.Linq.Expressions.SwitchExpression" /> オブジェクトを作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべて <xref:System.Linq.Expressions.SwitchCase> 内のオブジェクト、 <xref:System.Linq.Expressions.SwitchExpression> しない限り、オブジェクトが同じ型を持つ必要があります、 <xref:System.Linq.Expressions.SwitchExpression> 型が含まれます `void`します。  
  
 各 <xref:System.Linq.Expressions.SwitchCase> オブジェクトが暗黙的な `break` ステートメントで、暗黙的なフォール スルー 1 つの case ラベルから間がないことを意味します。  
  
   
  
## 例  
 次の例では、既定のケースを持つスイッチ ステートメントを表す式を作成する方法を示します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression[] testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression[] testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">case の本体。</param>
        <param name="testValues">case のテスト値。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.SwitchCase" /> で使用する <see cref="T:System.Linq.Expressions.SwitchExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
        <returns>指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
        <param name="language">
          <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
        <returns>指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> プロパティおよび <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
        <param name="language">
          <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
        <param name="languageVendor">
          <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
        <returns>指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、および <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor, valuetype System.Guid documentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
        <Parameter Name="documentType" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
        <param name="language">
          <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
        <param name="languageVendor">
          <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</param>
        <param name="documentType">
          <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
        <returns>指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、および <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <summary>例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>例外を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、作成、 <xref:System.Linq.Expressions.TryExpression> を使用するオブジェクト、 <xref:System.Linq.Expressions.Expression.Throw%2A> メソッドです。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="type">式の新しい <see cref="T:System.Type" />。</param>
        <summary>型を指定して、例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>例外を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.Expression" /> のテキスト表現を返します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.Expression" /> のテキスト表現。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatch(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">try ブロックの本体。</param>
        <param name="handlers">try ブロックに関連付ける catch ステートメントを表す 0 個以上の <see cref="T:System.Linq.Expressions.CatchBlock" /> 式の配列。</param>
        <summary>任意の数の catch ステートメントを指定し、fault ブロックと finally ブロックを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、作成、 <xref:System.Linq.Expressions.TryExpression> catch ステートメントを含むオブジェクト。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatchFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatchFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">try ブロックの本体。</param>
        <param name="finally">finally ブロックの本体。</param>
        <param name="handlers">try ブロックに関連付ける catch ステートメントを表す 0 個以上の <see cref="T:System.Linq.Expressions.CatchBlock" /> 式の配列。</param>
        <summary>任意の数の catch ステートメントおよび 1 つの finally ブロックを指定して、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、作成する方法、 <xref:System.Linq.Expressions.TryExpression> catch ステートメントを含むオブジェクトと、finally ステートメントを使用します。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#48)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFault">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFault(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression fault) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">try ブロックの本体。</param>
        <param name="fault">fault ブロックの本体。</param>
        <summary>fault ブロックを指定し、catch ステートメントを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">try ブロックの本体。</param>
        <param name="finally">finally ブロックの本体。</param>
        <summary>finally ブロックを指定し、catch ステートメントを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
        <returns>作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetActionType">
      <MemberSignature Language="C#" Value="public static bool TryGetActionType (Type[] typeArgs, out Type actionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetActionType(class System.Type[] typeArgs, class System.Type actionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="actionType" Type="System.Type&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs">System.Action デリゲート型の型引数を指定する Type オブジェクトの配列。</param>
        <param name="actionType">このメソッドが返されるときに、特定の型引数を持つ汎用 System.Action デリゲート型を格納します。<c>typeArgs</c> に一致する汎用 System.Action デリゲートがない場合は、null を格納します。このパラメーターは初期化されていない状態で渡されます。</param>
        <summary>特定の型引数を持つ汎用 System.Action デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。</summary>
        <returns>特定の <paramref name="typeArgs" /> について汎用 System.Action デリゲート型が作成された場合は true。それ以外の場合は false。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetFuncType">
      <MemberSignature Language="C#" Value="public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetFuncType(class System.Type[] typeArgs, class System.Type funcType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="funcType" Type="System.Type&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs">System.Func デリゲート型の型引数を指定する Type オブジェクトの配列。</param>
        <param name="funcType">このメソッドが返されるときに、特定の型引数を持つ汎用 System.Func デリゲート型を格納します。<c>typeArgs</c> に一致する汎用 System.Func デリゲートがない場合は、null を格納します。このパラメーターは初期化されていない状態で渡されます。</param>
        <summary>特定の型引数を持つ汎用 System.Func デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。 最後の型引数で、作成するデリゲートの戻り値の型を指定します。</summary>
        <returns>特定の <paramref name="typeArgs" /> について汎用 System.Func デリゲート型が作成された場合は true。それ以外の場合は false。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public virtual Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
        <value>式の静的な型を表す <see cref="T:System.Type" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.NodeType%2A> 式のツリー ノードの種類がありますが、 <xref:System.Linq.Expressions.Expression.Type%2A> ノードが表す式の共通言語ランタイム \(CLR\) の静的な型を表します。 たとえば、異なるノード型の 2 つのノードが持つことが同じ <xref:System.Linq.Expressions.Expression.Type%2A>, の次のコード例に示すようにします。  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10\#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#36)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10\#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#36)]  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression TypeAs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <param name="type">
          <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
        <summary>変換が失敗した場合に <see cref="T:System.Linq.Expressions.UnaryExpression" /> が提供される明示的な参照変換またはボックス化変換を表す <see langword="null" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.UnaryExpression> は `null`です。<xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> プロパティが両方とも `false`します。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> を作成する方法、 <xref:System.Linq.Expressions.UnaryExpression> を表す nullable 整数型に null 非許容の整数型の式の参照変換します。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#11)]
 [!code-vb[System.Linq.Expressions.Expression\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeEqual(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="type">
          <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</param>
        <summary>実行時の型 ID を比較する <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> プロパティおよび <see cref="T:System.Linq.Expressions.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeIs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeIs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />。</param>
        <param name="type">
          <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</param>
        <summary>
          <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> プロパティおよび <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.Expression.Type%2A> 、生成されたプロパティ <xref:System.Linq.Expressions.UnaryExpression> 表す <xref:System.Boolean>します。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> を作成する方法、 <xref:System.Linq.Expressions.TypeBinaryExpression> に対して文字列値の型のテストを表す、 <xref:System.Int32> 型です。  
  
 [!code-csharp[System.Linq.Expressions.Expression\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#12)]
 [!code-vb[System.Linq.Expressions.Expression\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <summary>単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティ、その結果の <xref:System.Linq.Expressions.UnaryExpression> メソッドの実装に設定されています。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合、これらは false です。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `expression`します。型は、単項プラス演算子を定義するユーザー定義型、 <xref:System.Reflection.MethodInfo> を表す演算子はメソッドの実装です。  
  
-   それ以外の場合 `expression`します。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `expression`します。型が実装するメソッドの引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `expression`.型は、null 許容値型と、対応する null 非許容値型が実装するメソッドの引数型と一致します。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`, 、ノードの型は `expression`です。入力します。 場合 `expression`します。型が null 非許容は、ノードはリフトされていません。 それ以外の場合、ノードはリフトされています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">単項プラス演算子は定義されていない <paramref name="expression" />します。入力します。</exception>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
        <param name="method">
          <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
        <summary>単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティ、その結果の <xref:System.Linq.Expressions.UnaryExpression> メソッドの実装に設定されています。<xref:System.Linq.Expressions.Expression.Type%2A> プロパティがノードの型に設定します。 ノードが無効になると場合、 <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> と <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティが両方とも `true`します。 それ以外の場合、これらは false です。  
  
#### メソッドを実装します。  
 次の規則は、操作のメソッドの実装を決定します。  
  
-   場合 `method` は `null` 、void 以外を表します `static` \(`Shared` Visual Basic で\) を 1 つの引数を受け取るメソッドはノードのメソッドの実装です。  
  
-   場合 `expression`します。型は、単項プラス演算子を定義するユーザー定義型、 <xref:System.Reflection.MethodInfo> を表す演算子はメソッドの実装です。  
  
-   それ以外の場合 `expression`します。型が数値型、メソッドの実装は `null`です。  
  
#### ノード型リフトされているかいないか、  
 メソッドの実装がない場合 `null`:  
  
-   場合 `expression`します。型が実装するメソッドの引数の型に割り当てることが、ノードはリフトされていません。 ノードの型は、実装するメソッドの戻り値の型です。  
  
-   次の 2 つの条件が満たされている場合は、ノードがリフトされており、ノードの型が実装するメソッドの戻り値の型に対応する null 許容型。  
  
    -   `expression`.型は、null 許容値型と、対応する null 非許容値型が実装するメソッドの引数型と一致します。  
  
    -   実装するメソッドの戻り値の型は、null 非許容値型です。  
  
 メソッドの実装が場合 `null`, 、ノードの型は `expression`です。入力します。 場合 `expression`します。型が null 非許容は、ノードはリフトされていません。 それ以外の場合、ノードはリフトされています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="method" /> <see langword="null" /> とそれを返しますが表すメソッド <see langword="void" />, は <see langword="static" /> \(<see langword="Shared" /> Visual Basic で\)、正確に 1 つの引数を受け取らないか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="method" /> <see langword="null" /> は、単項プラス演算子は定義されていないと <paramref name="expression" />です。入力します。  
  
 または  
  
 <paramref name="expression" />.型 \(または、対応するの null 非許容の型が null 許容値型の場合\) はによって表されるメソッドの引数の型に割り当てることがない <paramref name="method" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Unbox(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">ボックス化解除する <see cref="T:System.Linq.Expressions.Expression" />。</param>
        <param name="type">式の新しい <see cref="T:System.Type" />。</param>
        <summary>明示的なボックス化解除を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <returns>
          <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">パラメーターまたは変数の型。</param>
        <summary>式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
        <returns>指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">パラメーターまたは変数の型。</param>
        <param name="name">パラメーターまたは変数の名前。 この名前はデバッグまたは印刷の目的でのみ使用されます。</param>
        <summary>式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
        <returns>指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">
          <see cref="T:System.Func`2" /> のインスタンス。</param>
        <summary>ノードを単純化し、単純化された式の visitor デリゲートを呼び出します。 ノードを単純化できない場合、このメソッドは例外をスローします。</summary>
        <returns>走査中の式、またはツリー内で走査中の式と置き換える式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ノードの子を移動するためのロジックを提供するのには、このメソッドをオーバーライドします。 一般的な実装では、訪問者を呼び出します。それぞれの子にアクセスし、変更にいずれかの場合は、自身の子が変更されたの新しいコピーを返す必要があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>式の代入と、それに続く元の式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ElementInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Equal">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Or">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="OR" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Decrement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OnesComplement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>1 の補数を表す式を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>型変換操作を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MakeBinary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>適切なファクトリ メソッドを呼び出すことにより、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Dynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>動的な操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SubtractAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Continue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Property">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="PreDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行わない算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Parameter">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MemberBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>メンバーのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="PostDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>式の代入と、それに続く元の式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UnaryPlus">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Rethrow">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行わない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AddChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行う算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SubtractChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行う算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ExclusiveOr">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="XOR" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Block">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RuntimeVariables">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SwitchCase">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトで使用される <see cref="T:System.Linq.Expressions.SwitchExpression" /> オブジェクトを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RightShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Condition">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DivideAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Loop">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="NewArrayBounds">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Bind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>メンバーの初期化を表す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ListBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.MemberListBinding" /> オブジェクトを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Constant">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.ConstantExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Field">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SymbolDocument">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ConvertChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>変換後の型がオーバーフローした場合に例外をスローする変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RightShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Call">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Increment">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ArrayIndex">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.Expression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Switch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Divide">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>算術除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsFalse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>式が false に評価されるかどうかを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MemberInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しいオブジェクトを作成し、そのオブジェクトのプロパティを初期化する式を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Goto">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MakeDynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>動的な操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Throw">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="NewArrayInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>1 次元配列の作成と、要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="And">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="PreIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Lambda">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ラムダ式を表す式ツリーを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>"大なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行わない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Return">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsTrue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>式が true に評価されるかどうかを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Coalesce">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.Expression" /> の新しいインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Modulo">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Negate">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AndAlso">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="AND" /> 演算を表す <see langword="true" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Variable">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AddAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Catch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AndAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Break">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="LeftShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MultiplyAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="OrElse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="OR" /> 演算を表す <see langword="false" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ModuloAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MultiplyAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="NegateChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行う算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="LeftShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Power">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>数値の累乗を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="NotEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AddAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="PowerAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Not">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MakeUnary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>適切なファクトリ メソッドを呼び出すことにより、<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ExclusiveOrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="New">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ListInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MultiplyChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行う算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="SubtractAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ArrayAccess">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>配列にアクセスするための <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Label">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>