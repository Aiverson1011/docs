<Type Name="ContractArgumentValidatorAttribute" FullName="System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
  <TypeSignature Language="C#" Value="public sealed class ContractArgumentValidatorAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ContractArgumentValidatorAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Contracts</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.Conditional("CONTRACTS_FULL")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>レガシのファクタリングを有効 <see langword="if-then-throw" /> を再利用できるように、異なるメソッドにコードし、スローされた例外と引数を完全に制御を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 コードで明示的に使用する場合 `if-then-throw` パラメーターを検証するコードは、次の例に示すようで、チェックを実行し、失敗した場合、特定の例外をスローするヘルパー メソッドを使用します。  
  
 [!code-csharp[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow1.cs#1)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow1.vb#1)]  
  
 この例では `Execute` 前提条件が選択可能なであることをパラメーターの値はされないことを指定するが `null`です。 呼び出すことは認識してコントラクト ツールを有効にする `ValidationHelper.NotNull` コントラクトを表しますで呼び出されたメソッドをマークする、  <xref:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute> 属性です。<xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=fullName> メソッドの呼び出しは、ドキュメントの生成および静的チェックでは、次のように適切な仕様を抽出するためのツールを有効にするために使用する必要があります。  
  
 [!code-csharp[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow2.cs#2)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow2.vb#2)]  
  
 他に、 `if-then-throw` ステートメント、検証メソッドのコントラクトのコントラクトのセクションは、その他のコントラクトの検証メソッドの呼び出しを含めることができます。 ただし、他のコントラクトをなし \(など <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=fullName>, 、または <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=fullName>\) は許可します。 次のコード、 <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=fullName> 呼び出しはすべてのコントラクト ツールで無視されます。  
  
 次の例は、既存の観点から書き込まれる範囲の引数の検証コントロール `NotNull` 検証メソッド。  
  
 [!code-csharp[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/cs/ifthenthrow3.cs#3)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.contracts.contractargumentvalidatorattribute/vb/ifthenthrow3.vb#3)]  
  
 仕様の観点から、 `Execute` メソッドには次の 3 つのコントラクト。  
  
```  
Contract.Requires<ArgumentNullException>(data != null);  
Contract.Requires<ArgumentOutOfRangeException>(position >= 0);  
Contract.Requires<ArgumentOutOfRangeException>(position < data.Length);  
  
```  
  
 標準的な方法でコントラクトの検証メソッドを呼び出すことができます自由に混在させるその他のコントラクトでなど <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=fullName> または <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=fullName>です。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContractArgumentValidatorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Contracts</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>