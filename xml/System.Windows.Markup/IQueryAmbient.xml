<Type Name="IQueryAmbient" FullName="System.Windows.Markup.IQueryAmbient">
  <TypeSignature Language="C#" Value="public interface IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IQueryAmbient" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>かどうか、指定したプロパティを扱うアンビエントとして現在のスコープを照会します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 アンビエント プロパティ メカニズムの目的は、XAML オブジェクト ライターでは認識されている、オブジェクトが一時的に保管され、実行時の一般的なアプリケーションに適していないのは値である場合、特定のオブジェクトをインスタンス化しないように通知することで、解析時間を向上させるためにです。 通常は、XAML ルックアップやプロパティの get アクセサーの XAML の処理しなければならなくなるすぐに使用できる値を持つオブジェクト グラフ表現を入力するには、このようなオブジェクトのインスタンスを作成します。  
  
 <xref:System.Windows.Markup.IQueryAmbient> 1 つのメンバー: <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A>です。  
  
 <xref:System.Windows.Markup.IQueryAmbient> 並列メカニズム <xref:System.Windows.Markup.AmbientAttribute>します。<xref:System.Windows.Markup.IQueryAmbient> リフレクションを使用して、情報の決定を回避する特殊なメカニズムは、act を上回りことも \(レポートするように選択されたオブジェクト `true` または `false` の <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A>\) 属性は基本的に静的分析、\)。<xref:System.Windows.Markup.AmbientAttribute> XAML オブジェクト ライターで使用できる通常専用の XAML 型システムのプロパティに関連する一般的なメカニズムは、 <xref:System.Xaml.XamlMember.IsAmbient%2A> と <xref:System.Xaml.XamlType.IsAmbient%2A>です。  
  
## IQueryAmbient の WPF の実装  
 WPF では、 <xref:System.Windows.Markup.IQueryAmbient> リソース ディクショナリ参照プロセスに使用します。 検索プロセスを連続する取得 `Resources` 、WPF の論理ツリー全体にわたって値が検出されるまで、キー、リソースのスコープのルートに向かって操作またはキーがスコープに存在しないと判断されます。 通常、行うには、インスタンス化する、 <xref:System.Windows.ResourceDictionary> たびに結果を受信します。 内容を宣言する `Resources` 限りアンビエントとして `Resources` が存在するこの照合プロセスを最適化します。 WPF では、このインターフェイスは、次の場合に実装されます。  
  
-   <xref:System.Windows.FrameworkElement> 実装 <xref:System.Windows.FrameworkElement.System%23Windows%23Markup%23IQueryAmbient%23IsAmbientPropertyAvailable%2A> を返す `true` 既存が含まれている場合は、すべてのプロパティ名の <xref:System.Windows.ResourceDictionary> の <xref:System.Windows.FrameworkElement.Resources%2A>, 、およびクエリを使用しない限り、 <xref:System.Windows.FrameworkElement.Resources%2A> プロパティ自体です。  
  
-   <xref:System.Windows.Style> 同じパターンを実装、 <xref:System.Windows.Style.Resources%2A>です。  
  
-   <xref:System.Windows.Application> 同じパターンを実装、 <xref:System.Windows.Application.Resources%2A>です。  
  
-   <xref:System.Windows.FrameworkContentElement> 同じパターンを実装、 <xref:System.Windows.FrameworkContentElement.Resources%2A>です。  
  
-   <xref:System.Windows.FrameworkTemplate> 同じパターンを実装、 <xref:System.Windows.FrameworkTemplate.Resources%2A>です。 報告 <xref:System.Windows.FrameworkTemplate.Template%2A> アンビエントですが返されるコンテンツ `false` のクエリを行う場合 <xref:System.Windows.FrameworkTemplate.Template%2A> 自体です。  
  
-   このような場合、関連する各 `Resources` プロパティ \(と <xref:System.Windows.FrameworkTemplate.Template%2A>\) として属性化 <xref:System.Windows.Markup.AmbientAttribute>します。 典型的な使用方法はないプロパティを照会する、 <xref:System.Windows.Markup.AmbientAttribute> インターフェイスを定義するオブジェクトのプロパティの属性を設定します。 つまり、オブジェクト グラフの作成時に、潜在的な実行時間の値を提供するために、リソース ディクショナリが存在する限り、他のプロパティだけでなく、リソース ディクショナリのプロパティのコンテナー処理できますアンビエントとして。  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
  </Docs>
  <Members>
    <Member MemberName="IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="public bool IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">アンビエント状態を確認するプロパティの名前。</param>
        <summary>かどうか、指定した名前付きプロパティと言えますアンビエント現在のスコープ内のクエリです。</summary>
        <returns>
          <see langword="true" /> 要求されたプロパティはアンビエントと見なす場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>