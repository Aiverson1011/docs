<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>特定の XAML 名前スコープ内で要素の名前にアクセスする方法、およびその XAML 名前スコープ内で名前の一意性を確保する方法のコントラクトを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このインターフェイスは、テンプレートを使って再利用するか、メタファを延期するものでは子要素を持つクラスによって実装されます。 テンプレート、ファクトリと同様の構造には、主要なオブジェクト グラフとは別、XAML のルートを一意の XAML 名前スコープがある場合があります。 ここでの原則は、ことがあってはなりません名前が競合して、アプリケーションのオブジェクト グラフにそれらの子要素から作成されたオブジェクトが追加されるときに、DOM 操作および名前の識別子に依存する XAML の参照方法により各 XAML 名前スコープで名前の一意性に依存できるようです。  
  
 .NET Framework の以前のバージョンでは、このインターフェイスは WPF 固有の WindowsBase アセンブリに存在しています。[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], 、<xref:System.Windows.Markup.INameScope> System.Xaml アセンブリ内します。 詳細については、「[Types Migrated From WPF to System.Xaml](http://msdn.microsoft.com/ja-jp/d79dabf5-a2ec-4e8d-a37a-67c4ba8a2b91)」を参照してください。  
  
## WPF の使用上の注意  
 このインターフェイスは、WPF クラスによって実装 <xref:System.Windows.NameScope>します。 ほとんどの XAML 名前スコープ操作で [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] を使用して動作 <xref:System.Windows.NameScope> の情報が、インスタンスはときどき反映されて、内部的を使用して <xref:System.Windows.Markup.INameScope> 参照します。  
  
 WPF クラス ファクトリを使用するか遅延 XAML 表現と組み合わせてメタファの例としては <xref:System.Windows.Style> と <xref:System.Windows.FrameworkTemplate>です。 これらの実装は通常から利用可能なインターフェイス メソッドの明示的なバージョンに依存して、 <xref:System.Windows.NameScope> クラスです。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要求されたオブジェクトの名前の識別子。</param>
        <summary>指定された識別名を持つオブジェクトを返します。</summary>
        <returns>見つかった場合はオブジェクト。 その名前のオブジェクトが見つからなかった場合は <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 XAML マークアップで有効な名前の文字列に記載されている要件を満たす必要があります [XamlName Grammar](http://msdn.microsoft.com/ja-jp/11e4cada-41d2-494d-9531-0d3df4dfcbe3)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">登録する名前。</param>
        <param name="scopedElement">指定した <c>name</c> が参照する特定の要素。</param>
        <summary>現在の XAML 名前スコープに指定された名前を登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 XAML 名前スコープで名前が重複することはできません。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Do not permit duplicate names to be registered. If the input <paramref name="name" /> is already assigned to an existing element in the internal collection representation of the XAML namescope (even if it is the same as <paramref name="scopedElement" />), throw an exception.  
  
 Also consider throwing an exception if the provided name does not conform to [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">登録解除する名前。</param>
        <summary>指定された名前を現在の XAML 名前スコープから登録解除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>If the input name does not exist, throw an exception.  
  
 You should remove the name and the previously registered element it refers to from the collection representation of the XAML namescope, so that the same name could potentially be registered again in the future.</para>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>