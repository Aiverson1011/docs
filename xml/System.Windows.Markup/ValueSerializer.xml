<Type Name="ValueSerializer" FullName="System.Windows.Markup.ValueSerializer">
  <TypeSignature Language="C#" Value="public abstract class ValueSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ValueSerializer" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>オブジェクト表現からのシリアル化の変換動作を定義する抽象クラス。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 シリアル化のため、コンバーターを返す文字列は、無損失をする必要があり、コンバーターでは、同じ文字列、特定の値を返す必要があります常にします。  型コンバーターの場合 \(から派生した <xref:System.ComponentModel.TypeConverter>\) でこれらの要件を満たしていない、 `ConvertTo` 文字列出力の実装、カスタム <xref:System.Windows.Markup.ValueSerializer> 宣言する必要があります。 いずれか、 <xref:System.Windows.Markup.ValueSerializer> 要件については、または null に満たす必要があります <xref:System.Windows.Markup.ValueSerializer> 型を関連付ける必要があります。 A <xref:System.Windows.Markup.ValueSerializer> 適用することで、種類に関連付けられて、 <xref:System.Windows.Markup.ValueSerializerAttribute> 属性です。  
  
 Null <xref:System.Windows.Markup.ValueSerializer> 型コンバーターは、オブジェクト グラフから文字列への変換の変換を無視するかを示します。  
  
> [!IMPORTANT]
>  実装 <xref:System.Windows.Markup.ValueSerializer> 例外がスローされないようにする必要があります。 スローされた例外は、シリアル化を終了でした。  
  
 <xref:System.Windows.Markup.IValueSerializerContext> <xref:System.Windows.Markup.ValueSerializer> し、その Api と似ています <xref:System.ComponentModel.ITypeDescriptorContext> の <xref:System.ComponentModel.TypeConverter>です。 実際には、 <xref:System.Windows.Markup.IValueSerializerContext> 継承 <xref:System.ComponentModel.ITypeDescriptorContext>します。 ときに、 <xref:System.Windows.Markup.ValueSerializer> 派生クラスの API が呼び出されると、呼び出し元 \(通常はシリアライザー プロセス\) は、特定のサービスを提供するコンテキストを渡します。 一般的なガイダンスによりを <xref:System.Windows.Markup.ValueSerializer> 例外をスローする必要があります。 エラーが特定のサービスをコンテキストから返される必要がありますも例外をスローしません。  
  
 .NET Framework の以前のバージョンでは、このクラスは WPF 固有の WindowsBase アセンブリに存在しています。[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], 、<xref:System.Windows.Markup.ValueSerializer> System.Xaml アセンブリ内します。 詳細については、「[Types Migrated From WPF to System.Xaml](http://msdn.microsoft.com/ja-jp/d79dabf5-a2ec-4e8d-a37a-67c4ba8a2b91)」を参照してください。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlXmlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Markup.ValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの本体は空です。 <xref:System.Windows.Markup.ValueSerializer> クラスに初期化を必要とする任意の値が含まれていません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFromString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">変換の評価対象となる文字列。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary>派生クラスでオーバーライドされたときに、指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Markup.ValueSerializer" /> の実装でサポートされる型のインスタンスに変換できるかどうか判別します。</summary>
        <returns>値を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 基本実装を常に `false`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">変換の評価対象となるオブジェクト。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary>派生クラスでオーバーライドされたとき、指定されたオブジェクトを <see cref="T:System.String" /> に変換できるかどうかを決定します。</summary>
        <returns>
          <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外は <see langword="false." />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The base implementation always returns **languageKeyword tag is not supported!!!!**  
.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromString">
      <MemberSignature Language="C#" Value="public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">変換する文字列。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary>派生クラスでオーバーライドされると、<see cref="T:System.String" /> を、<see cref="T:System.Windows.Markup.ValueSerializer" /> の実装でサポートされる型のインスタンスに変換します。</summary>
        <returns>指定された <paramref name="value" /> に基づいて <see cref="T:System.Windows.Markup.ValueSerializer" /> の実装でサポートされる型の新しいインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The base implementation always throws an exception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <paramref name="value" /> を変換できません。</exception>
        <block subset="none" type="overrides">
          <para>Avoid throwing exceptions from implementations. See <see cref="T:System.Windows.Markup.ValueSerializer" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">文字列に変換するオブジェクト。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定されたオブジェクトを <see cref="T:System.String" /> に変換します。</summary>
        <returns>指定されたオブジェクトの文字列表現。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 基本実装を常には、例外をスローします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <paramref name="value" /> を変換できません。</exception>
        <block subset="none" type="overrides">
          <para>Avoid throwing exceptions from implementations. See <see cref="T:System.Windows.Markup.ValueSerializer" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetConvertFromException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertFromException (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertFromException(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">変換できなかったオブジェクト。</param>
        <summary>変換を実行できないときにスローする例外を返します。</summary>
        <returns>
          <see langword="ConvertFrom" /> 変換を実行できないときにスローする例外の <see cref="T:System.Exception" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実際 `throw` キーワードはこのメソッドによって呼び出されないため、一般的な用途が `throw GetConvertFromException` 引数で指定します。  
  
 特定の例外が返される <xref:System.InvalidOperationException>, と `value` 例外メッセージに渡されます。 使用状況のパターンは、例外ユーティリティと同じ <xref:System.ComponentModel.TypeConverter>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConvertToException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertToException (object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertToException(object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">変換できなかったオブジェクト。</param>
        <param name="destinationType">コンバーターが変換しようとした型を表す型。</param>
        <summary>変換を実行できないときにスローする例外を返します。</summary>
        <returns>
          <see langword="ConvertTo" /> 変換を実行できないときにスローする例外の <see cref="T:System.Exception" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実際、 `throw` キーワードはこのメソッドによって呼び出されないため、一般的な用途が `throw GetConvertToException` \(と `value` 指定されたパラメーター\)。  
  
 特定の例外が返される <xref:System.InvalidOperationException>, と `value` 例外メッセージに渡されます。 使用状況のパターンは、例外ユーティリティと同じ <xref:System.ComponentModel.TypeConverter>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="descriptor">シリアル化するプロパティの CLR プロパティ記述子。</param>
        <summary>プロパティの CLR プロパティ記述子を渡すことで、プロパティに対して宣言された <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
        <returns>指定したプロパティに関連付けられているシリアライザー。<see langword="null" /> を返す場合があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Markup.ValueSerializer> 適用することで、プロパティまたはプロパティの値として使用する型が示されている、 <xref:System.Windows.Markup.ValueSerializerAttribute> プロパティまたは型の宣言での属性です。<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> メソッドは、ユーティリティ メソッドを CLR 型のシステム情報を読み取ってを返す新しい <xref:System.Windows.Markup.ValueSerializer> 場合に、クラスが属性に基づくプロパティに見つからないか、プロパティの型で検出された場合。`null` このようなシリアライザーが存在しないかどうかに返されます。`null` 型またはプロパティが null 値を持つ属性が意図的にかどうかは返される可能性も <xref:System.Windows.Markup.ValueSerializerAttribute>です。  
  
 別のモードを <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> サポートしていますが、内部から返されます `TypeConverterValueSerializer` はクラス、 <xref:System.Windows.Markup.ValueSerializer> をラップする実装、 <xref:System.ComponentModel.TypeConverter> し、変換、 `Convert` メソッドを `Convert*String` メソッド \(たとえば <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=fullName> の入力が呼び出された、 <xref:System.String> 種類、およびに変換される <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>します。 これは、次のすべてが true の場合にのみ行います。  
  
-   A <xref:System.ComponentModel.TypeConverterAttribute> に関連するプロパティまたは関連するプロパティの型が見つかりました。  
  
-   指定した <xref:System.ComponentModel.TypeConverter> 正常に作成できます。  
  
-   <xref:System.ComponentModel.TypeConverter> 返します `true` の <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=fullName>, を参照するという、 <xref:System.String> 型です。  
  
-   <xref:System.ComponentModel.TypeConverter> 返します `true` の <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=fullName>, を参照するという、 <xref:System.String> 型です。  
  
-   <xref:System.ComponentModel.TypeConverter> 返します `true` の <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=fullName>, を参照するという、 <xref:System.String> 型です。  
  
> [!NOTE]
>  特殊なケースを次に示します: <xref:System.DateTime> 戻り値の型、 <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> 型は、内部の機能が備わってシリアライザーを返します \(`StringValueSerializer`\)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="descriptor" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得する対象の型。</param>
        <summary>指定した型に宣言された <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
        <returns>指定した型に関連付けられているシリアライザー。<see langword="null" /> を返す場合があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Markup.ValueSerializer> 適用することで、型が示されているため、 <xref:System.Windows.Markup.ValueSerializerAttribute> 型宣言の属性です。<xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> メソッドは、ユーティリティ メソッドを CLR 型のシステム情報を読み取ってを返す新しい <xref:System.Windows.Markup.ValueSerializer> 場合に、クラスが属性に基づく、指定された \[ `type`します。`null` このようなシリアライザーが存在しないかどうかに返されます。`null` 返される場合も、型が null 値で意図的に設定されているかどうかは <xref:System.Windows.Markup.ValueSerializerAttribute>です。  
  
 別のモードを <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> サポートしていますが、内部から返されます `TypeConverterValueSerializer` はクラス、 <xref:System.Windows.Markup.ValueSerializer> をラップする実装、 <xref:System.ComponentModel.TypeConverter> し、変換、 `Convert` メソッドを `Convert*String` メソッド \(たとえば <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=fullName> の入力が呼び出された、 <xref:System.String> 種類、およびに変換される <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>します。 これは、次のすべてが true の場合にのみ行います。  
  
-   A <xref:System.ComponentModel.TypeConverterAttribute> で見つかった `type`します。  
  
-   指定した <xref:System.ComponentModel.TypeConverter> 正常に作成できます。  
  
-   <xref:System.ComponentModel.TypeConverter> 返します `true` の <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=fullName>, を参照するという、 <xref:System.String> 型です。  
  
-   <xref:System.ComponentModel.TypeConverter> 返します `true` の <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=fullName>, を参照するという、 <xref:System.String> 型です。  
  
-   <xref:System.ComponentModel.TypeConverter> 返します `true` の <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=fullName>, を参照するという、 <xref:System.String> 型です。  
  
> [!NOTE]
>  特殊なケースを次に示します: <xref:System.DateTime> 戻り値の型、 <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> 型は、内部の機能が備わってシリアライザーを返します \(`StringValueSerializer`\)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="descriptor">シリアル化するプロパティの記述子。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary>指定したコンテキストを使って、指定したプロパティに対して宣言された <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
        <returns>指定したプロパティに関連付けられたシリアライザー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 純粋に頼ることがなく、報告された属性の CLR 型システムでこのオーバー ロードを使用して、 `context` をサービスとしてのサービスの実装を呼び出して、 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=fullName>です。<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=fullName> にも依存する通常の実装、 `descriptor`, が、特定のコンテキストの特別な動作を実装することがあります。  
  
 呼び出し元がある、使用可能なときに、このメソッドを呼び出す必要があります <xref:System.Windows.Markup.IValueSerializerContext> サービスからです。  これは、ようにすると、正しい <xref:System.Windows.Markup.ValueSerializer> の特定のコンテキストが返されます。  
  
 コンテキストを返す場合 `null` からその <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=fullName> 、指定された `descriptor`, 、または指定したコンテキストが `null`, 、動作を呼び出すことと同じ、 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> オーバー ロードします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="descriptor" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得する対象の型。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary>指定したコンテキストを使用して、指定された型に宣言されている <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
        <returns>指定した型に関連付けられているシリアライザー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 純粋に頼ることがなく、報告された属性の CLR 型システムでこのオーバー ロードを使用して、 `context` をサービスとしてのサービスの実装を呼び出して、 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=fullName>です。<xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=fullName> にも依存する通常の実装、 `type`, が、特定のコンテキストの特別な動作を実装することがあります。  
  
 呼び出し元がある、使用可能なときに、このメソッドを呼び出す必要があります <xref:System.Windows.Markup.IValueSerializerContext> サービスからです。 これは、ようにすると、正しい <xref:System.Windows.Markup.ValueSerializer> の特定のコンテキストが返されます。  
  
 コンテキストを返す場合 `null` からその <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=fullName> 、指定された `type`, 、または指定したコンテキストが `null`, 、動作を呼び出すことと同じ、 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> オーバー ロードします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">シリアル化する値。</param>
        <param name="context">変換に使用されるコンテキスト情報。</param>
        <summary>
          <see cref="T:System.Windows.Markup.ValueSerializer" /> によって参照される型の列挙体を取得します。</summary>
        <returns>このシリアライザーによって変換された型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての種類、 <xref:System.Windows.Markup.ValueSerializer> に変換は、返される列挙体に含める必要があります。  これにより、シリアライザーが十分な型については、このシリアライザーに変換できるようにします。  
  
 高度なシナリオは、このメソッドをオーバーライドします。 オーバーライドする必要がありますのみしなければならないシステムを実装する場合は CLR 型システムの ownertype プロパティ関係が XAML スキーマ コンテキストを使用できると十分な情報が報告しないでください。  
  
## WPF の使用上の注意  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] プロパティ システム実装をオーバーライドする内部値シリアライザー <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> 依存関係プロパティにそのことができますが追加いる所有者の概念があるためです。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 式では、特殊な内部処理もあります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSerializerFor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得、 <see cref="T:System.Windows.Markup.ValueSerializer" /> オブジェクトです。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>