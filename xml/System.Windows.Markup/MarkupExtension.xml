<Type Name="MarkupExtension" FullName="System.Windows.Markup.MarkupExtension">
  <TypeSignature Language="C#" Value="public abstract class MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.MarkupExtension" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>.NET Framework XAML サービスおよびその他の XAML リーダーと XAML ライターによってサポートされる XAML マークアップ拡張機能の実装のための基底クラスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 マークアップ拡張機能は、文字列の属性値またはマークアップ要素に XAML の入力を基に、呼び出し元にオブジェクトを返します。 マークアップ拡張機能は、型コンバーターのみを行うより高度な方法でオブジェクトを返します。 XAML オブジェクト ライターでは、型またはメンバーに関連付けられている型コンバーターの実装があるために、型コンバーターが呼び出されます。 CLR フレームの参照からそのため、型またはメンバーが <xref:System.ComponentModel.TypeConverterAttribute> 属性です。 XAML 型システムの観点からつまり、XAML の型または XAML メンバーの値、 `TypeConverter` プロパティです。 型コンバーターの呼び出しでは、型またはプロパティの定義に関連付けられたおよび、このような場合の XAML 処理によって常に呼び出されます。 これに対し、マークアップ拡張機能では、ユーザー コードとユーザー生成のマークアップの制御下にある詳細ができ、アプリケーション シナリオが要求されるたびに適用できます。 マークアップ拡張機能では、呼び出すことがされ、マークアップ拡張機能の戻り値の型がその値に割り当てることができるようにさまざまな型メンバーの値を設定するため使用できます。  
  
 カスタム マークアップ拡張機能の作成方法の詳細については、次を参照してください。 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>します。 一般にマークアップ拡張機能の詳細については、次を参照してください。 [Markup Extensions for XAML Overview](http://msdn.microsoft.com/ja-jp/261b2b11-2dc0-462f-8c66-55b8c9c6e436)します。 WPF とを使用して、または XAML のマークアップ拡張機能の作成を作成する場合は、他の関連情報できます」を参照、 [マークアップ拡張機能と WPF XAML](http://msdn.microsoft.com/ja-jp/618dc745-8b14-4886-833f-486d2254bb78)します。  
  
 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> 各マークアップ拡張機能の実装の方法を使用することができます、 <xref:System.IServiceProvider> 実行時にコンテキストを提供することができます。 これは、  <xref:System.IServiceProvider> などについてを渡す特定のサービスについて照会されます <xref:System.Windows.Markup.IProvideValueTarget> または <xref:System.Windows.Markup.IXamlTypeResolver>です。 サービスのコンテキスト、マークアップ拡張機能の詳細については、次を参照してください。 [Service Contexts Available to Type Converters and Markup Extensions](http://msdn.microsoft.com/ja-jp/b4dad00f-03da-4579-a4e9-d8d72d2ccbce)します。  
  
 派生クラスは属性を設定する <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> からマークアップ拡張機能の使用可能な特定の戻り値の型のコンシューマーに通知する <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> 実装します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Markup.MarkupExtension" /> から派生したクラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Markup.MarkupExtension> 抽象クラスの初期化を必要とする任意のプライベート値を保持しません。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A functional markup extension should define its own public default constructor. Additionally, the markup extension should implement constructors that are appropriate for the extension's intended capabilities and markup usage. For more information, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public abstract object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">マークアップ拡張機能のサービスを提供できるサービス プロバイダーのヘルパー。</param>
        <summary>派生クラスで実装された場合、このマークアップ拡張機能のターゲット プロパティの値として提供されるオブジェクトを返します。</summary>
        <returns>拡張機能が適用されたプロパティで設定するオブジェクト値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す XAML プロセッサは、マークアップ拡張機能は、型のノードとメンバー値を処理するとき、 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> メソッドをそのマークアップ拡張機能の結果をオブジェクト グラフやシリアル化ストリームに書き込みます。 XAML オブジェクト ライターによるこのような実装を各をサービス コンテキストに渡します、 `serviceProvider` パラメーター。  
  
 実装する方法についての詳細を参照してください「ノート実行者」セクション <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> カスタム マークアップ拡張機能にします。  
  
## WPF の使用上の注意  
  
> [!IMPORTANT]
>  マークアップの集合演算で特定の相互作用のある WPF クラスに依存しない <xref:System.Windows.Markup.IReceiveMarkupExtension> の [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 実装します。 使用 <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>の代わりにコールバックの属性を設定します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Common services returned by the default service provider that is typically available to a custom or existing <see cref="T:System.Windows.Markup.MarkupExtension" /> implementation include the following primary services.  
  
-   <see cref="T:System.Windows.Markup.IProvideValueTarget" /> reports the object reference and a property identifier from the context where the markup extension is used  
  
-   <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> exposes a service that parallels the general XAML object writing behavior that can provide a <see cref="T:System.Type" /> based on a XAML type name. The name can optionally include a prefix for a mapped XAML namespace.  
  
-   <see cref="T:System.Xaml.IXamlSchemaContextProvider" /> exposes the active XAML schema context directly. From the reported <see cref="T:System.Xaml.XamlSchemaContext" />, you can obtain XAML schema context information such as how assemblies are mapped for type support, preferred prefix in assemblies, lists of each <see cref="T:System.Xaml.XamlType" /> in an assembly, and so on.  
  
-   Other services available for more specialized markup extension scenarios include:  
  
    -   <see cref="T:System.Windows.Markup.IUriContext" />  
  
    -   <see cref="T:System.Xaml.IAmbientProvider" />  
  
    -   <see cref="T:System.Xaml.IDestinationTypeProvider" />  
  
    -   <see cref="T:System.Xaml.IRootObjectProvider" />  
  
    -   <see cref="T:System.Xaml.IXamlNameResolver" />  
  
    -   <see cref="T:System.Xaml.IXamlNamespaceResolver" />  
  
 Potentially, implementations of <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> can ignore the <paramref name="serviceProvider" /> parameter. This is viable for some basic scenarios, where no context at all is required for returning a value.  
  
 In typical usage, the .NET Framework XAML Services and the implemented XAML object writers will provide a service provider to all value converter methods that are invoked during XAML processing. However, for robustness, you should provide code paths for null values both for the service provider itself and for any requested service. Null values might occur if your markup extension is applied in a circumstance where the typical service support provided by a XAML processor infrastructure is not available.  
  
 For more information on available services from the XAML service provider context and how to use them, see [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md).  
  
 Implementations that require a certain service to be available in order to produce a useful <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> result are expected to throw exceptions if that service is not available. The recommended exception to throw is <see cref="T:System.InvalidOperationException" />.  
  
 The implementation may also throw exceptions if one of the arguments that the custom markup extension needs in order to provide a value is null, is invalid for its data type, or does not contain a value that the markup extension is capable of processing. The recommended exception to throw is <see cref="T:System.InvalidOperationException" />.</para>
        </block>
        <altmember cref="T:System.Windows.Markup.IProvideValueTarget" />
        <altmember cref="T:System.Windows.Markup.IXamlTypeResolver" />
      </Docs>
    </Member>
  </Members>
</Type>