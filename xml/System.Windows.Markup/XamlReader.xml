<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>XAML 入力を読み込んで、WPF の既定の XAML リーダーと、関連する XAML オブジェクト ライターを使用して、オブジェクト グラフを作成します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 同期 <xref:System.Windows.Markup.XamlReader.Load%2A> メソッドは静的では、非同期 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> メソッドが静的なもののインスタンスを必要と、 <xref:System.Windows.Markup.XamlReader> クラスを使用します。  
  
 出力、 `Load` メソッドが作成されたオブジェクト ツリーまたはオブジェクト グラフのルート オブジェクトを表す 1 つのオブジェクト。 オブジェクトによって作成されるグラフ <xref:System.Windows.Markup.XamlReader> 通常実行時に WPF アプリケーションの既存のオブジェクト ツリーに追加します。 それ以外の場合、新しいオブジェクト グラフは、WPF アプリケーション モデルのため切断されたと見なされます。 つまり、表示できない、WPF アプリケーションの主要なオブジェクトのツリーに適用手法のいずれかのオブジェクト ツリーとしてアクセスを使用することはできません \(Api など <xref:System.Windows.FrameworkElement.FindName%2A>, 、<xref:System.Windows.LogicalTreeHelper>, 、<xref:System.Windows.Media.VisualTreeHelper>\)。 オブジェクト ツリーの概念の詳細については、次を参照してください。 [WPF のツリー](http://msdn.microsoft.com/ja-jp/e83f25e5-d66b-4fc7-92d2-50130c9a6649)します。  
  
 <xref:System.Windows.Markup.XamlReader> 次の主なシナリオをサポートしています。  
  
-   **クローン化\/オブジェクト ファクトリ**: 追加機構せず、参照型一般に含めることができません WPF オブジェクト ツリー内の 1 つ以上の位置にします。 \(共有のサポートを提供または WPF で再利用できるその他のメカニズムの例に基づくオブジェクトが含まれる <xref:System.Windows.Freezable>, などの一般的に共有できるオブジェクトのサポートまたは <xref:System.Windows.Media.Brush> からアイテムとして参照されている、 <xref:System.Windows.ResourceDictionary>.\) 使用してオブジェクトをシリアル化になっているオブジェクトのクローンを作成する方法の 1 つのオブジェクト ツリーは <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=fullName>です。 文字列を使用するシリアル化された入力としての呼び出しを <xref:System.Windows.Markup.XamlReader.Load%2A>, 、ストリームまたは <xref:System.Xml.XmlReader> の仲介役として。  
  
-   **だけ時の情報に基づくオブジェクトのコンストラクト**: 多くの場合、遅延バインディングまたはユーザー指定の入力が既存のオブジェクトの状態を変更するには、他の方法があります。 たとえば、1 つ以上のプロパティを設定する同じ値を使用またはデータ バインディングを使用できます。 シナリオを作成するオブジェクトの種類ものみ確定またはユーザーの操作で実行時にした場合の文字列を作成することによりこのようなオブジェクトを作成しが <xref:System.Windows.Markup.XamlReader.Load%2A> 入力が便利な方法では多くの場合。  
  
-   **既存のリソースの手法を使用して**: <xref:System.IO.Stream> 型が頻繁にで使用フレームワークまたはテクノロジの他のアプリケーションの境界を越えてデータまたはオブジェクトを転送するためやのような状況です。 使用して、 <xref:System.IO.Stream> 格納または最終的に使用して、アプリケーションの一部としてオブジェクトを作成する XAML 形式のデータを取得するための技法です。  
  
-   **ドキュメントを固定:** 、アプリケーションは、WPF アプリケーションのオブジェクト ツリーと UI に含めることのローカルまたはダウンロード済みの XPS ドキュメントを読み込む場合もあります。  
  
> [!NOTE]
>  場合によって、このドキュメントでは、オブジェクト ツリーではなく、オブジェクト グラフについて説明します。 厳密な親子のリレーションシップが常にありません、実行時の WPF アプリケーションの実行時のオブジェクトのリレーションシップのオブジェクト グラフがより広く適用可能な用語であるため。 ただし、WPF では、2 つの異なるツリー概念化 Api も含まれるため \(<xref:System.Windows.LogicalTreeHelper>, 、<xref:System.Windows.Media.VisualTreeHelper>\) WPF では、ほとんどの実際の場合に、ツリーの比喩を適切にも該当します。 XAML 言語の観点から、オブジェクト グラフは多くの場合、最適な見方をすると、XAML からオブジェクトを作成する方法は、XAML 言語そのものは必ずしも指定しないのでリレーションシップ ツリー構造に再度戻すヘルパー クラスの方法論です。  
  
## コード アクセス セキュリティ、Loose XAML および XamlReader  
 XAML は、オブジェクトのインスタンス化と実行を直接表すマークアップ言語です。 そのため、XAML で作成した要素、同じする機能があります \(ネットワーク アクセス、ファイル システムの入出力、たとえば\) システム リソースとの対話は、対応する生成コードします。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] サポートしています、 [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] セキュリティ フレームワーク [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)]します。 つまり、この [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] インターネット ゾーンで実行されているコンテンツが実行のアクセス許可を制限します。 "Loose XAML"\(コンパイルされない XAML のページと解釈の読み込み時に XAML ビューアーで\) と [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] このインターネット ゾーンでは、通常実行して、同じアクセス許可セットを使用します。  ただし、完全に信頼されたアプリケーションに読み込まれた XAML では、ホスト アプリケーションのようにシステム リソースに対する同じアクセスがあります。 詳細については、次を参照してください。 [WPF 部分信頼セキュリティ](http://msdn.microsoft.com/ja-jp/ef2c0810-1dbf-4511-babd-1fab95b523b5)します。  
  
 これらのステートメントの影響 <xref:System.Windows.Markup.XamlReader> は、アプリケーションの設計がロードする場合、XAML に関する信頼性の決定を行う必要があります。 信頼されていない XAML を読み込む場合は、生成されたオブジェクト グラフを読み込む方法について、独自のサンド ボックス化手法を実装することを検討してください。  
  
 <xref:System.Windows.Markup.XamlReader> 部分信頼コードから呼び出すこともできます。 この場合は、インターネット セキュリティ ゾーンは、コード アクセス セキュリティに対して適用されます。 読み込まれた XAML では何も情報がインターネット セキュリティ ゾーンで有効でない場合は、XAML の解析例外がスローされます。 \[XBAP とプラットフォーム レベルでは、部分的に信頼をそれ以外の場合、 <xref:System.Windows.Markup.XamlReader> 一部である、実行の明示的な部分的な信頼関係の呼び出しと同様の例外動作は同じを取得します。  
  
## WPF XAML、XAML リーダー\/ライター、および XAML 言語のバージョン管理  
 [!INCLUDE[xaml2009](~/includes/xaml2009-md.md)] などの言語機能が含まれているとします。 署名を使用することができます `Load` または `Parse` をこれらの機能を使用する XAML を読み込みます。 ただし、これらの言語機能が XAML マークアップ コンパイルする必要があるためサポートされていません \(の XAML など、 **ページ** ビルド アクションでは、WPF アプリケーションの場合、または XAML ビルド アクションにマークアップ コンパイル タスクを含む\)。  
  
 WPF の型と WPF テクノロジ一般に WPF の内部構造へのアクセスに依存している概念がサポートします。 たとえば、WPF 依存関係プロパティを実装する方法は、効率的な型メンバーの参照に関する内部の手法に依存します。 提供される Api の読み取りと書き込み、XAML でこれらの内部構造へのアクセスが有効になっている <xref:System.Windows.Markup.XamlWriter> と <xref:System.Windows.Markup.XamlReader> から、 <xref:System.Windows.Markup> 名前空間と PresentationFramework アセンブリ。 ただし、下位レベルの XAML リーダーと XAML ライターを System.Xaml アセンブリから \(クラスに基づきます <xref:System.Xaml.XamlReader?displayProperty=fullName>, 、<xref:System.Xaml.XamlWriter?displayProperty=fullName>\) WPF の内部構造へのアクセスはありません。 System.Xaml から任意の WPF 固有のアセンブリへの依存関係はありません。 WPF の内部構造にアクセスできなければ、System.Xaml リーダーとライターに正常に読み込むことができませんまたは型、または型での WPF 型に基づくすべての WPF を保存します。 具体的には、System.Xaml リーダーとライターは、WPF 依存関係プロパティがプロパティ ストア、または WPF でのスタイル、リソース ディクショナリ、およびテンプレートの使用方法の詳細をすべてのバックアップなどの概念を理解されません。 そのため、選択することがある場合。  
  
-   WPF の型を読み込む XAML の BAML 形式はまったくしている場合や場合、は、PresentationFramework XAML リーダーと XAML ライターを使用します。  
  
-   任意の WPF 型または XAML の BAML 形式は、せずしてそのフレームワークに固有の上の理由から特定のテクノロジの別の XAML リーダーまたは XAML ライターの実装を使用しない場合は、System.Xaml XAML リーダーと XAML ライターを使用します。  
  
## System.Xaml .NET 4 での実装をバックアップします。  
 <xref:System.Windows.Markup.XamlReader> WPF フレームワーク レベル XAML パーサーの呼び出し可能な API サーフェイスです。 同じ基になる XAML パーサーが実行時の XAML を読み込み、対象とする WPF アプリケーションの解析も行い [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] と [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]です。  
  
 対象としている場合は、 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], 、外部 API、同じですが、実装のパーツが上に構築された、 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] の XAML を解析技術とレポートの多くが向上される System.Xaml アセンブリに全般的な XAML の実装です。 対象とする [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] System.Xaml から報告された例外が取得されるように、実装の詳細と、参照として System.Xaml を追加が必要ですが型を定義するとは限りません。  
  
<a name="xamlTextUsage_XamlReader"></a>   
## XAML テキストの使用方法  
   
  
## 例  
 次の例では、変換、 <xref:System.Windows.Controls.Button> を使用して文字列に、 <xref:System.Windows.Markup.XamlWriter> クラスです。  文字列は、再度読み込んで、 <xref:System.Windows.Controls.Button> 、静的 using <xref:System.Windows.Markup.XamlReader.Load%2A> メソッドを <xref:System.Windows.Markup.XamlReader> クラスです。  
  
 [!code-csharp[xamlreaderwritersnippets\#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets\#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Markup.XamlReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保留中の非同期の読み込み操作がある場合は、現在の非同期ロード操作を中止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Markup.XamlReader.CancelAsync%2A> 非同期操作です。そのため、操作を中止する前に、いくつかの読み込みが発生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Xaml.XamlSchemaContext" /> の WPF スキーマ コンテキストの設定を表すオブジェクト、 <see cref="T:System.Windows.Markup.XamlReader" />です。</summary>
        <returns>A <see cref="T:System.Xaml.XamlSchemaContext" /> の WPF スキーマ コンテキストの設定を表すオブジェクト、 <see cref="T:System.Windows.Markup.XamlReader" />です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">読み込むには、ストリームの形式で XAML です。</param>
        <summary>指定した XAML 入力を読み取り <see cref="T:System.IO.Stream" /> 返します、 <see cref="T:System.Object" /> 、対応するオブジェクト ツリーのルートです。</summary>
        <returns>作成されたオブジェクト ツリーのルートにあるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では保存、 <xref:System.Windows.Controls.Button> に、 <xref:System.IO.MemoryStream> を使用して、 <xref:System.Windows.Markup.XamlWriter> クラスです。 ストリームは、再度読み込んで、 <xref:System.Windows.Controls.Button> 、静的 using <xref:System.Windows.Markup.XamlReader.Load%2A> メソッドを <xref:System.Windows.Markup.XamlReader> クラスです。  
  
 [!code-csharp[XamlReaderWriterSnippets\#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets\#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xaml.XamlReader" /> オブジェクト。 入力 XAML が初期化されていると考えられます。</param>
        <summary>指定されたを通じて XAML 入力を読み取り <see cref="T:System.Xaml.XamlReader" /> し、対応するオブジェクト ツリーのルートを表すオブジェクトを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルートを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 入力 <xref:System.Xaml.XamlReader> できる <xref:System.Windows.Baml2006.Baml2006Reader>です。 これは、実行時に、またはローカライズ ツールのために、BAML を読み込むことができますか。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" /> XML 形式で読み込むように入力 XAML が既に読み込まれています。</param>
        <summary>指定した XAML 入力を読み取り <see cref="T:System.Xml.XmlReader" /> し、対応するオブジェクト ツリーのルートを表すオブジェクトを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルートを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、変換、 <xref:System.Windows.Controls.Button> を使用して文字列に、 <xref:System.Windows.Markup.XamlWriter> クラスです。  文字列は、再度読み込んで、 <xref:System.Windows.Controls.Button> 、静的 using <xref:System.Windows.Markup.XamlReader.Load%2A> メソッドを <xref:System.Windows.Markup.XamlReader> クラスです。  
  
 [!code-csharp[XamlReaderWriterSnippets\#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets\#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">このストリームは、読み込む入力 XAML が含まれています。</param>
        <param name="parserContext">パーサーによって使用されるコンテキスト情報。</param>
        <summary>指定した XAML 入力を読み取り <see cref="T:System.IO.Stream" /> し、対応するオブジェクト ツリーのルートを表すオブジェクトを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルートを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="parserContext" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">XAML を読み込む入力を含むストリーム。</param>
        <summary>指定した XAML 入力を読み取り <see cref="T:System.IO.Stream" /> し、対応するオブジェクト ツリーのルートを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルートを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 非同期の XAML 読み込み操作は、純粋にルート オブジェクトであるオブジェクト最初に戻ります。 非同期に、XAML を解析しが引き続き発生するし、子オブジェクトは、ルートの下に入力されます。 これは、動作とオブジェクトの有効期間の概念を WPF との対話を処理する一般的な WPF XAML とは対照的です。 一般的な \(非 async\) との対話はすべての子コレクションを含むオブジェクトのすべてのプロパティは要素を返すと、読み込みであることを報告する前に格納されます。 その動作は、ルート オブジェクトの使用可能になる最後のオブジェクト ツリーを作成するためのボトムアップ方式に相当します。  
  
 通常、WPF アプリケーションのオブジェクト ツリー内のある場所に割り当てる、返されたオブジェクトには、コンテンツの知識を持つがまだ入力されるおよび全体のコンテンツは、UI の一部として公開されている場合にインクリメンタル レイアウトの更新が発生する可能性があります。 この理由は、別のアプリケーションを特定したり、XAML から非同期的に読み込まれたオブジェクトを仮想化したり、ときに通知するアプリケーション固有のロジックまたはアプリケーションの状態を使用する標準的な <xref:System.Windows.Markup.XamlReader.LoadCompleted> 処理されます。  
  
 順序で <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> 属性と値を非同期的に入力 XAML を読み込む、入力 XAML のルート要素があります `x:SynchronousMode="Async"`します。 値は大文字と小文字です。 XAML 入力ルートが含まれていない場合 `x:SynchronousMode="Async"`, 、例外はスローされず、および同期の負荷の一部として処理される呼び出しは、\(を参照してください <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>\)。  
  
 インスタンスごとに 1 つだけの非同期ロード操作、 <xref:System.Windows.Markup.XamlReader> クラスは、一度に行うことができます。  同じインスタンスで複数の非同期操作が試みられたかどうか、 <xref:System.Windows.Markup.XamlReader> クラス、 <xref:System.InvalidOperationException> がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">複数のロード操作が保留中と同時に同じ <see cref="T:System.Windows.Markup.XamlReader" />します。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">既存の  <see cref="T:System.Xml.XmlReader" /> が既に読み込まれた読み取り XAML 入力します。</param>
        <summary>指定した XAML 入力を読み取り <see cref="T:System.Xml.XmlReader" /> し、対応するオブジェクト ツリーのルートを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルートです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 非同期の XAML 読み込み操作は、純粋にルート オブジェクトであるオブジェクト最初に戻ります。 非同期に、XAML を解析しが引き続き発生するし、子オブジェクトは、ルートの下に入力されます。 これは、動作とオブジェクトの有効期間の概念を WPF との対話を処理する一般的な WPF XAML とは対照的です。 一般的な \(非 async\) との対話はすべての子コレクションを含むオブジェクトのすべてのプロパティは要素を返すと、読み込みであることを報告する前に格納されます。 その動作は、ルート オブジェクトの使用可能になる最後のオブジェクト ツリーを作成するためのボトムアップ方式に相当します。  
  
 返されたオブジェクト割り当てられる通常 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> 、アプリケーションのオブジェクト ツリー内のある場所にコンテンツの知識を持つがまだ入力され、全体のコンテンツは、UI の一部として公開されている場合にインクリメンタル レイアウトの更新が発生する可能性があります。 この理由は、別のアプリケーションを特定したり、XAML から非同期的に読み込まれたオブジェクトを仮想化したり、ときに通知するアプリケーション固有のロジックまたはアプリケーションの状態を使用する標準的な <xref:System.Windows.Markup.XamlReader.LoadCompleted> 処理されます。  
  
 順序で <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> 属性と値を非同期的に入力 XAML を読み込むには、XAML マークアップのルート要素があります `x:SynchronousMode="Async"`します。 値は大文字と小文字です。 XAML マークアップのルートに含まれない場合 `x:SynchronousMode="Async"`, 呼び出しは同期読み込みとして処理される代わりに、例外はスローされません \(を参照してください <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>\)。  
  
 インスタンスごとに 1 つだけの非同期ロード操作、 <xref:System.Windows.Markup.XamlReader> クラスは、一度に行うことができます。  同じインスタンスで複数の非同期操作が試みられたかどうか、 <xref:System.Windows.Markup.XamlReader> クラス、 <xref:System.InvalidOperationException> がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">同じと同時に複数の読み込み操作が実行される <see cref="T:System.Windows.Markup.XamlReader" />します。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">XAML を読み込む入力を含むストリーム。</param>
        <param name="parserContext">パーサーによって使用されるコンテキスト情報。</param>
        <summary>指定した XAML 入力を読み取り <see cref="T:System.IO.Stream" /> し、対応するオブジェクト ツリーのルートを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルートです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 非同期の XAML 読み込み操作は、純粋にルート オブジェクトであるオブジェクト最初に戻ります。 非同期に、XAML を解析しが引き続き発生するし、子オブジェクトは、ルートの下に入力されます。 これは、動作とオブジェクトの有効期間の概念を WPF との対話を処理する一般的な WPF XAML とは対照的です。 一般的な \(非 async\) との対話はすべての子コレクションを含むオブジェクトのすべてのプロパティは要素を返すと、読み込みであることを報告する前に格納されます。 その動作は、ルート オブジェクトの使用可能になる最後のオブジェクト ツリーを作成するためのボトムアップ方式に相当します。  
  
 通常、アプリケーションのオブジェクト ツリー内のある場所に割り当てる、返されたオブジェクトには、コンテンツの知識を持つがまだ入力されるおよび全体のコンテンツは、UI の一部として公開されている場合にインクリメンタル レイアウトの更新が発生する可能性があります。 この理由は、別のアプリケーションを特定したり、XAML から非同期的に読み込まれたオブジェクトを仮想化したり、ときに通知するアプリケーション固有のロジックまたはアプリケーションの状態を使用する標準的な <xref:System.Windows.Markup.XamlReader.LoadCompleted> 処理されます。  
  
 順序で <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> 属性と値のマークアップを非同期で読み込むには、XAML マークアップのルート要素があります `x:SynchronousMode="Async"`します。 値は大文字と小文字です。 XAML マークアップのルートに含まれない場合 `x:SynchronousMode="Async"`, 、例外はスローされず、および同期の負荷の一部として処理される呼び出しは、\(を参照してください <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>\)。  
  
 インスタンスごとに 1 つだけの非同期ロード操作、 <xref:System.Windows.Markup.XamlReader> クラスは、一度に行うことができます。  同じインスタンスで複数の非同期操作が試みられたかどうか、 <xref:System.Windows.Markup.XamlReader> クラス、 <xref:System.InvalidOperationException> がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">同じと同時に複数の読み込み操作が実行される <see cref="T:System.Windows.Markup.XamlReader" />します。</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期の読み込み操作の完了時に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Markup.XamlReader.LoadCompleted> 非同期の読み込み操作の中止時にも発生します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText">入力を 1 つのテキスト文字列としての XAML です。</param>
        <summary>指定されたテキスト文字列内の XAML 入力を読み取り、指定したマークアップのルートに対応するオブジェクトを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルートです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実装の呼び出し <xref:System.Windows.Markup.XamlReader.Load%2A> 文字列からストリームを作成した後に、内部的にします。 参照してください <xref:System.Windows.Markup.XamlReader.Load%2A> 可能性のある例外などの詳細。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText">入力を 1 つのテキスト文字列としての XAML です。</param>
        <param name="parserContext">パーサーによって使用されるコンテキスト情報。</param>
        <summary>指定されたテキスト文字列内の XAML マークアップを読み取ります \(、指定した <see cref="T:System.Windows.Markup.ParserContext" />\) し、指定したマークアップのルートに対応するオブジェクトを返します。</summary>
        <returns>作成されたオブジェクト ツリーのルートです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実装の呼び出し <xref:System.Windows.Markup.XamlReader.Load%2A> 文字列からストリームを作成した後に、内部的にします。 参照してください <xref:System.Windows.Markup.XamlReader.Load%2A> 可能性のある例外などの詳細。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたテキスト文字列内のマークアップを読み取り、指定したマークアップのルートに対応するオブジェクトを返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XAML 入力を読み取り、対応するオブジェクト ツリーのルートを返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XAML マークアップを読み取り、指定したマークアップのルートに対応するオブジェクトを返します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>