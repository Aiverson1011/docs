<Type Name="HtmlForm" FullName="System.Web.UI.HtmlControls.HtmlForm">
  <TypeSignature Language="C#" Value="public class HtmlForm : System.Web.UI.HtmlControls.HtmlContainerControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HtmlForm extends System.Web.UI.HtmlControls.HtmlContainerControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlControls.HtmlForm" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlControls.HtmlContainerControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>サーバーの HTML <see langword="&lt;form&gt;" /> 要素へのプログラムによるアクセスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールは、Web フォーム ページ上のサーバー コントロールのコンテナーです。 開始タグと終了タグの間、サーバーにポストバックできるすべてのサーバー コントロールを配置する必要があります、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールです。  
  
> [!NOTE]
>  ASP.NET では、1 つだけ <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールを Web フォーム ページ上でアクティブにします。 1 つ以上を使用する必要がある場合 active <xref:System.Web.UI.HtmlControls.HtmlForm> コントロール \[Web フォーム\] ページで、共通言語ランタイムがスローされます、 <xref:System.Web.HttpException?displayProperty=fullName> ページを要求したときに、例外です。 ただし、使用することができます、 <xref:System.Web.UI.WebControls.MultiView> 場所を制御各 <xref:System.Web.UI.WebControls.View> オブジェクトには、1 つ含まれる <xref:System.Web.UI.HtmlControls.HtmlForm> を制御するため 1 つだけ <xref:System.Web.UI.WebControls.View> 任意の時点でアクティブには。  
  
 動作を制御する、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールのプロパティを設定します。 フォームのデータのエンコードの種類を指定する、 <xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A> プロパティです。 メソッド \(`GET` または `POST`\)、ブラウザーを使用して設定して処理が指定されたは、サーバーにフォーム データをポストする、 <xref:System.Web.UI.HtmlControls.HtmlForm.Method%2A> プロパティです。  
  
> [!CAUTION]
>  既定では、<xref:System.Web.UI.HtmlControls.HtmlForm.Method%2A> プロパティは `POST` に設定されます。 このプロパティの値を変更する `GET`, が、これが組み込みの状態を解除ポストバックの ASP.NET ページ フレームワークによって提供されるサービスです。  
  
 実装するコントロールを構成することができます、 <xref:System.Web.UI.WebControls.IButtonControl> 別のターゲット\] ページに投稿するインターフェイスです。 これは、ページ間ポスティングと呼ばれます。 詳細については、「[Cross\-Page Posting in an ASP.NET Web Page](http://msdn.microsoft.com/ja-jp/fedf234e-b7c4-4644-a9e8-c1c0870b043b)」を参照してください。  
  
 インスタンスの初期プロパティ値の一覧については <xref:System.Web.UI.HtmlControls.HtmlForm>, を参照してください、 <xref:System.Web.UI.HtmlControls.HtmlForm.%23ctor%2A> コンス トラクターです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.HtmlControls.HtmlForm> 単純なフォームを作成するクラス。  
  
 [!code-csharp[HtmlForm\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm/CS/htmlformcs.aspx#1)]
 [!code-vb[HtmlForm\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm/VB/htmlformvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.HtmlControls.HtmlContainerControl" />
    <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Enctype" />
    <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Method" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを使用して作成しの新しいインスタンスを初期化、 <xref:System.Web.UI.HtmlControls.HtmlForm> クラスです。  
  
 次の表は、のインスタンスの初期プロパティ値を示しています。 <xref:System.Web.UI.HtmlControls.HtmlForm>します。  
  
|プロパティ|初期値|  
|-----------|---------|  
|<xref:System.Web.UI.HtmlControls.HtmlControl.TagName%2A>|「フォーム」リテラル文字列です。|  
  
   
  
## 例  
 次のコード例では、新しいインスタンスを作成、 <xref:System.Web.UI.HtmlControls.HtmlForm> を制御し、Web ページ上に配置します。  
  
 [!code-csharp[HtmlFormCtor\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlFormCtor/CS/htmlformctorcs.aspx#1)]
 [!code-vb[HtmlFormCtor\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlFormCtor/VB/htmlformctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlControl.TagName" />
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTML フォームの action 属性を取得または設定します。</summary>
        <value>HTML フォームの action 属性。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、<xref:System.Web.UI.HtmlControls.HtmlForm.Action%2A>プロパティの元の要求の URL の書き換えが HTML フォームのアクション属性の元の URL を保持する場合にします。 設定、<xref:System.Web.UI.HtmlControls.HtmlForm.Action%2A>プロパティを保持する URL の値にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpContext.RewritePath(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ClientID">
      <MemberSignature Language="C#" Value="public override string ClientID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.ClientID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>によって生成されたコントロールの識別子を取得 ASP.NET の <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> コントロール</summary>
        <value>によって生成されたコントロール id ASP.NET の <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> コントロールです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 防ぐために、コントロールの複数のインスタンスが表示されると、名前の競合 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 一意を自動的に生成 <xref:System.Web.UI.HtmlControls.HtmlForm.ClientID%2A> ページ上の各コントロールの値。 詳細については、<xref:System.Web.UI.Control.ClientID%2A?displayProperty=fullName> プロパティを参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.CreateControlCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新たに作成 <see cref="T:System.Web.UI.ControlCollection" /> のコレクション、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> コントロールです。</summary>
        <returns>A <see cref="T:System.Web.UI.ControlCollection" /> を含む、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> コントロールの子サーバー コントロール。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="DefaultButton">
      <MemberSignature Language="C#" Value="public string DefaultButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultButton" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の子コントロール、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 、ENTER キーが押されたときに、ポストバックを発生させるコントロールです。</summary>
        <value>
          <see cref="P:System.Web.UI.Control.ID" /> 既定値として表示するボタン コントロールのボタン、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 読み込まれます。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> プロパティを使用して、ユーザーのユーザーがポストバックが \(テキスト ボックス\) などのフォームの入力コントロールで ENTER キーを押すことを指定できます。 任意のコントロールから派生した既定のボタンとして指定できます、 <xref:System.Web.UI.WebControls.IButtonControl> インターフェイスを除く、 <xref:System.Web.UI.WebControls.LinkButton> コントロールです。 場合によって参照されているコントロール、 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> プロパティがから派生していない <xref:System.Web.UI.WebControls.IButtonControl>, 、 <xref:System.InvalidOperationException> 例外がスローされます。  
  
 マスター ページを使用して設定すると、 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> \[コンテンツ\] ページで使用するプロパティ、 <xref:System.Web.UI.Control.UniqueID%2A> のプロパティ、 <xref:System.Web.UI.WebControls.IButtonControl> \] ボタンをクリックします。 マスター ページの詳細については、次を参照してください。 [ASP.NET Master Pages Overview](http://msdn.microsoft.com/ja-jp/4e53eedf-8304-4e7a-aed1-691a2623b28b)します。  
  
 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> プロパティは、次のシナリオで、ポストバックを発生させません可能性があります。  
  
-   フォームの入力コントロール外にフォーカスがある場合は、\[ENTER キーを押します。 既定のポストバック アクションは、開始されるようには保証されません。  
  
-   フォーカスが複数行テキスト ボックス内にある場合は、\[ENTER キーを押します。 複数行のテキスト ボックスでは、動作は、ENTER キーを押して、\[テキスト ボックスに新しい行が作成されます。 一部のブラウザーで ENTER キーを押して複数行のテキスト ボックスのトリガー内ポストバックします。 その場合は、代わりに新しい行を作成するには ENTER をする場合は、入力コントロールに JavaScript 関数をアタッチできます。 スクリプトは、ENTER キーをキャプチャし、ポストバックを停止する必要があります。 たとえば、使用、 <xref:System.Web.UI.WebControls.WebControl.Attributes%2A> 用のクライアント スクリプトを追加するプロパティのコレクション、 `onKeyPress` イベントです。  
  
-   指定する、 <xref:System.Web.UI.WebControls.LinkButton> を既定のボタン コントロールです。 のみ <xref:System.Web.UI.WebControls.Button> と <xref:System.Web.UI.WebControls.ImageButton> コントロールがサポートされています。  
  
-   変更する、 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> 非同期ポストバック中にプログラムを使用してプロパティです。 非同期ポストバックは、1 つまたは複数を追加することで、ページで有効にする <xref:System.Web.UI.UpdatePanel> ページにコントロールできます。 詳細については、[UpdatePanel Control Overview](http://msdn.microsoft.com/ja-jp/29a2265d-9674-4c19-b70e-e5560ee9689a) および [Partial\-Page Rendering Overview](http://msdn.microsoft.com/ja-jp/5c12736d-d9e9-464a-9388-3fe0f9f49e49) を参照してください。  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> ポストバックを発生させる既定のコントロールを設定するプロパティです。  
  
 [!code-csharp[HtmlForm.DefaultButton\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.DefaultButton/CS/htmlform.defaultbuttoncs.aspx#1)]
 [!code-vb[HtmlForm.DefaultButton\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.DefaultButton/VB/htmlform.defaultbuttonvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">参照型の既定のボタンがないため、コントロール <see cref="T:System.Web.UI.WebControls.IButtonControl" />します。</exception>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus" />
        <altmember cref="P:System.Web.UI.Control.ID" />
        <altmember cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="T:System.Web.UI.WebControls.IButtonControl" />
      </Docs>
    </Member>
    <Member MemberName="DefaultFocus">
      <MemberSignature Language="C#" Value="public string DefaultFocus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultFocus" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の入力を持つコントロールとして表示するフォームのコントロール フォーカス、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> コントロールが読み込まれます。</summary>
        <value>
          <see cref="P:System.Web.UI.Control.ClientID" /> 入力を持つコントロールとして表示するフォーム上のコントロールのフォーカス、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 読み込まれます。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> 入力を持つコントロールとして表示するフォームのコントロールにアクセスするプロパティ フォーカス、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールが読み込まれます。 フォーカスがあることを示す視覚的には、選択できるコントロールが表示されます。 たとえば、 <xref:System.Web.UI.WebControls.TextBox> カーソルがその内部に配置にフォーカスを持つコントロールが表示されます。  
  
 使用してフォーカスを持つコントロールを設定することも、 <xref:System.Web.UI.Control.Focus%2A> または <xref:System.Web.UI.Page.SetFocus%2A> メソッドです。 これらのメソッドを優先順位を持ち、 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> プロパティです。 持つコントロールを設定するこれらのメソッドのいずれかが呼び出された場合の焦点の値、 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> プロパティは無視されます。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> フォームが読み込まれたときに、入力フォーカスを持つコントロールとフォーム上の指定したコントロールを表示するプロパティです。`Form1` のレンダリングでは、カーソルが置かれているに注意してください `TextBox1`, ことを示すを `TextBox1` がフォーカスを持つコントロールです。  
  
 [!code-csharp[HtmlForm.DefaultButton\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.DefaultButton/CS/htmlform.defaultbuttoncs.aspx#1)]
 [!code-vb[HtmlForm.DefaultButton\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.DefaultButton/VB/htmlform.defaultbuttonvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" />
        <altmember cref="P:System.Web.UI.Control.ID" />
        <altmember cref="M:System.Web.UI.Control.Focus" />
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="Enctype">
      <MemberSignature Language="C#" Value="public string Enctype { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Enctype" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Enctype" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはフォームのデータをサーバーにポストバックするときにブラウザーが使用するエンコードの種類を設定します。</summary>
        <value>エンコードの種類を表す文字列。 既定値は空の文字列 \(""\)、ブラウザーの既定のコンテンツ タイプを使用することを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A> 、エンコード、ブラウザーの種類を指定するには、サーバーにデータがポストバックを使用しています。  
  
 次の表は、一般的なエンコードの種類を示します。  
  
|エンコードの種類|説明|  
|--------------|--------|  
|application\/x\-www\-form\-urlencoded|フォームのデータは、名前\/値ペアとしてエンコードされます。 これは、標準のエンコード形式です。|  
|マルチパート\/フォーム データ|フォームのデータは、ページ上の各コントロールの別の部分をメッセージとしてエンコードされます。|  
|テキスト\/プレーン|フォームのデータは、コントロールまたは書式指定文字が含まれないテキスト形式でエンコードされます。|  
  
 エンコードの種類の詳細については、次を参照してください。、 [World Wide Web Consortium \(W3C Web site](http://go.microsoft.com/fwlink/?linkid=37125)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A> 、エンコード、ブラウザーの種類を指定するには、サーバーにデータを送信を使用しています。  
  
 [!code-csharp[HtmlForm\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm/CS/htmlformcs.aspx#1)]
 [!code-vb[HtmlForm\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm/VB/htmlformvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Method" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public string Method { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Method" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはブラウザーがフォームのデータを処理するため、サーバーにポストバックする方法を示す値を設定します。</summary>
        <value>ブラウザーがフォームのデータをサーバーにポストバックする方法を示す文字列です。 既定値は <see langword="POST" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、ブラウザーがフォームのデータを処理するため、サーバーに送信する方法を指定します。 すべてのブラウザーでサポートされている 2 つの一般的なメソッドは `GET` と `POST`です。  
  
> [!CAUTION]
>  このプロパティと使用の既定値をオーバーライドすることができます、 `GET` メソッドの代わりに `POST`します。 ただし、ため `GET` 要求は、限られたデータ量に含めることができますを使用して、 `GET` メソッドがいくつかの場合、原因で失敗する、ASP.NET page framework によって提供されるポストバックおよび状態管理機能。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.HtmlControls.HtmlForm.Method%2A> プロパティをフォームのデータがサーバーにポストバックされることを指定します。  
  
 [!code-csharp[HtmlForm\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm/CS/htmlformcs.aspx#1)]
 [!code-vb[HtmlForm\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm/VB/htmlformvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Enctype" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別子名を取得、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> コントロールです。</summary>
        <value>識別子名を格納する文字列、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> 一意の識別子名を判断するプロパティ、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールです。 この実装でこのプロパティの取得の値を返す、 <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> プロパティです。 ただし、プロパティの設定は割り当てません値プロパティにします。 プロパティを設定しません値プロパティに代入しないこのため、 <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> プロパティと同じ値には、 <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> プロパティです。  
  
> [!NOTE]
>  `name` 属性は、XHTML 準拠の属性ではないに関係なく ASP.NET ではレンダリングされません、 `xhtmlConformance` 設定します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.UniqueID" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.EventArgs" /> イベント データを格納します。</param>
        <summary>
          <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> コントロールの <see cref="E:System.Web.UI.Control.Init" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって通知されると、 <xref:System.Web.UI.HtmlControls.HtmlForm.OnInit%2A> メソッドでは、Web サーバー コントロールはインスタンスを作成および設定に必要な初期化の手順を実行する必要があります。 サーバー コントロールのライフ サイクルのこの段階で、コントロールのビュー ステートを設定する必要があります。 さらに、子またはこのコントロールの親であるかどうかにかかわらず、このメソッドが呼び出されたときにその他のサーバー コントロールにアクセスすることはできません。 他のサーバー コントロールでは、作成されたアクセスできる状態に限りません。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Web.UI.WebControls.GridView.OnInit%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 <xref:System.Web.UI.HtmlControls.HtmlForm.OnInit%2A> の機能を拡張するコントロールの開発者が、主にメソッドを使用、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" /> method in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" /> method so that registered delegates receive the event. Additionally, calling the base class's <see cref="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" /> method ensures that the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> control is properly set as the Web page form and the page's view state is persisted.</para>
        </block>
        <altmember cref="M:System.Web.UI.Page.RegisterViewStateHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.OnPreRender(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> コントロールの <see cref="E:System.Web.UI.Control.PreRender" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlControls.HtmlForm.OnPreRender%2A> だけ表示する前にメソッドが呼び出される、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールです。 場合、 <xref:System.Web.UI.Page.SmartNavigation%2A?displayProperty=fullName> にプロパティが設定されている `true`, 、 <xref:System.Web.UI.HtmlControls.HtmlForm.OnPreRender%2A> メソッドは、その出力を取得できるように、スマート ナビゲーション スクリプト ファイルの参照を登録します。  
  
> [!NOTE]
>  <xref:System.Web.UI.Page.SmartNavigation%2A?displayProperty=fullName> プロパティは ASP.NET version 2.0 では推奨されません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.SmartNavigation" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> 、レンダリングされたコンテンツを受け取る。</param>
        <summary>レンダリング、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> を指定したコントロール <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlControls.HtmlForm.Render%2A> メソッドは、HTML をレンダリング `<iframe>` 要素場合、 <xref:System.Web.UI.Page.SmartNavigation%2A> にプロパティが設定されている `true`します。<xref:System.Web.UI.HtmlControls.HtmlForm.Render%2A> メソッドを呼び出す基本 <xref:System.Web.UI.Control.Render%2A> メソッドです。  
  
 <xref:System.Web.UI.HtmlControls.HtmlForm.Render%2A> の機能を拡張するコントロールの開発者が、主にメソッドを使用、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> への参照がないコントロールを表示しない、 <see cref="T:System.Web.UI.Page" /> インスタンス。</exception>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Web.UI.HtmlControls.HtmlForm.Render(System.Web.UI.HtmlTextWriter)" /> method in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.HtmlControls.HtmlForm.Render(System.Web.UI.HtmlTextWriter)" /> method so that the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> control's child controls are correctly rendered.</para>
        </block>
        <altmember cref="T:System.Web.HttpException" />
        <altmember cref="P:System.Web.UI.Page.SmartNavigation" />
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderAttributes">
      <MemberSignature Language="C#" Value="protected override void RenderAttributes (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderAttributes(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> 、レンダリングされたコンテンツを受け取る。</param>
        <summary>レンダリング、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> コントロールの属性を指定した <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes%2A> メソッドの使用方法、 <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> をチェックするメソッド、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールの属性の開始タグで、表示できることを確認する、 `<form>` HTML 要素です。  
  
 さらに、 <xref:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes%2A> メソッドでの表示、 `method`, 、`action`, 、および `onsubmit` の属性、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールです。 コントロールの ID 設定されている場合、 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> プロパティを実装しません、 <xref:System.Web.UI.WebControls.IButtonControl> 、インターフェイス、 <xref:System.InvalidOperationException> 例外がスローされます。  
  
 <xref:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes%2A> の機能を拡張するコントロールの開発者が、主にメソッドを使用、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">コントロール ID に設定、 <see cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" /> 型のプロパティは使用されません <see cref="T:System.Web.UI.WebControls.IButtonControl" />します。</exception>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" /> method in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" /> method so that the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> control's attributes are correctly rendered.</para>
        </block>
        <altmember cref="M:System.Web.UI.HtmlControls.HtmlControl.RenderAttributes(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" />
        <altmember cref="T:System.Web.UI.WebControls.IButtonControl" />
        <altmember cref="T:System.InvalidOperationException" />
      </Docs>
    </Member>
    <Member MemberName="RenderChildren">
      <MemberSignature Language="C#" Value="protected override void RenderChildren (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderChildren(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.RenderChildren(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> 、レンダリングされたコンテンツを受け取る。</param>
        <summary>子のコントロールを描画、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.HtmlControls.HtmlForm.RenderChildren%2A> メソッドで指定したコントロールには、ブラウザーのフォーカスが設定されていることを確認するクライアント スクリプトの表示、 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> プロパティです。  
  
> [!NOTE]
>  指定されたコントロール、 <xref:System.Web.UI.Page.SetFocus%2A?displayProperty=fullName> プロパティで指定されたコントロールよりも優先、 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Web ページが 1 つ以上のサーバー側 <see langword="&lt;form&gt;" /> タグ。</exception>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderChildren(System.Web.UI.HtmlTextWriter)" /> method in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderChildren(System.Web.UI.HtmlTextWriter)" /> method so that the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> control's child controls are correctly rendered.</para>
        </block>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus" />
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.Control.Focus" />
      </Docs>
    </Member>
    <Member MemberName="RenderControl">
      <MemberSignature Language="C#" Value="public override void RenderControl (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RenderControl(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.RenderControl(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> フォーム コントロールの内容を受け取る。</param>
        <summary>レンダリング、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> を指定したコントロール <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderControl(System.Web.UI.HtmlTextWriter)" /> method in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)" /> method so that the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> control is correctly rendered.</para>
        </block>
        <altmember cref="P:System.Web.UI.Control.DesignMode" />
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SubmitDisabledControls">
      <MemberSignature Language="C#" Value="public virtual bool SubmitDisabledControls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubmitDisabledControls" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定できるように、ページがサーバーにポストバックした後、その値を保持するために、その値を送信するクライアントで無効にコントロールを強制するかどうかを示すブール値。</summary>
        <value>
          <see langword="true" /> 値を送信するクライアントで無効になっているコントロールが強制された場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> プロパティを強制的にコントロールをページがポストバックときに、その値を送信するクライアントで無効にするかどうかを指定します。 これにより、ページがサーバーにポストバック後に、その値を保持するために無効になっているコントロールです。 ときに、 <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> にプロパティが設定されている `false`, 、クライアント スクリプトを使用して無効になっているフォーム上のコントロールは送信できませんサーバーに、次回、ページがポストバックされます。 その結果、無効になっているコントロールが格納されている任意の値は失われます。 ページがサーバーにポストバック後に、その値を保持するために無効になっているコントロールを許可するように設定、 <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> プロパティを `true`します。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> プロパティをフォームに `true` コントロールは、ページがサーバーにポストバック後に、その値を維持するためにクライアント スクリプトによって無効にします。 設定した場合、この例では、 <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> プロパティを `false` \] をクリックし、 **がポスト バック** ボタン、HTML テキスト ボックス内のテキストが失われたおよび HTML のチェック ボックスをオン不要になった。  
  
 [!code-csharp[HtmlForm.SubmitDisabledControls\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.SubmitDisabledControls/CS/htmlform.submitdisabledcontrolscs.aspx#1)]
 [!code-vb[HtmlForm.SubmitDisabledControls\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.SubmitDisabledControls/VB/htmlform.submitdisabledcontrolsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public string Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Target" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または、サーバーに送信される情報の結果を表示するためのウィンドウ フレームを設定します。</summary>
        <value>ブラウザー ウィンドウまたはフレームをサーバーにポストバックされた情報の結果が表示されます。 既定値は空の文字列 \(""\)、ウィンドウまたはフォーカスのあるフレームが更新されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> プロパティを対象となるウィンドウを指定するか、フレームをサーバーに送信される情報の結果が表示されます。 サーバーにポストバックされた情報の結果のリダイレクトは、高度なタスクです。 ポスト バックするだけでこのプロパティを使用することをお勧めします。  
  
> [!NOTE]
>  <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> としてプロパティを表示、 `target` 属性です。`target` 属性を `form` 要素は、XHTML 1.1 では許可されません。 したがって、出力されるマークアップは、XHTML 標準に準拠する必要がありますまたは、ユーザー補助の標準に準拠する必要があります、設定しないでください、 <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> プロパティです。 詳細については、[ASP.NET and XHTML Compliance](http://msdn.microsoft.com/ja-jp/1b78d416-66bb-43a5-ac77-c703aab55b97) および [Accessibility in Visual Studio 2010 and ASP.NET 4](http://msdn.microsoft.com/ja-jp/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) を参照してください。  
  
 <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> 値は、範囲の A ~ Z \(小文字\)、次の特殊な値を除く、アンダー スコアで始まるの文字で始まる必要があります。  
  
|対象の値|説明|  
|----------|--------|  
|`_blank`|新しいウィンドウ フレームを使用せずにコンテンツをレンダリングします。|  
|`_parent`|直前のフレーム セットの親に内容を表示します。|  
|`_search`|\[検索\] ウィンドウのコンテンツをレンダリングします。|  
|`_self`|フォーカスのあるフレームのコンテンツをレンダリングします。|  
|`_top`|フル ウィンドウ フレームを使用せずにコンテンツをレンダリングします。|  
  
> [!NOTE]
>  かどうかをブラウザーのマニュアルを確認して、 `_search` 値はサポートされています。  Microsoft Internet Explorer 5.0 およびそれ以降のサポートなど、 `_search` ターゲット値。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> については、結果を表示するフレームなしに新しいウィンドウを指定するには、サーバーにポストバックされます。  
  
 [!code-csharp[HtmlFormTarget\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlFormTarget/CS/htmlformtargetcs.aspx#1)]
 [!code-vb[HtmlFormTarget\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlFormTarget/VB/htmlformtargetvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UniqueID">
      <MemberSignature Language="C#" Value="public override string UniqueID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.UniqueID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>割り当てられている一意なプログラム識別子を取得、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> コントロールです。</summary>
        <value>割り当てられている一意なプログラム識別子、 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> コントロールです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> に割り当てられている一意なプログラム識別子を取得するプロパティ、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールです。 このプロパティ値を返す定数で、コントロールを格納しているときに基本実装をオーバーライドして、 <xref:System.Web.UI.INamingContainer>\-カスタム サーバー コントロールなどのページ以外のオブジェクトを実装します。 名前付けコンテナーが、ページの値であるかどうか、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールの <xref:System.Web.UI.Control.ID%2A> プロパティが返されます。  
  
 <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> プロパティおよび <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> プロパティは常に同じ値を返します。 これは便利な場合に、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールが必要とするブラウザーにレンダリングされる、 <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールの <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> と <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> 同じにするプロパティです。 同期するには、これらのプロパティを保持する、 <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> プロパティは常の値を返す、 <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> プロパティです。  
  
> [!NOTE]
>  `name` 属性は、XHTML 準拠の属性ではないと、既定では ASP.NET によって表示されません。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> の一意の識別子を取得するプロパティを <xref:System.Web.UI.HtmlControls.HtmlForm> コントロールです。  
  
 [!code-csharp[HtmlForm.UniqueID\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.UniqueID/CS/htmlform.uniqueidcs.aspx#1)]
 [!code-vb[HtmlForm.UniqueID\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.UniqueID/VB/htmlform.uniqueidvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Name" />
      </Docs>
    </Member>
  </Members>
</Type>