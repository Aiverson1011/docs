<Type Name="PrintQueue" FullName="System.Printing.PrintQueue">
  <TypeSignature Language="C#" Value="public class PrintQueue : System.Printing.PrintSystemObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi PrintQueue extends System.Printing.PrintSystemObject" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintQueue" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Printing.PrintSystemObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>プリンターと印刷ジョブを管理します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のプロパティ、 <xref:System.Printing.PrintQueue> 、コンピューターで実行されている印刷キュー ユーティリティの特性を表すオブジェクトですが、機能や、プリンター自体の状態を表す他のユーザーです。 たとえば、 <xref:System.Printing.PrintQueue.NumberOfJobs%2A> 印刷キューの特性しますが、 <xref:System.Printing.PrintQueue.Location%2A> プリンターのプロパティは、です。 ユーザーの介入が必要があるかどうかなど、プリンターのプロパティの多くの方法で渡される必要がある、 <xref:System.Printing.PrintQueue.Refresh%2A> 、プリンター自体からのメソッドに、 <xref:System.Printing.PrintQueue> オブジェクトです。 これは、対応するプロパティの前に行う必要があります \(<xref:System.Printing.PrintQueue.NeedUserIntervention%2A>\)、プログラムによって読み取られます。 同様に、プログラムがの 1 つまたは複数のプロパティの値を変更すると、 <xref:System.Printing.PrintQueue> オブジェクトの変更は、コンピューターの実際の印刷キューのユーティリティに書き込む必要があります。 そのためには、 <xref:System.Printing.PrintQueue.Commit%2A> メソッドです。  
  
> [!CAUTION]
>  クラス内で、 <xref:System.Printing> Windows サービスや ASP.NET アプリケーションまたはサービス内で使用する名前空間はサポートされていません。 これらのアプリケーションの種類のいずれかの内側からこれらのクラスを使用しようと、予期しない問題が発生する可能性があります、低下しているなどのサービスのパフォーマンスと実行時の例外です。  
  
 Windows フォーム アプリケーションから印刷するを参照して、 <xref:System.Drawing.Printing> 名前空間。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Printing.PrintServer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="printServer">印刷キューをホストするプリント サーバー。</param>
        <param name="printQueueName">印刷キューの名前。</param>
        <summary>新しいインスタンスを初期化 <see cref="T:System.Printing.PrintQueue" /> クラスの指定して <see cref="T:System.Printing.PrintServer" /> とキューの名前。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Printing.PrintQueue> コンス トラクターを含まない、 <xref:System.Printing.PrintSystemDesiredAccess> パラメーターの既定値を <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> アクセスします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="printServer">印刷キューをホストするプリント サーバー。</param>
        <param name="printQueueName">印刷キューの名前。</param>
        <param name="printSchemaVersion">使用する印刷スキーマのバージョン。</param>
        <summary>新しいインスタンスを初期化 <see cref="T:System.Printing.PrintQueue" /> クラスの指定して <see cref="T:System.Printing.PrintServer" />, 、キュー名、およびスキーマのバージョンを印刷します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Printing.PrintQueue> コンス トラクターを含まない、 <xref:System.Printing.PrintSystemDesiredAccess> パラメーターの既定値を <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> アクセスします。  
  
 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397) Windows Vista と共にリリースされたバージョンが「1」です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
      </Parameters>
      <Docs>
        <param name="printServer">印刷キューをホストするプリント サーバー。</param>
        <param name="printQueueName">印刷キューの名前。</param>
        <param name="propertyFilter">配列 <see cref="T:System.Printing.PrintQueueIndexedProperty" /> を初期化するプロパティ値を指定する値。</param>
        <summary>新しいインスタンスを初期化 <see cref="T:System.Printing.PrintQueue" /> クラスの指定して <see cref="T:System.Printing.PrintServer" />, 、キュー名、および配列の <see cref="T:System.Printing.PrintQueueIndexedProperty" /> を初期化する値。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Printing.PrintQueue> コンス トラクターを含まない、 <xref:System.Printing.PrintSystemDesiredAccess> パラメーターの既定値を <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> アクセスします。  
  
 持つコンス トラクターの使用、 `propertyFilter` パラメーターのパフォーマンスが向上します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintSystemDesiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">印刷キューをホストするプリント サーバー。</param>
        <param name="printQueueName">印刷キューの名前。</param>
        <param name="desiredAccess">いずれか、 <see cref="T:System.Printing.PrintSystemDesiredAccess" /> プログラムのニーズの印刷キューへのアクセスの種類を指定します。</param>
        <summary>新しいインスタンスを初期化 <see cref="T:System.Printing.PrintQueue" /> クラスの指定して <see cref="T:System.Printing.PrintServer" />, 、キュー名、およびアクセスが必要です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" /> 値にのみ適用できるは、 <see cref="T:System.Printing.PrintServer" /> オブジェクトは、 <see cref="T:System.Printing.PrintQueue" /> オブジェクトです。 たとえば、<see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" /> のようにします。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="printServer">印刷キューをホストするプリント サーバー。</param>
        <param name="printQueueName">印刷キューの名前。</param>
        <param name="propertyFilter">初期化するためにプロパティの名前の配列。</param>
        <summary>新しいインスタンスを初期化 <see cref="T:System.Printing.PrintQueue" /> クラスの指定して <see cref="T:System.Printing.PrintServer" />, 、キュー名、および初期化するためにプロパティ名の配列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Printing.PrintQueue> コンス トラクターを含まない、 <xref:System.Printing.PrintSystemDesiredAccess> パラメーターの既定値を <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> アクセスします。  
  
 持つコンス トラクターの使用、 `propertyFilter` パラメーターのパフォーマンスが向上します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32,System.Printing.PrintSystemDesiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">印刷キューをホストするプリント サーバー。</param>
        <param name="printQueueName">印刷キューの名前。</param>
        <param name="printSchemaVersion">使用する印刷スキーマのバージョン。</param>
        <param name="desiredAccess">いずれか、 <see cref="T:System.Printing.PrintSystemDesiredAccess" /> プログラムのニーズの印刷キューへのアクセスの種類を指定します。</param>
        <summary>新しいインスタンスを初期化 <see cref="T:System.Printing.PrintQueue" /> クラスの指定して <see cref="T:System.Printing.PrintServer" />, 、キュー名、スキーマのバージョン、および必要なアクセスを印刷します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397) Windows Vista と共にリリースされたバージョンが「1」です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" /> 値にのみ適用できるは、 <see cref="T:System.Printing.PrintServer" /> オブジェクトは、 <see cref="T:System.Printing.PrintQueue" /> オブジェクトです。 たとえば、<see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" /> のようにします。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">印刷キューをホストするプリント サーバー。</param>
        <param name="printQueueName">印刷キューの名前。</param>
        <param name="propertyFilter">配列 <see cref="T:System.Printing.PrintQueueIndexedProperty" /> 初期化するためにプロパティを指定する値。</param>
        <param name="desiredAccess">いずれか、 <see cref="T:System.Printing.PrintSystemDesiredAccess" /> プログラムのニーズの印刷キューへのアクセスの種類を指定します。</param>
        <summary>新しいインスタンスを初期化 <see cref="T:System.Printing.PrintQueue" /> 、指定したクラス <see cref="T:System.Printing.PrintServer" />, 、キュー名の配列、 <see cref="T:System.Printing.PrintQueueIndexedProperty" /> 値を初期化、および必要なアクセスします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 持つコンス トラクターの使用、 `propertyFilter` パラメーターのパフォーマンスが向上します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" /> 値にのみ適用できるは、 <see cref="T:System.Printing.PrintServer" /> オブジェクトは、 <see cref="T:System.Printing.PrintQueue" /> オブジェクトです。 たとえば、<see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" /> のようにします。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">印刷キューをホストするプリント サーバー。</param>
        <param name="printQueueName">印刷キューの名前。</param>
        <param name="propertyFilter">初期化するためにプロパティの名前の配列。</param>
        <param name="desiredAccess">いずれか、 <see cref="T:System.Printing.PrintSystemDesiredAccess" /> プログラムのニーズの印刷キューへのアクセスの種類を指定します。</param>
        <summary>新しいインスタンスを初期化 <see cref="T:System.Printing.PrintQueue" /> クラスの指定して <see cref="T:System.Printing.PrintServer" />, キュー名、プロパティのフィルター、およびアクセスに必要です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 持つコンス トラクターの使用、 `propertyFilter` パラメーターのパフォーマンスが向上します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <paramref name="desiredAccess" /> 値にのみ適用できるは、 <see cref="T:System.Printing.PrintServer" /> オブジェクトは、 <see cref="T:System.Printing.PrintQueue" /> オブジェクトです。 たとえば、<see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" /> のようにします。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddJob">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しい印刷ジョブをキューに挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 キューが一時停止やキューの先頭になったときにエラー状態で、ジョブは出力をを除き、これは印刷機能。  
  
 その他の方法で印刷する [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] を含める、 <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=fullName> メソッド、またはダイアログ ボックスで、多くを開かずに使用できます <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> と <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> のメソッド、 <xref:System.Windows.Xps.XpsDocumentWriter>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新しい \(一般的に名前付き\)、印刷ジョブがコンテンツを持つを挿入、 <see cref="T:System.Byte" /> キューへの配列。</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> 印刷ジョブとその状態を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、デバイス固有の情報をによって自動的に含まれていないスプール ファイルに書き込み、 [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] スプーラーです。 もちろん、スプール ファイルかどうかを把握する必要がある [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] または [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]です。 使用する場合、 <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)], 、使用することができます、 <xref:System.Printing.PrintQueueStream> このメソッドではなくクラスです。  
  
 後に、 <xref:System.Printing.PrintQueue.AddJob%2A> メソッドが呼び出された書き込む必要があります、 <xref:System.Byte> 配列を <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> のプロパティ、 <xref:System.Printing.PrintSystemJobInfo> によって返される <xref:System.Printing.PrintQueue.AddJob%2A> したり印刷ジョブは作成されません。 この配列は、プリンターが動作し、一時停止されていない場合の出力です。  
  
> [!CAUTION]
>  場合、 <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> で終了していない <xref:System.IO.Stream.Close%2A> のスレッドが終了する前に <xref:System.Printing.PrintQueue.AddJob%2A> が呼び出される、 <xref:System.InvalidOperationException> スプーラー スレッドに制御を取得できないためにそのスレッドが終了したときにスローされる、 <xref:System.IO.Stream> オブジェクトです。  
  
 印刷キューの [!INCLUDE[TLA#tla_gui](~/includes/tlasharptla-gui-md.md)], 、ジョブが「System のドキュメントを印刷する」という名前です。 ジョブの別の名前を与えるを使用して、 <xref:System.Printing.PrintQueue.AddJob%28System.String%29> オーバー ロードします。  
  
 その他の方法で印刷する [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] を含める、 <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=fullName> メソッド、またはダイアログ ボックスで、多くを開かずに使用できます <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> と <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> のメソッド、 <xref:System.Windows.Xps.XpsDocumentWriter>です。  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Printing.PrintQueue.AddJob> を送信する、 <xref:System.Byte> 印刷キューへの配列。 このコードは、検出して、プレーン テキストを印刷するプリンターでのみ使用します。 それらの一部ことはできません。  
  
 [!code-csharp[WriteToSpoolFile\#AddUnnamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addunnamedjob)]
 [!code-vb[WriteToSpoolFile\#AddUnnamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addunnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="jobName">印刷ジョブの名前。</param>
        <summary>コンテンツを持つ新しい印刷ジョブを挿入、 <see cref="T:System.Byte" /> キューへの配列。</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> 印刷ジョブとその状態を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、デバイス固有の情報をによって自動的に含まれていないスプール ファイルに書き込み、 [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] スプーラーです。 もちろん、スプール ファイルかどうかを把握する必要がある [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] または [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]です。 使用する場合、 <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)], 、使用することができます、 <xref:System.Printing.PrintQueueStream> このメソッドではなくクラスです。  
  
 後に、 <xref:System.Printing.PrintQueue.AddJob%2A> メソッドが呼び出された書き込む必要があります、 <xref:System.Byte> 配列を <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> のプロパティ、 <xref:System.Printing.PrintSystemJobInfo> によって返される <xref:System.Printing.PrintQueue.AddJob%2A> したり印刷ジョブは作成されません。 この配列は、プリンターが動作し、一時停止されていない場合の出力です。  
  
> [!CAUTION]
>  場合、 <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> で終了していない <xref:System.IO.Stream.Close%2A> のスレッドが終了する前に <xref:System.Printing.PrintQueue.AddJob%2A> が呼び出される、 <xref:System.InvalidOperationException> スプーラー スレッドに制御を取得できないためにそのスレッドが終了したときにスローされる、 <xref:System.IO.Stream> オブジェクトです。  
  
 その他の方法で印刷する [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] を含める、 <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=fullName> メソッド、またはダイアログ ボックスで、多くを開かずに使用できます <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> と <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> のメソッド、 <xref:System.Windows.Xps.XpsDocumentWriter>です。  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Printing.PrintQueue.AddJob%28System.String%29> にファイルを読み取る、 <xref:System.Byte> 配列を配列の印刷キューに送信します。 このコードでは、c: ドライブのルートに test.txt という名前のファイルがあることを前提としています。 このコードは、検出して、プレーン テキストを印刷するプリンターでのみ使用します。 それらの一部ことはできません。  
  
 [!code-csharp[WriteToSpoolFile\#AddNamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addnamedjob)]
 [!code-vb[WriteToSpoolFile\#AddNamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.Printing.PrintTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="jobName">パスと印刷されるドキュメントの名前。</param>
        <param name="printTicket">印刷ジョブの設定です。</param>
        <summary>新しい印刷ジョブを挿入、 XML Paper Specification (XPS) がキューにドキュメントにし、指定した名前と設定を移します。</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> 印刷ジョブとその状態を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 詳細については、「<xref:System.Printing.PrintQueue.AddJob%28System.String%29>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="fastCopy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobName">印刷ジョブの名前。</param>
        <param name="documentPath">パスと印刷されるドキュメントの名前。</param>
        <param name="fastCopy">
          <see langword="true" /> ページの進行状況のフィードバックをファイルが有効であるかを検証せずにすばやくスプールする XPS。 そうしないと、 <see langword="false" />です。</param>
        <summary>新しい印刷ジョブを挿入、 XML Paper Specification (XPS) ドキュメントがキューにできるように、指定した名前とを検証するかどうかを指定します。</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> 印刷ジョブとその状態を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `fastCopy` は `true`, 、プリンターがある必要があります、 [印刷の概要](http://msdn.microsoft.com/ja-jp/0de8ac41-9aa6-413d-a121-7aa6f41539b1)します。 でない場合、 <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> メソッドは例外をスローします。  
  
 場合 `fastCopy` は `false`, 、XPSDrv プリンターを使用する必要はなくなります。[!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)] キューに追加されているファイルは PCL や Postscript などのプリンターのページ記述言語に変換します。 ただしへの呼び出しは、このような印刷 [!INCLUDE[TLA#tla_com](~/includes/tlasharptla-com-md.md)]します。 呼び出し [!INCLUDE[TLA2#tla_com](~/includes/tla2sharptla-com-md.md)] 呼び出し元のスレッドは、シングル スレッド アパートメントである必要があります \(<xref:System.Threading.ApartmentState.STA>\) マルチ スレッド アパートメントではなく \(<xref:System.Threading.ApartmentState.MTA>\) の既定値は [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 2.0 以降。 \(スレッド、アパートメントの状態の詳細は、次を参照してください [マネージとアンマネージ スレッド](http://msdn.microsoft.com/ja-jp/db425c20-4b2f-4433-bf96-76071c7881e5), 、および <xref:System.Threading.ApartmentState>。\)。 これを行う 2 つの方法があります。  
  
-   最も簡単な方法は、追加する、 <xref:System.STAThreadAttribute> \(つまり、"`[System.STAThreadAttribute()]`"\)、アプリケーションの最初の行のすぐ上 `Main` メソッド \(通常"`static void Main(string[] args)`"\) です。  
  
-   必要がある場合、 `Main` スレッドのアパートメントの状態になる <xref:System.Threading.ApartmentState.MTA>, への呼び出しを収容する <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> にそのアパートメント状態が設定されている別のスレッドで <xref:System.Threading.ApartmentState.STA> と <xref:System.Threading.Thread.SetApartmentState%2A>です。 次の例では、この 2 つ目の方法を示します。  
  
> [!NOTE]
>  適用することはできません、 <xref:System.STAThreadAttribute> を除く任意のメソッドに `Main` を使用することはできませんと <xref:System.Threading.Thread.SetApartmentState%2A> の `Main` スレッドです。  
  
 その他の方法で印刷する [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] を含める、 <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=fullName> メソッド、またはダイアログ ボックスで、多くを開かずに使用できます <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> と <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> のメソッド、 <xref:System.Windows.Xps.XpsDocumentWriter>です。  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> バッチ全体を印刷する、 [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] ディレクトリ内のファイルです。  
  
 [!code-csharp[BatchPrintXPSFiles\#BatchPrintXPSFiles](~/samples/snippets/csharp/VS_Snippets_Wpf/BatchPrintXPSFiles/CSharp/Program.cs#batchprintxpsfiles)]
 [!code-vb[BatchPrintXPSFiles\#BatchPrintXPSFiles](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BatchPrintXPSFiles/visualbasic/program.vb#batchprintxpsfiles)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.ApartmentState" />
        <altmember cref="T:System.STAThreadAttribute" />
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean,System.Printing.PrintTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="fastCopy" Type="System.Boolean" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="jobName">パスと印刷されるドキュメントの名前。</param>
        <param name="documentPath">パスと印刷されるドキュメントの名前。</param>
        <param name="fastCopy">
          <see langword="true" /> ページの進行状況のフィードバックをファイルが有効であるかを検証せずにすばやくスプールする XPS。 そうしないと、 <see langword="false" />です。</param>
        <param name="printTicket">印刷ジョブの設定です。</param>
        <summary>新しい印刷ジョブを挿入、 XML Paper Specification (XPS) ドキュメントに、キューによって、指定した名前と設定されを検証するかどうかを指定します。</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> 印刷ジョブとその状態を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 詳細については、「<xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AveragePagesPerMinute">
      <MemberSignature Language="C#" Value="public virtual int AveragePagesPerMinute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AveragePagesPerMinute" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.AveragePagesPerMinute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>1 分あたりのページ数で測定されたプリンターの速度を取得します。</summary>
        <value>平均ページは、毎分プリンターの印刷されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public int ClientPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ClientPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ClientPrintSchemaVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バージョンを取得、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397)します。</summary>
        <value>バージョン、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397) で使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397) Windows Vista でリリースされたバージョンは 1 です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public virtual string Comment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comment" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Comment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはプリンターに関するコメントを設定します。</summary>
        <value>プリンターに関するコメントです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コメントは、Windows プリンターの一覧で、Windows の一般的な印刷ダイアログでユーザーに表示されます。 プリンターの名前、モデル、または同じの場所に表示されても場所のプロパティに含まれていない情報を提供できます。たとえば、"のための予約給与午後 3 時と午後 4 時間の部署。" \(、 <xref:System.Printing.PrintQueue.Description%2A> プロパティでは、ユーザーが参照するアプリケーションでは、表示される情報を格納することができます\)。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Commit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のプロパティを書き込み、 <see cref="T:System.Printing.PrintQueue" /> プリント サーバーの実際の印刷キューに登録オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロパティに、プログラムは、変更、 <xref:System.Printing.PrintQueue> オブジェクトは実際には反映されません、プログラムが実行されるまで、 <xref:System.Printing.PrintQueue.Commit%2A> メソッドです。  
  
 メソッドが必要ですが、 <xref:System.Printing.PrintQueue> でオブジェクトを作成する <xref:System.Printing.PrintSystemDesiredAccess.AdministratePrinter> 権限です。  
  
   
  
## 例  
 次の例では、2 つの印刷チケットをマージするときにこのメソッドを使用する方法を示します。  
  
 [!code-csharp[PrintTicketManagment\#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment\#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">プロパティの一部をコミットできませんでした。</exception>
        <exception cref="T:System.Printing.PrintCommitAttributesException">プロパティの一部をコミットできませんでした。  
  
 または  
  
 <see cref="T:System.Printing.PrintQueue" /> な権限を持つオブジェクトが作成されませんでした。</exception>
        <altmember cref="M:System.Printing.PrintQueue.Refresh" />
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">デバイスが印刷できるページの領域の大きさを格納しているオブジェクトへの参照。 そのデータ型にパブリック コンス トラクターがあるないので、このパラメーターは初期化されていない渡されます。</param>
        <summary>作成、 <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> オブジェクト、Windows の一般的な印刷ダイアログ ボックスを開き、返します、 <see langword="ref" /> \(<see langword="ByRef" /> Visual Basic で\) イメージ可能領域およびメディアのディメンションに関する情報を表すパラメーターです。</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> XPS データをストリームに書き込みます。 これは、 <see langword="null" />です。 \(パラメーター <paramref name="documentImageableArea" /> は、 <see langword="ref" /> \[<see langword="ByRef" /> Visual Basic で\] 項目で秒を表すために、メソッドによって初期化されるパラメーターが返されます\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 多くのプリンターでは、グリップ用紙に各ページの端の周りの余白のインチの四半期にし、プリンターに進める必要があります。 それ以外の場合トナーは用紙フロー メカニズムをいきませんとします。 出力する領域は、「プリント可能領域」です。  
  
 種類 <xref:System.Printing.PrintDocumentImageableArea> パブリック コンス トラクターを持たない。 そのため、変数 `documentImageableArea` 宣言してに割り当てられている必要があります `null` のみに渡されるメソッド。 このメソッドは、表示、 <xref:System.Windows.Controls.PrintDialog> ユーザーからの入力を必要とします。 ユーザーがプリンター、用紙のサイズ、および印刷の向きを選択し、ダイアログ ボックスを閉じた後 `documentImageableArea` 、実際のオブジェクトとそのプロパティへのポインターを初期化します。  
  
 戻り値は、ユーザーをキャンセルしたり、ダイアログ ボックスを閉じ、 `null`です。 戻り値をチェックする必要があります結果として、 `null` 、アプリケーションにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (System.Printing.PrintQueue printQueue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintQueue printQueue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintQueue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printQueue" Type="System.Printing.PrintQueue" />
      </Parameters>
      <Docs>
        <param name="printQueue">XPS ドキュメントを印刷する印刷キューです。</param>
        <summary>作成、 <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> オブジェクトし、指定した印刷キューに関連付けます。</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> XPS ストリームに書き込まれる。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、このメソッドを使用して作成する方法、 <xref:System.Windows.Xps.XpsDocumentWriter>です。  
  
 [!code-csharp[XpsPrint\#PrintQueueSnip](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsPrint/CSharp/XpsPrintHelper.cs#printqueuesnip)]
 [!code-vb[XpsPrint\#PrintQueueSnip](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsPrint/visualbasic/xpsprinthelper.vb#printqueuesnip)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref double width, ref double height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(float64 width, float64 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Double@,System.Double@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="height" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="width">XPS ドキュメントの幅。</param>
        <param name="height">XPS ドキュメントの高さ。</param>
        <summary>作成、 <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> とは、指定されたディメンション オブジェクトです。</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> XPS ストリームに書き込まれる。 これは、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、表示、 <xref:System.Windows.Controls.PrintDialog> ユーザーからの入力を必要とします。 戻り値は、ユーザーをキャンセルしたり、ダイアログ ボックスを閉じ、 `null`です。 戻り値をチェックする必要があります結果として、 `null` 、アプリケーションにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">印刷ジョブの名前。 Windows 印刷ユーザー インターフェイスに表示されます。</param>
        <param name="documentImageableArea">デバイスが印刷できるページの領域の大きさを格納しているオブジェクトへの参照。 そのデータ型にパブリック コンス トラクターがあるないので、このパラメーターは初期化されていない渡されます。</param>
        <summary>作成、 <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> オブジェクト、Windows の一般的な印刷ダイアログ ボックスを開きます \(および、ジョブの説明を提供\) を返します、 <see langword="ref" /> \(<see langword="ByRef" /> Visual Basic で\) イメージ可能領域およびメディアのディメンションに関する情報を表すパラメーターです。</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> XPS データをストリームに書き込みます。 これは、 <see langword="null" />です。 \(パラメーター <paramref name="documentImageableArea" /> は、 <see langword="ref" /> \[<see langword="ByRef" /> Visual Basic で\] 項目で秒を表すために、メソッドによって初期化されるパラメーターが返されます\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 多くのプリンターでは、グリップ用紙に各ページの端の周りの余白のインチの四半期にし、プリンターに進める必要があります。 それ以外の場合トナーは用紙フロー メカニズムをいきませんとします。 出力する領域は、「プリント可能領域」です。  
  
 種類 <xref:System.Printing.PrintDocumentImageableArea> パブリック コンス トラクターを持たない。 そのため、変数 `documentImageableArea` 宣言してに割り当てられている必要があります `null` のみに渡されるメソッド。 このメソッドは、表示、 <xref:System.Windows.Controls.PrintDialog> ユーザーからの入力を必要とします。 ユーザーがプリンター、用紙のサイズ、および印刷の向きを選択し、ダイアログ ボックスを閉じた後 `documentImageableArea` 、実際のオブジェクトとそのプロパティへのポインターを初期化します。  
  
 戻り値は、ユーザーをキャンセルしたり、ダイアログ ボックスを閉じ、 `null`です。 戻り値をチェックする必要があります結果として、 `null` 、アプリケーションにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection pageRangeSelection, valuetype System.Windows.Controls.PageRange pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea&amp;" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection&amp;" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">デバイスが印刷できるページの領域の大きさを格納しているオブジェクトへの参照。 そのデータ型にパブリック コンス トラクターがあるないので、このパラメーターは初期化されていない渡されます。</param>
        <param name="pageRangeSelection">すべてのページか、ユーザーが指定されている範囲だけを印刷するかどうかを指定する値。</param>
        <param name="pageRange">印刷されるページの範囲。</param>
        <summary>作成、 <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> オブジェクト、Windows の一般的な印刷ダイアログ ボックスを開き、ページ範囲や印刷ジョブの説明を使用して、ダイアログ ボックスを提供およびを返します、 <see langword="ref" /> \(<see langword="ByRef" /> Visual Basic で\) イメージ可能領域およびメディアのディメンションに関する情報を表すパラメーターです。</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> XPS データをストリームに書き込みます。 これは、 <see langword="null" />です。 \(パラメーター <paramref name="documentImageableArea" />, 、<paramref name="pageRangeSelection" />, と <paramref name="pageRange" /> がすべて <see langword="ref" /> \[<see langword="ByRef" /> Visual Basic で\] パラメーターをユーザーによって初期化されため、返されるアイテムの各表して、その後、ダイアログを閉じたときに返されます\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 多くのプリンターでは、グリップ用紙に各ページの端の周りの余白のインチの四半期にし、プリンターに進める必要があります。 それ以外の場合トナーは用紙フロー メカニズムをいきませんとします。 出力する領域は、「プリント可能領域」です。  
  
 種類 <xref:System.Printing.PrintDocumentImageableArea> パブリック コンス トラクターを持たない。 そのため、変数 `documentImageableArea` 宣言してに割り当てられている必要があります `null` のみに渡されるメソッド。 このメソッドは、表示、 <xref:System.Windows.Controls.PrintDialog> ユーザーからの入力を必要とします。 ユーザーは、\(プリンター、用紙サイズ、印刷の向き、およびページ範囲の選択を含む\)\] ダイアログで、印刷ジョブを構成します。 ダイアログを閉じる `pageRangeSelection` と `pageRange` 値を持つと `documentImageableArea` プロパティが初期化される実際のオブジェクトをポイントします。  
  
 戻り値は、ユーザーをキャンセルしたり、ダイアログ ボックスを閉じ、 `null`です。 戻り値をチェックする必要があります結果として、 `null` 、アプリケーションにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection pageRangeSelection, valuetype System.Windows.Controls.PageRange pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea&amp;" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection&amp;" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">印刷ジョブの名前。 Windows 印刷ユーザー インターフェイスに表示されます。</param>
        <param name="documentImageableArea">デバイスが印刷できるページの領域の大きさを格納しているオブジェクトへの参照。 そのデータ型にパブリック コンス トラクターがあるないので、このパラメーターは初期化されていない渡されます。</param>
        <param name="pageRangeSelection">すべてのページか、ユーザーが指定されている範囲だけを印刷するかどうかを指定する値。</param>
        <param name="pageRange">印刷されるページの範囲。</param>
        <summary>作成、 <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> オブジェクトの Windows の一般的な印刷ダイアログ ボックスを開き、ダイアログ ボックスにページ範囲を返します、 <see langword="ref" /> \(<see langword="ByRef" /> Visual Basic で\) イメージ可能領域およびメディアのディメンションに関する情報を表すパラメーターです。</summary>
        <returns>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> XPS データをストリームに書き込みます。 これは、 <see langword="null" />です。 \(パラメーター <paramref name="documentImageableArea" />, 、<paramref name="pageRangeSelection" />, と <paramref name="pageRange" /> がすべて <see langword="ref" /> \[<see langword="ByRef" /> Visual Basic で\] パラメーターをユーザーによって初期化されため、返されるアイテムの各表して、その後、ダイアログを閉じたときに返されます\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 多くのプリンターでは、グリップ用紙に各ページの端の周りの余白のインチの四半期にし、プリンターに進める必要があります。 それ以外の場合トナーは用紙フロー メカニズムをいきませんとします。 出力する領域は、「プリント可能領域」です。  
  
 種類 <xref:System.Printing.PrintDocumentImageableArea> パブリック コンス トラクターを持たない。 そのため、変数 `documentImageableArea` 宣言してに割り当てられている必要があります `null` のみに渡されるメソッド。 このメソッドは、表示、 <xref:System.Windows.Controls.PrintDialog> ユーザーからの入力を必要とします。 ユーザーは、\(プリンター、用紙サイズ、印刷の向き、およびページ範囲の選択を含む\)\] ダイアログで、印刷ジョブを構成します。 ダイアログを閉じる `pageRangeSelection` と `pageRange` 値を持つと `documentImageableArea` プロパティが初期化される実際のオブジェクトをポイントします。  
  
 戻り値は、ユーザーをキャンセルしたり、ダイアログ ボックスを閉じ、 `null`です。 戻り値をチェックする必要があります結果として、 `null` 、アプリケーションにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentJobSettings">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobSettings CurrentJobSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintJobSettings CurrentJobSettings" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.CurrentJobSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の印刷ジョブの構成設定を格納しているオブジェクトを取得します。</summary>
        <value>A <see cref="T:System.Printing.PrintJobSettings" /> 現在印刷中のジョブの設定を保持する値。 これらの設定は、ジョブとジョブへの参照の説明を含める <see cref="T:System.Printing.PrintTicket" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Printing.PrintTicket" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket DefaultPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket DefaultPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>これに関連付けられている既定のプリンター オプション設定を取得または <see cref="T:System.Printing.PrintQueue" />です。</summary>
        <value>既定値 <see cref="T:System.Printing.PrintTicket" /> 、印刷キュー; のまたは <see langword="null" /> 場合は、印刷キューでエラーが発生しました。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定値 <xref:System.Printing.PrintTicket> などの印刷ジョブのオプションを指定 <xref:System.Printing.PrintTicket.CopyCount%2A>, 、<xref:System.Printing.PrintTicket.PageOrientation%2A>, 、<xref:System.Printing.PrintTicket.Duplexing%2A>, 、<xref:System.Printing.PrintTicket.Stapling%2A>, 、およびその他。  
  
 各 <xref:System.Printing.PrintQueue> 独自に維持 <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A>します。  
  
 通常の操作で、 <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> プロパティを返します。、 <xref:System.Printing.PrintTicket>です。  場合、 <xref:System.Printing.PrintQueue> 、無効な状態を検出した <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> 返します `null`します。  場合 <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> 返します `null`, 、アプリケーションは、この印刷キューにエラーが発生した情報のユーザー\] ダイアログ ボックスを表示する必要があり、出力を別の印刷キューで印刷ジョブを再起動する必要があります。  
  
 取得または設定する、 <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> プロパティは検証されません、 <xref:System.Printing.PrintTicket>です。<xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A> メソッドを使用して検証すること、 <xref:System.Printing.PrintTicket>です。  
  
   
  
## 例  
 次の例では、プリンターの機能をテストおよび印刷ジョブを構成するときにこのプロパティを使用して、それを活用する方法を示します。  
  
 [!code-cpp[XpsCreate\#PrinterCapabilities](~/samples/snippets/cpp/VS_Snippets_Wpf/XpsCreate/CPP/XpsCreate.cpp#printercapabilities)]
 [!code-csharp[XpsCreate\#PrinterCapabilities](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsCreate/CSharp/XpsCreate.cs#printercapabilities)]
 [!code-vb[XpsCreate\#PrinterCapabilities](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsCreate/visualbasic/xpscreate.vb#printercapabilities)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.UserPrintTicket" />
        <altmember cref="P:System.Printing.PrintQueue.DefaultPriority" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPriority">
      <MemberSignature Language="C#" Value="public virtual int DefaultPriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultPriority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはキューに追加された新しい各印刷ジョブに適用される既定の優先順位を設定します。</summary>
        <value>印刷ジョブがキューに追加の既定の優先度。 1 ~ 99 の範囲を指定できる値です。 既定値は 1 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 印刷キューに入った後、ユーザーが印刷ジョブの優先順位を変更することができます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷キューの説明を取得します。</summary>
        <value>印刷キューの説明です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 キューが作成されると、キューの名前、モデル、およびコンマで区切られた場所で構成される 3 つの部分文字列が、説明に既定値です。 コントラスト、 <xref:System.Printing.PrintQueue.Description%2A> プロパティを <xref:System.Printing.PrintQueue.Comment%2A> 一般的な印刷ダイアログおよびプリンターと Fax\] ボックスの一覧でユーザーに表示されるプロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キューの完全な名前を取得します。</summary>
        <value>印刷キューの完全な名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの値はローカル プリント サーバーの印刷キューの場合と同じでは <xref:System.Printing.PrintQueue.Name%2A>, 、それ以外の場合、完全な UNC \(汎用名前付け規則\) 名が含まれます。  
  
 <xref:System.Printing.PrintQueue> オブジェクトもが書き込み可能な <xref:System.Printing.PrintQueue.Name%2A> と <xref:System.Printing.PrintQueue.ShareName%2A> プロパティです。  
  
   
  
## 例  
 次の例では、2 つの印刷チケットをマージするときにこのプロパティを使用する方法を示します。  
  
 [!code-csharp[PrintTicketManagment\#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment\#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo GetJob (int jobId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo GetJob(int32 jobId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetJob(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="jobId">キュー内のジョブの数。</param>
        <summary>指定した ID 番号を含む印刷ジョブを取得します。</summary>
        <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> ジョブとそのステータスのプロパティを指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することも、 <xref:System.Printing.PrintSystemJobInfo.Get%2A?displayProperty=fullName> 同じ目的のためのメソッドです。  
  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このメソッドを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Get(System.Printing.PrintQueue,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得、 <see cref="T:System.Printing.PrintCapabilities" /> プリンターの機能を識別するオブジェクト。</summary>
        <returns>A <see cref="T:System.Printing.PrintCapabilities" /> プリンターでことを通知し、両側の対処や自動ホチキス止めなど、実行できませんを指定するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、2 つの印刷チケットをマージするときにこのメソッドを使用する方法を示します。  
  
 [!code-csharp[PrintTicketManagment\#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment\#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <see cref="T:System.Printing.PrintCapabilities" /> オブジェクトを取得できませんでした。</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">for permission to get print capabilities. Associated enumeration: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities(System.Printing.PrintTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">印刷機能が報告される基礎となる印刷チケット。</param>
        <summary>取得、 <see cref="T:System.Printing.PrintCapabilities" /> プリンターの機能を識別するオブジェクト。</summary>
        <returns>A <see cref="T:System.Printing.PrintCapabilities" /> プリンターでことを通知し、両側の対処や自動ホチキス止めなど、実行できませんを指定するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Printing.PrintTicket> パラメーターは、構築に使用する基準として使用、 <xref:System.Printing.PrintCapabilities> オブジェクトです。 たとえば、プリンターには、メディア タイプ A のみがサポートされているし、1 用紙トレイから B とは、メディアの種類 C 2 用紙トレイからのみサポートされてください。 場合、 `printTicket` パラメーターが 1、用紙トレイを指定し、 <xref:System.Printing.PrintCapabilities> 返されるオブジェクトには、3 つのメディアのすべての型が含まれますが、「制約」として型 C をレポートには 場合、 `printTicket` パラメーターが 2、用紙トレイを指定し、 <xref:System.Printing.PrintCapabilities> 返されるオブジェクトには、3 つのメディアのすべての型が含まれますが、型 A と B のように「制約」が報告には 参照してください、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397) 制約の詳細についてです。  
  
 場合 `printTicket` は `null`, 、 <xref:System.Printing.PrintQueue.UserPrintTicket%2A> を使用します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">
          <see cref="T:System.Printing.PrintCapabilities" /> オブジェクトを取得できませんでした。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="printTicket" /> 整形式ではありません。</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">for permission to get print capabilities. Associated enumeration: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPrintCapabilitiesAsXml">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得、 <see cref="T:System.IO.MemoryStream" /> に準拠しているストリームの XML としてプリンターの機能を指定するオブジェクト、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397)します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する XML スキーマは"PrintCapabilities、"の一部と呼ばれる、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397) システムです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得、 <see cref="T:System.IO.MemoryStream" /> に準拠しているストリームの XML としてプリンターの機能を指定するオブジェクト、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397)します。</summary>
        <returns>A <see cref="T:System.IO.MemoryStream" /> "PrintCapabilities、"の一部の XML スキーマを使用して、プリンターの機能を指定する、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397) システムです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">印刷機能を取得できませんでした。</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">for permission to get print capabilities. Associated enumeration: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml(System.Printing.PrintTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">印刷機能が報告される基礎となる印刷チケット。</param>
        <summary>取得、 <see cref="T:System.IO.MemoryStream" /> に準拠している書式を設定する、XML でプリンターの機能を指定するオブジェクト、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397)します。</summary>
        <returns>A <see cref="T:System.IO.MemoryStream" /> "PrintCapabilities、"の一部の XML スキーマを使用して、プリンターの機能を指定する、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397) システムです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Printing.PrintTicket> パラメーターは、印刷機能の XML を構築する基礎として使用します。 たとえば、プリンターには、メディア タイプ A のみがサポートされているし、1 用紙トレイから B とは、メディアの種類 C 2 用紙トレイからのみサポートされてください。 場合、 `printTicket` パラメーターが 1、用紙トレイを指定し、すべての 3 つのメディアの種類、印刷機能が返される XML が含まれますが、型 C「制約」として報告されていました 場合、 `printTicket` パラメーターが 2、用紙トレイを指定し、印刷機能は、返された XML には、3 つのメディアのすべての型が含まれますが、型 A と B「制約」と報告されていました 参照してください、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397) 制約の詳細についてです。  
  
 場合 `printTicket` は `null`, 、 <xref:System.Printing.PrintQueue.UserPrintTicket%2A> を使用します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">印刷機能を取得できませんでした。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="printTicket" /> 整形式ではありません。</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">for permission to get print capabilities. Associated enumeration: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintJobInfoCollection">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintJobInfoCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>含むコレクションを作成、 <see cref="T:System.Printing.PrintSystemJobInfo" /> キュー内の各ジョブのオブジェクト。</summary>
        <returns>返します。、 <see cref="T:System.Printing.PrintJobInfoCollection" /> の <see cref="T:System.Printing.PrintSystemJobInfo" /> オブジェクトです。 キュー内のジョブごとに 1 つです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、キュー内のすべてのジョブに対して同じ操作を実行するときに、このメソッドを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPaperProblem">
      <MemberSignature Language="C#" Value="public bool HasPaperProblem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPaperProblem" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasPaperProblem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターでは、指定されていない用紙に問題があるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 指定されていない用紙の問題がある場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
 <xref:System.Printing.PrintQueue> オブジェクトもあります <xref:System.Printing.PrintQueue.IsPaperJammed%2A> と <xref:System.Printing.PrintQueue.IsOutOfPaper%2A> プロパティです。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasToner">
      <MemberSignature Language="C#" Value="public bool HasToner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasToner" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasToner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターのトナーがかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 現在のプリンターのトナーを場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターの製造元によっては、この信号を使用して、そのトナーが不足していないかを示す場合があります。 トナー カートリッジが存在し、正しく挿入されてを使用しているときに使用することが他のユーザー <xref:System.Printing.PrintQueue.IsTonerLow%2A> 、トナーが低いことを示します。  
  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostingPrintServer">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintServer HostingPrintServer { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintServer HostingPrintServer" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HostingPrintServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintServer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または \(保護\)、印刷キューを制御するプリント サーバーを設定します。</summary>
        <value>名前とその他のプロパティ、 <see cref="T:System.Printing.PrintServer" /> 印刷キューをホストしています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティから派生したクラスによってのみ設定できる <xref:System.Printing.PrintQueue> ため、このプロパティの setter は `protected`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InPartialTrust">
      <MemberSignature Language="C#" Value="public bool InPartialTrust { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InPartialTrust" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.InPartialTrust" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはキューが部分的に信頼されたモード、高いレベルの信頼で動作しているかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> キューが部分的に信頼されたモードで動作している場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Printing.PrintQueue.InPartialTrust%2A> プロパティは、 `true`, 、プログラムを作成できません、 <xref:System.Printing.PrintQueue> 、ユーザーがあるプリンターの完全な印刷アクセス許可がない場合は、このプリンターを表すオブジェクト。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalDispose">
      <MemberSignature Language="C#" Value="protected override sealed void InternalDispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InternalDispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.InternalDispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Printing.PrintQueue" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBidiEnabled">
      <MemberSignature Language="C#" Value="public bool IsBidiEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBidiEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBidiEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターとの双方向通信が有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターとの双方向通信は有効な場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷デバイスがビジー状態かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 場合は、デバイスがビジー状態です。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ビジー必ずしもは印刷ジョブを処理します。 デバイスが組み合わせプリンターと fax\/機の場合は、し、これが fax の送信したり、コピーします。 比較、 <xref:System.Printing.PrintQueue.IsProcessing%2A> プロパティです。  
  
 デバイスがこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDevQueryEnabled">
      <MemberSignature Language="C#" Value="public bool IsDevQueryEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDevQueryEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDevQueryEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キューでは、ドキュメントとプリンターの構成が一致しない場合に、ドキュメントが保持するかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> キューが一致しない構成を保持している場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirect">
      <MemberSignature Language="C#" Value="public bool IsDirect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirect" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDirect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キューがプリンターまたはスプールのドキュメントに直接印刷するかどうかを示す値を最初に取得し、それを出力します。</summary>
        <value>
          <see langword="true" /> キューがプリンターに直接印刷する場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、Windows の一般的な印刷ダイアログを通じてのみ設定できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDoorOpened">
      <MemberSignature Language="C#" Value="public bool IsDoorOpened { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDoorOpened" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDoorOpened" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドアは、プリンターで開いているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> ドアが開いている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHidden">
      <MemberSignature Language="C#" Value="public bool IsHidden { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHidden" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsHidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションのユーザー インターフェイスで、印刷キューが非表示かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 印刷キューが Windows のユーザー インターフェイスに表示されていない場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 自動的に隠さない印刷キューをこのプロパティを設定すると `true`です。 まだプログラムは、プログラムのインターフェイスでのキューの一覧で表示されないかどうかを確認する手順を実行する必要があります。  
  
 プリンターと Fax\] ボックスの一覧などの Windows ユーザー インターフェイスでは、印刷キューを非表示にできません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInError">
      <MemberSignature Language="C#" Value="public bool IsInError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInError" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターまたはデバイスが、エラー状態があるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> デバイスがエラー状態の場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitializing">
      <MemberSignature Language="C#" Value="public bool IsInitializing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitializing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInitializing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターが初期化中かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 場合は、プリンターを初期化します。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIOActive">
      <MemberSignature Language="C#" Value="public bool IsIOActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIOActive" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsIOActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターが受け取るか、データまたは信号を送信するかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 場合は、プリンターが受信または送信します。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManualFeedRequired">
      <MemberSignature Language="C#" Value="public bool IsManualFeedRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManualFeedRequired" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsManualFeedRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターを現在の印刷ジョブの用紙を手動で入力する必要があるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 手動で行うプリンター ニーズの給紙場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotAvailable">
      <MemberSignature Language="C#" Value="public bool IsNotAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsNotAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターが使用できるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターがある場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOffline">
      <MemberSignature Language="C#" Value="public bool IsOffline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOffline" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOffline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターがオフラインかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターがオフラインの場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfMemory">
      <MemberSignature Language="C#" Value="public bool IsOutOfMemory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfMemory" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfMemory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターがメモリ不足であるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターがメモリ不足の場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfPaper">
      <MemberSignature Language="C#" Value="public bool IsOutOfPaper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfPaper" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfPaper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターを現在のジョブに必要なサイズの用紙を再読み込みする必要があるかどうか示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターが再読み込みする必要がある場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutputBinFull">
      <MemberSignature Language="C#" Value="public bool IsOutputBinFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutputBinFull" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutputBinFull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターの出力の領域がいっぱいになっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターの出力の領域がいっぱいになっている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaperJammed">
      <MemberSignature Language="C#" Value="public bool IsPaperJammed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaperJammed" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaperJammed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在枚の用紙がプリンターにスタックしているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 用紙が保持されている; 場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷キューが一時停止されているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 印刷キューが一時停止された場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPendingDeletion">
      <MemberSignature Language="C#" Value="public bool IsPendingDeletion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPendingDeletion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPendingDeletion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターが印刷ジョブを削除する処理を行っているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターがジョブを削除する場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPowerSaveOn">
      <MemberSignature Language="C#" Value="public bool IsPowerSaveOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerSaveOn" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPowerSaveOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターが省電力モードであるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターが電源の場合は、モードを保存します。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrinting">
      <MemberSignature Language="C#" Value="public bool IsPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPrinting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ジョブを印刷するかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> ジョブを印刷します。 場合、それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProcessing">
      <MemberSignature Language="C#" Value="public bool IsProcessing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターが印刷ジョブを処理しているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターが印刷ジョブを処理している場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターの製造元によって、少ない固有の仕様ではなくこの信号をサポートして <xref:System.Printing.PrintQueue.IsBusy%2A>します。  
  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublished">
      <MemberSignature Language="C#" Value="public bool IsPublished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublished" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPublished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターが他のネットワーク ユーザーに表示されているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターが他のネットワーク ユーザーに表示される場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQueued">
      <MemberSignature Language="C#" Value="public bool IsQueued { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsQueued" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsQueued" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターが 1 つ以上の印刷ジョブのキューに一度にサポートするかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 複数の印刷ジョブのキュー、プリンターをサポートできる場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRawOnlyEnabled">
      <MemberSignature Language="C#" Value="public bool IsRawOnlyEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRawOnlyEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsRawOnlyEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷キューが Windows スプーラーに印刷アプリケーションからデータの流れを高速化できるようにする EMF \(拡張メタファイル\) を使用できるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターを使用できない場合 EMF 入力してください。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServerUnknown">
      <MemberSignature Language="C#" Value="public bool IsServerUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServerUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsServerUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターがエラー状態にするかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> かどうか、プリンターにはエラー状態です。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターがネットワーク上の他のコンピューターで使用可能かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターが共有されている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、Windows の一般的な印刷ダイアログでのみ設定できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTonerLow">
      <MemberSignature Language="C#" Value="public bool IsTonerLow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTonerLow" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsTonerLow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターがトナー不足しているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターがトナー不足している場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
 <xref:System.Printing.PrintQueue> オブジェクトもあります、 <xref:System.Printing.PrintQueue.HasToner%2A> プロパティです。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWaiting">
      <MemberSignature Language="C#" Value="public bool IsWaiting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWaiting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWaiting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>追加するジョブのキューが待機しているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> ジョブのキューが待機している場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWarmingUp">
      <MemberSignature Language="C#" Value="public bool IsWarmingUp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWarmingUp" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWarmingUp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターを準備中かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 場合は、プリンターの準備中です。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXpsDevice">
      <MemberSignature Language="C#" Value="public bool IsXpsDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsXpsDevice" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsXpsDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターのドライバーが組み込まれているかどうかを示す値を取得、 [印刷の概要](http://msdn.microsoft.com/ja-jp/0de8ac41-9aa6-413d-a121-7aa6f41539b1) を使うよう XML Paper Specification (XPS) としてそのページ記述言語。</summary>
        <value>
          <see langword="true" /> プリンターで使用する場合、 [印刷の概要](http://msdn.microsoft.com/ja-jp/0de8ac41-9aa6-413d-a121-7aa6f41539b1)。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepPrintedJobs">
      <MemberSignature Language="C#" Value="public bool KeepPrintedJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepPrintedJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.KeepPrintedJobs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キューが印刷後に削除するのではなくプリンター言語ファイルを保存するかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> キューが、プリンター言語ファイルを保存する場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public virtual string Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Location" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはプリンターの物理的な場所を設定します。</summary>
        <value>プリンターの物理的な場所。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、このプロパティを使用して、利用可能な印刷キューのサブセットを一覧表示する方法を示します。  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues\#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues\#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues\#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public static int MaxPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.MaxPrintSchemaVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最新の可能なバージョン番号を取得、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397) キューが使用できます。</summary>
        <value>最新のバージョン番号、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397) キューが使用できます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バージョン、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397) 1 は、Windows Vista と共にリリースされました。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">最初の印刷チケット。</param>
        <param name="deltaPrintTicket">2 番目の印刷チケット。 これは、 <see langword="null" />です。</param>
        <summary>2 つにマージ <see cref="T:System.Printing.PrintTicket" />s、生成されることを保証し、 <see cref="T:System.Printing.PrintTicket" /> が有効であり、プリンターがサポートされていないすべての印刷機能を求めません。</summary>
        <returns>A <see cref="T:System.Printing.ValidationResult" /> 、結合を含む <see cref="T:System.Printing.PrintTicket" /> かどうか、その設定の有効性を保証するために変更する必要があるが表示されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メソッドには、実行可能な印刷チケット; が生成されます。つまり、印刷機能を要求しないチケット プリンターはサポートされません。 メソッドは、まずに対して 2 つの入力の印刷チケットを検証、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397)します。 いずれかの情報が有効でない場合は、例外がスローされます。  
  
 2 つのチケットがマージされます。 特定のプロパティに別の値がある場合し、マージされたチケットはデルタ チケットの値を最初に使用します。  
  
 マージされたチケットは、プリンターの実際の機能に対してはチェックされます。 チケットの設定は、プリンターの機能と互換性がない、プリンター ドライバーは、任意のロジックを使用して、これらの設定を変更し、存在する場合は、行います。 通常、設定のユーザーまたはプリンターの既定の値が置き換えられます。 代替値のドライバーのソースは、同じチケットとして `basePrintTicket`, 、マージされたチケットは、入力されたチケットの両方とは異なるいくつかの設定が可能性があります。 プリンタ ドライバがすべての設定を変更するのには、このファクトのレポートには、 <xref:System.Printing.ValidationResult.ConflictStatus%2A> のプロパティ、 <xref:System.Printing.ValidationResult>です。  
  
 印刷キューの既定の設定に基づいて、マージおよび検証を設定する必要があります `basePrintTicket` に、 <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> または <xref:System.Printing.PrintQueue.UserPrintTicket%2A>です。  
  
 `deltaPrintTicket` パラメーターを指定できます `null`, その場合は、 `basePrintTicket` を検証、実行可能性をチェックおよびと共に返される、場合によって変更します。  
  
 このオーバー ロードと <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>, 両方で、 `deltaPrintTicket` と <xref:System.Printing.PrintTicket> で、 <xref:System.Printing.ValidationResult> ジョブ全体のスコープがあることが返されます。 指定するには、別のスコープは、このメソッドの他のオーバー ロードを使用します。  
  
   
  
## 例  
 次の例では、このメソッドを 2 つの印刷チケットをマージして応答するために使用する方法、 <xref:System.Printing.ValidationResult> が返されます。  
  
 [!code-csharp[PrintTicketManagment\#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment\#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">少なくとも 1 つの入力の印刷チケットが無効です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basePrintTicket" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Printing.PrintQueueException">検証、マージ、および有効性の確認操作に失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket, System.Printing.PrintTicketScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket, valuetype System.Printing.PrintTicketScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket,System.Printing.PrintTicketScope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="scope" Type="System.Printing.PrintTicketScope" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">最初の印刷チケット。</param>
        <param name="deltaPrintTicket">2 番目の印刷チケット。 これは、 <see langword="null" />です。</param>
        <param name="scope">示す値かどうかのスコープ <c>deltaPrintTicket</c>, 、やで返される印刷チケットの範囲、 <see cref="T:System.Printing.ValidationResult" />, 、ページ、ドキュメント、またはすべてのジョブは、です。</param>
        <summary>2 つにマージ <see cref="T:System.Printing.PrintTicket" />s、生成されることを保証し、 <see cref="T:System.Printing.PrintTicket" /> が有効では、プリンターをサポートしていないと、指定されたスコープに制限は、すべての印刷機能を要求しません。</summary>
        <returns>A <see cref="T:System.Printing.ValidationResult" /> 、結合を含む <see cref="T:System.Printing.PrintTicket" /> かどうか、その設定の有効性を保証するために変更する必要があるが表示されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メソッドには、実行可能な印刷チケット; が生成されます。つまり、印刷機能を要求しないチケット プリンターはサポートされません。 メソッドは、まずに対して 2 つの入力の印刷チケットを検証、 [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397)します。 いずれかの情報が有効でない場合は、例外がスローされます。  
  
 2 つのチケットがマージされます。 特定のプロパティに別の値がある場合し、マージされたチケットはデルタ チケットの値を最初に使用します。  
  
 マージされたチケットは、プリンターの実際の機能に対してはチェックされます。 チケットの設定は、プリンターの機能と互換性がない、プリンター ドライバーは、任意のロジックを使用して、これらの設定を変更し、存在する場合は、行います。 通常、設定のユーザーまたはプリンターの既定の値が置き換えられます。 代替値のドライバーのソースは、同じチケットとして `basePrintTicket`, 、マージされたチケットは、入力されたチケットの両方とは異なるいくつかの設定が可能性があります。 設定を変更するプリンター ドライバーが持っているかどうかは、このファクトのレポートには、 <xref:System.Printing.ValidationResult.ConflictStatus%2A> のプロパティ、 <xref:System.Printing.ValidationResult>です。  
  
 印刷キューの既定の設定に基づいて、マージおよび検証を設定する必要があります `basePrintTicket` に、 <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> または <xref:System.Printing.PrintQueue.UserPrintTicket%2A>です。  
  
 `deltaPrintTicket` パラメーターを指定できます `null`, その場合は、 `basePrintTicket` を検証、実行可能性をチェックおよびと共に返される、場合によって変更します。  
  
 場合、 `scope` 、ジョブで印刷のチケットが返されますが、 <xref:System.Printing.ValidationResult> 含めることができます [Print Schema](http://go.microsoft.com/fwlink/?LinkId=186397) ジョブ、ドキュメント、およびページのプレフィックスを持つパラメーター。 場合、 `scope` 、ドキュメント、ジョブあたりの設定では、 `deltaPrintTicket` は無視され、返されたチケットは、ドキュメントを持つパラメーターを含めることができ、ページのプレフィックスします。 場合、 `scope` \] ページでは、し、ジョブあたりの設定、およびドキュメントごとの設定は、 `deltaPrintTicket` は無視され、返されたチケットは、ページのプレフィックスだけを持つパラメーターを含めることができます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">少なくとも 1 つの入力の印刷チケットが無効です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basePrintTicket" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="scope" /> パラメーターに有効なありません <see cref="T:System.Printing.PrintTicketScope" /> 値。</exception>
        <exception cref="T:System.Printing.PrintQueueException">検証、マージ、および有効性の確認操作に失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override sealed string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または印刷キューの名前を設定します。</summary>
        <value>印刷キューの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Printing.PrintQueue> オブジェクトにも読み取り専用 <xref:System.Printing.PrintQueue.FullName%2A> プロパティと、書き込み可能な <xref:System.Printing.PrintQueue.ShareName%2A> プロパティです。  
  
 ローカル プリント サーバー上のキューの <xref:System.Printing.PrintQueue.Name%2A> と <xref:System.Printing.PrintQueue.FullName%2A> は同じです。  
  
   
  
## 例  
 次の例では、このプロパティを使用して、利用可能な印刷キューのサブセットを一覧表示する方法を示します。  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues\#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues\#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues\#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedUserIntervention">
      <MemberSignature Language="C#" Value="public bool NeedUserIntervention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NeedUserIntervention" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NeedUserIntervention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターは人間の介入を必要とするかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターが人間の介入を必要とする場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfJobs">
      <MemberSignature Language="C#" Value="public virtual int NumberOfJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NumberOfJobs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷キューに並んでいるジョブの合計数を取得します。</summary>
        <value>キュー内のジョブの数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PagePunt">
      <MemberSignature Language="C#" Value="public bool PagePunt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PagePunt" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PagePunt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターが現在のページを印刷できないかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターが、現在のページを印刷できない場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プリンターはこの意味を持つ信号をサポートしていないかどうかは、このプロパティは常に `false`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Pause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>印刷キューを一時停止します。 まで一時停止したまま <see cref="M:System.Printing.PrintQueue.Resume" /> を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">プリンターを一時停止することはできません。</exception>
        <altmember cref="M:System.Printing.PrintQueue.Resume" />
      </Docs>
    </Member>
    <Member MemberName="PrintingIsCancelled">
      <MemberSignature Language="C#" Value="public bool PrintingIsCancelled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrintingIsCancelled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PrintingIsCancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または現在の印刷ジョブが取り消されているかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 印刷ジョブが取り消されたされている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public virtual int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または同じのプリント サーバーによってホストされ、同じ物理プリンターを使用する他の印刷キューに対して印刷キューの優先順位を設定します。</summary>
        <value>印刷キューの優先度です。 可能な値は 1 ~ 99 です。 既定値は 1 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティとの比較、 <xref:System.Printing.PrintQueue.DefaultPriority%2A> キューで印刷ジョブの相対的な優先順位に関するプロパティ。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public virtual void Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Purge" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>印刷キュー内のすべてのジョブを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">一部の印刷ジョブをキューから削除されませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="QueueAttributes">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueAttributes QueueAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueAttributes QueueAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷キューのプロパティを取得します。</summary>
        <value>
          <see cref="T:System.Printing.PrintQueueAttributes" /> 列挙値のビットごとの組み合わせ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDriver">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintDriver QueueDriver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintDriver QueueDriver" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueDriver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintDriver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはキューのプリンタ ドライバを設定します。</summary>
        <value>
          <see cref="T:System.Printing.PrintDriver" /> キューが使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePort">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintPort QueuePort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintPort QueuePort" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintPort</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはキューを使用するポートを設定します。</summary>
        <value>
          <see cref="T:System.Printing.PrintPort" /> 、印刷キューに割り当てられています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePrintProcessor">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintProcessor QueuePrintProcessor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintProcessor QueuePrintProcessor" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePrintProcessor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintProcessor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、プリント プロセッサのキューを使用します。</summary>
        <value>
          <see cref="T:System.Printing.PrintProcessor" /> WinPrint や ModiPrint など、キューを使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueStatus">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueStatus QueueStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueStatus QueueStatus" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターの状態を表す値を取得します。 「ウォーム アップ」「を初期化して、」、「印刷」などが含まれます。</summary>
        <value>現在 <see cref="T:System.Printing.PrintQueueStatus" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SpotTroubleUsingQueueAttributes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueattributes)]
 [!code-csharp[PrinterStatusSurvey\#SpotTroubleUsingQueueAttributes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueattributes)]
 [!code-vb[PrinterStatusSurvey\#SpotTroubleUsingQueueAttributes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueattributes)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Refresh" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>プロパティを更新、 <see cref="T:System.Printing.PrintQueue" /> プリンターとコンピューターで実行されている印刷キュー ユーティリティの値を持つオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プログラムに加える変更、 <xref:System.Printing.PrintQueue> オブジェクトのプロパティが失われたときに <xref:System.Printing.PrintQueue.Refresh%2A> プリンターと印刷キューに書き込まれていない限り、実行 <xref:System.Printing.PrintQueue.Commit%2A>します。  
  
   
  
## 例  
 次の例では、可能性のあるエラー状態をすべてのプリンターの調査の一部としてこのメソッドを使用する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#SurveyQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#surveyqueues)]
 [!code-csharp[PrinterStatusSurvey\#SurveyQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#surveyqueues)]
 [!code-vb[PrinterStatusSurvey\#SurveyQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#surveyqueues)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">一部のプロパティを更新できませんでした。</exception>
        <altmember cref="M:System.Printing.PrintQueue.Commit" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public virtual void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Resume" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一時停止された印刷キューを再起動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、このメソッドを使用して、一時停止中の印刷キューを再開する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob\#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob\#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">プリンタに戻すことはできません。</exception>
        <altmember cref="M:System.Printing.PrintQueue.Pause" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCompletedJobsFirst">
      <MemberSignature Language="C#" Value="public bool ScheduleCompletedJobsFirst { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScheduleCompletedJobsFirst" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ScheduleCompletedJobsFirst" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最初に関係なく、キューに入った場合でもジョブより先にスプールされているプロセスが完了したジョブを印刷するかどうかを示す値を取得または優先順位が高くします。</summary>
        <value>
          <see langword="true" /> 関係なく、ジョブの前にスプールされているプロセスが完了したジョブを印刷する場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorFile">
      <MemberSignature Language="C#" Value="public virtual string SeparatorFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SeparatorFile" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.SeparatorFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または各印刷ジョブの先頭に挿入されているファイルのパスとファイル名を設定します。</summary>
        <value>区切りファイルのパスとファイル名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、1 ページのファイルを別の印刷ジョブの出力を区別しやすくために使用では通常です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShareName">
      <MemberSignature Language="C#" Value="public virtual string ShareName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShareName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ShareName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または共有されている場合に、ネットワーク上のユーザーに表示されるプリンターの名前を設定します。</summary>
        <value>共有プリンターのパブリック名です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Printing.PrintQueue> オブジェクトにも読み取り専用 <xref:System.Printing.PrintQueue.FullName%2A> プロパティと、書き込み可能な <xref:System.Printing.PrintQueue.Name%2A> プロパティです。 ローカル プリント サーバーのキューの場合は、これらのプロパティは、同じ値を設定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int StartTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.StartTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または、深夜世界協定時刻 \(UTC\) \(もと呼ばれるグリニッジ標準時 \(GMT\)\)、ジョブを印刷する時間を分単位で表したの最も早い時刻を設定します。</summary>
        <value>プリンターは最初に利用可能になる時刻は午前 0 時 \(UTC\) 以降後の秒数として表されます。 最大値は、1439年です。 使用して、プリンターを初めてインストールすると、 Microsoft Windows プリンターの追加ウィザード、プリンターは既定に使用するすべての時間と、このプロパティは、すべてのタイム ゾーンで 0 を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 UTC タイム ゾーンにしていない場合、追加するか、タイム ゾーンの正しい時刻を取得または設定を 60 の倍数を減算する必要があります。 たとえば、北アメリカ太平洋標準時タイム ゾーンと夏時間の削減に使用するがでない場合効果、現地時間は 8 時間 \(utc\) よりも前です。 設定する <xref:System.Printing.PrintQueue.StartTimeOfDay%2A> タイム ゾーンで 12 am に設定した午前 8 時 \(UTC\) が 480 \(\= 8 \* 60\)です。 忘れないでください時間は 24 時間後に 0 にロール オーバーする \(つまり; 1439 分後\)。 ローカルのタイム ゾーンの午後 6 時に設定するに設定した午前 2 時 \(UTC\) が 120 \(\= 2 \* 60\)です。 参照してください <xref:System.TimeZone>, 、<xref:System.TimeSpan>, 、および <xref:System.DateTime> 便利のタイム ゾーンがメソッドを操作するためのクラスです。  
  
 プリンターが常に場合、このプロパティはすべてのタイム ゾーンに 0 を返しますし。  
  
   
  
## 例  
 次の例では、このプロパティを使用して、現時点では、プリンターが使用できるかどうかを判断する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey\#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey\#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UntilTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int UntilTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UntilTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または深夜世界協定時刻 \(UTC\) \(もと呼ばれるグリニッジ標準時 \(GMT\)\)、ジョブを印刷する時間を分単位で表した、最新の時刻を設定します。</summary>
        <value>プリンターは利用できなくなった時刻は午前 0 時 \(UTC\) 以降後の秒数として表されます。 最大値は、1439年です。 使用して、プリンターを初めてインストールすると、 Microsoft Windows プリンターの追加ウィザード、プリンターは既定に使用するすべての時間と、このプロパティは、すべてのタイム ゾーンで 0 を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 UTC タイム ゾーンにしていない場合、追加するか、タイム ゾーンの正しい時刻を取得または設定を 60 の倍数を減算する必要があります。 たとえば、北アメリカ太平洋標準時タイム ゾーンと夏時間の削減に使用するがでない場合効果、現地時間は 8 時間 \(utc\) よりも前です。 設定する <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A> タイム ゾーンで 12 am に設定した午前 8 時 \(UTC\) が 480 \(\= 8 \* 60\)です。 忘れないでください \(1439 分\) の 24 時間後に 0 にその時点にロール オーバーします。 ローカルのタイム ゾーンの午後 6 時に設定するに設定した午前 2 時 \(UTC\) が 120 \(\= 2 \* 60\)です。 参照してください <xref:System.TimeZone>, 、<xref:System.TimeSpan>, 、および <xref:System.DateTime> 便利のタイム ゾーンがメソッドを操作するためのクラスです。  
  
 プリンターが常に場合、このプロパティはすべてのタイム ゾーンに 0 を返しますし。  
  
   
  
## 例  
 次の例では、このプロパティを使用して、現時点では、プリンターが使用できるかどうかを判断する方法を示します。  
  
 [!code-cpp[PrinterStatusSurvey\#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey\#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey\#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UserPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket UserPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket UserPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UserPrintTicket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のユーザーの既定の設定を取得または <see cref="T:System.Printing.PrintTicket" /> 印刷ジョブに関する詳細情報を格納するオブジェクト。</summary>
        <value>
          <see cref="T:System.Printing.PrintTicket" /> の現在のユーザーまたは <see langword="null" /> ユーザー <see cref="T:System.Printing.PrintTicket" /> が指定されていません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各ユーザーが自分の既定値を持つことができます <xref:System.Printing.PrintTicket>します。  
  
 このプロパティにより、 `null`です。  
  
   
  
## 例  
 次の例では、2 つの印刷チケットをマージするときにこのプロパティを使用する方法を示します。  
  
 [!code-csharp[PrintTicketManagment\#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment\#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Printing.PrintQueue" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CreateXpsDocumentWriter">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> オブジェクトを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetPrintCapabilities">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得、 <see cref="T:System.Printing.PrintCapabilities" /> 、プリンターがカラーで印刷または両面印刷できるかどうかなどのデバイスの機能を識別するオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MergeAndValidatePrintTicket">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つにマージ <see cref="T:System.Printing.PrintTicket" />s、生成されることを保証し、 <see cref="T:System.Printing.PrintTicket" /> が有効であり、プリンターがサポートされていないすべての印刷機能を求めません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>