<Type Name="PrintSystemJobInfo" FullName="System.Printing.PrintSystemJobInfo">
  <TypeSignature Language="C#" Value="public class PrintSystemJobInfo : System.Printing.PrintSystemObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi PrintSystemJobInfo extends System.Printing.PrintSystemObject" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintSystemJobInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Printing.PrintSystemObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>詳しくは、印刷ジョブを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスには、パブリック コンス トラクターがありません。 参照を取得する、 <xref:System.Printing.PrintSystemJobInfo> オブジェクトを使用、静的な <xref:System.Printing.PrintSystemJobInfo.Get%2A?displayProperty=fullName> メソッドまたは、次のいずれか <xref:System.Printing.PrintQueue> インスタンス メソッド: <xref:System.Printing.PrintQueue.GetJob%2A>, 、<xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A>, 、または <xref:System.Printing.PrintQueue.AddJob%2A>です。  
  
 ジョブが完了したかどうかなど、多数の印刷ジョブのプロパティは、プリンターから渡す必要がある、 <xref:System.Printing.PrintSystemJobInfo> 、アプリケーションが、対応するプロパティを読み取る前にオブジェクト \(<xref:System.Printing.PrintSystemJobInfo.IsCompleted%2A>\)。<xref:System.Printing.PrintSystemJobInfo.Refresh%2A> メソッドは、この機能を提供します。  
  
 同様に、アプリケーションがの値を変更すると、 <xref:System.Printing.PrintSystemJobInfo.JobName%2A> プロパティには、変更に書き込まれると、印刷キュー ユーティリティ、コンピューターにします。<xref:System.Printing.PrintSystemJobInfo.Commit%2A> メソッドは、この機能を提供します。  
  
 クラスを派生させる場合 <xref:System.Printing.PrintSystemJobInfo> 追加の書き込み可能なプロパティを持ちのオーバーライドを実装する必要があります、 <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> と <xref:System.Printing.PrintSystemJobInfo.Commit%2A> メソッドです。  
  
> [!CAUTION]
>  クラス内で、 <xref:System.Printing> Windows サービスや ASP.NET アプリケーションまたはサービス内で使用する名前空間はサポートされていません。 これらのアプリケーションの種類のいずれかの内側からこれらのクラスを使用しようと、予期しない問題が発生する可能性があります、低下しているなどのサービスのパフォーマンスと実行時の例外です。  
  
 Windows フォーム アプリケーションから印刷するを参照して、 <xref:System.Drawing.Printing> 名前空間。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Cancel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>印刷ジョブをキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、このメソッドを使用して印刷ジョブをキャンセルする方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob\#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob\#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Commit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>プロパティに任意の変更を書き、 <see cref="T:System.Printing.PrintSystemJobInfo" /> オブジェクトによって表される実際の印刷ジョブのオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 のみ、 <xref:System.Printing.PrintSystemJobInfo.JobName%2A> プロパティが書き込み可能です。 クラスを派生させる場合 <xref:System.Printing.PrintSystemJobInfo> 追加の書き込み可能なプロパティを持つ、オーバーライドする必要があります、 <xref:System.Printing.PrintSystemJobInfo.Commit%2A> と <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> メソッドを独自の実装です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Refresh" />
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Printing.PrintSystemJobInfo Get (System.Printing.PrintQueue printQueue, int jobIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Printing.PrintSystemJobInfo Get(class System.Printing.PrintQueue printQueue, int32 jobIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Get(System.Printing.PrintQueue,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printQueue" Type="System.Printing.PrintQueue" />
        <Parameter Name="jobIdentifier" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="printQueue">印刷ジョブをホストしている印刷キューです。</param>
        <param name="jobIdentifier">印刷ジョブの数値 ID。</param>
        <summary>取得、 <see cref="T:System.Printing.PrintSystemJobInfo" /> 、指定した指定したジョブの <see cref="T:System.Printing.PrintQueue" />です。</summary>
        <returns>
          <see cref="T:System.Printing.PrintSystemJobInfo" /> に対応する、 <paramref name="jobIdentifier" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することも、 <xref:System.Printing.PrintQueue.GetJob%2A?displayProperty=fullName> 同じ目的のためのメソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintQueue.GetJob(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HostingPrintQueue">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueue HostingPrintQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintQueue HostingPrintQueue" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.HostingPrintQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブをホストしている印刷キューを取得します。</summary>
        <value>A <see cref="T:System.Printing.PrintQueue" /> 印刷ジョブを所有している印刷キューを表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostingPrintServer">
      <MemberSignature Language="C#" Value="public System.Printing.PrintServer HostingPrintServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintServer HostingPrintServer" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.HostingPrintServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintServer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブの印刷キューをホストしているプリント サーバーを取得します。</summary>
        <value>A <see cref="T:System.Printing.PrintServer" /> のホスティングのプリント サーバー \(通常はコンピューター\) を表す値、 <see cref="T:System.Printing.PrintQueue" /> 印刷ジョブを所有しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalDispose">
      <MemberSignature Language="C#" Value="protected override sealed void InternalDispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InternalDispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.InternalDispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>によって使用されているアンマネージ リソースを解放、 <see cref="T:System.Printing.PrintSystemJobInfo" /> し、必要に応じてマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBlocked">
      <MemberSignature Language="C#" Value="public bool IsBlocked { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBlocked" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsBlocked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブがブロックされているかどうかを示す値を取得し、そのため、印刷されません。</summary>
        <value>
          <see langword="true" /> 場合は、印刷ジョブがブロックされます。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブが終了したかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 場合は、印刷ジョブが完了するとします。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDeleted">
      <MemberSignature Language="C#" Value="public bool IsDeleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDeleted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsDeleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、印刷ジョブにによって表される、 <see cref="T:System.Printing.PrintSystemJobInfo" /> オブジェクトでは、印刷キューから削除します。</summary>
        <value>
          <see langword="true" /> 印刷ジョブが削除された場合それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 矛盾ように思えるかもしれませんが最初のオブジェクトが削除されると、独自の状態を報告一方で保持できることに注意、 <xref:System.Printing.PrintSystemJobInfo> オブジェクトでのみ *表す* 実際の印刷ジョブです。 後者を削除する印刷キューから自動的に破棄しませんの <xref:System.Printing.PrintSystemJobInfo> アプリケーション内のオブジェクト。 同様に、オブジェクトをいずれかから除去されません <xref:System.Printing.PrintJobInfoCollection> バッファプールの印刷ジョブが削除される前に作成されました。 たとえば場合、 <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A> 印刷ジョブが削除される前にメソッドを実行させると、返されるコレクションが含まれます、 <xref:System.Printing.PrintSystemJobInfo> 印刷ジョブを表すオブジェクト。 印刷ジョブを削除すると、このオブジェクトはコレクションから削除されません。 場合に、 <xref:System.Printing.PrintQueue.GetPrintJobInfoCollection%2A> は実行され、返されたコレクションには削除された印刷ジョブを表すメンバーがありません。  
  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDeleting">
      <MemberSignature Language="C#" Value="public bool IsDeleting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDeleting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsDeleting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブが印刷キューから削除されているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 印刷ジョブが削除されている場合それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInError">
      <MemberSignature Language="C#" Value="public bool IsInError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInError" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsInError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エラーが発生が印刷ジョブに関連付けられているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> エラーが発生が印刷ジョブに関連付けられている場合それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOffline">
      <MemberSignature Language="C#" Value="public bool IsOffline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOffline" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsOffline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターがオフラインかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターがオフラインの場合それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この値がすべてに反映される、 <xref:System.Printing.PrintSystemJobInfo> オブジェクトから、 <xref:System.Printing.PrintQueue.IsOffline%2A> 、ホストのプロパティ <xref:System.Printing.PrintQueue>します。  
  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaperOut">
      <MemberSignature Language="C#" Value="public bool IsPaperOut { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaperOut" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPaperOut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>用紙のサイズと印刷ジョブに必要な型を超えて実行プリンターしているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターの必要な用紙が不足している場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPaused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブが一時停止しているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 場合は、印刷ジョブが一時停止します。それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 全体の印刷キューを一時停止もできます。 値など <xref:System.Printing.PrintSystemJobInfo.IsPaused%2A?displayProperty=fullName> できる `false` 場合でもの値、 <xref:System.Printing.PrintQueue.IsPaused%2A?displayProperty=fullName> プロパティは `true`です。  
  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Pause" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Resume" />
      </Docs>
    </Member>
    <Member MemberName="IsPrinted">
      <MemberSignature Language="C#" Value="public bool IsPrinted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPrinted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブが印刷するかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 印刷ジョブが印刷される場合それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrinting">
      <MemberSignature Language="C#" Value="public bool IsPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsPrinting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブが印刷されているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターが印刷します。 場合、それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRestarted">
      <MemberSignature Language="C#" Value="public bool IsRestarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRestarted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsRestarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブが再起動されたかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> プリンターが印刷します。 場合、それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ジョブが再起動されると、そのままで印刷されます。 コントラストを使用すると再起動、 <xref:System.Printing.PrintSystemJobInfo.Resume%2A> メソッドで、一時停止された時点でジョブを再開します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Pause" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Resume" />
        <altmember cref="P:System.Printing.PrintSystemJobInfo.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="IsRetained">
      <MemberSignature Language="C#" Value="public bool IsRetained { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRetained" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsRetained" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷後に、印刷ジョブがキューに保存されたかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 印刷ジョブが保存された場合それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合は印刷ジョブが印刷キューに保持されます、 <xref:System.Printing.PrintQueue.KeepPrintedJobs%2A> のプロパティ、 <xref:System.Printing.PrintQueue> にオブジェクトが設定されている `true` し、キューのプロパティを使用してコミットされている場合、 <xref:System.Printing.PrintQueue.Commit%2A> のメソッド、 <xref:System.Printing.PrintQueue>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpooling">
      <MemberSignature Language="C#" Value="public bool IsSpooling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpooling" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsSpooling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブがスプールされているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 印刷ジョブがスプールされている場合それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUserInterventionRequired">
      <MemberSignature Language="C#" Value="public bool IsUserInterventionRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUserInterventionRequired" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.IsUserInterventionRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プリンターにユーザーの介入が必要かどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> ユーザーの介入が必要な場合それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この値はすべてに反映させる <xref:System.Printing.PrintSystemJobInfo> オブジェクトから、 <xref:System.Printing.PrintQueue.NeedUserIntervention%2A> 、ホストのプロパティ <xref:System.Printing.PrintQueue>します。  
  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobproperties)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobproperties)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobIdentifier">
      <MemberSignature Language="C#" Value="public int JobIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 JobIdentifier" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブの識別番号を取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> 印刷ジョブを識別します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 どの番号付けシステムの使用については、プリント サーバーとプリント サーバーは、コンピューター、またはプリント サーバー アプライアンスかどうかのオペレーティング システムによって決まります。 用のオペレーティング システムなど [!INCLUDE[TLA#tla_whistler](~/includes/tlasharptla-whistler-md.md)] この方法で番号付けを決定: すべてのユーザーが、すべてのキューに、サーバーに送信された最初の印刷ジョブの ID 番号 2 が割り当てられますオンにするとプリント サーバーは、そのすべての印刷キューが空である場合。 各後続のジョブ サーバーで 1 つである数値が割り当てられてそのサーバー上の以前の印刷ジョブよりも大きいです。  
  
 印刷ジョブの印刷キューはその数に影響を与えません。 場合ジョブがその順序でキュー a、QueueB、および、キュー a に送信し、キュー a 2 と 4 は、ジョブが存在すると及ぼしません。  
  
 ジョブには、番号が割り当てられますが後、決して変更数、他のジョブの印刷が完了または取り消された場合でも、または、サーバーが再起動した場合です。 1 つである数値を最初の新しいジョブが割り当てられて場合は、既にジョブが 1 つまたは複数のキューで、サーバーを再起動すると、サーバーの起動時にキューにあったジョブの最大番号より大きい。 ただし、それを再起動するまでプリント サーバーで再使用されない数値です。 印刷前にジョブの最大の番号が取り消された場合でも、次のジョブ数を取得、1 つであるより高い。  
  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobName">
      <MemberSignature Language="C#" Value="public string JobName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string JobName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または印刷ジョブの名前を設定します。</summary>
        <value>A <see cref="T:System.String" /> 印刷ジョブの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobSize">
      <MemberSignature Language="C#" Value="public int JobSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 JobSize" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブのバイト単位のサイズを取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> 印刷ジョブのバイト単位のサイズを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobStatus">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobStatus JobStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintJobStatus JobStatus" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブの現在の状態を取得します。</summary>
        <value>
          <see cref="T:System.Printing.PrintJobStatus" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、ステータスのプロパティの各など、個別にチェックを回避するための手段 <xref:System.Printing.PrintSystemJobInfo.IsPrinting%2A> と <xref:System.Printing.PrintSystemJobInfo.IsPaused%2A>です。  
  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobAttributes](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#spottroubleusingjobattributes)]
 [!code-csharp[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobAttributes](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#spottroubleusingjobattributes)]
 [!code-vb[DiagnoseProblematicPrintJob\#SpotTroubleUsingJobAttributes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#spottroubleusingjobattributes)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JobStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream JobStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream JobStream" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.JobStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブの <see cref="T:System.IO.Stream" /> への参照を取得します。</summary>
        <value>印刷ジョブが含まれる <see cref="T:System.IO.Stream" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Windows 8 およびそれ以降のバージョンのオペレーティング システム上の .NET Framework 4.5 以降では、このストリームに書き込まれたデータ形式でなければなりません XPS パッケージ ストリームとして。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfPages">
      <MemberSignature Language="C#" Value="public int NumberOfPages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfPages" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.NumberOfPages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブでは、ページの数を取得します。</summary>
        <value>
          <see cref="T:System.Int32" />ページ印刷ジョブの数を示すです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ページは、1 枚の用紙または他の印刷メディアの一方の側です。  
  
 次の表は、このプロパティは、および使用すると、シートの数の値によって、両面印刷 \(二重\) の印刷ジョブを呼び出すかどうか、複数のシートごとのページを呼び出すかどうかまたは両方を呼び出すかどうかがどのように影響するかを示しています。  
  
### 両面印刷と印刷の複数ページに印刷に影響する方法  
  
|両面印刷|シートごとのページ|NumberOfPages の値|用紙の物理的な用紙の数|  
|----------|---------------|----------------------|-----------------|  
|いいえ|1|ドキュメントのページの数と同じです。|ドキュメントのページの数と同じです。|  
|はい|1|ドキュメントのページの数と同じです。|Document pages ÷ 2\(切り上げ\)。|  
|いいえ|複数|Document pages ÷ Pages per sheet\(切り上げ\)。|Document pages ÷ Pages per sheet\(切り上げ\)。|  
|はい|複数|Document pages ÷ Pages per sheet\(切り上げ\)。|\[Document pages ÷ Pages per sheet\] ÷ 2\(切り上げ\)。|  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintTicket.Duplexing" />
        <altmember cref="P:System.Printing.PrintTicket.PagesPerSheet" />
      </Docs>
    </Member>
    <Member MemberName="NumberOfPagesPrinted">
      <MemberSignature Language="C#" Value="public int NumberOfPagesPrinted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfPagesPrinted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.NumberOfPagesPrinted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既に印刷ページの数を取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> 既に印刷ページの数を示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Pause" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>停止するまで、このジョブの印刷 <see cref="M:System.Printing.PrintSystemJobInfo.Resume" /> を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 別のジョブがキュー内にある場合は、現在のジョブが一時停止されると、印刷を開始します。  
  
 ホストしている <xref:System.Printing.PrintQueue> も <xref:System.Printing.PrintQueue.Pause%2A> と <xref:System.Printing.PrintQueue.Resume%2A> メソッドです。 印刷キューが一時停止している場合は、個々 のジョブを再開しても印刷を再開するには、そのジョブは発生しません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintSystemJobInfo.IsPaused" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Resume" />
      </Docs>
    </Member>
    <Member MemberName="PositionInPrintQueue">
      <MemberSignature Language="C#" Value="public int PositionInPrintQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PositionInPrintQueue" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.PositionInPrintQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷キューで印刷ジョブの場所を取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> キュー内の印刷ジョブの位置を示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobPriority Priority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintJobPriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷キューの他のジョブの基準とした印刷ジョブの優先順位を表す非数値式を取得します。</summary>
        <value>A <see cref="T:System.Printing.PrintJobPriority" /> として印刷ジョブの優先度を表す <see cref="F:System.Printing.PrintJobPriority.Maximum" />, 、<see cref="F:System.Printing.PrintJobPriority.Minimum" />, 、<see cref="F:System.Printing.PrintJobPriority.Default" />, 、または <see cref="F:System.Printing.PrintJobPriority.None" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Refresh" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>プロパティを更新、 <see cref="T:System.Printing.PrintSystemJobInfo" /> オブジェクトの値、オブジェクトが表す実際の印刷ジョブの値と一致します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロパティにある変更点、 <xref:System.Printing.PrintSystemJobInfo> オブジェクトに書き込まれると、実際の印刷ジョブを使用して、 <xref:System.Printing.PrintSystemJobInfo.Commit%2A> メソッドです。 コミットしていないすべての変更が失われたときに、 <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> メソッドを実行します。  
  
 クラスを派生させる場合 <xref:System.Printing.PrintSystemJobInfo> 追加のプロパティを持つ、オーバーライドする必要があります、 <xref:System.Printing.PrintSystemJobInfo.Refresh%2A> 独自の実装を持つメソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Commit" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Restart" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>先頭からの印刷ジョブを再起動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要に応じて、使用することができます、 <xref:System.Printing.PrintSystemJobInfo.Resume%2A> メソッドで、一時停止された時点から開始、一時停止中の印刷ジョブを再開します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintSystemJobInfo.Resume" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一時停止中の印刷ジョブの印刷を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ホストしている <xref:System.Printing.PrintQueue> も <xref:System.Printing.PrintQueue.Pause%2A> と <xref:System.Printing.PrintQueue.Resume%2A> メソッドです。 印刷キューが一時停止している場合、個々 のジョブを再開する再開しない印刷ジョブの印刷します。  
  
   
  
## 例  
 次の例では、このメソッドを使用して、一時停止中の印刷ジョブを再開する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob\#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob\#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintSystemJobInfo.IsPaused" />
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Pause" />
      </Docs>
    </Member>
    <Member MemberName="StartTimeOfDay">
      <MemberSignature Language="C#" Value="public int StartTimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.StartTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>1 日深夜世界協定時刻 \(UTC\) \(もと呼ばれるグリニッジ標準時 \(GMT\)\)、印刷ジョブが印刷を開始する時間を分単位で表したの最も早い時刻を取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> できるだけ早いを指定することの開始時刻 \(UTC\) の午前 0 時から分単位で表した、印刷ジョブにします。 最大値は、1439年です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この値がそれぞれに反映される <xref:System.Printing.PrintSystemJobInfo> オブジェクトから、 <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=fullName> 、ホストのプロパティ <xref:System.Printing.PrintQueue> 時に、ジョブがキューに入る。 場合 <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=fullName> が変更された場合、いずれかの <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A?displayProperty=fullName> より前の値 <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=fullName> の値に変更が <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=fullName>です。  
  
 ジョブがキューに追加された後、新しい与えることができます <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> 値を通じて、 [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], するがよりも前でない <xref:System.Printing.PrintQueue.StartTimeOfDay%2A?displayProperty=fullName>します。  
  
 UTC タイム ゾーンにしていない場合、追加するか、ローカルのタイム ゾーンの正しい時刻を取得する 60 の倍数を減算する必要があります。 たとえば、北アメリカ太平洋標準時タイム ゾーンと夏時間の削減に使用するがでない場合効果、現地時間は 8 時間 \(utc\) よりも前です。 場合 <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> 返します 960, 、つまり、16:00 \(午後 4時 00分\) \(utc\) \(ため 960\/60 \= 16\)です。 減算する必要がこれを太平洋標準時に変換する 480 \(\= 8 \* 60\) 分です。  
  
 忘れないでください時間は 24 時間後に 0 にロール オーバーする \(つまり; 1439 分後\)。 場合 <xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A> 返します 120, 、つまり、午前 2時 00分 \(utc\)。 減算する必要がこれを太平洋標準時に変換する 480 につながる分 \-360します。 意味のある正の値を取得するには、日の合計 \(分\) に負の値を追加 1440, の最終的な値の結果として得られる、 1080 \(午後 6時 00分\) 太平洋標準時です。  
  
 参照してください <xref:System.TimeZone>, 、<xref:System.TimeSpan>, 、および <xref:System.DateTime> のタイム ゾーン調整を支援するメソッドです。  
  
 プリンターが常に場合、このプロパティはすべてのタイム ゾーンに 0 を返しますし。  
  
   
  
## 例  
 次の例では、問題のある印刷ジョブを診断するプロセスの一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#UsingJobStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#usingjobstartanduntiltimes)]
 [!code-csharp[DiagnoseProblematicPrintJob\#UsingJobStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#usingjobstartanduntiltimes)]
 [!code-vb[DiagnoseProblematicPrintJob\#UsingJobStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#usingjobstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
        <altmember cref="P:System.Printing.PrintSystemJobInfo.UntilTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="Submitter">
      <MemberSignature Language="C#" Value="public string Submitter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Submitter" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.Submitter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブを送信したユーザーの名前を取得します。</summary>
        <value>A <see cref="T:System.String" /> 印刷ジョブを送信したユーザーを識別します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、印刷ジョブに問題を診断するときに、このプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob\#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeJobSubmitted">
      <MemberSignature Language="C#" Value="public DateTime TimeJobSubmitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime TimeJobSubmitted" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.TimeJobSubmitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブを送信する日時を取得します。</summary>
        <value>A <see cref="T:System.DateTime" /> 印刷ジョブを送信する日時を含むオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeSinceStartedPrinting">
      <MemberSignature Language="C#" Value="public int TimeSinceStartedPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TimeSinceStartedPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.TimeSinceStartedPrinting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷ジョブが印刷を開始してからは、時間 \(ミリ秒単位\) を取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> 印刷ジョブが開始されてから時間 \(ミリ秒単位\) を表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UntilTimeOfDay">
      <MemberSignature Language="C#" Value="public int UntilTimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UntilTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintSystemJobInfo.UntilTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>世界協定時刻 \(UTC\) \(もと呼ばれるグリニッジ標準時 \(GMT\)\)、印刷ジョブが印刷を開始できる午前 0 時から分単位で表される日の最終時刻を取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> 午前 0 時 \(UTC\) から分単位で表した、ジョブが印刷できる最終時刻を指定します。 最大値は、1439年です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この値がそれぞれに反映される <xref:System.Printing.PrintSystemJobInfo> オブジェクトから、 <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=fullName> 、ホストのプロパティ <xref:System.Printing.PrintQueue> 時に、ジョブがキューに入る。 場合 <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=fullName> が変更された場合、いずれかの <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A?displayProperty=fullName> より後の値 <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=fullName> の値に変更が <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=fullName>です。  
  
 ジョブがキューに追加された後、新しい与えることができます <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> 値を通じて、 [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], するのではよりも後の <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A?displayProperty=fullName>です。  
  
 UTC タイム ゾーンにしていない場合、追加するか、ローカルのタイム ゾーンの正しい時刻を取得する 60 の倍数を減算する必要があります。 たとえば、北アメリカ太平洋標準時タイム ゾーンと夏時間の削減に使用するがでない場合効果、現地時間は 8 時間 \(utc\) よりも前です。 場合 <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> 返します 960, 、つまり、16:00 \(午後 4時 00分\) \(utc\) \(ため 960\/60 \= 16\)です。 減算する必要がこれを太平洋標準時に変換する 480 \(\= 8 \* 60\) 分です。  
  
 忘れないでください時間は 24 時間後に 0 にロール オーバーする \(つまり; 1439 分後\)。 場合 <xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A> 返します 120, 、つまり、午前 2時 00分 \(utc\)。 減算する必要がこれを太平洋標準時に変換する 480 につながる分 \-360します。 意味のある正の値を取得するには、日の合計 \(分\) に負の値を追加 1440, の最終的な値の結果として得られる、 1080 \(午後 6時 00分\) 太平洋標準時です。  
  
 参照してください <xref:System.TimeZone>, 、<xref:System.TimeSpan>, 、および <xref:System.DateTime> のタイム ゾーン調整を支援するメソッドです。  
  
 プリンターが常に場合、このプロパティはすべてのタイム ゾーンに 0 を返しますし。  
  
   
  
## 例  
 次の例では、問題のある印刷ジョブを診断するプロセスの一部としてこのプロパティを使用する方法を示します。  
  
 [!code-cpp[DiagnoseProblematicPrintJob\#UsingJobStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#usingjobstartanduntiltimes)]
 [!code-csharp[DiagnoseProblematicPrintJob\#UsingJobStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#usingjobstartanduntiltimes)]
 [!code-vb[DiagnoseProblematicPrintJob\#UsingJobStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#usingjobstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
        <altmember cref="P:System.Printing.PrintSystemJobInfo.StartTimeOfDay" />
      </Docs>
    </Member>
  </Members>
</Type>