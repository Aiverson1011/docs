<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>トレース出力またはデバッグ出力を標準出力、または標準エラー ストリームを転送します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Diagnostics.ConsoleTraceListener> トレースとデバッグのコンソールにメッセージを記述するクラス。 初期化することができます、 <xref:System.Diagnostics.ConsoleTraceListener> トレース メッセージを記述するオブジェクト、 <xref:System.Console.Out%2A?displayProperty=fullName> ストリームや、 <xref:System.Console.Error%2A?displayProperty=fullName> ストリームします。  
  
> [!IMPORTANT]
>  <xref:System.IDisposable> インターフェイスです。 型の使用が完了したらを直接または間接的にその破棄する必要があります。 型の直接 dispose を呼び出してその <xref:System.IDisposable.Dispose%2A> メソッドで、`try`\/`catch` ブロックします。 直接ことのない破棄する場合など言語構成要素を使用して `using` \(c\#\) のまたは `Using` \(Visual Basic で\)。 詳細については、"を使用して、オブジェクトを実装して IDisposable"」セクションを参照してください、 <xref:System.IDisposable> インターフェイスに関するトピック。  
  
 ときにトレースし、デバッグ出力が有効になっている、 <xref:System.Diagnostics.ConsoleTraceListener> メッセージが書き込まれるを指定した <xref:System.Console?displayProperty=fullName> でメッセージが書き込まれる方法に似ているストリーム、 <xref:System.Console.Write%2A?displayProperty=fullName> または <xref:System.Console.WriteLine%2A?displayProperty=fullName> メソッドです。 コンソール アプリケーションで、 <xref:System.Console?displayProperty=fullName> 出力とエラー ストリームは、既存のコンソール ウィンドウにメッセージを書き込む、または書き込むストリームをリダイレクトする、 <xref:System.IO.TextWriter?displayProperty=fullName> インスタンス。  
  
> [!NOTE]
>  コンソールが存在しない場合、Windows ベースのアプリケーションと同様に、コンソールに書き込まれたメッセージは表示されません。  
  
 追加、 <xref:System.Diagnostics.ConsoleTraceListener> を適切なオブジェクト <xref:System.Diagnostics.Trace.Listeners%2A> メッセージを記述する場合は、コレクション <xref:System.Diagnostics.Trace>, 、<xref:System.Diagnostics.TraceSource>, 、または <xref:System.Diagnostics.Debug> に、コンソールに書き込まれます。 さらを使用してコンソールに直接メッセージを記述できます、 <xref:System.Diagnostics.Trace.Write%2A?displayProperty=fullName> または <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName> メソッドです。  
  
> [!NOTE]
>  <xref:System.Diagnostics.Debug> と <xref:System.Diagnostics.Trace> クラスでは、同じ共有 <xref:System.Diagnostics.TraceListenerCollection> 、それぞれによってアクセスされるコレクション `Listeners` プロパティです。 追加する場合、 <xref:System.Diagnostics.ConsoleTraceListener> これらのクラスのいずれかを使用して、コレクションにオブジェクトの他のクラスが自動的に同じリスナーを使用します。  
  
 ほとんどのコンパイラでは、トレースを有効にし、デバッグ出力を条件付きコンパイル フラグ。 トレース出力またはデバッグ、によって書き込まれたメッセージを無効にした場合、 <xref:System.Diagnostics.Debug?displayProperty=fullName> と <xref:System.Diagnostics.Trace?displayProperty=fullName> クラスが実質的に無視されます。 トレースを有効にして、出力をデバッグする構文は、コンパイラ固有です。c\# または Visual Basic 以外のコンパイラを使用する場合は、コンパイラのドキュメントを参照してください。  
  
-   C\# でのデバッグを有効にする、 **\/d:DEBUG**フラグ、コードをコンパイルするか、追加するときに、コンパイラのコマンドラインを **\#define デバッグ** 、ファイルの先頭にします。 Visual basic では、追加、 **\/d:DEBUG \= True** フラグをコンパイラ コマンドライン。  
  
-   C\# でのトレースを有効にする、 **\/d:TRACE** フラグを追加したり、コードをコンパイルすると、コンパイラのコマンドライン **\# トレースを define** 、ファイルの先頭にします。 Visual basic では、追加、 **\/d:TRACE \= True** フラグをコンパイラ コマンドライン。  
  
 追加することができます、 <xref:System.Diagnostics.ConsoleTraceListener> オブジェクトを <xref:System.Diagnostics.Trace.Listeners%2A> 、コード内のコレクションに追加できる、 <xref:System.Diagnostics.ConsoleTraceListener> オブジェクトを <xref:System.Diagnostics.Trace.Listeners%2A> により、アプリケーション構成ファイルのコレクション。 追加、 <xref:System.Diagnostics.ConsoleTraceListener> 固有のコード セクションまたは実行パスのメッセージを書き込むように、コード内のオブジェクト。 追加、 <xref:System.Diagnostics.ConsoleTraceListener> アプリケーションの実行中に、コンソールにメッセージのすべてのトレースとデバッグを指示する、アプリケーション構成ファイル内のオブジェクト。  
  
 トレースの書き込みをデバッグ メッセージを特定のコード セクションのコンソールには、初期化、 <xref:System.Diagnostics.ConsoleTraceListener> オブジェクトを追加する、 <xref:System.Diagnostics.Trace.Listeners%2A> コレクションです。 使用してメッセージを含むコードのセクションをインストルメントし、 <xref:System.Diagnostics.Trace> または <xref:System.Diagnostics.Debug> クラスです。 コード セクションの末尾には、削除、 <xref:System.Diagnostics.ConsoleTraceListener> オブジェクトから、 <xref:System.Diagnostics.Trace.Listeners%2A> コレクション、および呼び出し、 <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> メソッドを <xref:System.Diagnostics.ConsoleTraceListener>です。  
  
 すべてのトレースを直接デバッグでは、アプリケーションを実行しながらをコンソールにメッセージを追加、 <xref:System.Diagnostics.ConsoleTraceListener> オブジェクトがアプリケーション構成ファイルにします。 アプリケーションの名前に対応する構成ファイルまたは app.config ファイルを編集、 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] プロジェクトです。 このファイル内の要素を挿入、 <xref:System.Diagnostics.ConsoleTraceListener>です。  
  
 次の例では追加、 <xref:System.Diagnostics.ConsoleTraceListener> という名前のオブジェクト `configConsoleListener` に、 <xref:System.Diagnostics.Trace.Listeners%2A> コレクションです。  
  
```  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"           type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 アプリケーション構成ファイルにトレース リスナーを追加する方法の詳細については、「 [\<listeners\> Element](http://msdn.microsoft.com/ja-jp/1394c2c3-6304-46db-87c1-8e8b16f5ad5b)します。  
  
   
  
## 例  
 次のコード例では、2 つのパブリック メソッドをクラスで構成されるコンソール アプリケーションを実装します。  
  
 `Main` メソッドは、コマンドライン引数を検証し、トレース出力が標準エラー ストリームまたは標準出力ストリームに送られるかどうかを判断します。`Main` 作成して初期化、 <xref:System.Diagnostics.ConsoleTraceListener> 、指定されたオブジェクト <xref:System.Console> 出力ストリーム、およびトレース リスナー コレクションにこのオブジェクトを追加します。 呼び出して、 `WriteEnvironmentInfoToTrace` メソッドで、実行中の環境と、トレース出力をトレース リスナーの構成に関する詳細情報を書き込みます。  
  
 環境およびトレースの構成の詳細がで指定されたコンソール出力ストリームに書き込まれるアプリケーションの例を実行すると、 <xref:System.Diagnostics.ConsoleTraceListener> オブジェクトです。  
  
 [!code-csharp[Diagnostics\_ConsoleTraceListener\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics\_ConsoleTraceListener\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> クラスがトレース出力を標準出力ストリームに書き込まれます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクター、 <xref:System.Diagnostics.ConsoleTraceListener> メッセージを記述するオブジェクト、 <xref:System.Console.Out%2A?displayProperty=fullName> ストリームします。 その <xref:System.Diagnostics.TraceListener.Name%2A> プロパティは、空の文字列に初期化 \(""\) です。  
  
   
  
## 例  
 次のコード例の初期化、 <xref:System.Diagnostics.ConsoleTraceListener> 、指定されたオブジェクト <xref:System.Console> 出力ストリームをトレース リスナー コレクションに追加します。 このコード例が示されている例の一部は、 <xref:System.Diagnostics.ConsoleTraceListener> クラスです。  
  
 [!code-csharp[Diagnostics\_ConsoleTraceListener\#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics\_ConsoleTraceListener\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream">
          <see langword="true" /> トレースとデバッグ出力を標準エラー ストリームに書き込む <see langword="false" /> のトレースとデバッグ出力を標準出力ストリームに書き込めません。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> クラスをトレースの出力を標準出力ストリーム、または標準エラー ストリームにオプションを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクター、 <xref:System.Diagnostics.ConsoleTraceListener> いずれかにメッセージを書き込むオブジェクト、 <xref:System.Console.Out%2A?displayProperty=fullName> または <xref:System.Console.Error%2A?displayProperty=fullName> ストリームします。 その <xref:System.Diagnostics.TraceListener.Name%2A> プロパティは、空の文字列に初期化 \(""\) です。  
  
   
  
## 例  
 次のコード例の初期化、 <xref:System.Diagnostics.ConsoleTraceListener> 、指定されたオブジェクト <xref:System.Console> 出力ストリームをトレース リスナー コレクションに追加します。 このコード例が示されている例の一部は、 <xref:System.Diagnostics.ConsoleTraceListener> クラスです。  
  
 [!code-csharp[Diagnostics\_ConsoleTraceListener\#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics\_ConsoleTraceListener\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このトレース リスナーに指定されたストリームに出力を閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この指定されたストリーム <xref:System.Diagnostics.ConsoleTraceListener> インスタンス \(いずれか、 <xref:System.Console.Out%2A?displayProperty=fullName> ストリーム、または <xref:System.Console.Error%2A?displayProperty=fullName> ストリーム\) が終了します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Diagnostics.ConsoleTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>