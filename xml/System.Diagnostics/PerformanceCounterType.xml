<Type Name="PerformanceCounterType" FullName="System.Diagnostics.PerformanceCounterType">
  <TypeSignature Language="C#" Value="public enum PerformanceCounterType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed PerformanceCounterType extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.PerformanceCounterType" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Diagnostics.AlphabeticalEnumConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>計算に使用する数式を指定する、 <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> のメソッド、 <see cref="T:System.Diagnostics.PerformanceCounter" /> インスタンス。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 カウンターの種類によっては、他のユーザーは 1 つまたは複数のカウンター サンプルに基づいて、計算された値を表すに対し、生データを表します。 次のカテゴリは、使用できるカウンターの種類を分類します。  
  
-   平均: は、時間の経過と共に値を測定し、最後の 2 つの測定値の平均値を表示します。 関連するサンプルの数を追跡するベース カウンターは、平均の各カウンターに関連付けられています。  
  
-   差分: が 1 つ前の最後に計測を減算し、正である場合は、差を表示負の場合はゼロを表示します。  
  
-   即時: 最新の計測値を表示します。  
  
-   割合: は、計算値をパーセンテージとして表示します。  
  
-   割合: は、時間の経過と共にイベント数が増加するをサンプリングし、アクティビティの割合を表示する時間を変更してカウント値の変更を除算します。  
  
 パフォーマンス カウンター データをサンプリング時に使用する平均を表すカウンター型と、生データ値意味のある組織が使用します。 生データ カウンターなど、 `NumberOfItems64` ランダム サンプル サンプルには、データを公開できます。 カウンターが返す値の平均を計算する計算になります \(X 0 \+ X 1 \+…\] \+ X n\)\/n、それぞれの X は 未処理のカウンター サンプルに示します。  
  
 割合カウンターは、カウンターの平均に似ていますが、複数のリソースが使用される割合が増加する場合に便利です。 短時間の平均を計算する数式は、\(\(X n \-x 0\)\/\(T n \-t 0\)\)\/頻度、それぞれの X は カウンター サンプルと各 T は、 は は対応するサンプルの作成時。 1 秒あたりの平均使用量になります。  
  
> [!NOTE]
>  特に明記しない限り、時間の単位は秒です。  
  
 アプリケーション \(の作成とカスタム パフォーマンス カウンターの書き込み\) を実装するときは、計算で使用されている付属するベース カウンターに依存するパフォーマンス カウンターの種類と処理可能性があります。 ベースのカウンターは、関連付けられているカウンターの直後にする必要があります、 <xref:System.Diagnostics.CounterCreationDataCollection> コレクションのアプリケーションで使用します。 次の表では、ベース カウンター タイプの対応するパフォーマンス カウンターの種類と一覧表示します。  
  
|基本のカウンターの種類|パフォーマンス カウンターの種類|  
|-----------------|----------------------|  
|`AverageBase`|`AverageTimer32`<br /><br /> `AverageCount64`|  
|`CounterMultiBase`|`CounterMultiTimer`<br /><br /> `CounterMultiTimerInverse`<br /><br /> `CounterMultiTimer100Ns`<br /><br /> `CounterMultiTimer100NsInverse`|  
|`RawBase`|`RawFraction`|  
|`SampleBase`|`SampleFraction`|  
  
   
  
## 例  
 次の例を示すいくつかのカウンターの種類の <xref:System.Diagnostics.PerformanceCounterType> 列挙します。  
  
 `AverageCount64`  
  
 [!code-cpp[PerformanceCounterType.AverageCounter64\#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CPP/averagecount32.cpp#1)]
 [!code-csharp[PerformanceCounterType.AverageCounter64\#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/CS/averagecount32.cs#1)]
 [!code-vb[PerformanceCounterType.AverageCounter64\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.AverageCounter64/VB/averagecount32.vb#1)]  
  
 `AverageTimer32`  
  
 [!code-cpp[PerformanceCounterType.AverageTimer32\#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.AverageTimer32/CPP/averagetimer32.cpp#2)]
 [!code-csharp[PerformanceCounterType.AverageTimer32\#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.AverageTimer32/CS/averagetimer32.cs#2)]
 [!code-vb[PerformanceCounterType.AverageTimer32\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.AverageTimer32/VB/averagetimer32.vb#2)]  
  
 `ElapsedTime`  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime\#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime\#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 `NumberOfItems32`  
  
 [!code-cpp[PerformanceCounterType.NumberOfItems32\#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.NumberOfItems32/CPP/numberofitems32.cpp#1)]
 [!code-csharp[PerformanceCounterType.NumberOfItems32\#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.NumberOfItems32/CS/numberofitems32.cs#1)]
 [!code-vb[PerformanceCounterType.NumberOfItems32\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.NumberOfItems32/VB/numberofitems32.vb#1)]  
  
 `NumberOfItems64`  
  
 [!code-cpp[PerformanceCounterType.NumberOfItems64\#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.NumberOfItems64/CPP/numberofitems64.cpp#1)]
 [!code-csharp[PerformanceCounterType.NumberOfItems64\#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.NumberOfItems64/CS/numberofitems64.cs#1)]
 [!code-vb[PerformanceCounterType.NumberOfItems64\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.NumberOfItems64/VB/numberofitems64.vb#1)]  
  
 `SampleFraction`  
  
 [!code-csharp[PerformanceCounterType.SampleFraction\#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.SampleFraction/CS/program.cs#1)]
 [!code-vb[PerformanceCounterType.SampleFraction\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.SampleFraction/VB/program.vb#1)]  
  
 `RateOfCountsPerSecond32`  
  
 [!code-cpp[PerformanceCounterType.RateOfCountsPerSecond\#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.RateOfCountsPerSecond/CPP/rateofcountspersecond32.cpp#1)]
 [!code-csharp[PerformanceCounterType.RateOfCountsPerSecond\#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.RateOfCountsPerSecond/CS/rateofcountspersecond32.cs#1)]
 [!code-vb[PerformanceCounterType.RateOfCountsPerSecond\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.RateOfCountsPerSecond/VB/rateofcountspersecond32.vb#1)]  
  
 `RateOfCountsPerSecond64`  
  
 [!code-cpp[PerformanceCounterType.RateOfCountsPerSecond64\#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.RateOfCountsPerSecond64/CPP/rateofcountspersecond64.cpp#1)]
 [!code-csharp[PerformanceCounterType.RateOfCountsPerSecond64\#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.RateOfCountsPerSecond64/CS/rateofcountspersecond64.cs#1)]
 [!code-vb[PerformanceCounterType.RateOfCountsPerSecond64\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.RateOfCountsPerSecond64/VB/rateofcountspersecond64.vb#1)]  
  
 `RawFraction`  
  
 [!code-cpp[PerformanceCounterType.RawFraction\#1](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.RawFraction/CPP/rawfraction.cpp#1)]
 [!code-csharp[PerformanceCounterType.RawFraction\#1](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.RawFraction/CS/rawfraction.cs#1)]
 [!code-vb[PerformanceCounterType.RawFraction\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.RawFraction/VB/rawfraction.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.PerformanceCounter" />
  </Docs>
  <Members>
    <Member MemberName="AverageBase">
      <MemberSignature Language="C#" Value="AverageBase" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType AverageBase = int32(1073939458)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.AverageBase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>などの時間やカウントの平均の計算に使用される基本カウンター <see langword="AverageTimer32" /> と <see langword="AverageCount64" />です。 存在"操作ごとの時間"カウンターの計算の分母を格納または「操作ごとの回数」です。</summary>
      </Docs>
    </Member>
    <Member MemberName="AverageCount64">
      <MemberSignature Language="C#" Value="AverageCount64" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType AverageCount64 = int32(1073874176)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.AverageCount64" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目の数、平均すると、中に処理された操作を示す平均カウンター。 このタイプのカウンターは、完了した操作の数に処理されたアイテムの比率を表示します。 比率は、最後の期間中、完了した操作の数には、最後の間隔中に処理されたアイテムの数を比較して計算されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: \(N 1 \-n 0\)\/\(B 1 \-b 0\) ここで、N 1 および N 0 パフォーマンス カウンターの値は、B、 1 a と B 0 はそれに対応する `AverageBase` 値。 したがって、分子はサンプリング間隔中に処理されたアイテムの番号を表し、分母は、サンプリング間隔中、完了した操作の数を表します。  
  
 この種類のカウンターには、PhysicalDisk\\ 平均が含まれます。 ディスク バイト数\/転送します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageTimer32">
      <MemberSignature Language="C#" Value="AverageTimer32" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType AverageTimer32 = int32(805438464)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.AverageTimer32" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>平均すると、プロセスまたは操作を完了する時間を計測する平均カウンターです。 このタイプのカウンターは、プロセスや時間内に完了した操作の数をサンプリング間隔の経過時間の合計の比率を表示します。 このカウンターの種類は、システム クロックのタイマー刻み単位で時間を計測します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: \(\(N 1 \-n 0\)\/F\)\/\(B 1 \-b 0\) ここで、N 1 および N 0 パフォーマンス カウンタの測定値 B は 1 a と B 0 はそれに対応する `AverageBase` 値、および F は 1 秒あたりのタイマー刻みの数。 F の値が計算で考慮されるため、結果は秒単位で表示できます。 したがって、分子が前回のサンプル間隔中にカウントされたタイマー刻みの数を表します、F はタイマー刻みの頻度を表し、分母は最後のサンプリング間隔中に、完了した操作の数を表します。  
  
 この種類のカウンターには、PhysicalDisk\\ 平均が含まれます。 ディスク転送秒数。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CounterDelta32">
      <MemberSignature Language="C#" Value="CounterDelta32" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType CounterDelta32 = int32(4195328)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.CounterDelta32" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>2 つの最新のサンプル間隔の間で測定された属性の変更を示す差カウンター。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: N 1 \-n 0, ここで、N 1 および N 0 パフォーマンス カウンタの測定値をします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CounterDelta64">
      <MemberSignature Language="C#" Value="CounterDelta64" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType CounterDelta64 = int32(4195584)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.CounterDelta64" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>2 つの最新のサンプル間隔の間で測定された属性の変更を示す差カウンター。 同じである、 <see langword="CounterDelta32" /> される点を除き、カウンターの種類では、大規模なフィールドを使用して、大きな値に対応します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: N 1 \-n 0, ここで、N 1 および N 0 パフォーマンス カウンタの測定値をします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CounterMultiBase">
      <MemberSignature Language="C#" Value="CounterMultiBase" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType CounterMultiBase = int32(1107494144)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.CounterMultiBase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サンプリングする項目の数を示す基本カウンターです。 複数のタイミングをとりながらをサンプリングする項目の平均を取得する、計算の分母として使用される類似したアイテムです。 併用 <see langword="CounterMultiTimer" />, 、<see langword="CounterMultiTimerInverse" />, 、<see langword="CounterMultiTimer100Ns" />, 、および <see langword="CounterMultiTimer100NsInverse" />です。</summary>
      </Docs>
    </Member>
    <Member MemberName="CounterMultiTimer">
      <MemberSignature Language="C#" Value="CounterMultiTimer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType CounterMultiTimer = int32(574686464)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>1 つまたは複数のコンポーネントのアクティブな時間をサンプリング間隔の時間の合計に対する割合で示しますパーセント カウンター。 分子は同時に動作するコンポーネントのアクティブな時間を記録するため、結果の割合は 100% を超えることができます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このカウンターは、マルチ タイマーです。 マルチ タイマーは、プロセッサやディスクなどのコンポーネントの 1 つ以上のインスタンスからデータを収集します。 このカウンターの種類が異なる `CounterMultiTimer100Ns` 点で、時間を 100 ナノ秒単位ではなく、システム パフォーマンス タイマーのタイマー刻み単位で計測します。  
  
 数式: \(\(N 1 \-N 0\)\/\(D 1 \-D 0\)\) x 100\/B、ここで N 1 および N 0 パフォーマンス カウンタの測定値、D は 1 と D 0 、システム パフォーマンス タイマーのタイマー刻み単位で計算は、変数 B は監視対象のコンポーネントの基本の数を表します \(型の基本カウンターを使用して `CounterMultiBase`\)。 したがって、分子では、サンプリング間隔を監視対象のコンポーネントがアクティブにし、分母は、サンプリング間隔の経過時間の合計を表しますの部分を表します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CounterMultiTimer100Ns">
      <MemberSignature Language="C#" Value="CounterMultiTimer100Ns" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType CounterMultiTimer100Ns = int32(575735040)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サンプリング間隔の時間の合計パーセンテージで 1 つまたは複数のコンポーネントのアクティブな時間を示すパーセント カウンター。 100 ナノ秒 \(ns\) 単位の時間を測定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このカウンターの種類は、マルチ タイマーです。 マルチ タイマーは、プロセッサやディスクなどのコンポーネントの 1 つ以上のインスタンスを監視するよう設計されています。  
  
 数式: \(\(N 1 \-N 0\)\/\(D 1 \-D 0\)\) x 100\/B、ここで N 1 および N 0 パフォーマンス カウンタの測定値、D は 1 と D 0 を 100 ナノ秒単位で計算は、変数 B は監視対象のコンポーネントの基本の数を表します \(型の基本カウンターを使用して `CounterMultiBase`\)。 したがって、分子では、サンプリング間隔を監視対象のコンポーネントがアクティブにし、分母は、サンプリング間隔の経過時間の合計を表しますの部分を表します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CounterMultiTimer100NsInverse">
      <MemberSignature Language="C#" Value="CounterMultiTimer100NsInverse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType CounterMultiTimer100NsInverse = int32(592512256)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サンプリング間隔の時間の合計パーセンテージで 1 つまたは複数のコンポーネントのアクティブな時間を示すパーセント カウンター。 このタイプのカウンターは、100 ナノ秒 \(ns\) 単位で時間を測定します。 アクティブな時間は、コンポーネントがアクティブでなかった時間を測定し、監視対象オブジェクトの数を 100% を乗算した結果を引いて、派生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このカウンターの種類は、逆のマルチ タイマーです。 マルチ タイマーは、プロセッサやディスクなどのコンポーネントの 1 つ以上のインスタンスを監視するよう設計されています。 逆カウンターは、コンポーネントがアクティブでない時間を測定し、アクティブな時間を非アクティブな時間の測定値から派生  
  
 数式: \(B \(\(N 1 \-N 0\)\/\(D 1 \-D 0\)\)\) x 100、分母は、サンプリング間隔の経過時間の合計を表しますが、分子が表す時間監視対象のコンポーネントが、アクティブでなかった、B は、コンポーネントの数を表す場合、間隔中に、監視されている型の基本カウンターを使用して `CounterMultiBase`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CounterMultiTimerInverse">
      <MemberSignature Language="C#" Value="CounterMultiTimerInverse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType CounterMultiTimerInverse = int32(591463680)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サンプリング間隔の時間の合計パーセンテージで 1 つまたは複数のコンポーネントのアクティブな時間を示すパーセント カウンター。 コンポーネントがアクティブでなかった時間を計測し、監視オブジェクトの数が 100% から結果を引いて、アクティブな時間を派生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このカウンターの種類は、逆のマルチ タイマーです。 マルチ タイマーは、プロセッサやディスクなどのコンポーネントの 1 つ以上のインスタンスを監視します。 逆カウンターは、コンポーネントがアクティブでない時間を測定し、アクティブな時間をこの計測値から派生します。  
  
 このカウンターとは異なります `CounterMultiTimer100NsInverse` 点で、時間を 100 ナノ秒単位ではなく、システム パフォーマンス タイマーのタイマー刻み単位で計測します。  
  
 数式: \(B \- \(\(N 1 \-N 0\)\/\(D 1 \-D 0\)\)\) x 100、分母は、サンプリング間隔の経過時間の合計を表しますが、分子が表す時間監視対象のコンポーネントが、アクティブでなかった、B は、コンポーネントの数を表す場合、間隔中に、監視されている型の基本カウンターを使用して `CounterMultiBase`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CounterTimer">
      <MemberSignature Language="C#" Value="CounterTimer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType CounterTimer = int32(541132032)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.CounterTimer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンポーネントが、合計のサンプリング時間の割合としてアクティブになっている時間の平均を示すパーセント カウンター。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: \(N 1 \-N 0\)\/\(D 1 \-D 0\) ここで、N 1 および N 0 はパフォーマンス カウンターの値、および D 1 と D 0 が計算されます。 したがって、分子では、サンプリング間隔を監視対象のコンポーネントがアクティブにし、分母は、サンプリング間隔の経過時間の合計を表しますの部分を表します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CounterTimerInverse">
      <MemberSignature Language="C#" Value="CounterTimerInverse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType CounterTimerInverse = int32(557909248)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.CounterTimerInverse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サンプリング間隔中にアクティブな時間の割合の平均値を表示するパーセンテージ カウンター。 これらのカウンターの値は、サービスがアクティブでなかった時間の割合を監視し、その値を 100% から引いて計算されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、逆カウンター タイプです。 逆カウンター メジャー コンポーネントは、時間は、作業中に注意してくださいし、アクティブな時間をこの計測値から派生します。 このカウンターの型と同じが `CounterTimer100NsInv` 100 ナノ秒単位ではなく、システム パフォーマンス タイマーのタイマー刻み単位での時間を測定する点が異なります。  
  
 数式: \(1 \- \(\(N 1 \-N 0\)\/\(D 1 \-D 0\)\)\) x 100 が分子を表す時間間隔中に監視対象のコンポーネントがアクティブでなかったし、分母は、サンプリング間隔の経過時間の合計を表します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountPerTimeInterval32">
      <MemberSignature Language="C#" Value="CountPerTimeInterval32" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType CountPerTimeInterval32 = int32(4523008)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>時間の経過と共にリソースに対するキューの長さの平均を監視するため、平均カウンターです。 間隔の時間で割った値、最後の 2 つのサンプリング間隔中に監視されたキューの長さの違いを示しています。 このカウンターの種類は通常、キューに登録された項目または待機の数を追跡するために使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: \(N 1 \-N 0\)\/\(D 1 \-D 0\)、分子が分母を表す、最後のサンプリング間隔中の経過時間、キュー内の項目の数を表します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountPerTimeInterval64">
      <MemberSignature Language="C#" Value="CountPerTimeInterval64" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType CountPerTimeInterval64 = int32(4523264)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>時間の経過と共にリソースに対するキューの長さの平均を監視する平均カウンターです。 この種類のカウンターは、間隔の時間で割った値、最後の 2 つのサンプリング間隔中に監視されたキューの長さの差を表示します。 このカウンターの型と同じが <see langword="CountPerTimeInterval32" /> より大きな値に対応する大きなフィールドを使用する点が異なります。 このカウンターの種類は、通常は、キュー内のアイテムまたは待機中の量の多い、非常に大きな数を追跡するために使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: \(N 1 \-N 0\)\/\(D 1 \-D 0\)、分子がキューおよび、サンプリング時間の経過時間分母を表す内の項目数を表します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElapsedTime">
      <MemberSignature Language="C#" Value="ElapsedTime" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType ElapsedTime = int32(807666944)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.ElapsedTime" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンポーネントまたはプロセスが開始されたときと、この値が計算された時刻までの合計時間を示す差タイマーです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: \(D 0 \-N 0\)\/F、ここで D 0 N、現在の時刻を表す 0 F およびオブジェクトが開始した時刻を表しますが 1 秒間に経過する時間単位の数を表します。 F の値が計算で考慮されるため、結果は秒単位で表示できます。  
  
 この種類のカウンターには、システム \\ System Up Time が含まれます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfItems32">
      <MemberSignature Language="C#" Value="NumberOfItems32" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType NumberOfItems32 = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最後に計測された値を示す瞬間的なカウンター。 使用、たとえば、項目または操作の単純なカウントを維持するためにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: なし。 平均は表示されませんが、収集された生データが表示されます。  
  
 この種類のカウンターには、memory \\available Bytes が含まれます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfItems64">
      <MemberSignature Language="C#" Value="NumberOfItems64" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType NumberOfItems64 = int32(65792)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.NumberOfItems64" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最後に計測された値を示す瞬間的なカウンター。 使用、たとえば、大量の項目または操作の数の単純なカウントを維持するためにします。 同じである <see langword="NumberOfItems32" /> より大きな値に対応する大きなフィールドを使用する点が異なります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: なし。 平均は表示されませんが、収集された生データが表示されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfItemsHEX32">
      <MemberSignature Language="C#" Value="NumberOfItemsHEX32" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType NumberOfItemsHEX32 = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>16 進形式で、最後に計測された値を示す瞬時カウンター。 使用、たとえば、項目または操作の単純なカウントを維持するためにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: なし。 平均は表示されませんが、収集された生データが表示されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfItemsHEX64">
      <MemberSignature Language="C#" Value="NumberOfItemsHEX64" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType NumberOfItemsHEX64 = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最後に計測された値を示す瞬間的なカウンター。 使用、たとえば、大量の項目または操作の数の単純なカウントを維持するためにします。 同じである <see langword="NumberOfItemsHEX32" /> より大きな値に対応する大きなフィールドを使用する点が異なります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: なし。 平均は表示されませんが、収集された生データが表示されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RateOfCountsPerSecond32">
      <MemberSignature Language="C#" Value="RateOfCountsPerSecond32" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType RateOfCountsPerSecond32 = int32(272696320)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サンプリング間隔の 1 秒あたりの中に完了した操作の平均数を示す差カウンター。 このタイプのカウンターは、システム クロックのタイマー刻み単位で時間を測定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: \(N 1 \-N 0\)\/\(\(D 1 \-d 0\)\/F\) ここで、N 1 および N 0 パフォーマンス カウンタの測定値、D は 1 と D 0 、対応する時間の測定値は、F は、1 秒あたりのタイマー刻みの数を表します。 したがって、分子が分母を表すタイマー刻みの数が、前回のサンプリング間隔中に経過した前回のサンプル間隔中に実行された操作の数を表し、F はタイマー刻みの頻度。 F の値が計算で考慮されるため、結果は秒単位で表示できます。  
  
 この種類のカウンターには、システム ファイルの読み取り操作数\/秒が含まれます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RateOfCountsPerSecond64">
      <MemberSignature Language="C#" Value="RateOfCountsPerSecond64" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType RateOfCountsPerSecond64 = int32(272696576)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サンプリング間隔の 1 秒あたりの中に完了した操作の平均数を示す差カウンター。 このタイプのカウンターは、システム クロックのタイマー刻み単位で時間を測定します。 このカウンターの型と同じが、 <see langword="RateOfCountsPerSecond32" /> 型ではなく、項目またはバイト転送速度などの 1 秒あたりの操作の量の多い数を追跡するためより大きな値に対応する大きなフィールドを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: \(N 1 \-N 0\)\/\(\(D 1 \-d 0\)\/F\) ここで、N 1 および N 0 パフォーマンス カウンタの測定値、D は 1 と D 0 、対応する時間の測定値は、F は、1 秒あたりのタイマー刻みの数を表します。 したがって、分子が分母を表すタイマー刻みの数が、前回のサンプリング間隔中に経過した前回のサンプル間隔中に実行された操作の数を表し、F はタイマー刻みの頻度。 F の値が計算で考慮されるため、結果は秒単位で表示できます。  
  
 この種類のカウンターには、システム ファイルの読み取りバイト数\/秒が含まれます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RawBase">
      <MemberSignature Language="C#" Value="RawBase" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType RawBase = int32(1073939459)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.RawBase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通常の算術分数を表すカウンターの分母を格納するベース カウンターです。 この値がの分母として使用する前に 0 より大きいことを確認して、 <see langword="RawFraction" /> 値の計算です。</summary>
      </Docs>
    </Member>
    <Member MemberName="RawFraction">
      <MemberSignature Language="C#" Value="RawFraction" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType RawFraction = int32(537003008)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.RawFraction" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>それをパーセンテージにサブセットの比率を示す即時パーセント カウンター。 たとえば、ディスク上のバイトの総数へのディスク上の使用中バイト数を比較します。 この種類のカウンターは、現在の割合のみ、時間の経過と共に平均ではなくを表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: \(N 0 \/D 0\) x 100、ここで D 0 測定された属性を表します \(型の基本カウンターを使用して `RawBase`\) および N 0 その属性の 1 つのコンポーネントを表します。  
  
 この種類のカウンターには、ページング File\\% %usage Peak が含まれます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SampleBase">
      <MemberSignature Language="C#" Value="SampleBase" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType SampleBase = int32(1073939457)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.SampleBase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サンプリングの数を格納するベース カウンターでは、実行を中断し、サンプリング分数の分母として使用します。 サンプリング比率が 1 のサンプル数 \(または <see langword="true" />\) サンプル割り込み用です。 この値がの計算の分母として使用する前に 0 より大きいことを確認 <see langword="SampleFraction" />します。</summary>
      </Docs>
    </Member>
    <Member MemberName="SampleCounter">
      <MemberSignature Language="C#" Value="SampleCounter" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType SampleCounter = int32(4260864)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.SampleCounter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>1 秒間に完了した操作の数の平均値を示す平均カウンター。 このタイプのカウンターのデータをサンプリングし、1 つまたは 0 を返します。 各サンプリングを中断します。 カウンター データは、サンプリングされたの数です。 これは、システム パフォーマンス タイマーのタイマー刻み単位で時間を計測します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: \(N 1 – N 0\)\/\(\(D 1 – D 0\)\/F\)、分子 \(N\) は、完了した操作の数を表す、分母 \(D\) は、システム パフォーマンス タイマーのタイマー刻み単位での経過時間を表す、F は、1 秒間に経過するタイマー刻みの数を表します。 F が数式で考慮されるため、結果は秒単位で表示できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SampleFraction">
      <MemberSignature Language="C#" Value="SampleFraction" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType SampleFraction = int32(549585920)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.SampleFraction" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最後の 2 つのサンプリング間隔中にすべての操作へのヒット数の平均の比率を示す割合カウンター。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: \(\(N 1 \-N 0\)\/\(D 1 \-D 0\)\) x 100、分子は最後のサンプリング間隔中に正常に操作の数を表す、分母を表す型のカウンターを使用して、サンプリング間隔中に完了した型の測定\) のすべての操作の数の変動 `SampleBase`します。  
  
 この種類のカウンターには、Cache\\Pin 読み取り Hits % が含まれます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timer100Ns">
      <MemberSignature Language="C#" Value="Timer100Ns" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType Timer100Ns = int32(542180608)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.Timer100Ns" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サンプリング間隔の経過時間の合計に対する割合で、コンポーネントのアクティブな時間を示すパーセント カウンターです。 時間を 100 ナノ秒 \(ns\) の単位で測定しています。 このタイプのカウンターは、一度に 1 つのコンポーネントの利用状況を測定するよう設計されています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 数式: \(N 1 \-N 0\)\/\(D 1 \-D 0\) x 100、分子を監視対象のコンポーネントがアクティブで、サンプリング間隔の一部を表し、分母は、サンプリング間隔の経過時間の合計を表します。  
  
 この種類のカウンターには、プロセッサの % User Time が含まれます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timer100NsInverse">
      <MemberSignature Language="C#" Value="Timer100NsInverse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Diagnostics.PerformanceCounterType Timer100NsInverse = int32(558957824)" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.PerformanceCounterType.Timer100NsInverse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.PerformanceCounter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceCounterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サンプリング間隔中にアクティブな時間の割合の平均値を示すパーセント カウンターです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、逆のカウンターです。 このタイプのカウンターは、サービスがアクティブでなかった時間を測定し、100% からのアクティブな時間の割合を引いて、アクティブな時間を計算します。  
  
 数式: \(1 \- \(\(N 1 \-N 0\)\/\(D 1 \-D 0\)\)\) x 100 が分子を表す時間間隔中に監視対象のコンポーネントがアクティブでなかったし、分母は、サンプリング間隔の経過時間の合計を表します。  
  
 この種類のカウンターには、プロセッサの % Processor Time が含まれます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>