<Type Name="EventLogEntry" FullName="System.Diagnostics.EventLogEntry">
  <TypeSignature Language="C#" Value="public sealed class EventLogEntry : System.ComponentModel.Component, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EventLogEntry extends System.ComponentModel.Component implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogEntry" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>イベント ログの単一レコードをカプセル化します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 You usually will not create instances of <xref:System.Diagnostics.EventLogEntry> directly when working with the <xref:System.Diagnostics.EventLog> class. The <xref:System.Diagnostics.EventLog.Entries%2A> member of the <xref:System.Diagnostics.EventLog> class contains a collection of <xref:System.Diagnostics.EventLogEntry> instances, which you iterate over when reading by using the <xref:System.Diagnostics.EventLogEntryCollection.Item%2A?displayProperty=fullName> class index member.  
  
> [!IMPORTANT]
>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a **languageKeyword tag is not supported!!!!**  
> \/**languageKeyword tag is not supported!!!!**  
>  block. To dispose of it indirectly, use a language construct such as **languageKeyword tag is not supported!!!!**  
>  \(in C\#\) or **languageKeyword tag is not supported!!!!**  
>  \(in Visual Basic\). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  
  
   
  
## 例  
 The following code example demonstrates the use of the <xref:System.Diagnostics.EventLogEntry> class. In this example, a **languageKeyword tag is not supported!!!!**  
 statement uses console input to search for event log entries for the specified event type.  If a match is found, log entry source information is displayed at the console.  
  
 [!code-cpp[EventLogEntry\_Source\#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Source/CPP/eventlogentry_source.cpp#1)]
 [!code-csharp[EventLogEntry\_Source\#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Source/CS/eventlogentry_source.cs#1)]
 [!code-vb[EventLogEntry\_Source\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Source/VB/eventlogentry_source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogEntryCollection" />
    <altmember cref="T:System.Diagnostics.EventInstance" />
  </Docs>
  <Members>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public string Category { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Category" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Category" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The category of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このエントリの <see cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" /> プロパティに関連付けられているテキストを取得します。</summary>
        <value>アプリケーション固有のカテゴリ テキスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各アプリケーション \(イベント ソース\) には、独自の番号付けされたカテゴリとそれらがマップされているテキスト文字列を定義できます。 イベント ビューアーでは、ログにイベントをフィルター処理するカテゴリを使用できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">カテゴリに関連付けられている挿入文字列のいずれかの領域を割り当てる。</exception>
        <altmember cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
      </Docs>
    </Member>
    <Member MemberName="CategoryNumber">
      <MemberSignature Language="C#" Value="public short CategoryNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 CategoryNumber" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("An ID for the category of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベント ログ エントリのカテゴリ番号を取得します。</summary>
        <value>このエントリのアプリケーション固有のカテゴリ番号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Each application \(event source\) can define its own numbered categories and the text strings to which they are mapped. The Event Viewer can use the category to filter events in the log. The categories must be numbered consecutively beginning with the number 1. The category number is specified by the <xref:System.Diagnostics.EventInstance.CategoryId%2A?displayProperty=fullName> property. The Event Viewer can display the category as a numeric value, or it can use the category as a resource identifier to display a localized category string. For more information, see <xref:System.Diagnostics.EventInstance>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.EntryType" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.Category" />
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public byte[] Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Data" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Binary data associated with this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エントリに関連付けられているバイナリ データを取得します。</summary>
        <value>エントリに関連付けられているバイナリ データを保持するバイト配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Getting this property creates an array that holds a copy of the entry's event\-specific binary data, which the Event Viewer displays in combined hexadecimal and text format. Event\-specific data is sometimes used to store information that the application will process independently of the Event Viewer, for example, to make reports from the log file.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryType EntryType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.EventLogEntryType EntryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.EntryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The type of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エントリのイベントの種類を取得します。</summary>
        <value>イベント ログ内のエントリに関連付けられているイベントの種類。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 All event types have well\-defined common data and can optionally include event\-specific data. Each event is of a single type, which the application indicates when it reports the event. The Event Viewer uses the event type to determine which icon to display in the list view of the event log.  
  
   
  
## 例  
 The following code example demonstrates the use of the <xref:System.Diagnostics.EventLogEntry.EntryType%2A> property. In this example, a **languageKeyword tag is not supported!!!!**  
 statement uses console input to search for event log entries for the specified <xref:System.Diagnostics.EventLogEntry.EntryType%2A>.  If a match is found, log entry source information is displayed at the console.  
  
 [!code-cpp[EventLogEntry\_Source\#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Source/CPP/eventlogentry_source.cpp#1)]
 [!code-csharp[EventLogEntry\_Source\#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Source/CS/eventlogentry_source.cs#1)]
 [!code-vb[EventLogEntry\_Source\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Source/VB/eventlogentry_source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventInstance.EntryType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Diagnostics.EventLogEntry otherEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(class System.Diagnostics.EventLogEntry otherEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherEntry" Type="System.Diagnostics.EventLogEntry" />
      </Parameters>
      <Docs>
        <param name="otherEntry">比較対象の <see cref="T:System.Diagnostics.EventLogEntry" />。</param>
        <summary>2 つのイベント ログ エントリを比較します。</summary>
        <returns>
          <see cref="T:System.Diagnostics.EventLogEntry" /> オブジェクトが同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method performs a byte\-by\-byte comparison between the two objects. It does not determine whether the two <xref:System.Diagnostics.EventLogEntry> instances refer to the same object.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventID">
      <MemberSignature Language="C#" Value="public int EventID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EventID" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.EventID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("An ID number for this event entry.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use InstanceId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のイベント エントリのアプリケーション固有のイベント識別子を取得します。</summary>
        <value>イベント メッセージの、アプリケーション固有の識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This value represents the event identifier for the entry in the event log, with the top two bits masked off. The <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> property for an event log entry represents the full 32\-bit resource identifier for the event in the message resource file for the event source. Two event log entries from the same source can have matching <xref:System.Diagnostics.EventLogEntry.EventID%2A> values, but have different <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> values due to differences in the top two bits of the event identifier.  
  
 If the application wrote the event entry using one of the <xref:System.Diagnostics.EventLog.WriteEntry%2A> methods, the <xref:System.Diagnostics.EventLogEntry.EventID%2A> property matches the optional **parameterReference tag is not supported!!!!**  
 parameter. If the application wrote the event using <xref:System.Diagnostics.EventLog.WriteEvent%2A> or the Win32 API **languageKeyword tag is not supported!!!!**  
, the <xref:System.Diagnostics.EventLogEntry.EventID%2A> property matches the resource identifier for the event, with the top two bits masked off.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.InstanceId" />
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Sequence numer of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベント ログでのこのエントリのインデックスを取得します。</summary>
        <value>イベント ログでのこのエントリのインデックス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この番号は 0 から始まる必ずしもではありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public long InstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The instance ID for this event entry.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベント エントリのメッセージ テキストを指定するリソース識別子を取得します。</summary>
        <value>イベント ソースのメッセージ リソース ファイルの文字列定義に対応するリソース識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> プロパティは、構成されたイベント ソースのイベントのエントリを一意に識別します。<xref:System.Diagnostics.EventLogEntry.InstanceId%2A> イベント ログのエントリがイベント ソースのメッセージ リソース ファイル内のイベントの完全な 32 ビット リソース識別子を表します。<xref:System.Diagnostics.EventLogEntry.EventID%2A> プロパティ \=、 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> 上の 2 ビット マスク オフに指定します。 同じソースからの 2 つのイベント ログ エントリの一致することができますが <xref:System.Diagnostics.EventLogEntry.EventID%2A> の値は、異なるが <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> リソース識別子の先頭の 2 ビットの違いにより値。  
  
 アプリケーションでのいずれかを使用してイベントのエントリが書き込まれたかどうか、 <xref:System.Diagnostics.EventLog.WriteEntry%2A> メソッド、 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> プロパティに一致する、省略可能な `eventId` パラメーター。 場合は、アプリケーションでは、イベントを使用して、書き込まれた <xref:System.Diagnostics.EventLog.WriteEvent%2A>, 、 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> プロパティで指定されたリソースの識別子に一致する、 <xref:System.Diagnostics.EventInstance.InstanceId%2A> の `instance` パラメーター。 Win32 API を使用して、イベントが、アプリケーションに書き込まれたかどうか `ReportEvent`, 、 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A> プロパティで指定されたリソースの識別子に一致する、 `dwEventID` パラメーター。  
  
 イベント メッセージの定義とリソースのイベント ログ ファイルを作成する詳細については、プラットフォーム SDK のドキュメントで「メッセージ コンパイラ」トピックを参照してください [http:\/\/msdn.microsoft.com](http://msdn.microsoft.com/)します。 詳細については、イベント ログの識別子は、プラットフォーム SDK の「イベント Identifiers」のトピックを参照してください。  
  
   
  
## 例  
 次のコード例では、特定のリソース識別子を持つエントリをイベント ログを検索します。 コード例では、各一致するエントリのイベント メッセージが表示され、ログに一致するエントリの合計数をカウントします。 各エントリのメッセージ テキスト場合と同じである可能性がありますできません。各イベント メッセージは、イベント ソースのメッセージ ファイル、挿入文字列、およびそれに書き込まれたときに使用されるパラメーターに依存します。  
  
 [!code-cpp[EventLog\_WriteEvent\#10](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#10)]
 [!code-csharp[EventLog\_WriteEvent\#10](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#10)]
 [!code-vb[EventLog\_WriteEvent\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The Computer on which this event entry occured.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エントリを生成したコンピューターの名前を取得します。</summary>
        <value>イベント ログを格納しているコンピューターの名前。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The message of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベント エントリに関連付けられているローカライズ済みのメッセージを取得します。</summary>
        <value>メッセージ用の書式設定されローカライズされたテキスト。 これには関連付けられた置換文字列が含まれます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを取得するには、ローカライズされたテキストを含む .dll ファイルのファイル名を特定のレジストリが開きます。 ソース コードをテストするときにレジストリ エラーが発生した場合は、.dll ファイルがコンピューターに存在することを確認します。 挿入文字列がメッセージに含まれている場合は、それらの割り当てにおけるエラーをキャッチします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">メッセージに関連付けられている挿入文字列のいずれかの領域を割り当てる。</exception>
        <altmember cref="T:System.Diagnostics.EventInstance" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="ReplacementStrings">
      <MemberSignature Language="C#" Value="public string[] ReplacementStrings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ReplacementStrings" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.ReplacementStrings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Application strings for this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベント ログ エントリに関連付けられている置換文字列を取得します。</summary>
        <value>イベント エントリに格納されている置換文字列を保持する配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、エントリの置換文字列のみを取得します。 完全なメッセージを取得するを参照してください、 <xref:System.Diagnostics.EventLogEntry.Message%2A> プロパティです。  
  
 <xref:System.Diagnostics.EventLogEntry.ReplacementStrings%2A> プロパティには、イベント ログ エントリで使用されている置換文字列のローカライズされたバージョンが含まれています。 アプリケーションの場合は、各対象言語で文字列を含むリソース ファイルを指定する場合は、そのコンピューターで使用される言語でのイベント ログ メッセージを生成できます。 インスタンスを作成するには、 <xref:System.Resources.ResourceManager> を置換文字列を含むリソース アセンブリのクラスです。 最初のパラメーター、 <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> コンス トラクターを使用するリソース アセンブリを識別します。 使用して、 <xref:System.Resources.ResourceManager.GetString%2A> ローカライズしたメッセージのログ イベントを指定するには、そのインスタンスのメソッドです。 次のコードは、現在のカルチャの言語を自動的にメッセージを設定します。  
  
```  
ResourceManager LocRM = new ResourceManager("ReplacementStrings.TestStrings",   
      typeof(Program).Assembly);  
EventLog e1 = new EventLog("LocTest", "MyMachine", "LocTest");  
// Get the string associated with the current culture.  
e1.WriteEntry(LocRM.GetString("strMessage"),  
   EventLogEntryType.Information);  
```  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.Message" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The source application of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このイベントを発生させたアプリケーションの名前を取得します。</summary>
        <value>このイベントのソースとしてイベント ログに登録される名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント ソースは、イベント ログに記録内容を示します。 アプリケーションが大きい場合は、多くの場合、アプリケーションの名前またはアプリケーションのサブコンポーネントの名前です。 アプリケーションとサービスへの書き込み通常 \(とは\)、アプリケーション ログまたはカスタム ログです。 デバイス ドライバーは、通常、システム ログに書き込みます。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Diagnostics.EventLogEntry.Source%2A> プロパティです。 この例では、 `switch` ステートメントでは、コンソールが入力を使用して、指定されたイベント ログ エントリの検索 <xref:System.Diagnostics.EventLogEntry.EntryType%2A>します。  一致が見つかった場合、 <xref:System.Diagnostics.EventLogEntry.Source%2A> プロパティの情報がコンソールに表示されます。  
  
 [!code-cpp[EventLogEntry\_Source\#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Source/CPP/eventlogentry_source.cpp#1)]
 [!code-csharp[EventLogEntry\_Source\#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Source/CS/eventlogentry_source.cs#1)]
 [!code-vb[EventLogEntry\_Source\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Source/VB/eventlogentry_source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Needs serialization support")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">このシリアル化のシリアル化先 \(<see cref="T:System.Runtime.Serialization.StreamingContext" /> を参照\)。</param>
        <summary>
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、オブジェクトをシリアル化するために必要なデータを設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeGenerated">
      <MemberSignature Language="C#" Value="public DateTime TimeGenerated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime TimeGenerated" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.TimeGenerated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Generation time of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このイベントが生成された現地時間を取得します。</summary>
        <value>このイベントが生成された現地時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、イベントが生成された時刻を保持します。 これは、できないときに、イベント情報がイベント ログに書き込まれるときと同じです。 後者については、読み取り、 <xref:System.Diagnostics.EventLogEntry.TimeWritten%2A> プロパティです。  
  
 通常は、イベントが生成される時間とログに記録されます時刻間に時間差があります。 ログ記録で大幅な時間差があるかどうかをしない場合、イベントが生成されたを知る重要になっています。 ログ ファイルが別のサーバー上にあり、ボトルネックが発生している場合に発生することができます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.TimeWritten" />
      </Docs>
    </Member>
    <Member MemberName="TimeWritten">
      <MemberSignature Language="C#" Value="public DateTime TimeWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime TimeWritten" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.TimeWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The time at which this event entry was written to the logfile.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このイベントがログに書き込まれた現地時間を取得します。</summary>
        <value>このイベントがログに書き込まれた現地時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、イベントの情報をイベント ログに書き込まれた時間を保持します。 イベントが生成されたと同時にはできません。 後者については、読み取り、 <xref:System.Diagnostics.EventLogEntry.TimeGenerated%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.TimeGenerated" />
      </Docs>
    </Member>
    <Member MemberName="UserName">
      <MemberSignature Language="C#" Value="public string UserName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.UserName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The name of a user associated with this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このイベントを発生させたユーザーの名前を取得します。</summary>
        <value>ユーザーまたはグループを一意に識別するセキュリティ識別子 \(SID: Security Identifier\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、イベント ログ、セキュリティ ログ以外の場合は空白では多くの場合です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">ユーザーの SID のアカウント情報を取得できませんでした。</exception>
        <altmember cref="P:System.Diagnostics.EventLogEntry.Source" />
      </Docs>
    </Member>
  </Members>
</Type>