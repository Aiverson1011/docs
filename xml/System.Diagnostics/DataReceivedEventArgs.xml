<Type Name="DataReceivedEventArgs" FullName="System.Diagnostics.DataReceivedEventArgs">
  <TypeSignature Language="C#" Value="public class DataReceivedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataReceivedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> イベントおよび <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 To asynchronously collect the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> or <xref:System.Diagnostics.Process.StandardError%2A> stream output of a process, you must create a method that handles the redirected stream output events. The event\-handler method is called when the process writes to the redirected stream. The event delegate calls your event handler with an instance of <xref:System.Diagnostics.DataReceivedEventArgs>. The <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> property contains the text line that the process wrote to the redirected stream.  
  
   
  
## 例  
 The following code example illustrates how to perform asynchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream of the **languageKeyword tag is not supported!!!!**  
 command. The **languageKeyword tag is not supported!!!!**  
 command is a console application that reads and sorts text input.  
  
 The example creates an event delegate for the `SortOutputHandler` event handler and associates it with the <xref:System.Diagnostics.Process.OutputDataReceived> event. The event handler receives text lines from the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, formats the text, and writes the text to the screen.  
  
 [!code-cpp[Process\_AsyncStreams\#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process\_AsyncStreams\#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process\_AsyncStreams\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
  <Members>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public string Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DataReceivedEventArgs.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>書き込まれた文字の行を取得する、リダイレクトされた <see cref="T:System.Diagnostics.Process" /> 出力ストリーム。</summary>
        <value>書き込まれた行が関連付けられている <see cref="T:System.Diagnostics.Process" /> に、リダイレクトされた <see cref="P:System.Diagnostics.Process.StandardOutput" /> または <see cref="P:System.Diagnostics.Process.StandardError" /> ストリームします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リダイレクトする、 <xref:System.Diagnostics.Process.StandardOutput%2A> または <xref:System.Diagnostics.Process.StandardError%2A> のストリーム、 <xref:System.Diagnostics.Process> イベント ハンドラーにイベントが、プロセスは、リダイレクトされたストリームに行を書き込むたびに発生します。<xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> プロパティは、行を <xref:System.Diagnostics.Process> リダイレクトされた出力ストリームに記述します。 イベント ハンドラーを使用して、 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> プロパティをプロセスの出力をフィルター処理したり、別の場所に出力を書き込みます。 など指定されたエラー ログ ファイルにすべてのエラー出力行を格納するイベント ハンドラーを作成する可能性があります。  
  
 行は、改行 \("\\n"\) で指定されている文字のシーケンスや、キャリッジ リターンとライン フィード \("\\r\\n"\) として定義されます。 改行文字は、システムの既定の ANSI コード ページを使用してエンコードされます。<xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> プロパティが、終端のキャリッジ リターンを含める、改行していません。  
  
 リダイレクトされたストリームが閉じている場合、null の行は、イベント ハンドラーに送信されます。 イベント ハンドラーのチェックをことを確認、 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> アプリケーションにアクセスする前に適切なプロパティです。 たとえば、静的メソッドを使用することができます <xref:System.String.IsNullOrEmpty%2A?displayProperty=fullName> を検証する、 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> イベント ハンドラーのプロパティです。  
  
   
  
## 例  
 次のコード例に関連付けられている単純なイベント ハンドラーを示しています、 <xref:System.Diagnostics.Process.OutputDataReceived> イベントです。 イベント ハンドラーは、テキストの行からリダイレクトされた <xref:System.Diagnostics.Process.StandardOutput%2A> 、ストリームは、テキストを書式化して、画面にテキストを書き込みます。  
  
 [!code-cpp[Process\_AsyncStreams\#4](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/datareceivedevent.cpp#4)]
 [!code-csharp[Process\_AsyncStreams\#4](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/datareceivedevent.cs#4)]
 [!code-vb[Process\_AsyncStreams\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/datareceivedevent.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>