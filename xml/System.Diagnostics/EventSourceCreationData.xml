<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ローカル コンピューターまたはリモート コンピューター上のイベント ログ ソースの作成に使用する構成設定を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Diagnostics.EventSourceCreationData> ローカライズされたエントリをイベント ログに書き込むための新しいソースを構成するクラス。 イベント ログから読み取りにこのクラスを使用する必要はありません。  
  
 このクラスは、新しいイベント ソースおよびその関連のイベント ログの構成設定を定義します。 関連付けられているイベント ログは、ローカル コンピューターまたはリモート コンピューターに配置できます。 ローカル コンピューター上には、新規または既存のイベント ログの新しいソースを作成するには、設定、 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> と <xref:System.Diagnostics.EventSourceCreationData.Source%2A> のプロパティ、 <xref:System.Diagnostics.EventSourceCreationData> を呼び出すと、 <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> メソッドです。 このメソッドで指定したイベント ソースの作成、 <xref:System.Diagnostics.EventSourceCreationData.Source%2A> で指定されたイベント ログのプロパティとレジスタ <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>します。 この動作を使用するような <xref:System.Diagnostics.EventLogInstaller> をイベント ログのイベント ソースを登録します。  
  
 使用して、 <xref:System.Diagnostics.EventLog.WriteEvent%2A> と <xref:System.Diagnostics.EventLog.WriteEntry%2A> イベントをイベント ログに書き込む方法です。 イベントを書き込むイベント ソースを指定する必要があります。作成および、ソースとの最初のエントリを書き込む前にイベント ソースを構成する必要があります。  
  
 アプリケーションのインストール中に新しいイベント ソースを作成します。 これにより、オペレーティング システムの構成と登録されたイベント ソースの一覧を更新するためのタイミングです。 オペレーティング システムがイベント ソースの一覧を更新するいないと書き込もうとした新しいソースを持つイベントの書き込み操作は失敗します。 使用して新しいソースを構成することができます、 <xref:System.Diagnostics.EventLogInstaller>, 、またはを使用して、 <xref:System.Diagnostics.EventLog.CreateEventSource%2A> メソッドです。 新しいイベント ソースを作成するコンピューターで管理者権限が必要です。  
  
 既存のイベント ログまたは新しいイベント ログのイベント ソースを作成することができます。 新しいイベント ログの新しいソースを作成するときにそのログのソースが登録されますが、最初のエントリが書き込まれるまで、ログは作成されません。  
  
 同時に、各ソースは 1 つのイベント ログに書き込むだけことができます。ただし、アプリケーションでは、複数のソースを使用して、複数のイベント ログに書き込みます。 たとえば、アプリケーションでは、別のイベント ログまたは別のリソース ファイル用に構成された複数のソースを必要があります。  
  
 既存のソースの構成の詳細を変更するには、ソースを削除してから、新しい構成を使用して作成します。 他のアプリケーションやコンポーネントは、既存のソースを使用して、既存のソースを削除するのではなく、更新された構成で新しいソースを作成します。  
  
 イベント カテゴリおよびメッセージ文字列のローカライズされたリソースをイベント ソースを登録できます。 アプリケーションでは、実際の文字列を指定するのではなく、リソース識別子を使用してイベント ログ エントリを書き込むことができます。 イベント ビューアーでは、リソース識別子を使用して、検索し、現在の言語設定に基づくローカライズされたリソース ファイルから対応する文字列を表示します。 イベントのカテゴリ、メッセージ、およびパラメーターの挿入文字列の個別のファイルを登録するまたはすべての 3 種類の文字列に同じリソース ファイルを登録することができます。 使用して、 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, 、<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, 、<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, 、および <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> ローカライズされたエントリをイベント ログに書き込むにソースを構成するプロパティです。 アプリケーションがイベント ログに直接文字列の値を書き込む場合は、これらのプロパティを設定する必要はありません。  
  
 ローカライズされたエントリを書き込むか、または直接の文字列を作成するため、ソースを構成する必要があります。<xref:System.Diagnostics.EventLog.WriteEntry%2A> メソッドは、イベント ログを直接指定した文字列を書き込む場合、ローカライズ可能なメッセージ リソース ファイルは使用されません。 使用して、 <xref:System.Diagnostics.EventLog.WriteEvent%2A> にローカライズされたメッセージ リソース ファイルを使用してイベントを書き込みます。  
  
 アプリケーションがリソース識別子と文字列の値の両方を使用してエントリを書き込む場合は、2 つの異なるソースを登録する必要があります。 たとえば、リソース ファイルを 1 つのソースを構成しでそのソースを使用して、 <xref:System.Diagnostics.EventLog.WriteEvent%2A> リソース id、イベント ログを使用してエントリを書き込みます。 リソース ファイルがない場合、別のソースを作成しでそのソースを使用して、 <xref:System.Diagnostics.EventLog.WriteEntry%2A> そのソースを使用して、イベント ログに直接文字列を書き込みます。  
  
   
  
## 例  
 次のコード例では、コマンドライン引数から、イベント ソースの構成プロパティを設定します。 入力引数は、イベント ソース名、イベント ログ名、コンピューター名、およびイベント メッセージ リソース ファイルを指定します。 コード例は、ソース既存のイベント ソースと競合しないことを検証して指定されたイベント ログの新しいイベント ソースを作成します。  
  
 [!code-cpp[EventLog\_EventSourceCreation\_Properties\#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog\_EventSourceCreation\_Properties\#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog\_EventSourceCreation\_Properties\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">for calling any member of <see cref="T:System.Diagnostics.EventSourceCreationData" /> with full trust. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">イベント ログ エントリのソースとして登録する名前です。</param>
        <param name="logName">ソースのエントリが書き込まれるログの名前。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Diagnostics.EventSourceCreationData" /> クラスを指定したイベント ソースおよびイベント ログ名を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 エントリをイベント ログに書き込むには、まず、イベント ログのイベント ソースを作成する必要があります。 新しいソースを登録するには、初期化、 <xref:System.Diagnostics.EventSourceCreationData> インスタンスで、アプリケーション、および呼び出しのインスタンスのプロパティを構成、 <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> メソッドです。 使用してソースからエントリを書き込むことができます、ソースが登録されると、 <xref:System.Diagnostics.EventLog.WriteEvent%2A> または <xref:System.Diagnostics.EventLog.WriteEntry%2A> メソッドです。  
  
 イベント カテゴリおよびメッセージ文字列のローカライズされたリソースをイベント ソースを登録できます。 アプリケーションでは、実際の文字列を指定するのではなく、リソース識別子を使用してイベント ログ エントリを書き込むことができます。 イベント ビューアーでは、リソース識別子を使用して、検索し、現在の言語設定に基づくローカライズされたリソース ファイルから対応する文字列を表示します。 イベントのカテゴリ、メッセージ、およびパラメーターの挿入文字列の個別のファイルを登録するまたはすべての 3 種類の文字列に同じリソース ファイルを登録することができます。 使用して、 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, 、<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, 、<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, 、および <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> ローカライズされたエントリをイベント ログに書き込むにソースを構成するプロパティです。 アプリケーションがイベント ログに直接文字列の値を書き込む場合は、これらのプロパティを設定する必要はありません。  
  
 ローカライズされたエントリを書き込むか、または直接の文字列を作成するため、ソースを構成する必要があります。 アプリケーションがリソース識別子と文字列の値の両方を使用してエントリを書き込む場合は、2 つの異なるソースを登録する必要があります。 たとえば、リソース ファイルを 1 つのソースを構成しでそのソースを使用して、 <xref:System.Diagnostics.EventLog.WriteEvent%2A> リソース id、イベント ログを使用してエントリを書き込みます。 リソース ファイルがない場合、別のソースを作成しでそのソースを使用して、 <xref:System.Diagnostics.EventLog.WriteEntry%2A> イベント ログに直接文字列を書き込みます。  
  
 次の表の初期プロパティ値、 <xref:System.Diagnostics.EventSourceCreationData>です。  
  
|プロパティ|初期値|  
|-----------|---------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|`source` パラメーター。|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|`logName` パラメーター。|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|ローカル コンピューター \("です。"\) です。|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|0|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|`null` \(Visual Basic の場合は `Nothing`\)。|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|`null` \(Visual Basic の場合は `Nothing`\)。|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|`null` \(Visual Basic の場合は `Nothing`\)。|  
  
   
  
## 例  
 次のコード例では、イベント ソースが名前付きかどうかを判断 `SampleApplicationSource` をローカル コンピューターに登録します。 イベント ソースが存在しない場合の例は、ソースのメッセージ リソース ファイルを設定し、新しいイベント ソースを作成します。 コード例でのリソース識別子の値を使用して、イベント ログのローカライズされた表示名を設定する最後に、 `DisplayNameMsgId` とリソース ファイルのパスに `messageFile`します。  
  
 [!code-cpp[EventLog\_WriteEvent\#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog\_WriteEvent\#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog\_WriteEvent\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 このコード例では、EventLogMsgs.dll リソース ライブラリに組み込まれている次のメッセージのテキスト ファイルを使用します。 メッセージのテキスト ファイルは、メッセージ リソース ファイルの作成元のソースです。 メッセージのテキスト ファイルでは、リソース識別子とカテゴリ、イベント メッセージは、パラメーターの挿入文字列のテキストを定義します。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling any member of <see cref="T:System.Diagnostics.EventSourceCreationData" /> with full trust. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはカテゴリのリソース ファイル内の項目数を設定します。</summary>
        <value>カテゴリのリソース ファイル内のカテゴリの数。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> と <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> でイベントを書き込むプロパティがカテゴリ文字列をローカライズします。 イベント ビューアーでは、イベントを記述するときに、カテゴリを指定した場合、対応するエントリをイベント カテゴリが表示されます。 イベント ログのカテゴリは、イベントをフィルター処理、またはイベントで詳細情報を提供するアプリケーション定義の文字列です。 たとえば、アプリケーションでは、さまざまなコンポーネントまたは操作ごとに個別のカテゴリを定義できます。  
  
 イベント カテゴリは省略可能です。アプリケーションでのカテゴリを使用しない場合は設定しないで、 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> と <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> プロパティです。  
  
 詳細については、イベント メッセージを定義し、イベントのリソース ファイルを構築するには、プラットフォーム SDK のドキュメントで「メッセージ コンパイラ」トピックを参照してください [http:\/\/msdn.microsoft.com](http://msdn.microsoft.com/)します。  
  
   
  
## 例  
 次のコード例では、イベント ソースが名前付きかどうかを判断 `SampleApplicationSource` をローカル コンピューターに登録します。 イベント ソースが存在しない場合の例は、ソースのメッセージ リソース ファイルを設定し、新しいイベント ソースを作成します。 コード例でのリソース識別子の値を使用して、イベント ログのローカライズされた表示名を設定する最後に、 `DisplayNameMsgId` とリソース ファイルのパスに `messageFile`します。  
  
 [!code-cpp[EventLog\_WriteEvent\#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog\_WriteEvent\#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog\_WriteEvent\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 このコード例では、EventLogMsgs.dll リソース ライブラリに組み込まれている次のメッセージのテキスト ファイルを使用します。 メッセージのテキスト ファイルは、メッセージ リソース ファイルの作成元のソースです。 メッセージのテキスト ファイルでは、リソース識別子とカテゴリ、イベント メッセージは、パラメーターの挿入文字列のテキストを定義します。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティは、負の値または値よりも大きい設定 <see cref="F:System.UInt16.MaxValue" />します。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling any member of <see cref="T:System.Diagnostics.EventSourceCreationData" /> with full trust. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはソースのカテゴリ文字列を含むリソース ファイルのパスを設定します。</summary>
        <value>カテゴリのリソース ファイルのパス。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> と <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> でイベントを書き込むプロパティがカテゴリ文字列をローカライズします。 イベント ビューアーでは、イベントを記述するときに、カテゴリを指定した場合、対応するエントリをイベント カテゴリが表示されます。 イベント ログのカテゴリは、イベントをフィルター処理、またはイベントで詳細情報を提供するアプリケーション定義の文字列です。 たとえば、アプリケーションでは、さまざまなコンポーネントまたは操作ごとに個別のカテゴリを定義できます。  
  
 イベント カテゴリは省略可能です。アプリケーションでのカテゴリを使用しない場合は設定しないで、 <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> と <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> プロパティです。  
  
 詳細については、イベント メッセージを定義し、イベントのリソース ファイルを構築するには、プラットフォーム SDK のドキュメントで「メッセージ コンパイラ」トピックを参照してください [http:\/\/msdn.microsoft.com](http://msdn.microsoft.com/)します。  
  
   
  
## 例  
 次のコード例では、イベント ソースが名前付きかどうかを判断 `SampleApplicationSource` をローカル コンピューターに登録します。 イベント ソースが存在しない場合の例は、ソースのメッセージ リソース ファイルを設定し、新しいイベント ソースを作成します。 コード例でのリソース識別子の値を使用して、イベント ログのローカライズされた表示名を設定する最後に、 `DisplayNameMsgId` とリソース ファイルのパスに `messageFile`します。  
  
 [!code-cpp[EventLog\_WriteEvent\#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog\_WriteEvent\#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog\_WriteEvent\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 このコード例では、EventLogMsgs.dll リソース ライブラリに組み込まれている次のメッセージのテキスト ファイルを使用します。 メッセージのテキスト ファイルは、メッセージ リソース ファイルの作成元のソースです。 メッセージのテキスト ファイルでは、リソース識別子とカテゴリ、イベント メッセージは、パラメーターの挿入文字列のテキストを定義します。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling any member of <see cref="T:System.Diagnostics.EventSourceCreationData" /> with full trust. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはソースがエントリを書き込むイベント ログの名前を設定します。</summary>
        <value>イベント ログの名前。 アプリケーション、システム、またはカスタム ログ名を指定できます。 既定値は「アプリケーション」</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> アプリケーションが、新しいソースを使用するエントリを書き込むことは、イベント ログを識別するプロパティです。 イベント ログには、新しいログまたは既存のログを指定できます。 アプリケーションとサービスは、アプリケーション ログまたはカスタムのログに書き込む必要があります。 デバイス ドライバーは、システム ログに書き込む必要があります。 明示的に設定しない場合、 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> プロパティ、アプリケーション ログにイベント ログの既定値です。  
  
> [!NOTE]
>  セキュリティ ログとは、読み取り専用です。  
  
 新しいソースの既存のログを対象とする設定、 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> プロパティを既存のイベント ログの名前にします。 ソースの新しいイベント ログを作成するに設定する必要があります、 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> プロパティです。 イベント ログ名が印刷可能な文字で構成されている必要があり、文字を含めることはできません '\* ','?'、または' \\' です。 イベント ログ名の最初の 8 文字は、指定したコンピューター上のイベント ログの既存の名前の最初の 8 文字から異なる必要があります。  
  
 オペレーティング システムは、イベント ログをファイルとして保存されます。 使用すると <xref:System.Diagnostics.EventLogInstaller> または <xref:System.Diagnostics.EventLog.CreateEventSource%2A> 新しいイベント ログでは、関連付けられているファイルを作成する方法は、指定されたコンピューター上の %SystemRoot%\\System32\\Config ディレクトリに格納します。 最初の 8 文字を追加することにより、ファイル名を設定、 <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> ".evt"ファイル名拡張子を持つプロパティです。  
  
   
  
## 例  
 次のコード例では、コマンドライン引数から、イベント ソースの構成プロパティを設定します。 入力引数は、イベント ソース名、イベント ログ名、コンピューター名、およびイベント メッセージ リソース ファイルを指定します。 この例に示されている例の一部である、 <xref:System.Diagnostics.EventSourceCreationData> クラスです。  
  
 [!code-cpp[EventLog\_EventSourceCreation\_Properties\#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog\_EventSourceCreation\_Properties\#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog\_EventSourceCreation\_Properties\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling any member of <see cref="T:System.Diagnostics.EventSourceCreationData" /> with full trust. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはイベント ソースを登録するコンピューターの名前を設定します。</summary>
        <value>イベント ソースを登録するシステムの名前。 既定値はローカル コンピューター \("."\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> 値が空の文字列にすることはできません。 コンピューター名が明示的に設定されていない場合は、既定によりローカル コンピューター \("です。"\) です。  
  
 リモート コンピューター上のソースを登録するときに、十分なアクセス許可を持つレジストリ値を書き込むためには、そのコンピューターの管理者権限があります。  
  
   
  
## 例  
 次のコード例では、コマンドライン引数から、イベント ソースの構成プロパティを設定します。 入力引数は、イベント ソース名、イベント ログ名、コンピューター名、およびイベント メッセージ リソース ファイルを指定します。 この例に示されている例の一部である、 <xref:System.Diagnostics.EventSourceCreationData> クラスです。  
  
 [!code-cpp[EventLog\_EventSourceCreation\_Properties\#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog\_EventSourceCreation\_Properties\#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog\_EventSourceCreation\_Properties\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">コンピューター名が正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling any member of <see cref="T:System.Diagnostics.EventSourceCreationData" /> with full trust. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはメッセージのソースの文字列を書式設定を含むメッセージ リソース ファイルのパスを設定します。</summary>
        <value>メッセージ リソース ファイルのパス。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> プロパティのローカライズされたイベント メッセージを記述するデータをイベント ログ ソースを構成するためです。 イベント メッセージは、ユーザーにイベントを記述するアプリケーション定義の文字列です。  
  
 アプリケーションでは、リソース識別子を使用してイベント ログ エントリを書き込むことができます。 リソース識別子であるメッセージのインデックスを作成、 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>です。 イベント ビューアーでは、リソース識別子を使用して、検索し、現在の言語設定に基づくローカライズされたメッセージ リソース ファイルの対応する文字列を表示します。  
  
 ローカライズされたエントリを書き込むか、または直接の文字列を書き込むには、イベント ソースを構成する必要があります。 使用して、 <xref:System.Diagnostics.EventLog.WriteEvent%2A> メッセージ リソース ファイルで構成されたソースのローカライズされたエントリを書き込みます。  
  
 書き込み中の場合、アプリケーション イベント メッセージの文字列を直接リソース識別子を使用して、ローカライズされたリソース ファイル内ではなくは設定しないでください、 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> プロパティです。  
  
 詳細については、イベント メッセージを定義し、イベントのリソース ファイルを構築するには、プラットフォーム SDK のドキュメントで「メッセージ コンパイラ」トピックを参照してください [http:\/\/msdn.microsoft.com](http://msdn.microsoft.com/)します。  
  
   
  
## 例  
 次のコード例では、イベント ソースが名前付きかどうかを判断 `SampleApplicationSource` をローカル コンピューターに登録します。 イベント ソースが存在しない場合の例は、ソースのメッセージ リソース ファイルを設定し、新しいイベント ソースを作成します。 コード例でのリソース識別子の値を使用して、イベント ログのローカライズされた表示名を設定する最後に、 `DisplayNameMsgId` とリソース ファイルのパスに `messageFile`します。  
  
 [!code-cpp[EventLog\_WriteEvent\#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog\_WriteEvent\#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog\_WriteEvent\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 このコード例では、EventLogMsgs.dll リソース ライブラリに組み込まれている次のメッセージのテキスト ファイルを使用します。 メッセージのテキスト ファイルは、メッセージ リソース ファイルの作成元のソースです。 メッセージのテキスト ファイルでは、リソース識別子とカテゴリ、イベント メッセージは、パラメーターの挿入文字列のテキストを定義します。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling any member of <see cref="T:System.Diagnostics.EventSourceCreationData" /> with full trust. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を元のメッセージ パラメーター文字列を含むリソース ファイルのパス。</summary>
        <value>パラメーターのリソース ファイルのパス。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> プロパティでローカライズされたイベント メッセージを書き込むようにイベント ログのソースを構成するためパラメーター文字列を挿入します。 指定した各ローカライズされたイベント メッセージ、 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> プロパティは、挿入文字列のプレース ホルダーを含めることができます。 これらのプレース ホルダーを使用して、位置と、イベント メッセージ内の言語に依存しない文字列のリソース識別子を指定します。 イベント ビューアーから対応する文字列を使用して、プレース ホルダーを入力、 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> とローカライズされたイベント エントリのイベント ログ メッセージを書式設定します。  
  
 たとえば、メッセージのテキスト ファイルの次のセクションでは、パラメーター プレース ホルダーを持つ文字列を定義します。  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 パラメーターのリソース ファイル内では次のように挿入文字列、プレース ホルダーに対応するリソース識別子を持つ定義する必要があります。  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 ローカライズされたエントリを書き込むか、または直接の文字列を書き込むには、イベント ソースを構成する必要があります。 使用して、 <xref:System.Diagnostics.EventLog.WriteEvent%2A> メッセージ リソース ファイルで構成されたソースのローカライズされたエントリを書き込みます。  
  
 アプリケーションがイベント ログに直接イベント メッセージの文字列を書き込む場合、または、 <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> プロパティにはパラメーターの挿入のプレース ホルダーでメッセージが含まれていない場合、設定しないでください、 <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> プロパティです。  
  
 詳細については、イベント メッセージを定義し、イベントのリソース ファイルを構築するには、プラットフォーム SDK のドキュメントで「メッセージ コンパイラ」トピックを参照してください [http:\/\/msdn.microsoft.com](http://msdn.microsoft.com/)します。  
  
   
  
## 例  
 次のコード例では、イベント ソースが名前付きかどうかを判断 `SampleApplicationSource` をローカル コンピューターに登録します。 イベント ソースが存在しない場合の例は、ソースのメッセージ リソース ファイルを設定し、新しいイベント ソースを作成します。 コード例でのリソース識別子の値を使用して、イベント ログのローカライズされた表示名を設定する最後に、 `DisplayNameMsgId` とリソース ファイルのパスに `messageFile`します。  
  
 [!code-cpp[EventLog\_WriteEvent\#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog\_WriteEvent\#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog\_WriteEvent\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 このコード例では、EventLogMsgs.dll リソース ライブラリに組み込まれている次のメッセージのテキスト ファイルを使用します。 メッセージのテキスト ファイルは、メッセージ リソース ファイルの作成元のソースです。 メッセージのテキスト ファイルでは、リソース識別子とカテゴリ、イベント メッセージは、パラメーターの挿入文字列のテキストを定義します。 具体的には、リソース識別子 1004年に対して定義されたメッセージは、リソース識別子 5002 に対して定義されたパラメーター文字列のプレース ホルダーを使用します。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling any member of <see cref="T:System.Diagnostics.EventSourceCreationData" /> with full trust. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはイベント ソースとしてイベント ログに登録する名前を設定します。</summary>
        <value>イベント ログ エントリのソースとして登録する名前です。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ソース名は、多くの場合、アプリケーションの名前またはアプリケーションが大規模なコンポーネントの名前。<xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> メソッドの使用方法、 <xref:System.Diagnostics.EventSourceCreationData.Source%2A>, 、<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>, 、および <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> 新しいソースとその関連のイベント ログのターゲット コンピューター上のレジストリ値を作成するプロパティです。 新しいソース名には、既存のソース名またはターゲット コンピューター上の既存のイベント ログ名を一致ことはできません。  
  
 ソースのレジストリ値が作成されると、アプリケーションは、ソースを使用して構成済みのイベント ログにエントリを書き込みます。  
  
 同時に、各ソースは 1 つのイベント ログに書き込むだけことができます。ただし、アプリケーションでは、複数のソースを使用して、複数のイベント ログに書き込みます。 たとえば、アプリケーションでは、別のイベント ログまたは別のリソース ファイル用に構成された複数のソースを必要があります。  
  
   
  
## 例  
 次のコード例では、コマンドライン引数から、イベント ソースの構成プロパティを設定します。 入力引数は、イベント ソース名、イベント ログ名、コンピューター名、およびイベント メッセージ リソース ファイルを指定します。 この例に示されている例の一部である、 <xref:System.Diagnostics.EventSourceCreationData> クラスです。  
  
 [!code-cpp[EventLog\_EventSourceCreation\_Properties\#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog\_EventSourceCreation\_Properties\#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog\_EventSourceCreation\_Properties\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling any member of <see cref="T:System.Diagnostics.EventSourceCreationData" /> with full trust. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>