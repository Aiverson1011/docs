<Type Name="DataReceivedEventHandler" FullName="System.Diagnostics.DataReceivedEventHandler">
  <TypeSignature Language="C#" Value="public delegate void DataReceivedEventHandler(object sender, DataReceivedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed DataReceivedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Diagnostics.DataReceivedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">イベントのソース。</param>
    <param name="e">イベント データを格納している <see cref="T:System.Diagnostics.DataReceivedEventArgs" />。</param>
    <summary>処理するメソッドを表す、 <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> イベントまたは <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> のイベント、 <see cref="T:System.Diagnostics.Process" />です。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Diagnostics.DataReceivedEventHandler> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。 イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。 デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。 イベント ハンドラー デリゲートの詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 リダイレクトされたを非同期的に収集する <xref:System.Diagnostics.Process.StandardOutput%2A> または <xref:System.Diagnostics.Process.StandardError%2A> ストリームは、プロセスの出力、イベント ハンドラーを追加、 <xref:System.Diagnostics.Process.OutputDataReceived> または <xref:System.Diagnostics.Process.ErrorDataReceived> イベントです。 プロセスでは、対応するリダイレクトされたストリームに行を書き込むたびに、これらのイベントが発生します。 リダイレクトされたストリームが閉じている場合、null の行は、イベント ハンドラーに送信されます。 アクセスする前にこの条件を調べ、イベント ハンドラーを確認、 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> プロパティです。 たとえば、使用、 `static` メソッド <xref:System.String.IsNullOrEmpty%2A?displayProperty=fullName> を検証する、 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A> イベント ハンドラーのプロパティです。  
  
   
  
## 例  
 次のコード例は、リダイレクトされたで、非同期読み取り操作を実行する方法を示しています。 <xref:System.Diagnostics.Process.StandardOutput%2A> のストリーム、 **並べ替え** コマンドです。**並べ替え** コマンドは、コンソール アプリケーションを読み取り、テキスト入力を並べ替えています。  
  
 例を作成し、 <xref:System.Diagnostics.DataReceivedEventHandler> デリゲートは、 `SortOutputHandler` イベント ハンドラーを持つデリゲートを関連付けると、 <xref:System.Diagnostics.Process.OutputDataReceived> イベントです。 イベント ハンドラーは、テキストの行からリダイレクトされた <xref:System.Diagnostics.Process.StandardOutput%2A> 、ストリームは、テキストを書式化して、画面にテキストを書き込みます。  
  
 [!code-cpp[Process\_AsyncStreams\#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process\_AsyncStreams\#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process\_AsyncStreams\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventArgs" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
</Type>