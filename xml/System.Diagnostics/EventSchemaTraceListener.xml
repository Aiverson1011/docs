<Type Name="EventSchemaTraceListener" FullName="System.Diagnostics.EventSchemaTraceListener">
  <TypeSignature Language="C#" Value="public class EventSchemaTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSchemaTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSchemaTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>エンド ツー エンド イベントのトレース出力またはデバッグ出力を、XML エンコードされたスキーマ互換のログ ファイルに転送します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Diagnostics.EventSchemaTraceListener> class provides tracing of end\-to\-end schema\-compliant events. You can use end\-to\-end tracing for a system that has heterogeneous components that cross thread, <xref:System.AppDomain>, process, and computer boundaries. A standardized event schema \(see [Event Representation for Event Consumers](http://go.microsoft.com/fwlink/?LinkId=78955)\) has been defined to enable tracing across these boundaries. The schema enables the addition of custom, schema\-compliant elements. You can use the [Service Trace Viewer Tool \(SvcTraceViewer.exe\)](http://go.microsoft.com/fwlink/p/?LinkId=240129) to display the event data.  
  
 <xref:System.Diagnostics.EventSchemaTraceListener> is tuned for logging performance with implicit support for lock\-free tracing.  
  
 The <xref:System.Diagnostics.EventSchemaTraceListener> class converts tracing and debugging information into an XML\-encoded text stream. The description of the XML output is shown in the tables later in this section.  
  
 You can enable or disable an <xref:System.Diagnostics.EventSchemaTraceListener> object through the application configuration file, and then use the configured <xref:System.Diagnostics.EventSchemaTraceListener> object in your application. Alternately, you can create an <xref:System.Diagnostics.EventSchemaTraceListener> object in your code. We recommend that you enable trace listeners through the application configuration file. For information about the use of configuration files for tracing and debugging, see [Trace and Debug Settings Schema](http://msdn.microsoft.com/ja-jp/277ca5f6-e1c4-41b6-a47f-3a67ce5b94ac).  
  
 To configure an <xref:System.Diagnostics.EventSchemaTraceListener> object, modify the configuration file that corresponds to the name of your application. In this file, you can add, remove, or set the properties for a listener. The configuration file should be formatted as follows:  
  
```  
<configuration>  
    <system.diagnostics>  
        <sources>  
            <source name="TestSource" >  
                <listeners>  
                    <!--Remove the default trace listener for better performance.-->  
                    <remove name="Default"/>  
                    <!--Note: Removing the default trace listener prevents the dialog box   
                    from being displayed for Debug.Fail or Debug.Assert commands that are   
                    executed in user mode.-->  
                    <add name="eventListener"   
                      type="System.Diagnostics.EventSchemaTraceListener,  system.core"  
                      initializeData="TraceOutput.xml"   
                      traceOutputOptions="ProcessId, DateTime, Timestamp"   
                      bufferSize="65536"  
                      maximumFileSize="20480000"  
                      logRetentionOption="LimitedCircularFiles"  
                      maximumNumberOfFiles="2"/>  
                </listeners>  
            </source>  
        </sources>  
    </system.diagnostics>  
```  
  
 The <xref:System.Diagnostics.EventSchemaTraceListener> class inherits the <xref:System.Diagnostics.TraceListener.Filter%2A> property from the base class <xref:System.Diagnostics.TraceListener>. The <xref:System.Diagnostics.TraceListener.Filter%2A> property allows for an additional level of trace output filtering at the listener. If a filter is present, the **languageKeyword tag is not supported!!!!**  
 methods of the trace listener call the <xref:System.Diagnostics.TraceFilter.ShouldTrace%2A> method of the filter to determine whether to emit the trace.  
  
 If an attempt is made to write to a file that is being used or is unavailable, a GUID suffix is automatically added to the file name.  
  
> [!NOTE]
>  Listener methods are intended to be called by methods of the <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, and <xref:System.Diagnostics.TraceSource> classes. Do not call the listener methods directly from application code. The <xref:System.Diagnostics.EventSchemaTraceListener> listener is primarily intended for use by the <xref:System.Diagnostics.TraceSource> class.  
  
 The following table describes the elements and attributes of the XML output.  
  
|Element|Attributes|Output|Notes|  
|-------------|----------------|------------|-----------|  
|`CallStack`|None|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.Callstack> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|Special characters such as \> or \< are replaced with escape sequences. See the escaped character translation table in the next table.|  
|`Computer`|None|Always present.|This element represents the value of the <xref:System.Environment.MachineName%2A> property.|  
|`Correlation`|`ActivityID`|Always present.|If **languageKeyword tag is not supported!!!!**<br /> is not specified, the default is an empty GUID.|  
||`RelatedActivityID`|Depends on the presence of the **parameterReference tag is not supported!!!!**<br /> parameter in the **languageKeyword tag is not supported!!!!**<br /> method call.|The **languageKeyword tag is not supported!!!!**<br /> attribute corresponds to the **parameterReference tag is not supported!!!!**<br /> parameter of the <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> method.|  
|`Data`|None|Always present.|This element represents parameter input \(**parameterReference tag is not supported!!!!**<br />\). One element is provided for each data object. In the case of event logs, the **languageKeyword tag is not supported!!!!**<br /> element contains escaped XML data. In the case of data logs, the **languageKeyword tag is not supported!!!!**<br /> element contains unescaped data. The data log output uses the **languageKeyword tag is not supported!!!!**<br /> method of the passed\-in data objects.|  
|`Event`|None|Always present.|This element contains a trace event.|  
|`EventData`|None|Present for event logs.|This element represents parameter input \(**parameterReference tag is not supported!!!!**<br />, **parameterReference tag is not supported!!!!**<br />\). It contains **languageKeyword tag is not supported!!!!**<br /> elements with escaped XML data that is created by calling the <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> method.|  
|`EventID`|None|Always present.|This element represents parameter input \(**parameterReference tag is not supported!!!!**<br />\).|  
|`Execution`|`ProcessID`|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.ProcessId> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The **languageKeyword tag is not supported!!!!**<br /> attribute is specified in the <xref:System.Diagnostics.TraceEventCache>. On the Microsoft Windows 98 and Windows Millenium Edition operating systems, if **languageKeyword tag is not supported!!!!**<br /> is larger than 2,147,483,647, it is a positive representation of a negative number and should be converted to obtain the correct process identifier.|  
||`ThreadID`|Present when **languageKeyword tag is not supported!!!!**<br /> is present.|The **languageKeyword tag is not supported!!!!**<br /> attribute is specified in the <xref:System.Diagnostics.TraceEventCache>.|  
|`Level`|None|Always present.|This element represents parameter input \(the numeric value of **parameterReference tag is not supported!!!!**<br />\). Parameter values that are larger than 255 are output as a level 8, which represents <xref:System.Diagnostics.TraceEventType.Information?displayProperty=fullName>. Trace event types <xref:System.Diagnostics.TraceEventType.Critical>, <xref:System.Diagnostics.TraceEventType.Error>, <xref:System.Diagnostics.TraceEventType.Warning>, <xref:System.Diagnostics.TraceEventType.Information>, and <xref:System.Diagnostics.TraceEventType.Verbose> are output as levels 1, 2, 4, 8, and 10, respectively.|  
|`LogicalOperationStack`|None|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|Only one logical operation can exist. Therefore, the values are written as **languageKeyword tag is not supported!!!!**<br /> nodes under the **languageKeyword tag is not supported!!!!**<br /> element.|  
|`OpCode`|None|Present when **languageKeyword tag is not supported!!!!**<br /> is greater than 255.|This element represents Trace event types that have numeric values greater than 255. <xref:System.Diagnostics.TraceEventType.Start>, <xref:System.Diagnostics.TraceEventType.Stop>, <xref:System.Diagnostics.TraceEventType.Suspend>, <xref:System.Diagnostics.TraceEventType.Resume>, or <xref:System.Diagnostics.TraceEventType.Transfer> are output as levels 1, 2, 4, 8, and 10, respectively.|  
|`Provider`|`GUID`|Always present.|Always empty.|  
|`RenderingInfo`|`Culture`|Always present.|This attribute represents a resource string for the event type. It is always "en\-EN\\".|  
|`System`|`Name`|Always present.||  
|`TimeCreated`|`SystemTime`|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.DateTime> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The time is the value of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A?displayProperty=fullName> property. This property is expressed as Coordinated Universal Time|  
|`TimeStamp`|None|Depends on the presence of the <xref:System.Diagnostics.TraceOptions.Timestamp> flag in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|This element is specified in the <xref:System.Diagnostics.TraceEventCache>.|  
|`UserData`|None|Present for data logs.|This element contains **languageKeyword tag is not supported!!!!**<br /> elements with unescaped, user\-provided data from a <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> method.|  
  
 The following table shows the characters that are escaped in the XML output. Escaping occurs in all the elements and attributes except for the **languageKeyword tag is not supported!!!!**  
 element, which contains user\-provided, unescaped data. The **languageKeyword tag is not supported!!!!**  
 element is a result of calls to the <xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A> method.  
  
|Escaped character|Value|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|\>|&gt;|  
|"|&quot;|  
|\\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#xA;|  
  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Diagnostics.EventSchemaTraceListener> class.  
  
 [!code-cpp[System.Diagnostics.EventSchemaTraceListener\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/CPP/eventschematracelistener.cpp#1)]
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#1)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">ログ ファイルのパス。</param>
        <summary>指定したファイルをデバッグ出力およびトレース出力の受信者として使用して、<see cref="T:System.Diagnostics.EventSchemaTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 By default, one file of unrestricted size is logged.  
  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%29?displayProperty=fullName> constructor.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">ログ ファイルのパス。</param>
        <param name="name">リスナーの名前。</param>
        <summary>指定したファイルをデバッグ出力およびトレース出力の受信者として使用し、名前を指定して <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%29?displayProperty=fullName> constructor.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#2)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">ログ ファイルのパス。</param>
        <param name="name">リスナーの名前。</param>
        <param name="bufferSize">出力バッファーのサイズ \(バイト単位\)。</param>
        <summary>指定したファイルをデバッグ出力およびトレース出力の受信者として使用し、名前とバッファー サイズを指定して <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For performance considerations, **parameterReference tag is not supported!!!!**  
 should be a multiple of 1024 bytes.  
  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%29?displayProperty=fullName> constructor.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#3)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
      </Parameters>
      <Docs>
        <param name="fileName">ログ ファイルのパス。</param>
        <param name="name">リスナーの名前。</param>
        <param name="bufferSize">出力バッファーのサイズ \(バイト単位\)。</param>
        <param name="logRetentionOption">
          <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 値のいずれか。</param>
        <summary>指定したログ保持ポリシーを持つ指定したファイルをデバッグ出力およびトレース出力の受信者として使用し、名前とバッファー サイズを指定して <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For performance considerations, **parameterReference tag is not supported!!!!**  
 should be a multiple of 1024 bytes.  
  
   
  
## 例  
 The following code example demonstrates how to use the <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%2CSystem.Diagnostics.TraceLogRetentionOption%29?displayProperty=fullName> constructor.  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#4)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption, long maximumFileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption, int64 maximumFileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
        <Parameter Name="maximumFileSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileName">ログ ファイルのパス。</param>
        <param name="name">リスナーの名前。</param>
        <param name="bufferSize">出力バッファーのサイズ \(バイト単位\)。</param>
        <param name="logRetentionOption">
          <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 値のいずれか。</param>
        <param name="maximumFileSize">最大ファイル サイズ \(バイト単位\)。</param>
        <summary>指定したログ保持ポリシーおよび最大サイズを持つ指定したファイルをデバッグ出力およびトレース出力の受信者として使用し、名前とバッファー サイズを指定して <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パフォーマンスに関する考慮事項、 `bufferSize` と `maximumFileSize` 1024 バイトの倍数である必要があります。`maximumFileSize` 絶対値ではありませんがしきい値を超過している最後のメッセージのサイズに達するまでです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%2CSystem.Diagnostics.TraceLogRetentionOption%2CSystem.Int64%29?displayProperty=fullName> コンス トラクターです。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#5)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumFileSize" /> 負の数です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption, long maximumFileSize, int maximumNumberOfFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption, int64 maximumFileSize, int32 maximumNumberOfFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
        <Parameter Name="maximumFileSize" Type="System.Int64" />
        <Parameter Name="maximumNumberOfFiles" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">ログ ファイルのパス。</param>
        <param name="name">リスナーの名前。</param>
        <param name="bufferSize">出力バッファーのサイズ \(バイト単位\)。</param>
        <param name="logRetentionOption">
          <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 値のいずれか 1 つ。</param>
        <param name="maximumFileSize">最大ファイル サイズ \(バイト単位\)。</param>
        <param name="maximumNumberOfFiles">出力ログ ファイルの最大数。</param>
        <summary>指定したログ保持ポリシー、最大サイズ、およびファイル数を持つ指定したファイルをデバッグ出力およびトレース出力の受信者として使用し、名前とバッファー サイズを指定して <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パフォーマンスに関する考慮事項、 `bufferSize` と `maximumFileSize` 1024 バイトの倍数である必要があります。`maximumFileSize` 。 絶対値ではありませんしきい値を超過している最後のメッセージのサイズの最大をすることをお勧めします。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%2A> コンス トラクターです。 このコード例はに対して提供されているサンプルが大きく、 <xref:System.Diagnostics.EventSchemaTraceListener> クラスです。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#2)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumNumberOfFiles" /> 2 より小さい値と <paramref name="logRetentionOption" /> は <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferSize">
      <MemberSignature Language="C#" Value="public int BufferSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.BufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>出力バッファーのサイズを取得します。</summary>
        <value>出力バッファーのサイズ \(バイト単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロパティ値によって設定されます、 `bufferSize` コンス トラクターのパラメーターです。 パフォーマンス向上のため、バッファーのサイズを 1024 バイトの倍数に設定してください。 32 \* 1024 バイトの既定のサイズまたは最適なパフォーマンスを 64 \* 1024 バイトのいずれかをお勧めします。  
  
   
  
## 例  
 次のコード例では、値を表示、 <xref:System.Diagnostics.EventSchemaTraceListener.BufferSize%2A> プロパティです。 このコード例はに対して提供されているサンプルが大きく、 <xref:System.Diagnostics.EventSchemaTraceListener> クラスです。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#5)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このリスナーのログ ファイルを閉じて、トレース出力またはデバッグ出力を受信しないようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">書き込む基本的なエラー メッセージ。</param>
        <param name="detailMessage">基本的なエラー メッセージに追加する詳細なエラー メッセージ。</param>
        <summary>基本的なエラー メッセージと詳細なエラー メッセージを含むエラー情報をログ ファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>バッファーに格納されたデータをこのリスナーのログ ファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>トレース リスナーによってサポートされるカスタムの XML 構成属性を取得します。</summary>
        <returns>このリスナーで認識可能な XML 構成属性を保持する <see cref="T:System.String" /> 配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンスの動作を制御する XML 構成ファイルでこのメソッドによって返されるカスタム属性を使用できる、 <xref:System.Diagnostics.EventSchemaTraceListener> クラスです。 その他の属性を使用して、構成例外が発生します。<xref:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes%2A> のメソッド、 <xref:System.Diagnostics.EventSchemaTraceListener> 、次の文字列配列の値を返します。"bufferSize"、"logRetentionOption"、"理由により"と"maximumNumberOfFiles"です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThreadSafe">
      <MemberSignature Language="C#" Value="public override bool IsThreadSafe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadSafe" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トレース リスナーがスレッド セーフかどうかを示す値を取得します。</summary>
        <value>常に <see langword="true" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例では、値を表示、 <xref:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe%2A> プロパティです。 このコード例はに対して提供されているサンプルが大きく、 <xref:System.Diagnostics.EventSchemaTraceListener> クラスです。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#4)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumFileSize">
      <MemberSignature Language="C#" Value="public long MaximumFileSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumFileSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログ ファイルの最大サイズを取得します。</summary>
        <value>最大ファイル サイズ \(バイト単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロパティ値によって設定されます、 `maximumFileSize` コンス トラクターのパラメーターまたは `maximumFileSize` 構成ファイル内の属性です。 パフォーマンス向上のためには、1024 バイトの倍数にファイルの最大サイズを設定する必要があります。<xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> プロパティの値が絶対; のしきい値を超過している最後のメッセージのサイズの最大を超えたことができます。  
  
 次の表は、各トレース ログ保持オプションに関連付けられたファイルのサイズのアカウントと既定値を示します。 N\/A とマークされている値を指定する、 <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> いるは、プロパティは選択されていない <xref:System.Diagnostics.TraceLogRetentionOption> 値。  
  
|TraceLogRetentionOption|ファイルの最大サイズ|既定のファイル サイズ|  
|-----------------------------|----------------|-----------------|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|N\/A|\-1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|\>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|\>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|\>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|\>0|4 KB|  
  
   
  
## 例  
 次のコード例では、値を表示、 <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A> プロパティです。 このコード例はに対して提供されているサンプルが大きく、 <xref:System.Diagnostics.EventSchemaTraceListener> クラスです。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#6)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumNumberOfFiles">
      <MemberSignature Language="C#" Value="public int MaximumNumberOfFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumNumberOfFiles" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログ ファイルの最大数を取得します。</summary>
        <value>ログ ファイルの最大数。このファイルの <see cref="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" /> プロパティの値によって決定されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロパティ値によって設定されます、 `maximumNumberOfFiles` コンス トラクターのパラメーターまたは `maximumNumberOfFiles` 構成ファイル内の属性です。  
  
 次の表は、各トレース ログ保持オプションに関連付けられたファイルのサイズとファイルの数のアカウントと既定値を示します。 N\/A とマークされている値を指定する、 <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> いるは、プロパティは選択されていない <xref:System.Diagnostics.TraceLogRetentionOption> 値。  
  
|TraceLogRetentionOption|ファイルの最大数|既定のファイル数|  
|-----------------------------|--------------|--------------|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|N\/A|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|N\/A|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|N\/A|\-1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|\>0|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|\>1|2|  
  
   
  
## 例  
 次のコード例では、値を表示、 <xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A> プロパティです。 このコード例はに対して提供されているサンプルが大きく、 <xref:System.Diagnostics.EventSchemaTraceListener> クラスです。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#7)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 値のいずれか。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="data">出力するデータ オブジェクト。</param>
        <summary>トレース情報、単一のデータ オブジェクト、およびイベント情報をログ ファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `eventCache`, 、`source`, 、`eventType`, 、および `id` パラメーター ヘッダーとトレースのフッターで使用されます。`id` が書き込まれるまでは、パラメーターを符号なし整数に変換します。 負ではこのため、 `id` 値が大きい正の整数として書き込まれます。`data` としてパラメーターを記述、 `Data` 内のノード、 `UserData` 要素。`ToString` データ オブジェクトのメソッドを使用して、オブジェクトを文字列に変換します。  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーション コードから直接呼び出されるものはありません。 メソッドによって呼び出される、 <xref:System.Diagnostics.Debug>, 、<xref:System.Diagnostics.Trace>, 、および <xref:System.Diagnostics.TraceSource> トレース データを書き込みます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 値のいずれか。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="data">出力するデータ オブジェクトの配列。</param>
        <summary>トレース情報、複数のデータ オブジェクト、およびイベント情報をログ ファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `eventCache`, 、`source`, 、`eventType`, 、および `id` パラメーター ヘッダーとトレースのフッターで使用されます。`id` が書き込まれるまでは、パラメーターを符号なし整数に変換します。 負ではこのため、 `id` 値が大きい正の整数として書き込まれます。 内のオブジェクト、 `data` パラメーター配列として書き込まれる `Data` 内のノード、 `UserData` 要素。`ToString` 各データ オブジェクトのメソッドを使用して、オブジェクトを文字列に変換します。  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーション コードから直接呼び出されるものはありません。 メソッドによって呼び出される、 <xref:System.Diagnostics.Debug>, 、<xref:System.Diagnostics.Trace>, 、および <xref:System.Diagnostics.TraceSource> トレース データを書き込みます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 値のいずれか。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="message">書き込むメッセージ。</param>
        <summary>トレース情報、メッセージ、およびイベント情報をログ ファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `eventCache`, 、`source`, 、`eventType`, 、および `id` パラメーター ヘッダーとトレースのフッターで使用されます。`id` が書き込まれるまでは、パラメーターを符号なし整数に変換します。 負ではこのため、 `id` 値が大きい正の整数として書き込まれます。`message` としてパラメーターを記述、 `Data` 内のノード、 `EventData` 要素。  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーション コードから直接呼び出されるものはありません。 メソッドによって呼び出される、 <xref:System.Diagnostics.Debug>, 、<xref:System.Diagnostics.Trace>, 、および <xref:System.Diagnostics.TraceSource> トレース データを書き込みます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 値のいずれか。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="format">0 個以上の書式項目を格納している書式指定文字列。<c>args</c> 配列内のオブジェクトに対応します。</param>
        <param name="args">0 個以上の書式設定対象オブジェクトを含んだオブジェクト配列。</param>
        <summary>トレース情報、書式設定されたメッセージ、およびイベント情報をログ ファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `eventCache`, 、`source`, 、`eventType`, 、および `id` パラメーター ヘッダーとトレースのフッターで使用されます。`id` が書き込まれるまでは、パラメーターを符号なし整数に変換します。 負ではこのため、 `id` 値が大きい正の整数として書き込まれます。<xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> メソッドが呼び出されると、 `format` 文字列と `args` 配列パラメーターとして渡されます。 このメソッドは、書式、 `args` オブジェクトの配列として書式設定された配列の読み書き、 `Data` 内のノード、 `EventData` 要素。  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーション コードから直接呼び出されるものはありません。 メソッドによって呼び出される、 <xref:System.Diagnostics.Debug>, 、<xref:System.Diagnostics.Trace>, 、および <xref:System.Diagnostics.TraceSource> トレース データを書き込みます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceLogRetentionOption">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceLogRetentionOption TraceLogRetentionOption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.TraceLogRetentionOption TraceLogRetentionOption" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceLogRetentionOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイルに対するトレース ログ保持オプションを取得します。</summary>
        <value>
          <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例では、値を表示、 <xref:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption%2A> プロパティです。 このコード例はに対して提供されているサンプルが大きく、 <xref:System.Diagnostics.EventSchemaTraceListener> クラスです。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#9)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">現在のプロセス ID、スレッド ID、およびスタック トレース情報を格納している <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">ソース名。</param>
        <param name="id">イベントの数値識別子。</param>
        <param name="message">書き込むトレース メッセージ。</param>
        <param name="relatedActivityId">関連するアクティビティを識別する <see cref="T:System.Guid" /> 構造体。</param>
        <summary>関連するアクティビティ ID などのトレース情報、メッセージ、およびイベント情報をログ ファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> メソッドは、関連するトレースを関連付けるために使用します。`eventCache`, 、`source`, 、`id`, 、および `relatedActivityId` パラメーター ヘッダーとトレースのフッターで使用されます。`id` が書き込まれるまでは、パラメーターを符号なし整数に変換します。 負ではこのため、 `id` 値が大きい正の整数として書き込まれます。`message` としてパラメーターを記述、 `Data` 要素。<xref:System.Guid.ToString%28System.String%29?displayProperty=fullName> に変換するメソッドが呼び出される、 `relatedActivityId` "b"の値がヘッダーに表示される文字列を書式設定します。`Opcode` フッター内の要素としてトレース イベントの種類を識別する、 <xref:System.Diagnostics.TraceEventType.Transfer>です。  
  
> [!IMPORTANT]
>  <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A> メソッドは、アプリケーション コードから呼び出せません必要があります。 使用されるものでは、 <xref:System.Diagnostics.TraceSource> のトレース情報を出力するオブジェクトの <xref:System.Diagnostics.TraceSource.TraceTransfer%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Write(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">書き込むメッセージ。</param>
        <summary>メッセージを追加のコンテキスト情報なしでログ ファイルに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> メソッドを呼び出して、メッセージとしてログに記録する、 <xref:System.Diagnostics.TraceEventType.Information> イベントです。  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーション コードから直接呼び出されるものはありません。 メソッドによって呼び出される、 <xref:System.Diagnostics.Debug>, 、<xref:System.Diagnostics.Trace>, 、および <xref:System.Diagnostics.TraceSource> トレース データを書き込みます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">書き込むメッセージ。</param>
        <summary>メッセージを追加のコンテキスト情報なしでログ ファイルに書き込み、続けて現在の行終端記号を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A> メソッドを呼び出して、メッセージとしてログに記録する、 <xref:System.Diagnostics.TraceEventType.Information> イベントです。  
  
> [!IMPORTANT]
>  このメソッドは、アプリケーション コードから直接呼び出されるものはありません。 メソッドによって呼び出される、 <xref:System.Diagnostics.Debug>, 、<xref:System.Diagnostics.Trace>, 、および <xref:System.Diagnostics.TraceSource> トレース データを書き込みます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Writer">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter Writer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter Writer" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.Writer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ログ ファイルに書き込む基になるテキスト ライターを取得または設定します。</summary>
        <value>
          <see cref="T:System.IO.TextWriter" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Set アクセサーを使用すると、 <xref:System.Diagnostics.EventSchemaTraceListener.Writer%2A> プロパティを発生させる、 <xref:System.NotSupportedException>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">値を代入しようとしましたが、 <see cref="P:System.Diagnostics.EventSchemaTraceListener.Writer" /> プロパティです。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ログ ファイルにトレース データを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ログ ファイルにイベント トレース情報を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>