<Type Name="EventLogEntryCollection" FullName="System.Diagnostics.EventLogEntryCollection">
  <TypeSignature Language="C#" Value="public class EventLogEntryCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogEntryCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogEntryCollection" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <see cref="T:System.Diagnostics.EventLogEntry" /> インスタンスのコレクションのサイズと列挙子を定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use the <xref:System.Diagnostics.EventLogEntryCollection> class when reading the entries associated with an <xref:System.Diagnostics.EventLog> instance. The <xref:System.Diagnostics.EventLog.Entries%2A> property of the <xref:System.Diagnostics.EventLog> class is a collection of all the entries in the event log.  
  
 Because new entries are appended to the existing list, stepping through the collection enables you to access the entries that were created after you originally created the <xref:System.Diagnostics.EventLogEntryCollection>. However, after you view the entire list, it is not updated with new entries.  
  
   
  
## 例  
 The following example demonstrates how to obtain event log information from an <xref:System.Diagnostics.EventLogEntryCollection> object.  
  
 [!code-cpp[EventLogEntry\_CopyTo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_CopyTo/CPP/eventlogentry_copyto.cpp#1)]
 [!code-csharp[EventLogEntry\_CopyTo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_CopyTo/CS/eventlogentry_copyto.cs#1)]
 [!code-vb[EventLogEntry\_CopyTo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_CopyTo/VB/eventlogentry_copyto.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="P:System.Diagnostics.EventLog.Entries" />
  </Docs>
  <Members>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Diagnostics.EventLogEntry[] eventLogEntries, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Diagnostics.EventLogEntry[] eventLogEntries, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogEntryCollection.CopyTo(System.Diagnostics.EventLogEntry[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entries" Type="System.Diagnostics.EventLogEntry[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="eventLogEntries">To be added.</param>
        <param name="index">配列内のコピーを開始する位置を示す、0 から始まるインデックスです。</param>
        <summary>要素をコピー、 <see cref="T:System.Diagnostics.EventLogEntryCollection" /> 型の配列を <see cref="T:System.Diagnostics.EventLogEntry" /> 場合は、特定の配列インデックスを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既存のリストには、新しいエントリが追加され、ため、コレクションのステップ実行することができますエントリには、最初に作成した後に作成されたアクセス、 [CopyTo メソッド \(EventLogEntry\<xref:System.Diagnostics.EventLogEntryCollection>です。 配列 [CopyTo メソッド \(EventLogEntry\<xref:System.Diagnostics.EventLogEntry> インスタンスは、インスタンス化時に固定します。 したがって、によって返される配列を使用して、新しいエントリを読み取ることができません、 [CopyTo メソッド \(EventLogEntry\<xref:System.Diagnostics.EventLogEntryCollection.CopyTo%2A> メソッドです。  
  
   
  
## 例  
 次の例を作成し、 [CopyTo メソッド \(EventLogEntry\<xref:System.Diagnostics.EventLogEntry> 配列と使用法、 [CopyTo メソッド \(EventLogEntry\<xref:System.Diagnostics.EventLogEntryCollection.CopyTo%2A> の内容をコピーする方法、 [CopyTo メソッド \(EventLogEntry\<xref:System.Diagnostics.EventLogEntryCollection> にします。  
  
 [!code-csharp[EventLogEntry\_CopyTo\#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_CopyTo/CS/eventlogentry_copyto.cs#2)]
 [!code-vb[EventLogEntry\_CopyTo\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_CopyTo/VB/eventlogentry_copyto.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntryCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>イベント ログにエントリの数を取得 \(つまり、内の要素の数、 <see cref="T:System.Diagnostics.EventLogEntry" /> コレクション\)。</summary>
        <value>現在のイベント ログ エントリの数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Diagnostics.EventLogEntryCollection> ログ内のすべてのエントリの動的リストを表します。 したがって、 <xref:System.Diagnostics.EventLogEntryCollection.Count%2A> の有効期間中にプロパティを変更することができます、 <xref:System.Diagnostics.EventLogEntryCollection> を作成するインスタンス。 使用することをお勧めします <xref:System.Diagnostics.EventLogEntryCollection.Count%2A> 変数にその値を代入するのではなく、直接プロパティです。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Diagnostics.EventLogEntryCollection.Count%2A> プロパティを反復処理する、 <xref:System.Diagnostics.EventLogEntryCollection> オブジェクトです。  
  
 [!code-cpp[EventLogEntry\_Item\#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Item/CPP/eventlogentry_item.cpp#1)]
 [!code-csharp[EventLogEntry\_Item\#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Item/CS/eventlogentry_item.cs#1)]
 [!code-vb[EventLogEntry\_Item\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Item/VB/eventlogentry_item.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogEntryCollection.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>に対する単純な反復処理をサポート、 <see cref="T:System.Diagnostics.EventLogEntryCollection" /> オブジェクトです。</summary>
        <returns>コレクションを反復処理するために使用できるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって返されるオブジェクト、 <xref:System.Diagnostics.EventLogEntryCollection.GetEnumerator%2A> メソッドのラッパーである、 <xref:System.Diagnostics.EventLogEntryCollection> を実装するクラス、 <xref:System.Collections.IEnumerator> 列挙子。  
  
> [!NOTE]
>  イテレーションの途中で、コレクションが変更されると、イテレーションが終了します。 このような可能性を避けるためには、次を参照してください。、 <xref:System.Diagnostics.EventLogEntryCollection.Item%2A> プロパティのコレクションを反復処理するための代替手法です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.EventLogEntry this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.EventLogEntry Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntryCollection.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">イベント ログ エントリに関連付けられた 0 から始まるインデックス。</param>
        <summary>0 \(ゼロ\) に開始されるインデックスに基づいて、イベント ログにエントリを取得します。</summary>
        <value>指定された場所にあるイベント ログ エントリ、 <paramref name="index" /> パラメーター。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Diagnostics.EventLogEntry> オブジェクトはイベント ログに到着した順序と同じ順序に従ってイベント ログ システムでインデックスが作成されます。 使用して、 <xref:System.Diagnostics.EventLogEntryCollection.Item%2A> プロパティ コレクション内のインデックスがわかっている特定のイベント ログ エントリを選択します。  
  
 反復処理する、 <xref:System.Diagnostics.EventLogEntryCollection> ごとに手順の手順をインスタンス化 <xref:System.Diagnostics.EventLogEntry> オブジェクトを順番にします。 コレクションは動的とエントリの数がループを入力すると変更できないされません。 したがって、使用する必要があります、 `for each...next` ループの代わりに、 `for(int i=0; i<count, i++)` ループをステップ実行に関連付けられているエントリを <xref:System.Diagnostics.EventLogEntryCollection> エントリのセット全体を確認するインスタンス。  
  
 既存のリストには、新しいエントリが追加され、ため、コレクションのステップ実行することができますエントリには、最初に作成した後に作成されたアクセス、 <xref:System.Diagnostics.EventLogEntryCollection>です。  
  
   
  
## 例  
 次の例では、内の項目の情報を表示、 <xref:System.Diagnostics.EventLogEntryCollection> オブジェクトです。  
  
 [!code-cpp[EventLogEntry\_Item\#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Item/CPP/eventlogentry_item.cpp#2)]
 [!code-csharp[EventLogEntry\_Item\#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Item/CS/eventlogentry_item.cs#2)]
 [!code-vb[EventLogEntry\_Item\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Item/VB/eventlogentry_item.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntryCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogEntryCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">1 次元 <see cref="T:System.Array" /> されるコレクションからコピーされた要素のコピー先。<see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
        <param name="index">コピーの開始位置とする <c>array</c> のインデックス \(0 から始まる\)。</param>
        <summary>コレクションの要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Diagnostics.EventLogEntryCollection.CopyTo%2A> のメソッド、 <xref:System.Diagnostics.EventLogEntryCollection> にコレクションのすべてまたは一部をコピーするクラス、 <xref:System.Diagnostics.EventLogEntry> 配列。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntryCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Diagnostics.EventLogEntryCollection" /> へのアクセスが同期されている \(スレッド セーフである\) かどうかを示す値を取得します。</summary>
        <value>
          <see langword="false" /> 場合は、コレクションへのアクセスでは、\(スレッド セーフな\) は同期されません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Diagnostics.EventLogEntryCollection> 、クラス、 <xref:System.Diagnostics.EventLogEntryCollection.System%23Collections%23ICollection%23IsSynchronized%2A> メソッドは常に返します `false`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntryCollection.System#Collections#ICollection#SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Diagnostics.EventLogEntryCollection" /> オブジェクトへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
        <value>コレクションへのアクセスを同期するために使用できるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Diagnostics.EventLogEntryCollection> 、クラス、 <xref:System.Diagnostics.EventLogEntryCollection.System%23Collections%23ICollection%23SyncRoot%2A> 現在を常に返します <xref:System.Diagnostics.EventLogEntryCollection>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>