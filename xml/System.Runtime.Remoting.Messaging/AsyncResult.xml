<Type Name="AsyncResult" FullName="System.Runtime.Remoting.Messaging.AsyncResult">
  <TypeSignature Language="C#" Value="public class AsyncResult : IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit AsyncResult extends System.Object implements class System.IAsyncResult, class System.Runtime.Remoting.Messaging.IMessageSink" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Messaging.AsyncResult" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Messaging.IMessageSink</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>デリゲートでの非同期操作の結果をカプセル化します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Remoting.Messaging.AsyncResult> クラスは、デリゲートを使用した非同期メソッド呼び出しと組み合わせて使用されます。<xref:System.IAsyncResult> デリゲートから返された `BeginInvoke` にキャストできるメソッド、 <xref:System.Runtime.Remoting.Messaging.AsyncResult>です。<xref:System.Runtime.Remoting.Messaging.AsyncResult> が、 <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> 非同期呼び出しが行われたデリゲートを保持するプロパティ オブジェクトします。  
  
 詳細については `BeginInvoke` 、デリゲートを使用して非同期呼び出しを参照してくださいと [Asynchronous Programming Using Delegates](http://msdn.microsoft.com/ja-jp/38a345ca-6963-4436-9608-5c9defef9c64)です。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> を取得するプロパティ、 <xref:System.Threading.WaitHandle>, 、およびデリゲートの非同期呼び出しの待機する方法です。<xref:System.Threading.WaitHandle> は非同期呼び出しが完了すると通知され、<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを呼び出すことによってこれを待機できます。  
  
 例では、2 つのクラスを非同期的に呼び出されるメソッドを含むクラスで構成され、クラスを含む、 `Main` メソッドの呼び出しを行います。  
  
 詳細については、およびメソッドのデリゲートを使用して非同期呼び出しの例については、次を参照してください。 [Calling Synchronous Methods Asynchronously](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)します。  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncDelegate">
      <MemberSignature Language="C#" Value="public virtual object AsyncDelegate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期呼び出しが呼び出されたデリゲート オブジェクトを取得します。</summary>
        <value>非同期呼び出しが呼び出されたデリゲート オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> プロパティは、ユーザー定義のデリゲートの実際のクラスにキャストできます。  
  
 たとえば、非同期呼び出しを実行するために使用されたデリゲートは型 `MyDelegate`, にこのプロパティによって返されるデリゲートをキャストする必要があります `MyDelegate`します。 コールバック メソッドでは、デリゲートを呼び出すことができますし、 `EndInvoke` 非同期メソッド呼び出しの結果を取得するために、適切なシグネチャを持つメソッドです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A> を呼び出すために、非同期呼び出しを行うために使用されたデリゲートを取得するプロパティ `EndInvoke`します。 例のキャスト、 <xref:System.IAsyncResult>, 、コールバック メソッドの唯一のパラメーターには、 <xref:System.Runtime.Remoting.Messaging.AsyncResult> オブジェクトです。  
  
 例では、2 つのクラスを非同期的に呼び出されるメソッドを含むクラスで構成され、クラスを含む、 `Main` メソッドの呼び出しを行います。  
  
 方法の詳細についてはこのコールバックの例は、動作、および非同期的に、メソッドの呼び出しの例については、デリゲートの使用を参照してください [同期のメソッドを非同期に呼び出す](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)します。  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncProcessMessage">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Messaging.IMessageSink replySink) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageCtrl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="replySink" Type="System.Runtime.Remoting.Messaging.IMessageSink" />
      </Parameters>
      <Docs>
        <param name="msg">要求 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> インターフェイスです。</param>
        <param name="replySink">応答 <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> インターフェイスです。</param>
        <summary>
          <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> インターフェイスを実装します。</summary>
        <returns>値は返されません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncProcessMessage%2A> のメソッド、 <xref:System.Runtime.Remoting.Messaging.IMessageSink> インターフェイスには関係ない、 <xref:System.Runtime.Remoting.Messaging.AsyncResult> クラスです。 によって実装 <xref:System.Runtime.Remoting.Messaging.AsyncResult> スロー、 <xref:System.NotSupportedException>です。 代わりに、取得、 <xref:System.Runtime.Remoting.Messaging.AsyncResult> キャストして、 <xref:System.IAsyncResult> デリゲートを使用して実行される、非同期の呼び出しによって返されるインターフェイスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public virtual object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最後のパラメーターとして指定されたオブジェクトを取得、 <see langword="BeginInvoke" /> メソッドの呼び出しです。</summary>
        <value>最後のパラメーターとして指定されたオブジェクト、 <see langword="BeginInvoke" /> メソッドの呼び出しです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 詳細については、 `BeginInvoke` メソッドを参照してください [非同期プログラミングを使用してデリゲート](http://msdn.microsoft.com/ja-jp/38a345ca-6963-4436-9608-5c9defef9c64)します。  
  
   
  
## 例  
 次のコード例を示しますが、どのように <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> コールバック メソッドに情報を渡すプロパティを使用します。 最後のパラメーター、 `BeginInvoke` メソッド呼び出しは、コールバック メソッドは、出力メッセージを書式設定を使用している書式指定文字列。  
  
 例では、2 つのクラスを非同期的に呼び出されるメソッドを含むクラスで構成され、クラスを含む、 `Main` メソッドの呼び出しを行います。  
  
 方法の詳細についてはこのコールバックの例は、動作、および非同期的に、メソッドの呼び出しの例については、デリゲートの使用を参照してください [同期のメソッドを非同期に呼び出す](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)します。  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public virtual System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Threading.WaitHandle" /> を Win32 同期ハンドルをカプセル化し、各種の同期スキームを実装できるようにします。</summary>
        <value>A <see cref="T:System.Threading.WaitHandle" /> を Win32 同期ハンドルをカプセル化し、各種の同期スキームを実装できるようにします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Threading.WaitHandle> これによって返される非同期操作が完了したら、メソッドが自動的にシグナル通知します。  
  
 呼び出すと、待機ハンドルが自動的に閉じられません `EndInvoke` 非同期メソッド呼び出しを行うために使用したデリゲートでします。 待機ハンドルへのすべての参照を解放すると、ガベージ コレクションが待機ハンドルをクリアするときにシステム リソースが解放されます。 待機ハンドルを使用して操作が完了したらすぐに、システム リソースを解放して呼び出し、 <xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName> メソッドです。 破棄可能なオブジェクトを明示的に終了または破棄されるときに、ガベージ コレクションはより効率的に動作します。  
  
> [!CAUTION]
>  <xref:System.Threading.WaitHandle> に含まれている、 <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> 非同期呼び出しが完了するまで、現在のスレッドをブロックするプロパティを使用できます。 ただし、 <xref:System.Threading.WaitHandle> は無視、 <xref:System.AsyncCallback>, 中に指定されていた場合は、 `BeginInvoke` を呼び出します。 したがって、ここで、アプリケーションがシャット ダウンする前に、状況が発生、 <xref:System.AsyncCallback> の実行が完了場合でも、 <xref:System.Threading.WaitHandle> 使用非同期呼び出しが完了するまでブロックします。 このような場合の例は、の例を参照してください、 <xref:System.Runtime.Remoting.Messaging.AsyncResult> クラス、および削除、 <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> ステートメントです。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> を取得するプロパティ、 <xref:System.Threading.WaitHandle>, 、およびデリゲートの非同期呼び出しの待機する方法です。<xref:System.Threading.WaitHandle> は非同期呼び出しが完了すると通知され、<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドを呼び出すことによってこれを待機できます。  
  
 例では、2 つのクラスを非同期的に呼び出されるメソッドを含むクラスで構成され、クラスを含む、 `Main` メソッドの呼び出しを行います。  
  
 詳細については、およびメソッドのデリゲートを使用して非同期呼び出しの例については、次を参照してください。 [同期のメソッドを非同期に呼び出す](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)します。  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public virtual bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see langword="BeginInvoke" /> 呼び出しが同期的に完了しました。</summary>
        <value>
          <see langword="true" /> 場合、 <see langword="BeginInvoke" /> 呼び出しが同期的に、それ以外に完了しました <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 検出された場合、 `BeginInvoke` 呼び出しが同期的に完了しました、 <xref:System.AsyncCallback> デリゲート BeginInvoke を呼び出したスレッドが現在のスレッドであると考えられます。 ほとんどのプロバイダー、 <xref:System.IAsyncResult> インターフェイスの機能を使用しないと、既定値を返す `false`します。  
  
 現在の実装 <xref:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously%2A> は常に返します `false`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvokeCalled">
      <MemberSignature Language="C#" Value="public bool EndInvokeCalled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndInvokeCalled" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか <see langword="EndInvoke" /> が現在に対して呼び出された <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" />です。</summary>
        <value>
          <see langword="true" /> 場合 <see langword="EndInvoke" /> は現在で呼び出されて <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" />。 そうしないと、 <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReplyMessage">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.Messaging.IMessage GetReplyMessage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessage GetReplyMessage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessage</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>非同期呼び出しの応答メッセージを取得します。</summary>
        <returns>リモート オブジェクトに対するメソッド呼び出しへの応答を表す必要があるリモート処理メッセージです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> メソッドは、後にオブジェクトを返すことができます、 <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> メソッドが呼び出されます。<xref:System.Runtime.Remoting.Messaging.IMessage> に戻り値をキャストできる、 <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>です。  
  
 ただし、これらのメソッドのいずれかを直接呼び出す必要はありません。 使用するための .NET Framework リモート処理インフラストラクチャが用意されています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public virtual bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバーが呼び出しを完了したかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> サーバーには、呼び出しが完了した後それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サーバーは、合意された外部の任意のクライアントが指定したリソースを使用しないでくださいセマンティクスの共有を設定した後に、 <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> プロパティを `true`します。 したがって、後にリソースを破棄するクライアントに対して安全では、 <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> プロパティを返します。 `true`します。  
  
   
  
## 例  
 使用する例を次に示します、 <xref:System.IAsyncResult.IsCompleted%2A> のプロパティ、 <xref:System.Runtime.Remoting.Messaging.AsyncResult> によって返される `BeginInvoke` 非同期呼び出しが完了したときを検出します。 この方法は、ユーザー インターフェイスにサービスを提供するスレッドから非同期呼び出しを行う場合に使用します。 完了をポーリングすると、呼び出し元スレッドは、<xref:System.Threading.ThreadPool> スレッドで非同期呼び出しを実行しながら、実行を継続できます。  
  
 例では、2 つのクラスを非同期的に呼び出されるメソッドを含むクラスで構成され、クラスを含む、 `Main` メソッドの呼び出しを行います。  
  
 詳細については、およびメソッドのデリゲートを使用して非同期呼び出しの例については、次を参照してください。 [同期のメソッドを非同期に呼び出す](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)します。  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Remoting.Messaging.IMessageSink NextSink" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Messaging.AsyncResult.NextSink" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessageSink</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>シンク チェーン内の次のメッセージ シンクを取得します。</summary>
        <value>
          <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> シンク チェーンにシンクの次のメッセージを表すインターフェイスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在の実装 <xref:System.Runtime.Remoting.Messaging.AsyncResult.NextSink%2A> 返します `null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMessageCtrl">
      <MemberSignature Language="C#" Value="public virtual void SetMessageCtrl (System.Runtime.Remoting.Messaging.IMessageCtrl mc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMessageCtrl(class System.Runtime.Remoting.Messaging.IMessageCtrl mc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mc" Type="System.Runtime.Remoting.Messaging.IMessageCtrl" />
      </Parameters>
      <Docs>
        <param name="mc">
          <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> の現在のリモート メソッド呼び出しです。</param>
        <summary>セット、 <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> の現在のリモート メソッド呼び出しがディスパッチされた後に非同期メッセージを制御する方法を提供します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す必要はありません、 <xref:System.Runtime.Remoting.Messaging.AsyncResult.SetMessageCtrl%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncProcessMessage">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
      </Parameters>
      <Docs>
        <param name="msg">リモート オブジェクトのメソッドの呼び出しに応答メッセージ。</param>
        <summary>リモート オブジェクトのメソッドの呼び出しによって返される応答メッセージを同期的に処理します。</summary>
        <returns>
          <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> メソッドを実装して、 <xref:System.Runtime.Remoting.Messaging.IMessageSink> インターフェイスです。 このメソッドを直接呼び出す必要はありません。 これは使用するための .NET Framework リモート処理インフラストラクチャによってです。  
  
 <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> コンシューマー コードの <xref:System.AsyncCallback> を委任します。 また、設定、 <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage> によって返されるインスタンス、 <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A> メソッドです。 場合、 `msg` パラメーターのデータ型 <xref:System.Runtime.Remoting.Messaging.IMethodReturnMessage>, 、によって、同じオブジェクトが返される <xref:System.Runtime.Remoting.Messaging.AsyncResult.GetReplyMessage%2A>です。 それ以外の場合、リモート処理例外を含んでいる応答メッセージが返されます。  
  
 <xref:System.Runtime.Remoting.Messaging.AsyncResult.SyncProcessMessage%2A> によって返される値も変更され、 <xref:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>