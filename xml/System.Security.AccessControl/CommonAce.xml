<Type Name="CommonAce" FullName="System.Security.AccessControl.CommonAce">
  <TypeSignature Language="C#" Value="public sealed class CommonAce : System.Security.AccessControl.QualifiedAce" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CommonAce extends System.Security.AccessControl.QualifiedAce" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.CommonAce" />
  <AssemblyInfo>
    <AssemblyName>System.Security.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.QualifiedAce</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>アクセス制御エントリ \(ACE: Access Control Entry\) を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Security.AccessControl.CommonAce> class represents the eight most common ACE types:  
  
-   <xref:System.Security.AccessControl.AceType.AccessAllowed>  
  
-   <xref:System.Security.AccessControl.AceType.AccessAllowedCallback>  
  
-   <xref:System.Security.AccessControl.AceType.AccessDenied>  
  
-   <xref:System.Security.AccessControl.AceType.AccessDeniedCallback>  
  
-   <xref:System.Security.AccessControl.AceType.SystemAudit>  
  
-   <xref:System.Security.AccessControl.AceType.SystemAuditCallback>  
  
-   <xref:System.Security.AccessControl.AceType.SystemAlarm>  
  
-   <xref:System.Security.AccessControl.AceType.SystemAlarmCallback>  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommonAce (System.Security.AccessControl.AceFlags flags, System.Security.AccessControl.AceQualifier qualifier, int accessMask, System.Security.Principal.SecurityIdentifier sid, bool isCallback, byte[] opaque);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.AccessControl.AceFlags flags, valuetype System.Security.AccessControl.AceQualifier qualifier, int32 accessMask, class System.Security.Principal.SecurityIdentifier sid, bool isCallback, unsigned int8[] opaque) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.CommonAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="flags" Type="System.Security.AccessControl.AceFlags" />
        <Parameter Name="qualifier" Type="System.Security.AccessControl.AceQualifier" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="sid" Type="System.Security.Principal.SecurityIdentifier" />
        <Parameter Name="isCallback" Type="System.Boolean" />
        <Parameter Name="opaque" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="flags">新しいアクセス制御エントリ \(ACE: Access Control Entry\) の継承、継承の反映、および監査の各条件に関する情報を指定するフラグ。</param>
        <param name="qualifier">新しい ACE の用途。</param>
        <param name="accessMask">ACE のアクセス マスク。</param>
        <param name="sid">新しい ACE に関連付けられている <see cref="T:System.Security.Principal.SecurityIdentifier" />。</param>
        <param name="isCallback">
          <see langword="true" /> 新しい ACE がコールバック ACE 型であることを指定します。</param>
        <param name="opaque">新しい ACE に関連付けられている不透明なデータ。 非透過データは、コールバック ACE 型だけに使用できます。 この配列の長さの戻り値よりも大きくすることはできません、 <see cref="M:System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)" /> メソッドです。</param>
        <summary>
          <see cref="T:System.Security.AccessControl.CommonAce" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BinaryLength">
      <MemberSignature Language="C#" Value="public override int BinaryLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BinaryLength" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.CommonAce.BinaryLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Security.AccessControl.CommonAce" /> オブジェクトのバイナリ表現の長さ \(バイト単位\) を取得します。 この時間を使用する、 <see cref="M:System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)" /> ACL をバイナリ配列にマーシャ リングする前にメソッドです。</summary>
        <value>現在の <see cref="T:System.Security.AccessControl.CommonAce" /> オブジェクトのバイナリ表現の長さ \(バイト単位\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBinaryForm">
      <MemberSignature Language="C#" Value="public override void GetBinaryForm (byte[] binaryForm, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetBinaryForm(unsigned int8[] binaryForm, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryForm" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="binaryForm">先のバイト配列の内容、 <see cref="T:System.Security.AccessControl.CommonAce" /> オブジェクトをマーシャ リングします。</param>
        <param name="offset">マーシャリングの開始位置を表すオフセット。</param>
        <summary>
          <see cref="T:System.Security.AccessControl.CommonAce" /> オブジェクトのコンテンツを、指定したオフセットを開始位置として、指定したバイト配列にマーシャリングします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 負の値または全体を許可するように高すぎる <see cref="T:System.Security.AccessControl.CommonAce" /> にコピーされる、 <paramref name="binaryForm" /> 配列。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxOpaqueLength">
      <MemberSignature Language="C#" Value="public static int MaxOpaqueLength (bool isCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 MaxOpaqueLength(bool isCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isCallback" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isCallback">
          <see langword="true" /> 指定する、 <see cref="T:System.Security.AccessControl.CommonAce" /> オブジェクトがコールバック ACE 型です。</param>
        <summary>コールバック アクセス制御エントリ \(ACE\) の非透過データ BLOB の許容最大長を取得します。</summary>
        <returns>非透過データ BLOB に許容される長さ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>