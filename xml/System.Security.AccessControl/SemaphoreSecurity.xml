<Type Name="SemaphoreSecurity" FullName="System.Security.AccessControl.SemaphoreSecurity">
  <TypeSignature Language="C#" Value="public sealed class SemaphoreSecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SemaphoreSecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.SemaphoreSecurity" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Windows アクセス制御セキュリティを名前付きセマフォを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトが、名前付きシステム セマフォのアクセス権を指定し、アクセス試行を監査する方法を指定します。 によって表される各アクセス規則と、規則として、セマフォへのアクセス権が表される、 <xref:System.Security.AccessControl.SemaphoreAccessRule> オブジェクトです。 各監査規則は、 <xref:System.Security.AccessControl.SemaphoreAuditRule> オブジェクトです。  
  
 これには、セキュリティ保護可能な各オブジェクトに含まれる最大で 1 つ随意アクセス制御リスト \(DACL\) をセキュリティで保護されたオブジェクトと最大で 1 つシステム アクセス制御リスト \(SACL\) 指定するアクセス試行を監査するアクセスを制御する、基になる Windows セキュリティ システムがミラー化します。 DACL と SACL は、アクセスおよびユーザーとグループの監査を指定するアクセス制御エントリ \(ACE\) の一覧を並べ替えられます。 A <xref:System.Security.AccessControl.SemaphoreAccessRule> または <xref:System.Security.AccessControl.SemaphoreAuditRule> オブジェクトは 1 つ以上の ACE を表すことがあります。  
  
> [!NOTE]
>  A <xref:System.Threading.Semaphore> オブジェクトには、ローカル セマフォや名前付きシステム セマフォを表すことができます。 Windows のアクセス制御セキュリティは、名前付きシステム セマフォに対してのみ有効です。  
  
 <xref:System.Security.AccessControl.SemaphoreSecurity>, 、<xref:System.Security.AccessControl.SemaphoreAccessRule>, 、および <xref:System.Security.AccessControl.SemaphoreAuditRule> クラスは、Acl、Ace の実装の詳細を非表示にします。 17 のさまざまな ACE 型と正しく継承とアクセス権の反映を維持するための複雑さを無視できます。 また、これらのオブジェクトは次の一般的なアクセス制御エラーを回避する設計に。  
  
-   Null DACL のセキュリティ記述子を作成しています。 DACL を null 参照は、すべてのユーザーにサービス拒否攻撃の可能性のある作成のオブジェクトにアクセス規則を追加できます。 新しい <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトは常にすべてのユーザーのすべてのアクセスを拒否する空の DACL で始まります。  
  
-   Ace の正規の順序に違反しています。 DACL の ACE リストが正規順序で維持されない場合は、ユーザー誤ってを付与するアクセス セキュリティで保護されたオブジェクト。 たとえば、拒否するアクセス権は必要があります許可されるアクセス権の前に常に表示されます。<xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトは、内部で適切な順序を保持します。  
  
-   操作に使用するセキュリティ記述子のフラグをリソース マネージャーの管理のみの対象にする必要があります。  
  
-   ACE のフラグの無効な組み合わせを作成しています。  
  
-   継承された Ace を操作します。 継承と伝達は、アクセスおよび監査のルールに加えた変更に応答のリソース マネージャーによって処理されます。  
  
-   Acl に無意味な Ace を挿入します。  
  
 .NET セキュリティ オブジェクトでサポートされていない機能だけでは、次のようなアプリケーションの開発者の大部分は避ける必要が危険なアクティビティが。  
  
-   通常、リソース マネージャーで実行される低レベルのタスクです。  
  
-   追加または標準の順序を保持しない方法でアクセス制御エントリを削除します。  
  
 名前付きセマフォの Windows アクセス制御セキュリティを変更するには、使用、 <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> 取得するメソッド、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトです。 追加と削除の規則では、セキュリティ オブジェクトを変更し、 <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> メソッドを再添付します。  
  
> [!IMPORTANT]
>  対して行った変更、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトに名前付きセマフォのアクセス レベルは影響しませんが呼び出されるまで、 <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> メソッドを名前付きセマフォに変更されたセキュリティ オブジェクトを割り当てます。  
  
 1 つのセマフォのアクセス制御セキュリティをコピーするには、使用、 <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> 取得するメソッド、 <xref:System.Security.AccessControl.SemaphoreSecurity> 最初のセマフォのアクセスおよび監査規則を表すオブジェクトを使用して、 <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> メソッド、またはを受け取るコンス トラクター、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクト、2 つ目のセマフォにそれらの規則を割り当てる。  
  
 ユーザー セキュリティ記述子定義言語 \(SDDL\) への投資で使用して、 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> 、名前付きセマフォのアクセス ルールを設定するメソッドを <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> SDDL 形式のアクセス ルールを表す文字列を取得します。 これは、説明は、新規の開発は推奨されません。  
  
> [!NOTE]
>  Windows 98 または Windows Millennium Edition には、同期オブジェクト上のセキュリティはサポートされていません。  
  
   
  
## 例  
 次のコード例に示します間の分離 <xref:System.Security.AccessControl.AccessControlType.Allow> ルールと <xref:System.Security.AccessControl.AccessControlType.Deny> ルール、および互換性のあるルールで権限の組み合わせを示しています。 例を作成し、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを許可し、現在のユーザーのさまざまな権限を拒否するルールを追加し、ルールの結果のペアが表示されます。 例では、現在のユーザーに対して新しい権限を許可し、新しい権限が、既存のマージされることを示す結果を表示 <xref:System.Security.AccessControl.AccessControlType.Allow> ルール。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:System.Threading.Semaphore> オブジェクトです。 セキュリティ オブジェクトをアタッチする例を参照して <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>です。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.SemaphoreAccessRule" />
    <altmember cref="T:System.Security.AccessControl.SemaphoreAuditRule" />
    <altmember cref="T:System.Security.AccessControl.SemaphoreRights" />
    <altmember cref="M:System.Threading.Semaphore.GetAccessControl" />
    <altmember cref="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しい <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトは常にすべてのユーザーのすべてのアクセスを拒否する空の随意アクセス リスト \(DACL\) で始まります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このクラスは、Windows 98 または Windows Millennium Edition でサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="name">アクセス制御のセキュリティ規則が取得するには、システム セマフォの名前。</param>
        <param name="includeSections">組み合わせた <see cref="T:System.Security.AccessControl.AccessControlSections" /> を取得するセクションを指定するフラグ。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 指定された名前でシステム セマフォからのアクセス制御セキュリティ規則の指定されたセクションを持つクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターでは、最初に作成せずに、名前付きシステム セマフォのアクセス制御セキュリティを取得することができます、 <xref:System.Threading.Semaphore> オブジェクトです。  
  
 名前付きシステム オブジェクトを使用する場合、十分に注意してください。 という名前のシステム オブジェクトがあるかどうかは `name` セマフォではない、そのアクセス制御セキュリティを取得する可能性があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このクラスは、Windows 98 または Windows Millennium Edition でサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreSecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列挙体を取得、 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> クラスのアクセス権を表現するために使用します。</summary>
        <value>A <see cref="T:System.Type" /> を表すオブジェクト、 <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 列挙します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生するクラス、 <xref:System.Security.AccessControl.ObjectSecurity> クラスのオーバーライド、 <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> プロパティと戻り値を使用してアクセス権を表す型。 配列または複数のセキュリティ オブジェクトの種類が含まれているコレクションを使用する場合は、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切な列挙型を判断します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <see cref="T:System.Security.Principal.IdentityReference" /> 、ユーザーを識別する、またはにグループのルールが適用されます。</param>
        <param name="accessMask">ビットごとの組み合わせ <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 、許可または拒否するアクセス権を指定する値が整数にキャストします。</param>
        <param name="isInherited">名前付きセマフォは、の無意味な階層がないためです。</param>
        <param name="inheritanceFlags">名前付きセマフォは、の無意味な階層がないためです。</param>
        <param name="propagationFlags">名前付きセマフォは、の無意味な階層がないためです。</param>
        <param name="type">いずれか、 <see cref="T:System.Security.AccessControl.AccessControlType" /> 権限を許可または拒否するかどうかを指定する値。</param>
        <summary>指定したアクセス権、アクセス制御、およびフラグで指定されたユーザーの新しいアクセス制御規則を作成します。</summary>
        <returns>A <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 指定されたユーザーの指定された権限を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アクセス制御規則を作成することをお勧めのコンス トラクターを使用して、 <xref:System.Security.AccessControl.SemaphoreAccessRule> クラスです。  
  
> [!NOTE]
>  継承と伝達フラグは、名前付きセマフォに対しては、不必要に複雑になる、ルールのメンテナンスなど互換性があるそれ以外の場合、規則の組み合わせに干渉するために、このは推奨されないことを指定することも可能です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />, 、<paramref name="inheritanceFlags" />, 、<paramref name="propagationFlags" />, 、または <paramref name="type" /> 無効な値を指定します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="accessMask" /> 0 です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> 型のどちらも、 <see cref="T:System.Security.Principal.SecurityIdentifier" />, 、やなどの型の <see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreSecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>型を取得、 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> クラスのアクセス ルールを表現するために使用します。</summary>
        <value>A <see cref="T:System.Type" /> を表すオブジェクト、 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> クラスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生するクラス、 <xref:System.Security.AccessControl.ObjectSecurity> クラスのオーバーライド、 <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> プロパティと戻り値を使用して、アクセス ルールを表す型。 配列または複数のセキュリティ オブジェクトの種類が含まれているコレクションを使用する場合は、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切なアクセス規則の種類を決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AddAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加するアクセス制御規則。</param>
        <summary>使用する新しい規則をマージできる照合ルールを検索します。 何も見つからない場合は、新しい規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.AccessControl.SemaphoreSecurity.AddAccessRule%2A> メソッドは、同じユーザーまたはグループと同じ規則を検索 <xref:System.Security.AccessControl.AccessControlType> として `rule`します。 何も見つからない場合 `rule` が追加されます。 照合ルールが見つからないかどうかは、rights in `rule` は既存の規則にマージされます。  
  
   
  
## 例  
 次のコード例に示します間の分離 <xref:System.Security.AccessControl.AccessControlType.Allow> ルールと <xref:System.Security.AccessControl.AccessControlType.Deny> ルール、および互換性のあるルールで権限の組み合わせを示しています。 例を作成し、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを許可し、現在のユーザーのさまざまな権限を拒否するルールを追加し、ルールの結果のペアが表示されます。 例では、現在のユーザーに対して新しい権限を許可し、新しい権限が、既存のマージされることを示す結果を表示 <xref:System.Security.AccessControl.AccessControlType.Allow> ルール。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:System.Threading.Semaphore> オブジェクトです。 セキュリティ オブジェクトをアタッチする例を参照して <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>です。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AddAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する監査規則。 このルールで指定されたユーザーは、検索を決定します。</param>
        <summary>使用する新しい規則をマージできる監査規則を検索します。 何も見つからない場合は、新しい規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.AccessControl.SemaphoreSecurity.AddAuditRule%2A> メソッドを探してルールと同じユーザーまたはグループとして `rule`します。 何も見つからない場合 `rule` が追加されます。 照合ルールが見つからないかどうかでフラグ `rule` 既存のルールにマージされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <see cref="T:System.Security.Principal.IdentityReference" /> 、ユーザーを識別する、またはにグループのルールが適用されます。</param>
        <param name="accessMask">ビットごとの組み合わせ <see cref="T:System.Security.AccessControl.SemaphoreRights" /> を監査するアクセス権を指定する値が整数にキャストします。</param>
        <param name="isInherited">名前付きの待機ハンドルの無意味な階層がないためです。</param>
        <param name="inheritanceFlags">名前付きの待機ハンドルの無意味な階層がないためです。</param>
        <param name="propagationFlags">名前付きの待機ハンドルの無意味な階層がないためです。</param>
        <param name="flags">ビットごとの組み合わせ <see cref="T:System.Security.AccessControl.AuditFlags" /> 成功したアクセス、アクセスの失敗、またはその両方を監査するかどうかを指定する値。</param>
        <summary>監査へのアクセス権、および監査規則をトリガーする結果に規則が適用されるユーザーを指定して、新しい監査規則を作成します。</summary>
        <returns>A <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> 指定されたユーザーの指定した監査規則を表すオブジェクト。 メソッドの戻り値の型は、基本クラス <see cref="T:System.Security.AccessControl.AuditRule" />, 、戻り値は、派生クラスを安全にキャストすることができますが、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 監査規則を作成することをお勧めのコンス トラクターを使用して、 <xref:System.Security.AccessControl.SemaphoreAuditRule> クラスです。  
  
> [!NOTE]
>  継承と伝達フラグは、名前付きセマフォに対しては、それらを指定することも可能です。 これは使用しないで、不必要に複雑になる、ルールのメンテナンスなど互換性があるそれ以外の場合、規則の組み合わせに干渉するためです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />, 、<paramref name="inheritanceFlags" />, 、<paramref name="propagationFlags" />, 、または <paramref name="flags" /> 無効な値を指定します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="accessMask" /> 0 です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> 型のどちらも、 <see cref="T:System.Security.Principal.SecurityIdentifier" />, 、やなどの型の <see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreSecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>型を取得、 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 監査規則を表すクラスします。</summary>
        <value>A <see cref="T:System.Type" /> を表すオブジェクト、 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> クラスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生するクラス、 <xref:System.Security.AccessControl.ObjectSecurity> クラスのオーバーライド、 <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> プロパティと戻り値を使用して監査権限を表す型。 配列または複数のセキュリティ オブジェクトの種類が含まれているコレクションを使用する場合は、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切な監査規則の種類を決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> ユーザーを指定し、 <see cref="T:System.Security.AccessControl.AccessControlType" /> 検索、および一連のルール、一致する場合の継承と伝達のフラグに見つかると、互換性がある必要があります。 互換性のある規則から削除する権限を指定します。</param>
        <summary>同じユーザーがアクセス制御規則を検索し、 <see cref="T:System.Security.AccessControl.AccessControlType" /> \(許可または拒否\) ようなルールが見つかった場合、指定されたアクセス ルールに含まれている権限がそのから削除されます、指定されたルールとは互換性のある継承と伝達フラグを使用します。</summary>
        <returns>
          <see langword="true" /> 互換性のある規則が見つかった場合それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在 <xref:System.Security.AccessControl.SemaphoreSecurity> は同じユーザーと同じを持つルールの検索は <xref:System.Security.AccessControl.AccessControlType> として値 `rule`です。 このような規則が見つからないと、処理は行われませんおよび、メソッドが戻る `false`します。 照合ルールが見つからない場合は、継承との互換性フラグがチェックされてで指定されたフラグと互換性のため `rule`です。 互換性のある規則が見つからないと、処理は行われませんおよび、メソッドが戻る `false`します。 権限が指定された互換性フラグを含むルールが見つかった場合 `rule` 互換性のある規則から削除されますが返されます `true`します。 場合 `rule` 互換性のあるルールに含まれていない権限をこれらの権限に関する処理は行われません。 現在の全体の規則が削除される場合は、互換性のある規則ですべての権限が削除されて <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトです。  
  
> [!IMPORTANT]
>  これらを作成することで、セマフォのアクセス規則の継承と伝達のフラグを指定できますが、 <xref:System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory%2A> メソッド、お勧めしません。 継承と反映しないにとって意味を持つ名前付きセマフォは、し、アクセス ルールのメンテナンスより複雑なします。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule%2A> から権限を削除する方法、 <xref:System.Security.AccessControl.AccessControlType.Allow> でルール、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトです。 内の他の権限も示します `rule` は無視されます。  
  
 例を作成し、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトし、許可し、現在のユーザーのさまざまな権限を拒否する規則を追加します。 権限の許可を含める <xref:System.Security.AccessControl.SemaphoreRights.Modify>, 、<xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions>, 、および <xref:System.Security.AccessControl.SemaphoreRights.Synchronize>です。 現在のユーザーに関する新しいルールを作成しなど <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions> と <xref:System.Security.AccessControl.SemaphoreRights.TakeOwnership> 、および権限と、そのルールを使用、 <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule%2A> を削除する <xref:System.Security.AccessControl.SemaphoreRights.ReadPermissions> から、 <xref:System.Security.AccessControl.AccessControlType.Allow> でルール、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトです。 不要な <xref:System.Security.AccessControl.SemaphoreRights.TakeOwnership> 右 `rule` は無視されます。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:System.Threading.Semaphore> オブジェクトです。 セキュリティ オブジェクトをアタッチする例を参照して <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>です。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> ユーザーを指定し、 <see cref="T:System.Security.AccessControl.AccessControlType" /> を検索します。 このルールで指定された権限は無視されます。</param>
        <summary>同じユーザーが制御規則をアクセスするすべての検索と <see cref="T:System.Security.AccessControl.AccessControlType" /> \(許可または拒否\) 指定したと削除、見つかった場合にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトで同じユーザーと同じルールの検索 <xref:System.Security.AccessControl.AccessControlType> として値 `rule`です。 によって指定された権限 `rule` は、この検索を実行するときに無視されます。 照合ルールが見つからない場合、処理は行われません。  
  
   
  
## 例  
 次のコード例を示していますが、 <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll%2A> メソッドは、ユーザーに一致するすべてのルールを削除と <xref:System.Security.AccessControl.AccessControlType>, 、権限を無視します。  
  
 例を作成し、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを許可し、現在のユーザーのさまざまな権限を拒否するルールを追加しに追加の権利をマージ、 <xref:System.Security.AccessControl.AccessControlType.Allow> ルール。 所有権を現在のユーザーは、そのルールを使用して削除する新しいルールを作成し、 <xref:System.Security.AccessControl.AccessControlType.Allow> からルール、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトです。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:System.Threading.Semaphore> オブジェクトです。 セキュリティ オブジェクトをアタッチする例を参照して <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>です。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">削除する <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。</param>
        <summary>厳密に一致する指定されたアクセス制御規則を検索し、削除を見つかった場合は、そのします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ルールが削除されるは、完全に一致する場合にのみ `rule` フラグを含むすべての詳細にします。 同じユーザーが他のルールと <xref:System.Security.AccessControl.AccessControlType> は影響しません。  
  
> [!IMPORTANT]
>  以上基になるアクセス制御エントリ \(ACE\) およびこれらのエントリが分割またはユーザーのアクセスのセキュリティ規則を変更する場合に、必要に応じて、結合またはルールが 1 つを表します。 そのため、ルールが存在しなくで追加されたときに存在していた特定のフォームおよびそのケース、 <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> 方法はそれを削除することはできません。  
  
   
  
## 例  
 次のコード例を示していますが、 <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> メソッドが、ルールを削除するために厳密な一致を必要とし、許可し、権限を拒否するためのルールは、互いに独立しています。  
  
 例を作成し、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを許可し、現在のユーザーのさまざまな権限を拒否するルールを追加しに追加の権利をマージ、 <xref:System.Security.AccessControl.AccessControlType.Allow> アクセス規則。 元の渡します <xref:System.Security.AccessControl.AccessControlType.Allow> の規則を <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> メソッド、および何が削除されたことを示す結果を表示します。 例では、一致する規則を作成、 <xref:System.Security.AccessControl.AccessControlType.Allow> でルール、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトが正常に使用して、 <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific%2A> のルールを削除する方法です。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:System.Threading.Semaphore> オブジェクトです。 セキュリティ オブジェクトをアタッチする例を参照して <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>です。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> を検索して、ユーザーと一致する規則の場合の継承と伝達のフラグのセットを指定する場合は、互換性がある必要があります。 互換性のある規則から削除する権限を指定します。</param>
        <summary>監査の制御規則として、互換性のある継承および伝達フラグと、指定されたルールと同じユーザーの検索互換性のある規則が見つかった場合、指定されたルールに含まれる権限は、そこから削除されます。</summary>
        <returns>
          <see langword="true" /> 互換性のある規則が見つかった場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在 <xref:System.Security.AccessControl.SemaphoreSecurity> を同一のユーザーを持つ監査規則の検索 `rule`します。 このような規則が見つからないと、処理は行われませんおよび、メソッドが戻る `false`します。 照合ルールが見つからない場合は、継承との互換性フラグがチェックされてで指定されたフラグと互換性のため `rule`です。 互換性のある規則が見つからないと、処理は行われませんおよび、メソッドが戻る `false`します。 権限が指定された互換性フラグを含むルールが見つかった場合 `rule` 互換性のある規則から削除されますが返されます `true`します。 場合 `rule` 互換性のあるルールに含まれていない権限をこれらの権限に関する処理は行われません。 現在の全体の規則が削除される場合は、互換性のある規則ですべての権限が削除されて <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトです。  
  
> [!IMPORTANT]
>  これらを作成することで、セマフォ監査規則の継承と伝達のフラグを指定できますが、 <xref:System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory%2A> メソッド、お勧めしません。 継承と反映しないにとって意味を持つ名前付きセマフォは、し、監査規則の保守より複雑なします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> を検索するユーザーを指定します。 このルールで指定された権限は無視されます。</param>
        <summary>場合とすべての監査、指定されたルールと同じユーザーが規則の検索を発見し、それらを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在 <xref:System.Security.AccessControl.SemaphoreSecurity> 監査規則を持つユーザーと同じユーザーが検索 `rule`します。 によって指定された権限 `rule` は、この検索を実行するときに無視されます。 すべての照合ルールが削除されます。 照合ルールが見つからない場合、処理は行われません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">削除する <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />。</param>
        <summary>厳密に一致する指定された監査規則を検索し、削除を見つかった場合は、そのします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ルールが削除されるは、完全に一致する場合にのみ `rule` フラグを含むすべての詳細にします。 同じユーザーの場合は、その他の監査規則には影響しません。  
  
> [!IMPORTANT]
>  以上基になるアクセス制御エントリ \(ACE\) およびこれらのエントリが分割またはユーザーの監査のセキュリティの規則を変更する場合に、必要に応じて、結合またはルールが 1 つを表します。 そのため、ルールが存在しなくで追加されたときに存在していた特定のフォームおよびそのケース、 <xref:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific%2A> 方法はそれを削除することはできません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。 このルールで指定されたユーザーは、このルールが追加される前に削除する規則を決定します。</param>
        <summary>関係なく、指定されたルールと同じユーザーを持つすべてのアクセス制御規則を削除 <see cref="T:System.Security.AccessControl.AccessControlType" />, 、し、指定されたルールを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザーが、指定されたルールに一致するアクセス ルールがない場合 `rule` が追加されます。  
  
   
  
## 例  
 次のコード例に示す方法、 <xref:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule%2A> メソッドは、一致する指定された規則に一致するユーザーのすべての規則を置き換えます。  
  
 例を作成し、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトし、許可し、現在のユーザーのさまざまな権限を拒否する規則を追加します。 現在のユーザーのフル コントロールを許可しを使用して、新しいルールを作成し、 <xref:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule%2A> メソッドを新しい規則の両方の既存の規則を置換します。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:System.Threading.Semaphore> オブジェクトです。 セキュリティ オブジェクトをアタッチする例を参照して <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>です。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.SemaphoreAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.SemaphoreAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。 ユーザーと <see cref="T:System.Security.AccessControl.AccessControlType" /> この規則には、この規則を追加する前に削除の規則を決定します。</param>
        <summary>同じユーザーを持つすべてのアクセス制御規則を削除し、 <see cref="T:System.Security.AccessControl.AccessControlType" /> \(許可または拒否\)、指定されたルールとし、指定されたルールを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されたルールがある場合 <xref:System.Security.AccessControl.AccessControlType.Allow>, 、このメソッドの効果がすべて削除するには <xref:System.Security.AccessControl.AccessControlType.Allow> を指定されたルールに置き換えること、指定したユーザーの規則。 指定されたルールがある場合 <xref:System.Security.AccessControl.AccessControlType.Deny>, すべて <xref:System.Security.AccessControl.AccessControlType.Deny> 指定されたユーザーのルールは、指定されたルールに置き換えられます。  
  
 規則がないユーザーの場合と <xref:System.Security.AccessControl.AccessControlType> 指定のルールと一致する `rule` が追加されます。  
  
   
  
## 例  
 次のコード例に示す方法、 <xref:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule%2A> メソッドは両方のユーザーと一致するすべてのルールを削除し、 <xref:System.Security.AccessControl.AccessControlType> の `rule`, に置き換えられます `rule`します。  
  
 例を作成し、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトし、許可し、現在のユーザーのさまざまな権限を拒否する規則を追加します。 現在のユーザーのフル コントロールを許可しを使用して、新しいルールを作成し、 <xref:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule%2A> メソッドを既存の置換が新しいルールとルールを許可します。 アクセスを拒否するルールが影響を受けません。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:System.Threading.Semaphore> オブジェクトです。 セキュリティ オブジェクトをアタッチする例を参照して <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>です。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.SetAccessRule\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.SetAccessRule\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.SemaphoreAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.SemaphoreAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreSecurity.SetAuditRule(System.Security.AccessControl.SemaphoreAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.SemaphoreAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />。 このルールで指定されたユーザーは、このルールが追加される前に削除する規則を決定します。</param>
        <summary>すべてに関係なく、指定されたルールと同じユーザーが規則の監査を削除、 <see cref="T:System.Security.AccessControl.AuditFlags" /> 値に設定して、指定されたルールを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザーが、指定されたルールに一致する監査規則がない場合 `rule` が追加されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>