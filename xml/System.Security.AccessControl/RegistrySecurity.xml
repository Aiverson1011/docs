<Type Name="RegistrySecurity" FullName="System.Security.AccessControl.RegistrySecurity">
  <TypeSignature Language="C#" Value="public sealed class RegistrySecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistrySecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistrySecurity" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>レジストリ キーの Windows アクセス制御セキュリティを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトは、レジストリ キーに対するアクセス権を指定し、アクセス試行を監査する方法を指定します。 レジストリ キーへのアクセス権がによって表される各アクセス規則との規則で表され、 <xref:System.Security.AccessControl.RegistryAccessRule> オブジェクトです。 各監査規則は、 <xref:System.Security.AccessControl.RegistryAuditRule> オブジェクトです。  
  
 これには、セキュリティ保護可能な各オブジェクトに含まれる最大で 1 つ随意アクセス制御リスト \(DACL\) をセキュリティで保護されたオブジェクトと最大で 1 つシステム アクセス制御リスト \(SACL\) 指定するアクセス試行を監査するアクセスを制御する、基になる Windows セキュリティ システムがミラー化します。 DACL と SACL は、アクセスおよびユーザーとグループの監査を指定するアクセス制御エントリ \(ACE\) の一覧を並べ替えられます。 A <xref:System.Security.AccessControl.RegistryAccessRule> または <xref:System.Security.AccessControl.RegistryAuditRule> オブジェクトは 1 つ以上の ACE を表すことがあります。  
  
> [!NOTE]
>  Windows のアクセス制御セキュリティは、レジストリ キーにのみ適用できます。 キーに格納されている個別のキー\/値ペアにも適用することはできません。  
  
 <xref:System.Security.AccessControl.RegistrySecurity>, 、<xref:System.Security.AccessControl.RegistryAccessRule>, 、および <xref:System.Security.AccessControl.RegistryAuditRule> クラスは、Acl、Ace の実装の詳細を非表示にします。 17 のさまざまな ACE 型と正しく継承とアクセス権の反映を維持するための複雑さを無視できます。 また、これらのオブジェクトは次の一般的なアクセス制御エラーを回避する設計に。  
  
-   Null DACL のセキュリティ記述子を作成しています。 DACL を null 参照は、すべてのユーザーにサービス拒否攻撃の可能性のある作成のオブジェクトにアクセス規則を追加できます。 新しい <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトは常にすべてのユーザーのすべてのアクセスを拒否する空の DACL で始まります。  
  
-   Ace の正規の順序に違反しています。 DACL の ACE リストが正規順序で維持されない場合は、ユーザー誤ってを付与するアクセス セキュリティで保護されたオブジェクト。 たとえば、拒否するアクセス権は必要があります許可されるアクセス権の前に常に表示されます。<xref:System.Security.AccessControl.RegistrySecurity> オブジェクトは、内部で適切な順序を保持します。  
  
-   操作に使用するセキュリティ記述子のフラグをリソース マネージャーの管理のみの対象にする必要があります。  
  
-   ACE のフラグの無効な組み合わせを作成しています。  
  
-   継承された Ace を操作します。 継承と伝達は、アクセスおよび監査のルールに加えた変更に応答のリソース マネージャーによって処理されます。  
  
-   Acl に無意味な Ace を挿入します。  
  
 .NET セキュリティ オブジェクトでサポートされていない機能だけでは、次のようなアプリケーションの開発者の大部分は避ける必要が危険なアクティビティが。  
  
-   通常、リソース マネージャーで実行される低レベルのタスクです。  
  
-   追加または標準の順序を保持しない方法でアクセス制御エントリを削除します。  
  
 レジストリ キーの Windows アクセス制御セキュリティを変更するには、使用、 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> 取得するメソッド、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトです。 追加と削除の規則では、セキュリティ オブジェクトを変更し、 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> メソッドを再添付します。  
  
> [!IMPORTANT]
>  対して行った変更、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトに、レジストリ キーのアクセス レベルは影響しませんが呼び出されるまで、 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> レジストリ キーに変更されたセキュリティ オブジェクトを割り当てる方法です。  
  
 間、1 つのレジストリ キーからのアクセス制御セキュリティをコピーを使用して、 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> 取得するメソッド、 <xref:System.Security.AccessControl.RegistrySecurity> 最初のレジストリ キーのアクセスおよび監査規則を表すオブジェクトをクリックして、 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> にそれらの規則を 2 番目のレジストリ キーに割り当てる方法です。 ルールを 2 番目のレジストリ キーに割り当てることも、 <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=fullName> または <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=fullName> を受け取るメソッド、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクト パラメーターです。  
  
 ユーザー セキュリティ記述子定義言語 \(SDDL\) への投資で使用して、 <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> レジストリ キーのアクセス ルールを設定するメソッドを <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> SDDL 形式のアクセス ルールを表す文字列を取得します。 これは、説明は、新規の開発は推奨されません。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初の例は追加や削除、際の互換性のあるルール マージし、2 番目に示す追加と削除の規則の継承と伝達のフラグの影響です。  
  
 例 1  
  
 次のコード例に示す方法、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> メソッドは、互換性のある規則から権限を削除方法、および <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> メソッドは、互換性のあるルールに権限をマージします。  
  
 例を作成し、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトし、現在のユーザーを許可するルールを追加 <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=fullName> 権限です。 ユーザーを許可するルールを作成し <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=fullName>, し、同じ継承と伝達の権限を使用して最初のルールと、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> からこの新しいルールを削除する方法、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトです。<xref:System.Security.AccessControl.RegistryRights.SetValue> 構成要素は、 <xref:System.Security.AccessControl.RegistryRights.ReadKey>, ので、互換性のある規則から削除されます。 内のルール、 <xref:System.Security.AccessControl.RegistrySecurity> の残りの構成要素をと共に、オブジェクトが表示されます <xref:System.Security.AccessControl.RegistryRights.ReadKey>します。  
  
 このコード例を呼び出して、 <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> にマージするメソッド、 <xref:System.Security.AccessControl.RegistryRights.SetValue> 内のルールに右、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトです。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:Microsoft.Win32.RegistryKey> オブジェクトです。 このセクションでは、2 番目の例は、セキュリティ オブジェクトをアタッチおよびは <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> と <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>です。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 例 2  
  
 次のコード例では、継承と伝達を行うアクセス規則を示します。 例を作成し、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを作成しを持つ 2 つの規則を追加、 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> フラグ。 最初のルールを持たない伝達フラグ、2 つ目があるときに <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> と <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>です。  
  
 プログラムは、表示内のルール、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトを使用して、 <xref:System.Security.AccessControl.RegistrySecurity> 、サブキーを作成するオブジェクト。 プログラムは、子サブキーと孫サブキーを作成し、各サブキーのセキュリティを表示します。 最後に、プログラムでは、テスト キーを削除します。  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistrySecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Security.AccessControl.RegistrySecurity" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A new <xref:System.Security.AccessControl.RegistrySecurity> object always starts with an empty discretionary access list \(DACL\), which denies all access for all users.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列挙型を取得、 <see cref="T:System.Security.AccessControl.RegistrySecurity" /> クラスのアクセス権を表現するために使用します。</summary>
        <value>A <see cref="T:System.Type" /> を表すオブジェクト、 <see cref="T:System.Security.AccessControl.RegistryRights" /> 列挙します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生するクラス、 <xref:System.Security.AccessControl.ObjectSecurity> クラスのオーバーライド、 <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> プロパティと戻り値を使用してアクセス権を表す型。 配列または複数のセキュリティ オブジェクトの種類が含まれているコレクションを使用する場合は、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切な列挙型を判断します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <see cref="T:System.Security.Principal.IdentityReference" /> 、ユーザーを識別する、またはにグループのルールが適用されます。</param>
        <param name="accessMask">ビットごとの組み合わせ <see cref="T:System.Security.AccessControl.RegistryRights" /> 、許可または拒否するアクセス権を指定する値が整数にキャストします。</param>
        <param name="isInherited">ルールを継承するかどうかを指定するブール値。</param>
        <param name="inheritanceFlags">ビットごとの組み合わせ <see cref="T:System.Security.AccessControl.InheritanceFlags" /> のサブキーによってルールを継承する方法を指定する値。</param>
        <param name="propagationFlags">ビットごとの組み合わせ <see cref="T:System.Security.AccessControl.PropagationFlags" /> サブキーによってルールを継承する方法を変更する値。 意味のない場合の値 <c>inheritanceFlags</c> は <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />です。</param>
        <param name="type">いずれか、 <see cref="T:System.Security.AccessControl.AccessControlType" /> 権限を許可または拒否するかどうかを指定する値。</param>
        <summary>指定したアクセス権、アクセス制御、およびフラグで指定されたユーザーの新しいアクセス制御規則を作成します。</summary>
        <returns>A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 指定されたユーザーの指定された権限を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アクセス制御規則を作成することをお勧めのコンス トラクターを使用して、 <xref:System.Security.AccessControl.RegistryAccessRule> クラスです。  
  
> [!NOTE]
>  指定できますが、 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=fullName> フラグは、その際に意味がありません。 アクセス制御のために、サブキーの名前と値のペアは個別のオブジェクトではないです。 名前と値のペアへのアクセス権は、サブキーの権限によって制御されます。 さらに、すべてのサブキーがコンテナーであるため \(つまりがあるその他のサブキー\)、によるを受けていないこと、 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグ。 最後に、指定する、 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 通常の組み合わせの互換性のある規則と競合しているためにフラグが、ルールのメンテナンスに不必要に複雑にします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />, 、<paramref name="inheritanceFlags" />, 、<paramref name="propagationFlags" />, 、または <paramref name="type" /> 無効な値を指定します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="accessMask" /> 0 です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> 型のどちらも、 <see cref="T:System.Security.Principal.SecurityIdentifier" />, 、やなどの型の <see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>型を取得、 <see cref="T:System.Security.AccessControl.RegistrySecurity" /> クラスのアクセス ルールを表現するために使用します。</summary>
        <value>A <see cref="T:System.Type" /> を表すオブジェクト、 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> クラスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生するクラス、 <xref:System.Security.AccessControl.ObjectSecurity> クラスのオーバーライド、 <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> プロパティと戻り値を使用して、アクセス ルールを表す型。 配列または複数のセキュリティ オブジェクトの種類が含まれているコレクションを使用する場合は、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切なアクセス規則の種類を決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加するアクセス制御規則。</param>
        <summary>使用する新しい規則をマージできる対応するアクセス制御を検索します。 何も見つからない場合は、新しい規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> メソッドは、同じユーザーまたはグループと同じ規則を検索 <xref:System.Security.AccessControl.AccessControlType> として `rule`します。 何も見つからない場合 `rule` が追加されます。 照合ルールが見つからないかどうかは、rights in `rule` は既存の規則にマージされます。  
  
 ルールは、別の継承フラグが設定されている場合、マージできません。 たとえば、ユーザーには、継承フラグなしで読み取りアクセスが許可された場合と <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> サブキーの継承を持つユーザーの書き込みアクセス権を付与する規則を追加するために使用 \(<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=fullName>\)、2 つのルールをマージすることはできません。  
  
 さまざまなルール <xref:System.Security.AccessControl.AccessControlType> 値はマージされません。  
  
 ルールは、最も経済的な方法で権限を表現します。 たとえば、ユーザーが持っている <xref:System.Security.AccessControl.RegistryRights.QueryValues>, 、<xref:System.Security.AccessControl.RegistryRights.Notify> と <xref:System.Security.AccessControl.RegistryRights.ReadPermissions> 権限、および、許可するルールを追加 <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> 、権限の構成要素であるすべての部分をユーザーが持っている <xref:System.Security.AccessControl.RegistryRights.ReadKey> 権限です。 ユーザーの権利をクエリする場合を含むルールが表示されます <xref:System.Security.AccessControl.RegistryRights.ReadKey> 権限です。 同様に、削除した場合 <xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys> の他の構成要素の権限 <xref:System.Security.AccessControl.RegistryRights.ReadKey> 権限は再表示されます。  
  
   
  
## 例  
 次のコード例は、レジストリ アクセス規則を作成しに追加、 <xref:System.Security.AccessControl.RegistrySecurity> 許可し、権限を拒否するルールは、同じ互換性のあるルールの中には別方法の種類を示すオブジェクトをマージします。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:Microsoft.Win32.RegistryKey> オブジェクトです。 セキュリティ オブジェクトをアタッチする例を参照して <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> と <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>です。  
  
 継承と伝達フラグを示すコード例を参照して、 <xref:System.Security.AccessControl.RegistryAccessRule> クラスです。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する監査規則。 このルールで指定されたユーザーは、検索を決定します。</param>
        <summary>使用する新しい規則をマージできる監査規則を検索します。 何も見つからない場合は、新しい規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> メソッドを探してルールと同じユーザーまたはグループとして `rule`します。 何も見つからない場合 `rule` が追加されます。 照合ルールが見つからないかどうかでフラグ `rule` 既存のルールにマージされます。  
  
 ルールは、別の継承フラグが設定されている場合、マージできません。 継承フラグなしでの特定のユーザーのキーへの書き込み試行が失敗した場合の監査などと <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A> を使用してアクセス許可を変更する試みが失敗したなサブキーの継承を持つが、同じユーザーを監査することを指定するルールを追加 \(<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=fullName>\)、2 つのルールをマージすることはできません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference">
          <see cref="T:System.Security.Principal.IdentityReference" /> 、ユーザーを識別する、またはにグループのルールが適用されます。</param>
        <param name="accessMask">ビットごとの組み合わせ <see cref="T:System.Security.AccessControl.RegistryRights" /> を監査するアクセス権を指定する値が整数にキャストします。</param>
        <param name="isInherited">ルールを継承するかどうかを指定するブール値。</param>
        <param name="inheritanceFlags">ビットごとの組み合わせ <see cref="T:System.Security.AccessControl.InheritanceFlags" /> のサブキーによってルールを継承する方法を指定する値。</param>
        <param name="propagationFlags">ビットごとの組み合わせ <see cref="T:System.Security.AccessControl.PropagationFlags" /> サブキーによってルールを継承する方法を変更する値。 意味のない場合の値 <c>inheritanceFlags</c> は <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />です。</param>
        <param name="flags">ビットごとの組み合わせ <see cref="T:System.Security.AccessControl.AuditFlags" /> 成功したアクセス、アクセスの失敗、またはその両方を監査するかどうかを指定する値。</param>
        <summary>規則を適用、監査、継承の規則の伝達およびへのアクセス権をユーザーと、ルールをトリガーする結果を指定して、新しい監査規則を作成します。</summary>
        <returns>A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> に指定したフラグの指定されたユーザーの指定した監査規則を表すオブジェクト。 メソッドの戻り値の型は、基本クラス <see cref="T:System.Security.AccessControl.AuditRule" />, 、戻り値は、派生クラスを安全にキャストすることができますが、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 監査規則を作成することをお勧めのコンス トラクターを使用して、 <xref:System.Security.AccessControl.RegistryAuditRule> クラスです。  
  
> [!NOTE]
>  指定できますが、 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=fullName> フラグは、その際に意味がありません。 監査の管理のためは、サブキーの名前と値のペアと、独立したオブジェクトではありません。 名前と値のペアに対する監査権限は、サブキーの権限によって制御されます。 さらに、すべてのサブキーがコンテナーであるため \(つまりがあるその他のサブキー\)、によるを受けていないこと、 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> フラグ。 最後に、指定する、 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 通常の組み合わせの互換性のある規則と競合しているためにフラグが、ルールのメンテナンスに不必要に複雑にします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />, 、<paramref name="inheritanceFlags" />, 、<paramref name="propagationFlags" />, 、または <paramref name="flags" /> 無効な値を指定します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="accessMask" /> 0 です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" /> 型のどちらも、 <see cref="T:System.Security.Principal.SecurityIdentifier" />, 、やなどの型の <see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>型を取得、 <see cref="T:System.Security.AccessControl.RegistrySecurity" /> 監査規則を表すクラスします。</summary>
        <value>A <see cref="T:System.Type" /> を表すオブジェクト、 <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> クラスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生するクラス、 <xref:System.Security.AccessControl.ObjectSecurity> クラスのオーバーライド、 <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> プロパティと戻り値を使用して監査権限を表す型。 配列または複数のセキュリティ オブジェクトの種類が含まれているコレクションを使用する場合は、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切な監査規則の種類を決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> ユーザーを指定し、 <see cref="T:System.Security.AccessControl.AccessControlType" /> 検索、および一連のルール、一致する場合の継承と伝達のフラグに見つかると、互換性がある必要があります。 互換性のある規則から削除する権限を指定します。</param>
        <summary>同じユーザーがアクセス制御規則を検索し、 <see cref="T:System.Security.AccessControl.AccessControlType" /> \(許可または拒否\) このようなルールが見つかった場合、指定されたアクセス ルールに含まれている権限から削除されます指定のアクセス ルールとは互換性のある継承と伝達フラグを使用します。</summary>
        <returns>
          <see langword="true" /> 互換性のある規則が見つかった場合それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在 <xref:System.Security.AccessControl.RegistrySecurity> は同じユーザーと同じを持つルールの検索は <xref:System.Security.AccessControl.AccessControlType> として値 `rule`です。 このような規則が見つからないと、処理は行われませんおよび、メソッドが戻る `false`します。 照合ルールが見つからない場合は、継承との互換性フラグがチェックされてで指定されたフラグと互換性のため `rule`です。 互換性のある規則が見つからないと、処理は行われませんおよび、メソッドが戻る `false`します。 権限が指定された互換性フラグを含むルールが見つかった場合 `rule` 互換性のある規則から削除されますが返されます `true`します。 場合 `rule` 互換性のあるルールに含まれていない権限をこれらの権限に関する処理は行われません。 現在の全体の規則が削除される場合は、互換性のある規則ですべての権限が削除されて <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトです。  
  
   
  
## 例  
 次のコード例に示す方法、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> メソッドは、互換性のある規則から権限を削除方法、および <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> メソッドは、互換性のあるルールに権限をマージします。  
  
 例を作成し、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトし、現在のユーザーを許可するルールを追加 <xref:System.Security.AccessControl.RegistryRights.ReadKey?displayProperty=fullName> 権限です。 ユーザーを許可するルールを作成し <xref:System.Security.AccessControl.RegistryRights.SetValue?displayProperty=fullName>, し、同じ継承と伝達の権限を使用して最初のルールと、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> からこの新しいルールを削除する方法、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトです。<xref:System.Security.AccessControl.RegistryRights.SetValue> 構成要素は、 <xref:System.Security.AccessControl.RegistryRights.ReadKey>, ので、互換性のある規則から削除されます。 内のルール、 <xref:System.Security.AccessControl.RegistrySecurity> の残りの構成要素をと共に、オブジェクトが表示されます <xref:System.Security.AccessControl.RegistryRights.ReadKey>します。  
  
 このコード例を呼び出して、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> にマージするメソッド、 <xref:System.Security.AccessControl.RegistryRights.SetValue> 内のルールに右、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトです。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:Microsoft.Win32.RegistryKey> オブジェクトです。 このセクションでは、2 番目の例は、セキュリティ オブジェクトをアタッチおよびは <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName><xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>します。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> ユーザーを指定し、 <see cref="T:System.Security.AccessControl.AccessControlType" /> を検索します。 権限、継承フラグ、またはこの規則で指定された伝達フラグは無視されます。</param>
        <summary>同じユーザーが制御規則をアクセスするすべての検索と <see cref="T:System.Security.AccessControl.AccessControlType" /> \(許可または拒否\) 指定したと削除、見つかった場合にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在 <xref:System.Security.AccessControl.RegistrySecurity> いる同じユーザーと同じ規則が検索 <xref:System.Security.AccessControl.AccessControlType> として値 `rule`です。 すべての権利、継承フラグ、または伝達フラグで指定された `rule` は、この検索を実行するときに無視されます。 照合ルールが見つからない場合、処理は行われません。  
  
 たとえば、ユーザーに別の継承と伝達フラグを使用して、さまざまな権限を許可する複数のルールがある場合は、削除できますこれらのルールを作成して、 <xref:System.Security.AccessControl.RegistryAccessRule> ユーザーを示すオブジェクトと <xref:System.Security.AccessControl.AccessControlType.Allow?displayProperty=fullName>, では、任意の権限とフラグ、および受け渡しするルールを、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> メソッドです。  
  
   
  
## 例  
 次のコード例を示していますが、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> メソッドは、ユーザーに一致するすべてのルールを削除および <xref:System.Security.AccessControl.AccessControlType>, 、権限とフラグを無視しています。  
  
 例を作成し、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトし、を可能にする別の継承と伝達フラグと、現在のユーザーのさまざまな権限を拒否する規則を追加します。 新しい規則を所有権を取得する現在のユーザーは、渡すという規則を作成し、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A> アクセスを許可する 2 つのルールを削除する方法です。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:Microsoft.Win32.RegistryKey> オブジェクトです。 参照してください、 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> メソッドおよび <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> メソッドです。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">削除する <see cref="T:System.Security.AccessControl.RegistryAccessRule" />。</param>
        <summary>厳密に一致する指定されたアクセス制御規則を検索し、削除を見つかった場合は、そのします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ルールが削除されるは、完全に一致する場合にのみ `rule` フラグを含むすべての詳細にします。 同じユーザーが他のルールと <xref:System.Security.AccessControl.AccessControlType> は影響しません。  
  
> [!IMPORTANT]
>  以上基になるアクセス制御エントリ \(ACE\) およびこれらのエントリが分割またはユーザーのアクセスのセキュリティ規則を変更する場合に、必要に応じて、結合またはルールが 1 つを表します。 そのため、ルールが存在しなくで追加されたときに存在していた特定のフォームおよびそのケース、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> 方法はそれを削除することはできません。  
  
   
  
## 例  
 次のコード例を示していますが、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> メソッドが正確に一致した場合にのみ、ルールを削除します。  
  
 この例では、異なる権限を許可する 2 つのルールを作成します。 規則はあるので、1 つ目とマージされる 2 番目のルールが追加されたときに、互換性の継承と伝達フラグです。 呼び出しの例、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> 最初のルールを指定して、メソッドと一致するルールがありませんので、規則がマージされます。 次、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> 結合ルールと最後に呼び出しからの削除\] の 2 番目のルールにメソッド、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A> 最初のルールを削除する方法です。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:Microsoft.Win32.RegistryKey> オブジェクトです。 参照してください、 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> メソッドおよび <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> メソッドです。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> を検索して、ユーザーと一致する規則の場合の継承と伝達のフラグのセットを指定する場合は、互換性がある必要があります。 互換性のある規則から削除する権限を指定します。</param>
        <summary>監査の制御規則として、互換性のある継承および伝達フラグと、指定されたルールと同じユーザーの検索互換性のある規則が見つかった場合、指定されたルールに含まれる権限は、そこから削除されます。</summary>
        <returns>
          <see langword="true" /> 互換性のある規則が見つかった場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在 <xref:System.Security.AccessControl.RegistrySecurity> を同一のユーザーを持つ監査規則の検索 `rule`します。 このような規則が見つからないと、処理は行われませんおよび、メソッドが戻る `false`します。 照合ルールが見つからない場合は、継承との互換性フラグがチェックされてで指定されたフラグと互換性のため `rule`です。 互換性のある規則が見つからないと、処理は行われませんおよび、メソッドが戻る `false`します。 権限が指定された互換性フラグを含むルールが見つかった場合 `rule` 互換性のある規則から削除されますが返されます `true`します。 場合 `rule` 互換性のあるルールに含まれていない権限をこれらの権限に関する処理は行われません。 現在の全体の規則が削除される場合は、互換性のある規則ですべての権限が削除されて <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">A <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> を検索するユーザーを指定します。 権限、継承フラグ、またはこの規則で指定された伝達フラグは無視されます。</param>
        <summary>場合とすべての監査、指定されたルールと同じユーザーが規則の検索を発見し、それらを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在 <xref:System.Security.AccessControl.RegistrySecurity> 監査規則を持つユーザーと同じユーザーが検索 `rule`します。 すべての権利、継承フラグ、または伝達フラグで指定された `rule` は、この検索を実行するときに無視されます。 照合ルールが見つからない場合、処理は行われません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">削除する <see cref="T:System.Security.AccessControl.RegistryAuditRule" />。</param>
        <summary>厳密に一致する指定された監査規則を検索し、削除を見つかった場合は、そのします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ルールが削除されるは、完全に一致する場合にのみ `rule` フラグを含むすべての詳細にします。 同じユーザーの場合は、その他の監査規則には影響しません。  
  
> [!IMPORTANT]
>  以上基になるアクセス制御エントリ \(ACE\) およびこれらのエントリが分割またはユーザーの監査のセキュリティの規則を変更する場合に、必要に応じて、結合またはルールが 1 つを表します。 そのため、ルールが存在しなくで追加されたときに存在していた特定のフォームおよびそのケース、 <xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A> 方法はそれを削除することはできません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.RegistryAccessRule" />。 このルールで指定されたユーザーは、このルールが追加される前に削除する規則を決定します。</param>
        <summary>関係なく、指定されたルールと同じユーザーを持つすべてのアクセス制御規則を削除 <see cref="T:System.Security.AccessControl.AccessControlType" />, 、し、指定されたルールを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザーが、指定されたルールに一致するアクセス ルールがない場合 `rule` が追加されます。  
  
   
  
## 例  
 次のコード例に示す方法、 <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> メソッドは、一致する指定された規則に一致するユーザーのすべての規則を置き換えます。  
  
 例を作成し、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトし、を可能にする別の継承と伝達フラグと、現在のユーザーのさまざまな権限を拒否する規則を追加します。 使用して、キーを読み取る場合にのみ、現在のユーザーを許可する新しい規則を作成し、 <xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A> メソッドをユーザーのすべてのルールを削除し、新しいルールに置き換えます。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:Microsoft.Win32.RegistryKey> オブジェクトです。 参照してください、 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> メソッドおよび <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> メソッドです。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.ResetAccessRule\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.ResetAccessRule\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.RegistryAccessRule" />。 ユーザーと <see cref="T:System.Security.AccessControl.AccessControlType" /> この規則には、この規則を追加する前に削除の規則を決定します。</param>
        <summary>同じユーザーを持つすべてのアクセス制御規則を削除し、 <see cref="T:System.Security.AccessControl.AccessControlType" /> \(許可または拒否\)、指定されたルールとし、指定されたルールを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されたルールがある場合 <xref:System.Security.AccessControl.AccessControlType.Allow>, 、このメソッドの効果がすべて削除するには <xref:System.Security.AccessControl.AccessControlType.Allow> を指定されたルールに置き換えること、指定したユーザーの規則。 指定されたルールがある場合 <xref:System.Security.AccessControl.AccessControlType.Deny>, すべて <xref:System.Security.AccessControl.AccessControlType.Deny> 指定されたユーザーのルールは、指定されたルールに置き換えられます。  
  
 規則がないユーザーの場合と <xref:System.Security.AccessControl.AccessControlType> 指定のルールと一致する `rule` が追加されます。  
  
   
  
## 例  
 次のコード例を示していますが、 <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> メソッドは両方のユーザーと一致するすべてのルールを削除し、 <xref:System.Security.AccessControl.AccessControlType> の `rule`, 、権限と、フラグを無視し、それらが置き換えられます `rule`します。  
  
 例を作成し、 <xref:System.Security.AccessControl.RegistrySecurity> オブジェクトし、を可能にする別の継承と伝達フラグと、現在のユーザーのさまざまな権限を拒否する規則を追加します。 使用して、キーを読み取る場合にのみ、現在のユーザーを許可する新しい規則を作成し、 <xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A> アクセスを許可する 2 つのルールを削除して、新しいルールに置き換える方法です。 アクセスを拒否するルールが影響を受けません。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:Microsoft.Win32.RegistryKey> オブジェクトです。 参照してください、 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> メソッドおよび <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> メソッドです。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.SetAccessRule\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.SetAccessRule\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.RegistryAuditRule" />。 このルールで指定されたユーザーは、このルールが追加される前に削除する規則を決定します。</param>
        <summary>すべてに関係なく、指定されたルールと同じユーザーが規則の監査を削除、 <see cref="T:System.Security.AccessControl.AuditFlags" /> 値に設定して、指定されたルールを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザーが、指定されたルールに一致する監査規則がない場合 `rule` が追加されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>