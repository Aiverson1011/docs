<Type Name="SemaphoreAccessRule" FullName="System.Security.AccessControl.SemaphoreAccessRule">
  <TypeSignature Language="C#" Value="public sealed class SemaphoreAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SemaphoreAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.SemaphoreAccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ユーザーまたはグループに対して許可または拒否のアクセス権のセットを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> クラスは、名前付きシステム セマフォでの Windows アクセス制御セキュリティを管理するために、.NET Framework が提供するクラスのセットのいずれかです。 これらのクラスとそれらのリレーションシップを基になる Windows アクセス制御構造の概要については、次を参照してください。 <xref:System.Security.AccessControl.SemaphoreSecurity>します。  
  
> [!NOTE]
>  Windows のアクセス制御セキュリティは、名前付きシステム セマフォに対してのみ有効です。 場合、 <xref:System.Threading.Semaphore> オブジェクトは、ローカル セマフォを表す、アクセス制御は使用されません。  
  
 名前付きセマフォに現在適用されているルールの一覧を取得する、 <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> 取得するメソッド、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを使用してその <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> メソッドのコレクションを取得する <xref:System.Security.AccessControl.SemaphoreAccessRule> オブジェクトです。  
  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> オブジェクトは、基になる随意アクセス制御リスト \(DACL\) のアクセス制御エントリと 1 対 1 ではマップできません。 セマフォのすべてのアクセス規則のセットを取得するときに、セットには、すべてのアクセス制御エントリを表すために必要な現在のルールの最小数が含まれます。  
  
> [!NOTE]
>  適用規則を削除すると基になるアクセス制御エントリを変更します。 規則の情報は、可能であれば、アクセス制御エントリの最小数を維持するために結合されます。 したがって、現在のルールの一覧を読み取るときに、追加したすべてのルールの一覧とまったく同じ体裁に可能性がありますとは限りません。  
  
 使用する <xref:System.Security.AccessControl.SemaphoreAccessRule> オブジェクトをユーザーまたはグループを許可または拒否するアクセス権を指定します。 A <xref:System.Security.AccessControl.SemaphoreAccessRule> 表しますアクセスを許可または拒否にアクセスすることはありません両方を常にオブジェクトです。  
  
 名前付きシステム セマフォにルールを適用するには、使用、 <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> 取得するメソッド、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトです。 変更、 <xref:System.Security.AccessControl.SemaphoreSecurity> 、規則を追加し、使用してそのメソッドを使用して、オブジェクト、 <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> セキュリティ オブジェクトを再アタッチする方法です。  
  
> [!IMPORTANT]
>  対して行った変更、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトに名前付きセマフォのアクセス レベルは影響しませんが呼び出されるまで、 <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> メソッドを名前付きセマフォに変更されたセキュリティ オブジェクトを割り当てます。  
  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> オブジェクトは変更できません。 メソッドを使用して、セマフォのセキュリティが変更された、 <xref:System.Security.AccessControl.SemaphoreSecurity> ルールを追加または削除するクラス。 これを行うと、基になるアクセス制御エントリが変更されます。  
  
> [!NOTE]
>  Windows 98 または Windows Millennium Edition には、同期オブジェクト上のセキュリティはサポートされていません。  
  
   
  
## 例  
 次のコード例に示します間の分離 <xref:System.Security.AccessControl.AccessControlType.Allow> ルールと <xref:System.Security.AccessControl.AccessControlType.Deny> ルール、および互換性のあるルールで権限の組み合わせを示しています。 例を作成し、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを許可し、現在のユーザーのさまざまな権限を拒否するルールを追加し、ルールの結果のペアが表示されます。 例では、現在のユーザーに対して新しい権限を許可し、新しい権限が、既存のマージされることを示す結果を表示 <xref:System.Security.AccessControl.AccessControlType.Allow> ルール。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:System.Threading.Semaphore> オブジェクトです。 セキュリティ オブジェクトをアタッチする例を参照して <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>です。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.SemaphoreSecurity" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.SemaphoreRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">ユーザーまたはグループのルールが適用されます。 型でなければなりません <see cref="T:System.Security.Principal.SecurityIdentifier" /> またはなど型 <see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" />です。</param>
        <param name="eventRights">ビットごとの組み合わせ <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 権限を指定する値を許可または拒否します。</param>
        <param name="type">いずれか、 <see cref="T:System.Security.AccessControl.AccessControlType" /> 権限を許可または拒否するかどうかを指定する値。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 指定して、ユーザーまたはグループのアクセス権に規則を適用し、指定したアクセス権を許可または拒否するかどうか。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 入力する、 <xref:System.Threading.Semaphore>, を呼び出すなどして、 <xref:System.Threading.WaitHandle.WaitOne%2A> メソッド、ユーザーが必要 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=fullName> アクセスします。 セマフォから出るを呼び出して、 <xref:System.Threading.Semaphore.Release%2A> メソッド、ユーザーが必要 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=fullName> アクセスします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> 無効な値を指定します。  
  
 または  
  
 <paramref name="type" /> 無効な値を指定します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="eventRights" /> 0 です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> 型のどちらが <see cref="T:System.Security.Principal.SecurityIdentifier" /> もなどの型の <see cref="T:System.Security.Principal.NTAccount" /> 型に変換できる <see cref="T:System.Security.Principal.SecurityIdentifier" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreAccessRule (string identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.SemaphoreRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">ユーザーまたはグループの名前に、ルールが適用されます。</param>
        <param name="eventRights">ビットごとの組み合わせ <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 権限を指定する値を許可または拒否します。</param>
        <param name="type">いずれか、 <see cref="T:System.Security.AccessControl.AccessControlType" /> 権限を許可または拒否するかどうかを指定する値。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> ユーザーまたはアクセス権をルールが適用されるグループの名前を指定し、指定したアクセス権を許可または拒否するかどうか。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 入力する、 <xref:System.Threading.Semaphore>, を呼び出すなどして、 <xref:System.Threading.WaitHandle.WaitOne%2A> メソッド、ユーザーが必要 <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=fullName> アクセスします。 セマフォから出るを呼び出して、 <xref:System.Threading.Semaphore.Release%2A> メソッド、ユーザーが必要 <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=fullName> アクセスします。  
  
 このコンス トラクターを作成するのには、 <xref:System.Security.Principal.NTAccount> を渡すことによって、オブジェクト `identity` に、 <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> コンス トラクター、および新しく作成された渡す <xref:System.Security.Principal.NTAccount> オブジェクトを <xref:System.Security.AccessControl.SemaphoreAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.SemaphoreRights%2CSystem.Security.AccessControl.AccessControlType%29> コンス トラクターです。  
  
   
  
## 例  
 次のコード例ではこのコンス トラクターを作成する使用 <xref:System.Security.AccessControl.SemaphoreAccessRule> オブジェクトです。 例を作成し、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを許可し、現在のユーザーのさまざまな権限を拒否するルールを追加し、ルールの結果のペアが表示されます。 例では、現在のユーザーに対して新しい権限を許可し、新しい権限が、既存のマージされることを示す結果を表示 <xref:System.Security.AccessControl.AccessControlType.Allow> ルール。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:System.Threading.Semaphore> オブジェクトです。 セキュリティ オブジェクトをアタッチする例を参照して <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>です。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> 無効な値を指定します。  
  
 または  
  
 <paramref name="type" /> 無効な値を指定します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventRights" /> 0 です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="identity" /> 長さ 0 の文字列です。  
  
 または  
  
 <paramref name="identity" /> 512 文字を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SemaphoreRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreRights SemaphoreRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.SemaphoreRights SemaphoreRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アクセス ルールで許可または拒否の権限を取得します。</summary>
        <value>ビットごとの組み合わせ <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 権限を示す値を許可またはアクセス ルールによって拒否されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> オブジェクトは変更できません。 別のユーザー、異なる権限、または異なるを表す新しいアクセス ルールを作成する <xref:System.Security.AccessControl.AccessControlType>, 、ですが、既存のアクセス ルールを変更することはできません。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights%2A> ルールに含まれている一連の権限を表示するプロパティを <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトです。 例を作成し、 <xref:System.Security.AccessControl.SemaphoreSecurity> オブジェクトを許可し、現在のユーザーのさまざまな権限を拒否するルールを追加し、ルールの結果のペアが表示されます。 例では、現在のユーザーに対して新しい権限を許可し、新しい権限が、既存のマージされることを示す結果を表示 <xref:System.Security.AccessControl.AccessControlType.Allow> ルール。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトにはアタッチされません、 <xref:System.Threading.Semaphore> オブジェクトです。 セキュリティ オブジェクトをアタッチする例を参照して <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> と <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>です。  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>