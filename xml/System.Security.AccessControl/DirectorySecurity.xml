<Type Name="DirectorySecurity" FullName="System.Security.AccessControl.DirectorySecurity">
  <TypeSignature Language="C#" Value="public sealed class DirectorySecurity : System.Security.AccessControl.FileSystemSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DirectorySecurity extends System.Security.AccessControl.FileSystemSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.DirectorySecurity" />
  <AssemblyInfo>
    <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.FileSystemSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>アクセス制御を表すとディレクトリのセキュリティを監査します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.AccessControl.DirectorySecurity> クラスは、システムのディレクトリとは、アクセス試行の監査のアクセス権を指定します。 このクラスは、ルールのセットとしてアクセスおよび監査の権限を表します。 各アクセス規則がによって表される、 <xref:System.Security.AccessControl.FileSystemAccessRule> オブジェクト、各監査規則がによって表されるときに、 <xref:System.Security.AccessControl.FileSystemAuditRule> オブジェクトです。  
  
 <xref:System.Security.AccessControl.DirectorySecurity> クラスは、基になる Windows ファイルのセキュリティ システムの抽象化します。 このシステムは、各ディレクトリにディレクトリへのアクセスを制御するには、随意アクセス制御リスト \(DACL\) とシステム アクセス制御リスト \(SACL\) を監査するアクセス制御の試行を指定します。<xref:System.Security.AccessControl.FileSystemAccessRule> と <xref:System.Security.AccessControl.FileSystemAuditRule> クラスは、Dacl と Sacl を構成するアクセス制御エントリ \(Ace\) の抽象化します。  
  
 <xref:System.Security.AccessControl.DirectorySecurity> クラスには、数多くの Dacl と Sacl の詳細が非表示には、ACE の順序や null DACL について心配する必要はありません。  
  
 使用して、 <xref:System.Security.AccessControl.FileSecurity> クラスを取得、追加、または、DACL とファイルの SACL を表すアクセス規則を変更します。  
  
 次の表にアクセスして、ディレクトリのセキュリティを維持する方法を示します。  
  
|タスク|メソッド|  
|---------|----------|  
|ルールを追加します。|<xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName>|  
|規則を削除します。|<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName>|  
|ディレクトリへのアクセス制御を取得します。|<xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName>|  
|ディレクトリへのアクセス制御を永続化します。|<xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName>|  
  
   
  
## 例  
 次のコード例では、 <xref:System.Security.AccessControl.DirectorySecurity> クラスを追加し、アクセス制御リスト \(ACL\) エントリをディレクトリから削除します。  この例を実行するには、有効なユーザーまたはグループ アカウントを指定する必要があります。  
  
 [!code-cpp[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]
 [!code-csharp[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]
 [!code-vb[IO.DiretoryInfo.GetAccessControl\-SetAccessControl\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectorySecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.DirectorySecurity.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Security.AccessControl.DirectorySecurity" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use this constructor when you want to create an empty <xref:System.Security.AccessControl.DirectorySecurity> object that is not based on an existing directory. You can then populate the object with access control information and apply it to a directory.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Microsoft Windows 2000 以降ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DirectorySecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="name">作成するディレクトリの場所、 <see cref="T:System.Security.AccessControl.DirectorySecurity" /> オブジェクトからです。</param>
        <param name="includeSections">いずれか、 <see cref="T:System.Security.AccessControl.AccessControlSections" /> アクセスの種類を指定する値を制御リスト \(ACL\) の情報を取得します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.AccessControl.DirectorySecurity" /> クラスの指定した値を使用して、指定したディレクトリから、 <see cref="T:System.Security.AccessControl.AccessControlSections" /> 列挙します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、指定したディレクトリのアクセス制御情報を取得しを作成し、 <xref:System.Security.AccessControl.DirectorySecurity> その情報をカプセル化するオブジェクト。 検査を追加する、または指定したディレクトリのアクセス制御情報を削除し、ことができます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> パラメーターは長さゼロの文字列で、空白のみで構成されているか、または <see cref="F:System.IO.Path.InvalidPathChars" /> で定義されるように 1 つ以上の無効な文字を含んでいます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません \(マップされていないドライブ上のパスなど\)。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定されたファイル、 <paramref name="name" /> パラメーターが見つかりませんでした。</exception>
        <exception cref="T:System.IO.IOException">ディレクトリを開くときに、I\/O エラーが発生しました。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="name" /> パラメーターは無効な形式で表します。</exception>
        <exception cref="T:System.PlatformNotSupportedException">現在のオペレーティング システムは Microsoft Windows 2000 以降ではありません。</exception>
        <exception cref="T:System.IO.PathTooLongException">指定されたパスかファイル名、またはその両方がシステム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満、ファイル名は 260 文字未満にする必要があります。</exception>
        <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">現在のシステム アカウントには、管理者特権がありません。</exception>
        <exception cref="T:System.SystemException">ディレクトリが見つかりません。</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="name" /> パラメーターに読み取り専用のディレクトリが指定されています。  
  
 または  
  
 この操作は、現在のプラットフォームではサポートされていません。  
  
 または  
  
 呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for permission to access the directory specified by the **parameterReference tag is not supported!!!!**  
 parameter. Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" /> , <see cref="F:System.Security.AccessControl.AccessControlActions.View" />  
  
 Security action: Demand</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.FileSystem.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Security.AccessControl.DirectorySecurity" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>