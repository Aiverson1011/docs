<Type Name="SecurityTokenHandler" FullName="System.IdentityModel.Tokens.SecurityTokenHandler">
  <TypeSignature Language="C#" Value="public abstract class SecurityTokenHandler : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityTokenHandler extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>セキュリティ トークン ハンドラーの抽象基本クラスです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler> クラスは、すべてのセキュリティ トークン ハンドラーを派生させる基本クラスです。 セキュリティ トークン ハンドラーを行います。  
  
-   セキュリティ トークンの評価 \(<xref:System.IdentityModel.Tokens.SecurityToken>\) プロセスおよびにトークンにクレームが含まれるパッケージ化するものでは、型の <xref:System.Security.Claims.ClaimsIdentity> オブジェクトです。  
  
-   シリアル化し、処理するものでは型のセキュリティ トークンを逆シリアル化します。  
  
-   シリアル化して、キー識別句を逆シリアル化 \(<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>\) との間に処理するものでは、型のトークンを参照する `<wsse:SecurityTokenReference>` 要素。  
  
-   セキュリティ トークンの作成、 <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor> の実装によって渡されたオブジェクト、 <xref:System.IdentityModel.SecurityTokenService> クラスです。  
  
-   実装のためのセキュリティ トークンからキー識別句を作成する、 <xref:System.IdentityModel.SecurityTokenService> クラスです。  
  
 次のセキュリティ トークン ハンドラーの配送先があらかじめ Windows Identity Foundation \(WIF\)。  
  
-   <xref:System.IdentityModel.Tokens.EncryptedSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.KerberosSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.RsaSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.Saml2SecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SamlSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.UserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.WindowsUserNameSecurityTokenHandler>  
  
-   <xref:System.IdentityModel.Tokens.X509SecurityTokenHandler>  
  
 これらのクラスのほとんどは、クラスのデザイン対象となったトークンの処理に固有では機能を実装するメンバーを公開します。 多くの場合のいずれかから直接ではなく、これらのクラスから派生する方がよい場合があります、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler> クラスです。  
  
 セキュリティ トークン ハンドラーを追加またはを指定することによってトークン ハンドラー コレクションから削除される、 [\<add\>](http://msdn.microsoft.com/ja-jp/4712a888-f154-4395-8887-ef14a88a6497), 、[\<remove\>](http://msdn.microsoft.com/ja-jp/4058e2f1-7db4-4d1a-84dd-1b52836f2ae6), 、または [\<clear\>](http://msdn.microsoft.com/ja-jp/54dcd1d1-038f-4fc8-a3a4-56ba7a1ca0fd) の下の要素、 [\<securityTokenHandlers\>](http://msdn.microsoft.com/ja-jp/f11a631d-4094-4e11-bb03-4ede74b30281) 構成ファイル内の要素。<xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration> を介してハンドラー コレクションの構成設定を含むオブジェクトにアクセスすることができます、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> プロパティと、トークン ハンドラーのメンバーであるハンドラー コレクションからアクセスできる、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection%2A> プロパティです。 オーバーライドすることができます、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> 、ハンドラーは、任意のカスタム構成要素を処理するメソッドです。  
  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler> クラスは、その他のいくつかのプロパティおよびメソッドを公開します。 実装する機能に応じて、これらのメンバーの一部またはすべてを上書きする可能性があります。  
  
 オーバーライドする必要があります、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> プロパティおよび <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> を処理するクラスがセキュリティ トークンの種類に関する情報を WIF インフラストラクチャを提供するメソッドが設計されています。  
  
 検証、シリアル化および逆シリアル化機能は、ハンドラーがまたは複数の機能を実装するメソッドと組み合わせて、特定の関数を実行できるかどうかを指定するプロパティまたはメソッドを公開します。 プロパティまたはその機能を実装するメソッドと機能を示すメソッドのペアを次の一覧。  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> プロパティおよび <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> メソッド: トークンを検証し、トークンに含まれる要求をパッケージ化、 <xref:System.Security.Claims.ClaimsIdentity>です。  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> プロパティおよび <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> メソッド: トークンのシリアル化します。  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> メソッドおよび <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> メソッド: トークンの逆シリアル化します。  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A> メソッドおよび <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> メソッド。 キー識別句の逆シリアル化します。  
  
-   <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> メソッドおよび <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> メソッド。 キー識別句のシリアル化します。  
  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> と <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> の実装では、パイプラインからのメソッドが呼び出される、 <xref:System.IdentityModel.SecurityTokenService> クラスです。  
  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> メソッドは、WIF インフラストラクチャを指定したトークンが既に受信されたかどうかを判断します。 既定ではこのメソッドが戻る `false`, 、トークンが既に受信されていないことを示します。 メソッドをオーバーライドし、再生されたトークンを検出するロジックを提供することができます。  
  
   
  
## 例  
 すべてのコード例、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler> からトピックを取得、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。 次の XML では、トークン ハンドラーのコレクションに SWT トークン ハンドラーを追加する方法を示します。  
  
```xml  
<system.identityModel>  
  <identityConfiguration saveBootstrapContext="true">  
    <issuerTokenResolver type="SimpleWebToken.CustomIssuerTokenResolver, SimpleWebToken">  
      <AddAudienceKeyPair  symmetricKey="wAVkldQiFypTQ+kdNdGWCYCHRcee8XmXxOvgmak8vSY=" audience="http://localhost:19851/" />  
    </issuerTokenResolver>  
    <issuerNameRegistry type="RelyingParty.TrustedIssuerNameRegistry, RelyingParty"/>  
    <audienceUris>  
      <add value="http://localhost:19851/"/>  
    </audienceUris>  
    <securityTokenHandlers>  
      <add type="SimpleWebToken.SimpleWebTokenHandler, SimpleWebToken" />  
    </securityTokenHandlers>  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.SecurityToken" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" />
    <altmember cref="T:System.IdentityModel.SecurityTokenService" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityTokenHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初期化するために派生クラスのコンス トラクターから呼び出される、 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">開始要素に配置する XML リーダー。 リーダーは、このメソッドでない高度な必要があります。</param>
        <summary>指定した XML リーダーがこのインスタンスで逆シリアル化するキー識別子句で参照される XML 要素かどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" /> メソッドは、要素を読み取ることができます。 そうしないと、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装 `false` を示すキー識別子句を読み取ることができません。  
  
 派生クラスでは、リーダーは、インスタンス キー識別子句が逆シリアル化できるかどうかを判断するために参照する要素を確認します。 呼び出すことによってこれは通常、 <xref:System.Xml.XmlReader.IsStartElement%2A?displayProperty=fullName> メソッドを適切な要素と名前空間文字列を指定します。 オーバーライドする場合 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, 、またをオーバーライドする必要があります、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause%2A> キー識別子句を逆シリアル化するロジックを提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString">読み取るトークン文字列。</param>
        <summary>このインスタンスによって処理された型のトークンとして、指定した文字列を逆シリアル化できるかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" /> メソッドは、要素を読み取ることができます。 そうしないと、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装を常に `false`します。  
  
 このメソッドをオーバーライドする必要がありますもまた上書き、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> トークンを逆シリアル化するロジックを提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadToken">
      <MemberSignature Language="C#" Value="public virtual bool CanReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">開始要素に配置されている XML リーダー。 リーダーは、このメソッドでない高度な必要があります。</param>
        <summary>このインスタンスによって処理された種類のトークンとして指定した XML リーダーによって参照される XML 要素を読み取ることができるかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" /> メソッドは、要素を読み取ることができます。 そうしないと、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装を常に `false`します。  
  
 派生クラスでは、リーダーは、インスタンスがセキュリティ トークンを逆シリアル化できるかどうかを判断するために参照する要素を確認します。 呼び出すことによってこれは通常、 <xref:System.Xml.XmlReader.IsStartElement%2A> メソッドを適切な要素と名前空間文字列を指定します。 オーバーライドする場合 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A>, 、またをオーバーライドする必要があります、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> メソッドまたは <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> キー識別子句を逆シリアル化するロジックを提供します。  
  
   
  
## 例  
 次のコードを上書きする方法を示しています、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A> ハンドラーによってトークンを読み取ることができるかどうかを決定する方法です。 コードの抜粋、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。  
  
 [!code-csharp[WifRcCustomToken\#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanValidateToken">
      <MemberSignature Language="C#" Value="public virtual bool CanValidateToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanValidateToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ハンドラーがセキュリティ トークンの検証をサポートするかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> セキュリティ トークンを検証できる場合に、クラスそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生クラスで検証を実装するを返すには、このプロパティをオーバーライド `true` させ、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> 検証ロジックを実装するメソッドです。  
  
   
  
## 例  
 次のコードを上書きする方法を示しています、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken%2A> プロパティをカスタム ハンドラーがトークンを検証できることを示します。 コードの抜粋、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。  
  
 [!code-csharp[WifRcCustomToken\#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanWriteKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="securityKeyIdentifierClause">チェックするキー識別句。</param>
        <summary>このインスタンスで、指定したキー識別子句をシリアル化できるかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> キー識別子句をシリアル化する場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装を常に `false`します。  
  
 オーバーライドする場合 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A>, 、またをオーバーライドする必要があります、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause%2A> キー識別子句をシリアル化するためのロジックを提供するメソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteToken">
      <MemberSignature Language="C#" Value="public virtual bool CanWriteToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWriteToken" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ハンドラーのセキュリティ トークンをシリアル化するかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> クラスがトークンをシリアル化できる場合それ以外の場合 <see langword="false" />します。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生クラスでシリアル化を実装するを返すには、このプロパティをオーバーライド `true` させ、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> シリアル化ロジックを実装する方法です。  
  
   
  
## 例  
 次のコードを上書きする方法を示しています、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> プロパティをカスタム ハンドラーには、トークンをシリアル化を示します。 コードの抜粋、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。  
  
 [!code-csharp[WifRcCustomToken\#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration Configuration" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" /> を現在のインスタンスの構成を提供するオブジェクト。</summary>
        <value>現在のインスタンスに対する構成オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> から構成インフラストラクチャによって設定された通常のプロパティ、 [\<securityTokenHandlerConfiguration\>](http://msdn.microsoft.com/ja-jp/28724cc6-020c-4a06-9a1f-d7594f315019) の適用時に構成ファイル内の要素が起動します。  
  
 派生クラスで使用して、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> アクセスの構成設定のプロパティ。 たとえば、で使用する発行者名レジストリ、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> メソッドは、からアクセスできる、 <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=fullName> 構成オブジェクトのプロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainingCollection">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenHandlerCollection ContainingCollection" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandlerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のインスタンスを含むトークン ハンドラーのコレクションを取得します。</summary>
        <value>現在のインスタンスを含むトークン ハンドラーのコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 トークン ハンドラーを追加するときに、 <xref:System.IdentityModel.Tokens.SecurityTokenHandlerCollection> インスタンスでは、このプロパティは自動的に設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenReference">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference (System.IdentityModel.Tokens.SecurityToken token, bool attached);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause CreateSecurityTokenReference(class System.IdentityModel.Tokens.SecurityToken token, bool attached) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="attached" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="token">参照が作成されるトークンです。</param>
        <param name="attached">
          <see langword="true" /> アタッチされた参照を作成する場合 <see langword="false" /> 場合は、結び付けられていない参照を作成する必要があります。</param>
        <summary>派生クラスでオーバーライドされた場合は、そのクラスによって処理されたトークンのセキュリティ トークンの参照を作成します。 通常、このメソッドは、セキュリティ トークン サービス \(STS\) によって呼び出されます。</summary>
        <returns>指定したトークンを参照するキー識別句。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは既定でスローする <xref:System.NotImplementedException> 例外です。  
  
 派生クラスをキー識別子句を返すには、このメソッドをオーバーライドする \(<xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause>\) の作成に使用できる、 `<wsse:SecurityTokenReference>` 指定したトークンの要素。  
  
 実装から呼び出される、 <xref:System.IdentityModel.SecurityTokenService> クラスです。  
  
 通常、 <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> 、以外のときに使用されるカスタム セキュリティ トークン サービスが作成される必要はありません。 セキュリティ トークン サービスがセキュリティ トークンを返した場合、発行されたセキュリティ トークンには、結び付けられているセキュリティ トークンまたは結び付けられていないセキュリティ トークンへの参照が含まれます。 結び付けられている参照は、SOAP メッセージ トークンのセキュリティ ヘッダーに含まれるセキュリティ トークンを参照し、結び付けられていない参照は、SOAP メッセージのセキュリティ ヘッダーに含まれていないセキュリティ トークンを参照します。 これらの参照は、通常、発行されたセキュリティ トークンの信頼性を確認します。  
  
   
  
## 例  
 次のコードを上書きする方法を示しています、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference%2A> 指定されたトークンからキー識別句を作成します。 コードの抜粋、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。  
  
 [!code-csharp[WifRcCustomToken\#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken CreateToken(class System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenDescriptor" Type="System.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="tokenDescriptor">トークンを作成する元となるセキュリティ トークン記述子です。 このメソッドが呼び出される前に、トークンの記述子のプロパティが設定されます。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定されたトークンの記述子を使用してセキュリティ トークンを作成します。 このメソッドは、セキュリティ トークン サービス \(STS\) によって呼び出されます。</summary>
        <returns>トークンの記述子のプロパティに一致するセキュリティ トークンです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは既定でスローする <xref:System.NotImplementedException> 例外です。  
  
 実装から呼び出される、 <xref:System.IdentityModel.SecurityTokenService> クラスです。  
  
   
  
## 例  
 次のコードを上書きする方法を示しています、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CreateToken%2A> を作成し、トークンの記述子からトークンを返すメソッド。 コードの抜粋、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。  
  
 [!code-csharp[WifRcCustomToken\#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectReplayedToken">
      <MemberSignature Language="C#" Value="protected virtual void DetectReplayedToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DetectReplayedToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">再生をチェックするトークンです。</param>
        <summary>派生クラスでオーバーライドされた場合は、再生されると、指定されたトークンが検出された場合に例外をスローします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装では、何も行われません。  
  
 派生クラスをスローする必要があります、 <xref:System.IdentityModel.Tokens.SecurityTokenReplayDetectedException> トークンは既に使用されている場合。  
  
 Windows Identity Foundation \(WIF\) を提供、 <xref:System.IdentityModel.Tokens.TokenReplayCache> キャッシュは派生クラスどの再生からクラスおよび [\<tokenReplayCache\>](http://msdn.microsoft.com/ja-jp/1572ab23-6933-41b5-bfb4-0c4548145500) アプリケーションのトークン ハンドラーで使用される、リプレイ キャッシュを構成するために使用する構成要素ただしの正確な実装、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken%2A> メソッドは、派生クラスのデザイナーです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenTypeIdentifiers">
      <MemberSignature Language="C#" Value="public abstract string[] GetTokenTypeIdentifiers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetTokenTypeIdentifiers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、派生クラスによって処理された型のトークンを識別するための要求で使用される Uri のセットを返します。</summary>
        <returns>このハンドラーをサポートするトークンの種類を識別する Uri のセット。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Type> トークンが現在のインスタンスによって処理されるは、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> プロパティです。<xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> メソッドは、トークンの型を参照するメッセージで使用できる使用可能な識別子のセットを返します。 URI 値を使用するなど、 `<wst:TokenType>` の下の要素、 `<wst:RequestSecurityToken>` 特別な種類のトークンを要求する要素 \(によって表される、 <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType%2A?displayProperty=fullName> オブジェクト モデルのプロパティ\)。  
  
   
  
## 例  
 次のコードを上書きする方法を示しています、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers%2A> カスタム トークンにトークンの種類の識別子を返します。 コードの抜粋、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。  
  
 [!code-csharp[WifRcCustomToken#17](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#17)]  
[!code-csharp[WifRcCustomToken#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">構成 XML 要素です。 型のリスト内の各ノードは、 <see cref="T:System.Xml.XmlElement" />です。</param>
        <summary>派生クラスでオーバーライドされた場合は、XML からカスタム構成を読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.LoadCustomConfiguration%2A> 構成インフラストラクチャによって呼び出されます。 このメソッドが呼び出されると、 `nodelist` トークン ハンドラーの最上位レベルの子要素が含ま [\<add\>](http://msdn.microsoft.com/ja-jp/4712a888-f154-4395-8887-ef14a88a6497) 構成ファイルからの要素。 属性または子要素は、派生クラスの定義の構成スキーマに応じて、これらの各に含めること、ことがあります。  
  
 既定の実装でスロー、 <xref:System.NotImplementedException>です。 構成ファイルから、セキュリティ トークン ハンドラーの初期化を有効にする派生クラスでは、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKeyIdentifierClause ReadKeyIdentifierClause(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">キー識別句に逆シリアル化する XML 形式の開始要素に配置する XML リーダー。</param>
        <summary>派生クラスでオーバーライドされた場合は、派生クラスによって処理されたトークンを参照するキー識別子句を指定した XML リーダーによって参照される XML を逆シリアル化します。</summary>
        <returns>XML から逆シリアル化されたキー識別句。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは既定でスローする <xref:System.NotImplementedException> 例外です。  
  
 XML からのキー識別子句を逆シリアル化するためのロジックを提供するのには、このメソッドをオーバーライドします。 このメソッドをオーバーライドする必要がありますもまた上書き、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (string tokenString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(string tokenString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tokenString">逆シリアル化する文字列。</param>
        <summary>派生クラスでオーバーライドされた場合は、派生クラスによって処理された種類のトークンに指定した文字列を逆シリアル化します。</summary>
        <returns>指定した文字列から逆シリアル化されたセキュリティ トークンです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  セキュリティ上のリスクは、信頼できないデータをこのメソッドを呼び出すことです。 このメソッドでは、信頼されたデータだけです。 詳細については、次を参照してください。 [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378)します。  
  
 このメソッドは既定でスローする <xref:System.NotImplementedException> 例外です。  
  
 文字列からセキュリティ トークンを逆シリアル化できる機能を提供するには、このメソッドをオーバーライドします。 このメソッドをオーバーライドする場合、必要がありますも無効にする、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">トークンの開始要素に配置する XML リーダー。</param>
        <summary>派生クラスでオーバーライドされた場合は、派生クラスによって処理された種類のトークンに指定した XML リーダーによって参照される XML を逆シリアル化します。</summary>
        <returns>XML から逆シリアル化されたセキュリティ トークンです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  セキュリティ上のリスクは、信頼できないデータをこのメソッドを呼び出すことです。 このメソッドでは、信頼されたデータだけです。 詳細については、次を参照してください。 [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378)します。  
  
 このメソッドは既定でスローする <xref:System.NotImplementedException> 例外です。  
  
 XML からのセキュリティ トークンを逆シリアル化するためのロジックを提供するのには、このメソッドをオーバーライドします。 このメソッドをオーバーライドする必要がありますもまた上書き、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> メソッドです。 通常、派生クラスでメソッドが参照されている XML からトークンを逆シリアル化できませんスロー、 <xref:System.Xml.XmlException>です。  
  
   
  
## 例  
 次のコードを上書きする方法を示しています、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A> メソッドが指定した XML リーダーからカスタム トークンを読み取る。 コードの抜粋、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。  
  
 [!code-csharp[WifRcCustomToken#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#7)]  
[!code-csharp[WifRcCustomToken#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#8)]  
[!code-csharp[WifRcCustomToken#14](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken ReadToken(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="tokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader">トークンの開始要素に配置する XML リーダー。</param>
        <param name="tokenResolver">帯域外のおよびキャッシュされたトークンを含むトークン リゾルバー。</param>
        <summary>派生クラスでオーバーライドされると、指定したトークン リゾルバーを使用して、派生クラスによって処理された種類のトークンに指定した XML リーダーによって参照される XML を逆シリアル化します。</summary>
        <returns>XML から逆シリアル化されたセキュリティ トークンです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  セキュリティ上のリスクは、信頼できないデータをこのメソッドを呼び出すことです。 このメソッドでは、信頼されたデータだけです。 詳細については、次を参照してください。 [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378)します。  
  
 既定の実装を無視、 `tokenResolver` パラメーターへの呼び出しを代行し、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken%2A?displayProperty=fullName> メソッドです。  
  
 XML からのセキュリティ トークンを逆シリアル化するためのロジックを提供するのには、このメソッドをオーバーライドします。 このメソッドをオーバーライドする必要がありますもまた上書き、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken%2A?displayProperty=fullName> メソッドです。 通常、派生クラスでメソッドが参照されている XML からトークンを逆シリアル化できませんスロー、 <xref:System.Xml.XmlException>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public abstract Type TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TokenType" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、このインスタンスによって処理されるセキュリティ トークンの種類を取得します。</summary>
        <value>このインスタンスによって処理されるセキュリティ トークンの種類。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生クラスでは、このプロパティをオーバーライドして返す必要があります、 <xref:System.Type> セキュリティ トークンの \(<xref:System.IdentityModel.Tokens.SecurityToken>\)、派生クラスによって処理されます。  
  
   
  
## 例  
 次のコードを上書きする方法を示しています、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.TokenType%2A> 返されるプロパティを <xref:System.Type> カスタム ハンドラーによって処理されるセキュリティ トークンのです。 コードの抜粋、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。  
  
 [!code-csharp[WifRcCustomToken\#18](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationFailure">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationFailure (System.IdentityModel.Tokens.SecurityToken token, string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationFailure(class System.IdentityModel.Tokens.SecurityToken token, string errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="errorMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token">検証されているセキュリティ トークンです。</param>
        <param name="errorMessage">トレースに書き込むメッセージ。</param>
        <summary>トレースが有効な場合は、セキュリティ トークンの検証中にエラー イベントをトレースします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出すことは、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> メソッドは、トークンの検証が失敗したとします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTokenValidationSuccess">
      <MemberSignature Language="C#" Value="protected void TraceTokenValidationSuccess (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TraceTokenValidationSuccess(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">検証されたトークンです。</param>
        <summary>セキュリティ トークンのイベント トレースが有効にすると、正常に検証をトレースします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出すことは、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> トークンが正常に検証された後のメソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateToken">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt; ValidateToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.Claims.ClaimsIdentity&gt; ValidateToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.Claims.ClaimsIdentity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">検証するトークンです。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定したセキュリティ トークンを検証します。 トークンは、派生クラスによって処理された種類でなければなりません。</summary>
        <returns>トークン内の id。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは既定でスローする <xref:System.NotImplementedException> 例外です。  
  
 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> メソッドを検証し、逆シリアル化されたセキュリティ トークンからクレームを抽出するためのインフラストラクチャによって呼び出されます。 コレクションでこれらのクレームが返される <xref:System.Security.Claims.ClaimsIdentity> メソッドによって返されるオブジェクト。 一般的なケースでこのコレクションには単一の id が含まれます。  
  
 派生クラスで検証通常で指定された Uri、対象ユーザーに対してトークンで指定された適切な対象者を検証する、 <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction%2A?displayProperty=fullName> 、トークン ハンドラーの構成で指定されたオブジェクトのプロパティ、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> プロパティです。 通常、これらの Uri は下の構成ファイルで設定、 [\<audienceUris\>](http://msdn.microsoft.com/ja-jp/7a3d8515-d756-4afe-a22d-07cbe2217ee3) 要素。 対象ユーザーを検証できない場合、 <xref:System.IdentityModel.Tokens.AudienceUriValidationFailedException> 例外をスローする必要があります。  
  
 いずれかに、発行者トークンを渡すことによって、発行者が検証される通常トークンを処理するときに、 <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> のメソッド、 <xref:System.IdentityModel.Tokens.IssuerNameRegistry> ハンドラーから構成されているオブジェクト、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> プロパティです。 発行者名レジストリの書は、通常、 [\<issuerNameRegistry\>](http://msdn.microsoft.com/ja-jp/58b39d12-c953-40c4-88af-d7eb3343ca28) 構成ファイル内の要素。<xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> 発行者の名前を返します。 この名前を設定するために使用する必要があります、 <xref:System.Security.Claims.Claim.Issuer%2A?displayProperty=fullName> トークンに含まれる要求のプロパティです。 発行者名レジストリに発行者トークンでは、エントリが含まれていない場合 <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> 返します `null`します。 ここでは、 <xref:System.IdentityModel.Tokens.SecurityTokenException> は通常、派生クラスでスローされますが、この動作をクラスの設計者までです。  
  
   
  
## 例  
 次のコードのオーバーライドを示しています、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> 単純な web tokens \(SWT\) を処理するセキュリティ トークン ハンドラーのメソッドです。 コードの抜粋、 `CustomToken` サンプルです。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。  
  
 [!code-csharp[WifRcCustomToken\#9](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#9)]  
  
 次のコードは `CreateClaims` メソッドのオーバーライドが呼び出されている、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> 前の例ではメソッドです。 このメソッドが戻る、 <xref:System.Security.Claims.ClaimsIdentity> 、トークンの要求から作成されるオブジェクトです。 コードの抜粋、 `CustomToken` サンプルです。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。  
  
 [!code-csharp[WifRcCustomToken\#15](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#15)]  
  
 次のコードは `ValidateSignature` メソッドのオーバーライドが呼び出されている、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> 単純な web トークン ハンドラーのメソッドです。 このメソッドは、構成を使用して、トークンの署名を検証 <xref:System.IdentityModel.Tokens.IssuerTokenResolver>します。 コードの抜粋、 `CustomToken` サンプルです。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。  
  
 [!code-csharp[WifRcCustomToken#12](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#12)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 次のコードは `ValidateAudience` メソッドのオーバーライドが呼び出されている、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> 単純な web トークン ハンドラーのメソッドです。 このメソッドは、対象の構成で指定された Uri に対してトークンに含まれている対象ユーザーを検証します。 コードの抜粋、 `CustomToken` サンプルです。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。  
  
 [!code-csharp[WifRcCustomToken\#13](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual void WriteKeyIdentifierClause (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteKeyIdentifierClause(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityKeyIdentifierClause securityKeyIdentifierClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="securityKeyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="writer">XML ライター。</param>
        <param name="securityKeyIdentifierClause">シリアル化するキー識別句。</param>
        <summary>派生クラスでオーバーライドされた場合は、XML に指定したキー識別子句をシリアル化します。 派生クラスでサポートされる型のキー識別子句がある必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは既定でスローする <xref:System.NotImplementedException> 例外です。  
  
 キー識別子句で xml をシリアル化するためのロジックを提供するのには、このメソッドをオーバーライドします。 このメソッドをオーバーライドする必要がありますもまた上書き、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual string WriteToken (System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string WriteToken(class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="token">シリアル化するトークンです。</param>
        <summary>派生クラスでオーバーライドされた場合は、文字列に指定されたセキュリティ トークンをシリアル化します。 トークンは、派生クラスによって処理された種類でなければなりません。</summary>
        <returns>シリアル化されたトークンです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは既定でスローする <xref:System.NotImplementedException> 例外です。  
  
 セキュリティ トークンを XML をシリアル化ロジックを実装するには、このメソッドをオーバーライドします。 このメソッドをオーバーライドする必要がありますもまた上書き、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToken">
      <MemberSignature Language="C#" Value="public virtual void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteToken(class System.Xml.XmlWriter writer, class System.IdentityModel.Tokens.SecurityToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="token" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="writer">XML ライター。</param>
        <param name="token">シリアル化するトークンです。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定したセキュリティ トークンを XML にシリアル化します。 トークンは、派生クラスによって処理された種類でなければなりません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは既定でスローする <xref:System.NotImplementedException> 例外です。  
  
 セキュリティ トークンを XML をシリアル化ロジックを実装するには、このメソッドをオーバーライドします。 このメソッドをオーバーライドする必要がありますもまた上書き、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken%2A> プロパティです。  
  
   
  
## 例  
 次のコードを上書きする方法を示しています、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken%2A> カスタム トークンをシリアル化する方法です。 コードの抜粋、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 このサンプルと WIF およびそれらをダウンロードする場所で利用できるその他のサンプルについては、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。  
  
 [!code-csharp[WifRcCustomToken#10](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#10)]  
[!code-csharp[WifRcCustomToken#11](~/samples/snippets/csharp/VS_Snippets_Misc/wifrccustomtoken/cs/simplewebtoken/simplewebtokenhandler.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスによって処理された型のトークンとして指定したトークンを逆シリアル化できるかどうかを示す値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、派生クラスによって処理された種類のトークンに指定した XML を逆シリアル化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、指定したセキュリティ トークンをシリアル化します。 トークンは、派生クラスによって処理された種類でなければなりません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>