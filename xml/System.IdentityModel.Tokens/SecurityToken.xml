<Type Name="SecurityToken" FullName="System.IdentityModel.Tokens.SecurityToken">
  <TypeSignature Language="C#" Value="public abstract class SecurityToken" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityToken extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.SecurityToken" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>すべてのセキュリティ トークンを実装するために使用される基本クラスを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 セキュリティ トークンを使用して、認証資格情報を提供するか、メッセージを保護します。  
  
 セキュリティ トークン認証の資格情報、暗号化のキー マテリアルを提供するために使用したり、セキュリティ トークン サービス \(STS\) のサブジェクトに関するクレームのコレクションによって発行されたセキュリティ トークンの場合。 派生させるすべてのセキュリティ トークン、 <xref:System.IdentityModel.Tokens.SecurityToken> クラスです。  
  
 .NET 4.5 以降では、Windows Identity Foundation \(WIF\) は、.NET Framework に完全に統合されているし、WIF によって公開されるクラスは、コードのセキュリティ トークンの処理の推奨方法です。 WIF でのセキュリティ トークンのシリアル化および逆シリアル化され、表現とがから派生したクラスを使用しての検証に、XML から、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler> 基本クラスです。 トークンが有効であるだけでなく確保、戻るもこの際に、トークン検証、 <xref:System.Security.Claims.ClaimsIdentity> で認証と承認の意思決定を行うために使用するトークンのインスタンス。<xref:System.Security.Claims.ClaimsIdentity> のトークン ハンドラーの実装によって作成された、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> トークンに内在する要求さも型自体にトークンに含まれる要求からのメソッドです。  
  
 WIF は、次の種類のセキュリティ トークンのサポートが付属します。  
  
-   <xref:System.IdentityModel.Tokens.Saml2SecurityToken>: SAML 2.0 アサーションに基づいているセキュリティ トークンを表します。 このトークンの種類は通常、Ws\-trust、Ws\-federation またはセキュリティ トークン要求 \(RST\) への応答にセキュリティ トークン サービスによって発行されます。  
  
-   <xref:System.IdentityModel.Tokens.SamlSecurityToken>: SAML 1.1 アサーションに基づいているセキュリティ トークンを表します。 このトークンの種類は通常、Ws\-trust、Ws\-federation またはセキュリティ トークン要求 \(RST\) への応答にセキュリティ トークン サービスによって発行されます。  
  
-   <xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken> <xref:System.IdentityModel.Tokens.KerberosReceiverSecurityToken>: が受信または SOAP メッセージで送信された Kerberos チケットに基づくセキュリティ トークンを表します  
  
-   <xref:System.IdentityModel.Tokens.RsaSecurityToken>: RSA アルゴリズムを使用して作成されたキーに基づいているセキュリティ トークンを表します。  
  
-   <xref:System.IdentityModel.Tokens.SessionSecurityToken>: セッションに関する情報を含むセキュリティ トークンを表します。  
  
-   <xref:System.IdentityModel.Tokens.UserNameSecurityToken>: ユーザー名とパスワードに基づいてセキュリティ トークンを表します。  
  
-   <xref:System.IdentityModel.Tokens.WindowsSecurityToken>: Windows ドメイン ユーザーまたはユーザー アカウントの id に基づいているセキュリティ トークンを表します。  
  
-   <xref:System.IdentityModel.Tokens.X509SecurityToken>: X.509 証明書に基づいているセキュリティ トークンを表します。  
  
-   <xref:System.IdentityModel.Tokens.X509WindowsSecurityToken>: Windows ドメイン ユーザーまたはローカル コンピューターのユーザー アカウントにマップされている X.509 証明書に基づいているセキュリティ トークンを表します。  
  
 2 つのセキュリティ トークン クラス、 <xref:System.IdentityModel.Tokens.GenericXmlSecurityToken> と <xref:System.IdentityModel.Tokens.EncryptedSecurityToken>, 、一般的な事例の処理に役立つために使用できます。  
  
 大きく分けると、セキュリティ トークンは、次の 3 つの主要カテゴリに分類されます。  
  
-   実行するか、暗号化を参照するトークンのキー マテリアルします。 たとえば、 <xref:System.IdentityModel.Tokens.RsaSecurityToken> と <xref:System.IdentityModel.Tokens.X509SecurityToken> 型はこの目的でよく使用されます。  
  
-   既に認証済みユーザーの資格情報を表すトークンです。 たとえば、 <xref:System.IdentityModel.Tokens.UserNameSecurityToken>, 、<xref:System.IdentityModel.Tokens.WindowsSecurityToken>, 、および証明書を使用して認証されたユーザーの場合、 <xref:System.IdentityModel.Tokens.X509SecurityToken> 型です。  
  
-   Ws\-trust または Ws\-federation プロトコルを使用してセキュリティ トークンの要求に応えて、セキュリティ トークン サービス \(STS\) によって発行されるトークン。 これらに戻されると、 `wst:RequestSecurityTokenResponse` XML フラグメントです。<xref:System.IdentityModel.Tokens.Saml2SecurityToken> と <xref:System.IdentityModel.Tokens.SamlSecurityToken> 型はこれらのトークンを表す最もよく使用されます。  
  
 特別なトークンの種類、 <xref:System.IdentityModel.Tokens.SessionSecurityToken>, 、セッションをアクティブまたはパッシブのシナリオで使用するときにプリンシパルを再作成に必要な情報が含まれています。  
  
 既存のトークンの種類に機能を追加するには、トークンに追加する新しい要素をサポートするには、特定の種類と、関連付けられたトークン ハンドラーから派生できます。 新しいトークンの種類のサポートを追加するから直接派生させることができます、 <xref:System.IdentityModel.Tokens.SecurityToken> クラスです。 これを行うときにから派生させてトークン ハンドラー クラスを作成する必要がありますが、 <xref:System.IdentityModel.Tokens.SecurityTokenHandler> クラスです。 ユーザーのトークンの使用する方法、に応じてする必要がありますもから派生させて、カスタム トークン リゾルバーを作成、 <xref:System.IdentityModel.Tokens.IssuerTokenResolver> クラスも使用して、1 つ以上のカスタムのキー識別子句型から派生することによって、 <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> クラスです。  
  
   
  
## 例  
 コード例で使用されている、 <xref:System.IdentityModel.Tokens.SecurityToken> からトピックを取得、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 実装が含まれています、 `SimpleWebToken` クラスおよび `SimpleWebTokenHandler` クラスだけでなく SWT トークンをサポートするその他のクラスです。 Wif とそのダウンロード場所このサンプルと使用可能なその他のサンプルの詳細について、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。 次のコードの実装を示しています、 `SimpleWebToken` クラスです。 このクラスを拡張 <xref:System.IdentityModel.Tokens.SecurityToken>します。  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>You must override the <see cref="P:System.IdentityModel.Tokens.SecurityToken.Id" />, <see cref="P:System.IdentityModel.Tokens.SecurityToken.SecurityKeys" />, <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" />, and <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> properties. The <see cref="M:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1" />, <see cref="M:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1" />, <see cref="M:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />, and <see cref="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" /> methods all support key identifiers of type <see cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />. You must override these methods to support other key identifier types in your derived class.</para>
    </block>
    <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
    <altmember cref="T:System.IdentityModel.Tokens.IssuerTokenResolver" />
    <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityToken ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初期化するために派生クラスのコンス トラクターによって呼び出される、 <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> クラスです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCreateKeyIdentifierClause&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual bool CanCreateKeyIdentifierClause&lt;T&gt; () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanCreateKeyIdentifierClause&lt;(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">作成するキー識別子を指定する <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</typeparam>
        <summary>このセキュリティ トークンが、指定したキー識別子を作成できるかどうかを示す値を取得します。</summary>
        <returns>
          <see langword="true" /> の型が <paramref name="T" /> の場合は <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use the <xref:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause%2A> method to determine whether a security token can create a specific key identifier. To create the key identifier call the <xref:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause%2A> method.  
  
 The default implementation supports key identifier clauses of type <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1" />
        <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
      </Docs>
    </Member>
    <Member MemberName="CreateKeyIdentifierClause&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual T CreateKeyIdentifierClause&lt;T&gt; () where T : System.IdentityModel.Tokens.SecurityKeyIdentifierClause;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T CreateKeyIdentifierClause&lt;(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause``1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.IdentityModel.Tokens.SecurityKeyIdentifierClause</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">作成するキー識別子を指定する <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</typeparam>
        <summary>指定したキー識別句を作成します。</summary>
        <returns>セキュリティ トークンのキー識別子句である <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause%2A> メソッドを使用して、セキュリティ トークンが特定のキー識別子を作成できるかどうかを決定します。 キー識別子を作成するには、<xref:System.IdentityModel.Tokens.SecurityToken.CreateKeyIdentifierClause%2A> メソッドを呼び出します。  
  
 既定の実装は、型のキー識別句をサポートしている <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause>します。 型のキー識別子句の場合 <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause> を作成できない、 <xref:System.NotSupportedException> がスローされます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.Tokens.SecurityToken.CanCreateKeyIdentifierClause``1" />
        <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public abstract string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityToken.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セキュリティ トークンの一意の識別子を取得します。</summary>
        <value>セキュリティ トークンの一意の識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常は、セキュリティ トークンが XML にシリアル化されるときに、セキュリティ トークンの `Id` 属性に、<xref:System.IdentityModel.Tokens.SecurityToken.Id%2A> プロパティの値が設定されます。  
  
   
  
## 例  
 コード例で使用されている、 <xref:System.IdentityModel.Tokens.SecurityToken> からトピックを取得、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 実装が含まれています、 `SimpleWebToken` クラスおよび `SimpleWebTokenHandler` クラスだけでなく SWT トークンをサポートするその他のクラスです。 Wif とそのダウンロード場所このサンプルと使用可能なその他のサンプルの詳細について、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。 次のコードは、オーバーライド、 <xref:System.IdentityModel.Tokens.SecurityToken.Id%2A> プロパティです。  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#3)]  
[!code-csharp[WifCustomTokenST#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>You must override the <see cref="P:System.IdentityModel.Tokens.SecurityToken.Id" /> property.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MatchesKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual bool MatchesKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause skiClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MatchesKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause skiClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="skiClause">To be added.</param>
        <summary>このインスタンスのキー識別子を指定したキー識別子に解決できるかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> が <paramref name="keyIdentifierClause" /> で <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> プロパティと同じ一意の識別子を保持している場合は <see cref="P:System.IdentityModel.Tokens.SecurityToken.Id" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装は、型のキー識別句をサポートしています。 <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
      </Docs>
    </Member>
    <Member MemberName="ResolveKeyIdentifierClause">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause (System.IdentityModel.Tokens.SecurityKeyIdentifierClause skiClause);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityKey ResolveKeyIdentifierClause(class System.IdentityModel.Tokens.SecurityKeyIdentifierClause skiClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyIdentifierClause" Type="System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />
      </Parameters>
      <Docs>
        <param name="skiClause">To be added.</param>
        <summary>指定したキー識別句のキーを取得します。</summary>
        <returns>キーを表す <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause%2A> メソッドは、<xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A> を呼び出して、指定したキー識別子句がこのインスタンスと同じかどうかを最初に確認します。  
  
 既定の実装の最初の要素を返します、 <xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A> コレクション、コレクションが空でない場合、 <xref:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause%2A> を返します `true`、それ以外を返します `null`します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When you inherit from <see cref="T:System.IdentityModel.Tokens.SecurityToken" />, and implement the <see cref="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" /> method and <paramref name="skiClause" /> cannot be resolved, return <see langword="null" />. An exception should not be thrown from the <see cref="M:System.IdentityModel.Tokens.SecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" /> method.</para>
        </block>
        <altmember cref="M:System.IdentityModel.Tokens.SecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)" />
        <altmember cref="T:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause" />
      </Docs>
    </Member>
    <Member MemberName="SecurityKeys">
      <MemberSignature Language="C#" Value="public abstract System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityKey&gt; SecurityKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Tokens.SecurityKey&gt; SecurityKeys" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityToken.SecurityKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Tokens.SecurityKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セキュリティ トークンに関連付けられた暗号化キーを取得します。</summary>
        <value>セキュリティ トークンに関連付けられている一連のキーを含む、<see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型の <see cref="T:System.IdentityModel.Tokens.SecurityKey" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.IdentityModel.Tokens.SamlSecurityToken.SecurityKeys%2A> トークン、つまり SOAP メッセージを保護するには、このセキュリティ トークンの暗号化キーを設定するプロパティです。 キーできます、特に、デジタル署名またはトークンまたは SOAP メッセージを暗号化します。  
  
   
  
## 例  
 コード例で使用されている、 <xref:System.IdentityModel.Tokens.SecurityToken> からトピックを取得、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 実装が含まれています、 `SimpleWebToken` クラスおよび `SimpleWebTokenHandler` クラスだけでなく SWT トークンをサポートするその他のクラスです。 Wif とそのダウンロード場所このサンプルと使用可能なその他のサンプルの詳細について、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。 次のコードは、オーバーライド、 <xref:System.IdentityModel.Tokens.SecurityToken.SecurityKeys%2A> プロパティです。  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#3)]  
[!code-csharp[WifCustomTokenST#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>You must override the <see cref="P:System.IdentityModel.Tokens.SecurityToken.SecurityKeys" /> property.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ValidFrom">
      <MemberSignature Language="C#" Value="public abstract DateTime ValidFrom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ValidFrom" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このセキュリティ トークンの有効期間の開始時点を取得します。</summary>
        <value>このセキュリティ トークンの有効期間の開始時点を示す <see cref="T:System.DateTime" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> および <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> プロパティを使用して、<xref:System.IdentityModel.Tokens.SecurityToken> トークンの有効期間を決定します。<xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> および <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> プロパティはそれぞれ、セキュリティ トークンの有効期間の開始と終了の時点を示します。  
  
   
  
## 例  
 コード例で使用されている、 <xref:System.IdentityModel.Tokens.SecurityToken> からトピックを取得、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 実装が含まれています、 `SimpleWebToken` クラスおよび `SimpleWebTokenHandler` クラスだけでなく SWT トークンをサポートするその他のクラスです。 Wif とそのダウンロード場所このサンプルと使用可能なその他のサンプルの詳細について、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。 次のコードは、オーバーライド、 <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> プロパティです。  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#3)]  
[!code-csharp[WifCustomTokenST#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#6)]  
[!code-csharp[WifCustomTokenST#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#8)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>You must override the <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidFrom" /> property.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ValidTo">
      <MemberSignature Language="C#" Value="public abstract DateTime ValidTo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ValidTo" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このセキュリティ トークンの有効期間の終了時点を取得します。</summary>
        <value>このセキュリティ トークンの有効期間の終了の時点を示す <see cref="T:System.DateTime" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> および <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> プロパティを使用して、<xref:System.IdentityModel.Tokens.SecurityToken> トークンの有効期間を決定します。<xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> および <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> プロパティはそれぞれ、セキュリティ トークンの有効期間の開始と終了の時点を示します。  
  
   
  
## 例  
 コード例で使用されている、 <xref:System.IdentityModel.Tokens.SecurityToken> からトピックを取得、 `Custom Token` サンプルです。 このサンプルでは、Simple Web Token \(SWT\) の処理を有効にするカスタム クラスを提供します。 実装が含まれています、 `SimpleWebToken` クラスおよび `SimpleWebTokenHandler` クラスだけでなく SWT トークンをサポートするその他のクラスです。 Wif とそのダウンロード場所このサンプルと使用可能なその他のサンプルの詳細について、次を参照してください。 [WIF Code Sample Index](http://msdn.microsoft.com/ja-jp/6711f01a-4743-43ce-95ab-5e2302a363ea)します。 次のコードは、オーバーライド、 <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> プロパティです。  
  
 [!code-csharp[WifCustomTokenST#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtokenconstants.cs#1)]  
[!code-csharp[WifCustomTokenST#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#3)]  
[!code-csharp[WifCustomTokenST#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#7)]  
[!code-csharp[WifCustomTokenST#8](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokenst/cs/simplewebtoken/simplewebtoken.cs#8)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>You must override the <see cref="P:System.IdentityModel.Tokens.SecurityToken.ValidTo" /> property.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>