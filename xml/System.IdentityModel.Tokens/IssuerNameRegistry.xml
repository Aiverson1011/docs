<Type Name="IssuerNameRegistry" FullName="System.IdentityModel.Tokens.IssuerNameRegistry">
  <TypeSignature Language="C#" Value="public abstract class IssuerNameRegistry : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit IssuerNameRegistry extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.IssuerNameRegistry" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>発行者名レジストリの抽象基本クラスです。 発行者名レジストリは、対応する発行者によって生成されるトークンの署名を検証するために必要な暗号化マテリアルのニーモニック名を関連付けるために使用します。 発行者名レジストリでは、証明書利用者 \(rp\) アプリケーションで信頼されている発行者の一覧を管理します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 発行者名レジストリは、対応する発行元によって生成されるトークンの署名の検証に必要な暗号化マテリアルには、ニーモニック名前を関連付けるために使用します。 この名前は設定を使用し、 <xref:System.Security.Claims.Claim.Issuer%2A> または <xref:System.Security.Claims.Claim.OriginalIssuer%2A> クレームのプロパティです。 によって公開されるメソッド、 <xref:System.IdentityModel.Tokens.IssuerNameRegistry> クラスは、トークンを処理しているセキュリティ トークン ハンドラーによって、パイプラインから呼び出されます。 発行者名レジストリによってマップされていない材料で署名されたトークンが破棄され、信頼されていません。 発行者名レジストリによって返される名前は、RP アプリケーションのコンテキスト内で一意である必要があります。  
  
 コードでは、発行者名レジストリの設定して、使用を指定することができます、 <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=fullName> プロパティです。 指定して構成ファイル、発行者名レジストリを指定することができます、 [\<issuerNameRegistry\>](http://msdn.microsoft.com/ja-jp/58b39d12-c953-40c4-88af-d7eb3343ca28) の下の要素、 [\<securityTokenHandlerConfiguration\>](http://msdn.microsoft.com/ja-jp/28724cc6-020c-4a06-9a1f-d7594f315019) 要素。  
  
 Windows Identity Foundation \(WIF\) の実装を提供する、 <xref:System.IdentityModel.Tokens.IssuerNameRegistry> があらかじめクラス: <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry> クラスです。 この実装を使用する場合は、対象の RP アプリケーションの構成ファイルで信頼された発行者の一覧を指定できます、 [\<trustedIssuers\>](http://msdn.microsoft.com/ja-jp/d818c917-07b4-40db-9801-8676561859fd) 子要素である要素の `<issuerNameRegistry>` 要素と、 <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>.class がその要素で参照されている `type` 属性です。 下にある、 `<trustedIssuers>` 要素、各発行者名は、署名の検証に使用される X.509 証明書にマップします。  
  
 カスタム発行者名レジストリを作成するには、オーバーライドする必要があります、 <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName> メソッドです。 このメソッドは、指定したセキュリティ トークンの発行者名を返します。 必要に応じてオーバーライドできます、 <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%2CSystem.String%29?displayProperty=fullName> の発行者名を取得するときに、ヒント表示メカニズムを提供するメソッド、および <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetWindowsIssuerName%2A> メソッドを Windows の発行者の名前がトークンを提供する場合は異なる <xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>します。 オーバーライド、 <xref:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration%2A> 、発行者名レジストリの初期化に使用される構成ファイルを有効にします。  
  
   
  
## 例  
 次のコードの実装を示しています、 <xref:System.IdentityModel.Tokens.IssuerNameRegistry> のみ証明書の件名を使用する発行者を受け入れるクラス"CN \= localhost"です。  
  
> [!WARNING]
>  次のコードは、説明のためにです。 サブジェクト名に基づく証明書の検証とはことをお勧めできません。 実稼働環境では、このコードを使用しない必要があります。  
  
 [!code-csharp[WifIssuerNameRegistry\#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifissuernameregistry/cs/mvcwepapp/trustedissuernameregistry.cs#1)]  
  
 次に示します XML アプリケーションを信頼された発行者名レジストリの構成に必要です。  
  
```xml  
<system.identityModel>  
  <identityConfiguration>  
    <issuerNameRegistry type="System.IdentityModel.Samples.TrustedIssuerNameRegistry, MyApp" />  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected IssuerNameRegistry ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetIssuerName">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、指定したセキュリティ トークンの発行者名を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 トークンを処理しているセキュリティ トークン ハンドラーによって処理パイプラインから呼び出されます。 このメソッドは、RP アプリケーションのコンテキスト内で発行者の一意の名前を返す必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetIssuerName">
      <MemberSignature Language="C#" Value="public abstract string GetIssuerName (System.IdentityModel.Tokens.SecurityToken securityToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetIssuerName(class System.IdentityModel.Tokens.SecurityToken securityToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityToken" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="securityToken">発行者名を取得するセキュリティ トークンです。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定したセキュリティ トークンの発行者の名前を返します。</summary>
        <returns>発行者名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実装には、認識の発行者を識別するために null 以外および空以外の文字列または認識されない発行者を識別するために、null 文字列が返されます。  
  
 トークンを処理しているセキュリティ トークン ハンドラーによって処理パイプラインから呼び出されます。 このメソッドは、RP アプリケーションのコンテキスト内で発行者の一意の名前を返す必要があります。  
  
   
  
## 例  
 次のコードは、 <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> 発行者名レジストリのメソッドです。 完全なサンプルは、 <xref:System.IdentityModel.Tokens.IssuerNameRegistry> クラスの概要に関するトピック。  
  
> [!WARNING]
>  次のコードは、説明のためにです。 サブジェクト名に基づく証明書の検証とはことをお勧めできません。 実稼働環境では、このコードを使用しない必要があります。  
  
 [!code-csharp[WifIssuerNameRegistry\#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifissuernameregistry/cs/mvcwepapp/trustedissuernameregistry.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetIssuerName">
      <MemberSignature Language="C#" Value="public virtual string GetIssuerName (System.IdentityModel.Tokens.SecurityToken securityToken, string requestedIssuerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetIssuerName(class System.IdentityModel.Tokens.SecurityToken securityToken, string requestedIssuerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityToken" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="requestedIssuerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="securityToken">発行者名を取得するセキュリティ トークンです。</param>
        <param name="requestedIssuerName">要求で考慮すべき発行者名。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定したセキュリティ トークンの発行者の名前を返します。 指定した発行者名は、返される発行者名を決定する際と見なされる可能性です。</summary>
        <returns>発行者名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装を無視、 `requestedIssuerName` パラメーターと呼び出しだけで、 <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName> メソッドです。  
  
 トークンを処理しているセキュリティ トークン ハンドラーによって処理パイプラインから呼び出されます。 このメソッドは、RP アプリケーションのコンテキスト内で発行者の一意の名前を返す必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetWindowsIssuerName">
      <MemberSignature Language="C#" Value="public virtual string GetWindowsIssuerName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetWindowsIssuerName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetWindowsIssuerName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Windows クレームを使用する既定の発行者名を返します。</summary>
        <returns>Windows クレームの既定の発行者名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装では、<xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer> が返されます。  
  
 トークンを処理しているセキュリティ トークン ハンドラーによって処理パイプラインから呼び出されます。 このメソッドは、RP アプリケーションのコンテキスト内で発行者の一意の名前を返す必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">構成 XML 要素です。 型のリスト内の各ノードは、 <see cref="T:System.Xml.XmlElement" />です。</param>
        <summary>派生クラスでオーバーライドされた場合は、XML からカスタム構成を読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration%2A> 構成インフラストラクチャによって呼び出されます。 このメソッドが呼び出されると、 `nodelist` の最上位レベルの子要素が表示されます、 [\<issuerNameRegistry\>](http://msdn.microsoft.com/ja-jp/58b39d12-c953-40c4-88af-d7eb3343ca28) 構成ファイルからの要素。 属性または子要素は、派生クラスの定義の構成スキーマに応じて、これらの各に含めること、ことがあります。  
  
 既定の実装でスロー、 <xref:System.NotImplementedException>です。 派生クラスで、発行者名レジストリの構成ファイルからの初期化を有効にするには、このメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>