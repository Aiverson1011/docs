<Type Name="XNodeEqualityComparer" FullName="System.Xml.Linq.XNodeEqualityComparer">
  <TypeSignature Language="C#" Value="public sealed class XNodeEqualityComparer : System.Collections.Generic.IEqualityComparer&lt;System.Xml.Linq.XNode&gt;, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XNodeEqualityComparer extends System.Object implements class System.Collections.Generic.IEqualityComparer`1&lt;class System.Xml.Linq.XNode&gt;, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNodeEqualityComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.Xml.Linq.XNode&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>ノードを比較して等しいかどうかを確認します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスの目的は、実装する <xref:System.Collections.IEqualityComparer?displayProperty=fullName> と <xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=fullName>です。 識別情報を必要とするクラス \(よう <xref:System.Collections.Generic.Dictionary%602> \) これらのインターフェイスを実装するクラスのインスタンスを必要とします。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XNodeEqualityComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、2 つのノードが等しいかどうかを判断するのにこのクラスを使用します。  
  
```csharp  
  
                XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XElement xmlTree2 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XNodeEqualityComparer equalityComparer = new XNodeEqualityComparer();  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
xmlTree2.Add(new XElement("NewChild", "new content"));  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
```  
  
 この例を実行すると、次の出力が生成されます。  
  
```  
  
                True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xml.Linq.XNode x, System.Xml.Linq.XNode y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xml.Linq.XNode x, class System.Xml.Linq.XNode y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Xml.Linq.XNode" />
        <Parameter Name="y" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="x">比較対象となる最初の <see cref="T:System.Xml.Linq.XNode" />。</param>
        <param name="y">比較対象となる 2 番目の <see cref="T:System.Xml.Linq.XNode" />。</param>
        <summary>2 つのノードの値を比較します。</summary>
        <returns>A <see cref="T:System.Boolean" /> ノードが等しいかどうかを示します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の条件では、2 つのノードが等しいかどうかを決定します。  
  
-   A `null` ノードが他と等しい `null` 以外に等しくないが、ノード`null` ノードです。  
  
-   2 つ <xref:System.Xml.Linq.XNode> さまざまな種類のオブジェクトが等しいことはありません。  
  
-   2 つ <xref:System.Xml.Linq.XText> ノードが同じテキストが含まれている場合は等しい。  
  
-   2 つ <xref:System.Xml.Linq.XElement> が同じタグ名、同じ一連の同じ値を持つ属性 \(コメントや処理命令\) は、ペアワイズ等号の 2 つの長さシーケンスを含む場合は、ノードが等しいコンテンツ ノードです。  
  
-   2 つ <xref:System.Xml.Linq.XDocument> オブジェクトが、ルート ノードが等しい場合は等しい。  
  
-   2 つ <xref:System.Xml.Linq.XComment> ノードが同じコメント テキストが含まれている場合は等しい。  
  
-   2 つ <xref:System.Xml.Linq.XProcessingInstruction> ノードが同じターゲットとデータがある場合は等しい。  
  
-   2 つ <xref:System.Xml.Linq.XDocumentType> ノードが等しい場合は、同じ名前、パブリック ID、システム ID、および内部サブセットがあります。  
  
   
  
## 例  
 次の例では、このクラスを使用して、2 つのノードします。  
  
```csharp  
  
                XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XElement xmlTree2 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XNodeEqualityComparer equalityComparer = new XNodeEqualityComparer();  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
xmlTree2.Add(new XElement("NewChild", "new content"));  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
```  
  
 この例を実行すると、次の出力が生成されます。  
  
```  
  
                True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (System.Xml.Linq.XNode obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(class System.Xml.Linq.XNode obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="obj">
          <see cref="T:System.Xml.Linq.XNode" /> ハッシュします。</param>
        <summary>に基づいてハッシュ コードを返します、 <see cref="T:System.Xml.Linq.XNode" />です。</summary>
        <returns>A <see cref="T:System.Int32" /> ノードの値に基づくハッシュ コードを含みます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.Linq.XNode> の実装  <xref:System.Object.GetHashCode%2A> ノードの参照 id に基づきます。 このメソッドは、ノードとすべての子孫の値に基づく複雑なハッシュ コードを計算します。 ハッシュ コードには、すべての属性およびすべての子孫ノードが反映されます。  
  
   
  
## 例  
 次の例では、このメソッドを使用して、XML ツリーの深さのハッシュ コードを取得します。  
  
```csharp  
  
                XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XNodeEqualityComparer equalityComparer = new XNodeEqualityComparer();  
Console.WriteLine("HashCode: {0}", equalityComparer.GetHashCode(xmlTree).ToString("X"));  
xmlTree.Add(new XElement("NewChild", "new content"));  
Console.WriteLine("HashCode: {0}", equalityComparer.GetHashCode(xmlTree).ToString("X"));  
```  
  
 この例を実行すると、次の出力が生成されます。  
  
```  
  
                HashCode: 958CCD0  
HashCode: AD26516B  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">比較対象となる最初の <see cref="T:System.Xml.Linq.XNode" />。</param>
        <param name="y">比較対象となる 2 番目の <see cref="T:System.Xml.Linq.XNode" />。</param>
        <summary>2 つのノードの値を比較します。</summary>
        <returns>
          <see langword="true" /> ノードが等しい場合はそれ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の条件では、2 つのノードが等しいかどうかを決定します。  
  
-   A `null` ノードが他と等しい `null` 以外に等しくないが、ノード`null` ノードです。  
  
-   2 つ <xref:System.Xml.Linq.XNode> さまざまな種類のオブジェクトが等しいことはありません。  
  
-   2 つ <xref:System.Xml.Linq.XText> ノードが同じテキストが含まれている場合は等しい。  
  
-   2 つ <xref:System.Xml.Linq.XElement> が同じタグ名、同じ一連の同じ値を持つ属性 \(コメントや処理命令\) を除いて長さのペアワイズ等号の 2 つのシーケンスを含める場合は、ノードが等しいコンテンツ ノードです。  
  
-   2 つ <xref:System.Xml.Linq.XDocument> オブジェクトが、ルート ノードが等しい場合は等しい。  
  
-   2 つ <xref:System.Xml.Linq.XComment> ノードが同じコメント テキストが含まれている場合は等しい。  
  
-   2 つ <xref:System.Xml.Linq.XProcessingInstruction> ノードが同じターゲットとデータがある場合は等しい。  
  
-   2 つ <xref:System.Xml.Linq.XDocumentType> ノードが等しい場合は、同じ名前、パブリック ID、システム ID、および内部サブセットがあります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">ハッシュするノード。</param>
        <summary>ノードの値に基づいてハッシュ コードを返します。</summary>
        <returns>A <see cref="T:System.Int32" /> ノードの値に基づくハッシュ コードを含みます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.Linq.XNode> の実装 <xref:System.Object.GetHashCode%2A> ノードの参照 id に基づきます。 このメソッドは、ノード、その属性とその子孫の値に基づく複雑なハッシュ コードを計算します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>