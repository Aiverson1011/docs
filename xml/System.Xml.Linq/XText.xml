<Type Name="XText" FullName="System.Xml.Linq.XText">
  <TypeSignature Language="C#" Value="public class XText : System.Xml.Linq.XNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XText extends System.Xml.Linq.XNode" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XText" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>テキスト ノードを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 XML 要素には、テキストの内容を含めることができます。 コンテンツが \(要素のみを含むテキストの内容\)、単純な場合もありますし、コンテンツを混在する場合があります \(要素の内容には、テキストとその他の要素の両方が含まれています\)。 いずれの場合は、テキストの各チャンクとして表されます、 <xref:System.Xml.Linq.XText> ノードです。  
  
 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] 開発者が任意に使用するコードを記述する必要が多くの場合、 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] ツリーを作成できませんでした。 使用するコードを記述するかどうかは [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] ツリーを作成する制御は持たないに注意してくださいの特定の動作の <xref:System.Xml.Linq.XText> ノードです。  
  
 ノード レベルで XML ツリーの内容を処理するときにする覚悟しておいてください複数 <xref:System.Xml.Linq.XText> ノードを互いに隣接します。 準備するためのさらに、 <xref:System.Xml.Linq.XText> が含まれていないテキスト ノード。 使用可能であれば [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] テキスト ノードのコンテンツを削除する方法です。 ただし、 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] ノードを自動的に削除されません。 ノード id があり、そのための注釈を付けることがあります [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] により、ツリーにノードが長さ 0 です。  
  
 詳細については、「[Programming With Nodes](http://msdn.microsoft.com/ja-jp/18680d1c-6e7c-4645-8d53-27b5a96f2d3f)」を参照してください。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XText (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XText.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.String" /> の値を表す、 <see cref="T:System.Xml.Linq.XText" /> ノードです。</param>
        <summary>
          <see cref="T:System.Xml.Linq.XText" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常作成しないテキスト ノードを使用して、 <xref:System.Xml.Linq.XText> コンス トラクターです。 構築するときにテキストの内容をやり取りするとき、 <xref:System.Xml.Linq.XElement>, 、テキスト ノードが自動的に作成します。  
  
   
  
## 例  
 次の例では、テキスト ノードが含まれる要素を作成します。  
  
```csharp  
  
                XElement root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
```  
  
```vb  
  
                Dim root As XElement = <Root>Some text</Root>  
Console.WriteLine(root)  
```  
  
 この例を実行すると、次の出力が生成されます。  
  
```xml  
  
<Root>Some text</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XText (System.Xml.Linq.XText other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XText other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XText" />
      </Parameters>
      <Docs>
        <param name="other">
          <see cref="T:System.Xml.Linq.XText" /> からコピーするノード。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Xml.Linq.XText" /> から別のクラス <see cref="T:System.Xml.Linq.XText" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、主に内部的に使用して XML ツリーのディープ コピーを作成します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XText.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このノードのノード型を取得します。</summary>
        <value>ノード型。<see cref="T:System.Xml.Linq.XText" /> オブジェクトに、この値は <see cref="F:System.Xml.XmlNodeType.Text" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべてのクラスから派生するので <xref:System.Xml.Linq.XObject> を含む、 <xref:System.Xml.Linq.XObject.NodeType%2A> プロパティには、具体的なサブクラスのコレクションで動作するコードを記述することができます <xref:System.Xml.Linq.XObject>します。 コードは、コレクション内の各ノードのノード型をテストできます。  
  
   
  
## 例  
 次の例では、さまざまな種類のノードを格納する XML ツリーを作成します。 各ノードのノード型を出力するツリーを反復処理します。  
  
 注意 `Child2` を含む、 <xref:System.Xml.Linq.XText> ノードの文字列の内容から暗黙的に変換します。  
  
```csharp  
  
                // Note that XNode uses XmlNodeType, which is in the System.Xml namespace.  
XDocument xmlTree = new XDocument(  
    new XComment("a comment"),  
    new XProcessingInstruction("xml-stylesheet", "type=\"text/xsl\" href=\"hello.xsl\""),  
    new XElement("Root",  
        new XAttribute("Att", "attContent"),  
        new XElement("Child1",  
            new XCData("CDATA content")  
        ),  
        new XElement("Child2", "Text content")  
    )  
);  
  
foreach (XNode node in xmlTree.DescendantNodes())  
{  
    Console.WriteLine(node.NodeType);  
    if (node.NodeType == XmlNodeType.Element)  
    {  
        foreach (XAttribute att in ((XElement)node).Attributes())  
            Console.WriteLine(att.NodeType);  
    }  
}  
```  
  
```vb  
  
                ' Note that XNode uses XmlNodeType, which is in the System.Xml namespace.  
Dim xmlTree As XDocument = _  
    <?xml version='1.0'?>  
    <!-- a comment -->  
    <?xml-stylesheet type='text/xsl' href='hello.xsl'?>  
    <Root Att="attContent">  
        <Child1>  
            <![CDATA[CDATA content]]]><![CDATA[]>  
        </Child1>  
        <Child2>Text content</Child2>  
    </Root>  
  
For Each node As XNode In xmlTree.DescendantNodes  
    Console.WriteLine(node.NodeType.ToString())  
    If node.NodeType = XmlNodeType.Element Then  
        For Each att In DirectCast(node, XElement).Attributes  
            Console.WriteLine(att.NodeType.ToString())  
        Next  
    End If  
Next  
  
```  
  
 この例を実行すると、次の出力が生成されます。  
  
```  
Comment  
ProcessingInstruction  
Element  
Attribute  
Element  
CDATA  
Element  
Text  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XText.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはこのノードの値を設定します。</summary>
        <value>A <see cref="T:System.String" /> このノードの値を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは生成の設定、 <xref:System.Xml.Linq.XObject.Changed> と <xref:System.Xml.Linq.XObject.Changing> イベントです。  
  
   
  
## 例  
 次の例では、取得して、このプロパティの設定を示します。  
  
```csharp  
  
                XElement root = new XElement("Root", "Some text");  
XText txtNode = root.Nodes().OfType<XText>().First();  
Console.WriteLine(txtNode.Value);  
txtNode.Value = "New text";  
Console.WriteLine(txtNode.Value);  
  
root.Value = "Newer text";  
txtNode = root.Nodes().OfType<XText>().First();  
Console.WriteLine(txtNode.Value);  
```  
  
```vb  
  
                Dim root As XElement = <Root>Some text</Root>  
Dim txtNode As XText = root.Nodes().OfType(Of XText).First()  
Console.WriteLine(txtNode.Value)  
txtNode.Value = "New text"  
Console.WriteLine(txtNode.Value)  
  
root.Value = "Newer text"  
txtNode = root.Nodes().OfType(Of XText).First()  
Console.WriteLine(txtNode.Value)  
```  
  
 この例を実行すると、次の出力が生成されます。  
  
```  
Some text  
New text  
Newer text  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Xml.XmlWriter" /> にこのメソッドが作成されます。</param>
        <summary>このノードを書き込みます、 <see cref="T:System.Xml.XmlWriter" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが XML ツリーを作成するメソッドによって内部的に使用、主に、 <xref:System.Xml.XmlWriter>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XText.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Xml.Linq.XText" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>