<Type Name="Package" FullName="System.IO.Packaging.Package">
  <TypeSignature Language="C#" Value="public abstract class Package : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Package extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.Package" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Packaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>複数のデータ オブジェクトを格納可能なコンテナーを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.Package> オブジェクトの携行性と効率の高いアクセスの場合は、定義されている物理形式の 1 つのエンティティへの編成に使用できる抽象クラスです。  
  
 ZIP ファイルは、プライマリの物理形式、 <xref:System.IO.Packaging.Package>です。  その他の <xref:System.IO.Packaging.Package> 実装は、XML ドキュメントをデータベースなどその他の物理形式を使用してしたり、Web サービスです。  
  
 ファイル システムのような項目が含まれている、 <xref:System.IO.Packaging.Package> フォルダーとファイルの階層構造で参照されています。  
  
 <xref:System.IO.Packaging.Package> 自体が抽象クラスで、 <xref:System.IO.Packaging.ZipPackage> 派生クラスでは、既定として使用される、 <xref:System.IO.Packaging.Package.Open%2A> メソッドです。  
  
 A <xref:System.IO.Packaging.PackagePart> \(「部分」\) に格納されているオブジェクトを表す抽象クラスは、 <xref:System.IO.Packaging.Package>です。  
  
 A <xref:System.IO.Packaging.PackageRelationship> \(「リレーションシップ」\)、ソース間のアソシエーションを定義する <xref:System.IO.Packaging.Package> または <xref:System.IO.Packaging.PackagePart> と、ターゲット オブジェクト。  A <xref:System.IO.Packaging.PackageRelationship> それぞれできる 2 つの形式のいずれかの 2 種類のいずれかになります。  
  
-   パッケージ レベルのリレーションシップ \(によって作成された、 <xref:System.IO.Packaging.Package.CreateRelationship%2A?displayProperty=fullName> メソッド\) が関連する、 <xref:System.IO.Packaging.Package> いずれかにします。  
  
    -   パッケージ内のターゲット パーツです。  
  
    -   パッケージの外部のターゲット リソースです。  
  
-   パーツ レベルのリレーションシップ \(によって作成された、 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A?displayProperty=fullName> メソッド\) が関連するソース <xref:System.IO.Packaging.PackagePart> いずれかにします。  
  
    -   パッケージ内の別のターゲット パーツです。  
  
    -   パッケージの外部のターゲット リソースです。  
  
 リレーションシップのソース <xref:System.IO.Packaging.Package> またはソース <xref:System.IO.Packaging.PackagePart> リレーションシップの「所有者」と見なされます。  ソース オブジェクトが削除されると、ソース オブジェクトが所有するすべてのリレーションシップも削除されます。  作成するか、リレーションシップの削除のプロセスが任意の方法でソースまたはターゲットのいずれかのオブジェクトを物理的に変更することはできません。  
  
 A <xref:System.IO.Packaging.PackageDigitalSignature> \(「デジタル署名」\) のパーツとリレーションシップに含まれるデジタル署名を表す合成である、 <xref:System.IO.Packaging.Package>です。  デジタル署名は、発信元を識別し、署名されたパーツとリレーションシップに含まれることを検証、 <xref:System.IO.Packaging.Package> が変更されていません。  
  
 パッケージにはデジタル著作権管理 \(DRM\) のコンテンツの要素をサポートも、 <xref:System.IO.Packaging.Package> を承認されたユーザーに付与された特定のアクセス権を使用して暗号化することです。  
  
 に基づいて、 <xref:System.IO.Packaging.Package> 、アーキテクチャ、 <xref:System.Windows.Xps.Packaging.XpsDocument> 開くに基づいてドキュメントを格納するためのパッケージ型である [XML Paper Specification \(XPS\)](http://go.microsoft.com/fwlink/?LinkID=65761)します。  
  
 [!INCLUDE[TLA#tla_avalonwinfx](~/includes/tlasharptla-avalonwinfx-md.md)] パッケージを使用して、コンテンツ、リソース、およびページおよび既定では、標準の ZIP ファイルを使用してドキュメントのリレーションシップを格納します。 ZIP ファイルとアプリケーションで使用できるよう、 <xref:System.IO.Packaging> クラスを格納し、必要に応じて任意の種類と 1 つの効率的なアクセス コンテナー内のデータ ファイルの数を保護します。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 次の例では、基本的な手順を作成するため、 <xref:System.IO.Packaging.Package>です。  この例では、ドキュメントの一部として表示される画像と共にドキュメントを格納するパッケージが作成されます。  \(これは HTML ファイルに含まれる外部画像ファイルを参照する \< IMG \> タグの場合と同様に\)。  2 つ <xref:System.IO.Packaging.PackageRelationship> 要素がパッケージにも含まれています。  1 つ目の「パッケージ レベル」のリレーションシップは、パッケージのルート要素として、ドキュメント パーツを定義します。  2 番目の「パーツ レベル」関係では、ドキュメント パーツ \(パーツ レベルのリレーションシップの「ソース」\) とイメージのパーツ \(パーツ レベルのリレーションシップの"target"\) の間の関連付けを定義します。  完全なサンプルを参照してください。 [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055)します。  
  
 [!code-csharp[PackageWrite\#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite\#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackagePart" />
    <altmember cref="T:System.Windows.Xps.Packaging.XpsDocument" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">パッケージのファイルの IO アクセス許可。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.IO.Packaging.Package" /> クラスを使用する、指定された <see cref="T:System.IO.FileAccess" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.Package.%23ctor%2A> プロテクト コンス トラクターは、 <xref:System.IO.Packaging.Package> 抽象基本クラスです。 派生クラスで呼び出されると、 <xref:System.IO.Packaging.Package.%23ctor%2A> コンス トラクターが派生クラスの新しいインスタンスを初期化します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値 <paramref name="openFileAccess" /> が無効です。</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess, bool streaming);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess, bool streaming) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" />
        <Parameter Name="streaming" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">パッケージのファイルの IO アクセス許可。</param>
        <param name="streaming">
          <see langword="true" /> ストリーミング用のパッケージを開くそれ以外の場合、 <see langword="false" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.IO.Packaging.Package" /> クラスを使用する、指定された <see cref="T:System.IO.FileAccess" /> とオプションをストリーミングします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.Package.%23ctor%2A> プロテクト コンス トラクターは、 <xref:System.IO.Packaging.Package> 基本の抽象基本クラスを抽象化します。 派生クラスで呼び出されると、 <xref:System.IO.Packaging.Package.%23ctor%2A> コンス トラクターが派生クラスの新しいインスタンスを初期化します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">値 <paramref name="openFileAccess" /> が無効です。</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存し、パッケージとパーツのすべての基になるストリームを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.Package> クラス <xref:System.IO.Packaging.Package.Close%2A> と <xref:System.IO.Packaging.Package.Dispose%2A> 同じ操作を実行を呼び出す必要はありません <xref:System.IO.Packaging.Package.Dispose%2A> を呼び出す場合 <xref:System.IO.Packaging.Package.Close%2A>, 、またはその逆です。  
  
 <xref:System.IO.Packaging.Package.Close%2A> <xref:System.IO.Packaging.Package.Dispose%2A> を内部的に呼び出します <xref:System.IO.Packaging.Package.Flush%2A>します。  
  
> [!NOTE]
>  `using` ステートメント \(異なる、 `using` 名前空間ディレクティブ\) するための推奨される方法は、 <xref:System.IO.Packaging.Package.Close%2A> と <xref:System.IO.Packaging.Package.Dispose%2A> パッケージです。[Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055)[Reading a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160034) を閉じてを使用してパッケージを破棄する方法を示して、 `using` ステートメントです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreatePart">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しいパッケージ パーツを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 空の初期化 <xref:System.IO.Stream> 新しい部品のです。<xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName> 、パーツに関連付けられているストリームのインスタンスへの参照を取得するメソッドを使用できます。  
  
 パッケージ パーツの詳細についてでダウンロード可能な Open Packaging Conventions \(OPC\) 仕様のセクション 1.1 を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 次の例は、新しいを作成する方法を示しています。 <xref:System.IO.Packaging.PackagePart> 部分にデータを格納します。  完全なサンプルを参照してください。 [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055)します。  
  
 [!code-csharp[PackageWrite\#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite\#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="Overload:System.IO.Packaging.Package.CreatePart" /> internally calls the derived class <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> method to actually create the part based on the physical format implemented in the derived class.</para>
        </block>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="partUri">Uniform Resource Identifier (URI) 新しい部品のです。</param>
        <param name="contentType">データ ストリームのコンテンツ タイプ。</param>
        <summary>指定した URI とコンテンツの種類では、新しい圧縮されていない部分を作成します。</summary>
        <returns>新規作成されたパーツです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 空の初期化 <xref:System.IO.Stream> 新しい部品のです。<xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName> 、パーツに関連付けられているストリームのインスタンスへの参照を取得するメソッドを使用できます。  
  
 部品 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> は <xref:System.IO.Packaging.CompressionOption.NotCompressed?displayProperty=fullName>です。  
  
 パッケージ パーツの追加については、セクションを参照して 1.1 ダウンロード可能な Open Packaging Conventions \(OPC\) 仕様に [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 次の例は、新しいを作成する方法を示しています。 <xref:System.IO.Packaging.PackagePart> 部分にデータを格納します。  完全なサンプルを参照してください。 [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055)します。  
  
 [!code-csharp[PackageWrite\#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite\#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> または <paramref name="contentType" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 無効な <see cref="T:System.IO.Packaging.PackagePart" /> URIします。</exception>
        <exception cref="T:System.InvalidOperationException">指定したパーツ <paramref name="partUri" /> は、パッケージに既に存在します。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは読み取り専用 \(新しいパーツを追加することはできません\)。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" /> internally calls the derived class's <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> method to actually create the part based on the physical format implemented in the derived class.</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">URI新しいパーツです。</param>
        <param name="contentType">データ ストリームのコンテンツの種類。</param>
        <param name="compressionOption">データ ストリームの圧縮オプション<see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" />または<see cref="F:System.IO.Packaging.CompressionOption.Normal" />圧縮します。</param>
        <summary>指定した URI、コンテンツ タイプ、および圧縮オプションを新しいパーツを作成します。</summary>
        <returns>新規作成されたパート。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の<xref:System.IO.Packaging.ZipPackage>派生クラスに、<xref:System.IO.Packaging.Package.CreatePart%2A>メソッドのみをサポートしている 2 つ`compressionOption`値、<xref:System.IO.Packaging.CompressionOption.NotCompressed>または<xref:System.IO.Packaging.CompressionOption.Normal>圧縮します。  その他の<xref:System.IO.Packaging.CompressionOption>値の<xref:System.IO.Packaging.CompressionOption.Maximum>、 <xref:System.IO.Packaging.CompressionOption.Fast>、または<xref:System.IO.Packaging.CompressionOption.SuperFast>使用<xref:System.IO.Packaging.CompressionOption.Normal>圧縮します。  
  
 <xref:System.IO.Packaging.Package.CreatePart%2A>空の作成<xref:System.IO.Stream>新しいパーツのです。<xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName>パートに関連付けられているストリームのインスタンスへの参照を取得するメソッドを使用できます。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。  
  
   
  
## 例  
 次の例は、新しいを作成する方法を示しています。<xref:System.IO.Packaging.PackagePart>部にデータを格納します。  サンプル全体については、次を参照してください。 [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055)です。  
  
 [!code-csharp[PackageWrite\#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite\#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> または <paramref name="contentType" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" />有効ではありません<see cref="T:System.IO.Packaging.PackagePart" />Uniform Resource Identifier (URI)です。</exception>
        <exception cref="T:System.InvalidOperationException">指定した部分<paramref name="partUri" />はパッケージに既に存在します。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="compressionOption" />値が無効です。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />または<see cref="M:System.IO.Packaging.Package.Close" />が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは読み取り専用 \(新しいパーツを追加できません\)。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> internally calls the derived class's <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> method to actually create the part based on the physical format implemented in the derived class.</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart CreatePartCore (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart CreatePartCore(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">Uniform Resource Identifier (URI) に対して作成されるパーツです。</param>
        <param name="contentType">データ ストリームのコンテンツ タイプ。</param>
        <param name="compressionOption">データ ストリームの圧縮オプション。</param>
        <summary>派生クラスでオーバーライドされた場合は、パッケージに新しいパーツを作成します。</summary>
        <returns>作成されたパーツ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生 <xref:System.IO.Packaging.Package.CreatePartCore%2A> メソッドは、 <xref:System.IO.Packaging.Package.CreatePart%2A> パーツを作成するメソッドが派生クラスで実装されて物理形式に基づきます。  
  
 既定では、 <xref:System.IO.Packaging.ZipPackage> の抽象クラスの実装を派生 <xref:System.IO.Packaging.Package> クラスが提供され、使用できます。  既定の操作で <xref:System.IO.Packaging.Package.CreatePart%2A> 内部的に呼び出す <xref:System.IO.Packaging.Package.CreatePartCore%2A> の <xref:System.IO.Packaging.ZipPackage> 、ZIP ファイルに新しいパーツを作成するクラス。  
  
 既定の <xref:System.IO.Packaging.ZipPackage> 派生クラスを <xref:System.IO.Packaging.Package.CreatePartCore%2A> メソッドのみサポートしている 2 つ `compressionOption` 値、 <xref:System.IO.Packaging.CompressionOption.NotCompressed> または <xref:System.IO.Packaging.CompressionOption.Normal> 圧縮します。  その他の <xref:System.IO.Packaging.CompressionOption> 値 <xref:System.IO.Packaging.CompressionOption.Maximum>, 、<xref:System.IO.Packaging.CompressionOption.Fast>, 、または <xref:System.IO.Packaging.CompressionOption.SuperFast> を使用して <xref:System.IO.Packaging.CompressionOption.Normal> 圧縮します。  
  
 パッケージ モデルおよびパッケージの一部の詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様の第 1 章を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The derived <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> implementation should make no assumptions about the order or operations performed by the <see cref="Overload:System.IO.Packaging.Package.CreatePart" /> method that calls it.</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateRelationship">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したパーツにパッケージ レベルのリレーションシップを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パッケージ レベルのリレーションシップでは、パッケージと関連付けられているターゲット パーツまたはリソース間のアソシエーションを定義します。  パッケージ レベルのリレーションシップは、2 つの形式のいずれかを指定できます。  
  
-   間、 <xref:System.IO.Packaging.Package> ターゲットに <xref:System.IO.Packaging.PackagePart> パッケージ内です。  
  
-   間、 <xref:System.IO.Packaging.Package> パッケージの外部のターゲット リソースにします。  
  
 パッケージのリレーションシップでは、パッケージが、リレーションシップの「所有者」と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。  作成するか、リレーションシップの削除のプロセスは、ターゲット パーツまたは任意の方法でリソースを物理的に変更されません。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 次の例では、作成方法を示して、 <xref:System.IO.Packaging.PackageRelationship> 間、 <xref:System.IO.Packaging.Package> ルート ドキュメント パーツとします。  完全なサンプルを参照してください。 [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055)します。  
  
 [!code-csharp[PackageWrite\#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[PackageWrite\#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">Uniform Resource Identifier (URI) ターゲット パーツのです。</param>
        <param name="targetMode">かどうかをターゲット パーツ <see cref="F:System.IO.Packaging.TargetMode.Internal" /> または <see cref="F:System.IO.Packaging.TargetMode.External" /> パッケージにします。</param>
        <param name="relationshipType">リレーションシップのロールを一意に定義する URI。</param>
        <summary>指定した URI、ターゲット モード、およびリレーションシップの種類を使用を一部のパッケージ レベルのリレーションシップを作成します。</summary>
        <returns>指定したパーツをパッケージ レベルのリレーションシップ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パッケージ レベルのリレーションシップでは、パッケージと関連付けられているターゲット パーツまたはリソース間のアソシエーションを定義します。  パッケージ レベルのリレーションシップは、2 つの形式のいずれかを指定できます。  
  
-   間、 <xref:System.IO.Packaging.Package> パッケージ内のターゲット パーツにします。  
  
-   間、 <xref:System.IO.Packaging.Package> パッケージの外部のターゲット リソースにします。  
  
 パッケージのリレーションシップでは、パッケージが、リレーションシップの「所有者」と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> 物理的に変わりませんターゲット パーツまたは任意の方法でリソース。  
  
 リレーションシップのターゲットは、別のリレーションシップをすることはできません。  
  
 場合 `targetMode` として指定された <xref:System.IO.Packaging.TargetMode.Internal>, 、`targetUri` 」の手順に従って形成される相対 URI でなければなりません、 [RFC 3986](http://tools.ietf.org/html/rfc3986) Uniform Resource Identifier \(URI\) の一般的な構文の仕様です。  内部相対 URI でもかまいませんなどの文字をスラッシュ \(「\/」\) で開始するか、絶対パス"\/page1.xaml"または"\/images\/picture4.jpg"、またはなどの相対パス"..\/imagespicture1.jpg"パッケージのルートに対して \(「\/」\) として、ベース URI を解決します。  
  
 場合 `targetMode` として指定された <xref:System.IO.Packaging.TargetMode.External>, 、`targetUri` か絶対パスでもかまいません相対 URI の形式に従って、 [RFC 3986](http://tools.ietf.org/html/rfc3986) Uniform Resource Identifier \(URI\) の一般的な構文の仕様です。  "http:\/\/www.microsoft.com\/page2.xml"は、外部の対象リソース"page2.xml"を参照する絶対 URI の例を示します。  "images\/picture1.jpg"は、外部の対象リソース"1.jpg"が解決される、パッケージ自体の URI に対しを参照する相対 URI の例を示します。  
  
 `relationshipType` 必要があります、 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 」の手順に従って作成される、 [RFC 3986](http://tools.ietf.org/html/rfc3986) Uniform Resource Identifier \(URI\) の一般的な構文の仕様です。  次の表に、パッケージ レベル `relationshipType` Open Packaging Conventions \(OPC\) 仕様で定義されている Uri。  
  
|パッケージ レベルのリレーションシップ|URI の関係の種類|  
|-------------------------|----------------|  
|主要プロパティ|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/meta データ\/コアのプロパティ|  
|デジタル署名|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/digit al 署名\/署名|  
|デジタル署名の証明書|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/digit 証明書 al 署名\/|  
|デジタル署名の発行元|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/digit al\-署名元|  
|縮小表示|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/meta データ\/縮小表示|  
  
 パッケージおよびパッケージのリレーションシップの詳細についてでダウンロード可能な Open Packaging Conventions \(OPC\) 仕様のセクション 1.3 を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.IO.Packaging.Package.CreateRelationship%2A> を作成する、 <xref:System.IO.Packaging.PackageRelationship> 間、 <xref:System.IO.Packaging.Package> ルート ドキュメント パーツとします。  完全なサンプルを参照してください。 [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055)します。  
  
 [!code-csharp[packagewrite\#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite\#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetUri" /> または <paramref name="relationshipType" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="targetUri" /> 部分は、 <see cref="T:System.IO.Packaging.PackageRelationship" />, 、または <paramref name="targetMode" /> は <see cref="F:System.IO.Packaging.TargetMode.Internal" /> と <paramref name="targetUri" /> 、絶対 URI です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">値 <paramref name="targetMode" /> が無効です。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージとは、読み取り専用です。</exception>
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">Uniform Resource Identifier (URI) ターゲット パーツのです。</param>
        <param name="targetMode">かどうかをターゲット パーツ <see cref="F:System.IO.Packaging.TargetMode.Internal" /> または <see cref="F:System.IO.Packaging.TargetMode.External" /> パッケージにします。</param>
        <param name="relationshipType">リレーションシップのロールを一意に定義する URI。</param>
        <param name="id">一意の XML 識別子。</param>
        <summary>ターゲット モード、リレーションシップ型では、特定の URI を持つ部分に、パッケージ レベルのリレーションシップを作成し、 識別子 \(ID\)です。</summary>
        <returns>指定したパーツをパッケージ レベルのリレーションシップ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パッケージ レベルのリレーションシップでは、パッケージと関連付けられているターゲット パーツまたはリソース間のアソシエーションを定義します。  パッケージ レベルのリレーションシップは、2 つの形式のいずれかを指定できます。  
  
-   間、 <xref:System.IO.Packaging.Package> パッケージ内のターゲット パーツにします。  
  
-   間、 <xref:System.IO.Packaging.Package> パッケージの外部のターゲット リソースにします。  
  
 パッケージのリレーションシップでは、パッケージが、リレーションシップの「所有者」と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> 物理的に変わりませんターゲット パーツまたは任意の方法でリソース。  
  
 リレーションシップのターゲットは、別のリレーションシップをすることはできません。  
  
 `id` 有効な XML 識別子である必要があります。`id` 型 xsd:ID、XML Schema Part 2 で指定している名前付け規則に従う必要があります: datatypes 』 の仕様 \(を参照してください [http:\/\/www.w3.org\/TR\/xmlschema\-2\/\#ID](http://www.w3.org/TR/xmlschema-2/)\)。  
  
 場合 `id` として指定された `null` 一意の ID を自動的に生成されます。`id` 、空で指定された文字列が無効です。  
  
 場合 `targetMode` として指定された <xref:System.IO.Packaging.TargetMode.Internal>, 、`targetUri` 」の手順に従って形成される相対 URI でなければなりません、 [RFC 3986](http://tools.ietf.org/html/rfc3986) Uniform Resource Identifier \(URI\) の一般的な構文の仕様です。  内部相対 URI でもかまいませんなどの文字をスラッシュ \(「\/」\) で開始するか、絶対パス"\/page1.xaml"または"\/images\/picture4.jpg"、またはなどの相対パス"..\/imagespicture1.jpg"パッケージのルートに対して \(「\/」\) として、ベース URI を解決します。  
  
 場合 `targetMode` として指定された <xref:System.IO.Packaging.TargetMode.External>, 、`targetUri` か絶対パスでもかまいません相対 URI の形式に従って、 [RFC 3986](http://tools.ietf.org/html/rfc3986) Uniform Resource Identifier \(URI\) の一般的な構文の仕様です。  "http:\/\/www.microsoft.com\/page2.xml"は、外部の対象リソース"page2.xml"を参照する絶対 URI の例を示します。  "images\/picture1.jpg"は、外部の対象リソース"1.jpg"が解決される、パッケージ自体の URI に対しを参照する相対 URI の例を示します。  
  
 `relationshipType` 」の手順に従って形成される URI でなければなりません、 [RFC 3986](http://tools.ietf.org/html/rfc3986) Uniform Resource Identifier \(URI\) の一般的な構文の仕様です。  次の表に、パッケージ レベル `relationshipType` Open Packaging Conventions \(OPC\) 仕様で定義されている Uri。  
  
|パッケージ レベルのリレーションシップ|URI の関係の種類|  
|-------------------------|----------------|  
|主要プロパティ|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/meta データ\/コアのプロパティ|  
|デジタル署名|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/digit al 署名\/署名|  
|デジタル署名の証明書|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/digit 証明書 al 署名\/|  
|デジタル署名の発行元|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/digit al\-署名元|  
|縮小表示|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/meta データ\/縮小表示|  
  
 パッケージおよびパッケージのリレーションシップの追加についてでダウンロード可能な Open Packaging Conventions \(OPC\) 仕様のセクション 1.3 を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.IO.Packaging.Package.CreateRelationship%2A> を作成する、 <xref:System.IO.Packaging.PackageRelationship> 間、 <xref:System.IO.Packaging.Package> ルート ドキュメント パーツとします。  完全なサンプルを参照してください。 [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055)します。  
  
 [!code-csharp[packagewrite\#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite\#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetUri" /> または <paramref name="relationshipType" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="targetUri" /> 部分は、 <see cref="T:System.IO.Packaging.PackageRelationship" />, 、または <paramref name="targetMode" /> は <see cref="F:System.IO.Packaging.TargetMode.Internal" /> と <paramref name="targetUri" /> 、絶対 URI です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">値 <paramref name="targetMode" /> が無効です。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージとは、読み取り専用です。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 有効な XML 識別子ではありません。または、指定したパーツ <paramref name="id" /> パッケージ内に既に存在します。</exception>
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePart">
      <MemberSignature Language="C#" Value="public void DeletePart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeletePart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">URI 部分を削除するのです。</param>
        <summary>指定された URI を持つパーツをパッケージから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `partUri` 文字をスラッシュ \(「\/」\) で始まる絶対パスで構成される相対 URI である必要があります。  絶対パスを選択し、パッケージのルートに対する相対パスです」の手順に従って形式が、 [RFC 3986](http://tools.ietf.org/html/rfc3986) Uniform Resource Identifier \(URI\) の一般的な構文の仕様です。  "\/page1.xaml"と"\/images\/picture4.jpg"有効な部分の Uri の例を示します。  
  
 場合に、指定した部分に例外が発生しなかった `partUri` がパッケージ内にありません。  \(使用することができます、 <xref:System.IO.Packaging.Package.PartExists%2A> と指定したパーツかどうかを決定する方法 `partUri` がパッケージ内にします\)。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 無効な <see cref="T:System.IO.Packaging.PackagePart" /> URIします。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージとは、読み取り専用です。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> internally calls the derived class's <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> method to actually delete the part based on the physical format implemented in the derived class.</para>
        </block>
        <altmember cref="Overload:System.IO.Packaging.Package.CreatePart" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePartCore">
      <MemberSignature Language="C#" Value="protected abstract void DeletePartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DeletePartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">
          <see cref="P:System.IO.Packaging.PackagePart.Uri" /> の <see cref="T:System.IO.Packaging.PackagePart" /> を削除します。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定した URI を持つパーツを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、 <xref:System.IO.Packaging.ZipPackage> の抽象クラスの実装を派生 <xref:System.IO.Packaging.Package> クラスが提供され、使用できます。  既定の操作で <xref:System.IO.Packaging.Package.DeletePart%2A> 内部的に呼び出す <xref:System.IO.Packaging.Package.DeletePartCore%2A> の <xref:System.IO.Packaging.ZipPackage> を実際に実行するクラスが派生クラスで実装されて物理形式に基づく操作を削除します。  
  
 パッケージ モデルおよびパッケージの一部の詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様の第 1 章を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The derived class <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> implementation is called by the <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> method to the specified part based on the physical format implemented in the derived class.  
  
 The derived <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> implementation should make no assumptions about the order or operations performed by the <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> method that calls it.</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteRelationship">
      <MemberSignature Language="C#" Value="public void DeleteRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">
          <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> の <see cref="T:System.IO.Packaging.PackageRelationship" /> を削除します。</param>
        <summary>パッケージ レベルのリレーションシップを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パッケージ レベルのリレーションシップでは、パッケージと関連付けられているターゲット パーツまたはリソース間のアソシエーションを定義します。  パッケージ レベルのリレーションシップは、2 つの形式のいずれかを指定できます。  
  
-   間、 <xref:System.IO.Packaging.Package> パッケージ内のターゲット パーツにします。  
  
-   間、 <xref:System.IO.Packaging.Package> パッケージの外部のターゲット リソースにします。  
  
 パッケージのリレーションシップでは、パッケージが、リレーションシップの「所有者」と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。  
  
 指定したリレーションシップの場合に例外が発生しなかった `id` がパッケージ内にありません。  
  
 <xref:System.IO.Packaging.Package.DeleteRelationship%2A> 任意の方法で、ターゲット パーツを物理的に変更しません。  
  
 パッケージのリレーションシップの詳細についてでダウンロード可能な Open Packaging Conventions \(OPC\) 仕様のセクション 1.3 を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージとは、読み取り専用です。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 有効な XML 識別子ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>フラッシュ、すべてのパーツとリレーションシップの内容を保存し、パッケージを閉じ、およびすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての変更は正しく保存されているかどうかを確認する <xref:System.IO.Packaging.Package.Dispose%2A> も終了し、フラッシュ、し、すべてのパーツと、パッケージに含まれているリレーションシップを閉じます。  
  
 <xref:System.IO.Packaging.Package> クラス、 <xref:System.IO.Packaging.Package.Dispose%2A> と <xref:System.IO.Packaging.Package.Close%2A> 同じ操作を実行を呼び出す必要はありません \- <xref:System.IO.Packaging.Package.Dispose%2A> を呼び出す場合 <xref:System.IO.Packaging.Package.Close%2A>, 、またはその逆です。  
  
 <xref:System.IO.Packaging.Package.Close%2A> <xref:System.IO.Packaging.Package.Dispose%2A> を内部的に呼び出します <xref:System.IO.Packaging.Package.Flush%2A>します。  
  
 割り当てし、非メモリ リソースを管理する派生クラスは、リソースを解放するには、このメソッドをオーバーライドする必要がありますと <xref:System.IO.Packaging.Package.Dispose%2A> が呼び出されます。 派生クラスのオーバーライドを呼び出す必要がありますも <xref:System.IO.Packaging.Package.Flush%2A> と基底クラス <xref:System.IO.Packaging.Package.Dispose%2A> 基底クラスがクリーンアップされ、常に実行されているかどうかを確認します。  
  
> [!NOTE]
>  `using` ステートメント \(異なる、 `using` 名前空間ディレクティブ\) するための推奨される方法は、 <xref:System.IO.Packaging.Package.Close%2A> と <xref:System.IO.Packaging.Package.Dispose%2A> パッケージです。[Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055) 閉じてを使用してパッケージを破棄する方法を示しています、 `using` ステートメントです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.Package.Flush" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="FileOpenAccess">
      <MemberSignature Language="C#" Value="public System.IO.FileAccess FileOpenAccess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileAccess FileOpenAccess" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.FileOpenAccess" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ファイル アクセスは、パッケージの設定を取得します。</summary>
        <value>いずれか、 <see cref="T:System.IO.FileAccess" /> 値: <see cref="F:System.IO.FileAccess.Read" />, 、<see cref="F:System.IO.FileAccess.Write" />, 、または <see cref="F:System.IO.FileAccess.ReadWrite" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.Package.FileOpenAccess%2A> プロパティには、既定値はありません。  ファイル アクセスの設定がで指定された、 <xref:System.IO.Packaging.Package.%23ctor%2A> コンス トラクターを呼び出すか、新しいパッケージを作成する、 <xref:System.IO.Packaging.Package.Open%2A> 既存のパッケージを開くときに呼び出します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>パッケージ内のすべてのパーツとリレーションシップが含まれている内容を保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.Package.Flush%2A> 内部的に呼び出すため、派生クラスの <xref:System.IO.Packaging.Package.FlushCore%2A> 実装を実際のファイル形式に固有のフラッシュ操作を実行します。  派生クラスの <xref:System.IO.Packaging.Package.FlushCore%2A> メソッドは、実際には、特定の物理的な派生クラスの実装をパーツとリレーションシップのコンテンツを保存するために行います。  
  
 既定では、 <xref:System.IO.Packaging.ZipPackage> 抽象の実装を派生 <xref:System.IO.Packaging.Package> 基本クラスが提供され、使用できます。 既定の操作で <xref:System.IO.Packaging.Package.Flush%2A> 内部的に呼び出す <xref:System.IO.Packaging.Package.FlushCore%2A> を ZIP ファイル パッケージのパーツとリレーションシップを保存します。  
  
 <xref:System.IO.Packaging.Package.Flush%2A> によって自動的に呼び出されますが、 <xref:System.IO.Packaging.Package.Close%2A> と <xref:System.IO.Packaging.Package.Dispose%2A> メソッドです。  ときに <xref:System.IO.Packaging.Package.Close%2A> または <xref:System.IO.Packaging.Package.Dispose%2A> 呼びますを呼び出す必要はありません <xref:System.IO.Packaging.Package.Flush%2A> とは別にします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは、読み取り専用して、変更できません。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.Flush" /> internally calls the derived class's <see cref="M:System.IO.Packaging.Package.FlushCore" /> method to actually flush the part based on the physical format implemented in the derived class.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FlushCore">
      <MemberSignature Language="C#" Value="protected abstract void FlushCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FlushCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.FlushCore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、派生クラスのストアにすべてのパーツとリレーションシップの内容を保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.Package.FlushCore%2A> によって呼び出される、 <xref:System.IO.Packaging.Package.Flush%2A> の実際のフラッシュ操作を実行するメソッドが派生クラスで実装された物理形式に基づいています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The derived <see cref="M:System.IO.Packaging.Package.FlushCore" /> implementation should not make any assumptions about the order or operations performed by the <see cref="M:System.IO.Packaging.Package.Flush" /> method that calls it.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetPart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart GetPart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart GetPart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">Uniform Resource Identifier (URI) の一部を返します。</param>
        <summary>指定した URI を持つ部分を返します。</summary>
        <returns>指定したパーツ <paramref name="partUri" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.InvalidOperationException> 場合に、指定した部分にスローされる `partUri` 存在しません。  
  
 <xref:System.IO.Packaging.Package.PartExists%2A> を判断するメソッドを使用できるかどうか `partUri` の既存のパーツを参照します。  
  
 既定では、 <xref:System.IO.Packaging.ZipPackage> 抽象の実装を派生 <xref:System.IO.Packaging.Package> 基本クラスが提供され、使用できます。  既定の操作で <xref:System.IO.Packaging.Package.GetPart%2A> 内部的に呼び出す <xref:System.IO.Packaging.Package.GetPartCore%2A> の <xref:System.IO.Packaging.ZipPackage> ZIP ファイルからの要求の一部を返したりするクラス。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 次の例では、検索、取得、およびパッケージに含まれている部分を読み取る方法を示しています。  完全なサンプルを参照してください。 [Reading a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160034)します。  
  
 [!code-csharp[PackageRead\#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead\#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 無効な <see cref="T:System.IO.Packaging.PackagePart" /> Uniform Resource Identifier (URI)します。</exception>
        <exception cref="T:System.InvalidOperationException">指定したパーツ <paramref name="partUri" /> がパッケージ内にありません。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは、書き込み専用です。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> internally calls the derived class <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> method to actually flush the part based on the physical format implemented in the derived class.</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.GetParts" />
        <altmember cref="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart GetPartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart GetPartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">Uniform Resource Identifier (URI) の一部を取得します。</param>
        <summary>派生クラスでオーバーライドされた場合は、特定の URI によってアドレス指定された部分を返します。</summary>
        <returns>要求されたパーツ。または <see langword="null" />, 場合に、指定した部分、 <paramref name="partUri" /> がパッケージ内にありません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、 <xref:System.IO.Packaging.ZipPackage> 抽象の実装を派生 <xref:System.IO.Packaging.Package> クラスが提供され、使用できます。  既定の操作で <xref:System.IO.Packaging.Package.GetPart%2A> 内部的に呼び出す <xref:System.IO.Packaging.Package.GetPartCore%2A> の <xref:System.IO.Packaging.ZipPackage> ZIP ファイルから一部を取得するクラス。  
  
 パッケージ モデルおよびパッケージの一部の詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様の第 1 章を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The derived class  <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> implementation is called by the <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> method to access and return the specified part based on the physical format implemented in the derived class.  
  
 The derived <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> implementation should make no assumptions about the order or operations performed by the <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> method that calls it.</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartsCore" />
      </Docs>
    </Member>
    <Member MemberName="GetParts">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePartCollection GetParts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePartCollection GetParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetParts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>パッケージ内のすべての部分のコレクションを返します。</summary>
        <returns>すべてのコレクション、<see cref="T:System.IO.Packaging.PackagePart" />パッケージに含まれる要素です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.Package.GetParts%2A>など、パッケージに含まれているすべての部分のコレクションを返します<xref:System.IO.Packaging.PackageRelationship>部分。  
  
 <xref:System.IO.Packaging.Package.GetParts%2A>返すことは`null`。 ただし、パッケージに部分が含まれていない場合、返されるコレクションは要素がゼロには。  
  
 既定では、<xref:System.IO.Packaging.ZipPackage>抽象の実装を派生<xref:System.IO.Packaging.Package>基底クラスが提供され、使用できます。  既定の操作で<xref:System.IO.Packaging.Package.GetParts%2A>呼び出し、<xref:System.IO.Packaging.Package.GetPartsCore%2A>のメソッド、 <xref:System.IO.Packaging.ZipPackage> ZIP ファイルからの部分を返すためにします。  
  
 パッケージとパッケージ パーツの詳細についてを参照してください 1.1 のダウンロード可能な Open Packaging Conventions \(OPC\) 仕様で[http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。  
  
   
  
## 例  
 次の例を使用する方法を示しています、<xref:System.IO.Packaging.Package.GetParts%2A>に含まれるパーツのコレクションを取得するメソッド、<xref:System.IO.Packaging.Package>です。  完全なプログラム ソース コードでは、次を参照してください。 [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966)です。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">パッケージが開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />または<see cref="M:System.IO.Packaging.Package.Close" />が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは、書き込み専用です。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.Packaging.Package.GetParts" /> internally calls the derived class <see cref="M:System.IO.Packaging.Package.GetPartsCore" /> method to actually flush the part based on the physical format implemented in the derived class.</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartsCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart[] GetPartsCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart[] GetPartsCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartsCore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、パッケージ内のすべての部分配列を返します。</summary>
        <returns>パッケージに含まれているすべての部分の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生クラス <xref:System.IO.Packaging.Package.GetPartsCore%2A> 実装が呼び出される、 <xref:System.IO.Packaging.Package.GetParts%2A> にアクセスして、構成要素の配列を返すメソッドが派生クラスで実装されて物理形式に基づきます。  
  
 既定では、 <xref:System.IO.Packaging.ZipPackage> 抽象の実装を派生 <xref:System.IO.Packaging.Package> クラスが提供され、使用できます。  既定の操作で <xref:System.IO.Packaging.Package.GetParts%2A> 内部的に呼び出す <xref:System.IO.Packaging.Package.GetPartCore%2A> の <xref:System.IO.Packaging.ZipPackage> ZIP ファイルから部分を取得するクラス。  
  
 パッケージ モデルおよびパッケージの一部の詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様の第 1 章を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The derived <see cref="M:System.IO.Packaging.Package.GetPartsCore" /> implementation should make no assumptions about the order or operations performed by the <see cref="M:System.IO.Packaging.Package.GetParts" /> method that calls it.</para>
        </block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship GetRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship GetRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">
          <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> のリレーションシップを返します。</param>
        <summary>指定した識別子を持つパッケージ レベルのリレーションシップを返します。</summary>
        <returns>指定したパッケージ レベルのリレーションシップ <paramref name="id" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `id` 有効な XML 識別子である必要があります。`id` 型 xsd:ID、XML Schema Part 2 で指定している名前付け規則に従う必要があります: datatypes 』 の仕様 \(を参照してください [http:\/\/www.w3.org\/TR\/xmlschema\-2\/\#ID](http://www.w3.org/TR/xmlschema-2/#ID)\)。  
  
 パッケージおよびパッケージのリレーションシップの追加についてでダウンロード可能な Open Packaging Conventions \(OPC\) 仕様のセクション 1.3 を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 有効な XML 識別子ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">指定されたリレーションシップ <paramref name="id" /> がパッケージ内にありません。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは、書き込み専用です。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationships">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationships() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationships" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてのパッケージ レベルのリレーションシップのコレクションを返します。</summary>
        <returns>パッケージに含まれているすべてのパッケージ レベルのリレーションシップのコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> 返すことは `null`; が、パッケージにパッケージ レベルのリレーションシップが含まれていない場合、返されるコレクションは 0 個の要素を含めることができます。  
  
 パッケージ レベルのリレーションシップでは、パッケージと関連付けられているターゲット パーツまたはリソース間のアソシエーションを定義します。  パッケージ レベルのリレーションシップは、2 つの形式のいずれかを指定できます。  
  
-   間、 <xref:System.IO.Packaging.Package> パッケージ内のターゲット パーツにします。  
  
-   間、 <xref:System.IO.Packaging.Package> パッケージの外部のターゲット リソースにします。  
  
 パッケージのリレーションシップでは、パッケージが、リレーションシップの「所有者」と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。  作成するか、リレーションシップの削除のプロセスは、ターゲット パーツまたは任意の方法でリソースを物理的に変更されません。  
  
 パッケージおよびパッケージのリレーションシップの追加についてでダウンロード可能な Open Packaging Conventions \(OPC\) 仕様のセクション 1.3 を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは、書き込み専用です。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipsByType">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType(string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType">
          <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> に一致するコレクションを返します。</param>
        <summary>一致するすべてのパッケージ レベルのリレーションシップのコレクションを返す、指定された <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />します。</summary>
        <returns>指定されたパッケージ レベルのリレーションシップのコレクション <paramref name="relationshipType" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> 返すことは `null`; が、指定されたパッケージ レベルのリレーションシップがない場合、返されるコレクションは 0 個の要素を含めることが `relationshipType`です。  
  
 次の表に、パッケージ レベル `relationshipType` Open Packaging Conventions \(OPC\) 仕様で定義されている Uri。  
  
|パッケージ レベルのリレーションシップ|URI の関係の種類|  
|-------------------------|----------------|  
|主要プロパティ|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/meta データ\/コアのプロパティ|  
|デジタル署名|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/digit al 署名\/署名|  
|デジタル署名の証明書|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/digit 証明書 al 署名\/|  
|デジタル署名の発行元|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/digit al\-署名元|  
|縮小表示|http:\/\/schemas.openxmlformats.org\/package\/2006\/relationships\/meta データ\/縮小表示|  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 次の例では、パッケージに定義されているリレーションシップを取得する方法を示します。  完全なサンプルを参照してください。 [Reading a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160034)します。  
  
 [!code-csharp[PackageRead\#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead\#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="relationshipType" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="relationshipType" /> が空の文字列です。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは、書き込み専用です。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>パッケージを開きます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.ZipPackage> 使用される既定のパッケージの種類、 <xref:System.IO.Packaging.Package.Open%2A> メソッドです。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 次の例は、新しいを作成する方法を示しています。 <xref:System.IO.Packaging.Package> を組み込んだ <xref:System.IO.Packaging.PackageRelationship> と <xref:System.IO.Packaging.PackagePart> と共に格納されているデータ要素です。  完全なサンプルを参照してください。 [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055)します。  
  
 [!code-csharp[PackageWrite\#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite\#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">パッケージを開く IO ストリーム。</param>
        <summary>指定された IO ストリームにパッケージを開きます。</summary>
        <returns>開かれたパッケージです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.ZipPackage> 使用される既定のパッケージの種類、 <xref:System.IO.Packaging.Package.Open%2A> メソッドです。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">パッケージを開くには、読み取りまたは読み取り\/書き込みアクセス許可と、指定した必要があります。 <paramref name="stream" /> が書き込み専用で、パッケージを開くには、書き込みまたは読み取り\/書き込みアクセス許可と、指定した必要があります。 または、 <paramref name="stream" /> は読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">パッケージのパスとファイル名。</param>
        <summary>指定されたパスとファイル名にパッケージを開きます。</summary>
        <returns>開かれたパッケージです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.ZipPackage> 使用される既定のパッケージの種類、 <xref:System.IO.Packaging.Package.Open%2A> メソッドです。  
  
 これは、 <xref:System.IO.Packaging.Package.Open%2A> メソッドは、既定の属性を持つパッケージを開きます <xref:System.IO.FileMode.OpenOrCreate>, 、<xref:System.IO.FileAccess.ReadWrite>, 、および <xref:System.IO.FileShare.None> \(をさまざまな属性を使用して、他の Open メソッドのオーバー ロードのいずれかを指定\)。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 次の例は、新しいを作成する方法を示しています。 <xref:System.IO.Packaging.Package> を組み込んだ <xref:System.IO.Packaging.PackageRelationship> と <xref:System.IO.Packaging.PackagePart> と共に格納されているデータ要素です。  完全なサンプルを参照してください。 [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055)します。  
  
 [!code-csharp[PackageWrite\#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite\#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="stream">パッケージを開く IO ストリーム。</param>
        <param name="packageMode">パッケージを開くファイル モード。</param>
        <summary>指定した IO ストリームとファイル モードでパッケージを開きます。</summary>
        <returns>開かれたパッケージです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.ZipPackage> 使用される既定のパッケージの種類、 <xref:System.IO.Packaging.Package.Open%2A> メソッドです。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="packageMode" /> の値が無効です。</exception>
        <exception cref="T:System.IO.IOException">パッケージを開くには、読み取りまたは読み取り\/書き込みアクセス許可と、指定した必要があります。 <paramref name="stream" /> が書き込み専用で、パッケージを開くには、書き込みまたは読み取り\/書き込みアクセス許可と、指定した必要があります。 または、 <paramref name="stream" /> は読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path">パッケージのパスとファイル名。</param>
        <param name="packageMode">パッケージを開くファイル モード。</param>
        <summary>指定したファイル モードを使用して、指定したパスにパッケージを開きます。</summary>
        <returns>開かれたパッケージです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.ZipPackage> 使用される既定のパッケージの種類、 <xref:System.IO.Packaging.Package.Open%2A> メソッドです。  
  
 これは、 <xref:System.IO.Packaging.Package.Open%2A> メソッド パッケージが開き、既定の属性を持つ <xref:System.IO.FileAccess.ReadWrite> と <xref:System.IO.FileShare.None> \(をさまざまな属性を使用して、他の Open メソッドのオーバー ロードのいずれかを指定\)。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 次の例は、新しいを作成する方法を示しています。 <xref:System.IO.Packaging.Package> を組み込んだ <xref:System.IO.Packaging.PackageRelationship> と <xref:System.IO.Packaging.PackagePart> と共に格納されているデータ要素です。  完全なサンプルを参照してください。 [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055)します。  
  
 [!code-csharp[PackageWrite\#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite\#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">場合は値 <paramref name="packageMode" /> が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="stream">パッケージを開く IO ストリーム。</param>
        <param name="packageMode">パッケージを開くファイル モード。</param>
        <param name="packageAccess">パッケージを開くときに、ファイルのアクセス。</param>
        <summary>指定した IO ストリーム、ファイル モード、およびファイル アクセスの設定では、パッケージを開きます。</summary>
        <returns>開かれたパッケージです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.ZipPackage> 使用される既定のパッケージの種類、 <xref:System.IO.Packaging.Package.Open%2A> メソッドです。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">値 <paramref name="packageMode" /> または <paramref name="packageAccess" /> が無効です。</exception>
        <exception cref="T:System.IO.IOException">開くには、パッケージは、読み取りまたは読み取り\/書き込みアクセス許可と、指定した必要があります。 <paramref name="stream" /> が書き込み専用で、パッケージを開くには、書き込みまたは読み取り\/書き込みアクセス許可と、指定した必要があります。 または <paramref name="stream" /> は読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path">パッケージのパスとファイル名。</param>
        <param name="packageMode">パッケージを開くファイル モード。</param>
        <param name="packageAccess">パッケージを開くときに、ファイルのアクセス。</param>
        <summary>指定したファイル モードおよびファイル アクセス設定を使用して指定されたパスにあるパッケージを開きます。</summary>
        <returns>開かれたパッケージです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.ZipPackage> 使用される既定のパッケージの種類、 <xref:System.IO.Packaging.Package.Open%2A> メソッドです。  
  
 これは、 <xref:System.IO.Packaging.Package.Open%2A> メソッドでは、パッケージを開き、既定値 <xref:System.IO.FileShare.None> 属性 \(別の属性を使用するよう指定する、 <xref:System.IO.Packaging.Package.Open%2A> メソッドのオーバー ロード\)。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 次の例を開いて読み取る方法を示しています、 <xref:System.IO.Packaging.Package> を含む <xref:System.IO.Packaging.PackageRelationship> と <xref:System.IO.Packaging.PackagePart> と共に格納されているデータ要素です。  完全なサンプルを参照してください。 [Reading a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160034)します。  
  
 [!code-csharp[PackageRead\#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead\#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">場合は値 <paramref name="packageMode" /> または <paramref name="packageAccess" /> が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess, System.IO.FileShare packageShare);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess, valuetype System.IO.FileShare packageShare) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
        <Parameter Name="packageShare" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path">パッケージのパスとファイル名。</param>
        <param name="packageMode">パッケージを開くファイル モード。</param>
        <param name="packageAccess">パッケージを開くときに、ファイルのアクセス。</param>
        <param name="packageShare">ファイル共有をパッケージを開くモード。</param>
        <summary>指定したファイル モード、ファイルへのアクセスおよびファイル共有の設定を使用して、指定されたパスにパッケージを開きます。</summary>
        <returns>開かれたパッケージです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.ZipPackage> 使用される既定のパッケージの種類、 <xref:System.IO.Packaging.Package.Open%2A> メソッドです。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 次の例は、新しいを作成する方法を示しています。 <xref:System.IO.Packaging.Package> を組み込んだ <xref:System.IO.Packaging.PackageRelationship> と <xref:System.IO.Packaging.PackagePart> と共に格納されているデータ要素です。  完全なサンプルを参照してください。 [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055)します。  
  
 [!code-csharp[PackageWrite\#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite\#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">値 <paramref name="packageMode" />, 、<paramref name="packageAccess" />, 、または <paramref name="packageShare" /> が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="PackageProperties">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageProperties PackageProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.PackageProperties PackageProperties" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.PackageProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パッケージの中核となるプロパティを取得します。</summary>
        <value>パッケージの中核となるプロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コア パッケージのプロパティの詳細についてでダウンロード可能な Open Packaging Conventions \(OPC\) 仕様のセクション 3.1 を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
      </Docs>
    </Member>
    <Member MemberName="PartExists">
      <MemberSignature Language="C#" Value="public virtual bool PartExists (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PartExists(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">
          <see cref="T:System.Uri" /> 部分をチェックするのです。</param>
        <summary>指定した URI を持つパーツがパッケージ内にあるかどうかを示します。</summary>
        <returns>
          <see langword="true" /> 場合に、指定した部分 <paramref name="partUri" /> パッケージでは、それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `partUri` 、スラッシュで始まる必要があります「\/」は、パッケージのルートから絶対であるとします。  
  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partUri" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 無効な <see cref="T:System.IO.Packaging.PackagePart" /> Uniform Resource Identifier (URI)します。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは書き込み専用 \(情報を読み取ることはできません\)。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
      </Docs>
    </Member>
    <Member MemberName="RelationshipExists">
      <MemberSignature Language="C#" Value="public bool RelationshipExists (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RelationshipExists(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">
          <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> リレーションシップを確認するのです。</param>
        <summary>指定された ID を持つパッケージ レベルのリレーションシップが、パッケージに含まれるかどうかを示します。</summary>
        <returns>
          <see langword="true" /> 場合に、指定したパッケージ レベルのリレーションシップ <paramref name="id" /> パッケージでは、それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 詳細については、ダウンロード、Open Packaging Conventions \(OPC\) 仕様を参照してください。 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 有効な XML 識別子ではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは、書き込み専用です。</exception>
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.System#IDisposable#Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーをサポートしています、 Windows Presentation Foundation (WPF) インフラストラクチャ アプリケーションが使用できるものではありません。  タイプ セーフを使用して <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> メソッド代わりにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IO.Packaging.Package" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>