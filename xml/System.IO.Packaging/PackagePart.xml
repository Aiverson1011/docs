<Type Name="PackagePart" FullName="System.IO.Packaging.PackagePart">
  <TypeSignature Language="C#" Value="public abstract class PackagePart" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PackagePart extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackagePart" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Packaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>格納されている部分の基本クラスを提供する <see cref="T:System.IO.Packaging.Package" />です。  このクラスは抽象クラスです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.IO.Packaging.PackagePart> 3 つの基本的な要素で構成されます。  
  
|Access|説明|  
|------------|--------|  
|<xref:System.IO.Packaging.PackagePart.Uri%2A>|[!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 部品のです。|  
|<xref:System.IO.Packaging.PackagePart.ContentType%2A>|[!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] タイプのコンテンツのストリーム。|  
|<xref:System.IO.Packaging.PackagePart.GetStream%2A>|パーツのコンテンツ データ ストリーム。|  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IO.Packaging.PackagePart" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [WPF におけるパッケージの Uri](http://msdn.microsoft.com/ja-jp/43adb517-21a7-4df3-98e8-09e9cdf764c4)  
  
 [Open Packaging Conventions Specification](http://go.microsoft.com/fwlink/?LinkID=71255)  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IO.Packaging.Package package, class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="package">親 <see cref="T:System.IO.Packaging.Package" /> 部品のです。</param>
        <param name="partUri">URI 親を基準に、一部の <see cref="T:System.IO.Packaging.Package" /> ルートです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.IO.Packaging.PackagePart" /> クラスの指定した親 <see cref="P:System.IO.Packaging.PackagePart.Package" /> と部品 URIします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `partUri` 有効にする必要があります <xref:System.IO.Packaging.PackagePart> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] に準拠した形式、 [RFC 3986](http://tools.ietf.org/html/rfc3986) *Uniform Resource Identifier \(URI\) の一般的な構文* 仕様と [Open Packaging Conventions](http://go.microsoft.com/fwlink/?LinkID=71255) 仕様です。  
  
 このコンス トラクターを使用するときに、 <xref:System.IO.Packaging.PackagePart.ContentType%2A> 部分のすぐに認識できないため、後の設定とに <xref:System.IO.Packaging.Package.CreatePart%2A> が呼び出されます。  
  
 既定では、 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> にパーツのプロパティが初期化 <xref:System.IO.Packaging.CompressionOption.NotCompressed>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="package" /> または <paramref name="partUri" /> が <see langword="null" /> です。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri, string contentType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IO.Packaging.Package package, class System.Uri partUri, string contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="package">親 <see cref="T:System.IO.Packaging.Package" /> 部品のです。</param>
        <param name="partUri">URI 親を基準に、一部の <see cref="T:System.IO.Packaging.Package" /> ルートです。</param>
        <param name="contentType">MIME 部分データ ストリームのコンテンツの種類。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.IO.Packaging.PackagePart" /> の親が指定されたクラス <see cref="P:System.IO.Packaging.PackagePart.Package" />, 、部品 URI, 、および MIME コンテンツの種類。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `partUri` 有効にする必要があります <xref:System.IO.Packaging.PackagePart> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] に準拠した形式、 [RFC 3986](http://tools.ietf.org/html/rfc3986) *Uniform Resource Identifier \(URI\) の一般的な構文* 仕様と [Open Packaging Conventions](http://go.microsoft.com/fwlink/?LinkID=71255) 仕様です。  
  
 既定では、 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> にパーツのプロパティが初期化 <xref:System.IO.Packaging.CompressionOption.NotCompressed>します。  
  
 `contentType` 必要があります、 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 型の形式に準拠した、 [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html) *ハイパー テキスト転送プロトコル – HTTP*, 、3.7 を参照します。   次の表は、内容の例を示しています。 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] で使用される型 [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] ドキュメントです。  
  
|説明|コンテンツ タイプ|  
|--------|---------------|  
|フォント|アプリケーション\/vnd.ms\-opentype|  
|ICC プロファイル|application\/vnd.ms\-color.iccprofile|  
|JPEG イメージ|jpeg イメージ\/|  
|難読化されたフォント|application\/vnd.ms\-package.obfuscated\-opentype|  
|PNG イメージ|イメージまたは png|  
|PrintTicket|application\/vnd.ms\-printing.printticket\+xml|  
|TIFF イメージ|tiff イメージ\/|  
|Windows Media Photo イメージ|vnd.ms 画像\/|  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="package" /> または <paramref name="partUri" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 無効な <see cref="T:System.IO.Packaging.PackagePart" /> URIします。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PackagePart (System.IO.Packaging.Package package, Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IO.Packaging.Package package, class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="package">親 <see cref="T:System.IO.Packaging.Package" /> 部品のです。</param>
        <param name="partUri">URI 親を基準に、一部の <see cref="T:System.IO.Packaging.Package" /> ルートです。</param>
        <param name="contentType">MIME 部分のデータ ストリームのコンテンツの種類。</param>
        <param name="compressionOption">部分データ ストリームの圧縮オプション。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.IO.Packaging.PackagePart" /> の親が指定されたクラス <see cref="P:System.IO.Packaging.PackagePart.Package" />, 、一部 URI, 、MIME コンテンツの種類、および <see cref="T:System.IO.Packaging.CompressionOption" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `partUri` 有効にする必要があります <xref:System.IO.Packaging.PackagePart> [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] に準拠した形式、 [RFC 3986](http://tools.ietf.org/html/rfc3986) *Uniform Resource Identifier \(URI\) の一般的な構文* 仕様と [Open Packaging Conventions](http://go.microsoft.com/fwlink/?LinkID=71255) 仕様です。  
  
 `contentType` 必要があります、 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 型の形式に準拠した、 [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html) *ハイパー テキスト転送プロトコル – HTTP*, 、3.7 を参照します。   次の表は、内容の例を示しています。 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] で使用される型 [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] ドキュメントです。  
  
|説明|コンテンツ タイプ|  
|--------|---------------|  
|フォント|アプリケーション\/vnd.ms\-opentype|  
|ICC プロファイル|application\/vnd.ms\-color.iccprofile|  
|JPEG イメージ|jpeg イメージ\/|  
|難読化されたフォント|application\/vnd.ms\-package.obfuscated\-opentype|  
|PNG イメージ|イメージまたは png|  
|PrintTicket|application\/vnd.ms\-printing.printticket\+xml|  
|TIFF イメージ|tiff イメージ\/|  
|Windows Media Photo イメージ|vnd.ms 画像\/|  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="package" /> または <paramref name="partUri" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partUri" /> 無効な <see cref="T:System.IO.Packaging.PackagePart" /> URIします。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="compressionOption" /> 値が無効です。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="CompressionOption">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.CompressionOption CompressionOption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Packaging.CompressionOption CompressionOption" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.CompressionOption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.CompressionOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>一部のコンテンツ ストリームの圧縮オプションを取得します。</summary>
        <value>一部のコンテンツ ストリームの圧縮オプション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> 読み取り専用プロパティでアクセスできる場合にのみ親 <xref:System.IO.Packaging.Package> が開いています。  
  
 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> によって自動的に設定されたプロパティ、 <xref:System.IO.Packaging.PackagePart.%23ctor%2A> コンス トラクターです。  それは、コンス トラクターで設定した後、 <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> は変更できません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.ContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 MIME タイプのコンテンツのストリーム。</summary>
        <value>MIME パーツのコンテンツ データ ストリームの種類。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.PackagePart.ContentType%2A> 読み取り専用プロパティでアクセスできる場合にのみ親 <xref:System.IO.Packaging.Package> が開いています。  
  
 <xref:System.IO.Packaging.PackagePart.ContentType%2A> によって自動的に設定されたプロパティ、 <xref:System.IO.Packaging.PackagePart.%23ctor%2A> コンス トラクターです。  それは、コンス トラクターで設定した後、 <xref:System.IO.Packaging.PackagePart.ContentType%2A> は変更できません。  
  
 <xref:System.IO.Packaging.PackagePart.ContentType%2A> プロパティは、 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] 型の形式に準拠した、 [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.html) *ハイパー テキスト転送プロトコル – HTTP*, 、3.7 を参照します。   次の表は、内容の例を示しています。 [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] で使用される型 [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] ドキュメントです。  
  
|説明|コンテンツ タイプ|  
|--------|---------------|  
|フォント|アプリケーション\/vnd.ms\-opentype|  
|ICC プロファイル|application\/vnd.ms\-color.iccprofile|  
|JPEG イメージ|jpeg イメージ\/|  
|難読化されたフォント|application\/vnd.ms\-package.obfuscated\-opentype|  
|PNG イメージ|イメージまたは png|  
|PrintTicket|application\/vnd.ms\-printing.printticket\+xml|  
|TIFF イメージ|tiff イメージ\/|  
|Windows Media Photo イメージ|vnd.ms 画像\/|  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。  
  
 または  
  
 派生クラスによって返される文字列 <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> メソッドが空です。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.GetStream" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateRelationship">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このパーツ レベル関係を作成します <see cref="T:System.IO.Packaging.PackagePart" /> 指定したターゲットに <see cref="T:System.IO.Packaging.PackagePart" /> または外部リソースです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パーツ レベルのリレーションシップでは、このパーツとターゲット パーツ、またはリソース間の関連付けを定義します。  パーツ レベルのリレーションシップは、2 つの形式のいずれかを指定できます。  
  
-   ソースの間で <xref:System.IO.Packaging.PackagePart> ターゲットに <xref:System.IO.Packaging.PackagePart> 内、 <xref:System.IO.Packaging.Package>です。  
  
-   ソースの間で <xref:System.IO.Packaging.PackagePart> 、パッケージの外部のターゲット リソースにします。  
  
 パーツのリレーションシップで、ソース パーツはリレーションシップの「所有者」と見なされます。  ソースの一部が削除されると、パーツが所有するすべてのリレーションシップも削除されます。  作成するか、リレーションシップの削除のプロセスは、ターゲット パーツまたは任意の方法でリソースを物理的に変更されません。  
  
 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> メソッドではない物理的に変更、ソース パーツか、ターゲット パーツまたは任意の方法でリソースのいずれかです。  
  
 リレーションシップのターゲットは、別のリレーションシップをすることはできません。  
  
 パッケージのリレーションシップの詳細については、の 1.3\] セクションを参照してください、 *Open Packaging Conventions \(OPC\)* ダウンロード仕様 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
 詳細については、XPS ドキュメントを参照してください、 *Open XML Paper Specification \(XPS\)* ダウンロード [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=67000](http://go.microsoft.com/fwlink/?LinkID=67000)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">URI ターゲット パーツのです。</param>
        <param name="targetMode">列挙値の 1 つ。 たとえば、 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> ターゲット パーツが内側にある場合、 <see cref="T:System.IO.Packaging.Package" />; または <see cref="F:System.IO.Packaging.TargetMode.External" /> ターゲットが外部のリソースである場合、 <see cref="T:System.IO.Packaging.Package" />です。</param>
        <param name="relationshipType">リレーションシップのロール。</param>
        <summary>このパーツ レベル関係を作成します <see cref="T:System.IO.Packaging.PackagePart" /> 指定したターゲットに <see cref="T:System.IO.Packaging.PackagePart" /> または外部リソースです。</summary>
        <returns>この間パーツ レベルのリレーションシップ <see cref="T:System.IO.Packaging.PackagePart" /> ターゲットに <see cref="T:System.IO.Packaging.PackagePart" /> または外部リソースです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パーツ レベルのリレーションシップでは、この部分と、ターゲット パーツまたはリソース間のアソシエーションを定義します。  パーツ レベルのリレーションシップは、2 つの形式のいずれかを指定できます。  
  
-   ソースの間で <xref:System.IO.Packaging.PackagePart> ターゲットに <xref:System.IO.Packaging.PackagePart> 内、 <xref:System.IO.Packaging.Package>です。  
  
-   ソースの間で <xref:System.IO.Packaging.PackagePart> 、パッケージの外部のターゲット リソースにします。  
  
 パーツのリレーションシップで、ソース パーツはリレーションシップの「所有者」と見なされます。  ソースの一部が削除されると、パーツが所有するすべてのリレーションシップも削除されます。  作成するか、リレーションシップの削除のプロセスは、ターゲット パーツまたは任意の方法でリソースを物理的に変更されません。  
  
 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> メソッドではない物理的に変更、ソース パーツか、ターゲット パーツまたは任意の方法でリソースのいずれかです。  
  
 リレーションシップのターゲットは、別のリレーションシップをすることはできません。  
  
 場合 `targetMode` として指定された <xref:System.IO.Packaging.TargetMode.Internal>, 、`targetUri` に従って形成される相対 URI でなければなりません、 [RFC 3986](http://tools.ietf.org/html/rfc3986) *Uniform Resource Identifier \(URI\) の一般的な構文* 仕様です。   内部相対 URI でもかまいませんなどの文字をスラッシュ \(「\/」\) で開始するか、絶対パス"\/page1.xaml"または"\/images\/picture4.jpg"、またはなどの相対パス"..\/imagespicture1.jpg"パッケージのルートに対して \(「\/」\) として、ベース URI を解決します。  
  
 場合 `targetMode` として指定された <xref:System.IO.Packaging.TargetMode.External>, 、`targetUri` か絶対または相対 URI の形式に準拠した、 [RFC 3986](http://tools.ietf.org/html/rfc3986) *Uniform Resource Identifier \(URI\) の一般的な構文* 仕様です。   "http:\/\/www.microsoft.com\/page2.xml"は、外部の対象リソース"page2.xml"を参照する絶対 URI の例を示します。  "images\/picture1.jpg"は、外部の対象リソース"1.jpg"が解決される、パッケージ自体の URI に対しを参照する相対 URI の例を示します。  
  
 `relationshipType` 必要があります、 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 」の手順に従って作成される、 [RFC 3986](http://tools.ietf.org/html/rfc3986) *Uniform Resource Identifier \(URI\) の一般的な構文* 仕様です。   パッケージの種類には、さまざまなパーツ レベルのリレーションシップの種類を定義できます。  次の表に、パーツ レベル `relationshipType` に準拠するドキュメントの Uri が定義されている、 *Open XML Paper Specification \(XPS\)*します。  
  
|XPS ドキュメント パーツ レベルのリレーションシップ|URI の関係の種類|  
|----------------------------------|----------------|  
|デジタル署名の定義|[http:\/\/schemas.microsoft.com\/xps\/2005\/06\/signature\-definitions](http://schemas.microsoft.com/xps/2005/06/signature-definitions)|  
|DiscardControl|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/discard\-control|  
|ドキュメント構造|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/documentstructure|  
|PrintTicket|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/printticket|  
|必要なリソース|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/required\-resource|  
|制限のあるフォント|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/restricted\-font|  
|StartPart|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/fixedrepresentation|  
|StoryFragments|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/storyfragments|  
  
 パッケージのリレーションシップの詳細については、の 1.3\] セクションを参照してください、 *Open Packaging Conventions \(OPC\)* ダウンロード仕様 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
 詳細については、XPS ドキュメントを参照してください、 *Open XML Paper Specification \(XPS\)* ダウンロード [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=67000](http://go.microsoft.com/fwlink/?LinkID=67000)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetUri" /> または <paramref name="relationshipType" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="targetMode" /> パラメーターが有効ではありません <see cref="T:System.IO.Packaging.TargetMode" /> 列挙値。</exception>
        <exception cref="T:System.ArgumentException">識別されるパーツ、 <paramref name="targetUri" /> 関係 \(リレーションシップのターゲットは、別のリレーションシップをすることはできません\)。  
  
 または  
  
 <paramref name="targetMode" /> として指定された <see cref="F:System.IO.Packaging.TargetMode.Internal" /> が <paramref name="targetUri" /> 絶対外部 URIです。</exception>
        <exception cref="T:System.IO.IOException">パッケージは読み取り専用 \(新しいリレーションシップを追加することはできません\)。</exception>
        <altmember cref="Overload:System.IO.Packaging.Package.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">URI ターゲット パーツのです。</param>
        <param name="targetMode">列挙値の 1 つ。 たとえば、 <see cref="F:System.IO.Packaging.TargetMode.Internal" /> ターゲット パーツが内側にある場合、 <see cref="T:System.IO.Packaging.Package" />; または <see cref="F:System.IO.Packaging.TargetMode.External" /> ターゲットが外部のリソースである場合、 <see cref="T:System.IO.Packaging.Package" />です。</param>
        <param name="relationshipType">リレーションシップのロール。</param>
        <param name="id">リレーションシップの一意の ID。</param>
        <summary>このパーツ レベル関係を作成します <see cref="T:System.IO.Packaging.PackagePart" /> 指定したターゲットに <see cref="T:System.IO.Packaging.PackagePart" /> または外部リソースです。</summary>
        <returns>この間パーツ レベルのリレーションシップ <see cref="T:System.IO.Packaging.PackagePart" /> ターゲットに <see cref="T:System.IO.Packaging.PackagePart" /> または外部リソースです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パーツ レベルのリレーションシップでは、このパーツとターゲット パーツ、またはリソース間の関連付けを定義します。  パーツ レベルのリレーションシップは、2 つの形式のいずれかを指定できます。  
  
-   ソースの間で <xref:System.IO.Packaging.PackagePart> ターゲットに <xref:System.IO.Packaging.PackagePart> 内、 <xref:System.IO.Packaging.Package>です。  
  
-   ソースの間で <xref:System.IO.Packaging.PackagePart> 、パッケージの外部のターゲット リソースにします。  
  
 パーツのリレーションシップで、ソース パーツはリレーションシップの「所有者」と見なされます。  ソースの一部が削除されると、パーツが所有するすべてのリレーションシップも削除されます。  作成するか、リレーションシップの削除のプロセスは、ターゲット パーツまたは任意の方法でリソースを物理的に変更されません。  
  
 `id` 有効な XML 識別子である必要があります。`id` 型 xsd:ID で指定している名前付け規則に従う必要があります、 *XML Schema Part 2: Datatypes* 仕様 \(を参照してください [http:\/\/www.w3.org\/TR\/xmlschema\-2\/\#ID](http://www.w3.org/TR/xmlschema-2/)\)。  
  
 <xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> メソッドではない物理的に変更、ソース パーツか、ターゲット パーツまたは任意の方法でリソースのいずれかです。  
  
 リレーションシップのターゲットは、別のリレーションシップをすることはできません。  
  
 場合 `targetMode` として指定された <xref:System.IO.Packaging.TargetMode.Internal>, 、`targetUri` に従って形成される相対 URI でなければなりません、 [RFC 3986](http://tools.ietf.org/html/rfc3986) *Uniform Resource Identifier \(URI\) の一般的な構文* 仕様です。   内部相対 URI でもかまいませんなどの文字をスラッシュ \(「\/」\) で開始するか、絶対パス"\/page1.xaml"または"\/images\/picture4.jpg"、またはなどの相対パス"..\/imagespicture1.jpg"パッケージのルートに対して \(「\/」\) として、ベース URI を解決します。  
  
 場合 `targetMode` として指定された <xref:System.IO.Packaging.TargetMode.External>, 、`targetUri` か絶対または相対 URI の形式に準拠した、 [RFC 3986](http://tools.ietf.org/html/rfc3986) *Uniform Resource Identifier \(URI\) の一般的な構文* 仕様です。   "http:\/\/www.microsoft.com\/page2.xml"は、外部の対象リソース"page2.xml"を参照する絶対 URI の例を示します。  "images\/picture1.jpg"は、外部の対象リソース"1.jpg"が解決される、パッケージ自体の URI に対しを参照する相対 URI の例を示します。  
  
 `relationshipType` 必要があります、 [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] 」の手順に従って作成される、 [RFC 3986](http://tools.ietf.org/html/rfc3986) *Uniform Resource Identifier \(URI\) の一般的な構文* 仕様です。   パッケージの種類には、さまざまなパーツ レベルのリレーションシップの種類を定義できます。  次の表に、パーツ レベル `relationshipType` に準拠するドキュメントの Uri が定義されている、 *Open XML Paper Specification \(XPS\)*します。  
  
|XPS ドキュメント パーツ レベルのリレーションシップ|URI の関係の種類|  
|----------------------------------|----------------|  
|デジタル署名の定義|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/signature\-definitions|  
|DiscardControl|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/discard\-control|  
|ドキュメント構造|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/documentstructure|  
|PrintTicket|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/printticket|  
|必要なリソース|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/required\-resource|  
|制限のあるフォント|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/restricted\-font|  
|StartPart|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/fixedrepresentation|  
|StoryFragments|http:\/\/schemas.microsoft.com\/xps\/2005\/06\/storyfragments|  
  
 パッケージのリレーションシップの詳細については、の 1.3\] セクションを参照してください、 *Open Packaging Conventions \(OPC\)* ダウンロード仕様 [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=71255](http://go.microsoft.com/fwlink/?LinkID=71255)します。  
  
 詳細については、XPS ドキュメントを参照してください、 *Open XML Paper Specification \(XPS\)* ダウンロード [http:\/\/go.microsoft.com\/fwlink\/?LinkID\=67000](http://go.microsoft.com/fwlink/?LinkID=67000)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetUri" /> または <paramref name="relationshipType" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="targetMode" /> パラメーターが有効ではありません <see cref="T:System.IO.Packaging.TargetMode" /> 列挙値。</exception>
        <exception cref="T:System.ArgumentException">識別されるパーツ、 <paramref name="targetUri" /> 関係 \(リレーションシップのターゲットは、別のリレーションシップをすることはできません\)。  
  
 または  
  
 <paramref name="targetMode" /> として指定された <see cref="F:System.IO.Packaging.TargetMode.Internal" /> が <paramref name="targetUri" /> 絶対外部 URIです。</exception>
        <exception cref="T:System.IO.IOException">パッケージは読み取り専用 \(新しいリレーションシップを追加することはできません\)。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 有効な XML 識別子ではありません。  
  
 または  
  
 指定したパーツ <paramref name="id" /> は既に存在します。</exception>
        <altmember cref="Overload:System.IO.Packaging.Package.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteRelationship">
      <MemberSignature Language="C#" Value="public void DeleteRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">
          <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> のリレーションシップを削除します。</param>
        <summary>指定したパーツ レベルの削除 <see cref="T:System.IO.Packaging.PackageRelationship" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `id` 有効な XML 識別子である必要があります。`id` 型 xsd:ID で指定している名前付け規則に従う必要があります、 *XML Schema Part 2: Datatypes* 仕様 \(を参照してください [http:\/\/www.w3.org\/TR\/xmlschema\-2\/\#ID](http://www.w3.org/TR/xmlschema-2/)\)。  
  
 場合は、指定した `id` と一致しません、 <xref:System.IO.Packaging.PackageRelationship.Id%2A> このパーツによって所有されているリレーションシップのいずれにも、リレーションシップは削除されず、例外はスローされません。  
  
 指定されたリレーションシップを削除する以外、 <xref:System.IO.Packaging.PackagePart.DeleteRelationship%2A> メソッドに物理的に変わらないのでこの部分またはターゲット パーツのいずれかです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">パッケージは読み取り専用 \(リレーションシップを削除することはできません\)。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 有効な XML 識別子ではありません。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetContentTypeCore">
      <MemberSignature Language="C#" Value="protected virtual string GetContentTypeCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetContentTypeCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetContentTypeCore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、 MIME パーツのコンテンツの種類。</summary>
        <returns>MIME パーツのコンテンツの種類。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.PackagePart.GetContentTypeCore%2A> 仮想メソッド、 <xref:System.IO.Packaging.PackagePart> 抽象基本クラスです。 構築時にコンテンツの種類の値を指定することはできません、派生型でのみこのメソッドを実装するか入力内容を計算する場合は値負荷やコストのかかる操作です。 戻り値を有効にする必要があります [!INCLUDE[TLA2#tla_mime](~/includes/tla2sharptla-mime-md.md)] コンテンツの種類。  
  
 派生クラスが呼び出すことができます <xref:System.IO.Packaging.PackagePart.GetContentTypeCore%2A> 初期化するために、 <xref:System.IO.Packaging.PackagePart.ContentType%2A> 既定値の派生クラスのプロパティです。  後に、 <xref:System.IO.Packaging.PackagePart.ContentType%2A> プロパティが設定されて、変更することはできません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">派生クラスでは、必要なオーバーライドの実装は提供しません、 <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> メソッドです。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship GetRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship GetRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">
          <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> のリレーションシップを返します。</param>
        <summary>指定した間の関係を返します <see cref="P:System.IO.Packaging.PackageRelationship.Id" />します。</summary>
        <returns>指定された一致するリレーションシップ <paramref name="id" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `id` 有効な XML 識別子である必要があります。`id` 型 xsd:ID で指定している名前付け規則に従う必要があります、 *XML Schema Part 2: Datatypes* 仕様 \(を参照してください [http:\/\/www.w3.org\/TR\/xmlschema\-2\/\#ID](http://www.w3.org/TR/xmlschema-2/)\)。  
  
 使用することができます、 <xref:System.IO.Packaging.PackagePart.RelationshipExists%2A> 場合に、指定したリレーションシップを決定する方法 <xref:System.IO.Packaging.PackageRelationship.Id%2A> この部分が所有します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 有効な XML 識別子ではありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="relationshipType" /> が空の文字列です。</exception>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。  
  
 または  
  
 指定されたリレーションシップ <paramref name="id" /> パッケージに存在しません。</exception>
        <exception cref="T:System.IO.IOException">パッケージは書き込み専用 \(リレーションシップ情報を読み取ることができません\)。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationships">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationships() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetRelationships" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この部分が所有するすべてのリレーションシップのコレクションを返します。</summary>
        <returns>パーツによって所有されているすべてのリレーションシップのコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返されるコレクションは決して `null`。 ただし、部品がすべてのリレーションシップを定義していない場合は、コレクションに要素がゼロが含まれる場合があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは書き込み専用 \(リレーションシップ情報を読み取ることができません\)。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipsByType">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType(string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType">
          <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> のリレーションシップを見つけて、コレクション内で取得します。</param>
        <summary>指定された一致するリレーションシップのコレクションを返します <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />します。</summary>
        <returns>指定されたリレーションシップのコレクション <paramref name="relationshipType" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返されるコレクションは決して `null`。 ただし、リレーションシップと、指定した一致しない場合は、コレクションに要素がゼロが含まれる場合があります `relationshipType` 部分を定義します。  
  
 先頭または末尾にスペース、 `relationshipType` 文字列が自動的に切り捨てられます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="relationshipType" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="relationshipType" /> が空の文字列です。</exception>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは書き込み専用 \(リレーションシップ情報を読み取ることができません\)。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一部のコンテンツ データ ストリームを返します。</summary>
        <returns>パーツのコンテンツ データ ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、使用してコンテンツのストリームを開きます <xref:System.IO.FileMode> の <xref:System.IO.FileMode.OpenOrCreate> と <xref:System.IO.FileAccess> は、親と同じアクセス許可 <xref:System.IO.Packaging.Package>します。  
  
 オーバー ロードは、 <xref:System.IO.Packaging.PackagePart.GetStream%2A> メソッドを使用すると、特定の設定 <xref:System.IO.FileMode>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">によって返されるストリーム オブジェクト、 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 派生サブクラスのメソッドは <see langword="null" />です。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.IO.Packaging.PackagePart.GetStream" /> internally calls the derived <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> method to actually open and return the part data stream based on the physical format implemented in the derived class.  
  
 By default, the <see cref="T:System.IO.Packaging.ZipPackagePart" /> subclass implementation of the abstract <see cref="T:System.IO.Packaging.PackagePart" /> class is provided and used.  In the default operation, <see cref="M:System.IO.Packaging.PackagePart.GetStream" /> internally calls <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> of the <see cref="T:System.IO.Packaging.ZipPackagePart" /> class to open and return the part data stream from a ZIP file.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream (System.IO.FileMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetStream(valuetype System.IO.FileMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="mode">コンテンツのストリームを開くときに I\/O モード。</param>
        <summary>返します。 指定した I\/O のコンテンツのストリームが開かれている <see cref="T:System.IO.FileMode" />します。</summary>
        <returns>パーツのコンテンツのストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.FileAccess> 、返されたコンテンツ ストリームのアクセス許可は、親のアクセス許可と同じ <xref:System.IO.Packaging.Package>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> パラメーターが有効ではありません <see cref="T:System.IO.FileMode" /> 列挙値。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="mode" /> パラメーターは、パッケージとパーツのストリームと互換性がありません。  
  
 または  
  
 によって返されるストリーム オブジェクト、 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 派生サブクラスのメソッドは <see langword="null" />です。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)" /> internally calls the derived <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> method to actually open and return the part data stream based on the physical format implemented in the derived class.  
  
 By default, the <see cref="T:System.IO.Packaging.ZipPackagePart" /> subclass implementation of the abstract <see cref="T:System.IO.Packaging.PackagePart" /> class is provided and used.  In the default operation, <see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)" /> internally calls <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> of the <see cref="T:System.IO.Packaging.ZipPackagePart" /> class to open and return the part data stream from a ZIP file.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetStream (System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetStream(valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="mode">コンテンツのストリームを開くときに I\/O モード。</param>
        <param name="access">コンテンツのストリームを開くときに使用するアクセス許可です。</param>
        <summary>指定したで開かれているパーツ コンテンツ ストリームを返す <see cref="T:System.IO.FileMode" /> と <see cref="T:System.IO.FileAccess" />です。</summary>
        <returns>パーツのコンテンツのストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" /> パラメーターが有効ではありません <see cref="T:System.IO.FileMode" /> 列挙値。  
  
 または  
  
 <paramref name="access" /> パラメーターが有効ではありません <see cref="T:System.IO.FileAccess" /> 列挙値。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="mode" /> または <paramref name="access" /> パッケージとパーツのストリームと互換性がありません。  
  
 または  
  
 <paramref name="access" /> としてパラメーターが指定されている <see cref="F:System.IO.FileAccess.Read" /> が、 <paramref name="mode" /> パラメーターには、書き込みアクセス権が必要です。  \(<see cref="T:System.IO.FileMode" /> の値 <see cref="F:System.IO.FileMode.Create" />, 、<see cref="F:System.IO.FileMode.CreateNew" />, 、<see cref="F:System.IO.FileMode.Truncate" />, 、および <see cref="F:System.IO.FileMode.Append" /> 必要 <see cref="F:System.IO.FileAccess.Write" /> または <see cref="F:System.IO.FileAccess.ReadWrite" /> アクセスします\)。  
  
 または  
  
 によって返されるストリーム オブジェクト、 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> 派生サブクラスのメソッドは <see langword="null" />です。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)" /> internally calls the derived <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> method to actually open and return the part data stream based on the physical format implemented in the derived class.  
  
 By default, the <see cref="T:System.IO.Packaging.ZipPackagePart" /> subclass implementation of the abstract <see cref="T:System.IO.Packaging.PackagePart" /> class is provided and used.  In the default operation, <see cref="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)" /> internally calls <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> of the <see cref="T:System.IO.Packaging.ZipPackagePart" /> class to open and return the part data stream from a ZIP file.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetStreamCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Stream GetStreamCore (System.IO.FileMode mode, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Stream GetStreamCore(valuetype System.IO.FileMode mode, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.IO.FileMode" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="mode">コンテンツのストリームを開くときに I\/O モード。</param>
        <param name="access">コンテンツのストリームを開くときに使用するアクセス許可です。</param>
        <summary>派生クラスでオーバーライドされると、指定したで開かれているパーツ コンテンツ ストリームを返します <see cref="T:System.IO.FileMode" /> と <see cref="T:System.IO.FileAccess" />です。</summary>
        <returns>パーツのコンテンツ データ ストリーム。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションが呼び出さないで <xref:System.IO.Packaging.PackagePart.GetStreamCore%2A> 直接、代わりに呼び出す必要がありますが、 <xref:System.IO.Packaging.PackagePart.GetStream%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The derived <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> implementation should make no assumptions about the order or operations performed by the <see cref="Overload:System.IO.Packaging.PackagePart.GetStream" /> method that calls it.</para>
        </block>
        <block subset="none" type="usage">
          <para>The derived <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> method is called by the <see cref="Overload:System.IO.Packaging.PackagePart.GetStream" /> methods to open and return the part data stream based on the physical format implemented in the derived class.  
  
 By default, the <see cref="T:System.IO.Packaging.ZipPackagePart" /> subclass implementation of the abstract <see cref="T:System.IO.Packaging.PackagePart" /> class is provided and used.  In the default operation, <see cref="Overload:System.IO.Packaging.PackagePart.GetStream" /> internally calls <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> of the <see cref="T:System.IO.Packaging.ZipPackagePart" /> class to open and return the part data stream from a ZIP file.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Package">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.Package Package { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.Package Package" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.Package" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>親を取得します <see cref="T:System.IO.Packaging.Package" /> 部品のです。</summary>
        <value>パーツの親パッケージです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.PackagePart.Package%2A> 読み取り専用プロパティでアクセスできる場合にのみ親 <xref:System.IO.Packaging.Package> が開いています。  
  
 <xref:System.IO.Packaging.PackagePart.Package%2A> によって自動的に設定されたプロパティ、 <xref:System.IO.Packaging.PackagePart.%23ctor%2A> コンス トラクターです。  親コンス トラクターによって設定された後 <xref:System.IO.Packaging.PackagePart.Package%2A> 部分を変更できません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
      </Docs>
    </Member>
    <Member MemberName="RelationshipExists">
      <MemberSignature Language="C#" Value="public bool RelationshipExists (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RelationshipExists(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">
          <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> リレーションシップを確認するのです。</param>
        <summary>この部分を指定したリレーションシップを所有しているかどうかを示す値を返す <see cref="P:System.IO.Packaging.PackageRelationship.Id" />します。</summary>
        <returns>
          <see langword="true" /> この部分は、指定したリレーションシップを所有している場合 <paramref name="id" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `id` 有効な XML 識別子である必要があります。`id` 型 xsd:ID で指定している名前付け規則に従う必要があります、 *XML Schema Part 2: Datatypes* 仕様 \(を参照してください [http:\/\/www.w3.org\/TR\/xmlschema\-2\/\#ID](http://www.w3.org/TR/xmlschema-2/)\)。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="id" /> 有効な XML 識別子ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは書き込み専用 \(リレーションシップ情報を読み取ることができません\)。</exception>
        <altmember cref="Overload:System.IO.Packaging.PackagePart.CreateRelationship" />
        <altmember cref="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public Uri Uri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Uri" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.PackagePart.Uri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 URI 部品のです。</summary>
        <value>URI パッケージのルートに対する相対部分のです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Packaging.PackagePart.Uri%2A> 読み取り専用プロパティでアクセスできる場合にのみ親 <xref:System.IO.Packaging.Package> が開いています。  
  
 <xref:System.IO.Packaging.PackagePart.Uri%2A> によって自動的に設定されたプロパティ、 <xref:System.IO.Packaging.PackagePart.%23ctor%2A> コンス トラクターです。  それは、コンス トラクターで設定した後、 <xref:System.IO.Packaging.PackagePart.Uri%2A> の部分は変更できません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">部分は削除されました。  
  
 または  
  
 <see cref="P:System.IO.Packaging.PackagePart.Package" /> が開かれていない \(<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出された\)。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStream">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>一部のコンテンツ データ ストリームを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <see cref="Overload:System.IO.Packaging.PackagePart.GetStream" /> 内部的に呼び出すため、派生した <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> を実際に開いて部分データ ストリームを返すメソッドが派生クラスで実装されて物理形式に基づいています。  
  
 既定では、 <see cref="T:System.IO.Packaging.ZipPackagePart" /> 抽象の実装をサブクラス化 <see cref="T:System.IO.Packaging.PackagePart" /> クラスが提供され、使用できます。  既定の操作で <see cref="Overload:System.IO.Packaging.PackagePart.GetStream" /> 内部的に呼び出す <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> の <see cref="T:System.IO.Packaging.ZipPackagePart" /> クラスを開き、ZIP ファイルから、部分データ ストリームを返します。</para>
        </block>
      </Docs>
    </MemberGroup>
  </Members>
</Type>