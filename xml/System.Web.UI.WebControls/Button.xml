<Type Name="Button" FullName="System.Web.UI.WebControls.Button">
  <TypeSignature Language="C#" Value="public class Button : System.Web.UI.WebControls.WebControl, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Button extends System.Web.UI.WebControls.WebControl implements class System.Web.UI.IPostBackEventHandler, class System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Button" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IButtonControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:Button runat="server" Text="Button"&gt;&lt;/{0}:Button&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Web ページにプッシュ ボタン コントロールを表示します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このトピックの内容  
  
-   [はじめに](#Introduction)  
  
-   [ポストバック&#93; ボタンの動作とサーバー イベント](#ButtonPostbackBehaviorandServerEvents)  
  
-   [クライアント スクリプトでボタンのイベントを処理](#HandlingButtonEventsinClientScript)  
  
-   [ボタン コントロールと検証](#ButtonControlsAndValidation)  
  
-   [データ コントロール内のボタン](#ButtonsInDataControls)  
  
-   [コントロールへのデータ バインディング](#BindingDataToTheControls)  
  
-   [UpdatePanel コントロールでのボタンを使用します。](#UsingButtonsWithUpdatePanelControls)  
  
-   [宣言構文](#DeclarativeSyntax)  
  
<a name="Introduction"></a>   
## はじめに  
 使用して、 <xref:System.Web.UI.WebControls.Button> コントロールをユーザーがサーバーにページを投稿できる Web ページにプッシュ ボタンを作成します。 コントロールには、ポストバックに応答するために利用できるサーバー コードでイベントがトリガーされます。 ページが通知されるかを実行して、ページの送信を取り消すことができます前に処理できるクライアント スクリプトでイベントを発生する可能性もします。  
  
> [!NOTE]
>  ASP.NET には、いくつかの種類ボタン コントロール、Web ページに異なる方法でそれぞれの表示にはが含まれています。<xref:System.Web.UI.WebControls.Button> コントロールで、プッシュ ボタンとして表示されます、 <xref:System.Web.UI.WebControls.LinkButton> をリンクとして表示できるコントロールと <xref:System.Web.UI.WebControls.ImageButton> を画像として表示できるコントロールと <xref:System.Web.UI.WebControls.ImageMap> コントロールで、ユーザーがクリックしてできるホット スポットのあるグラフィックを作成することができます。 既定は、すべてのボタン コントロールは、クリックされたときにページを送信します。 使用することも、 <xref:System.Web.UI.HtmlControls.HtmlButton> と <xref:System.Web.UI.HtmlControls.HtmlInputButton> サーバー コードでプログラミングされるページのボタンを作成するコントロール。 HTML や Web サーバー コントロールの違いの詳細については、「 [Introduction to ASP.NET Web Server Controls](http://msdn.microsoft.com/ja-jp/0d4854a3-6e79-4b7b-a27f-ac57cd9c2a84)します。  
  
 既定では、 <xref:System.Web.UI.WebControls.Button> コントロールは、送信ボタンが表示されます。 \[送信\] ボタンには、コマンド名はありません \(によって指定された、 <xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティ\)\] ボタンをクリックし、Web ページをサーバーに投稿するだけに関連付けられています。 イベント ハンドラーを渡した場合、 <xref:System.Web.UI.WebControls.Button.Click> 送信\] ボタンがクリックされたときに、プログラムで操作を制御するイベントが実行されました。  
  
 コマンド ボタンでは、コマンド名などのボタンに関連付けられている `Sort`, を設定して、 <xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティです。 これにより、複数作成 <xref:System.Web.UI.WebControls.Button> の Web ページし、コントロール プログラムで判断するため <xref:System.Web.UI.WebControls.Button> コントロールがクリックされました。 使用することも、 <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> などを実行するコマンドに関する追加情報をコマンド ボタンの付いたプロパティ `Ascending`します。 イベント ハンドラーを渡した場合、 <xref:System.Web.UI.WebControls.Button.Command> コマンド ボタンがクリックされたときに、プログラムで操作を制御するイベントが実行されました。  
  
<a name="ButtonPostbackBehaviorandServerEvents"></a>   
## ポストバック\] ボタンの動作とサーバー イベント  
 ユーザーには、任意の Web サーバー コントロールのボタンがクリックすると、ページがサーバーに送信されます。 これにより、Web ページを処理して、保留中のイベントがサーバー側コードで発生します。 すべてのページとコントロールの処理が完了したら、ページが表示される自体をブラウザーにもう一度です。  
  
 ボタンが発生する可能性が独自 <xref:System.Web.UI.WebControls.Button.Click> イベントまたは <xref:System.Web.UI.WebControls.Button.Command> イベントで、サーバー ベースのコードを使用して処理することができます。 これは、ボタンの従来の HTML ページやクライアント ベースの Web アプリケーションでは、イベントとは異なる `onclick` クライアントで実行されている JavaScript を使用してイベントを処理します。 詳細については、「[ASP.NET Web Server Control Event Model](http://msdn.microsoft.com/ja-jp/6304bff7-1b0e-4641-8acb-6d3b0badc4a3)」を参照してください。  
  
 ボタン コントロールをクリックすると、ページはサーバーにポストバックされます。 既定では、ページにポストバックされる自体には、  
  
 別のページに現在のページにポストするボタンを構成することができます。 これは、複数ページのフォームの作成に役立つことができます。 詳細については、「[Cross\-Page Posting in an ASP.NET Web Page](http://msdn.microsoft.com/ja-jp/fedf234e-b7c4-4644-a9e8-c1c0870b043b)」を参照してください。  
  
<a name="HandlingButtonEventsinClientScript"></a>   
## クライアント スクリプトでボタンのイベントを処理  
 ボタン コントロールには、サーバー イベントとクライアントのイベントの両方を生成できます。 サーバー イベントは、ポストバック後に発生し、これらは、ページ用に記述するサーバー側コードで処理します。 クライアント イベントは、ECMAScript \(JavaScript\) では通常、クライアント スクリプトで処理され、ページを送信する前に発生します。 クライアント側のイベントを ASP.NET ボタン コントロールに追加すると、ページを送信する前に確認のダイアログ ボックスを表示するなどのタスクを実行し、送信をキャンセルできます。 詳細については、「[Client Script in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/13edb6b9-2dea-43c6-b8c1-a47207de19aa)」および「[How to: Respond to Button Web Server Control Events in Client Script](http://msdn.microsoft.com/ja-jp/1ab97f0b-1c38-4897-85b0-ac915f6a182b)」を参照してください。  
  
 することも、 <xref:System.Web.UI.WebControls.Button> も \(HTTP POST 操作を実行する\) ではなくポストバックを実行するクライアント スクリプトを使用するコントロール。 これは、ページ上の他の要素へのアタッチなど、ポストバックをプログラムで操作する場合に便利ことができます。 設定することができます、 <xref:System.Web.UI.WebControls.Button> コントロールの <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> プロパティを `true` が発生する、 <xref:System.Web.UI.WebControls.Button> ベースのクライアント スクリプトを使用するコントロールをポストバックします。  
  
<a name="ButtonControlsAndValidation"></a>   
## ボタン コントロールと検証  
 ページには、既定では ASP.NET 検証コントロールが含まれている場合に、そのチェックを実行する検証コントロール ボタン コントロールをクリックするとします。 検証コントロールでクライアント側の検証が有効な場合は、検証チェックが失敗した場合に、ページは送信されません。  
  
 次の表では、検証プロセスをより正確に制御するためのボタン コントロールでサポートされているプロパティについて説明します。  
  
|プロパティ|説明|  
|-----------|--------|  
|<xref:System.Web.UI.WebControls.Button.CausesValidation%2A>|ボタンをクリックすると検証チェックも実行するかどうかを指定します。 このプロパティを設定 `false` 検証チェックをしないようにします。|  
|<xref:System.Web.UI.WebControls.Button.ValidationGroup%2A>|ボタンがクリックされたときに、ページ上のどの検証コントロールと呼ばれます。 を指定できます。 検証グループが作成されていない場合、ボタンのクリックは、ページ上にある検証コントロールのすべてを呼び出します。|  
  
 詳細については、「[Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)」を参照してください。  
  
<a name="ButtonsInDataControls"></a>   
## データ コントロール内のボタン  
 Button Web サーバー コントロールは多くの場合、データ コントロール内のなど使用、 <xref:System.Web.UI.WebControls.DataList>, 、<xref:System.Web.UI.WebControls.GridView>, 、および <xref:System.Web.UI.WebControls.Repeater> コントロールが表示されます。 そのような場合は、一般に応答しない、ボタンに直接イベント\] をクリックします。 代わりに、データ コントロールのボタンは、データ コントロールに固有であるイベントを発生させます。 たとえば、 <xref:System.Web.UI.WebControls.DataList> ボタンから発生させることが、コントロール、 <xref:System.Web.UI.WebControls.DataList> コントロールの <xref:System.Web.UI.WebControls.DataList.ItemCommand> イベントを生成する代わりに、 <xref:System.Web.UI.WebControls.Button> コントロールの <xref:System.Web.UI.WebControls.Button.Click> イベントです。  
  
 ボタンを設定するため、データ連結リスト コントロールには、多くのボタンを含めることができます、 <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティに、イベントの一部として渡す値を指定します。 クリックしてされたボタンを表示するには、この引数をテストすることができます。  
  
<a name="BindingDataToTheControls"></a>   
## コントロールへのデータ バインディング  
 ボタンの Web サーバー コントロールをデータ ソースにバインドするには、プロパティの設定を制御するために動的にします。 たとえば、ボタンを設定することができます <xref:System.Web.UI.WebControls.Button.Text%2A> データ バインディングを使用してプロパティです。  
  
<a name="UsingButtonsWithUpdatePanelControls"></a>   
## UpdatePanel コントロールでのボタンを使用します。  
 部分ページ レンダリングを使うと、ポストバックなしでページの一部を更新できます。<xref:System.Web.UI.UpdatePanel> コントロールを使用すると、部分ページ レンダリングに参加しているページの部分をマークできます。 既定では、内部のコントロールの動作、 <xref:System.Web.UI.UpdatePanel> コントロールを含む <xref:System.Web.UI.WebControls.Button> コントロール、ポストバックではなく、非同期ポストバックを実行することです。 これによって、更新の内容のみ、 <xref:System.Web.UI.UpdatePanel> からポストバックが発生元を制御します。  
  
 シナリオだけでなく、 <xref:System.Web.UI.WebControls.Button> 内のコントロール、 <xref:System.Web.UI.UpdatePanel> コントロール、 <xref:System.Web.UI.WebControls.Button> と制御 <xref:System.Web.UI.UpdatePanel> コントロールは、次のシナリオで。  
  
-   定義する、 <xref:System.Web.UI.WebControls.Button> 外にあるコントロール、 <xref:System.Web.UI.UpdatePanel> と制御、 <xref:System.Web.UI.AsyncPostBackTrigger> 、パネルのコントロールです。 ボタンがクリックされたときに非同期ポストバックを実行し、パネルの内容を更新します。  
  
-   定義する、 <xref:System.Web.UI.WebControls.Button> 内のコントロール、 <xref:System.Web.UI.UpdatePanel> と制御、 <xref:System.Web.UI.PostBackTrigger> パネルのです。 内でもがポストバックを実行して、ボタンがクリックされたときに、 <xref:System.Web.UI.UpdatePanel> コントロールです。  
  
 部分ページ レンダリングと使用の詳細については <xref:System.Web.UI.UpdatePanel> 、コントロールを参照してください [UpdatePanel Control Overview](http://msdn.microsoft.com/ja-jp/29a2265d-9674-4c19-b70e-e5560ee9689a) と [Partial\-Page Rendering Overview](http://msdn.microsoft.com/ja-jp/5c12736d-d9e9-464a-9388-3fe0f9f49e49)です。  
  
<a name="DeclarativeSyntax"></a>   
## 宣言構文  
  
```  
<asp:Button  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CausesValidation="True|False"  
    CommandArgument="string"  
    CommandName="string"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnClick="Click event handler"  
    OnClientClick="string"  
    OnCommand="Command event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    PostBackUrl="uri"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    Text="string"  
    ToolTip="string"  
    UseSubmitBehavior="True|False"  
    ValidationGroup="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## 例  
 次のコード例は、提出を作成する方法を示します <xref:System.Web.UI.WebControls.Button> Web ページのサーバーにコンテンツを投稿するコントロール。  
  
 [!code-csharp[Classic Button Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Button Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic Button Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Button Example/VB/sourcevb.aspx#1)]  
  
 次のコード例は、コマンドを作成する方法を示します <xref:System.Web.UI.WebControls.Button> 一覧を並べ替える。  
  
 [!code-csharp[ButtonCommandNameArgument\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-vb[ButtonCommandNameArgument\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.UI.WebControls.Button.CommandName" />
    <altmember cref="P:System.Web.UI.WebControls.Button.CommandArgument" />
    <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
    <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Button ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.Button" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを使用して作成しの新しいインスタンスを初期化、<xref:System.Web.UI.WebControls.Button>クラスです。  
  
   
  
## 例  
 次のコード例を作成しの新しいインスタンスを初期化する方法を示しています、<xref:System.Web.UI.WebControls.Button>クラスです。  
  
 [!code-csharp[ButtonCtor\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCtor/CS/buttonctorcs.aspx#1)]
 [!code-vb[ButtonCtor\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCtor/VB/buttonctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> クライアントで表示する出力ストリームを格納しています。</param>
        <summary>属性を追加、 <see cref="T:System.Web.UI.WebControls.Button" /> クライアントに表示する出力ストリームを制御します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 オーバーライドする方法を次のコード例に示します、 <xref:System.Web.UI.WebControls.Button.AddAttributesToRender%2A> カスタム サーバー コントロールできるように、 <xref:System.Web.UI.WebControls.Button> 常に、テキストは赤で表示されます。  
  
 [!code-csharp[CustomButtonAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/CS/custombuttonaddattributestorendercs.aspx#1)]
 [!code-vb[CustomButtonAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/VB/custombuttonaddattributestorendervb.aspx#1)]  
[!code-csharp[CustomButtonAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/CS/custombuttonaddattributestorender.cs#2)]
[!code-vb[CustomButtonAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonAddAttributesToRender/VB/custombuttonaddattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public virtual bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CausesValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または検証を実行するかどうかを示す値を設定するときに、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールがクリックされました。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.Button" /> コントロールがクリックされたときに検証を実行する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、ページの検証が実行されるときに、 <xref:System.Web.UI.WebControls.Button> コントロールがクリックされました。 ページの検証では、入力コントロールが検証コントロールで指定された検証規則に準拠のすべてのページ上の検証コントロールに関連付けられているかどうかを決定します。  
  
 指定したり、クライアントとサーバーの両方で検証を実行するかどうかを決定するときに、 <xref:System.Web.UI.WebControls.Button> を使用してコントロールがクリックされた、 <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> プロパティです。 検証が実行されているを防ぐためには、設定、 <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> プロパティを `false`します。  
  
> [!NOTE]
>  設定する必要があります、 <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> プロパティを `false` を使用する場合、 <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティを別のページにポストバックします。 別のページにポストバックする場合は、明示的に検証をチェックする必要があります。 例については、「解説」セクションを参照してください、 <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティです。  
  
 通常、このプロパティに設定 `false` の `reset` または `clear` 、ボタンがクリックされたときに実行される検証が実行できなくボタンをクリックします。  
  
 ときの値、 <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> にプロパティが設定されている `true`, 、使用することも、 <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> の検証グループの名前を指定するプロパティ、 <xref:System.Web.UI.WebControls.Button> コントロールが原因で検証します。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> ページ検証の発生を防ぐためにプロパティです。 なお、 <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> メソッドをアクティブにない各検証コントロール個別にします。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[ButtonControlCausesValidation\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonControlCausesValidation/CS/buttoncausesvalidationcs.aspx#1)]
 [!code-vb[ButtonControlCausesValidation\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonControlCausesValidation/VB/buttoncausesvalidationvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="P:System.Web.UI.WebControls.Button.ValidationGroup" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Button.Click" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、<see cref="T:System.Web.UI.WebControls.Button" />コントロールをクリックします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Button.Click>イベントが発生したときに、<xref:System.Web.UI.WebControls.Button>コントロールをクリックします。 このイベントは通常に関連付けられているコマンド名がない場合に使用、 <xref:System.Web.UI.WebControls.Button> \(たとえば、送信ボタン\) を制御します。  
  
 イベント処理の詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
   
  
## 例  
 指定し、コードのイベント ハンドラーを次のコード例には、<xref:System.Web.UI.WebControls.Button.Click>イベント、Web でメッセージを表示するためにページ、<xref:System.Web.UI.WebControls.Button>コントロールをクリックします。  
  
 [!code-csharp[ButtonClickText\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-vb[ButtonClickText\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.CommandEventHandler Command;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.CommandEventHandler Command" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.Button.Command" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.CommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールをクリックします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Button.Command> イベントが発生したときに、 <xref:System.Web.UI.WebControls.Button> コントロールがクリックされました。 このイベントは通常使用時に、コマンド名など、 `Sort`, に関連付けられている、 <xref:System.Web.UI.WebControls.Button> コントロールです。 これにより、複数作成する <xref:System.Web.UI.WebControls.Button> の Web ページし、コントロール プログラムで判断するため <xref:System.Web.UI.WebControls.Button> コントロールがクリックされました。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.Button.Command> のフォームでコントロールの階層をイベントは、 `BubbleEvent`です。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 指定して、コードのイベント ハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.Button.Command> イベント リストを並べ替えるときに、 <xref:System.Web.UI.WebControls.Button> コントロールがクリックされました。 この例のイベント ハンドラーを指定宣言を使用して、 <xref:System.Web.UI.WebControls.Button.OnClick%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Button> コントロールです。  
  
 [!code-csharp[ButtonCommandNameArgument\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-vb[ButtonCommandNameArgument\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 次のコード例は、イベント ハンドラーを指定し、プログラムでのイベントに追加する方法を示します、 `Page_Load` メソッドです。  
  
 [!code-csharp[ButtonCommand\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommand/CS/buttoncommandcs.aspx#1)]
 [!code-vb[ButtonCommand\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommand/VB/buttoncommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="CommandArgument">
      <MemberSignature Language="C#" Value="public string CommandArgument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandArgument" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CommandArgument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に渡される省略可能なパラメーター、 <see cref="E:System.Web.UI.WebControls.Button.Command" /> イベントと共に、関連付けられている <see cref="P:System.Web.UI.WebControls.Button.CommandName" />します。</summary>
        <value>渡される省略可能なパラメーター、 <see cref="E:System.Web.UI.WebControls.Button.Command" /> イベントと共に、関連付けられている <see cref="P:System.Web.UI.WebControls.Button.CommandName" />します。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティを補完するパラメーターを指定する、 <xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティです。  
  
> [!NOTE]
>  設定できますが、 <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティ自体には、通常だけを使用するときに、 <xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティが設定されます。  
  
 <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティを補完、 <xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティを実行するコマンドに関する追加情報を提供することができます。 たとえば、設定した場合、 <xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティを `Sort` と <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティを `Ascending`, 、昇順で並べ替えるにはコマンドを指定します。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティを作成する、 <xref:System.Web.UI.WebControls.Button> コントロールの一覧が昇順で並べ替えられます。  
  
 [!code-csharp[ButtonCommandNameArgument\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-vb[ButtonCommandNameArgument\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandName" />
      </Docs>
    </Member>
    <Member MemberName="CommandName">
      <MemberSignature Language="C#" Value="public string CommandName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.CommandName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に関連付けられているコマンド名、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールに渡される、 <see cref="E:System.Web.UI.WebControls.Button.Command" /> イベントです。</summary>
        <value>コマンド名、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールです。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数ある場合 <xref:System.Web.UI.WebControls.Button> Web ページ上のコントロールを使用して、 <xref:System.Web.UI.WebControls.Button.CommandName%2A> プロパティを指定するか、コマンド名を特定するのには、それぞれに関連付けられている <xref:System.Web.UI.WebControls.Button> コントロールです。 設定することができます、 <xref:System.Web.UI.WebControls.Button.CommandName%2A> を実行するコマンドを識別する任意の文字列を持つプロパティです。 コマンド名をプログラムで判定できますし、 <xref:System.Web.UI.WebControls.Button> を制御し、適切なアクションを実行します。  
  
 コマンドに関する追加情報など、 `Ascending`, を使用して指定することがあります、 <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティです。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.Button.CommandName%2A> 作成するプロパティ、 <xref:System.Web.UI.WebControls.Button> 一覧を並べ替える。  
  
 [!code-csharp[ButtonCommandNameArgument\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-vb[ButtonCommandNameArgument\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandArgument" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackOptions">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.PostBackOptions GetPostBackOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.PostBackOptions GetPostBackOptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.GetPostBackOptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PostBackOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作成、 <see cref="T:System.Web.UI.PostBackOptions" /> を表すオブジェクト、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールのポストバック動作します。</summary>
        <returns>A <see cref="T:System.Web.UI.PostBackOptions" /> を表す、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールのポストバック動作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Button.GetPostBackOptions%2A> メソッドは、作成、 <xref:System.Web.UI.PostBackOptions> を表すオブジェクト、 <xref:System.Web.UI.WebControls.Button> コントロールのポストバック動作します。<xref:System.Web.UI.PostBackOptions> オブジェクトが通常に渡されます、 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%29?displayProperty=fullName> 取得に使用されるクライアント側\-スクリプト関数への参照を呼び出されたときに、メソッドにより、サーバー ページにポストバックをします。  
  
 拡張する場合、このメソッドは、主にコントロールの開発者によって使用、 <xref:System.Web.UI.WebControls.Button> クラスです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>You can override the <see cref="M:System.Web.UI.WebControls.Button.GetPostBackOptions" /> method in your derived class to modify the postback options for the button control, or to call client-side script when the button is clicked. Be sure to call the base class's <see cref="M:System.Web.UI.WebControls.Button.GetPostBackOptions" /> method so that the standard postback options are set.</para>
        </block>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>発生させる、 <see cref="E:System.Web.UI.WebControls.Button.Click" /> のイベント、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Button.Click> イベントが発生したときに、 <xref:System.Web.UI.WebControls.Button> コントロールがクリックされました。 このイベントは、コマンド名が関連付けられていない場合によく使用、 <xref:System.Web.UI.WebControls.Button> \(たとえば、送信ボタン\) を制御します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Web.UI.WebControls.Button.OnClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 指定して、コードのイベント ハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.Button.Click> Web ページに簡単なメッセージを表示するためにイベントです。  
  
 [!code-csharp[ButtonClickText\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-vb[ButtonClickText\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.Button.OnClick(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnClientClick">
      <MemberSignature Language="C#" Value="public virtual string OnClientClick { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnClientClick" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.OnClientClick" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定する際に実行するクライアント側スクリプト、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールの <see cref="E:System.Web.UI.WebControls.Button.Click" /> イベントが発生します。</summary>
        <value>ときに実行されるクライアント側スクリプト、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールの <see cref="E:System.Web.UI.WebControls.Button.Click" /> イベントが発生します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> ときに実行されるその他のクライアント側スクリプトを指定するプロパティ、 <xref:System.Web.UI.WebControls.Button> コントロールの <xref:System.Web.UI.WebControls.Button.Click> イベントが発生します。 このプロパティが表示されるを指定するスクリプト、 <xref:System.Web.UI.WebControls.Button> コントロールの `OnClick` だけでなく、コントロールの属性は、クライアント側スクリプトをあらかじめ定義されています。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 ソース コードの Visual Studio の Web サイト プロジェクトはこのトピック用に使用可能な: [Download](http://go.microsoft.com/fwlink/?LinkId=192871)します。  
  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> ときに実行されるその他のクライアント側スクリプトを指定するプロパティ、 <xref:System.Web.UI.WebControls.Button> コントロールがクリックされました。  
  
 [!code-csharp[Button.OnClientClick\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.OnClientClick/cs/button.onclientclickcs.aspx#1)]
 [!code-vb[Button.OnClientClick\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.OnClientClick/vb/button.onclientclickvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
      </Docs>
    </Member>
    <Member MemberName="OnCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCommand (System.Web.UI.WebControls.CommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCommand(class System.Web.UI.WebControls.CommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.CommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>発生させる、 <see cref="E:System.Web.UI.WebControls.Button.Command" /> のイベント、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Button.Command> イベントが発生したときに、 <xref:System.Web.UI.WebControls.Button> コントロールがクリックされました。 このイベントは通常使用時に、コマンド名など、 `Sort`, に関連付けられている、 <xref:System.Web.UI.WebControls.Button> コントロールです。 これにより、複数作成する <xref:System.Web.UI.WebControls.Button> の Web ページし、コントロール プログラムで判断するため <xref:System.Web.UI.WebControls.Button> コントロールがクリックされました。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.Button.Command> のフォームでコントロールの階層をイベントは、 `BubbleEvent`です。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Web.UI.WebControls.Button.OnCommand%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 指定して、コードのイベント ハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.Button.Command> イベント リストを並べ替えるときに、 <xref:System.Web.UI.WebControls.Button> コントロールがクリックされました。 この例のイベント ハンドラーを指定宣言を使用して、 <xref:System.Web.UI.WebControls.Button.OnClick%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Button> コントロールです。  
  
 [!code-csharp[ButtonCommandNameArgument\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-vb[ButtonCommandNameArgument\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 次のコード例は、イベント ハンドラーを指定し、プログラムでのイベントに追加する方法を示します、 `Page_Load` メソッドです。  
  
 [!code-csharp[ButtonCommand\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommand/CS/buttoncommandcs.aspx#1)]
 [!code-vb[ButtonCommand\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommand/VB/buttoncommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.Button.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.OnPreRender(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>クライアントに表示する前に、ボタンが押されたかどうかを決定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Button.OnPreRender%2A> からカスタム クラスを派生させる際に、主にコントロールの開発者によってメソッドが使用される、 <xref:System.Web.UI.WebControls.Button> コントロールです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostBackUrl">
      <MemberSignature Language="C#" Value="public virtual string PostBackUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PostBackUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.PostBackUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty("*.aspx")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を現在のページの場合にポストするページの URL、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールをクリックします。</summary>
        <value>現在のページの場合にポストする Web ページの URL、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールをクリックします。 既定値は空の文字列 \(""\)、それが原因で、ページをポスト バックするためです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティでは、post を使用してクロス ページを実行することができます、 <xref:System.Web.UI.WebControls.Button> コントロールです。  
  
> [!NOTE]
>  正しく指定されたパスだけでは、このプロパティで動作します。 たとえば、相対パス \(Test\/default.aspx\) 絶対パス \(https:\/\/localhost\/WebApp\/default.aspx\) と仮想 \(~ \\Test\\default.aspx\) 正常に動作します。 正しく書式設定されていないパスなど、"\/Test\/default.aspx"または"\\Test\\default.aspx"が動作しません。 参照してください [ASP.NET Web Site Paths](http://msdn.microsoft.com/ja-jp/2447f50c-b849-483c-8093-85ed53e7a5bd) については正しいパスを作成します。  
  
 設定、 <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティを投稿するときに、Web ページの URL を <xref:System.Web.UI.WebControls.Button> コントロールをクリックします。 などを指定する `Page2.aspx` を含むページにより、 <xref:System.Web.UI.WebControls.Button> コントロールへの投稿を `Page2.aspx`します。 値が指定されていない場合、 <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティには、ページ自身にポストします。  
  
> [!IMPORTANT]
>  サーバー側の検証コントロールとクロスページ ポストバックを実行するときに、ことを確認する必要があります、ページの <xref:System.Web.UI.Page.IsValid%2A> プロパティは `true` ポストバックを処理する前にします。 確認するためのページは、ページ間のポストバックの場合、 <xref:System.Web.UI.Page.PreviousPage%2A>です。 次の VB コードでは、これを行う方法を示しています。  
  
```  
Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load  
        If Page.PreviousPage.IsValid Then  
            ' Handle the post back  
        Else  
            Response.Write("Invalid")  
        End If  
End Sub  
```  
  
 ページ間ポスティング方法の詳細については、次を参照してください。 [Cross\-Page Posting in an ASP.NET Web Page](http://msdn.microsoft.com/ja-jp/fedf234e-b7c4-4644-a9e8-c1c0870b043b)します。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> クロスページ post を実行するプロパティです。 ユーザーがクリックしたとき、 <xref:System.Web.UI.WebControls.Button> コントロール、ページがポストで指定された対象のページにテキスト ボックスに入力された値、 <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティです。 このサンプルを実行するには、このコード例と同じディレクトリにターゲット ページのファイルを作成する必要があります。 対象のページのコードは、次の例で示されています。  
  
 [!code-csharp[Button.PostBackUrlProperty\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.PostBackUrlProperty/CS/button.postbackurlpropertycs.aspx#1)]
 [!code-vb[Button.PostBackUrlProperty\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.PostBackUrlProperty/VB/button.postbackurlpropertyvb.aspx#1)]  
  
 次のコード例では、使用して、 <xref:System.Web.UI.Page.PreviousPage%2A?displayProperty=fullName> から別のページを使用して送信された値にアクセスするプロパティ、 <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> プロパティです。 このページでは、ユーザーに表示されますが、前のページから投稿された文字列を取得します。 このコード例を直接実行しようとする場合はエラーが表示ための値、 `text` するフィールドは `null`です。 代わりに、対象ページを作成し、前の例のコードと同じディレクトリにファイルを配置するこのコードを使用します。 ファイルの名前が指定された値に対応する必要があります、 <xref:System.Web.UI.WebControls.Button.PostBackUrl%2A> 前の例ではプロパティです。 前の例のコードを実行するとこのページは自動的に実行ページ間ポストが発生するとします。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[Button.PostBackUrlPage2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.PostBackUrlPage2/CS/button.postbackurlpage2cs.aspx#1)]
 [!code-vb[Button.PostBackUrlPage2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.PostBackUrlPage2/VB/button.postbackurlpage2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.PreviousPage" />
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.RaisePostBackEvent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">イベントの引数。</param>
        <summary>サーバーへのポストバック時に、<see cref="T:System.Web.UI.WebControls.Button" /> コントロールのイベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、内部で使用、 <xref:System.Web.UI.WebControls.Button> を発生させる、クリックしてされたときのコントロール、 <xref:System.Web.UI.WebControls.Button.Click> イベント、定義されている場合、 <xref:System.Web.UI.WebControls.Button.Command> イベントです。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" /> HTML クライアントでコンテンツを表示する出力ストリームを表すオブジェクト。</param>
        <summary>指定されたライターにコントロールの内容を表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Web.UI.WebControls.Button.RenderContents%2A> 常に、カスタムの後のテキストを表示するようにカスタム サーバー内のメソッドが制御 <xref:System.Web.UI.WebControls.Button> サーバー コントロール。  
  
 [!code-csharp[CustomButtonRenderContents#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRenderContents/CS/custombuttonrendercontentscs.aspx#1)]
 [!code-vb[CustomButtonRenderContents#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRenderContents/VB/custombuttonrendercontentsvb.aspx#1)]  
[!code-csharp[CustomButtonRenderContents#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRenderContents/CS/custombuttonrendercontents.cs#2)]
[!code-vb[CustomButtonRenderContents#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRenderContents/VB/custombuttonrendercontents.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Button.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">イベントの引数。</param>
        <summary>サーバーへのポストバック時に、<see cref="T:System.Web.UI.WebControls.Button" /> コントロールのイベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、内部で使用、 <xref:System.Web.UI.WebControls.Button> を発生させる、クリックしてされたときのコントロール、 <xref:System.Web.UI.WebControls.Button.Click> イベント、定義されている場合、 <xref:System.Web.UI.WebControls.Button.Command> イベントです。  
  
   
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Web.UI.WebControls.Button.System%23Web%23UI%23IPostBackEventHandler%23RaisePostBackEvent%2A> ことを常に発生させるためのメソッド、 <xref:System.Web.UI.WebControls.Button.OnClick%2A> カスタム イベント <xref:System.Web.UI.WebControls.Button> コントロールです。  
  
 [!code-csharp[CustomButtonRaisePostBackEvent\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomButtonRaisePostBackEvent/CS/custombuttonraisepostbackevent.cs#2)]
 [!code-vb[CustomButtonRaisePostBackEvent\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomButtonRaisePostBackEvent/VB/custombuttonraisepostbackevent.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.Button.Click" />
        <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に表示されるテキスト キャプション、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールです。</summary>
        <value>表示されるテキスト キャプション、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールです。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.Button.Text%2A> プロパティを指定するか、キャプションを表示する、 <xref:System.Web.UI.WebControls.Button> コントロールです。  
  
 このプロパティの値を設定すると、デザイナーのツールを使用してリソース ファイルに自動的に保存できます。 詳細については、<xref:System.ComponentModel.LocalizableAttribute> および [ASP.NET Globalization and Localization](http://msdn.microsoft.com/ja-jp/8ef3838e-9d05-4236-9dd0-ceecff9df80d) を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.Button.Text%2A> で表示されるキャプションを指定するプロパティ、 <xref:System.Web.UI.WebControls.Button> コントロールです。  
  
 [!code-csharp[ButtonClickText\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonClickText/cs/ButtonClickCS.aspx#1)]
 [!code-vb[ButtonClickText\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonClickText/vb/ButtonClickVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="UseSubmitBehavior">
      <MemberSignature Language="C#" Value="public virtual bool UseSubmitBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSubmitBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.UseSubmitBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、 <see cref="T:System.Web.UI.WebControls.Button" /> コントロールは、クライアントを使用してブラウザーのメカニズムまたは ASP.NET ポストバックのメカニズムを送信します。</summary>
        <value>
          <see langword="true" /> コントロールは、クライアントのブラウザーを使用している場合の送信メカニズムです。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> プロパティを指定するかどうか、 <xref:System.Web.UI.WebControls.Button> コントロールは、クライアントを使用してブラウザーのメカニズムまたは ASP.NET ポストバックのメカニズムを送信します。 既定でこのプロパティの値は `true`, 、 <xref:System.Web.UI.WebControls.Button> 送信機構をブラウザーを使用するコントロール。 指定した場合 `false`, 、ASP.NET ページ フレームワークでは、クライアント側\-スクリプトをサーバーにフォームにポストするページに追加します。  
  
 ときに、 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> プロパティは、 `false`, 、コントロールの開発者が使用できる、 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 、クライアントを返すメソッドのポストバック イベントを <xref:System.Web.UI.WebControls.Button>です。 によって返される文字列、 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッドは、クライアント側の関数呼び出しのテキストが含まれていて、クライアント側のイベント ハンドラーを挿入します。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> 送信方法を指定するプロパティを <xref:System.Web.UI.WebControls.Button> コントロールが、サーバーへのポストバック時に使用します。<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> にプロパティが設定されている `false`, 、ポストバックのメカニズムの原因で、ASP.NET を使用する\] ボタンをクリックします。 ブラウザーの \[ソースの表示コマンドを使用して、レンダリングされたページのソース コードを表示する場合、クライアント側スクリプトをサーバーにフォームにポストする ASP.NET ページ フレームワークによって追加されていることが表示されます。  
  
 [!code-csharp[Button.UseSubmitBehavior\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.UseSubmitBehavior/CS/button.usesubmitbehaviorcs.aspx#1)]
 [!code-vb[Button.UseSubmitBehavior\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.UseSubmitBehavior/VB/button.usesubmitbehaviorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Button.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロールのグループを設定する、 <see cref="T:System.Web.UI.WebControls.Button" /> 時に、サーバーへのポストバックします。</summary>
        <value>なるコントロールのグループ、 <see cref="T:System.Web.UI.WebControls.Button" /> 時に、サーバーへのポストバックします。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 検証グループを使用すると、ページ上の検証コントロールを特定のカテゴリに割り当てることができます。 各検証グループは、ページ上の他の検証グループとは無関係に検証できます。 使用して、 <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> の検証グループの名前を指定するプロパティ、 <xref:System.Web.UI.WebControls.Button> 時に、サーバーへのポストバックします。  
  
 このプロパティは、有効される場合にのみの値、 <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> にプロパティが設定されている `true`します。 値を指定すると、 <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> プロパティには、指定したグループの一部である検証コントロールだけは、検証、 <xref:System.Web.UI.WebControls.Button> コントロールは、サーバーにポストバックします。 このプロパティの値を指定しないかどうか、 <xref:System.Web.UI.WebControls.Button.CausesValidation%2A> にプロパティが設定されている `true`, 、検証グループに割り当てられていないページ上のすべての検証コントロールは、サーバーへのコントロールのポストバック時に検証されます。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.Button.ValidationGroup%2A> プロパティを検証するためにコントロールを指定する、 <xref:System.Web.UI.WebControls.Button> コントロールは、サーバーにポストバックします。 ページには、ユーザーからのデータをキャプチャする 3 つのテキスト ボックス、3 つが含まれています。 <xref:System.Web.UI.WebControls.RequiredFieldValidator> こと、ユーザーは空白でないテキスト ボックスをように制御します。<xref:System.Web.UI.WebControls.RequiredFieldValidator> についてでは、最初の 2 つのテキスト ボックスの制御、 `PersonalInfoGroup` 検証グループおよび <xref:System.Web.UI.WebControls.RequiredFieldValidator> 、3 つ目のテキスト ボックスが制御、 `LocationInfoGroup` 検証グループです。`Button1` がクリックすると、検証グループ内のコントロールのみ `PersonalInfoGroup` 検証されます。`Button2` がクリックすると、検証グループ内のコントロールのみ `LocationInfoGroup` を検証します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[Button.ValidationGroup\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Button.ValidationGroup/CS/button.validationgroupcs.aspx#1)]
 [!code-vb[Button.ValidationGroup\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Button.ValidationGroup/VB/button.validationgroupvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Button.CausesValidation" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
      </Docs>
    </Member>
  </Members>
</Type>