<Type Name="DataList" FullName="System.Web.UI.WebControls.DataList">
  <TypeSignature Language="C#" Value="public class DataList : System.Web.UI.WebControls.BaseDataList, System.Web.UI.INamingContainer, System.Web.UI.WebControls.IRepeatInfoUser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataList extends System.Web.UI.WebControls.BaseDataList implements class System.Web.UI.INamingContainer, class System.Web.UI.WebControls.IRepeatInfoUser" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.DataList" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseDataList</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.INamingContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IRepeatInfoUser</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.DataListDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.DataListComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.ComponentEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("SelectedValue")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>テンプレートを使用して項目を表示するデータ連結リスト コントロール。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 In this topic:  
  
-   [Introduction](#introduction)  
  
-   [Templates](#templates)  
  
-   [Customizing the Appearance of the DataList Control](#customizing_the_appearance_of_the_datalist_control)  
  
-   [Display Direction and Layout](#display_direction_and_layout)  
  
-   [Security](#security)  
  
-   [Declarative Syntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## Introduction  
 Use the <xref:System.Web.UI.WebControls.DataList> control to display a template\-defined data bound list. The <xref:System.Web.UI.WebControls.DataList> control supports selecting and editing.  
  
<a name="templates"></a>   
## Templates  
 The contents of the <xref:System.Web.UI.WebControls.DataList> control can be manipulated by using templates. The following table lists the supported templates.  
  
|Template Name|Description|  
|-------------------|-----------------|  
|<xref:System.Web.UI.WebControls.DataList.AlternatingItemTemplate%2A>|If defined, provides the content and layout for alternating items in the <xref:System.Web.UI.WebControls.DataList>. If not defined, **languageKeyword tag is not supported!!!!**<br /> is used.|  
|<xref:System.Web.UI.WebControls.DataList.EditItemTemplate%2A>|If defined, provides the content and layout for the item currently being edited in the <xref:System.Web.UI.WebControls.DataList>. If not defined, **languageKeyword tag is not supported!!!!**<br /> is used.|  
|<xref:System.Web.UI.WebControls.DataList.FooterTemplate%2A>|If defined, provides the content and layout for the footer section of the <xref:System.Web.UI.WebControls.DataList>. If not defined, a footer section will not be displayed.|  
|<xref:System.Web.UI.WebControls.DataList.HeaderTemplate%2A>|If defined, provides the content and layout for the header section of the <xref:System.Web.UI.WebControls.DataList>. If not defined, a header section will not be displayed.|  
|<xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A>|Required template that provides the content and layout for items in the <xref:System.Web.UI.WebControls.DataList>.|  
|<xref:System.Web.UI.WebControls.DataList.SelectedItemTemplate%2A>|If defined, provides the content and layout for the currently selected item in the <xref:System.Web.UI.WebControls.DataList>. If not defined, <xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A> is used.|  
|<xref:System.Web.UI.WebControls.DataList.SeparatorTemplate%2A>|If defined, provides the content and layout for the separator between items in the <xref:System.Web.UI.WebControls.DataList>. If not defined, a separator will not be displayed.|  
  
 At the very minimum, the <xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A> needs to be defined to display the items in the <xref:System.Web.UI.WebControls.DataList> control. Additional templates can be used to provide a custom look to the <xref:System.Web.UI.WebControls.DataList> control.  
  
<a name="customizing_the_appearance_of_the_datalist_control"></a>   
## Customizing the Appearance of the DataList Control  
 The appearance of the <xref:System.Web.UI.WebControls.DataList> control may be customized by setting the style properties for the different parts of the control. The following table lists the different style properties.  
  
|Style Property|Description|  
|--------------------|-----------------|  
|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|Specifies the style for alternating items in the <xref:System.Web.UI.WebControls.DataList> control.|  
|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|Specifies the style for the item being edited in the <xref:System.Web.UI.WebControls.DataList> control.|  
|<xref:System.Web.UI.WebControls.DataList.FooterStyle%2A>|Specifies the style for the footer in the <xref:System.Web.UI.WebControls.DataList> control.|  
|<xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A>|Specifies the style for the header in the <xref:System.Web.UI.WebControls.DataList> control.|  
|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|Specifies the style for the items in the <xref:System.Web.UI.WebControls.DataList> control.|  
|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|Specifies the style for the selected item in the <xref:System.Web.UI.WebControls.DataList> control.|  
|<xref:System.Web.UI.WebControls.DataList.SeparatorStyle%2A>|Specifies the style for the separator between the items in the <xref:System.Web.UI.WebControls.DataList> control.|  
  
 You can also show or hide different parts of the control. The following table lists the properties that control which parts are shown or hidden.  
  
|Property|Description|  
|--------------|-----------------|  
|<xref:System.Web.UI.WebControls.DataList.ShowFooter%2A>|Shows or hides the footer section of the <xref:System.Web.UI.WebControls.DataList> control.|  
|<xref:System.Web.UI.WebControls.DataList.ShowHeader%2A>|Shows or hides the header section of the <xref:System.Web.UI.WebControls.DataList> control.|  
  
<a name="display_direction_and_layout"></a>   
## Display Direction and Layout  
 The display direction of a <xref:System.Web.UI.WebControls.DataList> control can be vertical or horizontal. Set the <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> property to specify the display direction.  
  
 The layout of the <xref:System.Web.UI.WebControls.DataList> control is controlled with the <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> property. Setting this property to **languageKeyword tag is not supported!!!!**  
 will display the <xref:System.Web.UI.WebControls.DataList> in a table format, while **languageKeyword tag is not supported!!!!**  
 displays the <xref:System.Web.UI.WebControls.DataList> without a table structure.  
  
<a name="security"></a>   
## Security  
 The **languageKeyword tag is not supported!!!!**  
 control can contain controls that enable users to enter information.  
  
> [!CAUTION]
>  This control can be used to display user input, which might include malicious client script. Check any information that is sent from a client for executable script, SQL statements, or other code before displaying it in your application. You can use validation controls to verify user input before displaying the input text in a control. ASP.NET provides an input request validation feature to block script and HTML in user input.  
  
 For more information about security, see [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), and [Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
<a name="declarative_syntax"></a>   
## Declarative Syntax  
  
```  
<asp:DataList  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    Caption="string"  
    CaptionAlign="NotSet|Top|Bottom|Left|Right"  
    CellPadding="integer"  
    CellSpacing="integer"  
    CssClass="string"  
    DataKeyField="string"  
    DataMember="string"  
    DataSource="string"  
    DataSourceID="string"  
    EditItemIndex="integer"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ExtractTemplateRows="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    GridLines="None|Horizontal|Vertical|Both"  
    Height="size"  
    HorizontalAlign="NotSet|Left|Center|Right|Justify"  
    ID="string"  
    OnCancelCommand="CancelCommand event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleteCommand="DeleteCommand event handler"  
    OnDisposed="Disposed event handler"  
    OnEditCommand="EditCommand event handler"  
    OnInit="Init event handler"  
    OnItemCommand="ItemCommand event handler"  
    OnItemCreated="ItemCreated event handler"  
    OnItemDataBound="ItemDataBound event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelectedIndexChanged="SelectedIndexChanged event handler"  
    OnUnload="Unload event handler"  
    OnUpdateCommand="UpdateCommand event handler"  
    RepeatColumns="integer"  
    RepeatDirection="Horizontal|Vertical"  
    RepeatLayout="Table|Flow"  
    runat="server"  
    SelectedIndex="integer"  
    ShowFooter="True|False"  
    ShowHeader="True|False"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    UseAccessibleHeader="True|False"  
    Visible="True|False"  
    Width="size"  
>  
        <AlternatingItemStyle />  
        <AlternatingItemTemplate>  
            <!-- child controls -->  
        </AlternatingItemTemplate>  
        <EditItemStyle />  
        <EditItemTemplate>  
            <!-- child controls -->  
        </EditItemTemplate>  
        <FooterStyle />  
        <FooterTemplate>  
            <!-- child controls -->  
        </FooterTemplate>  
        <HeaderStyle />  
        <HeaderTemplate>  
            <!-- child controls -->  
        </HeaderTemplate>  
        <ItemStyle />  
        <ItemTemplate>  
            <!-- child controls -->  
        </ItemTemplate>  
        <SelectedItemStyle />  
        <SelectedItemTemplate>  
            <!-- child controls -->  
        </SelectedItemTemplate>  
        <SeparatorStyle />  
        <SeparatorTemplate>  
            <!-- child controls -->  
        </SeparatorTemplate>  
</asp:DataList>  
```  
  
   
  
## 例  
 The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DataList> control to display a list of items from a data source.  
  
> [!NOTE]
>  The following code sample uses the single\-file code model and may not work correctly if copied directly into a code\-behind file. This code sample must be copied into an empty text file that has an .aspx extension. For more information on the Web Forms code model, see [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-csharp[DataList\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataList/CS/datalistcs.aspx#1)]
 [!code-vb[DataList\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataList/VB/datalistvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.BaseDataList" />
    <altmember cref="T:System.Web.UI.WebControls.DataGrid" />
    <altmember cref="T:System.Web.UI.WebControls.Repeater" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.DataList" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use this constructor to create and initialize a new instance of the <xref:System.Web.UI.WebControls.DataList> class.  
  
   
  
## 例  
 The following code example demonstrates how to create and initialize a new instance of the <xref:System.Web.UI.WebControls.DataList> class.  
  
 [!code-csharp[Classic DataList.DataList Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic DataList.DataList Example/CS/source.cs#1)]
 [!code-vb[Classic DataList.DataList Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic DataList.DataList Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlternatingItemStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle AlternatingItemStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle AlternatingItemStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.AlternatingItemStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>代替のアイテムのスタイル プロパティを取得、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 交互のスタイルのプロパティを表すオブジェクトの項目を <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は空 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> の項目を交互にカスタム スタイルを提供するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 調整可能な共通のスタイル属性には、前景の色、背景色、フォント、およびセル内のコンテンツの配置が含まれます。 外観を強化するさまざまなスタイルを提供する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 アイテムのスタイル プロパティで、 <xref:System.Web.UI.WebControls.DataList> コントロールは、階層から別のスタイル プロパティの 1 つの項目から継承されます。 階層内を低く設定項目のスタイル プロパティは、スタイルのプロパティの階層の上位の項目に継承されます。 赤いフォントを指定する場合など、 <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> プロパティ、すべての他の項目のスタイルのプロパティで、 <xref:System.Web.UI.WebControls.DataList> コントロールには、赤いフォントがあります。 これにより、1 つの項目のスタイル プロパティを設定して、コントロールの共通の外観を提供することができます。 スタイル プロパティを設定して、階層の上位層にあるアイテムのスタイル プロパティの継承されたスタイルの設定をオーバーライドすることができます。 青のフォントを指定するなど、 <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> で指定された赤いフォントをオーバーライドするプロパティ、 <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> プロパティです。 次の表は、最上位から最下位までの階層の順序を示します。  
  
|優先順位|スタイル プロパティ|  
|----------|----------------|  
|1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|  
|2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|  
|3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|  
|4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|  
|5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|  
  
 交互の項目にカスタム スタイルを指定するには、配置、 `<AlternatingItemStyle>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 スタイル属性を一覧表示できますし、 `<AlternatingItemStyle>` タグ。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> 内の項目を交互に異なる背景色を指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListItemStyle\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemStyle/CS/datalistitemstylecs.aspx#1)]
 [!code-vb[DataListItemStyle\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemStyle/VB/datalistitemstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="AlternatingItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate AlternatingItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate AlternatingItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.AlternatingItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定をテンプレート、 <see cref="T:System.Web.UI.WebControls.DataList" />です。</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> 交互のテンプレートが含まれるオブジェクトの項目を <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.AlternatingItemTemplate%2A> \[内の項目の変更の内容を制御するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 \[項目の変更の表示がによって制御される、 <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> プロパティです。  
  
 交互の項目のテンプレートを指定するには、配置、 `<AlternatingItemTemplate>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、 `<AlternatingItemTemplate>` タグ。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.AlternatingItemTemplate%2A> \[内の項目の変更の内容を制御するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListAlternatingItemTemplate\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListAlternatingItemTemplate/CS/datalistaltitemtemplatecs.aspx#1)]
 [!code-vb[DataListAlternatingItemTemplate\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListAlternatingItemTemplate/VB/datalistaltitemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.DataList.AlternatingItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.ItemTemplate" />
        <altmember cref="T:System.Web.UI.ITemplate" />
      </Docs>
    </Member>
    <Member MemberName="CancelCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler CancelCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler CancelCommand" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.CancelCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see langword="Cancel" /> 内のアイテムをクリックした、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.CancelCommand> イベントが発生したときに、 `Cancel` 内のアイテムをクリックした、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 一般的なハンドラー、 <xref:System.Web.UI.WebControls.DataList.CancelCommand> イベントに設定、 <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> プロパティを `-1` \(アイテムの選択を解除\) するデータを再バインドと、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!CAUTION]
>  テキストは、HTML で表示されるまでのエンコードではありません、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 これにより、テキストに HTML タグ内のスクリプトを埋め込むことが可能です。 コントロールの値は、ユーザー入力から送られてきた場合、は、セキュリティの脆弱性を軽減する値を検証することを確認します。  
  
 イベント処理の詳細については、「[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)」を参照してください。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.CancelCommand> イベントです。 内の項目を編集をキャンセル、 <xref:System.Web.UI.WebControls.DataList> タイミングを制御、 `Cancel` \] ボタンをクリックします。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListEdit\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-vb[DataListEdit\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-csharp[DataListEdit2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-vb[DataListEdit2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataListCommandEventHandler" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.DeleteCommand" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.EditCommand" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.UpdateCommand" />
      </Docs>
    </Member>
    <Member MemberName="CancelCommandName">
      <MemberSignature Language="C#" Value="public const string CancelCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string CancelCommandName" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.DataList.CancelCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す、 <see langword="Cancel" /> コマンド名です。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.CancelCommandName> を表すフィールド、 `Cancel` コマンド名です。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.DataList.SelectCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.EditCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.DeleteCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.UpdateCommandName" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlHierarchy">
      <MemberSignature Language="C#" Value="protected override void CreateControlHierarchy (bool useDataSource);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateControlHierarchy(bool useDataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.CreateControlHierarchy(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useDataSource" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useDataSource">
          <see langword="true" /> コントロールのデータ ソースを使用するには <see langword="false" /> にコントロールがビュー状態から再作成されることを示すデータ バインドすることはできません。</param>
        <summary>指定したデータ ソースの有無データ リスト コントロールの表示に使用されるコントロールの階層構造を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> からのカスタム実装を派生させる際に、主にコントロールの開発者によってメソッドが使用される、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> メソッドの使用方法、 <xref:System.Web.UI.WebControls.DataList.CreateItem%2A> と <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> を作成するメソッド <xref:System.Web.UI.WebControls.DataListItem> ヘッダー、フッター、区切り記号、およびデータ リストに含まれるデータ バインド項目を表すコントロール。 一覧については、データをデータ バインド項目へのアクセス、 <xref:System.Web.UI.WebControls.DataList.Items%2A> コレクションです。 を通じてヘッダー、フッター、および区切り記号の項目を含む、すべての項目の種類にアクセスすることができます、 <xref:System.Web.UI.WebControls.BaseDataList.Controls%2A> コレクションです。  
  
 オーバーライド、 <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> メソッドをカスタマイズする方法 <xref:System.Web.UI.WebControls.DataListItem> コントロールを作成またはに追加、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 オーバーライド、 <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> 用のテンプレートをカスタマイズする方法、 <xref:System.Web.UI.WebControls.DataListItem> コントロールです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateControlStyle">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.Style CreateControlStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.Style CreateControlStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.CreateControlStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>によって内部的に使用される既定のスタイル オブジェクトを作成、 <see cref="T:System.Web.UI.WebControls.DataList" /> すべてのスタイルを実装するコントロールに関連するプロパティです。</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.TableStyle" /> コントロールの既定のスタイル プロパティを格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.CreateControlStyle%2A> からのカスタム実装を派生するコントロールの開発者が、主にメソッドを使用、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
   
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Web.UI.WebControls.DataList.CreateControlStyle%2A> でないセルの間隔を使用して水平方向のグリッド線を常に表示するようにカスタム サーバー内のメソッドが制御、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 [!code-csharp[CustomDataListCreateControlStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomDataListCreateControlStyle/CS/custom_datalist_createcontrolstylecs.aspx#1)]
 [!code-vb[CustomDataListCreateControlStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomDataListCreateControlStyle/VB/custom_datalist_createcontrolstylevb.aspx#1)]  
[!code-csharp[CustomDataListCreateControlStyle#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomDataListCreateControlStyle/CS/custom_datalist_createcontrolstyle.cs#2)]
[!code-vb[CustomDataListCreateControlStyle#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomDataListCreateControlStyle/VB/custom_datalist_createcontrolstyle.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItem">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.DataListItem CreateItem (int itemIndex, System.Web.UI.WebControls.ListItemType itemType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.DataListItem CreateItem(int32 itemIndex, valuetype System.Web.UI.WebControls.ListItemType itemType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.CreateItem(System.Int32,System.Web.UI.WebControls.ListItemType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIndex" Type="System.Int32" />
        <Parameter Name="itemType" Type="System.Web.UI.WebControls.ListItemType" />
      </Parameters>
      <Docs>
        <param name="itemIndex">内の指定位置、 <see cref="T:System.Web.UI.WebControls.DataList" /> に作成されたアイテムを配置します。</param>
        <param name="itemType">A <see cref="T:System.Web.UI.WebControls.ListItemType" /> を作成する項目の指定された型を表します。</param>
        <summary>
          <see cref="T:System.Web.UI.WebControls.DataListItem" /> オブジェクトを作成します。</summary>
        <returns>新しい <see cref="T:System.Web.UI.WebControls.DataListItem" /> と指定されたリスト項目の種類を作成します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.CreateItem%2A> のカスタム実装を作成するコントロールの開発者が、主にメソッドを使用、 <xref:System.Web.UI.WebControls.DataList> コントロールです。<xref:System.Web.UI.WebControls.DataList.CreateItem%2A> メソッドの呼び出しに相当する機能は、 <xref:System.Web.UI.WebControls.DataListItem.%23ctor%2A> のコンス トラクター、 <xref:System.Web.UI.WebControls.DataListItem>です。<xref:System.Web.UI.WebControls.DataListItem.ItemIndex%2A> と <xref:System.Web.UI.WebControls.DataListItem.ItemType%2A> の新しいプロパティが初期化 <xref:System.Web.UI.WebControls.DataListItem> を使用する指定された値が、項目が挿入されない、 <xref:System.Web.UI.WebControls.DataList>です。  
  
 <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> メソッドの使用方法、 <xref:System.Web.UI.WebControls.DataList.CreateItem%2A> と <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> を作成するメソッド <xref:System.Web.UI.WebControls.DataListItem> ヘッダー、フッター、区切り記号、およびデータ リストに含まれるデータ バインド項目を表すコントロール。 一覧については、データをデータ バインド項目へのアクセス、 <xref:System.Web.UI.WebControls.DataList.Items%2A> コレクションです。 を通じてヘッダー、フッター、および区切り記号の項目を含む、すべての項目の種類にアクセスすることができます、 <xref:System.Web.UI.WebControls.BaseDataList.Controls%2A> コレクションです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Override this method to create your own derived <see cref="T:System.Web.UI.WebControls.DataListItem" /> type, or to set additional member properties when a <see cref="T:System.Web.UI.WebControls.DataListItem" /> is created.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.DataList.CreateControlHierarchy(System.Boolean)" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.InitializeItem(System.Web.UI.WebControls.DataListItem)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler DeleteCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler DeleteCommand" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.DeleteCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see langword="Delete" /> 内のアイテムをクリックした、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.DeleteCommand> イベントが発生したときに、 `Delete` 内のアイテムをクリックした、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 一般的なハンドラーを <xref:System.Web.UI.WebControls.DataList.DeleteCommand> イベントのデータ ソースから選択した項目を削除および再バインドするデータ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 イベント処理の詳細については、「[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)」を参照してください。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.DeleteCommand> イベントです。 内の選択した項目を削除、 <xref:System.Web.UI.WebControls.DataList> タイミングを制御、 `Delete` \] ボタンをクリックします。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListEdit\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-vb[DataListEdit\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-csharp[DataListEdit2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-vb[DataListEdit2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataListCommandEventHandler" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.CancelCommand" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.EditCommand" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.UpdateCommand" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandName">
      <MemberSignature Language="C#" Value="public const string DeleteCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DeleteCommandName" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.DataList.DeleteCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す、 <see langword="Delete" /> コマンド名です。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.DeleteCommandName> を表すフィールド、 `Delete` コマンド名です。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.DataList.SelectCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.EditCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.UpdateCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.CancelCommandName" />
      </Docs>
    </Member>
    <Member MemberName="EditCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler EditCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler EditCommand" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.EditCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see langword="Edit" /> 内のアイテムをクリックした、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.EditCommand> イベントが発生したときに、 `Edit` 内のアイテムをクリックした、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 一般的なハンドラー、 <xref:System.Web.UI.WebControls.DataList.EditCommand> イベントのセット、 <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> プロパティを選択した行にデータをバインドし、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!CAUTION]
>  テキストは、HTML で表示されるまでのエンコードではありません、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 これにより、テキストに HTML タグ内のスクリプトを埋め込むことが可能です。 コントロールの値は、ユーザー入力から送られてきた場合、は、セキュリティの脆弱性を軽減する値を検証することを確認します。  
  
 イベント処理の詳細については、「[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)」を参照してください。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.EditCommand> イベントです。 選択した項目を編集することができます、 <xref:System.Web.UI.WebControls.DataList> タイミングを制御、 `Edit` \] ボタンをクリックします。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListEdit\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-vb[DataListEdit\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-csharp[DataListEdit2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-vb[DataListEdit2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataListCommandEventHandler" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.CancelCommand" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.DeleteCommand" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.UpdateCommand" />
      </Docs>
    </Member>
    <Member MemberName="EditCommandName">
      <MemberSignature Language="C#" Value="public const string EditCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EditCommandName" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.DataList.EditCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す、 <see langword="Edit" /> コマンド名です。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.EditCommandName> を表すフィールド、 `Edit` コマンド名です。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.DataList.SelectCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.DeleteCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.UpdateCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.CancelCommandName" />
      </Docs>
    </Member>
    <Member MemberName="EditItemIndex">
      <MemberSignature Language="C#" Value="public virtual int EditItemIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EditItemIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.EditItemIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の選択項目のインデックス番号、 <see cref="T:System.Web.UI.WebControls.DataList" /> を編集するコントロール。</summary>
        <value>選択した項目のインデックス番号、 <see cref="T:System.Web.UI.WebControls.DataList" /> を編集するコントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> プロパティを編集する項目をプログラムで指定します。 編集用に選択項目のインデックスを特定するのにこのプロパティを使用することもできます。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> プロパティは、0 から始まります。  
  
 項目の選択を解除するには、設定、 <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> プロパティを `-1`します。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
 <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> プロパティがコントロールの状態に格納されています。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> プロパティを編集するために、ユーザーが選択した項目を指定します。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListEdit\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-vb[DataListEdit\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">選択した値より小さい <see langword="0" />します。</exception>
        <altmember cref="P:System.Web.UI.WebControls.DataList.EditItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.EditItemTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.EditCommand" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="EditItemStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle EditItemStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle EditItemStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.EditItemStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>編集用に選択した項目のスタイル プロパティを取得、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 編集用に選択した項目のスタイルのプロパティを格納しているオブジェクト、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は空 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A> 編集用に選択した項目のカスタム スタイルを指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 調整可能な共通のスタイル属性には、前景の色、背景色、フォント、およびセル内のコンテンツの配置が含まれます。 外観を強化するさまざまなスタイルを提供する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 アイテムのスタイル プロパティで、 <xref:System.Web.UI.WebControls.DataList> コントロールは、階層から別のスタイル プロパティの 1 つの項目から継承されます。 階層内を低く設定項目のスタイル プロパティは、スタイルのプロパティの階層の上位の項目に継承されます。 赤いフォントを指定する場合など、 <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> プロパティ、すべての他の項目のスタイルのプロパティで、 <xref:System.Web.UI.WebControls.DataList> コントロールには、赤いフォントがあります。 これにより、1 つの項目のスタイル プロパティを設定して、コントロールの共通の外観を提供することができます。 スタイル プロパティを設定して、階層の上位層にあるアイテムのスタイル プロパティの継承されたスタイルの設定をオーバーライドすることができます。 青のフォントを指定するなど、 <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> で指定された赤いフォントをオーバーライドするプロパティ、 <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> プロパティです。 次の表は、最上位から最下位までの階層の順序を示します。  
  
|優先順位|スタイル プロパティ|  
|----------|----------------|  
|1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|  
|2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|  
|3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|  
|4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|  
|5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|  
  
 編集用に選択アイテムのカスタム スタイルを指定するには、配置、 `<EditItemStyle>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 スタイル属性を一覧表示できますし、 `<EditItemStyle>` タグ。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A> プロパティを編集するために、ユーザーが選択した項目に対してさまざまな外観を指定します。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListEdit\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-vb[DataListEdit\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.EditItemIndex" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.EditItemTemplate" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.EditCommand" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="EditItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EditItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate EditItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.EditItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の編集用に選択した項目テンプレート、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> 編集用に選択した項目テンプレートが含まれるオブジェクト、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.EditItemTemplate%2A> プロパティは編集用に選択した項目の内容を制御する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 によって制御が編集用に選択した項目の外観、 <xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A> プロパティです。  
  
 編集用に選択項目のテンプレートを指定するには、配置、 `<EditItemTemplate>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、 `<EditItemTemplate>` タグ。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.EditItemTemplate%2A> プロパティを編集するために、ユーザーが選択した項目の内容を制御します。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListEdit\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-vb[DataListEdit\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.DataList.EditItemIndex" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.EditItemStyle" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.EditCommand" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="T:System.Web.UI.ITemplate" />
      </Docs>
    </Member>
    <Member MemberName="ExtractTemplateRows">
      <MemberSignature Language="C#" Value="public virtual bool ExtractTemplateRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExtractTemplateRows" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.ExtractTemplateRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうかの行、 <see cref="T:System.Web.UI.WebControls.Table" /> の各テンプレートで定義されているコントロール、 <see cref="T:System.Web.UI.WebControls.DataList" /> 制御が抽出され、表示されます。</summary>
        <value>
          <see langword="true" /> 場合の行、 <see cref="T:System.Web.UI.WebControls.Table" /> の各テンプレートで定義されているコントロール、 <see cref="T:System.Web.UI.WebControls.DataList" /> を抽出し、表示する以外の場合は、制御 <see langword="false" />します。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内容、 <xref:System.Web.UI.WebControls.DataList> コントロールはテンプレートを使用して指定します。 通常、テンプレートに表示するコントロールが一覧表示します。 配置することも、 <xref:System.Web.UI.WebControls.Table> テンプレートで制御し、テーブルの行を表示します。  
  
 使用して、 <xref:System.Web.UI.WebControls.DataList.ExtractTemplateRows%2A> プロパティを指定するかどうかの行、 <xref:System.Web.UI.WebControls.Table> の各テンプレートで定義されているコントロール、 <xref:System.Web.UI.WebControls.DataList> コントロールが抽出され、表示されます。 テンプレートから抽出されたすべての行、 <xref:System.Web.UI.WebControls.DataList> コントロールが 1 つのテーブルに表示されます。 これにより、他の小さなテーブルから 1 つのテーブルを作成しの機能を保持する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  このプロパティを設定すると `true`, 、整形式を入力する必要があります <xref:System.Web.UI.WebControls.Table> コントロールに追加するテンプレートごとに、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 テーブルの行のみが表示されます。 テンプレート内の他のすべてのコンテンツは無視されます。 使用する必要があります、 <xref:System.Web.UI.WebControls.Table> 適切に機能するには、この機能を制御します。<xref:System.Web.UI.HtmlControls.HtmlTable?displayProperty=fullName> コントロールは、このプロパティと互換性がありません。  
  
 セルを作成する場合、 <xref:System.Web.UI.WebControls.Table> コントロール テンプレートでは、使用することができます、 <xref:System.Web.UI.WebControls.TableCell.ColumnSpan%2A> のプロパティ、 <xref:System.Web.UI.WebControls.TableCell> セルがまたがる列数を制御するオブジェクト。 使用することも、 <xref:System.Web.UI.WebControls.TableCell.RowSpan%2A> セルがまたがる行の数を制御するプロパティです。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A>, 、<xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A>, 、および <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> プロパティではの外観には影響しない、 <xref:System.Web.UI.WebControls.DataList> にこのプロパティを設定すると制御 `true`します。  
  
   
  
## 例  
 次のコード例を使用する方法をデモンストレーションする、 <xref:System.Web.UI.WebControls.DataList.ExtractTemplateRows%2A> プロパティを抽出し、行の表示を <xref:System.Web.UI.WebControls.Table> のテンプレートで定義されるコントロール、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[Classic DataList.ExtractTemplateRows Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic DataList.ExtractTemplateRows Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic DataList.ExtractTemplateRows Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic DataList.ExtractTemplateRows Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.Table" />
        <altmember cref="T:System.Web.UI.WebControls.TableRow" />
        <altmember cref="T:System.Web.UI.WebControls.TableCell" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.AlternatingItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.EditItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.HeaderTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SeparatorTemplate" />
      </Docs>
    </Member>
    <Member MemberName="FooterStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle FooterStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle FooterStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.FooterStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フッター セクションのスタイル プロパティを取得、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> のフッター セクションのスタイルのプロパティを格納しているオブジェクト、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は空 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティのフッター セクションにカスタム スタイルを使用して、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 調整可能な共通のスタイル属性には、前景の色、背景色、フォント、およびセル内のコンテンツの配置が含まれます。 外観を強化するさまざまなスタイルを提供する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> のプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールのスタイル設定を継承する、 <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> プロパティです。 赤いフォントを指定する場合など、 <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> 、プロパティ、 <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> プロパティには、赤いフォントがあります。 これにより、単一のスタイル プロパティを設定して、コントロールの一般的な外観を指定することができます。 継承されたスタイル設定を上書きするには設定して、 <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> プロパティです。 青のフォントを指定するなど、 <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> で指定された赤いフォントをオーバーライドするプロパティ、 <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> プロパティです。  
  
 フッター セクションのカスタム スタイルを指定するには、配置、 `<FooterStyle>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 スタイル属性を一覧表示できますし、 `<FooterStyle>` タグ。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.DataList.ShowFooter%2A> にプロパティを設定する必要があります `true` を表示するには、このプロパティのです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> のフッター セクションに対してカスタムの背景色を指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListHeaderStyle\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListHeaderStyle/CS/datalistheaderstylecs.aspx#1)]
 [!code-vb[DataListHeaderStyle\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListHeaderStyle/VB/datalistheaderstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.DataList.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.DataGrid.ShowFooter" />
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="FooterTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate FooterTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate FooterTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.FooterTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のフッター セクションのテンプレート、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> のフッター セクションのテンプレートが含まれるオブジェクト、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.FooterTemplate%2A> フッター セクションの内容を制御するプロパティです。 フッター セクションの表示がによって制御される、 <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> プロパティです。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.DataList.ShowFooter%2A> にプロパティを設定する必要があります `true` を表示するには、このプロパティのです。  
  
 <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> のプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールのスタイル設定を継承する、 <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> プロパティです。 赤いフォントを指定する場合など、 <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> 、プロパティ、 <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> プロパティには、赤いフォントがあります。 これにより、単一のスタイル プロパティを設定して、コントロールの一般的な外観を指定することができます。 継承されたスタイル設定を上書きするには設定して、 <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> プロパティです。 青のフォントを指定するなど、 <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> で指定された赤いフォントをオーバーライドするプロパティ、 <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> プロパティです。  
  
 フッター セクションのテンプレートを指定するには、配置、 `<FooterTemplate>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、 `<FooterTemplate>` タグ。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.FooterTemplate%2A> のフッター セクションの内容を制御するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListHeaderStyle\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListHeaderStyle/CS/datalistheaderstylecs.aspx#1)]
 [!code-vb[DataListHeaderStyle\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListHeaderStyle/VB/datalistheaderstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.DataList.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.ShowFooter" />
        <altmember cref="T:System.Web.UI.ITemplate" />
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.GridLines GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.GridLines GridLines" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.GridLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridLines</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のグリッド線のスタイル、 <see cref="T:System.Web.UI.WebControls.DataList" /> タイミングを制御、 <see cref="P:System.Web.UI.WebControls.DataList.RepeatLayout" /> にプロパティが設定されている <see langword="RepeatLayout.Table" />します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.GridLines" /> 列挙値のいずれか。 既定値は <see langword="None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.GridLines%2A> のグリッド線のスタイルを指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 次の表は、有効なスタイルを示します。  
  
|スタイル|説明|  
|----------|--------|  
|<xref:System.Web.UI.WebControls.GridLines.None>|グリッドの行はありません。|  
|<xref:System.Web.UI.WebControls.GridLines.Horizontal>|水平グリッド線を表示します。|  
|<xref:System.Web.UI.WebControls.GridLines.Vertical>|垂直方向のグリッド線を表示します。|  
|<xref:System.Web.UI.WebControls.GridLines.Both>|水平および垂直のグリッド線の両方が表示されます。|  
  
> [!NOTE]
>  このプロパティは、場合にのみ適用されます、 <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> にプロパティが設定されている `RepeatLayout.Table`します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.GridLines%2A> の垂直および水平のグリッド線を表示するプロパティを <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListLayout\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListLayout/CS/datalistlayoutcs.aspx#1)]
 [!code-vb[DataListLayout\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListLayout/VB/datalistlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.GridLines" />
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle HeaderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle HeaderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.HeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ヘッダー セクションのスタイル プロパティを取得、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> の見出しのセクションのスタイルのプロパティを格納しているオブジェクト、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は空 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの見出しのカスタム スタイルを使用して、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 調整可能な共通のスタイル属性には、前景の色、背景色、フォント、およびセル内のコンテンツの配置が含まれます。 外観を強化するさまざまなスタイルを提供する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 見出しのセクションのカスタム スタイルを指定するには、配置、 `<HeaderStyle>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 スタイル属性を一覧表示できますし、 `<HeaderStyle>` タグ。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.DataList.ShowHeader%2A> にプロパティを設定する必要があります `true` を表示するには、このプロパティのです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> のヘッダー セクションに対してカスタムの背景色を指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListHeaderStyle\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListHeaderStyle/CS/datalistheaderstylecs.aspx#1)]
 [!code-vb[DataListHeaderStyle\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListHeaderStyle/VB/datalistheaderstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.FooterTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.ShowHeader" />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate HeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate HeaderTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.HeaderTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の見出しのセクションのテンプレート、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> の見出しのセクションのテンプレートを含む、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.HeaderTemplate%2A> 見出しのセクションの内容を制御するプロパティです。 ヘッダー セクションの表示がによって制御される、 <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> プロパティです。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.DataList.ShowHeader%2A> にプロパティを設定する必要があります `true` を表示するには、このプロパティのです。  
  
 見出しのセクションのテンプレートを指定するには、配置、 `<HeaderTemplate>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、 `<HeaderTemplate>` タグ。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.HeaderTemplate%2A> プロパティのヘッダー セクションの内容を制御する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListLayout\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListLayout/CS/datalistlayoutcs.aspx#1)]
 [!code-vb[DataListLayout\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListLayout/VB/datalistlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.DataList.HeaderStyle" />
        <altmember cref="T:System.Web.UI.ITemplate" />
      </Docs>
    </Member>
    <Member MemberName="InitializeItem">
      <MemberSignature Language="C#" Value="protected virtual void InitializeItem (System.Web.UI.WebControls.DataListItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeItem(class System.Web.UI.WebControls.DataListItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.InitializeItem(System.Web.UI.WebControls.DataListItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Web.UI.WebControls.DataListItem" />
      </Parameters>
      <Docs>
        <param name="item">初期化する <see cref="T:System.Web.UI.WebControls.DataListItem" />。</param>
        <summary>初期化、 <see cref="T:System.Web.UI.WebControls.DataListItem" /> オブジェクトに基づいて、指定したテンプレートと、リスト項目の種類のスタイル。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> メソッドは、主にコントロールの開発者によって拡張するための <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> メソッドの使用方法、 <xref:System.Web.UI.WebControls.DataList.CreateItem%2A> と <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> を作成するメソッド <xref:System.Web.UI.WebControls.DataListItem> ヘッダー、フッター、区切り記号、およびデータ リストに含まれるデータ バインド項目を表すコントロール。 一覧については、データをデータ バインド項目へのアクセス、 <xref:System.Web.UI.WebControls.DataList.Items%2A> コレクションです。 を通じてヘッダー、フッター、および区切り記号の項目を含む、すべての項目の種類にアクセスすることができます、 <xref:System.Web.UI.WebControls.BaseDataList.Controls%2A> コレクションです。  
  
 オーバーライド、 <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> メソッドをカスタマイズする方法 <xref:System.Web.UI.WebControls.DataListItem> コントロールを作成またはに追加、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 オーバーライド、 <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> 用のテンプレートをカスタマイズする方法、 <xref:System.Web.UI.WebControls.DataListItem> コントロールです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.DataList.CreateItem(System.Int32,System.Web.UI.WebControls.ListItemType)" />
        <altmember cref="T:System.Web.UI.WebControls.ListItemType" />
      </Docs>
    </Member>
    <Member MemberName="ItemCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler ItemCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler ItemCommand" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.ItemCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いずれかのボタンがクリックされたときに発生する、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.ItemCommand> のいずれかのボタンがクリックされたときにイベントが発生した、 <xref:System.Web.UI.WebControls.DataList> を制御し、カスタム ボタン コントロールがある場合に、よく使用 `CommandName` 値。  
  
 イベント処理の詳細については、次を参照してください。[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)します。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.ItemCommand> イベントから項目を選択する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListItemCommand\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand/CS/datalistitemcommandcs.aspx#1)]
 [!code-vb[DataListItemCommand\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand/VB/datalistitemcommandvb.aspx#1)]  
  
 [!code-csharp[DataListItemCommand2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand2/CS/datalistitemcommand2cs.aspx#1)]
 [!code-vb[DataListItemCommand2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand2/VB/datalistitemcommand2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataListCommandEventHandler" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemCreated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListItemEventHandler ItemCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListItemEventHandler ItemCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.ItemCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバー内の項目で発生した、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.ItemCreated> イベントは内の項目、 <xref:System.Web.UI.WebControls.DataList> コントロールが作成されると、データがコントロールにバインドされるラウンド トリップ時と時にします。  
  
 <xref:System.Web.UI.WebControls.DataList.ItemCreated> 内の行の外観と内容を制御するイベントは通常使用、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 イベント処理の詳細については、「[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)」を参照してください。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.ItemCreated> のどの項目の順序を表示するイベント、 <xref:System.Web.UI.WebControls.DataList> コントロールを作成します。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListItemCreated\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCreated/CS/datalistitemcreatedcs.aspx#1)]
 [!code-vb[DataListItemCreated\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCreated/VB/datalistitemcreatedvb.aspx#1)]  
  
 [!code-csharp[DataListItemCreated2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCreated2/CS/datalistitemcreated2cs.aspx#1)]
 [!code-vb[DataListItemCreated2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCreated2/VB/datalistitemcreated2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataListItemEventHandler" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnItemCreated(System.Web.UI.WebControls.DataListItemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemDataBound">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListItemEventHandler ItemDataBound;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListItemEventHandler ItemDataBound" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.ItemDataBound" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目がデータにバインドされているときに発生、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.ItemDataBound> 項目にバインドされたデータは、後にイベントが発生、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 このイベントは、クライアントで表示されるようにするデータ項目にアクセスする最後の機会を提供します。 このイベントが発生した後、データ項目は使用できなくします。  
  
 イベント処理の詳細については、「[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)」を参照してください。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.ItemDataBound> のどの項目の順序を表示するイベント、 <xref:System.Web.UI.WebControls.DataList> コントロールは、コントロールにバインドします。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListItemDataBound\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemDataBound/CS/datalistitemdataboundcs.aspx#1)]
 [!code-vb[DataListItemDataBound\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemDataBound/VB/datalistitemdataboundvb.aspx#1)]  
  
 [!code-csharp[DataListItemDataBound2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemDataBound2/CS/datalistitemdatabound2cs.aspx#1)]
 [!code-vb[DataListItemDataBound2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemDataBound2/VB/datalistitemdatabound2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataListItemEventHandler" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnItemDataBound(System.Web.UI.WebControls.DataListItemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataListItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataListItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションを取得 <see cref="T:System.Web.UI.WebControls.DataListItem" /> コントロール内の個々 のアイテムを表すオブジェクト。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.DataListItemCollection" /> のコレクションを含む <see cref="T:System.Web.UI.WebControls.DataListItem" /> の個々 のアイテムを表すオブジェクト、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.Items%2A> コレクション内の項目をプログラムで制御する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。<xref:System.Web.UI.WebControls.DataList.Items%2A> コレクションが項目をコレクションに追加または削除するメソッドを提供していません。 ただし、項目の内容を制御のハンドラーを提供することにより、 <xref:System.Web.UI.WebControls.DataList.ItemCreated> イベントです。  
  
> [!NOTE]
>  データ ソースにバインドされている項目のみが含まれている、 <xref:System.Web.UI.WebControls.DataList.Items%2A> コレクションです。 ヘッダー、フッター、および区切り記号は、コレクションに含まれません。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.Items%2A> を内の項目を表示するコレクション、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[Classic DataList.Items Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic DataList.Items Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic DataList.Items Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic DataList.Items Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataListItem" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.ItemCreated" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnItemCreated(System.Web.UI.WebControls.DataListItemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ItemStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle ItemStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle ItemStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.ItemStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内の項目のスタイル プロパティを取得、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 内の項目のスタイルのプロパティを格納しているオブジェクト、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は空 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 項目にカスタム スタイルを提供するこのプロパティを使用して、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 調整可能な共通のスタイル属性には、前景の色、背景色、フォント、およびセル内のコンテンツの配置が含まれます。 外観を強化するさまざまなスタイルを提供する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 アイテムのスタイル プロパティで、 <xref:System.Web.UI.WebControls.DataList> コントロールは、階層から別のスタイル プロパティの 1 つの項目から継承されます。 階層内を低く設定項目のスタイル プロパティは、スタイルのプロパティの階層の上位の項目に継承されます。 赤いフォントを指定する場合など、 <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> プロパティ、すべての他の項目のスタイルのプロパティで、 <xref:System.Web.UI.WebControls.DataList> コントロールには、赤いフォントがあります。 これにより、1 つの項目のスタイル プロパティを設定して、コントロールの共通の外観を提供することができます。 スタイル プロパティを設定して、階層の上位層にあるアイテムのスタイル プロパティの継承されたスタイルの設定をオーバーライドすることができます。 青のフォントを指定するなど、 <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> で指定された赤いフォントをオーバーライドするプロパティ、 <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> プロパティです。 次の表は、最上位から最下位までの階層の順序を示します。  
  
|優先順位|スタイル プロパティ|  
|----------|----------------|  
|1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|  
|2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|  
|3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|  
|4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|  
|5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|  
  
 アイテムのカスタム スタイルを指定する、 <xref:System.Web.UI.WebControls.DataList> 管理、配置、 `<ItemStyle>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 スタイル属性を一覧表示できますし、 `<ItemStyle>` タグ。  
  
 使用することも、 <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> の項目を交互に別の外観を提供するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> 内のアイテムに対して異なる背景色を指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListItemStyle\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemStyle/CS/datalistitemstylecs.aspx#1)]
 [!code-vb[DataListItemStyle\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemStyle/VB/datalistitemstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.DataList.ItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.AlternatingItemStyle" />
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.ItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の項目のテンプレート、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> で項目のテンプレートを含む、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A> プロパティ内の項目の内容を制御する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 内の項目の外観、 <xref:System.Web.UI.WebControls.DataList> コントロール? 궸뫮궢궲궵궻믴뱗똛궚귞귢귡궔궼갂 \_aspect、 <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> プロパティです。  
  
 テンプレートの項目を指定する、 <xref:System.Web.UI.WebControls.DataList> 管理、配置、 `<ItemTemplate>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、 `<ItemTemplate>` タグ。  
  
 必要に応じて使用することができます、 <xref:System.Web.UI.WebControls.DataList.AlternatingItemTemplate%2A> の項目を交互に別の外観を提供するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A> プロパティ内の項目の内容を制御する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListLayout\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListLayout/CS/datalistlayoutcs.aspx#1)]
 [!code-vb[DataListLayout\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListLayout/VB/datalistlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.DataList.AlternatingItemTemplate" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.ItemStyle" />
        <altmember cref="T:System.Web.UI.ITemplate" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">オブジェクトの状態を表す、 <see cref="T:System.Web.UI.WebControls.DataList" />です。</param>
        <summary>以前に保存した <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールのビュー ステートを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、主に、.NET Framework インフラストラクチャによって使用され、コードから直接使用するものではありません。  ただし、コントロールの開発者は、カスタム サーバー コントロールがそのビューステートを復元する方法を指定するには、このメソッドをオーバーライドすることができます。 詳細については、「[ASP.NET State Management Overview](http://msdn.microsoft.com/ja-jp/0218d965-5d30-445b-b6a6-8870e70e63ce)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.DataList.LoadViewState%2A> メソッドのビュー ステート情報を復元する、 <xref:System.Web.UI.WebControls.DataList> によって保存された前のページ要求からのコントロール、 <xref:System.Web.UI.WebControls.DataList.SaveViewState%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.DataList.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="OnBubbleEvent">
      <MemberSignature Language="C#" Value="protected override bool OnBubbleEvent (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnBubbleEvent(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnBubbleEvent(System.Object,System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">イベントのソース。</param>
        <param name="e">イベントのデータ。</param>
        <summary>サーバー コントロールのイベントをページの UI サーバー コントロールの階層構造に渡すかどうかを決定します。</summary>
        <returns>イベントがキャンセルされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnCancelCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCancelCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCancelCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> イベント データを格納します。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.DataList.CancelCommand" /> イベントを発生させます。 これにより、イベントのカスタム ハンドラーを作成できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.OnCancelCommand%2A> のカスタム ハンドラーを提供するメソッド、 <xref:System.Web.UI.WebControls.DataList.CancelCommand> イベントです。  
  
 <xref:System.Web.UI.WebControls.DataList.CancelCommand> イベントが発生したときに、 `Cancel` 内のアイテムをクリックした、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 一般的なハンドラー、 <xref:System.Web.UI.WebControls.DataList.CancelCommand> イベントに設定、 <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> プロパティを `-1` \(アイテムの選択を解除\) するデータを再バインドと、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.DataList.OnCancelCommand%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.CancelCommand> イベントです。 内の項目を編集をキャンセル、 <xref:System.Web.UI.WebControls.DataList> タイミングを制御、 `Cancel` \] ボタンをクリックします。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListEdit\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-vb[DataListEdit\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-csharp[DataListEdit2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-vb[DataListEdit2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.DataList.CancelCommand" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnDeleteCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnDeleteCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeleteCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> イベント データを格納します。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.DataList.DeleteCommand" /> イベントを発生させます。 これにより、イベントのカスタム ハンドラーを作成できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.OnDeleteCommand%2A> のカスタム ハンドラーを提供するメソッド、 <xref:System.Web.UI.WebControls.DataList.DeleteCommand> イベントです。  
  
 <xref:System.Web.UI.WebControls.DataList.DeleteCommand> イベントが発生したときに、 `Delete` 内のアイテムをクリックした、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 一般的なハンドラーを <xref:System.Web.UI.WebControls.DataList.DeleteCommand> イベントのデータ ソースから選択した項目を削除および再バインドするデータ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.DataList.OnDeleteCommand%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.DeleteCommand> イベントです。 内の選択した項目を削除、 <xref:System.Web.UI.WebControls.DataList> タイミングを制御、 `Delete` \] ボタンをクリックします。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListEdit\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-vb[DataListEdit\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-csharp[DataListEdit2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-vb[DataListEdit2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.DataList.DeleteCommand" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnEditCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnEditCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEditCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> イベント データを格納します。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.DataList.EditCommand" /> イベントを発生させます。 これにより、イベントのカスタム ハンドラーを作成できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.OnEditCommand%2A> のカスタム ハンドラーを提供するメソッド、 <xref:System.Web.UI.WebControls.DataList.EditCommand> イベントです。  
  
 <xref:System.Web.UI.WebControls.DataList.EditCommand> イベントが発生したときに、 `Edit` 内のアイテムをクリックした、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 一般的なハンドラー、 <xref:System.Web.UI.WebControls.DataList.EditCommand> イベントのセット、 <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> プロパティを選択した行にデータをバインドし、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.DataList.OnEditCommand%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.EditCommand> イベントです。 選択した項目を編集することができます、 <xref:System.Web.UI.WebControls.DataList> タイミングを制御、 `Edit` \] ボタンをクリックします。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListEdit\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-vb[DataListEdit\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-csharp[DataListEdit2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-vb[DataListEdit2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.DataList.EditCommand" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnInit(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールの <see cref="E:System.Web.UI.Control.Init" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.OnInit%2A> メソッドは、通知、 <xref:System.Web.UI.WebControls.DataList> コントロールを作成し、インスタンスを設定するために必要な初期化の手順を実行します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> イベント データを格納します。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.DataList.ItemCommand" /> イベントを発生させます。 これにより、イベントのカスタム ハンドラーを作成できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.OnItemCommand%2A> のカスタム ハンドラーを提供するメソッド、 <xref:System.Web.UI.WebControls.DataList.ItemCommand> イベントです。  
  
 <xref:System.Web.UI.WebControls.DataList.ItemCommand> のいずれかのボタンがクリックされたときにイベントが発生した、 <xref:System.Web.UI.WebControls.DataList> を制御し、カスタム ボタン コントロールがある場合に、よく使用 `CommandName` などの値 `Add`, で、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.DataList.OnItemCommand%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.ItemCommand> イベントから項目を選択する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListItemCommand\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand/CS/datalistitemcommandcs.aspx#1)]
 [!code-vb[DataListItemCommand\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand/VB/datalistitemcommandvb.aspx#1)]  
  
 [!code-csharp[DataListItemCommand2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand2/CS/datalistitemcommand2cs.aspx#1)]
 [!code-vb[DataListItemCommand2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand2/VB/datalistitemcommand2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.DataList.OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.DataList.OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.DataList.ItemCommand" />
        <altmember cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCreated (System.Web.UI.WebControls.DataListItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCreated(class System.Web.UI.WebControls.DataListItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnItemCreated(System.Web.UI.WebControls.DataListItemEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> イベント データを格納します。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.DataList.ItemCreated" /> イベントを発生させます。 これにより、イベントのカスタム ハンドラーを作成できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.OnItemCreated%2A> のカスタム ハンドラーを提供するメソッド、 <xref:System.Web.UI.WebControls.DataList.ItemCreated> イベントです。  
  
 <xref:System.Web.UI.WebControls.DataList.ItemCreated> イベントは内の項目、 <xref:System.Web.UI.WebControls.DataList> コントロールが作成されると、データがコントロールにバインドされるラウンド トリップ時と時にします。  
  
 <xref:System.Web.UI.WebControls.DataList.ItemCreated> 内の行の外観と内容を制御するイベントは通常使用、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.DataList.OnItemCreated%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.ItemCreated> のどの項目の順序を表示するイベント、 <xref:System.Web.UI.WebControls.DataList> コントロールを作成します。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListItemCreated\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCreated/CS/datalistitemcreatedcs.aspx#1)]
 [!code-vb[DataListItemCreated\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCreated/VB/datalistitemcreatedvb.aspx#1)]  
  
 [!code-csharp[DataListItemCreated2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCreated2/CS/datalistitemcreated2cs.aspx#1)]
 [!code-vb[DataListItemCreated2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCreated2/VB/datalistitemcreated2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.DataList.OnItemCreated(System.Web.UI.WebControls.DataListItemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.DataList.OnItemCreated(System.Web.UI.WebControls.DataListItemEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.DataList.ItemCreated" />
        <altmember cref="T:System.Web.UI.WebControls.DataListItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemDataBound">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDataBound (System.Web.UI.WebControls.DataListItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDataBound(class System.Web.UI.WebControls.DataListItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnItemDataBound(System.Web.UI.WebControls.DataListItemEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> イベント データを格納します。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.DataList.ItemDataBound" /> イベントを発生させます。 これにより、イベントのカスタム ハンドラーを作成できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.OnItemDataBound%2A> のカスタム ハンドラーを提供するメソッド、 <xref:System.Web.UI.WebControls.DataList.ItemDataBound> イベントです。  
  
 <xref:System.Web.UI.WebControls.DataList.ItemDataBound> 項目にバインドされたデータは、後にイベントが発生、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 このイベントは、クライアントで表示されるようにするデータ項目にアクセスする最後の機会を提供します。 このイベントが発生した後、データ項目は使用できなくします。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.DataList.OnItemDataBound%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.ItemDataBound> のどの項目の順序を表示するイベント、 <xref:System.Web.UI.WebControls.DataList> コントロールは、コントロールにバインドします。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListItemDataBound\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemDataBound/CS/datalistitemdataboundcs.aspx#1)]
 [!code-vb[DataListItemDataBound\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemDataBound/VB/datalistitemdataboundvb.aspx#1)]  
  
 [!code-csharp[DataListItemDataBound2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemDataBound2/CS/datalistitemdatabound2cs.aspx#1)]
 [!code-vb[DataListItemDataBound2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemDataBound2/VB/datalistitemdatabound2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.DataList.OnItemDataBound(System.Web.UI.WebControls.DataListItemEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.DataList.OnItemDataBound(System.Web.UI.WebControls.DataListItemEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.DataList.ItemDataBound" />
        <altmember cref="T:System.Web.UI.WebControls.DataListItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnUpdateCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdateCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdateCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> イベント データを格納します。</param>
        <summary>
          <see cref="E:System.Web.UI.WebControls.DataList.UpdateCommand" /> イベントを発生させます。 これにより、イベントのカスタム ハンドラーを作成できます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.OnUpdateCommand%2A> のカスタム ハンドラーを提供するメソッド、 <xref:System.Web.UI.WebControls.DataList.UpdateCommand> イベントです。  
  
 <xref:System.Web.UI.WebControls.DataList.UpdateCommand> イベントが発生したときに、 `Update` アイテムがクリックされたボタンをクリックします。  
  
 一般的なハンドラー、 <xref:System.Web.UI.WebControls.DataList.UpdateCommand> イベントは、データのセットを更新、 <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> プロパティを `-1` \(アイテムの選択を解除\) する、データを再バインドと、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、「[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.DataList.OnUpdateCommand%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.UpdateCommand> イベントです。 選択した項目を更新することができます、 <xref:System.Web.UI.WebControls.DataList> コントロールに新しい値をユーザーが入力したときに、 `Update` \] ボタンをクリックします。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListEdit\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-vb[DataListEdit\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-csharp[DataListEdit2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-vb[DataListEdit2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.DataList.UpdateCommand" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="PrepareControlHierarchy">
      <MemberSignature Language="C#" Value="protected override void PrepareControlHierarchy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void PrepareControlHierarchy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.PrepareControlHierarchy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>表示するためのコントロールの階層構造の準備、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.PrepareControlHierarchy%2A> からカスタム コントロールを派生させる際に、主にコントロールの開発者によってメソッドが使用される、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 <xref:System.Web.UI.WebControls.DataList.PrepareControlHierarchy%2A> コントロールの階層構造を準備し、含まれているスタイルを設定 <xref:System.Web.UI.WebControls.DataListItem> 子コントロールがレンダリングされる前に制御します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Override the <see cref="M:System.Web.UI.WebControls.DataList.PrepareControlHierarchy" /> method to customize styles for controls contained in the <see cref="T:System.Web.UI.WebControls.DataList" /> before they are rendered.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.DataList.RenderContents(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">HTML コンテンツをクライアントに表示する出力ストリームを表す <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>リスト項目を表示、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.RenderContents%2A> からカスタム コントロールを派生させる際に、主にコントロールの開発者によってメソッドが使用される、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 <xref:System.Web.UI.WebControls.DataList.RenderContents%2A> メソッド内部のコンテンツを表示、 <xref:System.Web.UI.WebControls.DataList> 格納されているなど、コントロール <xref:System.Web.UI.WebControls.DataListItem> コントロールです。  
  
   
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Web.UI.WebControls.DataList.RenderContents%2A> カスタム サーバー内のメソッドを制御できるため、いくつかのテキストの前に、 <xref:System.Web.UI.WebControls.DataList> オブジェクトです。  
  
 [!code-csharp[CustomDataListRenderContents#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomDataListRenderContents/CS/custom_datalist_rendercontentscs.aspx#1)]
 [!code-vb[CustomDataListRenderContents#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomDataListRenderContents/VB/custom_datalist_rendercontentsvb.aspx#1)]  
[!code-csharp[CustomDataListRenderContents#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomDataListRenderContents/CS/custom_datalist_rendercontents.cs#2)]
[!code-vb[CustomDataListRenderContents#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomDataListRenderContents/VB/custom_datalist_rendercontents.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RepeatColumns">
      <MemberSignature Language="C#" Value="public virtual int RepeatColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RepeatColumns" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.RepeatColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールに表示する列数を取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールに表示する列数。 既定値は <see langword="0" />, 、ことを示します内の項目、 <see cref="T:System.Web.UI.WebControls.DataList" /> で単一の行または列の値に基づいてコントロールが表示される、 <see cref="P:System.Web.UI.WebControls.DataList.RepeatDirection" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内の項目を表示する列の数を指定するこのプロパティを使用して、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 たとえば、このプロパティを設定する `5`, 、 <xref:System.Web.UI.WebControls.DataList> コントロールでは、5 つの列でその項目が表示されます。  
  
> [!NOTE]
>  このプロパティ設定されている場合 `0`, 、 <xref:System.Web.UI.WebControls.DataList> コントロールでは、単一の行または列の値に基づいてでその項目が表示されます、 <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> プロパティです。 場合、 <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> にプロパティが設定されている `RepeatDirection.Horizontal`, 、項目が 1 つの行で表示します。 場合、 <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> にプロパティが設定されている `RepeatDirection.Vertical`, 、1 つの列に、項目を表示します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> プロパティを表示する列の数を指定する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListLayout\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListLayout/CS/datalistlayoutcs.aspx#1)]
 [!code-vb[DataListLayout\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListLayout/VB/datalistlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定された列数は、負の値です。</exception>
        <altmember cref="P:System.Web.UI.WebControls.DataList.RepeatDirection" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.RepeatLayout" />
      </Docs>
    </Member>
    <Member MemberName="RepeatDirection">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.RepeatDirection RepeatDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.RepeatDirection RepeatDirection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.RepeatDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.RepeatDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定するかどうか、 <see cref="T:System.Web.UI.WebControls.DataList" /> 垂直または水平方向にコントロールが表示されます。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.RepeatDirection" /> 値のいずれか。 既定値は、<see langword="Vertical" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> プロパティの表示方向を指定する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  によって表示される列の数が決まります常に、 <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> プロパティです。  
  
 このプロパティ設定されている場合 `RepeatDirection.Vertical`, 、リスト内の項目を上から下に読み込まれた列に表示される、すべての項目が表示されるまでは、左から右、します。 たとえば場合、 <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> にプロパティが設定されている `3`, 、内の項目、 <xref:System.Web.UI.WebControls.DataList> コントロールは、次の表のように、3 つの列に表示されます。  
  
||||  
|-|-|-|  
|1|4|7|  
|2|5|9|  
|3|6|9|  
  
 このプロパティ設定されている場合 `RepeatDirection.Horizontal`, 、上から下、すべての項目が表示されるまで、リスト内の項目が左から右に読み込まれた行に表示されます。 たとえば場合、 <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> にプロパティが設定されている `3`, の項目、 <xref:System.Web.UI.WebControls.DataList> コントロールは、次の表に、3 つの項目が、それぞれの行に表示されます。  
  
||||  
|-|-|-|  
|1|2|3|  
|4|5|6|  
|7|9|9|  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> 順番の方向を指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールが表示されます。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListLayout\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListLayout/CS/datalistlayoutcs.aspx#1)]
 [!code-vb[DataListLayout\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListLayout/VB/datalistlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定した値がのない、 <see cref="T:System.Web.UI.WebControls.RepeatDirection" /> 値。</exception>
        <altmember cref="T:System.Web.UI.WebControls.RepeatDirection" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.RepeatColumns" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.RepeatLayout" />
      </Docs>
    </Member>
    <Member MemberName="RepeatLayout">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.RepeatLayout RepeatLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.RepeatLayout RepeatLayout" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.RepeatLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.RepeatLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロールがテーブルまたはフロー レイアウトで表示されるかどうかを設定します。</summary>
        <value>フロー レイアウトまたはテーブルに、コントロールが表示されるかどうかを指定する値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用、 <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> プロパティを指定するかどうかの項目、 <xref:System.Web.UI.WebControls.DataList> コントロールがテーブルに表示されます。 唯一 <xref:System.Web.UI.WebControls.RepeatLayout> でサポートされている値、 <xref:System.Web.UI.WebControls.DataList> コントロールは <xref:System.Web.UI.WebControls.RepeatLayout.Table> と <xref:System.Web.UI.WebControls.RepeatLayout.Flow>です。  
  
 このプロパティ設定されている場合 `RepeatLayout.Table`, 、リスト内の項目がテーブルに表示されます。 このプロパティ設定されている場合 `RepeatLayout.Flow`, 、リスト内の項目は、テーブル構造付けずに表示されます。  
  
 ときに、 <xref:System.Web.UI.WebControls.DataList> 使用すると、コントロールがテーブルに表示される、 <xref:System.Web.UI.WebControls.DataList.GridLines%2A> グリッド線のスタイルを指定するプロパティです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> のレイアウト スタイルを指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListLayout\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListLayout/CS/datalistlayoutcs.aspx#1)]
 [!code-vb[DataListLayout\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListLayout/VB/datalistlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定した値がサポートされているいない <see cref="T:System.Web.UI.WebControls.RepeatLayout" /> 値。</exception>
        <altmember cref="T:System.Web.UI.WebControls.RepeatLayout" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.RepeatColumns" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.RepeatDirection" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.GridLines" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.SaveViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保存コントロールへの変更は、ページがサーバーにポストされた時刻以降状態を表示します。</summary>
        <returns>変更内容を含むオブジェクト、 <see cref="T:System.Web.UI.WebControls.DataList" /> 状態を表示します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.SaveViewState%2A> メソッドは、主にコントロールの開発者によって使用されます。  
  
 ビュー ステートは、サーバー コントロールのプロパティの値を累積したものです。 これらの値が自動的に、サーバー コントロールの配置 <xref:System.Web.UI.Control.ViewState%2A> インスタンスであるプロパティの <xref:System.Web.UI.StateBag> クラスです。<xref:System.Web.UI.Control.ViewState%2A> プロパティの値が文字列オブジェクトをサーバー コントロールのライフ サイクルの保存状態の段階の後に、永続化します。 詳細については、「[ASP.NET Page Life Cycle Overview](http://msdn.microsoft.com/ja-jp/7949d756-1a79-464e-891f-904b1cfc7991)」を参照してください。  
  
 ビューステートを保存すると、この文字列オブジェクトが非表示の HTML 入力要素に格納されている変数としてクライアントに返されます。 カスタム サーバー コントロールを作成するときに、オーバーライドすることで効率を向上できます、 <xref:System.Web.UI.WebControls.DataList.SaveViewState%2A> メソッドと変更、 <xref:System.Web.UI.Control.ViewState%2A> サーバー コントロールのプロパティです。 詳細については、[Developing Custom ASP.NET Server Controls](http://msdn.microsoft.com/ja-jp/fbe26c16-cff4-4089-b3dd-877411f0c0ef) および [ASP.NET State Management Overview](http://msdn.microsoft.com/ja-jp/0218d965-5d30-445b-b6a6-8870e70e63ce) を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.DataList.TrackViewState" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.LoadViewState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommandName">
      <MemberSignature Language="C#" Value="public const string SelectCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelectCommandName" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.DataList.SelectCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す、 <see langword="Select" /> コマンド名です。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.SelectCommandName> を表すフィールド、 `Select` コマンド名です。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.DataList.EditCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.DeleteCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.UpdateCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.CancelCommandName" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public virtual int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.DataList" /> コントロール内の選択された項目のインデックスを取得または設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.DataList" /> コントロール内の選択された項目のインデックス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.SelectedIndex%2A> プロパティをプログラムで選択した項目を指定する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 選択された項目のインデックスを確認するのにこのプロパティを使用することもできます。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.DataList.SelectedIndex%2A> プロパティは、0 から始まります。  
  
 項目の選択を解除するには、設定、 <xref:System.Web.UI.WebControls.DataList.SelectedIndex%2A> プロパティを `-1`します。  
  
 <xref:System.Web.UI.WebControls.DataList.SelectedIndex%2A> プロパティがコントロールの状態に格納されています。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.SelectedIndex%2A> で選択した項目を指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListItemCommand\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand/CS/datalistitemcommandcs.aspx#1)]
 [!code-vb[DataListItemCommand\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand/VB/datalistitemcommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定された値より小さい <see langword="-1" />します。</exception>
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedItem" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedItemTemplate" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataListItem SelectedItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataListItem SelectedItem" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SelectedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>選択した項目を取得、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.DataListItem" /> で選択した項目を表す、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.SelectedItem%2A> を取得するプロパティ、 <xref:System.Web.UI.WebControls.DataListItem> で選択した項目を表すオブジェクト、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 このオブジェクトは、選択された項目のプロパティにアクセスし、使用できます。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.SelectedItem%2A> で選択した項目の内容を表示するプロパティを <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[Classic DataList.SelectedItem Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic DataList.SelectedItem Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic DataList.SelectedItem Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic DataList.SelectedItem Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataListItem" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedIndex" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedItemStyle" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedItemTemplate" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItemStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle SelectedItemStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle SelectedItemStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SelectedItemStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>選択した項目のスタイル プロパティを取得、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> で選択した項目のスタイルのプロパティを格納しているオブジェクト、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は空 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティで選択した項目のカスタム スタイルを使用して、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 調整可能な共通のスタイル属性には、前景の色、背景色、フォント、およびセル内のコンテンツの配置が含まれます。 外観を強化するさまざまなスタイルを提供する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 アイテムのスタイル プロパティで、 <xref:System.Web.UI.WebControls.DataList> コントロールは、階層から別のスタイル プロパティの 1 つの項目から継承されます。 階層内を低く設定項目のスタイル プロパティは、スタイルのプロパティの階層の上位の項目に継承されます。 赤いフォントを指定する場合など、 <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> プロパティ、すべての他の項目のスタイルのプロパティで、 <xref:System.Web.UI.WebControls.DataList> コントロールには、赤いフォントがあります。 これにより、1 つの項目のスタイル プロパティを設定して、コントロールの共通の外観を提供することができます。 スタイル プロパティを設定して、階層の上位層にあるアイテムのスタイル プロパティの継承されたスタイルの設定をオーバーライドすることができます。 青のフォントを指定するなど、 <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> で指定された赤いフォントをオーバーライドするプロパティ、 <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> プロパティです。 次の表は、最上位から最下位までの階層の順序を示します。  
  
|優先順位|スタイル プロパティ|  
|----------|----------------|  
|1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|  
|2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|  
|3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|  
|4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|  
|5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|  
  
 選択したアイテムのカスタム スタイルを指定するには、配置、 `<SelectedItemStyle>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 スタイル属性を一覧表示できますし、 `<SelectedItemStyle>` タグ。  
  
   
  
## 例  
 次のコード例を使用して、 <xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A> で選択した項目に対してカスタムの背景色を指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListItemCommand\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand/CS/datalistitemcommandcs.aspx#1)]
 [!code-vb[DataListItemCommand\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand/VB/datalistitemcommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedIndex" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedItem" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedItemTemplate" />
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate SelectedItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate SelectedItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SelectedItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定で選択した項目のテンプレート、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> で選択した項目のテンプレートを含む、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.SelectedItemTemplate%2A> プロパティは、選択した項目の内容を制御します。 選択された項目の表示がによって制御される、 <xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A> プロパティです。  
  
 選択した項目のテンプレートを指定するには、配置、 `<SelectedItemTemplate>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、 `<SelectedItemTemplate>` タグ。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.SelectedItemTemplate%2A> プロパティで選択した項目の内容を制御する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListItemCommand\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand/CS/datalistitemcommandcs.aspx#1)]
 [!code-vb[DataListItemCommand\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand/VB/datalistitemcommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedIndex" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedItem" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedItemStyle" />
      </Docs>
    </Member>
    <Member MemberName="SelectedValue">
      <MemberSignature Language="C#" Value="public object SelectedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SelectedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>選択したデータのリスト項目のキー フィールドの値を取得します。</summary>
        <value>選択したデータのリスト項目のキー フィールドの値。 既定値は <see langword="null" />, 、リスト アイテムのデータは、現在選択されていないことを示します。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.BaseDataList.DataKeyField" /> プロパティが設定されていません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.BaseDataList.DataKeyField" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedIndex" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SelectedItem" />
      </Docs>
    </Member>
    <Member MemberName="SeparatorStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle SeparatorStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle SeparatorStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SeparatorStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内の各項目間の区切り記号のスタイル プロパティを取得、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> 内の各項目間の区切り記号のスタイル プロパティを格納しているオブジェクト、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は空 <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.SeparatorStyle%2A> 内の各項目間の区切り記号のカスタム スタイルを指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 区切り記号では、各項目間のカスタム コンテンツを持つ要素を配置することができます、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 調整可能な共通のスタイル属性には、前景の色、背景色、フォント、およびセル内のコンテンツの配置が含まれます。 外観を強化するさまざまなスタイルを提供する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 区切り記号のカスタム スタイルを指定するには、配置、 `<SeparatorStyle>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 スタイル属性を一覧表示できますし、 `<SeparatorStyle>` タグ。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.SeparatorStyle%2A> 内の各項目間の区切り記号のカスタムの背景色を指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListSeparatorStyle\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListSeparatorStyle/CS/datalistseparatorstylecs.aspx#1)]
 [!code-vb[DataListSeparatorStyle\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListSeparatorStyle/VB/datalistseparatorstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.DataList.SeparatorTemplate" />
        <altmember cref="T:System.Web.UI.WebControls.TableItemStyle" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="SeparatorTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate SeparatorTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate SeparatorTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SeparatorTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定テンプレートの項目間の区切り記号、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.ITemplate" /> 内の項目間の区切り記号のテンプレートを含む、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。 既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.SeparatorTemplate%2A> の項目間の区切り記号の内容を制御するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 区切り記号では、各項目間のカスタム コンテンツを持つ要素を配置することができます、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 項目間の区切り記号の外観、 <xref:System.Web.UI.WebControls.DataList> コントロール? 궸뫮궢궲궵궻믴뱗똛궚귞귢귡궔궼갂 \_aspect、 <xref:System.Web.UI.WebControls.DataList.SeparatorStyle%2A> プロパティです。  
  
 区切り記号のテンプレートを指定するには、配置、 `<SeparatorTemplate>` 開始タグと終了タグの間のタグ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、 `<SeparatorTemplate>` タグ。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.SeparatorTemplate%2A> プロパティ内の各項目間の区切り記号の内容を制御する、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListSeparatorStyle\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListSeparatorStyle/CS/datalistseparatorstylecs.aspx#1)]
 [!code-vb[DataListSeparatorStyle\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListSeparatorStyle/VB/datalistseparatorstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ITemplate" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.SeparatorStyle" />
      </Docs>
    </Member>
    <Member MemberName="ShowFooter">
      <MemberSignature Language="C#" Value="public virtual bool ShowFooter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowFooter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.ShowFooter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定にフッター セクションが表示されるかどうかを示す値、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>
          <see langword="true" /> 場合は、フッター セクションが表示されます。それ以外の場合、 <see langword="false" />です。 既定値は <see langword="true" />, が、このプロパティは、調査するときに、 <see cref="P:System.Web.UI.WebControls.DataList.FooterTemplate" /> プロパティは使用されません <see langword="null" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.ShowFooter%2A> にフッター セクションが表示されるかどうかを指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 設定して、フッター セクションの外観を制御する、 <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> プロパティです。 フッター セクションの内容がによって制御される、 <xref:System.Web.UI.WebControls.DataList.FooterTemplate%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.ShowFooter%2A> にフッター セクションを表示するプロパティを <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListShowHeader\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListShowHeader/CS/datalistshowheadercs.aspx#1)]
 [!code-vb[DataListShowHeader\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListShowHeader/VB/datalistshowheadervb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.DataList.FooterStyle" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.FooterTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ShowHeader">
      <MemberSignature Language="C#" Value="public virtual bool ShowHeader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHeader" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.ShowHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはヘッダー セクションに表示するかどうかを示す値を設定、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>
          <see langword="true" /> ヘッダーを表示する場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="true" />, が、このプロパティは、調査するときに、 <see cref="P:System.Web.UI.WebControls.DataList.HeaderTemplate" /> プロパティは使用されません <see langword="null" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.ShowHeader%2A> のヘッダー セクションが表示されるかどうかを指定するプロパティ、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
 ヘッダー セクションの外観を制御するには設定して、 <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> プロパティです。 ヘッダー セクションの内容がによって制御される、 <xref:System.Web.UI.WebControls.DataList.HeaderTemplate%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DataList.ShowHeader%2A> ヘッダー」セクションを表示するプロパティを <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListShowHeader\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListShowHeader/CS/datalistshowheadercs.aspx#1)]
 [!code-vb[DataListShowHeader\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListShowHeader/VB/datalistshowheadervb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.DataList.HeaderStyle" />
        <altmember cref="P:System.Web.UI.WebControls.DataList.HeaderTemplate" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.Style IRepeatInfoUser.GetItemStyle (System.Web.UI.WebControls.ListItemType itemType, int repeatIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.WebControls.Style System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(valuetype System.Web.UI.WebControls.ListItemType itemType, int32 repeatIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#GetItemStyle(System.Web.UI.WebControls.ListItemType,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemType" Type="System.Web.UI.WebControls.ListItemType" />
        <Parameter Name="repeatIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="itemType">
          <see cref="T:System.Web.UI.WebControls.ListItemType" /> 列挙値のいずれか。</param>
        <param name="repeatIndex">リスト コントロール項目のインデックス。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(System.Web.UI.WebControls.ListItemType,System.Int32)" />」を参照してください。</summary>
        <returns>リスト コントロール内の指定したインデックス位置にある指定した項目の型のスタイルを表す <see cref="T:System.Web.UI.WebControls.Style" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.DataList> のインスタンスが <xref:System.Web.UI.WebControls.IRepeatInfoUser> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.HasFooter">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasFooter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Web.UI.WebControls.IRepeatInfoUser.HasFooter" />」を参照してください。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.DataList> のインスタンスが <xref:System.Web.UI.WebControls.IRepeatInfoUser> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.HasHeader">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Web.UI.WebControls.IRepeatInfoUser.HasHeader" />」を参照してください。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 使用できる場合にのみ、 <xref:System.Web.UI.WebControls.DataList> インスタンスのキャスト、 <xref:System.Web.UI.WebControls.IRepeatInfoUser> インターフェイスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasSeparators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators" />」を参照してください。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.DataList> のインスタンスが <xref:System.Web.UI.WebControls.IRepeatInfoUser> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.RenderItem">
      <MemberSignature Language="C#" Value="void IRepeatInfoUser.RenderItem (System.Web.UI.WebControls.ListItemType itemType, int repeatIndex, System.Web.UI.WebControls.RepeatInfo repeatInfo, System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(valuetype System.Web.UI.WebControls.ListItemType itemType, int32 repeatIndex, class System.Web.UI.WebControls.RepeatInfo repeatInfo, class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RenderItem(System.Web.UI.WebControls.ListItemType,System.Int32,System.Web.UI.WebControls.RepeatInfo,System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemType" Type="System.Web.UI.WebControls.ListItemType" />
        <Parameter Name="repeatIndex" Type="System.Int32" />
        <Parameter Name="repeatInfo" Type="System.Web.UI.WebControls.RepeatInfo" />
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="itemType">項目の型。</param>
        <param name="repeatIndex">項目のインデックス。</param>
        <param name="repeatInfo">アイテムの表示に使用する情報です。</param>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> 項目のレンダリングに使用するオブジェクト。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(System.Web.UI.WebControls.ListItemType,System.Int32,System.Web.UI.WebControls.RepeatInfo,System.Web.UI.HtmlTextWriter)" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.DataList> のインスタンスが <xref:System.Web.UI.WebControls.IRepeatInfoUser> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount">
      <MemberSignature Language="C#" Value="int System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RepeatedItemCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount" />」を参照してください。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.DataList> のインスタンスが <xref:System.Web.UI.WebControls.IRepeatInfoUser> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>レンダリングに使用される HTML タグを取得、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <value>返します、 <see cref="F:System.Web.UI.HtmlTextWriterTag.Table" /> タグ、 <see cref="P:System.Web.UI.WebControls.DataList.RepeatLayout" /> に設定されている <see cref="F:System.Web.UI.WebControls.RepeatLayout.Table" />、それ以外を返します、 <see cref="F:System.Web.UI.HtmlTextWriterTag.Span" /> タグ。 既定値は、<see cref="F:System.Web.UI.WebControls.RepeatLayout.Table" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.TagKey%2A> を決定するプロパティ、 <xref:System.Web.UI.HtmlTextWriterTag> に関連付けられている値、 <xref:System.Web.UI.WebControls.DataList> コントロールです。<xref:System.Web.UI.WebControls.DataList.TagKey%2A> プロパティは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.TrackViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ビュー ステートの変更を追跡、 <see cref="T:System.Web.UI.WebControls.DataList" /> 、コントロールの保存できるように制御 <see cref="P:System.Web.UI.Control.ViewState" /> プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.TrackViewState%2A> を開始する位置を追跡したり保存コントロールに変更をコントロールのビュー ステートの一部として開始位置をマークするメソッドをオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler UpdateCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler UpdateCommand" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.UpdateCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see langword="Update" /> 内のアイテムをクリックした、 <see cref="T:System.Web.UI.WebControls.DataList" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.DataList.UpdateCommand> イベントが発生したときに、 `Update` アイテムがクリックされたボタンをクリックします。  
  
 一般的なハンドラー、 <xref:System.Web.UI.WebControls.DataList.UpdateCommand> イベントは、データのセットを更新、 <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> プロパティを `-1` \(アイテムの選択を解除\) する、データを再バインドと、 <xref:System.Web.UI.WebControls.DataList> コントロールです。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 検証コントロールを使用すると、コントロールに入力テキストを表示する前にユーザー入力を検証します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 詳細については、次を参照してください。 [Securing Standard Controls](http://msdn.microsoft.com/ja-jp/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), 、[How to: Protect Against Script Exploits in a Web Application by Applying HTML Encoding to Strings](http://msdn.microsoft.com/ja-jp/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 、および [Introduction to Validating User Input in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)です。  
  
 イベント処理の詳細については、「[How to: Consume Events in a Web Forms Application](http://msdn.microsoft.com/ja-jp/73bf8638-c4ec-4069-b0bb-a1dc79b92e32)」を参照してください。  
  
   
  
## 例  
 指定して、コードのハンドラーを次のコード例には、 <xref:System.Web.UI.WebControls.DataList.UpdateCommand> イベントです。 選択した項目を更新することができます、 <xref:System.Web.UI.WebControls.DataList> コントロールに新しい値をユーザーが入力したときに、 `Update` \] ボタンをクリックします。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[DataListEdit\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-vb[DataListEdit\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-csharp[DataListEdit2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-vb[DataListEdit2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.DataListCommandEventHandler" />
        <altmember cref="M:System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.CancelCommand" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.DeleteCommand" />
        <altmember cref="E:System.Web.UI.WebControls.DataList.EditCommand" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandName">
      <MemberSignature Language="C#" Value="public const string UpdateCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string UpdateCommandName" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.DataList.UpdateCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表す、 <see langword="Update" /> コマンド名です。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.DataList.UpdateCommandName> を表すフィールド、 `Update` コマンド名です。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Web.UI.WebControls.DataList.SelectCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.EditCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.DeleteCommandName" />
        <altmember cref="F:System.Web.UI.WebControls.DataList.CancelCommandName" />
      </Docs>
    </Member>
  </Members>
</Type>