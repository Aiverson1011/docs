<Type Name="LinqDataSourceStatusEventArgs" FullName="System.Web.UI.WebControls.LinqDataSourceStatusEventArgs">
  <TypeSignature Language="C#" Value="public class LinqDataSourceStatusEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSourceStatusEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>データを提供、 <see cref="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />, 、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />, 、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />, 、<see cref="E:System.Web.UI.WebControls.LinqDataSource.Selected" />, 、および <see cref="E:System.Web.UI.WebControls.LinqDataSource.Updated" /> イベントです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> クラスで実行されているデータ操作の結果を調べることができるように、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールです。 A <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> のイベント ハンドラーに渡されるオブジェクト、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Selected>, 、および <xref:System.Web.UI.WebControls.LinqDataSource.Updated> のイベント、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールです。  
  
 かどうか、データ操作を正常に完了した結果のデータ オブジェクトに格納されます、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティおよび <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティは `null`です。 データ操作中に発生した例外に格納されているデータの操作に失敗した場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティおよび <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティは `null`です。 によって表される例外を処理する場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティ、設定、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> プロパティを `true` 、例外がスローされないようにします。  
  
 使用してクエリから返されるデータ レコードの合計数を取得する、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> プロパティです。  
  
   
  
## 例  
 次の例では、イベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> イベントです。 イベント ハンドラーの場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティは、 `null`, 、製品の ID は内のオブジェクトから取得、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティです。 製品 ID は、テーブルの主キーとして、データベースが設定されているため、値は不明挿入操作が完了するまでです。 例外メッセージが記録、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティと等しくない `null`します。<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> プロパティに設定し、 `true`です。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Exception)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">データ操作中に発生したエラー。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> データ操作の結果として発生した例外を使用してクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、データ操作中に例外がスローされたときに使用されます。<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティ自動的に `null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="result">データ操作によって生成されるデータを格納するオブジェクト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> データ操作からデータを含むオブジェクトを使用してクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、データの操作がエラーなしで完了したときに使用されます。`result` パラメーターには、データ操作の結果を表すオブジェクトが含まれています。<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティ自動的に `null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceStatusEventArgs (object result, int totalRowCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object result, int32 totalRowCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.#ctor(System.Object,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="result" Type="System.Object" />
        <Parameter Name="totalRowCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="result">データ操作によって生成されるデータを格納するオブジェクト。</param>
        <param name="totalRowCount">データ取得操作から返された行の数。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> クラス データ操作と返される行の番号からデータを格納するオブジェクトを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ操作中にスローされた例外を取得します。</summary>
        <value>
          <see cref="T:System.Exception" /> 場合を表すオブジェクト、例外エラーが発生しました。 それ以外の場合、 <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データ操作中に例外が発生する場合、例外は、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティです。 イベント ハンドラーを作成することができます、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Selected>, と <xref:System.Web.UI.WebControls.LinqDataSource.Updated> イベントを取得、存在する場合は、例外を通じて、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティです。  
  
   
  
## 例  
 次の例では、イベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> イベントです。 イベント ハンドラーの場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティは、 `null`, 、製品の ID は内のオブジェクトから取得、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティです。 製品 ID は、テーブルの主キーし、データベースによって設定されるため、挿入操作が完了するまで、値が不明です。 例外メッセージが記録、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティと等しくない `null`します。<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> プロパティに設定し、 `true`です。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または例外が処理されたかどうかがスローされないもう一度ことを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 例外が処理された場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベント ハンドラーを作成することができます、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Selected>, 、および <xref:System.Web.UI.WebControls.LinqDataSource.Updated> イベントをこれらの操作中に発生した例外を確認します。 例外の処理を再度スローすることは望ましくない場合は、設定、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> プロパティを `true`します。 設定しない場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> プロパティを `true`, 、コール スタック内の次のイベント ハンドラーに例外が伝達されます。  
  
   
  
## 例  
 次の例では、イベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> イベントです。 イベント ハンドラーの場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティは、 `null`, 、製品の ID は内のオブジェクトから取得、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティです。 製品 ID は、テーブルの主キーとして、データベースが設定されているため、値は不明挿入操作が完了するまでです。 例外メッセージが記録、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティと等しくない `null`します。<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> プロパティに設定し、 `true`です。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ操作の結果を表すオブジェクトを取得します。</summary>
        <value>データ操作からデータを格納するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティ値を確認するデータの操作から返されます。 データ操作の出力パラメーターを取得またはクエリから返される値を変更することができます。  
  
 格納されたデータ、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティが実行されているデータ操作の種類に依存します。 データを削除すると、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティで指定された型のオブジェクトを格納する、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティ、データ ソースから削除された元の値をします。 挿入またはデータを更新するとき、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティで指定された型のオブジェクトを格納する、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> データ ソースに保存された新しい値でのプロパティです。 データを選択すると、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティには、クエリの結果が含まれています。  
  
 データをグループ化またはで指定された型のプロパティのサブセットを選択すると、select クエリが含まれている場合、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 、プロパティ、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティには、動的に作成された型のオブジェクトが含まれています。 それ以外の場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティで指定された型のオブジェクトを格納する、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティです。  
  
   
  
## 例  
 次の例では、イベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> イベントです。 イベント ハンドラーの場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティは、 `null`, 、製品の ID は内のオブジェクトから取得、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティです。 製品 ID は、テーブルの主キーとして、データベースが設定されているため、値は不明挿入操作が完了するまでです。 例外メッセージが記録、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティと等しくない `null`します。<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.ExceptionHandled%2A> プロパティに設定し、 `true`です。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalRowCount">
      <MemberSignature Language="C#" Value="public int TotalRowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TotalRowCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得操作からのデータ セットの行の合計数を取得します。</summary>
        <value>データ取得操作で; からのデータ セット内の行の合計数場合は\-1、 <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> オブジェクトは、データ変更操作時に作成した; を有効にした場合は\-1 では、ページングをカスタマイズするには <see cref="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" /> に <see langword="true" /> を設定したり <see cref="P:System.Web.UI.DataSourceSelectArguments.RetrieveTotalRowCount" /> に <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> データ取得操作中に、データ セット内のレコードの数を取得するプロパティです。 通常、データのページを表示すると、レコードの総数を表示するには、このプロパティを取得します。  
  
 データのページングと、値、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> プロパティは、クエリによって返される行の実際の数と異なる場合があります。 これは、クエリには、データのページが必要とする行の数のみが返されるためです。  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> のイベント ハンドラーでアクセスされた場合にのみ、プロパティがクエリからのレコードの数を含む、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> イベントです。 プロパティがのイベント ハンドラーからアクセスされるとき、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, 、または <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 、イベント、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> プロパティには、\-1 が含まれています。  
  
 値、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> プロパティに依存、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> のプロパティ、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロール、および、 `AllowPaging` データ バインド コントロールのプロパティです。 次の表に、可能な値、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> プロパティです。  
  
|LinqDataSource コントロールの AutoPage プロパティ|データ バインド コントロールの AllowPaging プロパティ|TotalRowCount プロパティ|Outcome|  
|-------------------------------------------|----------------------------------------|-------------------------|-------------|  
|`true`|`true`|クエリのレコードの数。|データは自動的にページングできます。|  
|`false`|`false`|クエリのレコードの数。|データはページングされません。|  
|`true`|`false`|\-1|データはページングされません。|  
|`false`|`true`|割り当てられた値、 <xref:System.Web.UI.DataSourceSelectArguments.TotalRowCount%2A> イベントのイベント ハンドラーのプロパティ、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントです。|データは、ページングをカスタマイズしたときに指定した値に応じてページングされます。|  
  
   
  
## 例  
 次の例では、Web ページに、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロール、 <xref:System.Web.UI.WebControls.GridView> コントロール、および <xref:System.Web.UI.WebControls.Literal> コントロールです。<xref:System.Web.UI.WebControls.LinqDataSource> コントロールのイベント ハンドラーを定義する、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> イベントです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx#1)]  
  
 次の例では、対応するイベント ハンドラーのコード、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> イベントです。 値、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount%2A> にプロパティが割り当てられている、 <xref:System.Web.UI.WebControls.Literal> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/cs/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.TotalRowCount/vb/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>