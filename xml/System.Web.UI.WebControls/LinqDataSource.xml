<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ASP.NET Web ページでマークアップ テキストを通じて統合言語クエリ \(LINQ\) を使用し、データ オブジェクトのデータを取得したり変更したりできるようにします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このトピックの内容  
  
-   [はじめに](#introduction)  
  
-   [操作の順序](#order_of_operations)  
  
-   [データの並べ替え](#ordering_data)  
  
-   [データのグループ化](#grouping_data)  
  
-   [データ変更](#data_modifications)  
  
-   [実行時に値を評価します。](#evaluating_value_at_run_time)  
  
-   [ストアド プロシージャの使用](#working_with_stored_procedures)  
  
-   [宣言構文](#declarative_syntax)  
  
<a name="introduction"></a>   
## はじめに  
 統合言語クエリ \(LINQ\) は、クエリ演算子のセットを定義するクエリ構文です。NET ベースのプログラミング言語です。 データ オブジェクトには、メモリ内のデータ コレクションまたはデータベースからデータを表すオブジェクトを指定できます。 取得したり、各操作用の SQL コマンドを記述することがなく、データを変更できます。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールでは、マークアップのテキストのプロパティを設定して、ASP.NET Web ページで LINQ を使用することができます。<xref:System.Web.UI.WebControls.LinqDataSource> コントロールでは、LINQ to SQL を使用して、データ コマンドを自動的に生成します。 LINQ to SQL の詳細については、次を参照してください。 [LINQ to SQL](http://msdn.microsoft.com/ja-jp/73d13345-eece-471a-af40-4cc7a2f11655)します。  
  
 設定するメモリ内のデータ コレクションからデータを取得するときに、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> をデータ コレクションを含むクラスのプロパティです。 設定する、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティをプロパティまたはフィールドをデータ コレクションを返します。 たとえば、という名前のクラスがある `Person` という名前のプロパティを格納している `FavoriteCities` 文字列値の配列を返します。 この場合は、設定、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティを `Person` 設定と、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティを `FavoriteCities`します。  
  
 データベースのクエリを実行するときに、まず、データベースとそのテーブルを表すエンティティ クラスを作成する必要があります。 使用することができます、 [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] または SqlMetal.exe ユーティリティは、これらのクラスを生成します。 設定します、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> データベースを表すクラスにプロパティを設定し、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティをデータベース テーブルを表すプロパティにします。  
  
<a name="order_of_operations"></a>   
## 操作の順序  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは次の順序でデータ操作を適用します。  
  
1.  場所 \(データが返されるレコードの指定\)。  
  
2.  順序 \(並べ替え\) では。  
  
3.  グループ \(値は、共有データの集計レコード\) では。  
  
4.  \(データのグループ化されて並べ替え\) でグループを並べ替えます。  
  
5.  \(どのフィールドやプロパティを返すの指定\) を選択します。  
  
6.  自動ソート \(ユーザーが選択したプロパティによってデータ レコードの並べ替え\) します。  
  
7.  自動ページ \(ユーザーが選択されているデータ レコードのサブセットを取得\)。  
  
 条件を追加する、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> はクエリから返されるデータ レコードをフィルター選択するプロパティです。 場合、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティが設定されていない、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールがデータ オブジェクトからすべてのレコードを取得します。  
  
<a name="ordering_data"></a>   
## データの並べ替え  
 使用する、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティから返されたデータを並べ替えるにプロパティの名前を指定します。  
  
> [!NOTE]
>  使用すると、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを [!INCLUDE[ss2k](~/includes/ss2k-md.md)] または [!INCLUDE[ssEW](~/includes/ssew-md.md)] と <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> にプロパティが設定されている `true`, の値を指定する必要があります、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティです。 既定では、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> プロパティは `true`です。 値を代入する場合、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを含める必要がありますすべての identity 列では、クエリで返されるプロパティの一覧です。  
  
<a name="grouping_data"></a>   
## データのグループ化  
 使用する、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを指定するプロパティを使用してに同じ値を持つデータ レコードを統合します。 データをグループ化する際に含めること `Key` と `It`, にプロパティを動的に作成される、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティです。`Key` プロパティまたは複数のデータをグループ化に使用されたプロパティの値を参照します。 たとえば、という名前のプロパティをグループ化する `Category`, 、 `Key` プロパティは、内のすべての一意な値が格納されます、 `Category` プロパティです。`It` プロパティはデータのグループ内の個々 のレコードのコレクションを参照します。 反復処理することができます、 `It` プロパティをグループ化操作に統合されている個々 のレコードを取得します。 たとえば、という名前のプロパティをグループ化する `Category`, 、 `It` プロパティには内に同じ値を共有するすべての個々 のレコードが含まれています、 `Category` プロパティです。  
  
 使用する、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティをグループ化されたデータの並べ替えに使用するプロパティを指定します。 データをグループ化するときに、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティでは、グループ化されたデータ内の各レコードの並べ替え方法を指定します。  
  
 既定では、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールがデータ オブジェクトからすべてのプロパティの値を取得します。 使用する、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを使用できるプロパティのサブセットを操作するかどうかに返されるプロパティを指定します。 選択操作は、Where、後に適用される Order By、Group By 操作します。 そのため、Select 句で別名を作成する場合は、エイリアスは他の句で使用できません。  
  
<a name="data_modifications"></a>   
## データ変更  
 使用して、データの変更が有効にするかどうかを指定する、 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, 、<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, 、および <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> プロパティです。 ユーザー インターフェイスからのデータを変更するため、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、通常提供データ バインド コントロールを通じてなど、 <xref:System.Web.UI.WebControls.DetailsView> コントロールです。 設定に加えて <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, 、<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, 、または <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> に `true`, 、次の条件はデータの自動変更を有効にするために必要なもの。  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティに値を割り当てることはできません。  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティに値を割り当てることはできません。  
  
-   割り当てられているクラス、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティから派生する必要があります <xref:System.Data.Linq.DataContext>します。  
  
-   プロパティに割り当てられている、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティから派生する必要があります <xref:System.Data.Linq.Table%601>します。  
  
 2 つの方法でデータ バインド コントロールに表示するプロパティを制限することができます。 設定するか、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティのサブセットを追加することで、データ バインド コントロールのフィールドを定義できます <xref:System.Web.UI.WebControls.DataControlField> コントロールです。 ただし、設定した場合、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティには、自動更新、挿入、および削除操作は有効できないことを意味します。 使用可能なプロパティのサブセットを操作するときに、データの自動変更を有効にする場合は設定しないでください、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティです。 代わりに、データ オブジェクトからすべてのプロパティを取得し、データ バインド コントロールを使用して表示するかを管理します。 使用すると、 <xref:System.Web.UI.WebControls.DetailsView> コントロールまたは <xref:System.Web.UI.WebControls.GridView> コントロールを設定する必要も、 <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> または <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> プロパティ `false`します。 これは、データ バインド コントロールが自動的に編集し、データを削除するためのボタンを追加することを防止できます。 データ バインド コントロールに表示されていない任意の値は、ビュー ステートに格納されます。 渡すことが変更されていないデータ ソースにデータ更新の実行時。  
  
<a name="evaluating_value_at_run_time"></a>   
## 実行時に値を評価します。  
 評価する必要が値の順序を決定すると、実行時にフィルター処理、または値をグループ化するパラメーターを追加することができます、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, 、<xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, 、<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, 、または <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションです。  
  
 パラメーターを追加するには既定値を指定する場合、 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> コレクションです。  
  
 確認またはデータの操作が実行される前に、値を変更する場合は、処理、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, 、または <xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベントです。 データ操作をキャンセルするために、ユーザー入力に基づいてデータ クラスのプロパティを設定するときに発生した検証エラーを確認したりこれらのイベントを処理することもできます。  
  
 データの操作が完了した後は、値を検証するには、処理、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Selected>, 、または <xref:System.Web.UI.WebControls.LinqDataSource.Updated> イベントです。  
  
<a name="working_with_stored_procedures"></a>   
## ストアド プロシージャの使用  
 使用する、 <xref:System.Web.UI.WebControls.LinqDataSource> のイベント ハンドラーを作成することで、ストアド プロシージャからデータを取得するコントロール、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントです。 イベント ハンドラーをストアド プロシージャを表すデータ コンテキスト クラスでメソッドを呼び出すし、に、結果を設定、 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> のプロパティ、 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> オブジェクトです。 自動更新を有効にする、insert、およびデータの削除操作する場合は、メソッドから返される型がで指定されている型に一致する必要があります、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティです。 データ コンテキストのメソッドの作成の詳細については、次を参照してください。 [How to: Create DataContext Methods Mapped to Stored Procedures and Functions \(O\/R Designer\)](http://msdn.microsoft.com/ja-jp/e7ca32f1-50b3-48af-ad92-ceafd749296a)します。  
  
<a name="declarative_syntax"></a>   
## 宣言構文  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.WebControls.LinqDataSource> という名前のエンティティ クラスからデータを取得するコントロール `Products`します。 使用してエンティティ クラスが生成される可能性がありますが、 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] または SqlMetal.exe ユーティリティです。<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティに値があるレコードのみを返す、 `Price` 50 を超えるプロパティです。 A <xref:System.Web.UI.WebControls.GridView> コントロールにバインドする、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールにデータを表示します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 例を次に、 <xref:System.Web.UI.WebControls.LinqDataSource> を更新、削除、およびデータ ソースのレコードを挿入できるようにするコントロール。 A <xref:System.Web.UI.WebControls.DetailsView> コントロールにバインドする、 <xref:System.Web.UI.WebControls.LinqDataSource> を制御し、ユーザーは、データを表示および変更できます。 選択、更新、削除、またはレコードを挿入するために SQL コマンドが必要ないことに注意してください。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 次の例では、イベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> Web ページ内の値に基づいて、データ オブジェクトを設定するイベントです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 例を次に、 <xref:System.Web.UI.WebControls.LinqDataSource> であるコントロールをグループに 2 つの列で構成されています。`Key` プロパティを 2 つのプロパティを持つオブジェクトを参照して `ProductCategory` と `Color`です。 によって表されるオブジェクト `It` 名前が変更された \(別名\) が、 `Products`です。 名前が変更された `Products` オブジェクトには、グループ内の個々 のレコードのコレクションが含まれています。 各インスタンスのすべての列には、 `Products` テーブルです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 次の例では 2 つ <xref:System.Web.UI.WebControls.ListView> からデータを表示するコントロールを <xref:System.Web.UI.WebControls.LinqDataSource> 前の例で使用します。 1 つ <xref:System.Web.UI.WebControls.ListView> コントロールは、グループ化されたデータと、もう一方が表示されます。 <xref:System.Web.UI.WebControls.ListView> コントロールには、そのグループに属する製品の個々 の名前が表示されます。 入れ子になったデータ バインド コントロールの <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> にプロパティが設定されている `Products`, のエイリアスである、 `It` オブジェクトです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールは、Order By 句の値に基づいて動的に作成、 <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" /> コレクションです。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールは、Order By 句を作成しない場合は、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定すると、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> プロパティを `true`, 、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロール内の値に基づいている Order By 句を動的に作成する、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションです。<xref:System.Web.UI.WebControls.LinqDataSource> コントロールがデータを並べ替えるとき、最初のパラメーターと、各追加パラメーターのデータをさらに並べ替えます。 含むパラメーター `null` または空の値は、Order By 句に含まれません。  
  
 設定しない、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティと、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> に設定されている `true`, パーサーが Order By 句を動的に作成されるため、します。<xref:System.Web.UI.WebControls.LinqDataSource> 場合、制御が例外をスロー、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> に設定されている `true` と <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティの値が割り当てられます。  
  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 設定 `true`します。 パラメーターが含まれている、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> から注文プロパティに基づいてデータの名前をユーザー コレクションを選択、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールが Where を動的に作成句で定義された値に基づいた、 <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> コレクションです。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールは、Where 生成句。 そうしないと、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定すると、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティを `true`, 、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールが Where を動的に作成句のパラメーターから、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションです。 追加する各パラメーター、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションが必要です、 <xref:System.Web.UI.WebControls.Parameter.Name%2A> プロパティが照会されるデータ オブジェクトのプロパティに一致する値に設定します。 自動的に生成された句はどこで確認するかどうかで指定された値、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクション データ オブジェクトに一致するプロパティの値に等しい。 1 つ以上のパラメーターを指定する場合、パラメーターにリンク論理 `AND` 操作します。 含むパラメーター `null` Where には、空の値は含まれていない、または句。  
  
 自動的に生成された <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 句の等価性のみをテストし、のみを持つパラメーターをリンクすることができます、 `AND` 操作します。 設定されていない、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティを `true` 等しいかどうかをテストしないその条件を追加する必要がある場合、または関係を持つパラメーターが必要な場合、 `OR` 操作します。 設定して、これらのタスクを行うことができます、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティを `false` 内のプレース ホルダーを追加して、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 内の各パラメーターのプロパティ、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションです。<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティには、各プレース ホルダーの名前を付ける、@ 記号です。  
  
 設定しない、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティと、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティは、 `true`, 、パーサーは、Where を動的に作成されるため、句。<xref:System.Web.UI.WebControls.LinqDataSource> 場合、制御が例外をスロー、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティは `true` と <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティの値が割り当てられます。  
  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> 設定 `true`します。 A <xref:System.Web.UI.WebControls.GridView> コントロールにバインドする、 <xref:System.Web.UI.WebControls.LinqDataSource> クエリから返されるデータを表示します。 A <xref:System.Web.UI.WebControls.DropDownList> コントロールが含まれるは 3 つの値が設定されます。 パラメーターが含まれている、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> に設定する名前を持つコレクション `Category,` データ オブジェクトのプロパティのいずれかに一致します。 その <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> の ID に設定されて、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。<xref:System.Web.UI.WebControls.LinqDataSource> コントロールが自動的に作成、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> \] を選択した値に基づいてレコードをフィルターするプロパティ、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。 クエリには、レコードが返されますが `Category` のユーザーが選択した値と一致するプロパティ、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールは実行時に、データのセクションで構成のナビゲーションをサポートします。</summary>
        <value>
          <see langword="true" /> ユーザーがそのようなデータをページ移動する場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> プロパティを `true` でページングを有効にする、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールです。 ページングのインターフェイスを提供するデータ バインド コントロールを接続してデータをページにユーザーを有効にする、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールです。 ときに、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> にプロパティが設定されている `true`, 、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールをデータ バインド コントロール内の 1 つのページのための十分なレコードだけを取得します。 使用して、 <xref:System.Linq.Enumerable.Skip%2A> と <xref:System.Linq.Enumerable.Take%2A> を現在のページのレコードを取得するメソッドです。  
  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> プロパティに設定 `true` と <xref:System.Web.UI.WebControls.GridView> コントロールにバインドされている、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールです。<xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> のプロパティ、 <xref:System.Web.UI.WebControls.GridView> に設定されているコントロール `true` により、データをユーザー\] ページのインターフェイスを提供します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールは実行時に、データの並べ替えをサポートします。</summary>
        <value>
          <see langword="true" /> ユーザーがそのようなデータを並べ替える場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、データを並べ替えるための 2 つのアプローチをサポートしています。 使用することができます、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> プロパティは実行時の並べ替えを有効にするかを設定できる、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> デザイン時の並べ替えを定義するプロパティです。  
  
 設定、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> プロパティを `true` で並べ替えを有効に、 <xref:System.Web.UI.WebControls.LinqDataSource> データ バインド コントロールから並べ替え式に基づいているコントロール。 データ バインド コントロールは、ユーザーが並べ替えに使用するプロパティを実行時に選択できるようにするインターフェイスを提供します。  
  
 設定してデータが返される順序をプログラムで設定したり、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティまたはプロパティの並べ替えに使用するプロパティです。 ときに、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティがプロパティに設定され、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> プロパティは、 `true`, で式の後に、データ バインド コントロールから並べ替え式が適用される、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティです。 そのため、最終的なデータの並べ替えを行うかを指定します。  
  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> プロパティに設定 `true` と <xref:System.Web.UI.WebControls.GridView> コントロールにバインドされている、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールです。<xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> のプロパティ、 <xref:System.Web.UI.WebControls.GridView> に設定されているコントロール `true` ユーザーがデータを並べ替えるできるインターフェイスを提供します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテキスト型のオブジェクトのインスタンスを作成した後に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> コンテキスト型のオブジェクトを確認またはオブジェクトの作成中に発生する例外を確認するイベントです。 コンテキストの種類のオブジェクトを取得する、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> のプロパティ、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> このイベントに関連付けられているオブジェクト。 データの操作中に発生した例外を取得する、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティです。  
  
 コンテキスト型のオブジェクトでは、select、update、insert、および削除操作中に作成され、要求全体で再利用します。  
  
 ときに、イベントが発生しない 1 つの時間があります。 これは、プログラムで設定する場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティ中にオブジェクトを <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントです。 追加の条件は、元のいずれかの値をビュー ステートまたは内のオブジェクトに格納する必要はありません、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティを実装して、 <xref:System.Data.Linq.ITable> インターフェイスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテキスト型のオブジェクトのインスタンスが作成される前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールで指定されている型のインスタンスを作成、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティです。<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、オブジェクトのインスタンスを作成するデータ コンテキスト オブジェクトの既定のコンス トラクターを呼び出します。 既定以外のコンス トラクターを使用する必要があるかに指定されているからとは異なるオブジェクトを作成する必要がある可能性は、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティです。 その場合は、処理する必要があります、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> イベント、データ コンテキスト オブジェクトを手動で作成します。  
  
 コンテキスト型のオブジェクトは、select、update、insert、および削除操作中に作成されます。  
  
 ときに、イベントが発生しない 1 つの時間があります。 これは、プログラムで設定する場合、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティ用のイベント ハンドラー内のオブジェクトを <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントです。 追加の条件は、元のいずれかの値をビュー ステートまたは内のオブジェクトに格納する必要はありません、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> プロパティを実装して、 <xref:System.Data.Linq.ITable> インターフェイスです。  
  
   
  
## 例  
 次の例では、中に既定以外のコンス トラクターを使用して、データ コンテキスト オブジェクトを作成する方法、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> イベントです。 オブジェクトを代入して、 <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> プロパティです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテキスト型のオブジェクトを破棄する前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理する、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> イベント オブジェクトを手動で破棄するか、クリーンアップを実行、オブジェクトが破棄される前に、オブジェクトに固有であります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはプロパティの値が、取得するデータを含む型の名前を設定します。</summary>
        <value>データを取得するクラスの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用すると、 <xref:System.Web.UI.WebControls.LinqDataSource> 、メモリ内のデータ コレクションまたはデータベースからデータを取得するコントロールを 2 つのプロパティを指定する必要があります。 最初は、データ ソースを表すデータ コンテキスト クラスです。 2 つ目は、データを含むデータ コンテキスト クラスのプロパティです。 設定する、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティ データ コンテキスト クラスの名前を設定、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティ データを含むデータ収集をします。  
  
 たとえば、データベースからデータを取得するときに設定、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティをデータベースを表すクラスの名前にします。 設定も、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティをデータベースにテーブルを表すプロパティにします。 データベースからクラスを生成する、 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] または SqlMetal.exe ユーティリティを自動的にこれらのクラスを生成します。  
  
 配列などのメモリ内のデータ コレクションからデータを取得する場合、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティ配列プロパティを含むクラスの名前にします。 設定し、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティを配列を取得するプロパティにします。  
  
 自動更新を有効にする挿入、または削除操作を <xref:System.Web.UI.WebControls.LinqDataSource> に割り当てられているクラスを制御する、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティから派生する必要があります <xref:System.Data.Linq.DataContext>します。 さらに、プロパティは割り当て、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティから派生する必要があります <xref:System.Data.Linq.Table%601>します。 クラスの任意の型の名前を割り当てる場合、いない必要がある自動更新を有効に挿入、または削除操作、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティです。  
  
 クラスのインスタンスからデータを選択する方法については、次を参照してください。、 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> プロパティです。  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> を文字列の配列を含むクラスのプロパティです。 クラスにプロパティを設定する方法も示しています \(によって生成された、 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]\) を表すデータベースです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 という名前のクラス `ExampleDataContext` ことを表しますデータベース テーブルに表示されていない次の例です。 この例を実行するには、名前付き Example.dbml テーブルをドラッグして、上にムービーをという名前の LINQ に SQL クラスを追加してこのクラスを作成する必要があります、 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]です。 という名前のクラス `ExampleDataContext` という名前のプロパティと `Movies` が生成されます。  
  
 次の例は、という名前のクラスを示しています。 `MovieLibrary` で参照されている、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クエリ可能なビューを返します。</summary>
        <returns>クエリ可能なビューです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを作成、 <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" /> このコントロールに関連付けられているクラス。</summary>
        <returns>データ バインド コントロールのインターフェイスとして機能するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 カスタム ビューを用意するには、派生クラスでこのメソッドをオーバーライドすることができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">削除するレコードの行キー値。</param>
        <param name="oldValues">データの競合を検出するために評価される行の値。</param>
        <summary>削除操作を実行します。</summary>
        <returns>削除操作によって影響を受けたレコードの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常を呼び出す必要はありません、 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> コードからメソッドです。 使用すると、 <xref:System.Web.UI.WebControls.LinqDataSource> データ バインド コントロールをデータ バインド コントロールを持つコントロールが自動的に呼び出さ、 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> メソッドは、ユーザーがレコードを削除する操作とします。 明示的に呼び出す、 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> メソッドはデータを削除するための独自のプロセスを作成するとします。 たとえば、呼び出す、 <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> データ バインド コントロールの外部イベントに基づいて、このメソッドは、レコードを削除するとします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>削除操作が完了すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> イベントの削除操作から例外をキャッチする操作が完了した後は、出力パラメーターを確認したりします。 出力パラメーターを取得する、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> イベント ハンドラーに渡されるオブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このプロパティは使用されません、 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> クラスです。</summary>
        <value>パラメーターのコレクション。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>削除操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> を削除する、削除操作の前に値を変更または削除操作をキャンセルするデータ クラスからのデータの検証エラーを調べるオブジェクトを検証するイベントです。<xref:System.Web.UI.WebControls.LinqDataSource> パスを制御、 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> オブジェクトのイベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> イベントです。<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> オブジェクトが削除され、削除操作をキャンセルすることができるデータが含まれています。 データ クラスをスローする場合、 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> 、例外、 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> オブジェクトにはで、その例外が含まれています、 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> プロパティです。  
  
 イベントのイベント ハンドラーで、例外がスローされます、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> イベント、そのイベント ハンドラーで例外を処理する必要があります。 例外のイベント ハンドラーに渡されません、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> イベント \(を通じて、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> のプロパティ、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクト\)。<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティには、後でスローされる例外のみが含まれています。、 <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> イベントです。  
  
   
  
## 例  
 次の例では、イベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> イベントです。 コードのプロパティに基づいて削除操作のキャンセル、 <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> プロパティと、Web ページからの値。 例では、ときに、 `OnSale` にプロパティが設定されている `true`, 、ユーザーを選択する必要があります、 <xref:System.Web.UI.WebControls.CheckBox> コントロールをレコードが削除されることを確認します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを通じてデータ レコードを削除できるかどうかを示す値を設定、 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールです。</summary>
        <value>
          <see langword="true" /> 自動削除の各操作が有効な場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定、 <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> プロパティを `true` を通じてデータ レコードを削除できるようにする場合、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールです。<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> は `true`, 、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールでは、LINQ to SQL を使用して、自動的にデータを削除するコマンドを作成します。 ユーザーなどを削除するレコードを選択できるインターフェイスを含める必要があります、 <xref:System.Web.UI.WebControls.DetailsView> コントロールです。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは自動削除の操作をサポートしていませんときに、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティまたは <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを設定します。 その場合は、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、削除操作を試みた場合に例外をスローします。  
  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.WebControls.LinqDataSource> を持つコントロール <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 設定 `true`します。 A <xref:System.Web.UI.WebControls.DetailsView> コントロールは、データが表示され、ユーザーがデータ レコードを削除できるボタンを作成します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを通じてデータ レコードを挿入できるかどうかを示す値を設定、 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールです。</summary>
        <value>
          <see langword="true" /> 自動挿入操作が有効な場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定、 <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> プロパティを `true` から新しいデータ レコードを挿入できるようにする場合、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールです。<xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> は `true`, 、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールでは、LINQ to SQL を使用して、自動的にデータを挿入するコマンドを作成します。 など、新しいレコードを挿入できるようにインターフェイスを含める必要があります、 <xref:System.Web.UI.WebControls.DetailsView> コントロールです。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールが自動挿入操作をサポートしないときに、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティまたは <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを設定します。 その場合は、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、挿入操作を試みた場合に例外をスローします。  
  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.WebControls.LinqDataSource> を持つコントロール <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> 設定 `true`します。 A <xref:System.Web.UI.WebControls.DetailsView> コントロールがデータに表示され、ユーザーが作成し、新しいレコードを保存、モードを挿入するコントロールを切り替えるボタンが表示されます。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ コンテキスト オブジェクトへの変更を追跡するかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 変更、データ コンテキスト オブジェクトを管理している場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> プロパティは、SQL に LINQ データ コンテキスト オブジェクトからデータを選択した場合のみ使用します。  
  
 読み取り専用データをやり取りすると、設定、 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> プロパティを `false` が変更されたかどうかを判断するデータをキャッシュしないためパフォーマンスが向上します。 ただし、クエリの遅延実行も無効にします。 このプロパティに設定する必要があります `true` クエリの遅延実行を使用する場合。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定でデータ レコードを更新できるかどうかを示す値、 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールです。</summary>
        <value>
          <see langword="true" /> 自動更新操作が有効な場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定、 <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> プロパティを `true` を使用してデータ レコードを更新できるようにする場合、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールです。<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> は `true`, 、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールでは、LINQ to SQL を使用して、自動的にデータを更新するコマンドを作成します。 など、レコードを更新できるようにインターフェイスを含める必要があります、 <xref:System.Web.UI.WebControls.DetailsView> コントロールです。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールが自動更新の操作をサポートしていませんときに、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティまたは <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを設定します。 その場合は、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、更新操作を試みた場合に例外をスローします。  
  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.WebControls.LinqDataSource> を持つコントロール <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> 設定 `true`します。 A <xref:System.Web.UI.WebControls.DetailsView> コントロールは、データが表示され、ユーザーがデータ レコードを更新できるボタンを作成します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または取得したデータをグループ化するために使用するプロパティを指定する値を設定します。</summary>
        <value>Group By 句の作成に使用される文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを同じ値を持つデータ レコードを統合するために使用するプロパティを指定します。 たとえば、設定した場合、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを `Name`, が同じクエリ内のすべてのレコード `Name` プロパティの値が 1 つの統合されたレコードとして返されます。  
  
 1 つ以上のプロパティを割り当てることができます、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティ内のすべてのプロパティを囲んで、 `new` 関数とコンマを使用して各プロパティを分離することです。 で、プロパティでグループ化に `Name` し `Category`, 、設定、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを `new(Name, Category)`します。  
  
 グループ化に使用されるプロパティの値がという名前の生成されたプロパティによって返される `Key`です。 組み込んだり、 `Key` プロパティに、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティをグループ化された値を取得します。 設定することができます、 `Key` プロパティを使用して別名を `As` キーワード、ですが、別名を使用する必要はありません。 たとえばに設定し、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティという名前のプロパティを `Category`します。 統合の値を取得する、 `Category` プロパティを設定して、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを `new(Key As ProductCategory)`します。  
  
 含めることによって、グループ内の個々 のレコードにアクセスすることができます、 `It` プロパティに、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティです。`It` プロパティには、\[グループ化されたプロパティの値を共有するレコードのコレクションが含まれています。 反復処理することができます、 `It` 個々 のレコードを取得するプロパティです。  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティは多くの場合、集計メソッドで使用します。 次の集計メソッドを使用することができます。  
  
-   `Count()`  
  
-   `Average(` *列* `)`  
  
-   `Sum(` *列* `)`  
  
-   `Max(` *列* `)`  
  
-   `Min(` *列* `)`  
  
-   `Where(` *条件* `)`  
  
-   `Any()`  
  
-   `All(` *条件* `)`  
  
 詳細については、次を参照してください。 [NIB: LinqDataSource Web サーバー コントロールの概要](http://msdn.microsoft.com/ja-jp/104cfc3f-7385-47d3-8a51-830dfa791136) と [方法: グループと LinqDataSource コントロールを使用してデータを集計](http://msdn.microsoft.com/ja-jp/b922cf69-251f-4158-b405-ea960993a1af)します。  
  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.WebControls.LinqDataSource> という名前のプロパティで返されたデータをグループ化コントロール `Category`します。 共有の値を返し、グループ化されたレコードの平均価格を計算します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 例を次に、 <xref:System.Web.UI.WebControls.LinqDataSource> であるコントロールをグループに 2 つの列で構成されています。`Key` プロパティを 2 つのプロパティを持つオブジェクトを参照して `ProductCategory` と `Color`です。 によって表されるオブジェクト `It` 名前が変更された `Products`します。 名前が変更された `Products` オブジェクトには、グループ内の個々 のレコードのコレクションが含まれ、各インスタンスには、Products テーブルのすべての列が含まれています。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 次の例では 2 つ <xref:System.Web.UI.WebControls.ListView> からデータを表示するコントロールを <xref:System.Web.UI.WebControls.LinqDataSource> 前の例で使用します。 1 つ <xref:System.Web.UI.WebControls.ListView> コントロールは、グループ化されたデータと、もう一方が表示されます。 <xref:System.Web.UI.WebControls.ListView> コントロールには、そのグループに属する製品の個々 の名前が表示されます。 入れ子になったデータ バインド コントロールの <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> にプロパティが設定されている `Products`, のエイリアスである、 `It` オブジェクトです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Group By 句の作成に使用されるパラメーターのコレクションを取得します。</summary>
        <value>Group By 句の作成に使用されるパラメーターです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロール内のパラメーターを使用して、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> 実行時に、Group By 句を作成するコレクション。 通常は、使用しない、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> コレクション データをグループ化します。 代わりに、使用、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティです。 使用する、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> コレクションのみと Group By 句内の値は、実行時に設定する必要があり、その値がプロパティ名ではありません。 たとえば、使用して、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> コレクション データをグループ化するかどうかに基づいて、 `LastName` データ レコードのプロパティが、ユーザーが指定した値に等しい。  
  
 プロパティを基にデータをグループ化して、そのプロパティは実行時に設定する必要はない場合、は、グループ化のプロパティを定義できます、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティです。 たとえば、データベース テーブルから値を返すことでグループ化された `LastName`, 、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> パラメーターを指定せずに"LastName"をします。 プロパティによって動的にデータをグループ化する場合は、イベント ハンドラーを作成、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントをカスタマイズして、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 必要に応じてプロパティです。  
  
 内のパラメーターの値としてプロパティの名前を割り当てることはできません、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> コレクションです。 パラメーターを追加する、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> する条件を追加する場合に、コレクション、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティを実行時に設定する必要があります。  
  
 値を設定する、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> コレクション、各パラメーターに名前を割り当てるして内のプレース ホルダーを追加、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> パラメーターをという名前のプロパティです。 各パラメーターの名前を付ける、Group By 句で、@ 記号です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">データ ソースに挿入される行の値。</param>
        <summary>挿入操作を実行します。</summary>
        <returns>挿入操作の影響を受ける行の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常を呼び出す必要はありません、 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> コードからメソッドです。 データ バインド コントロールが自動的に呼び出さ、 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> メソッドは、ユーザーが新しいレコードを挿入する操作とします。 明示的に呼び出す、 <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> メソッドはデータを挿入するための独自のプロセスを作成するとします。  
  
   
  
## 例  
 次の例では、プログラムを使用して、ユーザーがボタンをクリックした後、新しいレコードをデータ ソースに挿入する方法を示します。 このコードでは、 <xref:System.Collections.Specialized.ListDictionary> 既定値を格納しているオブジェクトの値を <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> メソッドです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 次の例では、前の例のマークアップを示します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>挿入操作が完了すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 挿入操作から例外をキャッチする場合、または挿入操作が完了した後に、値を確認するイベントです。 新しい値を取得することができます、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> イベント ハンドラーに渡されるオブジェクト。 たとえば、使用、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 新しいデータのレコードのデータベースによって生成された id プロパティを取得するオブジェクト。  
  
   
  
## 例  
 次の例では、イベント ハンドラーを作成する方法、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> 例外を確認し、新しいレコードの id プロパティを取得するイベントです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>挿入操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> を挿入する、insert 操作の前に値を変更または挿入操作をキャンセルするデータ クラスからのデータの検証エラーを調べるオブジェクトを検証するイベントです。<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> このイベントにデータ ソースに挿入する新しいオブジェクトが含まれており、イベント ハンドラーに渡されるオブジェクト。  
  
 挿入操作中に、検証エラーが発生した場合、 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> オブジェクトには、データ クラスによってスローされる検証例外が含まれています。 挿入する値がデータ クラスのプロパティの型と一致しない場合、またはカスタムの検証チェックが合格しなかった場合、検証エラーが発生します。 イベントのイベント ハンドラーで、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> イベント、検証例外を取得し、適切なアクションを実行することができます。  
  
 イベントのイベント ハンドラーで、例外がスローされます、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> イベント、そのイベント ハンドラーで例外を処理する必要があります。 例外のイベント ハンドラーに渡されません、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> イベント \(を通じて、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> のプロパティ、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクト\)。<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティには、後でスローされる例外のみが含まれています。、 <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> イベントです。  
  
   
  
## 例  
 次の例では、イベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 挿入操作の前にデータを変更するイベントです。 オブジェクトから、 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> プロパティがという名前の型にキャスト `Product`します。`DateModified` のプロパティ、 `Product` オブジェクトが現在の日付と時刻に設定します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 次の例では、イベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 検証例外を取得するイベントです。  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
 \[C\#\]  
  
```  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 前の例では、検証例外を取得します。 値がプロパティの型と一致しない場合、例外をスローする可能性があります。 次の例のようなカスタマイズされたチェックからスローされる可能性があります。`OnAgeChanging` ことを確認する方法の数、 `Age` プロパティが負でないです。  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>挿入操作中に使用されるパラメーターのコレクションを取得します。</summary>
        <value>挿入操作中に使用されるパラメーターです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 挿入操作に必要な値が渡される通常、 <xref:System.Web.UI.WebControls.LinqDataSource> データ バインド コントロールによって制御します。 Insert、既定値を提供する場合に値を定義や空の値に変換するかどうかを指定する `null`です。 ユーザーが値を指定しない場合に行う必要がある値にのみ、挿入されるすべての値にパラメーターを用意する必要はありません。  
  
 指定した値、 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> コレクションは、データ ソースで定義されているが、データ コントロールにバインドされていない各フィールドに対してのみ使用します。 たとえば、データベース テーブルが列の名前、アドレス、および郵便番号、名前が付けられるですが、 <xref:System.Web.UI.WebControls.ListView> 名前と住所のフィールドにのみ、テーブルにバインドされるコントロールがバインドされています。 値、 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> コレクションは、PostalCode フィールドに対してのみ使用されます。 これらは、名前と住所のフィールドの使用されません。 これは、それらのフィールドの値が入力されていない場合でも当てはまります。 かどうかは、データ バインド コントロールによって、データ内のすべてのフィールドのソース フィールドから値のない、 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> コレクションを使用します。  
  
   
  
## 例  
 例を次に、 <xref:System.Web.UI.WebControls.LinqDataSource> で既定値を提供するパラメーターを持つコントロール、 <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> コレクションです。 値が、ユーザーに提供されていない場合、 `Category` プロパティには、パラメーターによって提供される既定値は、データベースに保存されます。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベントのデータ。</param>
        <summary>初期化、 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" /> オブジェクト。</param>
        <summary>
          <see cref="E:System.Web.UI.Control.Unload" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を取得したデータを並べ替えるために使用されるフィールドを指定する値。</summary>
        <value>Order By 句の作成に使用される文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティから返されるデータの並べ替えに使用するプロパティを指定します。 データを並べ替えるためのプロパティは、元のデータ ソースに存在する必要がありますに含まれるがない、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティです。 スペースを追加して `Ascending`, 、`ASC`, 、`Descending`, 、または `DESC` プロパティに、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 順序付けられたデータを返す方法を指定するために文字列。  
  
 1 つ以上のプロパティを指定することができます、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> コンマを使用して各プロパティを分割することによりプロパティです。 で order by のという名前のプロパティに `LastName` と `FirstName`, 、設定、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 「姓, 名」にプロパティです。  
  
> [!NOTE]
>  使用すると、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールを [!INCLUDE[ss2k](~/includes/ss2k-md.md)] または [!INCLUDE[ssEW](~/includes/ssew-md.md)] と <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> にプロパティが設定されている `true`, の値を指定する必要があります、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティです。 既定では、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> プロパティは `true`です。 値を代入する場合、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを含める必要がありますすべての identity 列では、クエリで返されるプロパティの一覧です。  
  
 場合、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> にプロパティが設定されている `true`, 、データ バインド コントロールは、並べ替え式を渡すことができます、 <xref:System.Web.UI.WebControls.LinqDataSource> 実行時にコントロールできます。<xref:System.Web.UI.WebControls.LinqDataSource> の適用後に、コントロールは、データ バインド コントロールから並べ替え式を適用は、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティです。 そのため、データは、データ バインド コントロールから、並べ替え式に従って返されます。  
  
   
  
## 例  
 次の例では、データを返すの値に基づいて順序を逆に、 `Category` プロパティです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Order By 句の作成に使用されるパラメーターのコレクションを取得します。</summary>
        <value>Order By 句を作成するために使用されるパラメーターです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロール内のパラメーターを使用して、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> 実行時に、Order By 句を作成するコレクション。 一般に設定する、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> プロパティを `true` へのパラメーターを追加すると、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションです。 ときに、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> にプロパティが設定されている `true`, 、内の各パラメーター、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションの要素を追加で指定したシーケンス内の Order By 句に、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションです。 ときに、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> プロパティは、 `true`, 、パラメーターを順番に適用し、プレース ホルダーには一致していませんので名前を指定する必要はありません。  
  
 使用していない場合は、Order By 句の実行時に値を設定するのにはない、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションです。 内のデータの並べ替えに使用するフィールドを定義する、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> プロパティです。 たとえば、データベース テーブルから値を返す順に並べ替えられた `LastName`, 、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> パラメーターを指定せずに"LastName"をします。  
  
 パラメーターを設定することができます、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクション内のプレース ホルダーをパラメーターと一致し、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> ですが、この方法が制限されているアプリケーションです。 この方法では、パラメーターを使用すると、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> コレクションは、列名を表すことはできません。 パラメーターを値に設定し、その値をプロパティ内の値を比較できます。 たとえば、プロパティの値は、パラメーターによって表される実行時の値より小さいかどうかに基づきデータを注文できます。  
  
   
  
## 例  
 次の例は、<xref:System.Web.UI.WebControls.LinqDataSource> プロパティが <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> に設定された `true` コントロールを示したものです。 パラメーターが含まれている、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> から注文プロパティに基づいてデータの名前をユーザー コレクションを選択、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはグループ化されたデータの順序付けに使用されるフィールドを設定します。</summary>
        <value>グループの Order By 句の作成に使用される文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティ データのグループの並べ替え方法を指定します。 たとえば、グループ化できます、 `CategoryID` プロパティとカテゴリ ID ごとの平均値でグループ化、並べ替え、 `Price` プロパティです。  
  
 設定することができます、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティは、データをグループ化しています。 設定した場合、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティが設定されていない、 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> プロパティには、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは例外をスローします。  
  
 データの並べ替えに使用されているプロパティは、データをグループに使用されるプロパティまたはグループ化されたデータの集計関数の結果のいずれかにする必要があります。 データの並べ替え方法を指定して追加できますスペース"Ascending"、"ASC"、"Descending"または"DESC"の文字列内のプロパティ名に、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 文字列。  
  
 1 つ以上のプロパティを指定する、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティです。 コンマを使用して、各プロパティを区切ります。  
  
   
  
## 例  
 次の例では、2 つのプロパティを使用してデータをグループ化方法とそれらのプロパティのいずれかを使用してグループ化されたデータを並べ替える方法を示します。 という名前のテーブルからデータ `Products` という名前のプロパティを使用してグループ化 `CategoryID` と `Discontinued`です。 グループ化されたデータを並べ替えて、 `CategoryID` プロパティです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 次の例では、集計関数の結果に基づいて並べ替える方法と、プロパティを使用して、データをグループ化する方法を示します。 データ、 `Products` を使用してテーブルをグループ化、 `CategoryID` プロパティです。 平均値に基づいて並べ替えられている、 `UnitPrice` 各グループ内のプロパティです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>グループの Order By 句の作成に使用されるパラメーターのコレクションを取得します。</summary>
        <value>グループの Order By 句の作成に使用されるパラメーターです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロール内のパラメーターを使用して、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> 実行時に、グループの Order By 句を作成するコレクション。  
  
 値を追加する、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> コレクション グループの Order By 句の実行時に値を設定する必要がある場合にのみです。 使用して、データの並べ替えに使用されるフィールドを定義する、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティです。  
  
 パラメーターを設定することができます、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> コレクション内のプレース ホルダーをパラメーターと一致し、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> プロパティです。 ただし、この方法では、パラメーターを使用する、 <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> コレクションは、列名を表すことはできません。 これらの値を表す必要があります。 パラメーターを値に設定し、その値をプロパティを比較できます。 たとえば、プロパティの値は、パラメーターによって表される実行時の値より小さいかどうかに基づきデータを注文できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはプロパティと、取得したデータに含まれている計算される値を設定します。</summary>
        <value>Select 句の作成に使用される文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定しない場合、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 、プロパティ、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールがデータ オブジェクトからすべてのプロパティ \(データ列\) を取得します。 使用する、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティ、オブジェクトからプロパティのサブセットを取得または、データを取得するときに、新しい値を計算します。  
  
 設定によって取得するプロパティを指定する、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティで返されたデータを追加するプロパティの名前にします。  
  
 データ オブジェクトからプロパティのサブセットを取得する場合、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールで指定したプロパティのみを含むクラスを動的に作成する、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティです。 クラスは、データ オブジェクトにプロパティではないプロパティを計算する場合は、動的に作成されるもします。 このような場合、クエリから返されるオブジェクトはで指定されているクラスのインスタンス、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティです。 代わりに、使用する必要があります、 `new` メソッドで、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを新しいクラスがクエリから返されたことを示します。 例については、のみを返す、 `FirstName` と `LastName` プロパティを格納するオブジェクトから複数のこれらのプロパティを設定、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを `new(FirstName, LastName)`します。<xref:System.Web.UI.WebControls.LinqDataSource> コントロールはで指定した新しいクラスを動的に作成、 `new` メソッドです。  
  
 使用することができます、 `As` にエイリアスを選択した値に割り当てるキーワード。 別名を割り当てた場合は、エイリアス化されたプロパティを含める必要があります、 `new` メソッドです。 任意のデータ バインド コントロールからの結果にバインドする、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、別名でプロパティを参照する必要があります。 設定する場合など、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティを `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, 、データ バインド コントロールが 2 つのプロパティにアクセスできる `SalesRegion` と `RevenueThousands`です。  
  
 使用する、 `new` で機能、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 条件に従ってプロパティが次の表にリストされています。  
  
|選択|新規のを使用します。|例|  
|--------|----------------|-------|  
|1 つのプロパティです。|`new` 必要ありません。|`Select="Category"`|  
|複数のプロパティです。|`new` 必要です。|`Select="new(Cateogry, Name)"`|  
|別名を持つ複数のプロパティまたは 1 です。|`new` 必要です。|`Select="new(Category As CategoryGroup)"`|  
  
 データの自動変更を有効にする、データ オブジェクトからのすべてのプロパティを表示したくない場合は設定しないでください、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティです。 代わりに、データ バインド コントロールを通じて表示を管理します。 使用すると、 <xref:System.Web.UI.WebControls.DetailsView> コントロールまたは <xref:System.Web.UI.WebControls.GridView> コントロールを設定する必要も、 <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> または <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> プロパティを `false`します。 データ バインド コントロールに表示されていない任意の値は、ビュー ステートに格納されます。 渡すことが変更されていないデータ ソースにデータ更新の実行時。  
  
 クエリでデータをグループ化する場合の集計メソッドを含めることができます、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティです。 次の集計メソッドを使用することができます。  
  
-   `Count()`  
  
-   `Average(` *列* `)`  
  
-   `Sum(` *列* `)`  
  
-   `Max(` *列* `)`  
  
-   `Min(` *列* `)`  
  
-   `Where(` *条件* `)`  
  
-   `Any()`  
  
-   `All(` *条件* `)`  
  
 詳細については、次を参照してください。 [NIB: LinqDataSource Web サーバー コントロールの概要](http://msdn.microsoft.com/ja-jp/104cfc3f-7385-47d3-8a51-830dfa791136) と [方法: グループと LinqDataSource コントロールを使用してデータを集計](http://msdn.microsoft.com/ja-jp/b922cf69-251f-4158-b405-ea960993a1af)します。  
  
 データをグループ化する際に含めること `Key` と `It`, にプロパティを動的に作成される、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティです。`Key` プロパティまたは複数のデータをグループ化に使用されたプロパティの値を参照します。 という名前のプロパティをグループ化する場合など `Category`, 、 `Key` プロパティは、各一意の値が格納されます、 `Category` プロパティです。`It` プロパティはデータのグループ内の個々 のレコードのコレクションを参照します。 反復処理することができます、 `It` プロパティをグループ化操作に統合されている個々 のレコードを取得します。 たとえば、という名前のプロパティをグループ化する `Category`, 、 `It` プロパティには内に同じ値を共有するすべての個々 のレコードが含まれています、 `Category` プロパティです。  
  
 含める場合、 `It` のキーワード、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティ データをグループ化するのエイリアスを割り当てる必要があります、 `It` キーワードです。<xref:System.Web.UI.WebControls.LinqDataSource> 場合に制御が例外をスロー `It` エイリアスはありません。 エイリアスを割り当てることができます、 `Key` キーワードが、これは必要ありません。  
  
   
  
## 例  
 次の例を設定する方法を示しています、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティをデータ オブジェクトのプロパティのサブセットです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 次の例では、グループ化されたレコードの平均値を取得するデータをグループ化に使用されているプロパティの値を取得する方法を示します。`Key` キーワードには、データをグループ化するために使用されているプロパティが含まれています。 この例では `Key` から共有の値を含む、 `ProductCategory` プロパティです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得操作が完了すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> イベント データの取得操作から例外をキャッチする取得操作が完了した後に、データ オブジェクトを確認したりします。 オブジェクトは、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> イベント ハンドラーに渡されるオブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 、次のタスクを実行するために、イベント。  
  
-   データの取得のパラメーターを変更します。  
  
-   クエリをプログラムで生成します。  
  
-   並べ替えとページングの値を変更します。  
  
-   カスタムの並べ替えやページングを実行します。  
  
-   データ取得操作をキャンセルします。  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> このイベントは、データ取得操作のパラメーターを含むイベント ハンドラーに渡されるオブジェクト。 パラメーターを変更することができます、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> クエリを実行または新しい結果セットを作成して割り当てることをする前に、イベント ハンドラー、 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> プロパティです。  
  
 カスタムの並べ替えやにバインドされたコントロールによって制限されますこのイベントのハンドラーでのページングを実装する能力、 <xref:System.Web.UI.WebControls.LinqDataSource>です。 たとえばの列ヘッダー、 <xref:System.Web.UI.WebControls.GridView> コントロールがクリックされると、コントロールは、自動並べ替えする可能性があります上書き好きな順序を確立、イベント ハンドラーを実行します。  
  
 イベントのイベント ハンドラーで、例外がスローされます、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベント、そのイベント ハンドラーで例外を処理する必要があります。 例外のイベント ハンドラーに渡されません、 <xref:System.Web.UI.WebControls.LinqDataSource.Selected> イベント \(を通じて、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> のプロパティ、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクト\)。<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティには、後でスローされる例外のみが含まれています。、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントです。  
  
   
  
## 例  
 次の例では、イベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントです。 ハンドラーでは、Web ページ内の文字列値の配列から値を取得するクエリを作成します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 次の例を割り当てる方法を示しています、 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> プロパティをストアド プロシージャが表すメソッドから返されるオブジェクト。  
  
 \[Visual Basic\]  
  
```  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
 \[C\#\]  
  
```  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得操作中に使用されるパラメーターのコレクションを取得します。</summary>
        <value>Select 句の作成に使用されるパラメーターです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロール内のパラメーターを使用して、 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 実行時に、Select 句を作成するコレクション。 パラメーターを追加する、 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> Select 句で実行時の値を使用する場合に、コレクションです。 パラメーターを追加するなど、 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> ユーザーのプロファイルのプロパティを表すコレクション。 データ ソースから新しい値を計算するのに、そのプロパティと値を使用することができます。  
  
 使用していない場合は、Select 句の実行時に値を設定するのにはない、 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> コレクションです。 取得するプロパティを定義する、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティです。 例については、返される、 `FirstName` と `LastName` データベースのテーブルから値を設定 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> "FirstName、LastName"をパラメーターなし。  
  
 値を設定する、 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> 、コレクション内のプレース ホルダーを追加する、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティの名前付きパラメーター。 Select 句で各パラメーターの名前を付ける、@ 記号です。  
  
 内のパラメーターを使用することはできません、 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> プロパティ名を表すコレクション。 動的に設定する、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> プロパティ、プロパティの名前には、イベント ハンドラーを作成、 <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> イベントをカスタマイズして、 <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 必要に応じてプロパティです。  
  
   
  
## 例  
 次の例では、ユーザーが指定した値を使用して、返されるデータの値を計算する方法を示します。 ユーザーは、製造日数を表すテキスト ボックスに値を入力することができます。 その値は、製品の製造に日数を表すデータベースからの値で除算されます。 返される値は、指定した日数で製造可能な製品の数を示します。 Select を使用してコマンドに含まれるユーザーの入力、 <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> コレクションです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ ソースからデータをデータが変更されていないことを別のプロセスが更新または削除する前に確認するビュー ステートに保存するかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 値はビューに保存する場合は、次の状態です。それ以外の場合、 <see langword="false" />です。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、ときに更新および削除操作が有効になって、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールがビューステートへのすべてのレコードの元の値を格納します。<xref:System.Web.UI.WebControls.LinqDataSource> コントロールは、すべてのプライマリ キーの値を格納し、すべてのプロパティでマークされていない `UpdateCheck.Never` で、 `Column` 属性です。 設定する、 `UpdateCheck` のプロパティ、 `Column` 属性、 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]です。  
  
 LINQ to SQL を更新またはデータの削除、前に、データ ソース内の現在の値と比較をビュー ステートの値をチェックします。 値が一致しない場合は、データ ソース レコードが変更されています。 その場合は、LINQ to SQL は例外をスローし、更新を続行やしません削除操作。 LINQ to SQL の詳細については、次を参照してください。 [LINQ to SQL](http://msdn.microsoft.com/ja-jp/73d13345-eece-471a-af40-4cc7a2f11655)します。  
  
 ビューで元の値を格納する状態はページ サイズが不必要に大きくなる可能性があり、悪意のあるユーザーに機密データを公開できます。 ビュー ステートの値を格納する設定を無効にする、 <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> プロパティを `false`します。 これを行う場合は、データが変更されていないことを確認する方法を提供する必要があります。 設定した場合、 <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> プロパティを `false`, 、元の値は、データ バインド コントロールのビュー ステートに保存されません。 その場合は、LINQ to SQL では、データの整合性を確認できません。 LINQ to SQL では、データ ソース内のデータが実際に変更されていない場合でも、データの競合を示す例外をスローします。  
  
 基になるデータ ソースには、更新中に自動的に更新タイムスタンプ フィールドが含まれている場合は、ビューステートにその値だけを格納できます。 エンティティ クラス内のタイムスタンプ プロパティを設定する場合は、 `IsVersion=true` すべてのプロパティを設定および `UpdateCheck.Never`です。 タイムスタンプ フィールドは、そのレコードのデータが変更されるたびに、データベースによって自動的に更新、ために、LINQ to SQL は、データが変更された場合は、その値から決定します。 これにより、ビュー ステートのサイズを削減し、機密データを公開していません。 LINQ to SQL はチェック データに一貫性のビューで、タイムスタンプ値を比較することによって、データベースのタイムスタンプ値を使用して状態です。 詳細については、次を参照してください。 [チュートリアル: データの整合性を確認する LinqDataSource コントロールとタイムスタンプを使用した](http://msdn.microsoft.com/ja-jp/e7700162-4f05-4130-81f7-3be1361027fa)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="T:System.Web.DynamicData.IDynamicDataSource" />」を参照してください。</summary>
        <value>クラスに関連付けられている型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.LinqDataSource> のインスタンスが <xref:System.Web.DynamicData.IDynamicDataSource> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="T:System.Web.DynamicData.IDynamicDataSource" />」を参照してください。</summary>
        <value>エンティティの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.LinqDataSource> のインスタンスが <xref:System.Web.DynamicData.IDynamicDataSource> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ コレクションを表すデータ コンテキスト クラスのプロパティまたはフィールドの名前を設定します。</summary>
        <value>データ コレクションを含むプロパティの名前を表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティのプロパティまたはフィールドを取得するデータを表す名前にします。 データベース テーブルに接続するときに、プロパティの名前は通常、テーブルの名前と同じです。 メモリ内のデータ コレクションに接続するときに、設定、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティをプロパティやデータ コレクションを返すフィールドの名前にします。  
  
 任意の種類を返すプロパティを割り当てることができます、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 取得操作のプロパティです。 プロパティによって表されるオブジェクトが実装しないかどうかは <xref:System.Collections.IEnumerable>, 、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールのインスタンスでオブジェクトをラップ自動的には、 <xref:System.Collections.IEnumerable> オブジェクトです。  
  
 自動更新を有効にするのには、挿入、または削除の各操作に割り当てられているクラス、 <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> プロパティから派生する必要があります <xref:System.Data.Linq.DataContext> とプロパティに割り当てられている、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティから派生する必要があります <xref:System.Data.Linq.Table%601>します。  
  
 クラスのインスタンスからデータを選択する方法については、次を参照してください。、 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> プロパティです。  
  
   
  
## 例  
 次の例では 2 つ <xref:System.Web.UI.WebControls.LinqDataSource> コントロールです。 いずれかで <xref:System.Web.UI.WebControls.LinqDataSource> コントロール、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティがクラスのプロパティに設定します。 そのプロパティでは、文字列の配列を返します。 もう一方の <xref:System.Web.UI.WebControls.LinqDataSource> コントロール、 <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> プロパティがデータベース テーブルを表すプロパティに設定します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Overview\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Overview\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 という名前のクラス `ExampleDataContext` ことを表しますデータベース テーブルに表示されていない次の例です。 この例を実行するには、LINQ を名前付き Example.dbml とテーブルをドラッグすることは、上にムービーをという名前の SQL クラスに追加することでこのクラスを作成する必要があります、 [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]です。 という名前のクラス `ExampleDataContext` という名前のプロパティと `Movies` が生成されます。  
  
 次の例は、という名前のクラスを示しています。 `MovieLibrary` で参照されている、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Overview\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Overview\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">更新するレコードの行キー値。</param>
        <param name="values">データ ソースで更新する行の値。</param>
        <param name="oldValues">データの競合を検出するために評価される行の値。</param>
        <summary>更新操作を実行します。</summary>
        <returns>Update 操作によって影響を受けたレコードの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常を呼び出す必要はありません、 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> コードからメソッドです。 データ バインド コントロールが自動的に呼び出さ、 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> メソッドは、ユーザーがレコードを更新する操作とします。 明示的に呼び出す、 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> メソッドはデータを更新するための独自のプロセスを作成するとします。  
  
   
  
## 例  
 次の例では、プログラムを使用して、ユーザーがボタンをクリックした後にデータ ソース内のレコードを更新する方法を示します。 このコードでは、 <xref:System.Collections.Specialized.ListDictionary> キーの値を格納しているオブジェクト、 <xref:System.Collections.Specialized.ListDictionary> 元の値を格納しているオブジェクトと <xref:System.Collections.Specialized.ListDictionary> に新しい値を格納しているオブジェクト、 <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> メソッドです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 次の例では、前の例のマークアップを示します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作が完了すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> 更新操作が完了した後、イベントの値を確認するまたは更新操作から例外をキャッチする出力パラメーターです。 出力パラメーターは、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> イベント ハンドラーに渡されるオブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコレクションを使用していない、 <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> クラスです。</summary>
        <value>パラメーターのコレクション。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> を更新する、更新操作の前に値を変更または更新操作をキャンセルするデータ クラスからのデータの検証エラーを調べるオブジェクトを検証するイベントです。<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> イベント ハンドラーに渡されるオブジェクトには、元のオブジェクトと、更新されたオブジェクトの両方が含まれています。  
  
 更新操作中に、検証エラーが発生した場合、 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> オブジェクトには、データ クラスによってスローされる検証例外が含まれています。 検証エラーは、更新する値がデータ クラスのプロパティの型と一致しない場合、またはカスタム検証チェックに合格していない場合に発生します。 イベントのイベント ハンドラーで、 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベント、検証例外を取得し、適切なアクションを実行することができます。  
  
 イベントのイベント ハンドラーで、例外がスローされます、 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベント、そのイベント ハンドラーで例外を処理する必要があります。 例外のイベント ハンドラーに渡されません、 <xref:System.Web.UI.WebControls.LinqDataSource.Updated> イベント \(を通じて、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> のプロパティ、 <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> オブジェクト\)。<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> プロパティには、後でスローされる例外のみが含まれています。、 <xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベントです。  
  
   
  
## 例  
 次の例では、イベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベントです。 コードからプロパティを比較し、 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> プロパティと <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> プロパティに値が変更されたかどうかを参照してください。 値が変更すると、値の場合、 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> にプロパティが設定されている `true`します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 次の例では、イベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Updating> 検証例外を取得するイベントです。  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
 \[C\#\]  
  
```  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 前の例では、検証例外を取得します。 値がプロパティの型と一致しない場合、例外をスローする可能性があります。 次の例のようなカスタマイズされたチェックからスローされる可能性があります。`OnAgeChanging` ことを確認する方法の数、 `Age` プロパティが負でないです。  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定は、どのような条件を指定する値が取得されたデータに含まれるレコードに対して true なければなりません。</summary>
        <value>Where の作成に使用される文字列句。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティをクエリから返されるレコードの条件を指定します。 構文、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティは、c\# で LINQ Where 句の構文と同じです。  
  
 ブール値に評価される式を指定する場合は、式に評価し、 `true` 特定の行の行が結果セットに含まれます。 式は、次の例に示すようとを比較するには、列名、比較演算子、および値から構成されます。  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 論理によってリンクされている複数の式を指定する `AND` または `OR` 演算子を使用する `&&` 論理 AND 演算子とし、 `||` 論理 OR オペレーターは、次の例で示すようにします。  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 リテラル文字列の値に対してプロパティをテストする場合は、リテラル文字列値を二重引用符で囲む必要があります。 これを行うには、マークアップを囲む、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 次の例で示すように単一引用符で句の値。  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 コード内のリテラル文字列値を比較するには、次の例で示すように、二重引用符を挿入するために使用する言語に適したエスケープ文字を使用します。  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 文字列がより大きいか別の文字列より小さいかどうかをテストする場合は、メソッドを使用する必要があります、 <xref:System.String> クラスを使用せずに `<` または `>` 列名と文字列値間の演算子です。 次の例より大きい、またはより大きい"Sports"に等しいと等しいかそれより小さい、以下のカテゴリ値を持つ行を選択する方法を示します。  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 その他の方法を使用することも、 <xref:System.String> クラスなど、 <xref:System.String.StartsWith%2A>, 、<xref:System.String.EndsWith%2A>, 、および <xref:System.String.Contains%2A>です。 文字列を比較する方法の詳細については、次を参照してください。 [Comparing Strings](http://msdn.microsoft.com/ja-jp/977dc094-fe19-4955-98ec-d2294d04a4ba)します。 場所の詳細については、句の構文を参照してください [C\# Operators](http://msdn.microsoft.com/ja-jp/0301e31f-22ad-49af-ac3c-d5eae7f0ac43) と [where clause \(C\# Reference\)](http://msdn.microsoft.com/ja-jp/7f9bf952-7744-4f91-b676-cddb55d107c3)です。  
  
 Web ページを作成する場合に定義する静的な値に基づくフィルタ リング、だけでなく実行時に評価に基づいての動的な値をフィルター処理できます。 \[名前付きパラメーターを含める場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 、値のプレース ホルダーとして機能するプロパティです。 一致する名前を持つパラメーターを追加、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションです。  
  
 また、設定、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティを `true` でパラメーターを定義し、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションです。 ときに、 <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> プロパティは、 `true`, で指定したパラメーターを含める必要はありません、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティです。 代わりに、 <xref:System.Web.UI.WebControls.LinqDataSource> コントロールが Where を自動的に生成句のパラメーターから、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> プロパティです。  
  
 データをフィルター処理する方法の詳細については、次を参照してください。 [チュートリアル: を選択すると、LinqDataSource コントロールと GridView コントロールとデータのサブセットをフィルター処理](http://msdn.microsoft.com/ja-jp/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)します。  
  
   
  
## 例  
 次の例では、静的な条件に基づくクエリから返されるデータをフィルター処理する方法を示します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 次の例では、実行時に、ユーザーが指定される値に基づいてデータをフィルター処理する方法を示します。 この例では、 <xref:System.Web.UI.WebControls.DropDownList> コントロールと <xref:System.Web.UI.WebControls.GridView> ページにコントロールを表示します。 ユーザーが選択で値のいずれか、 <xref:System.Web.UI.WebControls.DropDownList> コントロール、 <xref:System.Web.UI.WebControls.LinqDataSource> からコントロールを選択、 `Products` テーブルを持つ行だけ `UserPrice` 値が、選択した値に等しい。<xref:System.Web.UI.WebControls.GridView> コントロールがフィルター選択されたデータを表示します。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Where を作成するために使用されるパラメーターのコレクションを取得句。</summary>
        <value>Where の作成に使用するパラメーターのコレクション内の句、 <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinqDataSource> コントロール内のパラメーターを使用して、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Where を作成するコレクション実行時に句。 パラメーターを追加する、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションで 1 つまたは複数の条件をプログラムで設定する場合に句。 たとえば、姓の値と等しく、レコードをデータベース テーブルを検索する場合があります、 <xref:System.Web.UI.WebControls.TextBox> コントロールです。 パラメーターを追加する場合は、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> テキスト ボックスの値のコレクション。  
  
 実行時に値を設定する必要はない場合、句がありませんを使用する、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクションです。 取得するフィールドを定義する、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティです。 例については、データベース テーブルから値を返す場所 `LastName` マークアップでは、equals"Adams"の設定、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> プロパティを `'LastName = "Adams"'` パラメーターを指定せずします。  
  
 値を設定する、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> コレクション、各パラメーターに名前を割り当てるして内のプレース ホルダーを追加、 <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> そのパラメーターのプロパティです。 Where 句では、各パラメーターの名前を付ける、@ 記号です。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Where を動的に作成するコレクション句。<xref:System.Web.UI.WebControls.LinqDataSource> 制御が戻るの値を持つすべてのレコード、 `Price` でユーザーが選択されている値よりも大きい列、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource\_Simple\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource\_Simple\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>