<Type Name="WebControl" FullName="System.Web.UI.WebControls.WebControl">
  <TypeSignature Language="C#" Value="public class WebControl : System.Web.UI.Control, System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebControl extends System.Web.UI.Control implements class System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IAttributeAccessor</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.Themeable(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="N:System.Web.UI.WebControls" /> 名前空間のすべてのコントロールに共通するメソッド、プロパティ、およびイベントを定義する基本クラスとして機能します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebControl>クラスには、プロパティ、メソッド、およびすべての Web サーバー コントロールに共通するイベントが用意されています。 このクラスで定義されているプロパティを設定して、Web サーバー コントロールの動作と外観を制御できます。 使用して、コントロールのフォントの色と背景色を制御するなど、<xref:System.Web.UI.WebControls.WebControl.BackColor%2A>と<xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>プロパティ、それぞれします。 枠線を表示できるコントロールを制御できます境界線の幅、罫線のスタイル、および境界線の色を設定して、 <xref:System.Web.UI.WebControls.WebControl.BorderWidth%2A>、 <xref:System.Web.UI.WebControls.WebControl.BorderStyle%2A>、および<xref:System.Web.UI.WebControls.WebControl.BorderColor%2A>プロパティです。 使用して、Web サーバー コントロールのサイズを指定することができます、<xref:System.Web.UI.WebControls.WebControl.Height%2A>と<xref:System.Web.UI.WebControls.WebControl.Width%2A>プロパティです。  
  
 コントロールの動作は、特定のプロパティを設定して指定できます。 有効にし、設定して、コントロールを無効にすることができます、<xref:System.Web.UI.WebControls.WebControl.Enabled%2A>プロパティです。 タブ オーダー内のコントロールの場所は、設定によって制御されます、<xref:System.Web.UI.WebControls.WebControl.TabIndex%2A>プロパティです。 設定して、コントロールにツールヒントを指定できます、<xref:System.Web.UI.WebControls.WebControl.ToolTip%2A>プロパティです。  
  
> [!NOTE]
>  すべてのコントロールは、このクラスで定義されているすべてのプロパティをサポートします。 詳細については、プロパティはサポートされているかどうか、特定のコントロールのドキュメントを参照してください。  
  
> [!NOTE]
>  このクラスの一部のプロパティは、ブラウザーによって異なる方法で、レンダリングします。 Render、他のユーザーがある影響しない中に、いくつかのプロパティが、まったく表示されません。<xref:System.Web.Configuration.HttpCapabilitiesBase.TagWriter%2A>のプロパティ、<xref:System.Web.HttpBrowserCapabilities>オブジェクトは、Web サーバー コントロールのレンダリング方法を決定します。 HTML 4.0 をサポートしているブラウザーの場合、<xref:System.Web.Configuration.HttpCapabilitiesBase.TagWriter%2A>プロパティには、通常<xref:System.Web.HttpBrowserCapabilities>HTML 4.0 のスタイル属性を使用して、オブジェクト、およびほとんどのプロパティがレンダリングされます。 HTML 4.0 のサポートに認識されていないブラウザーを使用して、<xref:System.Web.UI.Html32TextWriter>オブジェクト。 スタイル属性を関連する HTML 3.2 タグ属性これに自動的にマップされます。 場合によってなどの<xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>プロパティ、スタイルの属性に変換されます、付加的なタグなど`<font>`タグ。 場合によってがありますいないマッピングを実行します。 さまざまなブラウザーでプロパティを表示する方法の詳細については、特定のプロパティのマニュアルを参照してください。  
  
 インスタンスの初期プロパティ値の一覧については<xref:System.Web.UI.WebControls.WebControl>を参照してください、<xref:System.Web.UI.WebControls.WebControl.%23ctor%2A>コンス トラクターです。  
  
   
  
## 例  
 [!code-csharp[WebControlAddAttributesToRender\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebControlAddAttributesToRender/CS/addattrib.cs#1)]
 [!code-vb[WebControlAddAttributesToRender\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebControlAddAttributesToRender/VB/addattrib.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.UI.WebControls.WebControl.BackColor" />
    <altmember cref="P:System.Web.UI.WebControls.WebControl.ForeColor" />
    <altmember cref="P:System.Web.UI.WebControls.WebControl.BorderWidth" />
    <altmember cref="P:System.Web.UI.WebControls.WebControl.BorderStyle" />
    <altmember cref="P:System.Web.UI.WebControls.WebControl.BorderColor" />
    <altmember cref="P:System.Web.UI.WebControls.WebControl.Height" />
    <altmember cref="P:System.Web.UI.WebControls.WebControl.Width" />
    <altmember cref="P:System.Web.UI.WebControls.WebControl.Enabled" />
    <altmember cref="P:System.Web.UI.WebControls.WebControl.TabIndex" />
    <altmember cref="P:System.Web.UI.WebControls.WebControl.ToolTip" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebControl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.WebControl" /> を表すクラス、 <see langword="Span" /> HTML タグ。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しいインスタンスを初期化するためにこのコンス トラクターを使用、 <xref:System.Web.UI.WebControls.WebControl> を表すクラス、 `Span` HTML 要素です。  
  
 次の表は、のインスタンスの初期プロパティ値を示しています。 <xref:System.Web.UI.WebControls.WebControl>します。  
  
|プロパティ|初期値|  
|-----------|---------|  
|`TagKey`|<xref:System.Web.UI.HtmlTextWriterTag.Span> 列挙値。|  
  
> [!NOTE]
>  このコンス トラクターは、直接呼び出されません。 初期化するために派生クラスのコンス トラクターで呼び出された多くの場合、代わりに、 <xref:System.Web.UI.WebControls.WebControl.TagKey%2A> プロパティを <xref:System.Web.UI.HtmlTextWriterTag.Span> 列挙値。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.TagKey" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebControl (string tag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">HTML タグ。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.WebControl" /> クラスの指定した HTML タグを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを使用して作成しの新しいインスタンスを初期化、 <xref:System.Web.UI.WebControls.WebControl> クラスの指定した HTML タグを使用します。  
  
 次の表は、のインスタンスの初期プロパティ値を示しています。 <xref:System.Web.UI.WebControls.WebControl>します。  
  
|プロパティ|初期値|  
|-----------|---------|  
|`TagKey`|<xref:System.Web.UI.HtmlTextWriterTag.Unknown> 列挙型値。|  
|`TagName`|`tag` パラメーターの値。|  
  
> [!NOTE]
>  このコンス トラクターは、直接呼び出されません。 初期化するために派生クラスのコンス トラクターで呼び出された多くの場合、代わりに、 <xref:System.Web.UI.WebControls.WebControl.TagKey%2A> と <xref:System.Web.UI.WebControls.WebControl.TagName%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.TagKey" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.TagName" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebControl (System.Web.UI.HtmlTextWriterTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Web.UI.HtmlTextWriterTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.#ctor(System.Web.UI.HtmlTextWriterTag)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tag" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="tag">
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 値のいずれか 1 つ。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.WebControl" /> クラスの指定した HTML タグを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを使用して作成しの新しいインスタンスを初期化、 <xref:System.Web.UI.WebControls.WebControl> クラスの指定して <xref:System.Web.UI.HtmlTextWriterTag?displayProperty=fullName> 値。  
  
 次の表は、のインスタンスの初期プロパティ値を示しています。 <xref:System.Web.UI.WebControls.WebControl>します。  
  
|プロパティ|初期値|  
|-----------|---------|  
|`TagKey`|<xref:System.Web.UI.HtmlTextWriterTag> で指定された列挙値、 `tag` パラメーター。|  
  
   
  
## 例  
 次の例では、コンス トラクターを使用して、 <xref:System.Web.UI.WebControls.WebControl> を作成するクラス、 `TextArea` HTML 要素 Web フォーム ページに表示します。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx ファイル名拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[Classic WebControl.WebControl Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.WebControl Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.WebControl Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.WebControl Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.TagKey" />
      </Docs>
    </Member>
    <Member MemberName="AccessKey">
      <MemberSignature Language="C#" Value="public virtual string AccessKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.AccessKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または使用すると、Web サーバー コントロールにすばやく移動するアクセス キーを設定します。</summary>
        <value>Web サーバー コントロールにすばやく移動できるアクセス キー。 既定値は <see cref="F:System.String.Empty" />, 、このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.AccessKey%2A> プロパティを Web サーバー コントロールのショートカット キーを指定します。 これにより、キーボードの ALT キーと指定した文字のキーを押して、コントロールにすばやく移動することができます。 たとえば、コントロールのアクセス キーを文字列に設定 `"D"` ALT \+ D を押すことで、ユーザーがコントロールに移動できることを示します。  
  
 1 つの文字列のみが許可される、 <xref:System.Web.UI.WebControls.WebControl.AccessKey%2A> プロパティです。 このプロパティはどちらも値を設定しようとすると `null`, 、<xref:System.String.Empty>, も 1 つの文字列、例外がスローされます。  
  
> [!NOTE]
>  Internet Explorer 4.0 でのみ、後で、このプロパティがサポートされています。  
  
   
  
## 例  
 次の例では、設定して使用する方法、 <xref:System.Web.UI.WebControls.WebControl.AccessKey%2A> のプロパティ、 <xref:System.Web.UI.WebControls.TextBox> コントロールです。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[Classic WebControl.AccessKey Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.AccessKey Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.AccessKey Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.AccessKey Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定されたアクセス キーは、どちらも <see langword="null" />, 、<see cref="F:System.String.Empty" /> も 1 つの文字列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected virtual void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">HTML コンテンツをクライアントに表示する出力ストリームを表す <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>HTML 属性およびスタイルをレンダリングする必要がある追加を指定した <see cref="T:System.Web.UI.HtmlTextWriterTag" />します。 このメソッドは、主にコントロールの開発者によって使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クライアント上の Web サーバー コントロールの属性およびスタイルをレンダリングする通常を呼び出す、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A> と <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A?displayProperty=fullName> それぞれを挿入するメソッドの属性し、スタイルに個別に、 <xref:System.Web.UI.HtmlTextWriter> 出力ストリーム。 このメソッドをプロセスを簡略化するには、すべての呼び出しをカプセル化、 <xref:System.Web.UI.HtmlTextWriter.AddAttribute%2A?displayProperty=fullName> と <xref:System.Web.UI.HtmlTextWriter.AddStyleAttribute%2A?displayProperty=fullName> のすべての属性と、Web サーバー コントロールに関連付けられたスタイル。 すべての属性およびスタイルは挿入、 <xref:System.Web.UI.HtmlTextWriter> 、単一メソッド呼び出しの出力ストリーム。 このメソッドは通常、適切な属性を挿入する派生クラスで、コントロールの開発者によってオーバーライドされておりにスタイルが設定、 <xref:System.Web.UI.HtmlTextWriter> クラスの出力ストリーム。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A> クライアント スクリプトを挿入するメソッドを使用することはできません。 クライアント スクリプトを使用するを参照してください、 <xref:System.Web.UI.ClientScriptManager> クラスです。  
  
   
  
## 例  
 次の例から派生したクラスを作成する方法、 <xref:System.Web.UI.WebControls.WebControl> クラスです。 基本実装、 <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A> メソッドをオーバーライドして、派生クラスに適切な属性を追加、 <xref:System.Web.UI.HtmlTextWriter> 出力ストリーム。  
  
 [!code-csharp[WebControlAddAttributesToRender\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebControlAddAttributesToRender/CS/addattrib.cs#1)]
 [!code-vb[WebControlAddAttributesToRender\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebControlAddAttributesToRender/VB/addattrib.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddAttribute" />
        <altmember cref="Overload:System.Web.UI.HtmlTextWriter.AddStyleAttribute" />
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="ApplyStyle">
      <MemberSignature Language="C#" Value="public void ApplyStyle (System.Web.UI.WebControls.Style s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyStyle(class System.Web.UI.WebControls.Style s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.ApplyStyle(System.Web.UI.WebControls.Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="s">A <see cref="T:System.Web.UI.WebControls.Style" /> コピーされるスタイルを表します。</param>
        <summary>Web コントロールは、コントロールの既存のスタイル要素を上書きするのには、指定したスタイルの空白以外の要素をコピーします。 このメソッドは、主にコントロールの開発者によって使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.WebControl.ApplyStyle%2A> スタイルを適用するメソッド、 <xref:System.Web.UI.WebControls.DataGrid> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[WebControlApplyStyle\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebControlApplyStyle/CS/webcontrolapplystylecs.aspx#1)]
 [!code-vb[WebControlApplyStyle\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebControlApplyStyle/VB/webcontrolapplystylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebControl.MergeStyle(System.Web.UI.WebControls.Style)" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Web.UI.AttributeCollection Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.AttributeCollection Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AttributeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>\(表示専用\) の場合、任意の属性のコレクションを取得するコントロールのプロパティに対応しません。</summary>
        <value>A <see cref="T:System.Web.UI.AttributeCollection" /> の名前と値のペアです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebControl.Attributes%2A> コレクションには、Web サーバー コントロールの開始タグで宣言されているすべての属性のコレクションが含まれています。 これにより、プログラムで Web サーバー コントロールに関連付けられている属性を制御することができます。 コレクションに属性を追加したり、コレクションから属性を削除することができます。  
  
> [!NOTE]
>  このプロパティは、コントロールの開始タグにブラウザー設定に関係なく、コレクション内のすべての属性で表示されます。 すべてのブラウザーでは、表示されているすべての属性をサポートします。 サポートされていない属性は通常、ブラウザーによって無視されます。  
  
> [!NOTE]
>  クライアント側のスクリプトを追加することはできません、 <xref:System.Web.UI.WebControls.WebControl> インスタンスを使用して、 <xref:System.Web.UI.WebControls.WebControl.Attributes%2A> コレクションです。 クライアント側スクリプトを追加するには、使用、 <xref:System.Web.UI.Page.ClientScript%2A> プロパティを <xref:System.Web.UI.Page> コントロールです。  
  
   
  
## 例  
 次の例を示して 方法、 <xref:System.Web.UI.WebControls.WebControl.Attributes%2A> のプロパティ、 <xref:System.Web.UI.WebControls.WebControl> 、JavaScript の実行に使用できるコマンドの場合、 <xref:System.Web.UI.WebControls.TextBox> コントロールがフォーカスを失った。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[Classic WebControl.Attributes Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.Attributes Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.Attributes Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.Attributes Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.AttributeCollection" />
        <altmember cref="T:System.Web.UI.ClientScriptManager" />
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.WebColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または Web サーバー コントロールの背景色を設定します。</summary>
        <value>コントロールの背景色を表す <see cref="T:System.Drawing.Color" />。 既定値は <see cref="F:System.Drawing.Color.Empty" /> です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.BackColor%2A> プロパティを Web サーバー コントロールの背景色を指定します。 使用してこのプロパティを設定、 <xref:System.Drawing.Color?displayProperty=fullName> オブジェクトです。  
  
> [!NOTE]
>  このプロパティは、特定のコントロールに表示されます。 たとえば、 <xref:System.Web.UI.WebControls.Table>, 、<xref:System.Web.UI.WebControls.Panel>, 、<xref:System.Web.UI.WebControls.DataGrid>, 、<xref:System.Web.UI.WebControls.Calendar>, 、および <xref:System.Web.UI.WebControls.ValidationSummary> このプロパティを表示します。 でも機能は <xref:System.Web.UI.WebControls.CheckBoxList>, 、<xref:System.Web.UI.WebControls.RadioButtonList> と <xref:System.Web.UI.WebControls.DataList> 場合、 `RepeatLayout` プロパティは `RepeatLayout.Table`, ではなく、 `RepeatLayout.Flow`です。  
  
 一般に、その出力を制御するだけの `<table>` タグは、ほとんどのコントロールが HTML 4.0 でできる一方に、HTML 3.2 での背景色を表示できます。  
  
 としてレンダリングされるため、 `<span>` タグ \(を含む <xref:System.Web.UI.WebControls.Label>, 、すべて検証コントロールおよびリスト コントロールと、その `RepeatLayout` プロパティに設定 `RepeatLayout.Flow`\)、このプロパティは、Microsoft Internet Explorer version 4 ではなく Microsoft Internet Explorer 5 以降のバージョンでは機能します。  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Web.UI.WebControls.WebControl.BackColor%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Table> から継承されるコントロール、 <xref:System.Web.UI.WebControls.WebControl> 基本クラスです。  
  
 [!code-csharp[Classic WebControl.BackColor Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.BackColor Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.BackColor Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.BackColor Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="T:System.Web.UI.WebControls.Table" />
        <altmember cref="T:System.Web.UI.WebControls.Panel" />
        <altmember cref="T:System.Web.UI.WebControls.DataGrid" />
        <altmember cref="T:System.Web.UI.WebControls.Calendar" />
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="T:System.Web.UI.WebControls.CheckBoxList" />
        <altmember cref="T:System.Web.UI.WebControls.RadioButtonList" />
        <altmember cref="T:System.Web.UI.WebControls.DataList" />
        <altmember cref="T:System.Web.UI.WebControls.RepeatLayout" />
      </Docs>
    </Member>
    <Member MemberName="BorderColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color BorderColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BorderColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.BorderColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.WebColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または Web コントロールの境界線の色を設定します。</summary>
        <value>コントロールの境界線の色を表す <see cref="T:System.Drawing.Color" />。 既定値は <see cref="F:System.Drawing.Color.Empty" /> です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.BorderColor%2A> プロパティを Web サーバー コントロールの境界線の色を指定します。 使用してこのプロパティを設定、 <xref:System.Drawing.Color> オブジェクトです。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.WebControl.BorderColor%2A> プロパティがのみ特定のコントロールで表示されます。 たとえば、 <xref:System.Web.UI.WebControls.Table>, 、<xref:System.Web.UI.WebControls.Panel>, 、<xref:System.Web.UI.WebControls.DataGrid>, 、<xref:System.Web.UI.WebControls.Calendar>, 、および <xref:System.Web.UI.WebControls.ValidationSummary> コントロールは、このプロパティが表示されます。 でも機能は、 <xref:System.Web.UI.WebControls.CheckBoxList>, 、<xref:System.Web.UI.WebControls.RadioButtonList>, 、および <xref:System.Web.UI.WebControls.DataList> されている場合、制御、 `RepeatLayout` にプロパティが設定されている `RepeatLayout.Table`, ではなく、 `RepeatLayout.Flow`です。 ただし、これは、 `bordercolor` 属性には、標準の HTML 3.2 の一部ではありません。`bordercolor` 属性は、Microsoft Internet Explorer バージョン 3.0 以降ですがほとんどないその他のブラウザーに対して機能します。  
  
 ときに、 <xref:System.Web.UI.WebControls.WebControl.BorderColor%2A> プロパティが設定されていないと、ブラウザーは既定の境界線の色を使用します。 既定の配色を決定するブラウザーを参照してください。  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Web.UI.WebControls.WebControl.BorderColor%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Table> から継承されるコントロール、 <xref:System.Web.UI.WebControls.WebControl> 基本クラスです。  
  
 [!code-csharp[Classic WebControl.BorderColor Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.BorderColor Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.BorderColor Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.BorderColor Example/VB/sourcevb.aspx#1)]  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[System.Web.UI.WebControl.BorderProperties#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControl.BorderProperties/CS/borderpropertiescs.aspx#1)]
 [!code-vb[System.Web.UI.WebControl.BorderProperties#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControl.BorderProperties/VB/borderpropertiesvb.aspx#1)]  
[!code-csharp[System.Web.UI.WebControl.BorderProperties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControl.BorderProperties/CS/borderpropertiescs.aspx#3)]
[!code-vb[System.Web.UI.WebControl.BorderProperties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControl.BorderProperties/VB/borderpropertiesvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="T:System.Web.UI.WebControls.Table" />
        <altmember cref="T:System.Web.UI.WebControls.Panel" />
        <altmember cref="T:System.Web.UI.WebControls.DataGrid" />
        <altmember cref="T:System.Web.UI.WebControls.Calendar" />
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="T:System.Web.UI.WebControls.CheckBoxList" />
        <altmember cref="T:System.Web.UI.WebControls.RadioButtonList" />
        <altmember cref="T:System.Web.UI.WebControls.DataList" />
        <altmember cref="T:System.Web.UI.WebControls.RepeatLayout" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または Web サーバー コントロールの境界線スタイルを設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.BorderStyle" /> 列挙値のいずれか。 既定値は、<see langword="NotSet" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.BorderStyle%2A> プロパティを Web サーバー コントロールの境界線のスタイルを指定します。 このプロパティのいずれかを使用して、 <xref:System.Web.UI.WebControls.BorderStyle> 列挙値。 次の表では、指定できる値を示します。  
  
|枠線の種類|説明|  
|-----------|--------|  
|`NotSet`|罫線のスタイルが設定されていません。|  
|`None`|境界線なし|  
|`Dotted`|点線の枠線。|  
|`Dashed`|破線の罫線。|  
|`Solid`|実線の境界線。|  
|`Double`|二重実線の境界線。|  
|`Groove`|浮き彫り罫線の外観のくぼんだ罫線。|  
|`Ridge`|浮き出し罫線の外観のための罫線。|  
|`Inset`|浮き彫りコントロールの外観の埋め込み罫線。|  
|`Outset`|発生したコントロールの外観の最初の境界線。|  
  
> [!NOTE]
>  このプロパティは、任意の Web サーバー コントロール用の Microsoft Internet Explorer 4 より前のブラウザーでは表示されません。 HTML 3.2 でそれに相当することはありません。  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Web.UI.WebControls.WebControl.BorderStyle%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Table> から継承されるコントロール、 <xref:System.Web.UI.WebControls.WebControl> 基本クラスです。  
  
 [!code-csharp[Classic WebControl.BorderStyle Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.BorderStyle Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.BorderStyle Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.BorderStyle Example/VB/sourcevb.aspx#1)]  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[System.Web.UI.WebControl.BorderProperties#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControl.BorderProperties/CS/borderpropertiescs.aspx#1)]
 [!code-vb[System.Web.UI.WebControl.BorderProperties#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControl.BorderProperties/VB/borderpropertiesvb.aspx#1)]  
[!code-csharp[System.Web.UI.WebControl.BorderProperties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControl.BorderProperties/CS/borderpropertiescs.aspx#3)]
[!code-vb[System.Web.UI.WebControl.BorderProperties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControl.BorderProperties/VB/borderpropertiesvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="T:System.Web.UI.WebControls.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="BorderWidth">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.Unit BorderWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit BorderWidth" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.BorderWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Web.UI.WebControls.Unit), "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または Web サーバー コントロールの境界線の幅を設定します。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.Unit" /> Web サーバー コントロールの境界線の幅を表します。 既定値は <see cref="F:System.Web.UI.WebControls.Unit.Empty" />, 、このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.BorderWidth%2A> プロパティ コントロールの境界線の幅を指定します。  
  
> [!NOTE]
>  このプロパティは、すべての Web サーバー コントロールでは機能できません。 など、テーブルとして表示するコントロールにのみ適用 <xref:System.Web.UI.WebControls.Table> と <xref:System.Web.UI.WebControls.DataGrid>です。  
  
 このプロパティは、 <xref:System.Web.UI.WebControls.Unit> オブジェクトです。 場合、 <xref:System.Web.UI.WebControls.Unit.Value%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Unit> 、負の値を含む、例外がスローされます。  
  
> [!NOTE]
>  罫線の幅は、ブラウザー Microsoft Internet Explorer バージョン 5 より前のピクセル単位でのみ指定できます。 すべてのユニットの種類は、Microsoft Internet Explorer 5 以降のバージョンでサポートされます。 詳細については、特定のコントロールを参照してください。  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Web.UI.WebControls.WebControl.BorderWidth%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Table> から継承されたコントロール、 <xref:System.Web.UI.WebControls.WebControl> 基本クラスです。  
  
 [!code-csharp[Classic WebControl.BorderWidth Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.BorderWidth Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.BorderWidth Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.BorderWidth Example/VB/sourcevb.aspx#1)]  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[System.Web.UI.WebControl.BorderProperties#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControl.BorderProperties/CS/borderpropertiescs.aspx#1)]
 [!code-vb[System.Web.UI.WebControl.BorderProperties#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControl.BorderProperties/VB/borderpropertiesvb.aspx#1)]  
[!code-csharp[System.Web.UI.WebControl.BorderProperties#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControl.BorderProperties/CS/borderpropertiescs.aspx#3)]
[!code-vb[System.Web.UI.WebControl.BorderProperties#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControl.BorderProperties/VB/borderpropertiesvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定された境界線の幅は、負の値です。</exception>
        <altmember cref="T:System.Web.UI.WebControls.Unit" />
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <Member MemberName="ControlStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Style ControlStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.Style ControlStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.ControlStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web サーバー コントロールのスタイルを取得します。 このプロパティは、主にコントロールの開発者によって使用されます。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.Style" /> Web サーバー コントロールの外観のプロパティをカプセル化します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> プロパティのすべてのプロパティをカプセル化、 <xref:System.Web.UI.WebControls.WebControl> など、コントロールの外観を指定するクラス <xref:System.Web.UI.WebControls.WebControl.BorderColor%2A> と <xref:System.Web.UI.WebControls.WebControl.Font%2A>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.ControlStyleCreated" />
      </Docs>
    </Member>
    <Member MemberName="ControlStyleCreated">
      <MemberSignature Language="C#" Value="public bool ControlStyleCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ControlStyleCreated" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.ControlStyleCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Web.UI.WebControls.Style" /> のオブジェクトが作成された、 <see cref="P:System.Web.UI.WebControls.WebControl.ControlStyle" /> プロパティです。 このプロパティは、主に、コントロールの開発者によって使用されます。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Web.UI.WebControls.Style" /> のオブジェクトが作成された、 <see cref="P:System.Web.UI.WebControls.WebControl.ControlStyle" /> プロパティ以外の場合、 <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebControl.ControlStyle" />
      </Docs>
    </Member>
    <Member MemberName="CopyBaseAttributes">
      <MemberSignature Language="C#" Value="public void CopyBaseAttributes (System.Web.UI.WebControls.WebControl controlSrc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyBaseAttributes(class System.Web.UI.WebControls.WebControl controlSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.CopyBaseAttributes(System.Web.UI.WebControls.WebControl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlSrc" Type="System.Web.UI.WebControls.WebControl" />
      </Parameters>
      <Docs>
        <param name="controlSrc">A <see cref="T:System.Web.UI.WebControls.WebControl" /> を表す、ソース コントロールからこのメソッドが呼び出される Web サーバー コントロールにコピーするプロパティを使用します。</param>
        <summary>によってカプセル化しないプロパティをコピー、 <see cref="P:System.Web.UI.WebControls.WebControl.Style" /> からこのメソッドが呼び出される Web サーバー コントロールに指定された Web サーバー コントロールからのオブジェクト。 このメソッドは、主にコントロールの開発者によって使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebControl.CopyBaseAttributes%2A> メソッドのコピー、 <xref:System.Web.UI.WebControls.WebControl.AccessKey%2A>, 、<xref:System.Web.UI.WebControls.WebControl.Enabled%2A>, 、<xref:System.Web.UI.WebControls.WebControl.ToolTip%2A>, 、<xref:System.Web.UI.WebControls.WebControl.TabIndex%2A>, 、および <xref:System.Web.UI.WebControls.WebControl.Attributes%2A> からこのメソッドが呼び出される Web サーバー コントロールのプロパティ指定された Web サーバー コントロールから。 これは、Web サーバー コントロールはでは、表示し、コントロールを使用して、新しいコントロールを動的に作成を機能の場合によく使用されます。 いないによってカプセル化された Web サーバー コントロールのすべてのプロパティをコピーするので、このメソッドはこのような状況で役立ちます、 <xref:System.Web.UI.WebControls.Style> オブジェクトのレンダリングされているタグの最も外側にあるコントロールに配置できるようにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="controlSrc" /> は <see langword="null" /> です。</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Style" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlStyle">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.Style CreateControlStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.Style CreateControlStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.CreateControlStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>によって内部的に使用されるスタイル オブジェクトを作成、 <see cref="T:System.Web.UI.WebControls.WebControl" /> プロパティに関連したすべてのスタイルを実装するクラス。 このメソッドは、主にコントロールの開発者によって使用されます。</summary>
        <returns>コントロールのすべてのスタイル関連プロパティを実装するために使用される <see cref="T:System.Web.UI.WebControls.Style" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebControl.CreateControlStyle%2A> 、スタイルを作成するメソッドが使用されるすべてのスタイルを実装する内部的に使用されるオブジェクトに関連するプロパティです。 派生クラスでは、クラスに対応するスタイルを作成するには、このメソッドをオーバーライドできます。 このメソッドは、主にコントロールの開発者によって使用されます。  
  
 **注** コントロールの開発者が返す必要があります、 <xref:System.Web.UI.WebControls.Style> から派生した、 <xref:System.Web.UI.WebControls.Style> 基本コントロールを返す。 これを想定できないこと、 <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> は特定のスタイル型から派生したコントロールが別の型を返す可能性があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.ControlStyle" />
      </Docs>
    </Member>
    <Member MemberName="CssClass">
      <MemberSignature Language="C#" Value="public virtual string CssClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CssClass" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.CssClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.CssClassProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはクライアントの Web サーバー コントロールによって表示されるカスケード スタイル シート \(CSS\) クラスを設定します。</summary>
        <value>CSS クラスは、クライアント上の Web サーバー コントロールによって表示されます。 既定値は、<see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.CssClass%2A> プロパティを Web サーバー コントロール用のクライアント上でレンダリングする CSS クラスを指定します。 このプロパティは、すべてのコントロールのブラウザーで表示されます。 クラスの属性で、ブラウザーに関係なく常に表示されます。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 たとえば、次の Web サーバー コントロール宣言があるとします。  
  
```  
<asp:TextBox id="TextBox1" ForeColor="Red" CssClass="class1" />  
```  
  
 Web サーバー コントロールの宣言は、以前のクライアントでは、次の HTML がレンダリングされます。  
  
```  
<input type=text class="class1" style="ForeColor:red">  
```  
  
 コントロールの外観をカスタマイズするカスケード スタイル シート \(CSS\) を使用する場合は、インライン スタイルまたは個別の CSS ファイルのいずれかを使用します。 インライン スタイルと独立した CSS ファイルの両方を使用して予期しない結果が発生する可能性があります。  
  
> [!NOTE]
>  CSS の設定をサポートしていないブラウザーで、 <xref:System.Web.UI.WebControls.WebControl.CssClass%2A> プロパティには効果はありません。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Web.UI.WebControls.WebControl.CssClass%2A> のスタイルを変更するプロパティ、 <xref:System.Web.UI.WebControls.HyperLink> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[Classic WebControl.CssClass Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.CssClass Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.CssClass Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.CssClass Example/VB/sourcevb.aspx#1)]
 [!code-xml[Classic WebControl.CssClass Example\#1](~/samples/snippets/common/VS_Snippets_WebNet/Classic WebControl.CssClass Example/Common/source.xml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisabledCssClass">
      <MemberSignature Language="C#" Value="public static string DisabledCssClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DisabledCssClass" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.DisabledCssClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロールが無効になっている場合、レンダリングされた HTML 要素に適用する CSS クラスを設定します。</summary>
        <value>コントロールが無効にすると、レンダリングされた HTML 要素に適用される CSS クラスです。 既定値は、"aspNetDisabled"です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 表示される名前を変更するこのプロパティを使用することができます、 <xref:System.Web.UI.WebControls.WebControl.DisabledCssClass%2A> の個々 の Web コントロールのプロパティです。 既定では、このプロパティは、"aspNetDisabled"を返します。  
  
 <xref:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute%2A> を返す派生クラスでオーバーライドされる `false`, の値、 <xref:System.Web.UI.WebControls.WebControl.DisabledCssClass%2A> の値としてプロパティを表示、 `class` コントロールの HTML 要素の属性です。 その場合、値がある場合、 <xref:System.Web.UI.WebControls.WebControl.CssClass%2A> プロパティには、両方の CSS クラスは、レンダリングされた HTML 要素に適用されます。`class` 属性の値では、 <xref:System.Web.UI.WebControls.WebControl.DisabledCssClass%2A> プロパティの後の値、 <xref:System.Web.UI.WebControls.WebControl.CssClass%2A> プロパティには、スペースで区切っています。  
  
 このプロパティは静的でのみに設定できることを意味する、 <xref:System.Web.UI.WebControls.WebControl> クラスです。 設定すると、どのような値は、Web アプリケーションのすべてのコントロールに使用されます。 個々 のコントロールにさまざまな値を指定することはできません。  
  
 通常でコードを配置する"aspNetDisabled"の既定値から別のクラス名を使用する場合、 `Application_Start` の Global.asax ファイルは、次の例のようにメソッド。  
  
```vb  
Private Sub Application_Start(  
    ByVal sender As Object, ByVal e As EventArgs)  
    WebControl.DisabledCssClass = "customDisabledClassName"  
End Sub  
```  
  
```csharp  
void Application_Start(object sender, EventArgs e)  
{  
    WebControl.DisabledCssClass = "customDisabledClassName";  
}  
```  
  
   
  
## 例  
 次の例では、レンダリングされた HTML を示しますを無効にするに <xref:System.Web.UI.WebControls.Label> タイミングを制御、 <xref:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute%2A> プロパティは `false`, ときに、 <xref:System.Web.UI.WebControls.WebControl.DisabledCssClass%2A> プロパティには、既定値で、いつ、 <xref:System.Web.UI.WebControls.WebControl.CssClass%2A> プロパティが空です。  
  
 `<span id="Label1" class="aspNetDisabled">Test</span>`  
  
 いる点を除き、例を次に同じ条件でレンダリングされる HTML、 <xref:System.Web.UI.WebControls.WebControl.CssClass%2A> "SampleStyle"の値を持つプロパティ`:`  
  
 `<span id="Label1" class="aspNetDisabled SampleStyle">Test</span>`  
  
 詳細については、<xref:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute%2A> プロパティを参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.RenderingCompatibility" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Enabled" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または Web サーバー コントロールが有効になっているかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> コントロールが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Web.UI.WebControls.WebControl.Enabled%2A> にコントロールのプロパティが設定されている `false`, 、このコントロールが通常淡色表示されます。 コントロールが入力要素の場合は、ブラウザーには、ユーザーがクリックするか、入力ができないようにします。 サーバー コントロールにレンダリングされる HTML 要素マークが付けられた設定を無効にその `disabled` 属性または CSS `class` 属性です。 詳細については、<xref:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute%2A> および <xref:System.Web.Configuration.PagesSection.ControlRenderingCompatibilityVersion%2A> を参照してください。  
  
 このプロパティは、コントロールの階層構造を反映します。 コンテナー コントロールを無効にした場合は、そのコンテナー内の子コントロールも無効です。 詳細については、<xref:System.Web.UI.WebControls.WebControl.IsEnabled%2A> プロパティを参照してください。  
  
> [!NOTE]
>  カスタム複合コントロールでこの継承の動作は、その子コントロールが作成されていないコントロールには適用されません。 設定するか、子の有効状態のコントロールを作成または上書きしたとき、 <xref:System.Web.UI.WebControls.WebControl.Enabled%2A> プロパティを呼び出して、 <xref:System.Web.UI.Control.EnsureChildControls%2A> メソッドです。  
  
> [!NOTE]
>  コントロールを無効にすると、ブラウザー UI を通じた、ユーザーがコントロールとの対話のみ防ぐことができます。 ユーザーがページ上のコントロールが無効になっている場合でも、そのページによって処理されるポストバックを送信する要求を作成することができます。 ポストバック要求を処理する前に、コントロールが有効になっていると表示があることを確認します。  
  
 すべてのコントロールは、このプロパティをサポートします。 詳細については、個々 のコントロールを参照してください。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次の例では、有効および無効にする方法、 <xref:System.Web.UI.WebControls.TextBox> から継承されたコントロール、 <xref:System.Web.UI.WebControls.WebControl> を設定して基本クラス、その <xref:System.Web.UI.WebControls.WebControl.Enabled%2A> プロパティ プログラムを使用しています。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[Classic WebControl.Enabled Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.Enabled Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.Enabled Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.Enabled Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Control.EnsureChildControls" />
        <altmember cref="P:System.Web.UI.Control.RenderingCompatibility" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Enabled" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableTheming">
      <MemberSignature Language="C#" Value="public override bool EnableTheming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableTheming" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.EnableTheming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはこのコントロールにテーマを適用するかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> テーマを使用するにはそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebControl.EnableTheming%2A> プロパティは、指定したコントロールのテーマが有効かどうかを示します。 ときに、 <xref:System.Web.UI.WebControls.WebControl.EnableTheming%2A> プロパティは、 `true`, 、コントロール スキンを適用するアプリケーションのテーマのディレクトリが検索されます。 特定のコントロールのスキンがテーマ ディレクトリに存在しない場合、スキンは適用されません。  
  
 ときに、 <xref:System.Web.UI.WebControls.WebControl.EnableTheming%2A> プロパティは、 `false`, 、テーマ ディレクトリは検索されませんおよびの内容、 <xref:System.Web.UI.WebControls.WebControl.SkinID%2A> プロパティは使用されません。  
  
 オーバーライド、 <xref:System.Web.UI.WebControls.WebControl.EnableTheming%2A> 値の親コントロールまたはコントロールを含むページで設定します。 たとえば、親コントロールがある場合、 <xref:System.Web.UI.WebControls.WebControl.EnableTheming%2A> プロパティに設定 `false`, を設定して、親内に含まれる子コントロールにテーマを選択的に適用できます、 <xref:System.Web.UI.WebControls.WebControl.EnableTheming%2A> プロパティを `true` 個々 の子コントロールにします。  
  
 テーマは、ページ、コンテナー、または制御レベルで有効にすることができます。 テーマは、ページまたはコンテナー レベルで無効である場合は、ページまたはコンテナーに含まれるすべてのコントロールのテーマが無効です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.EnableTheming" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.SkinID" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FontInfo Font { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FontInfo Font" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FontInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web サーバー コントロールに関連付けられているフォントのプロパティを取得します。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.FontInfo" /> Web サーバー コントロールのフォントのプロパティを表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.Font%2A> プロパティを Web サーバー コントロールのフォント プロパティを指定します。 このプロパティが含まれていますサブプロパティ アクセス可能なには宣言の形式で `Property-Subproperty` \(たとえば `Font-Bold`\) の形式でプログラムを使用して、または `Property.Subproperty` \(たとえば `Font.Bold`\)。  
  
 1 つを除くすべてのサブプロパティは、Microsoft Internet Explorer のすべてのコントロール、version 4 より前のブラウザーで表示されます。 : <xref:System.Web.UI.WebControls.FontInfo.Bold%2A>, 、<xref:System.Web.UI.WebControls.FontInfo.Italic%2A>, 、<xref:System.Web.UI.WebControls.FontInfo.Name%2A>, 、<xref:System.Web.UI.WebControls.FontInfo.Names%2A>, 、<xref:System.Web.UI.WebControls.FontInfo.Strikeout%2A>, 、<xref:System.Web.UI.WebControls.FontInfo.Underline%2A>, 、および <xref:System.Web.UI.WebControls.FontInfo.Size%2A> \(フォント サイズはなど、名前付きのみが、 `Small`, 、`Smaller`, と続きますは動作\)。  
  
> [!NOTE]
>  これらのサブプロパティは、Microsoft Internet Explorer version 4 より前のブラウザーでレンダリング、レンダリングされる HTML はそれ以降のブラウザーとは異なるです。 スタイル属性としてレンダリングでは、代わりにこれらのサブプロパティとしてレンダリングされます、HTML 要素など `<b>` と `<font>`です。  
  
 すべてのコントロールの以前のブラウザーで表示されない 1 つのサブプロパティが <xref:System.Web.UI.WebControls.FontInfo.Overline%2A>です。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Web.UI.WebControls.WebControl.Font%2A> からフォント情報を収集するプロパティ、 <xref:System.Web.UI.WebControls.Label> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[Classic WebControl.Font Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.Font Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.Font Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.Font Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="T:System.Web.UI.WebControls.FontInfo" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.WebColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または Web サーバー コントロールの前景色 \(通常は、テキストの色\) を設定します。</summary>
        <value>A <see cref="T:System.Drawing.Color" /> コントロールの前景色を表します。 既定値は、<see cref="F:System.Drawing.Color.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> プロパティを Web サーバー コントロールの前景色を指定します。 通常、前景色はテキストの色を表します。 このプロパティはブラウザーに表示 Microsoft Internet Explorer のすべてのコントロール、version 4 より前の手順を除く、 <xref:System.Web.UI.WebControls.Image>, 、<xref:System.Web.UI.WebControls.AdRotator>, 、<xref:System.Web.UI.WebControls.HyperLink> と <xref:System.Web.UI.WebControls.LinkButton>です。  
  
> [!NOTE]
>  Microsoft Internet Explorer version 4 より前のブラウザーでは、このプロパティとしてレンダリング `<font>` タグ。  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Table> から継承されたコントロール、 <xref:System.Web.UI.WebControls.WebControl> 基本クラスです。  
  
 [!code-csharp[Classic WebControl.ForeColor Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.ForeColor Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.ForeColor Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.ForeColor Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="HasAttributes">
      <MemberSignature Language="C#" Value="public bool HasAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.HasAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに属性を設定するかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> コントロールに設定されている属性がある場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebControl.HasAttributes%2A> プロパティを返します。 `true` ときに、 <xref:System.Web.UI.WebControls.WebControl> インスタンスには属性の名前\/値ペア。 属性のペアは、プロパティまたは表示状態のいずれかに設定できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Attributes" />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.Unit Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit Height" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Web.UI.WebControls.Unit), "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または Web サーバー コントロールの高さを設定します。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.Unit" /> コントロールの高さを表します。 既定値は、<see cref="F:System.Web.UI.WebControls.Unit.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.Height%2A> プロパティを Web サーバー コントロールの高さを指定します。  
  
> [!NOTE]
>  このプロパティは Microsoft Internet Explorer version 4 より前のすべてのコントロールのブラウザーでは表示されません。 以前のブラウザーでこのプロパティにレンダリングされないコントロールが含まれる <xref:System.Web.UI.WebControls.Label>, 、<xref:System.Web.UI.WebControls.HyperLink>, 、<xref:System.Web.UI.WebControls.LinkButton>, 、および検証コントロールです。<xref:System.Web.UI.WebControls.CheckBoxList>, 、<xref:System.Web.UI.WebControls.RadioButtonList> と <xref:System.Web.UI.WebControls.DataList> も以前のブラウザーでこのプロパティにレンダリングされないときに、 `RepeatLayout` プロパティに設定されて `RepeatLayout.Flow`します。 さらのユニットの種類のみ `Pixel` と `Percentage` 以前のブラウザーでサポートされています。  
  
 このプロパティは、非標準の HTML は、Web サーバーなどのコントロール項目の表示をテーブルとして <xref:System.Web.UI.WebControls.Table> と <xref:System.Web.UI.WebControls.DataGrid>, がサポートされていないこのプロパティ ブラウザー Microsoft Internet Explorer version 4 より前です。  
  
> [!NOTE]
>  設定する、 <xref:System.Web.UI.WebControls.WebControl.Height%2A> 単位にプロパティを型の既定以外の `Pixel`, 、ユニットの種類に固有新しいユニットの種類を作成する必要があります。 例については、コントロールの設定に <xref:System.Web.UI.WebControls.WebControl.Height%2A> プロパティ、100 の割合の値を次を実行できます。  
>   
>  `myWebControl.Width = Unit.Percentage(100);`  
>   
>  詳細については、使用可能なユニットの種類、 <xref:System.Web.UI.WebControls.WebControl.Height%2A> プロパティを参照してください、 <xref:System.Web.UI.WebControls.Unit> クラスです。  
  
   
  
## 例  
 次の例では、宣言によって設定する方法、 <xref:System.Web.UI.WebControls.WebControl.Height%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Table> から継承されたコントロール、 <xref:System.Web.UI.WebControls.WebControl> 基本クラスです。  
  
 [!code-csharp[Classic WebControl.Height Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.Height Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.Height Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.Height Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">高さは、負の値に設定されました。</exception>
        <altmember cref="T:System.Web.UI.WebControls.Style" />
        <altmember cref="T:System.Web.UI.WebControls.Unit" />
        <altmember cref="T:System.Web.UI.WebControls.Label" />
        <altmember cref="T:System.Web.UI.WebControls.HyperLink" />
        <altmember cref="T:System.Web.UI.WebControls.LinkButton" />
        <altmember cref="T:System.Web.UI.WebControls.CheckBoxList" />
        <altmember cref="T:System.Web.UI.WebControls.RadioButtonList" />
        <altmember cref="T:System.Web.UI.WebControls.DataList" />
        <altmember cref="T:System.Web.UI.WebControls.RepeatLayout" />
        <altmember cref="T:System.Web.UI.WebControls.Table" />
        <altmember cref="T:System.Web.UI.WebControls.DataGrid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="protected bool IsEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Web.UI.WebControls.WebControl" /> オブジェクトを有効にするそれ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは読み取り専用プロパティです。 設定する場合は、コントロールを無効にするには、その <xref:System.Web.UI.WebControls.WebControl.Enabled%2A> プロパティを `false`します。  
  
 別のコントロールが含まれていない場合の値を制御、 <xref:System.Web.UI.WebControls.WebControl.IsEnabled%2A> プロパティは、の値と同じでは常に、 <xref:System.Web.UI.WebControls.WebControl.Enabled%2A> プロパティです。  
  
 <xref:System.Web.UI.WebControls.WebControl.IsEnabled%2A> プロパティとは異なる値を持つ、 <xref:System.Web.UI.WebControls.WebControl.Enabled%2A> プロパティ、コントロールが別のコントロールの子である場合、次のすべての状況に該当する場合。  
  
-   値、 <xref:System.Web.UI.WebControls.WebControl.Enabled%2A> プロパティまたは <xref:System.Web.UI.WebControls.WebControl.IsEnabled%2A> 親コントロールのプロパティは `false`です。  
  
-   <xref:System.Web.UI.WebControls.WebControl.Enabled%2A> に子コントロールのプロパティが設定されている `true`します。  
  
 このような状況では、子コントロールは、親コントロールの無効状態を継承します。<xref:System.Web.UI.WebControls.WebControl.IsEnabled%2A> した子コントロールのプロパティを返します `false` コントロールが無効である場合でも、子コントロールが明示的に無効にしていない設定を示すためにその <xref:System.Web.UI.WebControls.WebControl.Enabled%2A> プロパティを `false`します。 親コントロール自体があります、 <xref:System.Web.UI.WebControls.WebControl.Enabled%2A> プロパティに設定 `true` しますが、可能性があります無効の状態をその親から継承したりします。  
  
 ASP.NET サーバー コントロールの HTML 要素をレンダリングするときにその要素はマークを設定して無効になっている、 `disabled` 属性または CSS `class` 属性です。 詳細については、<xref:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute%2A> および <xref:System.Web.Configuration.PagesSection.ControlRenderingCompatibilityVersion%2A> を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.RenderingCompatibility" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Enabled" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">復元するコントロールの状態を表すオブジェクト。</param>
        <summary>
          <see cref="M:System.Web.UI.WebControls.WebControl.SaveViewState" /> メソッドによって保存された前回の要求からビューステート情報を復元します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、主に、.NET Framework インフラストラクチャによって使用され、コードから直接使用するものではありません。 ただし、コントロールの開発者は、カスタム サーバー コントロールがそのビューステートを復元する方法を指定するには、このメソッドをオーバーライドすることができます。 詳細については、「[ASP.NET State Management Overview](http://msdn.microsoft.com/ja-jp/0218d965-5d30-445b-b6a6-8870e70e63ce)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.WebControl.LoadViewState%2A> メソッドは、前の中に保存されたビューステート情報を復元 <xref:System.Web.UI.WebControls.WebControl.SaveViewState%2A> 要求します。<xref:System.Web.UI.WebControls.WebControl> ベースの上書きクラス <xref:System.Web.UI.Control.LoadViewState%2A> を処理するメソッド、 <xref:System.Web.UI.Control.ViewState%2A>, 、<xref:System.Web.UI.WebControls.WebControl.Style%2A>, 、および <xref:System.Web.UI.WebControls.WebControl.Attributes%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.ViewState" />
        <altmember cref="P:System.Web.UI.Control.IsTrackingViewState" />
      </Docs>
    </Member>
    <Member MemberName="MergeStyle">
      <MemberSignature Language="C#" Value="public void MergeStyle (System.Web.UI.WebControls.Style s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MergeStyle(class System.Web.UI.WebControls.Style s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.MergeStyle(System.Web.UI.WebControls.Style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Web.UI.WebControls.Style" />
      </Parameters>
      <Docs>
        <param name="s">A <see cref="T:System.Web.UI.WebControls.Style" /> コピーされるスタイルを表します。</param>
        <summary>コピーを Web に指定したスタイルの空白以外の要素を制御する、コントロールの既存のスタイル要素を上書きしません。 このメソッドは、主にコントロールの開発者によって使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.WebControl.MergeStyle%2A> のスタイルが設定されたスタイルを結合する方法、 <xref:System.Web.UI.WebControls.DataGrid> コントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[WebControlMergeStyle\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebControlMergeStyle/CS/webcontrolmergestylecs.aspx#1)]
 [!code-vb[WebControlMergeStyle\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebControlMergeStyle/VB/webcontrolmergestylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.Web.UI.HtmlTextWriter" /> コントロールの内容を受け取るオブジェクトです。</param>
        <summary>指定された HTML ライターにコントロールを描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebControl.Render%2A> メソッドは、主にコントロールの開発者によって使用されます。  
  
 <xref:System.Web.UI.WebControls.WebControl.Render%2A> メソッドを指定された Web コントロールを送信する <xref:System.Web.UI.HtmlTextWriter> インスタンス。 カスタム サーバー コントロールをクライアントに送信するには、このメソッドをオーバーライドします。  
  
 <xref:System.Web.UI.WebControls.WebControl.Render%2A> メソッドを最初に呼び出す、 <xref:System.Web.UI.WebControls.WebControl.RenderBeginTag%2A> メソッド、 <xref:System.Web.UI.WebControls.WebControl.RenderContents%2A> メソッド、および最後に、 <xref:System.Web.UI.WebControls.WebControl.RenderEndTag%2A> コントロールをクライアントに送信するメソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderBeginTag">
      <MemberSignature Language="C#" Value="public virtual void RenderBeginTag (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderBeginTag(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.RenderBeginTag(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">HTML コンテンツをクライアントに表示する出力ストリームを表す <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>指定したライターにコントロールの開始タグ、HTML をレンダリングします。 このメソッドは、主にコントロールの開発者によって使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これが他のコントロールが開くと、Web サーバー コントロールのタグと終了タグの間に複数のコントロールをレンダリングするように公開されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebControl.RenderEndTag(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="M:System.Web.UI.WebControls.WebControl.RenderContents(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected virtual void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">HTML コンテンツをクライアントに表示する出力ストリームを表す <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>指定されたライターにコントロールの内容を表示します。 このメソッドは、主にコントロールの開発者によって使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバーライド、 <xref:System.Web.UI.WebControls.WebControl.RenderContents%2A> 開始と終了タグの間、コントロールの内容を表示します。 このメソッドの既定の実装は、子コントロールを表示します。  
  
 基数を呼び出す必要がありますか、コントロールに子コントロールがある場合は、 <xref:System.Web.UI.WebControls.WebControl.RenderContents%2A> メソッドまたは呼び出し、 <xref:System.Web.UI.Control.RenderChildren%2A> 子コントロールのテキスト ライターにレンダリングする時点。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebControl.RenderBeginTag(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="M:System.Web.UI.WebControls.WebControl.RenderEndTag(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="RenderEndTag">
      <MemberSignature Language="C#" Value="public virtual void RenderEndTag (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderEndTag(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.RenderEndTag(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">HTML コンテンツをクライアントに表示する出力ストリームを表す <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>指定されたライターに、コントロールのタグを閉じる HTML をレンダリングします。 このメソッドは、主にコントロールの開発者によって使用されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これが他のコントロールが開くと、Web サーバー コントロールのタグと終了タグの間に複数のコントロールをレンダリングするように公開されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebControl.RenderBeginTag(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="M:System.Web.UI.WebControls.WebControl.RenderContents(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.SaveViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="M:System.Web.UI.WebControls.Style.TrackViewState" /> メソッドが呼び出された後に変更された状態を保存します。</summary>
        <returns>コントロールの現在のビュー ステートを格納するオブジェクト。このコントロールに関連付けられたビュー ステートがない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebControl.SaveViewState%2A> メソッドは、主にコントロールの開発者によって使用されます。  
  
 ビュー ステートは、サーバー コントロールのプロパティの累積的な値です。 これらの値で自動的に配置、 <xref:System.Web.UI.Control.ViewState%2A> インスタンスであるサーバー コントロールのプロパティの <xref:System.Web.UI.StateBag> クラスです。<xref:System.Web.UI.Control.ViewState%2A> 保存状態の段階のサーバー コントロールのライフ サイクルの後に、プロパティの値が文字列オブジェクトに永続化し、します。 詳細については、「[Introduction to the ASP.NET Page Life Cycle](http://msdn.microsoft.com/ja-jp/7949d756-1a79-464e-891f-904b1cfc7991)」を参照してください。  
  
 この文字列オブジェクトが、非表示の html 形式で格納されている変数と、クライアントに返されるビューステートを保存すると `input` 要素。 カスタム サーバー コントロールを作成するときに、オーバーライドすることで効率を向上できます、 <xref:System.Web.UI.WebControls.WebControl.SaveViewState%2A> メソッドと変更、 <xref:System.Web.UI.Control.ViewState%2A> サーバー コントロールのプロパティです。 詳細については、「[ASP.NET State Management Overview](http://msdn.microsoft.com/ja-jp/0218d965-5d30-445b-b6a6-8870e70e63ce)」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.ViewState" />
        <altmember cref="P:System.Web.UI.Control.IsTrackingViewState" />
      </Docs>
    </Member>
    <Member MemberName="SkinID">
      <MemberSignature Language="C#" Value="public override string SkinID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SkinID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.SkinID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに適用するスキンを取得または設定します。</summary>
        <value>コントロールに適用するスキンの名前。 既定値は、<see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コントロールで使用できるスキンは、テーマ ディレクトリ内の 1 つまたは複数のスキン ファイルに格納されます。<xref:System.Web.UI.WebControls.WebControl.SkinID%2A> プロパティには、これらのコントロールに適用するスキンのどれを指定します。 スキンは、特定のコントロールに固有さまざまな種類のコントロール間のスキンの設定を共有することはできません。  
  
 設定しない場合、 <xref:System.Web.UI.WebControls.WebControl.SkinID%2A> プロパティには、コントロールを使用して既定のスキンが定義されている場合。 などの場合、スキンなし ID の定義、 <xref:System.Web.UI.WebControls.Image> コントロールすべてにそのスキンを適用し、 <xref:System.Web.UI.WebControls.Image> コントロールを明示的に参照しない ID を使用して、スキンおよびテーマを無効にするには設定されていません。 ID を使用して、スキンが定義されている場合、 <xref:System.Web.UI.WebControls.Image> コントロールにのみそのスキンが適用し、 <xref:System.Web.UI.WebControls.Image> の制御 <xref:System.Web.UI.WebControls.WebControl.SkinID%2A> その ID に設定されています。  
  
 テーマ ディレクトリ内のスキン ファイルは、指定したスキンを含んでいない場合に <xref:System.Web.UI.WebControls.WebControl.SkinID%2A>, 、 <xref:System.ArgumentException> 実行時に例外がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定されたスキン、 <see cref="P:System.Web.UI.WebControls.WebControl.SkinID" /> テーマのプロパティが存在しません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.WebControl.EnableTheming" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Web.UI.CssStyleCollection Style { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.CssStyleCollection Style" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.CssStyleCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web サーバー コントロールの外側のタグにスタイル属性としてレンダリングされるテキスト属性のコレクションを取得します。</summary>
        <value>A <see cref="T:System.Web.UI.CssStyleCollection" /> Web サーバー コントロールの外側のタグをレンダリングする HTML のスタイル属性を格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.Style%2A> Web サーバー コントロールの外側のタグの表示スタイル属性を管理するコレクション。 このプロパティは、すべてのコントロールのすべてのブラウザーで表示されます。  
  
> [!NOTE]
>  スタイル属性をサポートしないブラウザーにレンダリングされる HTML は無視します。  
  
 厳密に型指定のスタイル プロパティによって設定されたスタイル値 \(たとえば、 `BackColor="Red"`\) このコレクション内の対応する値を自動的にオーバーライドします。  
  
 このコレクション内の値は、厳密に型指定のスタイル プロパティによって自動的には反映されません。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Web.UI.WebControls.WebControl.Style%2A> プロパティを表示するか、 <xref:System.Web.UI.WebControls.Label> ページへのコントロールです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[Classic WebControl.Style Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.Style Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.Style Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.Style Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.CssStyleCollection" />
      </Docs>
    </Member>
    <Member MemberName="SupportsDisabledAttribute">
      <MemberSignature Language="C#" Value="public virtual bool SupportsDisabledAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDisabledAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの <see cref="P:System.Web.UI.WebControls.WebControl.IsEnabled" /> プロパティが <see langword="false" /> の場合、レンダリングされた HTML 要素の <see langword="disabled" /> 属性を "無効" に設定するかどうかを示す値を取得します。</summary>
        <value>常に <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生クラスでは、このプロパティは、コントロールが無効になっているときに ASP.NET がそのコントロールの HTML をどのように描画するかを示します。  
  
## 無効にする ASP.NET Web コントロールします。  
 ときに、 <xref:System.Web.UI.WebControls.WebControl.Enabled%2A> に ASP.NET コントロールのプロパティが設定されている `false` \(つまり、コントロールが無効にすると\)、目的は、ASP.NET がページで、コントロールの表示が無効な状態 \(通常は淡色表示\) で表示する必要があります。 親コントロールが無効になっているもにはそのコントロールの子は、無効になっているとに表示されます。 その場合、子コントロールの <xref:System.Web.UI.WebControls.WebControl.IsEnabled%2A> にプロパティが設定されている `false`, 場合でも、その <xref:System.Web.UI.WebControls.WebControl.Enabled%2A> プロパティを設定することがあります `true`します。  
  
 ASP.NET 3.5 およびとコントロールの以前のバージョンで <xref:System.Web.UI.WebControls.WebControl.IsEnabled%2A> プロパティは、 `false`, 、ASP.NET のセット、 `disabled` コントロールのレンダリングする HTML 要素の属性を"disabled"です。 ただしでは、HTML 4.01 標準、 `disabled` 属性はユーザー入力に使用される特定の要素にのみです。 たとえば、 `disabled` の属性が許可されて `input` 、要素のではなく `span` 要素。  
  
 ほとんどのブラウザーでは、無効になっている既定の外観をサポートされている表示のみの要素に `disabled` 属性です。 ただし、HTML 標準に準拠するのには、既定では、ASP.NET 4 には、無効な属性を省略します。  
  
## SupportsDisabledAttribute プロパティが使用する方法  
 場合、 <xref:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute%2A> プロパティは、 `true`, 、ASP.NET では、 `disabled` 属性のコントロールが無効にするとします。 場合は、このプロパティは `false`, 、ASP.NET では、 `class` 属性のコントロールが無効にするとします。  
  
 派生クラスを返すには、このプロパティをオーバーライドする `false` 、次の条件に該当する場合。  
  
-   コントロールのレンダリングをサポートしない HTML 要素、 `disabled` 属性です。  
  
-   <xref:System.Web.UI.Control.RenderingCompatibility%2A> プロパティ 4.0 より低い ASP.NET のバージョン番号を示します。  
  
 <xref:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute%2A> プロパティで限りませんが、コントロールに対して表示される HTML 要素をサポートするかどうか \(許可する\)、 `disabled` 属性です。 コントロールの場合 <xref:System.Web.UI.Control.RenderingCompatibility%2A> プロパティ 4.0 では、コントロールの値より低い ASP.NET のバージョン番号を示します <xref:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute%2A> プロパティが返す可能性があります `true` 、レンダリングされる HTML がサポートされていない場合でも、 `disabled` 属性です。  
  
## 無効なコントロールとの下位互換性  
 Visual Studio を使用して、以前のバージョンから、ASP.NET 4 に Web プロジェクトをアップグレードすると、Visual Studio は自動的に設定、 `controlRenderingCompatibilityVersion` Web.config ファイル内の属性 \(設定する、 <xref:System.Web.UI.Control.RenderingCompatibility%2A> プロパティ\) を以前のバージョン番号。<xref:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute%2A> プロパティは常に返します `true` ときに、 <xref:System.Web.UI.Control.RenderingCompatibility%2A> プロパティが 4.0 よりも低い場合、これが原因で、以前のバージョンの場合と同様に、無効になっているコントロールの HTML を表示する Web コントロールです。 ASP.NET 4 で導入されたアルゴリズムを使用して HTML をレンダリングするアップグレード済みの Web サイトを設定する場合は、変更または削除、 `controlRenderingCompatibilityVersion` 属性です。 詳細については、<xref:System.Web.UI.Control.RenderingCompatibility%2A> プロパティを参照してください。  
  
## CSS を使用して、無効な外観を設定します。  
 場合、 <xref:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute%2A> コントロールのプロパティは、 `false` 、コントロールが無効にすると ASP.NET のセット、 `class` の値にレンダリングされた HTML 要素の属性、 <xref:System.Web.UI.WebControls.WebControl.DisabledCssClass%2A?displayProperty=fullName> プロパティです。 既定値、 <xref:System.Web.UI.WebControls.WebControl.DisabledCssClass%2A?displayProperty=fullName> プロパティは、"aspNetDisabled"です。  
  
 無効になっているコントロールの無効な外観を提供するには、値によって表されるクラスの CSS 規則を定義する必要があります、 <xref:System.Web.UI.WebControls.WebControl.DisabledCssClass%2A?displayProperty=fullName> プロパティです。  
  
 コントロールがある 1 つ以上の値ためにレンダリングされる HTML 要素の `class` 属性の値がある場合、 <xref:System.Web.UI.WebControls.WebControl.CssClass%2A> プロパティです。 詳細については、<xref:System.Web.UI.WebControls.WebControl.DisabledCssClass%2A> プロパティを参照してください。  
  
   
  
## 例  
 次の例は、使用不可のマークアップを示します <xref:System.Web.UI.WebControls.Label> コントロール。  
  
 `<asp:Label id="Label1" runat="server" Text="Test" Enabled="false"/>`  
  
 ASP.NET 3.5 およびそれ以前のバージョンでは、このマークアップは、次の HTML を表示します。  
  
 `<span id="Label1" disabled="disabled">Test</span>`  
  
 ASP.NET 4 で場合の値、 <xref:System.Web.UI.Control.RenderingCompatibility%2A> プロパティは 4.0 以降、場合に、 <xref:System.Web.UI.WebControls.WebControl.DisabledCssClass%2A> プロパティが既定値に設定されている、次の HTML の共通のマークアップを表示します。  
  
 `<span id="Label1" class="aspNetDisabled">Test</span>`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.RenderingCompatibility" />
        <altmember cref="P:System.Web.Configuration.PagesSection.ControlRenderingCompatibilityVersion" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.DisabledCssClass" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Enabled" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IAttributeAccessor.GetAttribute">
      <MemberSignature Language="C#" Value="string IAttributeAccessor.GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Web.UI.IAttributeAccessor.GetAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#GetAttribute(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">属性の名前。</param>
        <summary>指定した名前の Web コントロールの属性を取得します。</summary>
        <returns>属性の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebControl.System%23Web%23UI%23IAttributeAccessor%23GetAttribute%2A> メソッドは、明示的なインターフェイス メンバーの実装です。 使用できる場合にのみのインスタンス、 <xref:System.Web.UI.WebControls.WebControl> にクラスをキャスト、 <xref:System.Web.UI.IAttributeAccessor> インターフェイスです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Attributes" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IAttributeAccessor.SetAttribute">
      <MemberSignature Language="C#" Value="void IAttributeAccessor.SetAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IAttributeAccessor.SetAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#SetAttribute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">属性の名前\/値ペアの名前の構成要素。</param>
        <param name="value">属性の名前\/値ペアの値の構成要素。</param>
        <summary>Web コントロールの属性を指定した名前と値に設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebControl.System%23Web%23UI%23IAttributeAccessor%23SetAttribute%2A> メソッドは、明示的なインターフェイス メンバーの実装です。 使用できる場合にのみのインスタンス、 <xref:System.Web.UI.WebControls.WebControl> にクラスをキャスト、 <xref:System.Web.UI.IAttributeAccessor> インターフェイスです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.WebControl.Attributes" />
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public virtual short TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 TabIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.TabIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または Web サーバー コントロールのタブ インデックスを設定します。</summary>
        <value>Web サーバー コントロールのタブ インデックス。 既定値は <see langword="0" /> です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.TabIndex%2A> プロパティを指定または Web フォーム ページ上の Web サーバー コントロールのタブ インデックスを確認します。 押すと、 `Tab` キー、Web サーバー コントロールがフォーカスを受け取る順序に応じて、 <xref:System.Web.UI.WebControls.WebControl.TabIndex%2A> 各コントロールのプロパティです。 ページが最初に読み込まれると、最初の項目を受信するフォーカス、 `Tab` キーが押されるアドレス バーします。 次に、Web フォーム ページのコントロールを tab キーを押すを昇順の値に基づいて、 <xref:System.Web.UI.WebControls.WebControl.TabIndex%2A> 各コントロールのプロパティです。 複数のコントロールは、同じタブ インデックスを共有している場合、コントロールは Web フォーム ページで宣言されている順序でフォーカスを受け取る。 最後に、0 のタブ インデックスを持つコントロールでは、宣言された順序でタブ付きします。  
  
> [!NOTE]
>  0 以外のタブ インデックスを持つコントロールだけが表示されます、 `tabindex` 属性です。  
  
 タブ オーダーからの Web サーバー コントロールを削除するには設定して、 <xref:System.Web.UI.WebControls.WebControl.TabIndex%2A> プロパティを負の値にします。  
  
> [!NOTE]
>  Internet Explorer 4 でのみ、後で、このプロパティがサポートされています。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Web.UI.WebControls.WebControl.TabIndex%2A> のプロパティ、 <xref:System.Web.UI.WebControls.WebControl> ページ上のコントロールのタブ オーダーを設定します。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[Classic WebControl.TabIndex Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.TabIndex Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.TabIndex Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.TabIndex Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定したタブ インデックスは、\-32768 ~ 32767 の間はありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.HtmlTextWriterTag TagKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Web.UI.HtmlTextWriterTag" /> この Web サーバー コントロールに対応する値。 このプロパティは、主にコントロールの開発者によって使用されます。</summary>
        <value>
          <see cref="T:System.Web.UI.HtmlTextWriterTag" /> 列挙値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.TagKey%2A> を決定するプロパティ、 <xref:System.Web.UI.HtmlTextWriterTag> この Web サーバー コントロールに関連付けられている値。 このプロパティは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterTag" />
      </Docs>
    </Member>
    <Member MemberName="TagName">
      <MemberSignature Language="C#" Value="protected virtual string TagName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TagName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.TagName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのタグの名前を取得します。 このプロパティは、主にコントロールの開発者によって使用されます。</summary>
        <value>コントロールのタグの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.TagName%2A> コントロール タグの名前を確認するには、この Web サーバー コントロールに関連付けられています。 このプロパティは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public virtual string ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または Web サーバー コントロールにマウス ポインターを合わせたときに表示されるテキストを設定します。</summary>
        <value>Web サーバー コントロールにマウス ポインターを合わせたときに表示されるテキスト。 既定値は、<see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.ToolTip%2A> プロパティを Web サーバー コントロールにマウス ポインターを合わせたときに表示されるカスタム テキストを指定します。  
  
> [!NOTE]
>  このプロパティは、すべてのブラウザーにレンダリングされます。 ただし、Microsoft Internet Explorer だけはツールヒントとしてこのプロパティを表示します。 その他のすべてのブラウザーには、このプロパティは無視します。  
  
 このプロパティの値を設定すると、デザイナーのツールを使用してリソース ファイルに自動的に保存できます。 詳細については、<xref:System.ComponentModel.LocalizableAttribute> および [ASP.NET Globalization and Localization](http://msdn.microsoft.com/ja-jp/8ef3838e-9d05-4236-9dd0-ceecff9df80d) を参照してください。  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Web.UI.WebControls.WebControl.ToolTip%2A> プロパティを <xref:System.Web.UI.WebControls.Button> から継承されるコントロール、 <xref:System.Web.UI.WebControls.WebControl> 基本クラスです。  
  
> [!NOTE]
>  次のコード サンプルでは、単一ファイル コード モデルを使用して、分離コード ファイルに直接コピーすると、正常に動作しない可能性があります。 このコード サンプルは、.aspx 拡張子を持つ空のテキスト ファイルにコピーする必要があります。 Web フォームのコード モデルの詳細については、次を参照してください。 [ASP.NET Web Page Code Model](http://msdn.microsoft.com/ja-jp/81b13e7a-b95b-4285-906f-d2dd77411417)します。  
  
 [!code-csharp[Classic WebControl.ToolTip Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.ToolTip Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.ToolTip Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.ToolTip Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebControl.TrackViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトの保存できるようにビュー ステートへの変更を追跡するために、コントロール <see cref="P:System.Web.UI.Control.ViewState" /> プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.WebControl.TrackViewState%2A> メソッドは、主にコントロールの開発者によって使用されます。  
  
 <xref:System.Web.UI.WebControls.WebControl.TrackViewState%2A> を追跡したり保存をコントロールのビュー ステートに変更を開始する開始位置をマークします。<xref:System.Web.UI.WebControls.WebControl.TrackViewState%2A> メソッドは自動的に ASP.NET サーバー コントロールが初期化されるときです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.ViewState" />
        <altmember cref="P:System.Web.UI.Control.IsTrackingViewState" />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.Unit Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit Width" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebControl.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Web.UI.WebControls.Unit), "")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web サーバー コントロールの幅を取得または設定します。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.Unit" /> コントロールの幅を表します。 既定値は、<see cref="F:System.Web.UI.WebControls.Unit.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.WebControl.Width%2A> プロパティを Web サーバー コントロールの幅を指定します。  
  
> [!NOTE]
>  このプロパティは Microsoft Internet Explorer version 4 より前のすべてのコントロールのブラウザーでは表示されません。 以前のブラウザーでこのプロパティにレンダリングされないコントロールが含まれる <xref:System.Web.UI.WebControls.Label>, 、<xref:System.Web.UI.WebControls.HyperLink>, 、<xref:System.Web.UI.WebControls.LinkButton>, 、および検証コントロールです。<xref:System.Web.UI.WebControls.CheckBoxList>, 、<xref:System.Web.UI.WebControls.RadioButtonList> と <xref:System.Web.UI.WebControls.DataList> も以前のブラウザーでこのプロパティにレンダリングされないときに、 `RepeatLayout` プロパティに設定されて `RepeatLayout.Flow`します。 さらのユニットの種類のみ `Pixel` と `Percentage` 以前のブラウザーでサポートされています。  
  
 このプロパティは、非標準の HTML は、Web サーバーなどのコントロール項目の表示をテーブルとして <xref:System.Web.UI.WebControls.Table> と <xref:System.Web.UI.WebControls.DataGrid>, がサポートされていないこのプロパティ ブラウザー Microsoft Internet Explorer version 4 より前です。  
  
> [!NOTE]
>  設定する、 <xref:System.Web.UI.WebControls.WebControl.Width%2A> 単位に宣言によってプロパティを型の既定以外の `Pixel`, 、ユニットの種類に固有新しいユニットの種類を作成する必要があります。 例については、コントロールの設定に <xref:System.Web.UI.WebControls.WebControl.Width%2A> プロパティ、100 の割合の値を次を実行できます。  
>   
>  `myWebControl.width = Unit.Percentage(100);`  
>   
>  詳細については、使用可能なユニットの種類、 <xref:System.Web.UI.WebControls.WebControl.Width%2A> プロパティを参照してください、 <xref:System.Web.UI.WebControls.Unit> クラスです。  
  
   
  
## 例  
 次の例では、宣言によって設定する方法、 <xref:System.Web.UI.WebControls.WebControl.Width%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Table> から継承されたコントロール、 <xref:System.Web.UI.WebControls.WebControl> 基本クラスです。  
  
 [!code-csharp[Classic WebControl.Width Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic WebControl.Width Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic WebControl.Width Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic WebControl.Width Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Web サーバー コントロールの幅は、負の値に設定されました。</exception>
        <altmember cref="T:System.Web.UI.WebControls.Style" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.WebControl" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>