<Type Name="Xml" FullName="System.Web.UI.WebControls.Xml">
  <TypeSignature Language="C#" Value="public class Xml : System.Web.UI.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Xml extends System.Web.UI.Control" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Xml" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DocumentSource")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.WebControls.XmlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false, true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Extensible Stylesheet Language Transformation \(XSLT\) を書式設定または使用せずに、XML ドキュメントを表示します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このトピックの内容  
  
-   [はじめに](#introduction)  
  
-   [XML データを指定します。](#specifying_xml_data)  
  
-   [XSL 変換を指定します。](#specifying_an_xsl_transformation)  
  
-   [宣言構文](#declarative_syntax)  
  
<a name="introduction"></a>   
## はじめに  
 使用して、 <xref:System.Web.UI.WebControls.Xml> 書式設定操作または XSL 変換を使用せず、XML ドキュメントの内容を表示するコントロール。  
  
<a name="specifying_xml_data"></a>   
## XML データを指定します。  
 表示する XML ドキュメントを指定するには、3 つのプロパティのいずれかを設定します。 これら 3 つのプロパティは、表示可能な XML ドキュメントのさまざまな種類を表します。 表示することができます、 <xref:System.Xml.XmlDocument?displayProperty=fullName>, 、XML 文字列、または適切なプロパティを設定して XML ファイルです。 次の表は、XML ドキュメントを指定するためのプロパティを一覧表示します。  
  
|プロパティ|説明|  
|-----------|--------|  
|<xref:System.Web.UI.WebControls.Xml.Document%2A>|XML ドキュメントを使用して、設定、 <xref:System.Xml.XmlDocument?displayProperty=fullName> オブジェクトです。 **Warning:**  このプロパティは今後使用しません。 XML の内容を設定するには、このセクションで示すその他のプロパティのいずれかを使用して、 <xref:System.Web.UI.WebControls.Xml> コントロールです。|  
|<xref:System.Web.UI.WebControls.Xml.DocumentContent%2A>|文字列を使用して XML ドキュメントを設定します。 **Note:**  このプロパティが、開始タグと終了の間のテキストを配置することにより宣言によって設定一般的 `<asp:Xml>` のタグ、 <xref:System.Web.UI.WebControls.Xml> コントロールです。|  
|<xref:System.Web.UI.WebControls.Xml.DocumentSource%2A>|ファイルを使用して XML ドキュメントを設定します。|  
  
> [!NOTE]
>  XML ドキュメントを表示する少なくとも 1 つの XML ドキュメントのプロパティを設定する必要があります。 1 つ以上の XML ドキュメントのプロパティが設定されている場合は、最後のプロパティ セットで参照されている XML ドキュメントが表示されます。 その他のプロパティ内のドキュメントは無視されます。  
  
<a name="specifying_an_xsl_transformation"></a>   
## XSL 変換を指定します。  
 2 つのプロパティのいずれかを設定して、出力ストリームに書き込まれる前に、XML ドキュメントを書式設定する XSL Transformation \(XSLT\) スタイル シートを指定することができます。 2 つのプロパティは、さまざまな種類の XML ドキュメントの書式設定に使用できる XSL 変換スタイル シートを表します。 持つ XML ドキュメントの書式を設定することができます、 <xref:System.Xml.Xsl.XslCompiledTransform?displayProperty=fullName> オブジェクト、または適切なプロパティを設定してスタイル シート ファイルの XSL 変換とします。 XSL 変換のスタイル シートが指定されていない場合、既定の形式を使用して XML ドキュメントが表示されます。 次の表は、XSL 変換のスタイル シートを指定するためのプロパティを一覧表示します。  
  
|プロパティ|説明|  
|-----------|--------|  
|<xref:System.Web.UI.WebControls.Xml.Transform%2A>|指定された XML ドキュメントの書式 <xref:System.Xml.Xsl.XslTransform?displayProperty=fullName> オブジェクトです。 **Note:**  使用して、 <xref:System.Xml.Xsl.XslTransform?displayProperty=fullName> オブジェクトが必要な `Full Trust` アクセス許可。|  
|<xref:System.Web.UI.WebControls.Xml.TransformSource%2A>|XSL 変換のスタイル シートの指定したファイルを使用して XML ドキュメントの書式を設定します。|  
  
> [!NOTE]
>  XSL 変換のスタイル シートはオプションです。 設定する必要はありません、 <xref:System.Web.UI.WebControls.Xml.Transform%2A> または <xref:System.Web.UI.WebControls.Xml.TransformSource%2A> プロパティです。 両方 XSL 変換のスタイル シートのプロパティが設定されている場合、最後のプロパティ セットは、どの XSL 変換のスタイル シートを使用して XML ドキュメントの書式設定を決定します。 その他のプロパティは無視されます。  
  
 <xref:System.Web.UI.WebControls.Xml> クラスも提供、 <xref:System.Web.UI.WebControls.Xml.TransformArgumentList%2A> プロパティで、省略可能な引数に XSL 変換のスタイル シートを提供することができます。 引数には、XSL Transformations \(XSLT\) パラメーターまたは拡張オブジェクトのいずれかを指定できます。  
  
<a name="declarative_syntax"></a>   
## 宣言構文  
  
```  
<asp:Xml  
    DocumentSource="uri"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    SkinID="string"  
    TransformSource="string"  
    Visible="True|False"  
/>  
```  
  
   
  
## 例  
 次のコード例は、作成する方法を示しています。 <xref:System.Xml.XmlDocument> と <xref:System.Xml.Xsl.XslTransform> のサンプル XML ファイルや、XSL 変換のスタイル シートのオブジェクト。 オブジェクトは、XML ドキュメントを表示する、XML コントロールによって使用されます。  
  
 [!code-csharp[XmlClassExample\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlClassExample/CS/xmlcs.aspx#1)]
 [!code-vb[XmlClassExample\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlClassExample/VB/xmlvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.XmlDocument" />
    <altmember cref="T:System.Xml.Xsl.XslTransform" />
    <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
    <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
    <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
    <altmember cref="P:System.Web.UI.WebControls.Xml.TransformArgumentList" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Xml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.Xml" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParsedSubObject">
      <MemberSignature Language="C#" Value="protected override void AddParsedSubObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddParsedSubObject(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.AddParsedSubObject(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">解析された要素を表す <see cref="T:System.Object" />。</param>
        <summary>サーバー コントロールに、XML または HTML のいずれかの要素が解析されたことを通知して、要素をサーバーコントロールの <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Web.UI.WebControls.Xml.AddParsedSubObject%2A> カスタム メソッド <xref:System.Web.UI.WebControls.Xml> サーバー コントロール。  
  
 [!code-csharp[CustomXmlAddParsedSubObject\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomXmlAddParsedSubObject/CS/custom_xml_addparsedsubobjectcs.aspx#1)]
 [!code-vb[CustomXmlAddParsedSubObject\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomXmlAddParsedSubObject/VB/custom_xml_addparsedsubobjectvb.aspx#1)]  
  
 [!code-csharp[CustomXmlAddParsedSubObject\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomXmlAddParsedSubObject/CS/custom_xml_addparsedsubobject.cs#2)]
 [!code-vb[CustomXmlAddParsedSubObject\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomXmlAddParsedSubObject/VB/custom_xml_addparsedsubobject.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="obj" /> が <see cref="T:System.Web.UI.LiteralControl" /> 型ではありません。</exception>
        <altmember cref="M:System.Web.UI.Control.AddParsedSubObject(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ClientID">
      <MemberSignature Language="C#" Value="public override string ClientID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.ClientID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>上書き、 <see cref="P:System.Web.UI.Control.ClientID" /> プロパティ ベースのサーバー コントロールの識別子を返します。</summary>
        <value>基本サーバー コントロールの識別子です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Control.ClientID" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public override System.Web.UI.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>上書き、 <see cref="P:System.Web.UI.Control.Controls" /> プロパティを情報を返します <see cref="T:System.Web.UI.ControlCollection" /> コレクションです。</summary>
        <value>基本 <see cref="T:System.Web.UI.ControlCollection" /> コレクションです。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.CreateControlCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新しい <see cref="T:System.Web.UI.EmptyControlCollection" /> オブジェクトを作成します。</summary>
        <returns>常に <see cref="T:System.Web.UI.EmptyControlCollection" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Web.UI.WebControls.Xml.CreateControlCollection%2A> method is used primarily by control developers extending the functionality of the <xref:System.Web.UI.WebControls.Xml> control.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDocument Document { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is the XPathNavigator property. Create a System.Xml.XPath.XPathDocument and call CreateNavigator() to create an XPathNavigator. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Xml.XmlDocument" /> に表示する、 <see cref="T:System.Web.UI.WebControls.Xml" /> コントロールです。</summary>
        <value>
          <see cref="T:System.Xml.XmlDocument" /> に表示する、 <see cref="T:System.Web.UI.WebControls.Xml" /> コントロールです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Xml.Document%2A> は互換性のために残されています。 表示される XML を指定する、 <xref:System.Web.UI.WebControls.Xml> コントロールを使用して、 <xref:System.Web.UI.WebControls.Xml.DocumentContent%2A> プロパティまたは <xref:System.Web.UI.WebControls.Xml.DocumentSource%2A> プロパティです。 これらの選択肢の詳細については、のクラスの概要を参照してください、 <xref:System.Web.UI.WebControls.Xml> コントロールです。  
  
 XML ドキュメントに表示する、 <xref:System.Web.UI.WebControls.Xml> コントロールが 3 つの方法のいずれかで指定します。 指定できます、 <xref:System.Xml.XmlDocument?displayProperty=fullName> オブジェクト、XML 文字列、または適切なプロパティを設定して XML ファイルです。<xref:System.Web.UI.WebControls.Xml.Document%2A> プロパティを使用して指定、 <xref:System.Xml.XmlDocument?displayProperty=fullName> \(XML ドキュメントを表す\)、コントロールに表示します。  
  
   
  
## 例  
 次のコード例は、作成する方法を示しています。 <xref:System.Xml.XmlDocument> と <xref:System.Xml.Xsl.XslTransform> のサンプル XML ファイルや、XSL 変換のスタイル シートのオブジェクト。 オブジェクトは、XML ドキュメントを表示する、XML コントロールによって使用されます。  
  
 [!code-csharp[XmlClassExample\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlClassExample/CS/xmlcs.aspx#1)]
 [!code-vb[XmlClassExample\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlClassExample/VB/xmlvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlDocument" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.TransformSource" />
      </Docs>
    </Member>
    <Member MemberName="DocumentContent">
      <MemberSignature Language="C#" Value="public string DocumentContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DocumentContent" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.DocumentContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示する XML ドキュメントを含む文字列を設定、 <see cref="T:System.Web.UI.WebControls.Xml" /> コントロールです。</summary>
        <value>表示する、XML を含む文字列を文書化、 <see cref="T:System.Web.UI.WebControls.Xml" /> コントロールです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 XML ドキュメントに表示する、 <xref:System.Web.UI.WebControls.Xml> コントロールが 3 つの方法のいずれかで指定します。 指定できます、 <xref:System.Xml.XmlDocument?displayProperty=fullName> オブジェクト、XML 文字列、または適切なプロパティを設定して XML ファイルです。<xref:System.Web.UI.WebControls.Xml.DocumentContent%2A> プロパティを使用して、コントロールに表示する \(XML ドキュメントを表す\) の XML 文字列を指定します。<xref:System.Web.UI.WebControls.Xml.DocumentContent%2A> プロパティは通常プログラムで設定すると、またはコントロールの属性として設定します。 代わりに、XML 文字列は、通常宣言によって設定、開始タグと終了の間のテキストを配置することで `<asp:Xml>` コントロールのタグ。  
  
> [!NOTE]
>  ですが、 <xref:System.Web.UI.WebControls.Xml.DocumentContent%2A> プロパティでは、両方が含まれる `get` と `set` アクセサーしか、 `set` アクセサーが便利です。 使用する場合、 `get` アクセサー、 <xref:System.String.Empty?displayProperty=fullName> が返されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.TransformSource" />
      </Docs>
    </Member>
    <Member MemberName="DocumentSource">
      <MemberSignature Language="C#" Value="public string DocumentSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DocumentSource" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.DocumentSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XmlUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のパスに表示する XML ドキュメント、 <see cref="T:System.Web.UI.WebControls.Xml" /> コントロールです。</summary>
        <value>表示する XML ドキュメントへのパス、 <see cref="T:System.Web.UI.WebControls.Xml" /> 制御します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 XML ドキュメントに表示する、 <xref:System.Web.UI.WebControls.Xml> コントロールが 3 つの方法のいずれかで指定します。 指定できます、 <xref:System.Xml.XmlDocument?displayProperty=fullName> オブジェクト、XML 文字列、または適切なプロパティを設定して XML ファイルです。<xref:System.Web.UI.WebControls.Xml.DocumentSource%2A> プロパティの使用をコントロールに表示する \(XML ドキュメントを表す\) XML ファイルへのパスを指定します。 相対パスまたは絶対パスを使用することができます。 相対パスでは、サーバーの完全なパスを指定せず、Web フォーム ページやユーザー コントロールの場所にファイルの場所が関連しています。 パスは Web ページの場所の相対パスです。 これにより、コード内のファイルにパスを更新することがなく、サーバー上の別のディレクトリにサイト全体を移動しやすくします。 サイトを別のディレクトリに移動する場合は、コードを更新する必要がありますので、絶対パスは、完全なパスを提供します。  
  
   
  
## 例  
 次のコード例で XSL 変換を使用して XML ドキュメントを表示する方法を示しています、 <xref:System.Web.UI.WebControls.Xml> コントロールです。  
  
 [!code-csharp[XmlControlClassExample\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlControlClassExample/CS/xmlcontrolcs.aspx#1)]
 [!code-vb[XmlControlClassExample\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlControlClassExample/VB/xmlcontrolvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.TransformSource" />
      </Docs>
    </Member>
    <Member MemberName="EnableTheming">
      <MemberSignature Language="C#" Value="public override bool EnableTheming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableTheming" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.EnableTheming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>上書き、 <see cref="P:System.Web.UI.Control.EnableTheming" /> プロパティです。 このプロパティでサポートされていない、 <see cref="T:System.Web.UI.WebControls.Xml" /> クラスです。</summary>
        <value>常に <see langword="false" /> を返します。 このプロパティはサポートされていません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Xml.EnableTheming%2A> から継承されたプロパティ、 <xref:System.Web.UI.Control> クラスには適用されない、 <xref:System.Web.UI.WebControls.Xml> クラスです。 このプロパティの値を設定しようとするとスロー、 <xref:System.NotSupportedException> 例外です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このプロパティの値を設定しようとするとします。</exception>
      </Docs>
    </Member>
    <Member MemberName="FindControl">
      <MemberSignature Language="C#" Value="public override System.Web.UI.Control FindControl (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.Control FindControl(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.FindControl(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">検索するコントロールの識別子。</param>
        <summary>指定したサーバー コントロールのページの名前付けコンテナーを検索します。</summary>
        <returns>指定したコントロールそれ以外の場合、 <see langword="null" /> 指定したコントロールが存在しない場合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public override void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.Focus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="M:System.Web.UI.Control.Focus" /> メソッドをオーバーライドします。 このメソッドでサポートされていない、 <see cref="T:System.Web.UI.WebControls.Xml" /> クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Xml.Focus%2A> から継承されたメソッド、 <xref:System.Web.UI.Control> クラスが、これには適用されない、 <xref:System.Web.UI.WebControls.Xml> クラスです。 メソッドを起動しようとするとスロー、 <xref:System.NotSupportedException> 例外です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このメソッドを起動しようとするとします。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDesignModeState">
      <MemberSignature Language="C#" Value="protected override System.Collections.IDictionary GetDesignModeState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.IDictionary GetDesignModeState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.GetDesignModeState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールのデザイン時のデータを取得します。</summary>
        <returns>
          <see cref="T:System.Collections.IDictionary" /> のデザイン時データを含む、 <see cref="T:System.Web.UI.WebControls.Xml" /> コントロールです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Xml.GetDesignModeState%2A> メソッドはの現在のデザイン時状態を取得するために使用するヘルパー メソッド、 <xref:System.Web.UI.WebControls.Xml> コントロールです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasControls">
      <MemberSignature Language="C#" Value="public override bool HasControls ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool HasControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.HasControls" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>サーバー コントロールに子コントロールが含まれているかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> コントロールには、その他のコントロールにコントロールが含まれている場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Xml.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="output">出力ストリームの結果です。</param>
        <summary>出力ストリームに結果を表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Web.UI.WebControls.Xml.Render%2A> カスタム サーバー コントロールのメソッドように、 <xref:System.Web.UI.WebControls.Xml> コントロールがイメージに常に表示されます。  
  
 [!code-csharp[CustomXmlRender\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomXmlRender/CS/custom_xml_rendercs.aspx#1)]
 [!code-vb[CustomXmlRender\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomXmlRender/VB/custom_xml_rendervb.aspx#1)]  
  
 [!code-csharp[CustomXmlRender\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomXmlRender/CS/custom_xml_render.cs#2)]
 [!code-vb[CustomXmlRender\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomXmlRender/VB/custom_xml_render.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkinID">
      <MemberSignature Language="C#" Value="public override string SkinID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SkinID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.SkinID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>上書き、 <see cref="P:System.Web.UI.Control.SkinID" /> プロパティです。 このプロパティでサポートされていない、 <see cref="T:System.Web.UI.WebControls.Xml" /> クラスです。</summary>
        <value>常に空の文字列を返します \(""\) です。 このプロパティはサポートされていません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Xml.SkinID%2A> から継承されたプロパティ、 <xref:System.Web.UI.Control> クラスには適用されない、 <xref:System.Web.UI.WebControls.Xml> クラスです。 このプロパティの値を設定しようとするとスロー、 <xref:System.NotSupportedException> 例外です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このプロパティの値を設定しようとするとします。</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.Xsl.XslTransform Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XslTransform Transform" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XslTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Xml.Xsl.XslTransform" /> 出力ストリームに書き込まれる前に、XML ドキュメントを書式設定するオブジェクト。</summary>
        <value>
          <see cref="T:System.Xml.Xsl.XslTransform" /> 出力ストリームに書き込まれる前に、XML ドキュメントを書式設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する場合、 <xref:System.Web.UI.WebControls.Xml> を XML ドキュメントを表示するコントロール、2 つの方法のいずれかで出力ストリームに書き込まれる前に、XML ドキュメントを書式設定する拡張可能なスタイル シート言語変換 \(XSLT\) スタイル シートを指定することもできます。 いずれかで XML ドキュメントの書式を設定することができます、 <xref:System.Xml.Xsl.XslTransform?displayProperty=fullName> オブジェクトまたは XSL 変換スタイル シート ファイルです。 ドキュメントの XSL 変換が指定されていない場合、既定の形式を使用して XML ドキュメントが表示されます。<xref:System.Web.UI.WebControls.Xml.Transform%2A> プロパティを使用して指定、 <xref:System.Xml.Xsl.XslTransform?displayProperty=fullName> \(ドキュメントを表すオブジェクト、XSL 変換\) 出力ストリームに書き込まれる前に、XML ドキュメントの書式を設定するために使用します。  
  
> [!NOTE]
>  使用して、 <xref:System.Xml.Xsl.XslTransform?displayProperty=fullName> オブジェクトが必要な `Full Trust` アクセス許可。  
  
   
  
## 例  
 次のコード例は、作成する方法を示しています。 <xref:System.Xml.XmlDocument> と <xref:System.Xml.Xsl.XslTransform> のサンプル XML ファイルや、XSL 変換のスタイル シートのオブジェクト。 オブジェクトは、XML ドキュメントを表示する、XML コントロールによって使用されます。  
  
 [!code-csharp[XmlClassExample\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlClassExample/CS/xmlcs.aspx#1)]
 [!code-vb[XmlClassExample\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlClassExample/VB/xmlvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Xsl.XslTransform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.TransformSource" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
      </Docs>
    </Member>
    <Member MemberName="TransformArgumentList">
      <MemberSignature Language="C#" Value="public System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Xsl.XsltArgumentList TransformArgumentList" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.TransformArgumentList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Xsl.XsltArgumentList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> スタイル シートに渡され、中に、XSLT Extensible Stylesheet Language Transformation \(\) を使用する省略可能な引数のリストを格納します。</summary>
        <value>A <see cref="T:System.Xml.Xsl.XsltArgumentList" /> スタイル シートに渡され、XSL 変換時に使用される省略可能な引数のリストを格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.Xml.TransformArgumentList%2A> プロパティを省略可能な引数に XSL 変換のスタイル シートを提供します。 引数には、XSLT パラメーターまたは拡張オブジェクトのいずれかを指定できます。  
  
 <xref:System.Xml.Xsl.XsltArgumentList?displayProperty=fullName> クラスの使用方法の詳細については、「[Xslt Argument List For Stylesheet Parameters Extension Objects](http://msdn.microsoft.com/ja-jp/de2f0dce-6b98-4908-bba7-ed150cc50355)」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
      </Docs>
    </Member>
    <Member MemberName="TransformSource">
      <MemberSignature Language="C#" Value="public string TransformSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransformSource" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.TransformSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.XslUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または出力ストリームに書き込まれる前に、XML ドキュメントを書式設定する拡張可能なスタイル シート言語変換 \(XSLT\) スタイル シートへのパスを設定します。</summary>
        <value>出力ストリームに書き込まれる前に、XML ドキュメントを書式設定する XSL 変換スタイル シートへのパス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する場合、 <xref:System.Web.UI.WebControls.Xml> を XML ドキュメントを表示するコントロール、2 つの方法のいずれかで出力ストリームに書き込まれる前に、XML ドキュメントを書式設定する XSL 変換スタイル シートを指定することもできます。 持つ XML ドキュメントの書式を設定することができますか、 <xref:System.Xml.Xsl.XslTransform?displayProperty=fullName> オブジェクトまたは XSL 変換を含むスタイル シート ファイルを設定します。 XSL 変換のスタイル シートが指定されていない場合、既定の形式を使用して XML ドキュメントが表示されます。<xref:System.Web.UI.WebControls.Xml.TransformSource%2A> プロパティを使用して、出力ストリームに書き込まれる前に、XML ドキュメントの書式を設定するために使用 \(XSL 変換のスタイル シートを表す\) XSL 変換スタイル シート ファイルへのパスを指定します。 相対パスまたは絶対パスを使用することができます。 相対パスでは、サーバーの完全なパスを指定せず、Web フォーム ページやユーザー コントロールの場所にファイルの場所が関連しています。 パスは Web ページの場所の相対パスです。 これにより、コード内のファイルにパスを更新することがなく、サーバー上の別のディレクトリにサイト全体を移動しやすくします。 サイトを別のディレクトリに移動する場合は、コードを更新する必要がありますので、絶対パスは、完全なパスを提供します。  
  
   
  
## 例  
 次のコード例で XSL 変換を使用して XML ドキュメントを表示する方法を示しています、 <xref:System.Web.UI.WebControls.Xml> コントロールです。  
  
 [!code-csharp[XmlControlClassExample\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/XmlControlClassExample/CS/xmlcontrolcs.aspx#1)]
 [!code-vb[XmlControlClassExample\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/XmlControlClassExample/VB/xmlcontrolvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Xml.Transform" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.Document" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentContent" />
        <altmember cref="P:System.Web.UI.WebControls.Xml.DocumentSource" />
      </Docs>
    </Member>
    <Member MemberName="XPathNavigator">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.XPathNavigator XPathNavigator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XPath.XPathNavigator XPathNavigator" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Xml.XPathNavigator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を移動したりに関連付けられている XML データを編集するためのカーソル モデル、 <see cref="T:System.Web.UI.WebControls.Xml" /> コントロールです。</summary>
        <value>
          <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 関連付けるにはこのプロパティを使用することができます、 <xref:System.Xml.XPath.XPathNavigator> オブジェクトを <xref:System.Web.UI.WebControls.Xml> コントロールです。  
  
 <xref:System.Xml.XPath.XPathNavigator> を実装するクラスからオブジェクトを作成、 <xref:System.Xml.XPath.IXPathNavigable> インターフェイスなど、 <xref:System.Xml.XPath.XPathDocument> と <xref:System.Xml.XmlDocument> クラスです。<xref:System.Xml.XPath.XPathNavigator> によって作成されたオブジェクト <xref:System.Xml.XPath.XPathDocument> オブジェクトは読み取り専用と <xref:System.Xml.XPath.XPathNavigator> によって作成されたオブジェクト <xref:System.Xml.XmlDocument> オブジェクトを編集できます。<xref:System.Xml.XPath.XPathNavigator> を使用してオブジェクトの読み取り専用または編集可能な状態を判断、 <xref:System.Xml.XPath.XPathNavigator.CanEdit%2A> のプロパティ、 <xref:System.Xml.XPath.XPathNavigator> クラスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>