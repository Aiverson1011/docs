<Type Name="FontNamesConverter" FullName="System.Web.UI.WebControls.FontNamesConverter">
  <TypeSignature Language="C#" Value="public class FontNamesConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FontNamesConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FontNamesConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>フォント名の一覧と、個々 の名前を表す文字列の配列を含む文字列の間に変換します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.FontNamesConverter.ConvertFrom%2A> 個々 の名前を含んでいる文字列の配列へのフォント名の一覧を含む 1 つの文字列に変換するには、このクラスのメソッドです。 文字列の各フォント名は、コンマで区切る必要があります。 たとえば、文字列"arial、新規 roman、verdana がタイムアウト"、"arial"の文字列を含む配列、"times new roman"および"verdana"に変換します。 コンマはフォント名の前後の空白と削除を確認します。 フォントの名前の中間にある空白は削除されません。  
  
 <xref:System.Web.UI.WebControls.FontNamesConverter.ConvertTo%2A> メソッドは、逆の操作を実行します。 名前の一覧を含む 1 つの文字列を個別のフォント名を含む文字列の配列に変換します。 文字列"arial"、"times new roman"および"verdana"を含む配列を文字列に変換するなど"arial、新規 roman、verdana がタイムアウト"です。 コンマはフォント名に空白なしの間で自動的に挿入されることに注意してください。  
  
 呼び出す、 <xref:System.Web.UI.WebControls.FontNamesConverter.CanConvertFrom%2A> 、変換を呼び出す前に実行できることを確認するメソッド、 <xref:System.Web.UI.WebControls.FontNamesConverter.ConvertFrom%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.FontNamesConverter> フォント名の一覧での文字列を個々 の名前を含んでいる文字列の配列に変換するためのクラスです。 文字列の配列は、1 つの文字列に変換され、表示されます。  
  
 [!code-csharp[Classic FontNamesConverter.CanConvertFrom Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic FontNamesConverter.CanConvertFrom Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic FontNamesConverter.CanConvertFrom Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic FontNamesConverter.CanConvertFrom Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.TypeConverter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FontNamesConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FontNamesConverter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.FontNamesConverter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 型コンバーターを直接アクセスする必要があることはありません。 代わりに、適切なコンバーターを使用して、 <xref:System.ComponentModel.TypeDescriptor> オブジェクトです。 詳細については、例を参照してください。 <xref:System.ComponentModel.TypeConverter>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FontNamesConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 型コンバーターのコンテキストに関する情報を提供するオブジェクト。 必要に応じて渡せる <see langword="null" /> このパラメーターにします。</param>
        <param name="sourceType">A <see cref="T:System.Type" /> から変換するデータ型を表します。</param>
        <summary>このコンバーターが、指定されたデータ型のオブジェクトを個別のフォント名を含む文字列の配列に変換できるかどうかを決定します。</summary>
        <returns>
          <see langword="true" /> 型を変換できる場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.FontNamesConverter.CanConvertFrom%2A> 個々 のフォント名を含む文字列の配列に指定されたデータ型を変換できるかどうかを決定する方法です。  
  
> [!NOTE]
>  このコンバーターがからのみ、 `string` データ型。`sourceType` パラメーターは、型でなければなりません <xref:System.String>します。 それ以外の場合、このメソッドが戻る `false` を指定したデータ型を変換できないことを示します。  
  
 必要に応じて渡せる `null` の `context` パラメーター。  
  
   
  
## 例  
 次のコード例は、<xref:System.Web.UI.WebControls.FontNamesConverter.CanConvertFrom%2A> メソッドの使用方法を示します。 この例では、指定されたデータ型を変換を実行する前に、個別のフォント名を含む文字列の配列に変換できるかどうかを決定します。  
  
 [!code-csharp[Classic FontNamesConverter.CanConvertFrom Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic FontNamesConverter.CanConvertFrom Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic FontNamesConverter.CanConvertFrom Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic FontNamesConverter.CanConvertFrom Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.ITypeDescriptorContext" />
        <altmember cref="T:System.Type" />
        <altmember cref="M:System.Web.UI.WebControls.FontNamesConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.FontNamesConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FontNamesConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 型コンバーターのコンテキストに関する情報を提供するオブジェクト。 このパラメーターは、このメソッドでは使用されません。 このメソッドの将来のバージョン用に予約されています。 必要に応じて渡せる <see langword="null" /> このパラメーターにします。</param>
        <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> 言語やカレンダー システムなど、カルチャに関する情報を表すオブジェクト。 このパラメーターは、このメソッドでは使用されません。 このメソッドの将来のバージョン用に予約されています。 必要に応じて渡せる <see langword="null" /> このパラメーターにします。</param>
        <param name="value">A <see cref="T:System.Object" /> から変換するソース文字列を表すインスタンス。</param>
        <summary>個別のフォント名を含む文字列の配列にフォント名の一覧を表す文字列に変換します。</summary>
        <returns>A <see cref="T:System.Object" /> を個別のフォント名を含む文字列の配列を表すインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.FontNamesConverter.ConvertFrom%2A> 個々 の名前を含んでいる文字列の配列へのフォント名の一覧を含む文字列に変換します。 文字列の各フォント名は、コンマで区切る必要があります。 たとえば、文字列"arial、新規 roman、verdana がタイムアウト"、"arial"の文字列を含む配列、"times new roman"および"verdana"に変換します。 フォント名の前後の空白とコンマを削除することを確認します。 フォントの名前の中間にある空白は削除されません。  
  
> [!NOTE]
>  `context` と `culture` パラメーターは、このバージョンのメソッドでは使用されません。 これは、メソッドの将来のバージョン用に予約されています。 必要に応じて渡せる `null` これらのパラメーターです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.FontNamesConverter.ConvertFrom%2A> フォント名の一覧で文字列を個々 の名前を含んでいる文字列の配列に変換します。  
  
 [!code-csharp[Classic FontNamesConverter.CanConvertFrom Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic FontNamesConverter.CanConvertFrom Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic FontNamesConverter.CanConvertFrom Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic FontNamesConverter.CanConvertFrom Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
          <paramref name="value" /> が <see cref="T:System.String" /> 型ではありません。</exception>
        <altmember cref="T:System.ComponentModel.ITypeDescriptorContext" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Web.UI.WebControls.FontNamesConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
        <altmember cref="M:System.Web.UI.WebControls.FontNamesConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FontNamesConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 型コンバーターのコンテキストに関する情報を提供するオブジェクト。 このパラメーターは、このメソッドでは使用されません。 このメソッドの将来のバージョン用に予約されています。 必要に応じて渡せる <see langword="null" /> このパラメーターにします。</param>
        <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> 言語やカレンダー システムなど、カルチャに関する情報を表すオブジェクト。 このパラメーターは、このメソッドでは使用されません。 このメソッドの将来のバージョン用に予約されています。 必要に応じて渡せる <see langword="null" /> このパラメーターにします。</param>
        <param name="value">変換する文字列のソースの配列を表すオブジェクト。</param>
        <param name="destinationType">A <see cref="T:System.Object" /> を変換後のデータ型を表すインスタンス オブジェクト。 このパラメーターは、型でなければなりません <see cref="T:System.String" />します。</param>
        <summary>個別のフォント名を含む文字列の配列からフォント名の一覧を表す文字列を作成します。</summary>
        <returns>A <see cref="T:System.Object" /> フォント名の一覧を含む文字列を表すインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.FontNamesConverter.ConvertTo%2A> 名の一覧を含む 1 つの文字列を個別のフォント名を含む文字列の配列に変換します。 文字列"arial"、"times new roman"および"verdana"を含む配列を文字列に変換するなど"arial、新規 roman、verdana がタイムアウト"です。 コンマはフォント名に空白なしの間で自動的に挿入されることに注意してください。  
  
> [!NOTE]
>  このコンバーターにのみ、 `string` データ型。`destinationType` パラメーターは、型でなければなりません <xref:System.String>します。  
  
> [!NOTE]
>  `context` と `culture` パラメーターは、このバージョンのメソッドでは使用されません。 これは、メソッドの将来のバージョン用に予約されています。 必要に応じて渡せる `null` これらのパラメーターです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.FontNamesConverter.ConvertTo%2A> のフォント名の一覧を含む 1 つの文字列を個々 の名前を含んでいる文字列の配列に変換します。  
  
 [!code-csharp[Classic FontNamesConverter.CanConvertFrom Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic FontNamesConverter.CanConvertFrom Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic FontNamesConverter.CanConvertFrom Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic FontNamesConverter.CanConvertFrom Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
          <paramref name="destinationType" /> が <see cref="T:System.String" /> 型ではありません。</exception>
        <altmember cref="T:System.ComponentModel.ITypeDescriptorContext" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Type" />
        <altmember cref="M:System.Web.UI.WebControls.FontNamesConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>