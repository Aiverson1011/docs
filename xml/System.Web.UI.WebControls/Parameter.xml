<Type Name="Parameter" FullName="System.Web.UI.WebControls.Parameter">
  <TypeSignature Language="C#" Value="public class Parameter : ICloneable, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Parameter extends System.Object implements class System.ICloneable, class System.Web.UI.IStateManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Parameter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("DefaultValue")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>アプリケーション変数、ユーザー ID とユーザー選択、および他のデータにバインドするためにデータ ソース コントロールで使用する機構を提供します。 ASP.NET のすべてのパラメーター型の基底クラスとして機能します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Parameter> クラスを次のようにパラメーター化された SQL クエリ、フィルター式でパラメーターを表しているかを選択、フィルター処理、またはデータを変更する ASP.NET データはソース管理、ビジネス オブジェクトのメソッドの呼び出しを使用しています。<xref:System.Web.UI.WebControls.Parameter> オブジェクトは、<xref:System.Web.UI.WebControls.ParameterCollection> オブジェクトに含まれています。<xref:System.Web.UI.WebControls.Parameter> オブジェクトは、それらが表すデータと対話するデータ ソース コントロールによってどのようなメソッドを使用する変数の値をバインドする、実行時に評価されます。  
  
 派生するクラスを使用して <xref:System.Web.UI.WebControls.Parameter> データ ソースとデータの Web ベース アプリケーションを構築するデータ バインド コントロールを使用します。 これらのパラメーター クラスは、特定の種類の Web アプリケーションでは SQL クエリ文字列、ビジネス オブジェクト メソッドのパラメーターのプレース ホルダーの値をバインドするデータ ソース コントロールで使用されます。 次の表は、ASP.NET に含まれているパラメーターの型を一覧表示します。  
  
|||  
|-|-|  
|<xref:System.Web.UI.WebControls.ControlParameter>|Web サーバー コントロールのパブリック プロパティにバインドします。|  
|<xref:System.Web.UI.WebControls.FormParameter>|フォーム フィールドにバインドします。|  
|<xref:System.Web.UI.WebControls.SessionParameter>|セッション状態\] フィールドにバインドします。|  
|<xref:System.Web.UI.WebControls.RouteParameter>|ルートの URL パラメーターをバインドします。|  
|<xref:System.Web.UI.WebControls.CookieParameter>|Cookie フィールドにバインドします。|  
|<xref:System.Web.UI.WebControls.QueryStringParameter>|クエリ文字列パラメーターをバインドします。|  
|<xref:System.Web.UI.WebControls.ProfileParameter>|プロファイルのフィールドにバインドします。|  
  
 拡張基本 <xref:System.Web.UI.WebControls.Parameter> 独自のカスタム パラメーター型を実装するクラスします。  
  
 <xref:System.Web.UI.WebControls.Parameter> オブジェクトが非常に単純な: がある、 <xref:System.Web.UI.WebControls.Parameter.Name%2A> と <xref:System.Web.UI.WebControls.Parameter.Type%2A> プロパティには、宣言によって表されることができ、複数の HTTP 要求の状態を追跡できます。 すべてのパラメーターは、サポート、 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> プロパティの値にバインドされたパラメーターが、値を評価する場合に、 `null` 実行時にします。  
  
 コレクションを使用するときに <xref:System.Web.UI.WebControls.Parameter> データのソース管理では、オブジェクトのコレクション内の順序が重要であります。 パラメーターの使用方法の詳細については、次を参照してください。 [Using the SqlDataSource and AccessDataSource Controls with Parameters](http://msdn.microsoft.com/ja-jp/403ff44a-dd0b-484d-968e-dcd1dcd4c295) と [Using Parameters with the ObjectDataSource Control](http://msdn.microsoft.com/ja-jp/45fb67ee-9be7-49b7-9421-e242203dafa4)です。  
  
   
  
## 例  
 次の例では、選択した値を使用する方法、 <xref:System.Web.UI.WebControls.DropDownList> 、W でコントロール`here` SQL クエリの句。 例では、 <xref:System.Web.UI.WebControls.ControlParameter> から派生したクラス、 <xref:System.Web.UI.WebControls.ControlParameter> クラスです。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 要素"@Title"を名前付きパラメーターを持つクエリを定義する値を `DropDownList1` 移動する必要があります。<xref:System.Web.UI.WebControls.ControlParameter> 要素は、"@Title"プレース ホルダーがの値によって置き換えられることを示す、 <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> のプロパティ、 `DropDownList1` コントロールです。<xref:System.Web.UI.WebControls.ControlParameter> に要素を追加、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> のコレクション、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_2sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/CS/sql2cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_2sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/VB/sql2vb.aspx#1)]  
  
 次の例では、前のようなものですが、マークアップではなくコードを使用します。 ページが最初に読み込まれるときに、 <xref:System.Web.UI.WebControls.DropDownList> コントロールが選択されている値を持たないと <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Parameter> オブジェクトを使用します。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter\_3\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_3/CS/param1acs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.Parameter\_3\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_3/VB/param1avb.aspx#1)]  
  
 次のコードは、前の例では、ページの分離コード クラスを示します。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter\_3\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_3/CS/param1acs.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.Parameter\_3\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_3/VB/param1avb.aspx.vb#4)]  
  
 次のコード例では、拡張、 <xref:System.Web.UI.WebControls.Parameter> データ ソース コントロールとデータ バインディングのシナリオでは、その他のコントロールで使用できる新しいパラメーターの型を作成するクラス。 データ ソース コントロールを使用して、 `StaticParameter` Web フォーム ページで、文字列では通常、すべてのオブジェクトの値にバインドするパラメーターが宣言されています。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter\_2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#1)]
 [!code-vb[System.Web.UI.WebControls.Parameter\_2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.ControlParameter" />
    <altmember cref="T:System.Web.UI.WebControls.CookieParameter" />
    <altmember cref="T:System.Web.UI.WebControls.FormParameter" />
    <altmember cref="T:System.Web.UI.WebControls.QueryStringParameter" />
    <altmember cref="T:System.Web.UI.WebControls.SessionParameter" />
    <altmember cref="T:System.Web.UI.WebControls.ProfileParameter" />
    <altmember cref="T:System.Web.UI.WebControls.RouteParameter" />
    <altmember cref="T:System.Web.UI.WebControls.ParameterCollection" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Parameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.Parameter" /> クラスの新しい既定のインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Web.UI.WebControls.Parameter> オブジェクトを作成した、 <xref:System.Web.UI.WebControls.Parameter.%23ctor> コンス トラクターは、すべてのプロパティの既定値で初期化します。<xref:System.Web.UI.WebControls.Parameter.Name%2A> プロパティが初期化 <xref:System.String.Empty?displayProperty=fullName>, 、 <xref:System.Web.UI.WebControls.Parameter.Type%2A> にプロパティを初期化 <xref:System.TypeCode.Object?displayProperty=fullName>, 、 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> プロパティが初期化 <xref:System.Data.ParameterDirection.Input>, 、および <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> にプロパティを初期化 `null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Parameter (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">パラメーターの名前。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.Parameter" /> クラスの名前を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Web.UI.WebControls.Parameter> オブジェクトを作成した、 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%29> コンス トラクターが初期化されて、指定した `name` やその他のプロパティの既定値です。<xref:System.Web.UI.WebControls.Parameter.Type%2A> プロパティが初期化 <xref:System.TypeCode.Object?displayProperty=fullName>, 、 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> プロパティが初期化 <xref:System.Data.ParameterDirection.Input>, 、および <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> にプロパティを初期化 `null`します。  
  
   
  
## 例  
 次のコード例を呼び出す方法を示しています、 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%29> を拡張するクラスのコンス トラクター、 <xref:System.Web.UI.WebControls.Parameter> クラスを初期化するために、 <xref:System.Web.UI.WebControls.Parameter.Name%2A> 、インスタンスのプロパティです。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.Parameter> クラスの概要です。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter\_2\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#2)]
 [!code-vb[System.Web.UI.WebControls.Parameter\_2\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Name" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Parameter (System.Web.UI.WebControls.Parameter original);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.Parameter original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor(System.Web.UI.WebControls.Parameter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="original" Type="System.Web.UI.WebControls.Parameter" />
      </Parameters>
      <Docs>
        <param name="original">A <see cref="T:System.Web.UI.WebControls.Parameter" /> インスタンスを現在のインスタンスを初期化します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.Parameter" /> 、指定した元のインスタンスの値を持つクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.Web.UI.WebControls.Parameter%29> コンス トラクターは、 `protected` 複製に使用されるコピー コンス トラクター、 <xref:System.Web.UI.WebControls.Parameter> インスタンス。 値、 <xref:System.Web.UI.WebControls.Parameter.Name%2A>, 、<xref:System.Web.UI.WebControls.Parameter.Type%2A>, 、<xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A>, 、<xref:System.Web.UI.WebControls.Parameter.Direction%2A>, 、および <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A> プロパティはすべて、新しいインスタンスに転送します。  
  
   
  
## 例  
 次のコード例では、呼び出し、 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.Web.UI.WebControls.Parameter%29> を拡張するクラスのコンス トラクター、 <xref:System.Web.UI.WebControls.Parameter> を正しいオブジェクトのクラスの動作を複製を実装するクラス。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.Parameter> クラスの概要です。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter\_2\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#4)]
 [!code-vb[System.Web.UI.WebControls.Parameter\_2\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Parameter.Clone" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Parameter (string name, System.Data.DbType dbType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Data.DbType dbType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor(System.String,System.Data.DbType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dbType" Type="System.Data.DbType" />
      </Parameters>
      <Docs>
        <param name="name">パラメーターの名前。</param>
        <param name="dbType">パラメーターのデータベースの種類。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.Parameter" /> クラスの指定した名前とデータベースの種類を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Web.UI.WebControls.Parameter> オブジェクトを作成した、 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%2CSystem.Data.DbType%29> コンス トラクターが初期化されて、指定した `name` と `dbType` パラメーター、およびその他のプロパティの既定の値。<xref:System.Web.UI.WebControls.Parameter.Direction%2A> プロパティが初期化 <xref:System.Data.ParameterDirection.Input>, 、および <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> プロパティが初期化 `null`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Parameter (string name, TypeCode type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.TypeCode type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor(System.String,System.TypeCode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.TypeCode" />
      </Parameters>
      <Docs>
        <param name="name">パラメーターの名前。</param>
        <param name="type">A <see cref="T:System.TypeCode" /> パラメーターの型を記述します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.Parameter" /> クラスの指定した名前と型を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Web.UI.WebControls.Parameter> オブジェクトを作成した、 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%2CSystem.TypeCode%29> コンス トラクターが初期化されて、指定した `name` と `type` パラメーター、およびその他のプロパティの既定値です。<xref:System.Web.UI.WebControls.Parameter.Direction%2A> プロパティが初期化 <xref:System.Data.ParameterDirection.Input>, 、および <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> プロパティが初期化 `null`します。  
  
   
  
## 例  
 次のコード例を呼び出す方法を示しています、 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%2CSystem.TypeCode%29> を拡張するクラスのコンス トラクター、 <xref:System.Web.UI.WebControls.Parameter> クラスを初期化するために、 <xref:System.Web.UI.WebControls.Parameter.Name%2A> と <xref:System.Web.UI.WebControls.Parameter.Type%2A> インスタンスのプロパティです。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.Parameter> クラスの概要です。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter\_2\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#3)]
 [!code-vb[System.Web.UI.WebControls.Parameter\_2\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Name" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Type" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Parameter (string name, System.Data.DbType dbType, string defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Data.DbType dbType, string defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor(System.String,System.Data.DbType,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dbType" Type="System.Data.DbType" />
        <Parameter Name="defaultValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">名前、 <see cref="T:System.Web.UI.WebControls.Parameter" /> インスタンス。</param>
        <param name="dbType">データベースの種類、 <see cref="T:System.Web.UI.WebControls.Parameter" /> インスタンス。</param>
        <param name="defaultValue">既定値、 <see cref="T:System.Web.UI.WebControls.Parameter" /> インスタンスの場合、 <see cref="T:System.Web.UI.WebControls.Parameter" /> はまだするときに初期化される値にバインドする <see cref="M:System.Web.UI.WebControls.Parameter.Evaluate(System.Web.HttpContext,System.Web.UI.Control)" /> が呼び出されます。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.Parameter" /> クラスの指定した名前、指定したデータベース型では、指定された値を使用してその <see cref="P:System.Web.UI.WebControls.Parameter.DefaultValue" /> プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Parameter> にインスタンスを初期化 <xref:System.Data.ParameterDirection.Input>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Parameter (string name, TypeCode type, string defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.TypeCode type, string defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.#ctor(System.String,System.TypeCode,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.TypeCode" />
        <Parameter Name="defaultValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">パラメーターの名前。</param>
        <param name="type">A <see cref="T:System.TypeCode" /> パラメーターの型を記述します。</param>
        <param name="defaultValue">場合に、パラメーターの既定値として使用される文字列、 <see cref="T:System.Web.UI.WebControls.Parameter" /> がまだない場合に初期化される値にバインドする <see cref="M:System.Web.UI.WebControls.Parameter.Evaluate(System.Web.HttpContext,System.Web.UI.Control)" /> が呼び出されます。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.Parameter" /> クラスの指定した名前、指定した型と、指定した文字列を使用してその <see cref="P:System.Web.UI.WebControls.Parameter.DefaultValue" /> プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Web.UI.WebControls.Parameter> オブジェクトを作成した、 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%2CSystem.TypeCode%2CSystem.String%29> コンス トラクターが初期化されて、指定した `name` パラメーターと `type` パラメーター、割り当てられていると、 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> プロパティの値。<xref:System.Web.UI.WebControls.Parameter.Direction%2A> プロパティは <xref:System.Data.ParameterDirection.Input> に初期化されます。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.String%2CSystem.TypeCode%2CSystem.String%29> コンス トラクターにパラメーター オブジェクトの更新プログラムを追加する、 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> のコレクション、 <xref:System.Web.UI.WebControls.AccessDataSource> コントロールを呼び出す前に、 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドです。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_22sql\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_22sql\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Name" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Type" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.DefaultValue" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.Parameter Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.Parameter Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Parameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の複製を返します <see cref="T:System.Web.UI.WebControls.Parameter" /> インスタンス。</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.Parameter" /> 現在 1 つの完全な複製です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Parameter.Clone%2A> メソッドの呼び出し、 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.Web.UI.WebControls.Parameter%29> の新しいインスタンスを初期化するために、コピー コンス トラクター、 <xref:System.Web.UI.WebControls.Parameter> 現在のインスタンスの値を持つクラス。  
  
 拡張する場合、 <xref:System.Web.UI.WebControls.Parameter> クラスをオーバーライドできます、 <xref:System.Web.UI.WebControls.Parameter.Clone%2A> メソッドを派生クラスの新しいインスタンスにコピーするか、状態が含まれます。  
  
   
  
## 例  
 次のコード例では、呼び出し、 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.Web.UI.WebControls.Parameter%29> を拡張するクラスのコンス トラクター、 <xref:System.Web.UI.WebControls.Parameter> を正しいオブジェクトのクラスの動作を複製を実装するクラス。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.Parameter> クラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter\_2\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#4)]
 [!code-vb[System.Web.UI.WebControls.Parameter\_2\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Parameter.#ctor(System.Web.UI.WebControls.Parameter)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertDbTypeToTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode ConvertDbTypeToTypeCode (System.Data.DbType dbType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode ConvertDbTypeToTypeCode(valuetype System.Data.DbType dbType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.ConvertDbTypeToTypeCode(System.Data.DbType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dbType" Type="System.Data.DbType" />
      </Parameters>
      <Docs>
        <param name="dbType">A <see cref="T:System.Data.DbType" /> 相当する型に変換する値 <see cref="T:System.TypeCode" /> 値。</param>
        <summary>変換、 <see cref="T:System.Data.DbType" /> 値に対応する <see cref="T:System.TypeCode" /> 値。</summary>
        <returns>A <see cref="T:System.TypeCode" /> は、指定したのと同じ値 <see cref="T:System.Data.DbType" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが戻る、 <xref:System.TypeCode.Object> インスタンスの場合に相当するなし、 <xref:System.Data.DbType> 値が存在します。 データベースの種類に相当するものが含まれていない <xref:System.Data.DbType.Guid>, 、<xref:System.Data.DbType.Binary>, 、および <xref:System.Data.DbType.DateTimeOffset>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public bool ConvertEmptyStringToNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertEmptyStringToNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、値を <see cref="T:System.Web.UI.WebControls.Parameter" /> オブジェクトがバインドされているに変換する必要があります <see langword="null" /> であれば <see cref="F:System.String.Empty" />します。</summary>
        <value>
          <see langword="true" /> 場合、値を <see cref="T:System.Web.UI.WebControls.Parameter" /> は値に変換する <see langword="null" /> である場合 <see cref="F:System.String.Empty" />。 そうしないと、 <see langword="false" />です。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A> パラメーターのプロパティを変更すると、 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> メソッドが呼び出されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTypeCodeToDbType">
      <MemberSignature Language="C#" Value="public static System.Data.DbType ConvertTypeCodeToDbType (TypeCode typeCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Data.DbType ConvertTypeCodeToDbType(valuetype System.TypeCode typeCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.ConvertTypeCodeToDbType(System.TypeCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DbType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeCode" Type="System.TypeCode" />
      </Parameters>
      <Docs>
        <param name="typeCode">
          <see cref="T:System.TypeCode" /> 相当する型に変換する値 <see cref="T:System.Data.DbType" /> 値。</param>
        <summary>変換、 <see cref="T:System.TypeCode" /> 値に対応する <see cref="T:System.Data.DbType" /> 値。</summary>
        <returns>A <see cref="T:System.Data.DbType" /> は、指定したのと同じ値 <see cref="T:System.TypeCode" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが戻る、 <xref:System.Data.DbType.Object> 相当が検出されない場合をインスタンス化します。 このようなデータベースの種類には、なしの型 <xref:System.TypeCode.DBNull> と <xref:System.TypeCode.Empty>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbType">
      <MemberSignature Language="C#" Value="public System.Data.DbType DbType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.DbType DbType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.DbType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DbType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはパラメーターのデータベースの種類を設定します。</summary>
        <value>データベースの種類、 <see cref="T:System.Web.UI.WebControls.Parameter" /> インスタンス。 既定値は <see cref="F:System.Data.DbType.Object" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Web アプリケーションと基になるコードまたはデータベース テーブルから値の間で値が正しく変換されるように、厳密に型指定のパラメーターを作成するデータベースの種類を使用できます。  
  
 設定して、パラメーターのデータベースの種類が変更されたかどうか、 <xref:System.Web.UI.WebControls.Parameter.DbType%2A> 、プロパティ、 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> メソッドが呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このプロパティに含まれていない値を設定しようとしましたが、 <see cref="T:System.Data.DbType" /> 列挙します。</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public string DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.DefaultValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パラメーターには、既定値の指定、パラメーター値は初期化されていない場合にバインドする必要があります、 <see cref="M:System.Web.UI.WebControls.Parameter.Evaluate(System.Web.HttpContext,System.Web.UI.Control)" /> メソッドが呼び出されます。</summary>
        <value>既定値として使用される文字列、 <see cref="T:System.Web.UI.WebControls.Parameter" /> にバインドされている値が解決できないか、初期化されていません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> プロパティは、パラメーターの値にバインドしますが、値は、シナリオで使用 `null` または解決できない場合に、 <xref:System.Web.UI.WebControls.Parameter> オブジェクトを評価します。  
  
 場合、 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> パラメーターのプロパティを変更すると、 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> メソッドが呼び出されます。  
  
   
  
## 例  
 次のコード例を使用して、1 つのデータ レコードを取得する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> を制御し、表示、 <xref:System.Web.UI.WebControls.DetailsView> コントロールです。<xref:System.Web.UI.WebControls.ObjectDataSource> コントロールを呼び出すことによって、特定の従業員のレコードを取得、 `GetEmployee` のメソッド、 `EmployeeLogic` クラスです。`GetEmployee` メソッドには、従業員 ID パラメーターが必要です。<xref:System.Web.UI.WebControls.ObjectDataSource> コントロール、 <xref:System.Web.UI.WebControls.QueryStringParameter> でオブジェクトをその <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> の ID を渡すコレクション、 `GetEmployee` この例ではメソッドです。  
  
 実装例を表示する、 `EmployeeLogic` クラスおよび `GetEmployee` メソッドを参照してください、 <xref:System.Web.UI.WebControls.ObjectDataSource> クラスの概要です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_3\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/CS/objds3cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_3\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/VB/objds3vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Direction">
      <MemberSignature Language="C#" Value="public System.Data.ParameterDirection Direction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ParameterDirection Direction" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.Direction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.ParameterDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示すかどうか、 <see cref="T:System.Web.UI.WebControls.Parameter" /> オブジェクトを使用して、コントロールに値をバインドするか、コントロールを使用して、値を変更します。</summary>
        <value>
          <see cref="T:System.Data.ParameterDirection" /> 値のいずれか。<see cref="P:System.Web.UI.WebControls.Parameter.Direction" /> 設定されている <see cref="F:System.Data.ParameterDirection.Input" /> 既定です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> プロパティは、現在は使用されませんが、 <xref:System.Web.UI.WebControls.Parameter> クラスおよび将来使用するために予約されています。  
  
 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> プロパティの値の間でデータ フローの方向をについて説明する、 <xref:System.Web.UI.WebControls.Parameter> インスタンスにバインドされると、 <xref:System.Web.UI.WebControls.Parameter> オブジェクト自体です。 既定値、 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> プロパティには、 <xref:System.Data.ParameterDirection.Input>, 、ここでのデータ フローは常に 1 つの方向に最も一般的なシナリオについて説明します。 値から、 <xref:System.Web.UI.WebControls.Parameter> オブジェクトにバインドする、 <xref:System.Web.UI.WebControls.Parameter> オブジェクトです。 によって基になる値に加えられた変更が反映されて、 <xref:System.Web.UI.WebControls.Parameter> オブジェクトで、かつへの変更、 <xref:System.Web.UI.WebControls.Parameter> オブジェクトは、基になるデータでは反映されません。 設定することができます、 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> プロパティを <xref:System.Data.ParameterDirection.InputOutput> または <xref:System.Data.ParameterDirection.Output> 出力パラメーターを使用する場合、または <xref:System.Data.ParameterDirection.ReturnValue> ストアド プロシージャからの戻り値を使用する場合。  
  
 場合、 <xref:System.Web.UI.WebControls.Parameter.Direction%2A> パラメーターのプロパティを変更すると、 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> メソッドが呼び出されます。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A>, 、<xref:System.Web.UI.WebControls.Parameter.Type%2A>, 、および <xref:System.Web.UI.WebControls.Parameter.Direction%2A> のプロパティ <xref:System.Web.UI.WebControls.Parameter> オブジェクトを出力パラメーターとストアド プロシージャの戻り値パラメーターとして使用する時にします。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> クラスの概要です。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSourceStatusEventArgs\_1\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSourceStatusEventArgs_1/CS/sql21cs.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSourceStatusEventArgs\_1\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSourceStatusEventArgs_1/VB/sql21vb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="protected virtual object Evaluate (System.Web.HttpContext context, System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance object Evaluate(class System.Web.HttpContext context, class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.Evaluate(System.Web.HttpContext,System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="context">現在 <see cref="T:System.Web.HttpContext" /> 要求のです。</param>
        <param name="control">
          <see cref="T:System.Web.UI.Control" /> にパラメーターをバインドします。 パラメーターは、コントロールにバインドされていない場合、 <c>control</c> パラメーターは無視されます。</param>
        <summary>更新されの値を返す、 <see cref="T:System.Web.UI.WebControls.Parameter" /> オブジェクトです。</summary>
        <returns>
          <see langword="object" /> パラメーターの更新された現在の値を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装、 <xref:System.Web.UI.WebControls.Parameter.Evaluate%2A> を返すメソッドは、 `null` 常にします。 派生するクラス、 <xref:System.Web.UI.WebControls.Parameter> クラスのオーバーライド、 <xref:System.Web.UI.WebControls.Parameter.Evaluate%2A> 更新済みパラメーター値を返すメソッド。 たとえば、 <xref:System.Web.UI.WebControls.ControlParameter> オブジェクトが、バインドされているコントロールの値を返す中に、 <xref:System.Web.UI.WebControls.QueryStringParameter> オブジェクトから現在の名前\/値ペアを取得する、 <xref:System.Web.HttpRequest> オブジェクトです。  
  
   
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Web.UI.WebControls.Parameter.Evaluate%2A> から派生したクラスで、適切な値を返すメソッドを <xref:System.Web.UI.WebControls.Parameter> クラスです。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.Parameter> クラスの概要です。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter\_2\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#6)]
 [!code-vb[System.Web.UI.WebControls.Parameter\_2\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseType">
      <MemberSignature Language="C#" Value="public System.Data.DbType GetDatabaseType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.DbType GetDatabaseType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.GetDatabaseType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DbType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得、 <see cref="T:System.Data.DbType" /> は現在の CLR 型と同じ値 <see cref="T:System.Web.UI.WebControls.Parameter" /> インスタンス。</summary>
        <returns>
          <see cref="T:System.Data.DbType" /> は現在の CLR 型と同じ値 <see cref="T:System.Web.UI.WebControls.Parameter" /> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Parameter.DbType%2A> プロパティが必要が既に設定されていない、またはに設定する必要があります <xref:System.Data.DbType.Object>します。 このメソッドは CLR 型が設定されている場合にのみ使用するものが、 <xref:System.Web.UI.WebControls.Parameter.DbType%2A> プロパティは使用されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.WebControls.Parameter.DbType" /> プロパティが以外の設定の値に既に <see cref="F:System.Data.DbType.Object" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsTrackingViewState">
      <MemberSignature Language="C#" Value="protected bool IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Web.UI.WebControls.Parameter" /> オブジェクトがビュー ステートへ変更を保存します。</summary>
        <value>
          <see langword="true" /> その状態を保存する場合は、データ ソース ビューがマークされています。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected virtual void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Object" /> を表す、 <see cref="T:System.Web.UI.WebControls.Parameter" /> 状態を復元します。</param>
        <summary>データ ソース ビューの以前保存したビューステートを復元します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、主に、.NET Framework インフラストラクチャによって使用され、コードから直接使用するものではありません。 ただし、コントロールの開発者は、カスタム サーバー コントロールがそのビューステートを復元する方法を指定するには、このメソッドをオーバーライドすることができます。 詳細については、「[ASP.NET State Management Overview](http://msdn.microsoft.com/ja-jp/0218d965-5d30-445b-b6a6-8870e70e63ce)」を参照してください。  
  
 このメソッドのビュー状態情報を <xref:System.Web.UI.WebControls.Parameter> によって保存された前のページ要求からのオブジェクト、 <xref:System.Web.UI.WebControls.Parameter.SaveViewState%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パラメーターの名前を取得または設定します。</summary>
        <value>パラメーターの名前。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Parameter> オブジェクトが; に名前を付ける必要はありません。ただし、データ ソース コントロールは一致するようにパラメーター名を使用ことがあります、 <xref:System.Web.UI.WebControls.Parameter> コレクション内のオブジェクトを SQL クエリまたはビジネス メソッドのシグネチャのパラメーターを使用します。 たとえば、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールの名前を使用できます、 <xref:System.Web.UI.WebControls.Parameter> パラメーター化された SQL クエリ内のプレース ホルダーに一致するオブジェクト。 同様に、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールの名前を使用できる、 <xref:System.Web.UI.WebControls.Parameter> 内のオブジェクト、 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> コレクション内のプレース ホルダーを一致するように、 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティです。 場合によっては、名前は使用されませんし、順序を <xref:System.Web.UI.WebControls.Parameter> オブジェクトに追加、 <xref:System.Web.UI.WebControls.ParameterCollection> コレクションはさらに重要です。 詳細については、[Using the SqlDataSource and AccessDataSource Controls with Parameters](http://msdn.microsoft.com/ja-jp/403ff44a-dd0b-484d-968e-dcd1dcd4c295) および [Using Parameters with the ObjectDataSource Control](http://msdn.microsoft.com/ja-jp/45fb67ee-9be7-49b7-9421-e242203dafa4) を参照してください。  
  
 パラメーターの名前が変更された場合、 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> メソッドが呼び出されます。  
  
   
  
## 例  
 次のコード例を使用してフィルター選択されたデータを表示する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> 中間層ビジネス オブジェクトからデータを取得するコントロールと <xref:System.Web.UI.WebControls.GridView> 結果を表示するコントロール。 コード例は、 <xref:System.Web.UI.WebControls.TextBox> コントロール、 <xref:System.Web.UI.WebControls.GridView> コントロール、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロール、および送信ボタンが表示されます。 既定では、 <xref:System.Web.UI.WebControls.TextBox> コントロールのいずれかの名前の設定が、 `Northwind` 従業員です。<xref:System.Web.UI.WebControls.GridView> コントロール内の名前で識別される従業員に関する情報を表示する、 <xref:System.Web.UI.WebControls.TextBox> コントロールです。 別の従業員のデータを取得するには、内の従業員の完全名を入力、 <xref:System.Web.UI.WebControls.TextBox> を制御し、ボタンをクリックします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> プロパティによって取得されるデータをフィルター処理に使用する式を指定する、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティです。 含まれるパラメーターに評価されるパラメーターのプレース ホルダーを使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> コレクションです。 この例では、パラメーターの型がスペースを含む可能性がある文字列型であるために、パラメーターのプレース ホルダーは単一引用符で制限されます。 パラメーターの型が数値または日付型の場合は、引用符は不要です。  
  
 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> クラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_9\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_9\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Type" />
      </Docs>
    </Member>
    <Member MemberName="OnParameterChanged">
      <MemberSignature Language="C#" Value="protected void OnParameterChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnParameterChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.OnParameterChanged" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>呼び出し、 <see cref="M:System.Web.UI.WebControls.ParameterCollection.OnParametersChanged(System.EventArgs)" /> のメソッド、 <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> を含むコレクション、 <see cref="T:System.Web.UI.WebControls.Parameter" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Web.UI.WebControls.Parameter> オブジェクトに含まれていない、 <xref:System.Web.UI.WebControls.ParameterCollection> コレクション、通話、 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> メソッドには影響を及ぼしません。 場合、 <xref:System.Web.UI.WebControls.Parameter> オブジェクトに含まれる、 <xref:System.Web.UI.WebControls.ParameterCollection> コレクション、 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> を生成、 <xref:System.Web.UI.WebControls.ParameterCollection.ParametersChanged?displayProperty=fullName> コレクションのイベントです。  
  
 場合、 <xref:System.Web.UI.WebControls.ParameterCollection> コレクションがデータ ソース コントロールが含まれている、 <xref:System.Web.UI.WebControls.ParameterCollection.ParametersChanged?displayProperty=fullName> イベント発生のデータ ソース コントロールの <xref:System.Web.UI.IDataSource.DataSourceChanged> を再バインドするデータ バインド コントロールを引き起こすイベントです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、呼び出し、 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> メソッドを <xref:System.Web.UI.WebControls.ParameterCollection.ParametersChanged> パラメーターの状態が変化したときにイベントです。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.Parameter> クラスの概要です。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter\_2\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#7)]
 [!code-vb[System.Web.UI.WebControls.Parameter\_2\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#7)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.Parameter.OnParameterChanged" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.Parameter.OnParameterChanged" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.ParameterCollection.ParametersChanged" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected virtual object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.SaveViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>変更を保存、 <see cref="T:System.Web.UI.WebControls.Parameter" /> オブジェクトのビュー ステート、ページがサーバーにポストされた時刻以降。</summary>
        <returns>
          <see cref="T:System.Object" /> への変更を含む、 <see cref="T:System.Web.UI.WebControls.Parameter" /> 状態を表示します。 このメソッドが戻るかどうかは、オブジェクトに関連付けられているビューステートがない、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ビュー ステートは、サーバー コントロールのプロパティの値を累積したものです。 これらの値が自動的に、サーバー コントロールの配置 <xref:System.Web.UI.Control.ViewState%2A> インスタンスであるプロパティの <xref:System.Web.UI.StateBag> クラスです。 このプロパティの値は、この保存状態のサーバー コントロールのライフ サイクルの段階後も、文字列オブジェクトを永続化します。  
  
 この文字列オブジェクトが、HTML に格納されている変数と、クライアントに返されるビューステートを保存すると `hidden` 要素。 カスタム サーバー コントロールを作成するときに、このメソッドをオーバーライドして、サーバー コントロールを変更する効率を向上できます <xref:System.Web.UI.WebControls.Parameter.ViewState%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="SetDirty">
      <MemberSignature Language="C#" Value="protected virtual void SetDirty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SetDirty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.SetDirty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>マーク、 <see cref="T:System.Web.UI.WebControls.Parameter" /> オブジェクトのビュー ステートの状態が記録されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Parameter.SetDirty%2A> メソッドが直接呼び出される、 <xref:System.Web.UI.WebControls.ParameterCollection.SetDirtyObject%2A?displayProperty=fullName> メソッドをマークする、 <xref:System.Web.UI.WebControls.Parameter> オブジェクトのビュー ステートの状態が記録されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Size" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはパラメーターのサイズを設定します。</summary>
        <value>整数で表されるパラメーターのサイズ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 時の値 <xref:System.Web.UI.WebControls.Parameter.Size%2A> が変更された場合、 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> メソッドが呼び出されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Type" />
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.System#ICloneable#Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の複製を返します <see cref="T:System.Web.UI.WebControls.Parameter" /> インスタンス。</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.Parameter" /> 現在のオブジェクトのコピーであります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Parameter.Clone%2A> メソッドの呼び出し、 <xref:System.Web.UI.WebControls.Parameter.%23ctor%28System.Web.UI.WebControls.Parameter%29> の新しいインスタンスを初期化するコンス トラクター、 <xref:System.Web.UI.WebControls.Parameter> 現在のインスタンスの値を持つクラス。  
  
 拡張する場合、 <xref:System.Web.UI.WebControls.Parameter> クラスをオーバーライドできます、 <xref:System.Web.UI.WebControls.Parameter.Clone%2A> メソッドを派生クラスの新しいインスタンスにコピーするか、状態が含まれます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.Parameter.#ctor(System.Web.UI.WebControls.Parameter)" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.System#Web#UI#IStateManager#IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Web.UI.WebControls.Parameter" /> オブジェクトがビュー ステートへ変更を保存します。</summary>
        <value>
          <see langword="true" /> その状態を保存する場合は、データ ソース ビューがマークされています。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.System#Web#UI#IStateManager#LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Object" /> を表す、 <see cref="T:System.Web.UI.WebControls.Parameter" /> 状態を復元します。</param>
        <summary>データ ソース ビューの以前保存したビューステートを復元します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドのビュー状態情報を <xref:System.Web.UI.WebControls.Parameter> によって保存された前のページ要求からのオブジェクト、 <xref:System.Web.UI.WebControls.Parameter.SaveViewState%2A> メソッドです。  
  
 このメソッドは、主にコントロールの開発者によって使用されます。 カスタム サーバー コントロールがそのビューステートを復元する方法を制御するには、このメソッドをオーバーライドすることができます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.System#Web#UI#IStateManager#SaveViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>変更を保存、 <see cref="T:System.Web.UI.WebControls.Parameter" /> オブジェクトのビュー ステート、ページがサーバーにポストされた時刻以降。</summary>
        <returns>
          <see cref="T:System.Object" /> への変更を含む、 <see cref="T:System.Web.UI.WebControls.Parameter" /> オブジェクトのビューステート。 このメソッドが戻るかどうかは、オブジェクトに関連付けられているビューステートがない、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ビュー ステートは、サーバー コントロールのプロパティの値を累積したものです。 これらの値が自動的に、サーバー コントロールの配置 <xref:System.Web.UI.Control.ViewState%2A> インスタンスであるプロパティの <xref:System.Web.UI.StateBag> クラスです。 このプロパティの値は、この保存状態のサーバー コントロールのライフ サイクルの段階後も、文字列オブジェクトを永続化します。  
  
 この文字列オブジェクトが、HTML に格納されている変数と、クライアントに返されるビューステートを保存すると `hidden` 要素。 カスタム サーバー コントロールを作成するときに、このメソッドをオーバーライドして、サーバー コントロールを変更する効率を向上できます <xref:System.Web.UI.WebControls.Parameter.ViewState%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
        <altmember cref="P:System.Web.UI.WebControls.Parameter.ViewState" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.System#Web#UI#IStateManager#TrackViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>により、 <see cref="T:System.Web.UI.WebControls.Parameter" /> 、コントロールの保存できるように、ビュー ステートへの変更を追跡するオブジェクト <see cref="P:System.Web.UI.Control.ViewState" /> オブジェクトと同じページにわたって永続化された要求。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの値を、それと等価の文字列形式に変換します。</summary>
        <returns>このインスタンスの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.Parameter.ToString%2A> メソッドが返される、 <xref:System.Web.UI.WebControls.Parameter.Name%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Parameter> オブジェクトです。 場合、 <xref:System.Web.UI.WebControls.Parameter> オブジェクトが、名前を持たない <xref:System.Web.UI.WebControls.Parameter.ToString%2A> 返します <xref:System.String.Empty?displayProperty=fullName>します。  
  
   
  
## 例  
 さまざまなプロパティにアクセスする方法を次のコード例に示します、 <xref:System.Web.UI.WebControls.Parameter> オブジェクトを含む、 <xref:System.Web.UI.WebControls.Parameter.Name%2A> と <xref:System.Web.UI.WebControls.Parameter.Type%2A> プロパティです。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter.ToString\_1\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter.ToString_1/CS/parametertostringcs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.Parameter.ToString\_1\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter.ToString_1/VB/parametertostringvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Name" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected virtual void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>により、 <see cref="T:System.Web.UI.WebControls.Parameter" /> 、コントロールの保存できるように、ビュー ステートへの変更を追跡するオブジェクト <see cref="P:System.Web.UI.Control.ViewState" /> オブジェクトと同じページにわたって永続化された要求。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public TypeCode Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TypeCode Type" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはパラメーターの型を設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.Parameter" /> の型。 既定値は <see cref="F:System.TypeCode.Object" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Web アプリケーションと基になるコード間の値が正しく変換されるように、厳密に型指定のパラメーターを作成する型を使用できます。  
  
 パラメーターの型が変更された場合、 <xref:System.Web.UI.WebControls.Parameter.OnParameterChanged%2A> メソッドが呼び出されます。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A>, 、<xref:System.Web.UI.WebControls.Parameter.Type%2A>, 、および <xref:System.Web.UI.WebControls.Parameter.Direction%2A> のプロパティ <xref:System.Web.UI.WebControls.Parameter> オブジェクトを出力パラメーターとストアド プロシージャの戻り値パラメーターとして使用する時にします。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> クラスの概要です。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSourceStatusEventArgs\_1\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSourceStatusEventArgs_1/CS/sql21cs.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSourceStatusEventArgs\_1\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSourceStatusEventArgs_1/VB/sql21vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">パラメーターの型は、のいずれかではない、 <see cref="T:System.TypeCode" /> 値。</exception>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.Name" />
      </Docs>
    </Member>
    <Member MemberName="ViewState">
      <MemberSignature Language="C#" Value="protected System.Web.UI.StateBag ViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.StateBag ViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Parameter.ViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.StateBag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>状態情報を保存およびのビューステートを復元できるようにするディクショナリを取得、 <see cref="T:System.Web.UI.WebControls.Parameter" /> 、同じページに対する複数の要求オブジェクトです。</summary>
        <value>インスタンス <see cref="T:System.Web.UI.StateBag" /> を含む、 <see cref="T:System.Web.UI.WebControls.Parameter" /> オブジェクトのビュー状態情報。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パラメーターのビュー ステートは、すべてのプロパティ値を累積したものです。 HTTP 要求間でこれらの値を保持するために、ASP.NET サーバー コントロールがインスタンスでは、このプロパティを使用しての <xref:System.Web.UI.StateBag> クラスにプロパティ値を格納します。 値は変数として、HTML に渡す `hidden` 入力要素の後続の要求が処理されるとします。 ビュー ステートは既定ですべてのサーバー コントロールの有効にします。  
  
 ディクショナリとその使用方法の詳細については、次を参照してください。 [Collections and Data Structures](http://msdn.microsoft.com/ja-jp/60cc581f-1db5-445b-ba04-a173396bf872)します。  
  
   
  
## 例  
 次のコード例を拡張するクラスにパラメーター オブジェクトの状態を格納するビュー ステートのオブジェクトを使用して、 <xref:System.Web.UI.WebControls.Parameter> クラスです。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.Parameter> クラスの概要です。  
  
 [!code-csharp[System.Web.UI.WebControls.Parameter\_2\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/CS/staticparameter.cs#5)]
 [!code-vb[System.Web.UI.WebControls.Parameter\_2\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.Parameter_2/VB/staticparameter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Parameter.IsTrackingViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.SaveViewState" />
        <altmember cref="M:System.Web.UI.WebControls.Parameter.TrackViewState" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.Parameter" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>