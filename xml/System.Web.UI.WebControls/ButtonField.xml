<Type Name="ButtonField" FullName="System.Web.UI.WebControls.ButtonField">
  <TypeSignature Language="C#" Value="public class ButtonField : System.Web.UI.WebControls.ButtonFieldBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ButtonField extends System.Web.UI.WebControls.ButtonFieldBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.ButtonField" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ButtonFieldBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>データ バインド コントロール内にボタンとして表示されるフィールドを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Web.UI.WebControls.ButtonField> class is used by data\-bound controls \(such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>\) to display a button for each record that is displayed. The <xref:System.Web.UI.WebControls.ButtonField> object is displayed differently depending on the data\-bound control in which it is used. For example, the <xref:System.Web.UI.WebControls.GridView> control displays a <xref:System.Web.UI.WebControls.ButtonField> object as a column, while the <xref:System.Web.UI.WebControls.DetailsView> control displays it as a row.  
  
 Clicking a button in a button field raises the command event of the parent data\-bound control. You can provide a custom routine to perform when a command button is clicked by providing an event handler for the command event.  
  
> [!NOTE]
>  The <xref:System.Web.UI.WebControls.GridView> control raises the <xref:System.Web.UI.WebControls.GridView.RowCommand> event, while the <xref:System.Web.UI.WebControls.DetailsView> control raises the <xref:System.Web.UI.WebControls.DetailsView.ItemCommand> event.  
  
 To determine the index of the record that raises the command event, use the <xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A> property of the event argument that is passed to the command event for the data\-bound control. The <xref:System.Web.UI.WebControls.ButtonField> class automatically populates the <xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A> property with the appropriate index value.  
  
 To specify the type of button to display, use the <xref:System.Web.UI.WebControls.ButtonFieldBase.ButtonType%2A> property. When displaying a link or command button, use the <xref:System.Web.UI.WebControls.ButtonField.Text%2A> property to specify the caption to display in the buttons.  
  
> [!NOTE]
>  If you set the <xref:System.Web.UI.WebControls.ButtonField.Text%2A> property, all buttons in a <xref:System.Web.UI.WebControls.ButtonField> share the same caption.  
  
 Alternatively, you can bind the <xref:System.Web.UI.WebControls.ButtonField> object to a field in a data source. This allows you to display different captions for the buttons in the <xref:System.Web.UI.WebControls.ButtonField> object. The values that are in the specified field are used for the text captions of the buttons. Set the <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> property to bind a <xref:System.Web.UI.WebControls.ButtonField> object to a field in a data source.  
  
 When displaying an image button, use the <xref:System.Web.UI.WebControls.ButtonField.ImageUrl%2A> property to specify the image to display for the buttons in the <xref:System.Web.UI.WebControls.ButtonField> object.  
  
> [!NOTE]
>  All buttons in a <xref:System.Web.UI.WebControls.ButtonField> object share the same image.  
  
 You can hide a <xref:System.Web.UI.WebControls.ButtonField> object in a data\-bound control by setting the <xref:System.Web.UI.WebControls.DataControlField.Visible%2A> property to **languageKeyword tag is not supported!!!!**  
.  
  
 The <xref:System.Web.UI.WebControls.ButtonField> object allows you to customize its header and footer sections. To display a caption in the header or footer section, set the <xref:System.Web.UI.WebControls.DataControlField.HeaderText%2A> or <xref:System.Web.UI.WebControls.DataControlField.FooterText%2A> properties, respectively. Instead of displaying text in the header section, you can display an image by setting the <xref:System.Web.UI.WebControls.DataControlField.HeaderImageUrl%2A> property. To hide the header section in a <xref:System.Web.UI.WebControls.ButtonField> object, set the <xref:System.Web.UI.WebControls.ButtonFieldBase.ShowHeader%2A> property to **languageKeyword tag is not supported!!!!**  
.  
  
> [!NOTE]
>  Some data\-bound controls \(such as the <xref:System.Web.UI.WebControls.GridView> control\) can show or hide only the entire header section of the control. These data\-bound controls do not support the <xref:System.Web.UI.WebControls.ButtonFieldBase.ShowHeader%2A> property for an individual button field. To show or hide the entire header section of a data\-bound control \(if available\), use the **languageKeyword tag is not supported!!!!**  
>  property for the control.  
  
 You also can customize the appearance of the <xref:System.Web.UI.WebControls.ButtonField> object \(font color, background color, and so on\) by setting the style properties for the different parts of the field. The following table lists the different style properties.  
  
|Style property|The style settings for|  
|--------------------|----------------------------|  
|<xref:System.Web.UI.WebControls.DataControlField.ControlStyle%2A>|The child Web server controls of the <xref:System.Web.UI.WebControls.ButtonField>.|  
|<xref:System.Web.UI.WebControls.DataControlField.FooterStyle%2A>|The footer section of the <xref:System.Web.UI.WebControls.ButtonField>.|  
|<xref:System.Web.UI.WebControls.DataControlField.HeaderStyle%2A>|The header section of the <xref:System.Web.UI.WebControls.ButtonField>.|  
|<xref:System.Web.UI.WebControls.DataControlField.ItemStyle%2A>|The data items in the <xref:System.Web.UI.WebControls.ButtonField>.|  
  
   
  
## 例  
 The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.ButtonField> object to display a column of command buttons in a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-csharp[ButtonField\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonField/CS/buttonfieldcs.aspx#1)]
 [!code-vb[ButtonField\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonField/VB/buttonfieldvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.GridView" />
    <altmember cref="P:System.Web.UI.WebControls.GridView.Columns" />
    <altmember cref="E:System.Web.UI.WebControls.GridView.RowCommand" />
    <altmember cref="P:System.Web.UI.WebControls.GridView.ShowHeader" />
    <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
    <altmember cref="E:System.Web.UI.WebControls.DetailsView.ItemCommand" />
    <altmember cref="P:System.Web.UI.WebControls.DetailsView.Rows" />
    <altmember cref="T:System.Web.UI.WebControls.BoundField" />
    <altmember cref="T:System.Web.UI.WebControls.ButtonFieldBase" />
    <altmember cref="T:System.Web.UI.WebControls.CheckBoxField" />
    <altmember cref="T:System.Web.UI.WebControls.CommandField" />
    <altmember cref="T:System.Web.UI.WebControls.DataControlField" />
    <altmember cref="T:System.Web.UI.WebControls.HyperLinkField" />
    <altmember cref="T:System.Web.UI.WebControls.TemplateField" />
    <altmember cref="P:System.Web.UI.WebControls.ButtonFieldBase.ButtonType" />
    <altmember cref="P:System.Web.UI.WebControls.ButtonField.DataTextField" />
    <altmember cref="P:System.Web.UI.WebControls.ButtonField.ImageUrl" />
    <altmember cref="P:System.Web.UI.WebControls.ButtonField.Text" />
    <altmember cref="P:System.Web.UI.WebControls.DataControlField.Visible" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ButtonField ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ButtonField.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ButtonField" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use the <xref:System.Web.UI.WebControls.ButtonField.%23ctor%2A> constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.ButtonField> class. This constructor is commonly used when adding fields to a dynamically created data\-bound control.  
  
 To add a <xref:System.Web.UI.WebControls.ButtonField> object dynamically to a data\-bound control, create a new <xref:System.Web.UI.WebControls.ButtonField> object, set its properties, and then add it to the field collection for the data\-bound control. For example, if you are using the <xref:System.Web.UI.WebControls.GridView> control, add the <xref:System.Web.UI.WebControls.ButtonField> object to the <xref:System.Web.UI.WebControls.GridView.Columns%2A> collection.  
  
> [!NOTE]
>  Although you can add fields dynamically to a data\-bound control, fields should be declared statically, and then shown or hidden, as appropriate. Statically declaring all of your fields reduces the size of the view state for the parent data\-bound control.  
  
   
  
## 例  
 The following code example demonstrates how to use the M:System.Web.UI.WebControls.ButtonField.\#ctor constructor to add a <xref:System.Web.UI.WebControls.ButtonField> object dynamically to a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-csharp[ButtonFieldCtor\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonFieldCtor/CS/buttonfieldctorcs.aspx#1)]
 [!code-vb[ButtonFieldCtor\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonFieldCtor/VB/buttonfieldctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.GridView" />
        <altmember cref="P:System.Web.UI.WebControls.GridView.Columns" />
        <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
        <altmember cref="P:System.Web.UI.WebControls.DetailsView.Fields" />
      </Docs>
    </Member>
    <Member MemberName="CommandName">
      <MemberSignature Language="C#" Value="public virtual string CommandName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ButtonField.CommandName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のボタンのときに実行するアクションを表す文字列、 <see cref="T:System.Web.UI.WebControls.ButtonField" /> オブジェクトをクリックします。</summary>
        <value>ときにボタンを実行するアクションの名前、 <see cref="T:System.Web.UI.WebControls.ButtonField" /> をクリックします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.ButtonField.CommandName%2A> など、コマンド名を関連付けるプロパティ `"Add"` または `"Remove"`, 、ボタンを使用、 <xref:System.Web.UI.WebControls.ButtonField> オブジェクトです。 設定することができます、 <xref:System.Web.UI.WebControls.ButtonField.CommandName%2A> プロパティをコマンド ボタンがクリックされたときに実行するアクションを識別する任意の文字列にします。 プログラムを使用してイベント ハンドラーでコマンド名を特定し、適切なアクションを実行します。  
  
> [!NOTE]
>  すべてのボタン、 <xref:System.Web.UI.WebControls.ButtonField> オブジェクトが同じコマンド名を共有します。  
  
 データ バインド コントロールは、特定のコマンド名を認識、それを発生させるし、自動的にコントロールの適切なイベントを処理します。 次のコマンド名が認識されます。  
  
-   `"Cancel"`  
  
-   `"Delete"`  
  
-   `"Edit"`  
  
-   `"Insert"`  
  
-   `"New"`  
  
-   `"Page"`  
  
-   `"Select"`  
  
-   `"Sort"`  
  
-   `"Update"`  
  
 ページングを呼び出すには、次のように設定します。、 <xref:System.Web.UI.WebControls.ButtonField.CommandName%2A> に `"Page"` と <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> の格納されている <xref:System.Web.UI.WebControls.Button> に制御を `"First"`, 、`"Last"`, 、`"Prev"`, 、`"Next"`, 、またはページ番号です。 ただし、以降、 <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> の <xref:System.Web.UI.WebControls.ButtonField> コントロールは、整数の行インデックスでは常に、 <xref:System.Web.UI.WebControls.ButtonField> コントロールはページングを呼び出して適していません。 同様に、設定して並べ替えを呼び出すことができます、 <xref:System.Web.UI.WebControls.ButtonField.CommandName%2A> に `"Sort"`, 、 <xref:System.Web.UI.WebControls.Button.CommandArgument%2A> プロパティを <xref:System.Web.UI.WebControls.ButtonField> コントロールは、常に整数の行インデックス。 このため、 <xref:System.Web.UI.WebControls.ButtonField> コントロールが並べ替えを起動するために適していません。 など、カスタム コマンド名、 `"Add"` と `"Remove"`, 、コマンド名を確認して、カスタム アクションを実行するイベントのコードを記述する必要があります。 詳細については、「<xref:System.Web.UI.WebControls.DataControlCommands>」を参照してください。  
  
> [!NOTE]
>  すべてのコマンド名は、すべてのデータ バインド コントロールによって認識されます。 たとえば、 `"New"` で認識されない、 <xref:System.Web.UI.WebControls.GridView> コントロールと `"Select"` で認識されない、 <xref:System.Web.UI.WebControls.DetailsView> コントロールです。  
  
 このプロパティの値は、ビュー ステートに格納されます。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ButtonField.CommandName%2A> のボタンのコマンド名を指定するプロパティ、 <xref:System.Web.UI.WebControls.ButtonField> のオブジェクト、 <xref:System.Web.UI.WebControls.GridView> コントロールです。  
  
 [!code-csharp[ButtonField\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonField/CS/buttonfieldcs.aspx#1)]
 [!code-vb[ButtonField\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonField/VB/buttonfieldvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyProperties">
      <MemberSignature Language="C#" Value="protected override void CopyProperties (System.Web.UI.WebControls.DataControlField newField);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CopyProperties(class System.Web.UI.WebControls.DataControlField newField) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ButtonField.CopyProperties(System.Web.UI.WebControls.DataControlField)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newField" Type="System.Web.UI.WebControls.DataControlField" />
      </Parameters>
      <Docs>
        <param name="newField">
          <see cref="T:System.Web.UI.WebControls.DataControlField" /> を現在のプロパティをコピーする <see cref="T:System.Web.UI.WebControls.ButtonField" />です。</param>
        <summary>現在のプロパティをコピー <see cref="T:System.Web.UI.WebControls.ButtonField" /> を指定したオブジェクト <see cref="T:System.Web.UI.WebControls.DataControlField" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ButtonFieldBase.CopyProperties%2A> メソッドは、ヘルパー メソッドで使用される、 <xref:System.Web.UI.WebControls.DataControlField.CloneField%2A?displayProperty=fullName> に現在のプロパティをコピーする方法 <xref:System.Web.UI.WebControls.ButtonFieldBase>\-派生オブジェクトを <xref:System.Web.UI.WebControls.DataControlField> によって作成されたオブジェクト、 <xref:System.Web.UI.WebControls.DataControlField.CloneField%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Web.UI.WebControls.ButtonField.CopyProperties(System.Web.UI.WebControls.DataControlField)" /> method in a derived class, call the <see cref="M:System.Web.UI.WebControls.ButtonField.CopyProperties(System.Web.UI.WebControls.DataControlField)" /> method of the base class to ensure that all properties of the object are copied.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.ButtonFieldBase.CopyProperties(System.Web.UI.WebControls.DataControlField)" />
      </Docs>
    </Member>
    <Member MemberName="CreateField">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.DataControlField CreateField ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.DataControlField CreateField() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ButtonField.CreateField" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataControlField</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作成しの新しいインスタンスを返す、 <see cref="T:System.Web.UI.WebControls.ButtonField" /> クラスです。</summary>
        <returns>新しいインスタンス、  <see cref="T:System.Web.UI.WebControls.ButtonField" /> クラスです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ButtonField.CreateField%2A> メソッドは、ヘルパー メソッドで使用される、 <xref:System.Web.UI.WebControls.DataControlField.CloneField%2A> 空を作成する基本クラスのメソッド <xref:System.Web.UI.WebControls.ButtonField> 、現在のプロパティをコピー先となるオブジェクト <xref:System.Web.UI.WebControls.ButtonField>\-派生オブジェクト。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Override the <see cref="M:System.Web.UI.WebControls.ButtonField.CreateField" /> method to return a new instance of the derived class. Do not call the <see cref="M:System.Web.UI.WebControls.ButtonField.CreateField" /> method of the base class.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.CloneField" />
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.CopyProperties(System.Web.UI.WebControls.DataControlField)" />
      </Docs>
    </Member>
    <Member MemberName="DataTextField">
      <MemberSignature Language="C#" Value="public virtual string DataTextField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataTextField" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ButtonField.DataTextField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に値をバインドするデータ フィールドの名前、 <see cref="P:System.Web.UI.WebControls.Button.Text" /> のプロパティ、 <see cref="T:System.Web.UI.WebControls.Button" /> によってレンダリングされるコントロール、 <see cref="T:System.Web.UI.WebControls.ButtonField" /> オブジェクトです。</summary>
        <value>バインドするフィールドの名前、 <see cref="T:System.Web.UI.WebControls.ButtonField" />です。 既定値は空の文字列 \(""\)、ことを示します、 <see cref="P:System.Web.UI.WebControls.ButtonField.DataTextField" /> プロパティが設定されていません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Web.UI.WebControls.ButtonFieldBase.ButtonType%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ButtonField> に設定されているオブジェクト、 <xref:System.Web.UI.WebControls.ButtonType.Button> または <xref:System.Web.UI.WebControls.ButtonType.Link> 値を使用して、 <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> プロパティをバインドするフィールドの名前を指定する、 <xref:System.Web.UI.WebControls.ButtonField> オブジェクトです。 フィールドの値は、ボタンのテキストとして表示されますし、 <xref:System.Web.UI.WebControls.ButtonField> オブジェクトです。 必要に応じて、表示されているテキストを書式設定を設定できます、 <xref:System.Web.UI.WebControls.ButtonField.DataTextFormatString%2A> プロパティです。  
  
 使用する代わりに、 <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> バインドするプロパティ、 <xref:System.Web.UI.WebControls.ButtonField> オブジェクトのフィールドにデータ ソースから使用することができます、 <xref:System.Web.UI.WebControls.ButtonField.Text%2A> 静的テキスト、ボタンのテキストを表示するプロパティ、 <xref:System.Web.UI.WebControls.ButtonField> オブジェクトです。 ときに、 <xref:System.Web.UI.WebControls.ButtonField.Text%2A> プロパティを使用して、各ボタンに同じキャプションが共有されます。  
  
> [!NOTE]
>  場合、 <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> と <xref:System.Web.UI.WebControls.ButtonField.Text%2A> プロパティは両方の設定、 <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> プロパティが優先されます。  
  
 このプロパティの値は、ビュー ステートに格納されます。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> プロパティを表示するには、どのフィールドを指定する、 <xref:System.Web.UI.WebControls.ButtonField> の列、 <xref:System.Web.UI.WebControls.GridView> コントロールです。  
  
 [!code-csharp[ButtonFieldDataTextField\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonFieldDataTextField/CS/buttonfielddatatextfieldcs.aspx#1)]
 [!code-vb[ButtonFieldDataTextField\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonFieldDataTextField/VB/buttonfielddatatextfieldvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ButtonField.DataTextFormatString" />
        <altmember cref="P:System.Web.UI.WebControls.ButtonField.Text" />
      </Docs>
    </Member>
    <Member MemberName="DataTextFormatString">
      <MemberSignature Language="C#" Value="public virtual string DataTextFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataTextFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ButtonField.DataTextFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはフィールドの値の表示形式を指定する文字列を設定します。</summary>
        <value>フィールドの値の表示形式を指定する書式指定文字列。 既定値は空の文字列 \(""\) です。この値は、フィールド値に適用される特定の書式が設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.ButtonField.DataTextFormatString%2A> で表示される値のカスタム表示形式を指定するプロパティ、 <xref:System.Web.UI.WebControls.ButtonField> オブジェクトです。 場合、 <xref:System.Web.UI.WebControls.ButtonField.DataTextFormatString%2A> プロパティが設定されていないと、特殊な書式なし、フィールドの値が表示されます。  
  
> [!NOTE]
>  書式指定文字列が適用される場合にのみ、 <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> プロパティを設定します。  
  
 書式指定文字列は任意のリテラル文字列で、フィールドの値のプレース ホルダーは、通常は。 たとえば、書式指定文字列で `"Item Value: {0}"`, 、 `{0}` に表示されるときに、プレース ホルダーがフィールドの値に置き換えられます、 <xref:System.Web.UI.WebControls.ButtonField> オブジェクトです。 書式指定文字列の残りの部分は、リテラル テキストとして表示されます。  
  
> [!NOTE]
>  書式指定文字列にプレース ホルダーが含まれていない場合、データ ソースからのフィールドの値は最終的な表示テキストには含まれません。  
  
 フォームでは、中かっこでラップされ、コロンで区切られた 2 つの部分から成る、プレース ホルダー { `A` : `Bxx` } します。 コロンの前に値 \(`A` 一般的な例で\) パラメーターの 0 から始まるリストのフィールドの値のインデックスを指定します。  
  
> [!NOTE]
>  これは、 `A` パラメーターは書式指定構文の一部です。 各セルに 1 つだけのフィールドの値があるためこの値は 0 にのみ設定できます。  
  
 コロンと、コロンの後の値はオプションです。 コロンの後に文字 \(`B` 一般的な例で\) 値を表示する形式を指定します。 次の表は、一般的な形式を一覧表示します。  
  
|書式指定文字|説明|  
|------------|--------|  
|`C`|数値を通貨形式で表示します。|  
|`D`|10 進形式で数値を表示します。|  
|`E`|指数の指数書式で数値を表示します。|  
|`F`|固定形式で数値を表示します。|  
|`G`|数値を表示は一般に書式設定します。|  
|`N`|数値書式で数値を表示します。|  
|`X`|16 進形式で数値を表示します。|  
  
> [!NOTE]
>  以外の `X`, 、書式指定文字が大文字小文字を区別できません。`X` 書式指定文字が指定されている場合は、16 進数の文字を表示します。  
  
 書式指定文字の後の値 \(`xx` 一般的な例で\) を表示する有効桁数または小数点以下の数を指定します。 たとえば、書式指定文字列 `"{0:F2}"` 小数点以下 2 桁の固定小数点数が表示されます。  
  
 書式指定文字列の詳細については、次を参照してください。 [Formatting Overview](http://msdn.microsoft.com/ja-jp/0d1364da-5b30-4d42-8e6b-03378343343f)します。  
  
 このプロパティの値は、ビュー ステートに格納されます。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ButtonField.DataTextFormatString%2A> プロパティ、フィールドの値のカスタムの表示形式を指定します。  
  
 [!code-csharp[ButtonFieldDataTextField\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonFieldDataTextField/CS/buttonfielddatatextfieldcs.aspx#1)]
 [!code-vb[ButtonFieldDataTextField\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonFieldDataTextField/VB/buttonfielddatatextfieldvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatDataTextValue">
      <MemberSignature Language="C#" Value="protected virtual string FormatDataTextValue (object dataTextValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string FormatDataTextValue(object dataTextValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ButtonField.FormatDataTextValue(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTextValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataTextValue">書式設定するフィールド値。</param>
        <summary>内のセルの指定したフィールドの値を書式設定、 <see cref="T:System.Web.UI.WebControls.ButtonField" /> オブジェクトです。</summary>
        <returns>フィールドの値で指定された形式に変換、 <see cref="P:System.Web.UI.WebControls.ButtonField.DataTextFormatString" /> プロパティです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ButtonField.FormatDataTextValue%2A> メソッドはフィールドの値で指定されている形式に変換するために使用するヘルパー メソッド、 <xref:System.Web.UI.WebControls.ButtonField.DataTextFormatString%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When extending the <see cref="T:System.Web.UI.WebControls.ButtonField" /> class, you can override the <see cref="M:System.Web.UI.WebControls.ButtonField.FormatDataTextValue(System.Object)" /> method to perform a custom formatting routine.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.ButtonField.DataTextFormatString" />
      </Docs>
    </Member>
    <Member MemberName="ImageUrl">
      <MemberSignature Language="C#" Value="public virtual string ImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ButtonField.ImageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定内の各ボタンに表示するイメージ、 <see cref="T:System.Web.UI.WebControls.ButtonField" /> オブジェクトです。</summary>
        <value>内の各ボタンに表示するイメージ、 <see cref="T:System.Web.UI.WebControls.ButtonField" />です。 既定値は空の文字列 \(""\)、ことを示します、 <see cref="P:System.Web.UI.WebControls.ButtonField.ImageUrl" /> プロパティが設定されていません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Web.UI.WebControls.ButtonFieldBase.ButtonType%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ButtonField> に設定されているオブジェクト、 <xref:System.Web.UI.WebControls.ButtonType.Image> 値を使用して、 <xref:System.Web.UI.WebControls.ButtonField.ImageUrl%2A> プロパティの各ボタンに表示するイメージを指定します。 このイメージは、クライアント ブラウザーには、その形式がサポートしている限り、任意のファイル形式 \(.jpg、.gif、.bmp など\) であることができます。  
  
 このプロパティの値は、ビュー ステートに格納されます。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ButtonField.ImageUrl%2A> プロパティ内の各ボタンに表示するイメージを指定して、 <xref:System.Web.UI.WebControls.ButtonField> オブジェクトです。 このコード例を表示するには、独自のイメージを提供する必要があります。  
  
 [!code-csharp[ButtonFieldImageUrl\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonFieldImageUrl/CS/buttonfieldimageurlcs.aspx#1)]
 [!code-vb[ButtonFieldImageUrl\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonFieldImageUrl/VB/buttonfieldimageurlvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override bool Initialize (bool sortingEnabled, System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Initialize(bool sortingEnabled, class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ButtonField.Initialize(System.Boolean,System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortingEnabled" Type="System.Boolean" />
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="sortingEnabled">
          <see langword="true" /> 並べ替えを有効にするにはそれ以外の場合、 <see langword="false" />です。</param>
        <param name="control">所有するデータ コントロール、 <see cref="T:System.Web.UI.WebControls.ButtonField" />です。</param>
        <summary>現在の <see cref="T:System.Web.UI.WebControls.ButtonField" /> オブジェクトを初期化します。</summary>
        <returns>
          <see langword="false" />, 、コントロールを示すは、データにバインドする必要はありません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ButtonField.Initialize%2A> メソッドは、データ コントロール、 <xref:System.Web.UI.WebControls.ButtonField> オブジェクトが関連の基本的なオブジェクトの初期化を実行するフィールドが、決して行のコレクションに追加する前に、フィールドのインスタンス。 などのデータ コントロール <xref:System.Web.UI.WebControls.DetailsView> と <xref:System.Web.UI.WebControls.GridView>, を呼び出す、 <xref:System.Web.UI.WebControls.DataControlField.Initialize%2A> メソッドにその `CreateChildControls` 他のメソッドの前にメソッドなど `CreateRow`, 、データを特定の行を作成すると呼ばれます。  
  
 呼び出す、 <xref:System.Web.UI.WebControls.ButtonField.Initialize%2A> 、カスタムのデータ バインド コントロールを作成している場合は、メソッドを使用する <xref:System.Web.UI.WebControls.TableCell> の基本的な初期化を実行するオブジェクト、 <xref:System.Web.UI.WebControls.ButtonField> オブジェクトです。 場合に、このメソッドを実装、 <xref:System.Web.UI.WebControls.ButtonField>\-派生型では、その設定の前に、オブジェクトの初期化が必要です <xref:System.Web.UI.WebControls.TableCell> データをオブジェクトまたはコントロールで、 <xref:System.Web.UI.WebControls.ButtonField.InitializeCell%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>You should override the <see cref="M:System.Web.UI.WebControls.ButtonField.Initialize(System.Boolean,System.Web.UI.Control)" /> method and return <see langword="true" />, if the field requires that data binding be performed on postback in order for the field to work correctly.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.ButtonField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="InitializeCell">
      <MemberSignature Language="C#" Value="public override void InitializeCell (System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlCellType cellType, System.Web.UI.WebControls.DataControlRowState rowState, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void InitializeCell(class System.Web.UI.WebControls.DataControlFieldCell cell, valuetype System.Web.UI.WebControls.DataControlCellType cellType, valuetype System.Web.UI.WebControls.DataControlRowState rowState, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ButtonField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Web.UI.WebControls.DataControlFieldCell" />
        <Parameter Name="cellType" Type="System.Web.UI.WebControls.DataControlCellType" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cell">初期化する <see cref="T:System.Web.UI.WebControls.DataControlFieldCell" />。</param>
        <param name="cellType">A <see cref="T:System.Web.UI.WebControls.DataControlCellType" /> 行 \(ヘッダー、フッター、またはデータ\) の種類を示す値。</param>
        <param name="rowState">
          <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> 値のいずれか。</param>
        <param name="rowIndex">行の 0 から始まるインデックス。</param>
        <summary>指定された初期化 <see cref="T:System.Web.UI.WebControls.DataControlFieldCell" /> オブジェクトを指定した行の状態にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ButtonField.InitializeCell%2A> メソッドで指定されているボタンの種類の作成、 <xref:System.Web.UI.WebControls.ButtonFieldBase.ButtonType%2A> プロパティに追加し、 <xref:System.Web.UI.Control.Controls%2A> のコレクション、 <xref:System.Web.UI.WebControls.DataControlFieldCell> オブジェクトです。<xref:System.Web.UI.WebControls.Button.CommandArgument%2A> のプロパティ、 <xref:System.Web.UI.WebControls.Button> に設定されているコントロール `rowIndex`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ButtonField.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定内の各ボタンに表示される静的キャプション、 <see cref="T:System.Web.UI.WebControls.ButtonField" /> オブジェクトです。</summary>
        <value>内の各ボタンに表示されるキャプション、 <see cref="T:System.Web.UI.WebControls.ButtonField" />です。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Web.UI.WebControls.ButtonFieldBase.ButtonType%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ButtonField> に設定されているオブジェクト、 <xref:System.Web.UI.WebControls.ButtonType.Button> または <xref:System.Web.UI.WebControls.ButtonType.Link> 値を使用して、 <xref:System.Web.UI.WebControls.ButtonField.Text%2A> 静的テキスト、ボタンのキャプションを表示するプロパティを <xref:System.Web.UI.WebControls.ButtonField>です。 各ボタンは、同じキャプションを共有します。  
  
 使用する代わりに、 <xref:System.Web.UI.WebControls.ButtonField.Text%2A> 静的テキストを表示するプロパティ、 <xref:System.Web.UI.WebControls.ButtonField> オブジェクトを使用することができます、 <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> バインドするプロパティ、 <xref:System.Web.UI.WebControls.ButtonField> データ ソース内のフィールドにします。 フィールドの値はボタンのキャプションとして表示されます。  
  
> [!NOTE]
>  場合、 <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> と <xref:System.Web.UI.WebControls.ButtonField.Text%2A> プロパティは両方の設定、 <xref:System.Web.UI.WebControls.ButtonField.DataTextField%2A> プロパティが優先されます。  
  
 このプロパティの値は、ビュー ステートに格納されます。  
  
 このプロパティの値を設定すると、デザイナーのツールを使用してリソース ファイルに自動的に保存できます。 詳細については、<xref:System.ComponentModel.LocalizableAttribute> および [ASP.NET Globalization and Localization](http://msdn.microsoft.com/ja-jp/8ef3838e-9d05-4236-9dd0-ceecff9df80d) を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ButtonField.Text%2A> 内の各ボタンに表示するキャプションを指定するプロパティ、 <xref:System.Web.UI.WebControls.ButtonField> オブジェクトです。  
  
 [!code-csharp[ButtonField\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonField/CS/buttonfieldcs.aspx#1)]
 [!code-vb[ButtonField\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonField/VB/buttonfieldvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ButtonField.DataTextField" />
      </Docs>
    </Member>
    <Member MemberName="ValidateSupportsCallback">
      <MemberSignature Language="C#" Value="public override void ValidateSupportsCallback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ValidateSupportsCallback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ButtonField.ValidateSupportsCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>かどうかをコントロールに含まれている、 <see cref="T:System.Web.UI.WebControls.ButtonField" /> サポート コールバック オブジェクトします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ButtonField.ValidateSupportsCallback%2A> メソッドはかどうかを制御するために使用するヘルパー メソッドに含まれている、 <xref:System.Web.UI.WebControls.ButtonField> サポート コールバック オブジェクトします。 このメソッドは、コールバックがサポートされていることを示すために、空のメソッド \(コードが含まれていないメソッド\) として実装されます。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.ButtonField.ValidateSupportsCallback%2A> メソッドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Classes that derive from the <see cref="T:System.Web.UI.WebControls.BoundField" /> class can override the <see cref="M:System.Web.UI.WebControls.ButtonField.ValidateSupportsCallback" /> method to indicate whether the controls that are contained by the field support callbacks. To indicate that callbacks are supported, implement the <see cref="M:System.Web.UI.WebControls.ButtonField.ValidateSupportsCallback" /> method as an empty method that does not throw an exception; otherwise, throw an exception with a useful message describing why callbacks are not supported.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>