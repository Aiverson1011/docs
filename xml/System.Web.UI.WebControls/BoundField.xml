<Type Name="BoundField" FullName="System.Web.UI.WebControls.BoundField">
  <TypeSignature Language="C#" Value="public class BoundField : System.Web.UI.WebControls.DataControlField" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BoundField extends System.Web.UI.WebControls.DataControlField" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.BoundField" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.DataControlField</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>データ バインド コントロール内にテキストとして表示されるフィールドを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BoundField> クラスはデータ バインド コントロールによって使用 \(よう <xref:System.Web.UI.WebControls.GridView> と <xref:System.Web.UI.WebControls.DetailsView>\) フィールドの値をテキストとして表示します。<xref:System.Web.UI.WebControls.BoundField> オブジェクトが使用されているデータ バインド コントロールによって異なって表示されます。 たとえば、 <xref:System.Web.UI.WebControls.GridView> 表示を制御、 <xref:System.Web.UI.WebControls.BoundField> オブジェクト、列として中に、 <xref:System.Web.UI.WebControls.DetailsView> コントロールが、行として表示します。  
  
 表示するフィールドを指定する、 <xref:System.Web.UI.WebControls.BoundField> オブジェクト、設定、 <xref:System.Web.UI.WebControls.BoundField.DataField%2A> プロパティ、フィールドの名前にします。 フィールドの値を HTML でエンコードするを設定して表示されるまで、 <xref:System.Web.UI.WebControls.BoundField.HtmlEncode%2A> プロパティを `true`します。 フィールドの値を設定して、カスタム書式指定文字列を適用することができます、 <xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A> プロパティです。 ときに、 <xref:System.Web.UI.WebControls.BoundField.HtmlEncode%2A> プロパティは、 `true`, 、フィールドのエンコードされた文字列値は、カスタム書式指定文字列で使用します。 既定では、書式指定文字列は、データ バインド コントロールが読み取り専用モードの場合にのみフィールドの値に適用されます。 書式指定文字列をデータ バインド コントロールが編集モードのときに表示される値に適用するには、設定、 <xref:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode%2A> プロパティを `true`します。 設定してカスタムのキャプションを表示するには、フィールドの値が null の場合、 <xref:System.Web.UI.WebControls.BoundField.NullDisplayText%2A> プロパティです。<xref:System.Web.UI.WebControls.BoundField> オブジェクトは、空の文字列にも自動的に変換できます \(""\) を設定して値を null 値をフィールド、 <xref:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull%2A> プロパティを `true`します。  
  
 非表示にすることができます、 <xref:System.Web.UI.WebControls.BoundField> を設定してデータ バインド コントロール内のオブジェクト、 <xref:System.Web.UI.WebControls.DataControlField.Visible%2A> プロパティを `false`します。 フィールドの値が編集モードに変更されないようにするには、設定、 <xref:System.Web.UI.WebControls.BoundField.ReadOnly%2A> プロパティを `true`します。 データ バインドで制御レコードの挿入をサポートする \(など、 <xref:System.Web.UI.WebControls.DetailsView> コントロール\)、非表示にすることができます、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトを設定して、 <xref:System.Web.UI.WebControls.DataControlField.InsertVisible%2A> プロパティを `false`します。 挿入モードでの自動生成されたキー フィールドを非表示にするときにこれは一般的です。  
  
 ヘッダーとフッター セクションをカスタマイズすることができます、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。 ヘッダーまたはフッターのセクションでは、キャプションを表示するには、設定、 <xref:System.Web.UI.WebControls.DataControlField.HeaderText%2A> または <xref:System.Web.UI.WebControls.DataControlField.FooterText%2A> プロパティそれぞれします。 ヘッダー セクションにテキストを表示せずにイメージを表示するには、 <xref:System.Web.UI.WebControls.DataControlField.HeaderImageUrl%2A> プロパティです。 ヘッダー セクションを非表示にすることができます、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトを設定して、 <xref:System.Web.UI.WebControls.DataControlField.ShowHeader%2A> プロパティを `false`します。  
  
> [!NOTE]
>  一部のデータ バインド コントロール \(など、 <xref:System.Web.UI.WebControls.GridView> コントロール\) を表示またはコントロールのすべてのヘッダー セクションのみを非表示にできます。 これらのデータ バインド コントロールをサポートしていない、 <xref:System.Web.UI.WebControls.DataControlField.ShowHeader%2A> 個別のバインド フィールド プロパティ。 表示する \(該当する場合\)、データ バインド コントロールのすべてのヘッダー セクションを非表示にするか、コントロールの `ShowHeader` プロパティです。  
  
 外観をカスタマイズできる、 <xref:System.Web.UI.WebControls.BoundField> オブジェクト \(フォントの色や背景色、\)、フィールドの各部分のスタイルのプロパティを設定しています。 次の表は、さまざまなスタイル プロパティを一覧表示します。  
  
|スタイル プロパティ|説明|  
|----------------|--------|  
|<xref:System.Web.UI.WebControls.DataControlField.ControlStyle%2A>|子の Web サーバー コントロールのスタイル設定、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。|  
|<xref:System.Web.UI.WebControls.DataControlField.FooterStyle%2A>|フッター セクションのスタイルの設定、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。|  
|<xref:System.Web.UI.WebControls.DataControlField.HeaderStyle%2A>|ヘッダー セクションのスタイルの設定、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。|  
|<xref:System.Web.UI.WebControls.DataControlField.ItemStyle%2A>|内のデータ項目のスタイルの設定、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。|  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BoundField> 内のフィールドの値を表示するオブジェクト、 <xref:System.Web.UI.WebControls.GridView> コントロールです。  
  
 [!code-csharp[BoundField\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BoundField/CS/boundfieldcs.aspx#1)]
 [!code-vb[BoundField\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BoundField/VB/boundfieldvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.GridView" />
    <altmember cref="P:System.Web.UI.WebControls.GridView.Columns" />
    <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
    <altmember cref="P:System.Web.UI.WebControls.DetailsView.Fields" />
    <altmember cref="T:System.Web.UI.WebControls.ButtonField" />
    <altmember cref="T:System.Web.UI.WebControls.CheckBoxField" />
    <altmember cref="T:System.Web.UI.WebControls.CommandField" />
    <altmember cref="T:System.Web.UI.WebControls.DataControlField" />
    <altmember cref="T:System.Web.UI.WebControls.HyperLinkField" />
    <altmember cref="T:System.Web.UI.WebControls.TemplateField" />
    <altmember cref="P:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode" />
    <altmember cref="P:System.Web.UI.WebControls.BoundField.DataField" />
    <altmember cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
    <altmember cref="P:System.Web.UI.WebControls.DataControlField.InsertVisible" />
    <altmember cref="P:System.Web.UI.WebControls.BoundField.NullDisplayText" />
    <altmember cref="P:System.Web.UI.WebControls.BoundField.ReadOnly" />
    <altmember cref="P:System.Web.UI.WebControls.CheckBoxField.Text" />
    <altmember cref="P:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull" />
    <altmember cref="P:System.Web.UI.WebControls.DataControlField.Visible" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BoundField ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.BoundField" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use this constructor to initialize a new instance of the <xref:System.Web.UI.WebControls.BoundField> class. This constructor is commonly used when adding fields to a dynamically created data\-bound control.  
  
 To dynamically add a <xref:System.Web.UI.WebControls.BoundField> object to a data\-bound control, create a new <xref:System.Web.UI.WebControls.BoundField> object, set its properties, and then add it to the data\-bound control's field collection. For example, if you are using the <xref:System.Web.UI.WebControls.GridView> control, add the <xref:System.Web.UI.WebControls.BoundField> object to the <xref:System.Web.UI.WebControls.GridView.Columns%2A> collection.  
  
> [!NOTE]
>  Although you can dynamically add fields to a data\-bound control, it is strongly recommended that fields be statically declared and then shown or hidden, as appropriate. Statically declaring all of your fields reduces the size of the view state for the parent data\-bound control.  
  
   
  
## 例  
 The following code example demonstrates how to use the constructor to dynamically add a <xref:System.Web.UI.WebControls.BoundField> object to a <xref:System.Web.UI.WebControls.GridView> control.  
  
 [!code-csharp[BoundFieldCtor\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BoundFieldCtor/CS/boundfieldctorcs.aspx#1)]
 [!code-vb[BoundFieldCtor\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BoundFieldCtor/VB/boundfieldctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.GridView" />
        <altmember cref="P:System.Web.UI.WebControls.GridView.Columns" />
      </Docs>
    </Member>
    <Member MemberName="ApplyFormatInEditMode">
      <MemberSignature Language="C#" Value="public virtual bool ApplyFormatInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApplyFormatInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定によって、書式指定文字列を指定するかどうかを示す値、 <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" /> データ バインド コントロールを含むときに、フィールドの値にプロパティを適用、 <see cref="T:System.Web.UI.WebControls.BoundField" /> オブジェクトが編集モードにします。</summary>
        <value>
          <see langword="true" /> 書式指定文字列を編集モードであるフィールドの値に適用するにはそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データ バインド コントロール \(よう <xref:System.Web.UI.WebControls.DetailsView>, 、<xref:System.Web.UI.WebControls.FormView>, 、および <xref:System.Web.UI.WebControls.GridView>\) 別の表示モード、読み取り、編集、またはレコードを挿入するアクセス許可があります。 既定では、書式設定文字列を指定して、 <xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A> プロパティは、データ バインド コントロールが読み取り専用モードの場合にのみ、フィールドの値に適用します。 書式指定文字列をデータ バインド コントロールが編集モードのときに表示される値に適用するには、設定、 <xref:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode%2A> プロパティを `true`します。  
  
> [!NOTE]
>  A <xref:System.Web.UI.WebControls.BoundField> オブジェクトは自動的に削除しませんデータ ソースのフィールドが更新されたときに書式設定します。 格納されている値の一部として書式設定したくない場合は、書式設定をプログラムで削除する必要があります。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode%2A> 中にフィールドの値に対する文字列の書式を適用するプロパティ、 <xref:System.Web.UI.WebControls.GridView> コントロールが編集モードになっています。 書式設定し、プログラムで削除データ ソースの値を更新する前にされます。  
  
 [!code-csharp[BoundFieldApplyFormatInEditMode\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/boundfieldapplyformatineditmode/CS/boundfieldapplyformatineditmodecs.aspx#1)]
 [!code-vb[BoundFieldApplyFormatInEditMode\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/boundfieldapplyformatineditmode/VB/boundfieldapplyformatineditmodevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
        <altmember cref="E:System.Web.UI.WebControls.GridView.RowUpdating" />
        <altmember cref="E:System.Web.UI.WebControls.DetailsView.ItemUpdating" />
      </Docs>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public virtual bool ConvertEmptyStringToNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertEmptyStringToNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値の文字列値を空にするかどうか \(""\) データ ソースのデータ フィールドが更新されたときに自動的に、null 値に変換されます。</summary>
        <value>
          <see langword="true" /> 自動的に空の文字列値を null 値に変換するにはそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザーは、フィールドの値を更新またはレコードを挿入するときの空の文字列を入力する可能性があります。 使用して、 <xref:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull%2A> プロパティをデータ ソースのデータ フィールドが更新されたときに空の文字列値が自動的に null に変換するかどうかを指定します。  
  
> [!NOTE]
>  既定では、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトには、null 値が空の文字列として表示されます。 別の値を表示する設定、 <xref:System.Web.UI.WebControls.BoundField.NullDisplayText%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull%2A> ことを指定するプロパティ、空の文字列 \(""\) フィールドの値は null に自動的に変換する必要があります。  
  
 [!code-csharp[BoundFieldConvertEmptyStringToNull\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/boundfieldconvertemptystringtonull/CS/boundfieldconvertemptystingtonullcs.aspx#1)]
 [!code-vb[BoundFieldConvertEmptyStringToNull\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/boundfieldconvertemptystringtonull/VB/boundfieldconvertemptystingtonullvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataField" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.NullDisplayText" />
      </Docs>
    </Member>
    <Member MemberName="CopyProperties">
      <MemberSignature Language="C#" Value="protected override void CopyProperties (System.Web.UI.WebControls.DataControlField newField);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CopyProperties(class System.Web.UI.WebControls.DataControlField newField) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.CopyProperties(System.Web.UI.WebControls.DataControlField)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newField" Type="System.Web.UI.WebControls.DataControlField" />
      </Parameters>
      <Docs>
        <param name="newField">
          <see cref="T:System.Web.UI.WebControls.DataControlField" /> 、現在のプロパティをコピーする <see cref="T:System.Web.UI.WebControls.BoundField" /> にします。</param>
        <summary>現在のプロパティをコピー <see cref="T:System.Web.UI.WebControls.BoundField" /> を指定したオブジェクト <see cref="T:System.Web.UI.WebControls.DataControlField" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BoundField.CopyProperties%2A> メソッドは、ヘルパー メソッドで使用される、 <xref:System.Web.UI.WebControls.DataControlField.CloneField%2A?displayProperty=fullName> に現在のプロパティをコピーする方法 <xref:System.Web.UI.WebControls.BoundField> オブジェクトを <xref:System.Web.UI.WebControls.DataControlField> メソッドによって作成されたオブジェクト。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.CloneField" />
        <altmember cref="M:System.Web.UI.WebControls.BoundField.CreateField" />
      </Docs>
    </Member>
    <Member MemberName="CreateField">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.DataControlField CreateField ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.DataControlField CreateField() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.CreateField" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataControlField</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>空の <see cref="T:System.Web.UI.WebControls.BoundField" /> オブジェクトを作成します。</summary>
        <returns>空の <see cref="T:System.Web.UI.WebControls.BoundField" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Web.UI.WebControls.BoundField.CreateField%2A> method is a helper method used by the <xref:System.Web.UI.WebControls.DataControlField.CloneField%2A?displayProperty=fullName> method to create an empty <xref:System.Web.UI.WebControls.BoundField> object to copy the properties of the current <xref:System.Web.UI.WebControls.BoundField> object to.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.CloneField" />
        <altmember cref="M:System.Web.UI.WebControls.BoundField.CopyProperties(System.Web.UI.WebControls.DataControlField)" />
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public virtual string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.DataField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.DataSourceViewSchemaConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定にバインドするデータ フィールドの名前、 <see cref="T:System.Web.UI.WebControls.BoundField" /> オブジェクトです。</summary>
        <value>バインドするデータ フィールドの名前、 <see cref="T:System.Web.UI.WebControls.BoundField" />です。 既定値は空の文字列 \(""\) です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BoundField.DataField%2A> プロパティをバインドするデータ フィールドの名前を指定する、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。 指定したフィールドの値が表示されます、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトをテキスト。 設定して、表示されるテキストをフォーマットすることができます必要に応じて、 <xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A> プロパティです。  
  
> [!NOTE]
>  フィールドの値が null の場合、空の文字列 \(""\) は、既定値を表示します。 別のキャプションを指定する、 <xref:System.Web.UI.WebControls.BoundField.NullDisplayText%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BoundField.DataField%2A> プロパティを表示するには、どのフィールドを指定する、 <xref:System.Web.UI.WebControls.BoundField> のフィールドの列、 <xref:System.Web.UI.WebControls.GridView> コントロールです。  
  
 [!code-csharp[BoundField\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BoundField/CS/boundfieldcs.aspx#1)]
 [!code-vb[BoundField\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BoundField/VB/boundfieldvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.NullDisplayText" />
      </Docs>
    </Member>
    <Member MemberName="DataFormatString">
      <MemberSignature Language="C#" Value="public virtual string DataFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはフィールドの値の表示形式を指定する文字列を設定します。</summary>
        <value>フィールドの値の表示形式を指定する書式指定文字列。 既定値は空の文字列 \(""\) です。この値は、フィールド値に適用される特定の書式が設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A> で表示される値のカスタム表示形式を指定するプロパティ、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。 場合、 <xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A> プロパティが設定されていないと、特殊な書式なし、フィールドの値が表示されます。  
  
> [!NOTE]
>  設定する必要があります 3.5 より前のバージョンの ASP.NET、 <xref:System.Web.UI.WebControls.BoundField.HtmlEncode%2A> プロパティを `false` 書式設定するのにはフィールドしない文字列データ型。 格納されている書式指定文字列の前に既定の変換メソッドが、フィールドの値を文字列に変換は、それ以外の場合、 <xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A> プロパティを適用します。  
  
 既定では、書式指定文字列がフィールドの値を適用、データ バインド コントロールを含む場合にのみ、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトが読み取り専用モードにします。 書式指定文字列を編集モードでフィールドの値に適用するには、設定、 <xref:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode%2A> プロパティを `true`します。  
  
 書式指定文字列は任意のリテラル文字列で、通常、フィールドの値のプレース ホルダーが含まれます。 たとえば、書式指定文字列で `Item Value: {0}`, 、文字列が表示されたら、{0} プレース ホルダーのフィールドの値と置き換えられます、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。 書式指定文字列の残りの部分は、リテラル テキストとして表示されます。  
  
 書式指定文字列にプレース ホルダーが含まれていない場合は、\(データ ソースからのフィールドの値は含まれません\)、最終的な表示テキストに書式文字列自体のみが含まれています。 プレース ホルダーが前の例のように、中かっこで囲まれた 0 \(ゼロ\) の場合は、既定の方法で、フィールドの値が文字列に変換されます。 0 には、フィールドの値の書式設定方法を指定する文字列を追加できます。 たとえば、プレース ホルダー `{0:C}` 数値フィールドは、フィールドの値は通貨形式に変換することを指定します。  
  
 使用して書式設定が適用される、 <xref:System.String.Format%2A> メソッドです。 左中かっこに続く番号は、そのメソッドで使用される構文の一部であるし、プレース ホルダーが使用する、一連の値のうち、どれを示します。 各セルにフィールド値の 1 つだけがあるため、始め中かっこに続く番号は 0 にのみ設定できます。  
  
 次の表は、数値フィールドの標準書式指定文字を示します。 これらの書式指定文字が以外の大文字小文字が区別されない `X`, 、指定されている場合は、16 進数の文字が表示されます。 表示する数の有効桁数または小数点以下桁数を指定するために、ほとんどの書式指定文字に数値を追加できます。  
  
> [!NOTE]
>  ほとんどの場合、書式設定は、サーバーのカルチャ設定に依存します。 カルチャ設定の例は、 `en-US`です。  
  
|書式指定文字|説明|例|  
|------------|--------|-------|  
|`C` または `c`|数値を通貨形式で表示します。 小数点以下桁数を指定できます。|書式: `{0:C}`<br /><br /> 123.456 \-\> $123.46<br /><br /> 書式: `{0:C3}`<br /><br /> 123.456  \-\> $123.456|  
|`D` または `d`|10 進数形式の整数値を表示します。 数字の数を指定できます。 \(型は、"decimal"と呼ばれて、数値は整数として書式指定します。\)|書式: `{0:D}`<br /><br /> 1234 \-\> 1234<br /><br /> 書式: `{0:D6}`<br /><br /> 1234  \-\> 001234|  
|`E` または `e`|指数の指数書式で数値を表示します。 小数点以下桁数を指定できます。|書式: `{0:E}`<br /><br /> 1052.0329112756 は、1.052033E \+ 003\]\-\> \[します。<br /><br /> 書式: `{0:E2}`<br /><br /> \-1052.0329112756 \-\> \- 1.05e \+ 003|  
|`F` または `f`|固定形式で数値を表示します。 小数点以下桁数を指定できます。|書式: `{0:F}`<br /><br /> 1234.567 \-\> 1234.57<br /><br /> 書式: `{0:F3}`<br /><br /> 1234.567 \-\> 1234.567|  
|`G` または `g`|一般的な形式 \(最も簡潔な固定小数点または指数表記の\) の数値を表示します。 有効桁数を指定できます。|書式: `{0:G}`<br /><br /> \-123.456 \-\> \-123.456<br /><br /> 書式: `{0:G2}`<br /><br /> \-123.456 \-\> \-120|  
|`N` または `n`|\(桁区切り記号と省略可能なマイナス記号を含む\) の数値形式で数値を表示します。 小数点以下桁数を指定できます。|書式: `{0:N}`<br /><br /> 1234.567 \-\> 1,234.57<br /><br /> 書式: `{0:N4}`<br /><br /> 1234.567 \-\> 1,234.5670|  
|`P` または `p`|数値をパーセント形式で表示します。 小数点以下桁数を指定できます。|書式: `{0:P}`<br /><br /> 1 \-\> 100.00%<br /><br /> 書式: `{0:P1}`<br /><br /> .5 \-\> 50.0%|  
|`R` または `r`|表示 <xref:System.Single>, 、<xref:System.Double>, 、または `BigInteger` ラウンドト リップ書式の値。|書式: `{0:R}`<br /><br /> 123456789.12345678 \-\> 123456789.12345678|  
|`X` または `x`|整数値を 16 進形式で表示します。 数字の数を指定できます。|書式: `{0:X}`<br /><br /> 255 FF\]\-\> \[します。<br /><br /> 書式: `{0:x4}`<br /><br /> 255 が 00 ff \-\> します。|  
  
 詳細については、およびを他のカルチャの値の書式を示す例については、「 [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)します。 カスタム数値書式指定文字列を作成することもできます。 詳細については、「[Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)」を参照してください。  
  
 次の表の書式指定文字 <xref:System.DateTime> フィールドです。 これらの書式指定のほとんどは、カルチャ設定によって異なる出力に起こります。 これらの例は、 <xref:System.DateTime> 2009 年 6 月 15 日の値のカルチャ設定と 1時 45分: 30 PM `en-US`します。  
  
|書式指定文字|説明|例|  
|------------|--------|-------|  
|`d`|短い形式の日付パターン。|書式: `{0:d}`<br /><br /> 2009 年 6 月 15 日\-\> 2009 年 6 月 15 日の午後 1時 45分: 30|  
|`D`|長い形式の日付パターン。|書式: `{0:D}`<br /><br /> 2009 年 6 月 15 日\-\> 2009 年 6 月 15 日月曜日の午後 1時 45分: 30|  
|`f`|完全な日付と時刻のパターン \(短い形式の時刻\)。|書式: `{0:f}`<br /><br /> 2009 年 6 月 15 日午後 1時 45分: 30 に \-\> 2009 年 6 月 15 日月曜日午後 1 時 45 分|  
|`F`|完全な日付と時刻のパターン \(長い形式の時刻\)。|書式: `{0:F}`<br /><br /> 2009 年 6 月 15 日\-\> 2009 年 6 月 15 日月曜日の午後 1時 45分: 30 1時 45分: 30 PM|  
|`g`|一般の日付と時刻のパターン \(短い形式の時刻\)。|書式: `{0:g}`<br /><br /> 2009 年 6 月 15 日午後 1時 45分: 30 に \-\> 2009 年 6 月 15 日午後 1 時 45 分|  
|`G`|一般の日付と時刻のパターン \(長い形式の時刻\)。|書式: `{0:G}`<br /><br /> 2009 年 6 月 15 日午後 1時 45分: 30 が 2009 年 6 月 15 日\-\> 1時 45分: 30 PM|  
|`M` または `m`|月日パターン。|書式: `{0:M}`<br /><br /> 2009 年 6 月 15 日午後 1時 45分: 30 が 6 月 15 日\-\>|  
|`O` または `o`|ラウンドトリップする日付と時刻のパターン。|書式: `{0:o}`<br /><br /> 6\/15\/2009 1:45:30 PM \-\> 2009\-06\-15T13:45:30.0900000|  
|`R` または `r`|RFC1123 パターン \(については、次を参照してください。 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A?displayProperty=fullName>\)。|書式: `{0:R}`<br /><br /> 6\/15\/2009 1:45:30 PM \-\> Mon, 15 Jun 2009 20:45:30 GMT|  
|`s`|並べ替え可能な日付と時刻のパターン。|書式: `{0:s}`<br /><br /> 6\/15\/2009 1:45:30 PM \-\> 2009\-06\-15T13:45:30|  
|`t`|短い形式の時刻パターン。|書式: `{0:t}`<br /><br /> 2009 年 6 月 15 日\-\> 午後 1 時 45 分の 1時 45分: 30 PM|  
|`T`|長い形式の時刻パターン。|書式: `{0:T}`<br /><br /> 2009 年 6 月 15 日\-\> 1時 45分: 30 PM の 1時 45分: 30 PM|  
|`u`|並べ替え可能な日付と時刻のパターン \(世界時刻\)。|書式: `{0:u}`<br /><br /> 6\/15\/2009 1:45:30 PM \-\> 2009\-06\-15 20:45:30Z|  
|`U`|完全な日付と時刻のパターン \(世界時刻\)。|書式: `{0:U}`<br /><br /> 2009 年 6 月 15 日\-\> 2009 年 6 月 15 日月曜日の午後 1時 45分: 30 8時 45分: 30 PM|  
|`Y` または `y`|年月パターン。|書式: `{0:Y}`<br /><br /> 2009 年 6 月 15 日\-\>、2009 年 6 月の 1時 45分: 30 PM|  
  
 詳細については、およびを他のカルチャの値の書式を示す例については、「 [Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)します。 カスタム日時書式指定文字列を作成することもできます。 詳細については、「[Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984)」を参照してください。  
  
   
  
## 例  
 ソース コードの Visual Studio の Web サイト プロジェクトはこのトピック用に使用可能な: [Download](http://go.microsoft.com/fwlink/?LinkId=191889)します。  
  
 次の例では、使用する方法、 <xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A> プロパティ、フィールドの値のカスタムの表示形式を指定します。  
  
  
  
 次の例では、この例によって生成される出力の 1 つの行を示します。  
  
|ProductID|名前|ProductNumber|ListPrice|\[太さ\]|ModifiedDate|  
|---------------|--------|-------------------|---------------|------------|------------------|  
|`000680`|`HL Road Frame - Black, 58`|`#FR-R92B-58`|`$1,431.50`|`1016.040`|`3/11/2004`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataField" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.ApplyFormatInEditMode" />
      </Docs>
    </Member>
    <Member MemberName="ExtractValuesFromCell">
      <MemberSignature Language="C#" Value="public override void ExtractValuesFromCell (System.Collections.Specialized.IOrderedDictionary dictionary, System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlRowState rowState, bool includeReadOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ExtractValuesFromCell(class System.Collections.Specialized.IOrderedDictionary dictionary, class System.Web.UI.WebControls.DataControlFieldCell cell, valuetype System.Web.UI.WebControls.DataControlRowState rowState, bool includeReadOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.ExtractValuesFromCell(System.Collections.Specialized.IOrderedDictionary,System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Specialized.IOrderedDictionary" />
        <Parameter Name="cell" Type="System.Web.UI.WebControls.DataControlFieldCell" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
        <Parameter Name="includeReadOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dictionary">A <see cref="T:System.Collections.IDictionary" /> 指定されたセルの値を格納するために使用します。</param>
        <param name="cell">
          <see cref="T:System.Web.UI.WebControls.TableCell" /> を取得する値が含まれています。</param>
        <param name="rowState">
          <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> 値のいずれか。</param>
        <param name="includeReadOnly">
          <see langword="true" /> 読み取り専用のフィールドの値が含まれるそれ以外の場合、 <see langword="false" />です。</param>
        <summary>指定した入力 <see cref="T:System.Collections.IDictionary" /> から、指定した値を持つオブジェクト <see cref="T:System.Web.UI.WebControls.TableCell" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BoundField.ExtractValuesFromCell%2A> から、指定したフィールドの値を取得する便利な手段として用意されているメソッド <xref:System.Web.UI.WebControls.TableCell> 内のオブジェクト、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。  
  
> [!NOTE]
>  このメソッドは、主にコントロールの開発者によって使用されます。  
  
 このメソッドには、戻り値はありません。 フィールドの値を使って参照によって返される代わりに、 <xref:System.Collections.IDictionary?displayProperty=fullName> のオブジェクトが渡された、 `dictionary` パラメーター。 反復処理するメソッドが呼び出された後、 <xref:System.Collections.IDictionary?displayProperty=fullName> フィールドの値にアクセスするオブジェクト。  
  
> [!NOTE]
>  場合、 <xref:System.Web.UI.WebControls.TableCell> オブジェクトは読み取り専用フィールドの値を含むに渡す必要があります `true` の `includeReadOnly` これらの値が含まれるパラメーター。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Web.UI.WebControls.TableCell" />
      </Docs>
    </Member>
    <Member MemberName="FormatDataValue">
      <MemberSignature Language="C#" Value="protected virtual string FormatDataValue (object dataValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string FormatDataValue(object dataValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.FormatDataValue(System.Object,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataValue" Type="System.Object" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataValue">書式設定するフィールド値。</param>
        <param name="encode">
          <see langword="true" /> 値をエンコードするにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>内のセルの指定したフィールドの値を書式設定、 <see cref="T:System.Web.UI.WebControls.BoundField" /> オブジェクトです。</summary>
        <returns>フィールドの値で指定された形式に変換 <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BoundField.FormatDataValue%2A> メソッドは、フィールドの値で指定された形式に変換するためのヘルパー メソッド、 <xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A> プロパティです。 フィールドの値がある場合は null の値、 <xref:System.Web.UI.WebControls.BoundField.NullDisplayText%2A> プロパティが返されます。  
  
> [!NOTE]
>  このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When extending the <see cref="T:System.Web.UI.WebControls.BoundField" /> class, you can override this method to perform a custom formatting routine.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetDesignTimeValue">
      <MemberSignature Language="C#" Value="protected virtual object GetDesignTimeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetDesignTimeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.GetDesignTimeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フィールドの値を表示するときに使用する値を取得、 <see cref="T:System.Web.UI.WebControls.BoundField" /> デザイナー内のオブジェクト。</summary>
        <returns>フィールドの値としてデザイナーに表示する値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BoundField.GetDesignTimeValue%2A> メソッドはどのような値を表示するときに、フィールドの表示を決定するために使用するヘルパー メソッド、 <xref:System.Web.UI.WebControls.BoundField> デザイナー内のオブジェクト。 実際のデータは、デザイン時に、データ ソースから取得できない、このメソッドによって返される値が表示されます。  
  
> [!NOTE]
>  このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When extending the <see cref="T:System.Web.UI.WebControls.BoundField" /> class, you can override this method to return a different value to display for the field in a designer.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.BoundField.GetValue(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="protected virtual object GetValue (System.Web.UI.Control controlContainer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetValue(class System.Web.UI.Control controlContainer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.GetValue(System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlContainer" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="controlContainer">フィールドの値のコンテナーです。</param>
        <summary>バインドされたフィールドの値を取得、 <see cref="T:System.Web.UI.WebControls.BoundField" /> オブジェクトです。</summary>
        <returns>バインドされたフィールドの値、 <see cref="T:System.Web.UI.WebControls.BoundField" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BoundField.GetValue%2A> メソッドは、フィールドの値を決定するために使用するヘルパー メソッドです。 場合、 <xref:System.Web.UI.WebControls.BoundField> から返されるオブジェクトはデザイナーで表示されているし、デザイン時にフィールドの値を特定できません、値、 <xref:System.Web.UI.WebControls.BoundField.GetDesignTimeValue%2A> 実際のフィールド値の代わりにメソッドが返されます。  
  
> [!NOTE]
>  このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">指定したコンテナー、 <paramref name="controlContainer" /> パラメーターは <see langword="null" />です。  
  
 または  
  
 指定したコンテナー、 <paramref name="controlContainer" /> パラメーターには、データ項目にありません。  
  
 または  
  
 データ フィールドが見つかりませんでした。</exception>
        <block subset="none" type="overrides">
          <para>When extending the <see cref="T:System.Web.UI.WebControls.BoundField" /> class, you can override this method to provide a custom routine to determine a field's value.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.BoundField.GetDesignTimeValue" />
      </Docs>
    </Member>
    <Member MemberName="HeaderText">
      <MemberSignature Language="C#" Value="public override string HeaderText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.HeaderText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ コントロールのヘッダーに表示されるテキストを設定します。</summary>
        <value>データ コントロールのヘッダーに表示されるテキスト。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BoundField.HeaderText%2A> フレンドリ名をデータ コントロール内のフィールドを識別するプロパティです。 最も一般的なアプリケーション、 <xref:System.Web.UI.WebControls.BoundField.HeaderText%2A> プロパティはデータ バインドのフィールドに意味のある列名を提供する、 <xref:System.Web.UI.WebControls.GridView> または <xref:System.Web.UI.WebControls.DetailsView> コントロールです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataField" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public virtual bool HtmlEncode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HtmlEncode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.HtmlEncode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に表示される前にフィールド値は HTML でエンコードされたでがあるかどうかを示す値、 <see cref="T:System.Web.UI.WebControls.BoundField" /> オブジェクトです。</summary>
        <value>
          <see langword="true" /> フィールドの値か HTML でエンコードされたに表示される前に、 <see cref="T:System.Web.UI.WebControls.BoundField" /> オブジェクトです。 それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BoundField.HtmlEncode%2A> プロパティに表示される前にフィールドの値が、それぞれの文字列形式に HTML エンコードであるかどうかを指定する <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。 たとえば、このプロパティは、 `true`, 、"\< script \>"の文字列値としてレンダリングされます"&lt; スクリプト &gt;"です。 このプロパティは、する場合 `false`, は、文字列に表示されます変更されません。  
  
> [!NOTE]
>  HTML エンコーディング フィールドの値をクロスサイト スクリプト攻撃や悪意のあるコンテンツが表示されていることを防ぐのに役立ちます。 可能な場合は、このプロパティを有効にする必要があります。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BoundField.HtmlEncode%2A> プロパティ フィールドの値がで表示する前に HTML エンコードをできないようにする、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。  
  
 [!code-csharp[BoundFieldHtmlEncode\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BoundFieldHtmlEncode/CS/BoundFieldHtmlEncodecs.aspx#1)]
 [!code-vb[BoundFieldHtmlEncode\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BoundFieldHtmlEncode/VB/BoundFieldHtmlEncodevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.HttpServerUtility.HtmlEncode" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.SupportsHtmlEncode" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncodeFormatString">
      <MemberSignature Language="C#" Value="public virtual bool HtmlEncodeFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HtmlEncodeFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.HtmlEncodeFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定するかどうかのテキストであるを示す値を適用して作成、 <see cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" /> プロパティを <see cref="T:System.Web.UI.WebControls.BoundField" /> 値は、HTML エンコードされることが表示されたらそれをする必要があります。</summary>
        <value>
          <see langword="true" /> テキストの HTML でエンコードされている必要がある場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 HTML エンコーディング値は、クロスサイト スクリプト攻撃や悪意のあるコンテンツが表示されないようにできます。 HTML エンコーディングが役にも、文字列の表示などのブラウザーで HTML コードを表示するときに"\< br\/\>"改行を挿入する代わりに \(`<br/>` 要素\) ページ。  
  
> [!NOTE]
>  このプロパティは、ASP.NET 3.5 の新機能です。 このプロパティを設定 `false` の既定の動作を復元、 <xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A> 3.5 より前のバージョンの ASP.NET のプロパティです。 詳細については、<xref:System.Web.UI.WebControls.BoundField.DataFormatString%2A> プロパティを参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.HtmlEncode" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override bool Initialize (bool enableSorting, System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Initialize(bool enableSorting, class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.Initialize(System.Boolean,System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enableSorting" Type="System.Boolean" />
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="enableSorting">
          <see langword="true" /> 並べ替えがサポートされている場合それ以外の場合、 <see langword="false" />です。</param>
        <param name="control">所有するデータ コントロール、 <see cref="T:System.Web.UI.WebControls.BoundField" />です。</param>
        <summary>初期化、 <see cref="T:System.Web.UI.WebControls.BoundField" /> オブジェクトです。</summary>
        <returns>常に <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BoundField.Initialize%2A> メソッドは、データ コントロール、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトが関連の基本的なオブジェクトの初期化を実行するフィールドが、決して行のコレクションに追加する前に、フィールドのインスタンス。 などのデータ コントロール <xref:System.Web.UI.WebControls.DetailsView> と <xref:System.Web.UI.WebControls.GridView> を呼び出す、 <xref:System.Web.UI.WebControls.DataControlField.Initialize%2A> メソッドで、 `CreateChildControls` などの他のメソッドの前にメソッド `CreateRow` データを特定の行を作成すると呼ばれます。  
  
 カスタムのデータ バインドを記述するときは、このメソッドを制御する呼び出しを使用して <xref:System.Web.UI.WebControls.TableCell> の基本的な初期化を実行するオブジェクト、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。 場合に、このメソッドを実装、 <xref:System.Web.UI.WebControls.BoundField>\-派生型では、その設定の前に、オブジェクトの初期化が必要です <xref:System.Web.UI.WebControls.TableCell> データをオブジェクトまたはコントロールで、 <xref:System.Web.UI.WebControls.BoundField.InitializeCell%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TableCell" />
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.Initialize(System.Boolean,System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.WebControls.BoundField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" />
        <altmember cref="M:System.Web.UI.WebControls.BoundField.InitializeDataCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState)" />
      </Docs>
    </Member>
    <Member MemberName="InitializeCell">
      <MemberSignature Language="C#" Value="public override void InitializeCell (System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlCellType cellType, System.Web.UI.WebControls.DataControlRowState rowState, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void InitializeCell(class System.Web.UI.WebControls.DataControlFieldCell cell, valuetype System.Web.UI.WebControls.DataControlCellType cellType, valuetype System.Web.UI.WebControls.DataControlRowState rowState, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Web.UI.WebControls.DataControlFieldCell" />
        <Parameter Name="cellType" Type="System.Web.UI.WebControls.DataControlCellType" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cell">初期化する <see cref="T:System.Web.UI.WebControls.TableCell" />。</param>
        <param name="cellType">
          <see cref="T:System.Web.UI.WebControls.DataControlCellType" /> 値のいずれか。</param>
        <param name="rowState">
          <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> 値のいずれか。</param>
        <param name="rowIndex">行の 0 から始まるインデックス。</param>
        <summary>指定された初期化 <see cref="T:System.Web.UI.WebControls.TableCell" /> オブジェクトを指定した行の状態にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BoundField.InitializeCell%2A> メソッドはによって実装 <xref:System.Web.UI.WebControls.BoundField>\-派生型のテキストとコントロールを追加する、 <xref:System.Web.UI.WebControls.TableCell> テーブルを使用して、ユーザー インターフェイス \(UI\) を表示するデータ コントロールのオブジェクト。 これらのデータ コントロールは、完全なテーブル構造で行を作成するときに、コントロールの `CreateChildControls` メソッドが呼び出されます。<xref:System.Web.UI.WebControls.BoundField.InitializeCell%2A> メソッドは、 `InitializeRow` などのデータのコントロール <xref:System.Web.UI.WebControls.DetailsView> と <xref:System.Web.UI.WebControls.GridView>です。  
  
 カスタムのデータ バインドを記述するときは、このメソッドを制御する呼び出しを使用して <xref:System.Web.UI.WebControls.TableCell> データ、またはコントロールにテーブル構造のセルを初期化するためにします。 記述するときに、このメソッドを実装、 <xref:System.Web.UI.WebControls.BoundField>\-クラスを派生します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BoundField.Initialize(System.Boolean,System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.WebControls.BoundField.InitializeDataCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState)" />
      </Docs>
    </Member>
    <Member MemberName="InitializeDataCell">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDataCell (System.Web.UI.WebControls.DataControlFieldCell cell, System.Web.UI.WebControls.DataControlRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDataCell(class System.Web.UI.WebControls.DataControlFieldCell cell, valuetype System.Web.UI.WebControls.DataControlRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.InitializeDataCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlRowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="System.Web.UI.WebControls.DataControlFieldCell" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
      </Parameters>
      <Docs>
        <param name="cell">初期化する <see cref="T:System.Web.UI.WebControls.TableCell" />。</param>
        <param name="rowState">
          <see cref="T:System.Web.UI.WebControls.DataControlRowState" /> 値のいずれか。</param>
        <summary>指定された初期化 <see cref="T:System.Web.UI.WebControls.TableCell" /> オブジェクトを指定した行の状態にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BoundField.InitializeDataCell%2A> メソッド内のセルを初期化するために使用されるヘルパー メソッドは、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When extending the <see cref="T:System.Web.UI.WebControls.BoundField" /> class, you can override this method to perform a custom initialization routine.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.BoundField.Initialize(System.Boolean,System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.WebControls.BoundField.InitializeCell(System.Web.UI.WebControls.DataControlFieldCell,System.Web.UI.WebControls.DataControlCellType,System.Web.UI.WebControls.DataControlRowState,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">復元するコントロールの状態を表します。</param>
        <summary>このフィールドに既に保存されているビュー ステート情報を復元します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullDisplayText">
      <MemberSignature Language="C#" Value="public virtual string NullDisplayText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NullDisplayText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.NullDisplayText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはフィールドの値が null の場合は、フィールドに表示されるキャプションを設定します。</summary>
        <value>フィールドの値が null の場合は、フィールドの表示されるキャプション。 既定値は空の文字列 \(""\) です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合によって、フィールドの値は、データ ソースの null として保存されます。 設定して、null 値を持つフィールドに対して表示するカスタム キャプションを指定する、 <xref:System.Web.UI.WebControls.BoundField.NullDisplayText%2A> プロパティです。 このプロパティが設定されていない null フィールドの値が空の文字列として表示されます \(""\) です。 レコードが更新されたり、値を入力したときに、データ バインド コントロールに挿入プロパティで指定されたこの \(空の文字列\) 以外、データ バインド コントロール内のフィールドのデータ ソースの値が自動的に変換を null にします。  
  
> [!NOTE]
>  空の文字列フィールドの値を null 値に変換するには、設定、 <xref:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull%2A> プロパティを `true`します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BoundField.NullDisplayText%2A> プロパティを null フィールドの値を表示するカスタム キャプションを指定します。  
  
 [!code-csharp[BoundFieldNullDisplayText\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BoundFieldNullDisplayText/CS/boundfieldnulldisplaytextcs.aspx#1)]
 [!code-vb[BoundFieldNullDisplayText\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BoundFieldNullDisplayText/VB/boundfieldnulldisplaytextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataField" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.DataFormatString" />
        <altmember cref="P:System.Web.UI.WebControls.BoundField.ConvertEmptyStringToNull" />
      </Docs>
    </Member>
    <Member MemberName="OnDataBindField">
      <MemberSignature Language="C#" Value="protected virtual void OnDataBindField (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDataBindField(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.OnDataBindField(System.Object,System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">イベントのソース。</param>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>バインドするフィールドの値、 <see cref="T:System.Web.UI.WebControls.BoundField" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.CheckBoxField.OnDataBindField%2A> メソッドは、対応するセルにデータ ソースのフィールドの値をバインドするために使用するヘルパー メソッド、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">フィールドの値がバインドされたコントロールは、 <see cref="T:System.Web.UI.WebControls.TextBox" /> または <see cref="T:System.Web.UI.WebControls.TableCell" />です。</exception>
        <block subset="none" type="overrides">
          <para>When extending the <see cref="T:System.Web.UI.WebControls.BoundField" /> class, you can override this method to perform a custom binding routine.</para>
        </block>
        <altmember cref="T:System.EventArgs" />
        <altmember cref="T:System.Web.HttpException" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはフィールドの値を編集モードに変更できるかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> フィールドの値が編集モードで変更できないようにするにはそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BoundField.ReadOnly%2A> に表示される値を防ぐためにプロパティ、 <xref:System.Web.UI.WebControls.BoundField> を変更するオブジェクト。 データ バインド コントロールが編集モードの場合は読み取り専用フィールドが編集コントロールなしのプレーン テキストとして表示されます。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.BoundField.ReadOnly%2A> プロパティが編集モードにのみ適用されます。 フィールドが挿入モードに表示しないようにを使用して、 <xref:System.Web.UI.WebControls.DataControlField.InsertVisible%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BoundField.ReadOnly%2A> に表示されるキー フィールドの値を防ぐためにプロパティ、 <xref:System.Web.UI.WebControls.BoundField> を編集モードに変更するオブジェクト。  
  
 [!code-csharp[BoundField\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BoundField/CS/boundfieldcs.aspx#1)]
 [!code-vb[BoundField\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BoundField/VB/boundfieldvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.DetailsView.AutoGenerateEditButton" />
        <altmember cref="P:System.Web.UI.WebControls.GridView.AutoGenerateEditButton" />
      </Docs>
    </Member>
    <Member MemberName="SupportsHtmlEncode">
      <MemberSignature Language="C#" Value="protected virtual bool SupportsHtmlEncode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsHtmlEncode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.SupportsHtmlEncode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTML エンコーディングをサポートしているかどうかを示す値を取得、 <see cref="T:System.Web.UI.WebControls.BoundField" /> オブジェクトです。</summary>
        <value>常に返します <see langword="true" /> によって HTML エンコーディングがサポートされていることを示すために、 <see cref="T:System.Web.UI.WebControls.BoundField" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BoundField.SupportsHtmlEncode%2A> プロパティで使用されるヘルパー プロパティ、 <xref:System.Web.UI.WebControls.BoundField> クラスと派生クラスをクラスで HTML エンコーディングをサポートするかどうかを判断します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When deriving from the <see cref="T:System.Web.UI.WebControls.BoundField" /> class, you can override this property to indicate whether HTML encoding is supported by the class.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.BoundField.HtmlEncode" />
        <altmember cref="Overload:System.Web.HttpServerUtility.HtmlEncode" />
      </Docs>
    </Member>
    <Member MemberName="ThisExpression">
      <MemberSignature Language="C#" Value="public static readonly string ThisExpression;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string ThisExpression" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.BoundField.ThisExpression" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>"this" 式を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このフィールドを使用することを示す、 <xref:System.Web.UI.WebControls.BoundField> 自体ではなく、データ ソースのフィールドに、データ ソースに対してオブジェクトがバインドする必要があります。 ここでは、オブジェクトの `ToString` \] フィールドに値が表示されます。  
  
 このフィールドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ValidateRequestMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ValidateRequestMode ValidateRequestMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ValidateRequestMode ValidateRequestMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BoundField.ValidateRequestMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ValidateRequestMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはか、コントロールがクライアントの入力を検証するかどうかを決定する値を設定します。</summary>
        <value>か、コントロールがクライアントの入力を検証するかどうかを決定する値。 既定値は、<see cref="F:System.Web.UI.ValidateRequestMode.Inherit" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateSupportsCallback">
      <MemberSignature Language="C#" Value="public override void ValidateSupportsCallback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ValidateSupportsCallback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BoundField.ValidateSupportsCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールが含まれるかどうかを判断、 <see cref="T:System.Web.UI.WebControls.BoundField" /> サポート コールバック オブジェクトします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BoundField.ValidateSupportsCallback%2A> メソッドは、ヘルパー メソッドにコントロールが含まれているかどうかを決定するため、 <xref:System.Web.UI.WebControls.BoundField> サポート コールバック オブジェクトします。 このメソッドは、コールバックがサポートされていることを示すために、空のメソッド \(コードが含まれていないメソッド\) として実装されています。  
  
> [!NOTE]
>  このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Classes that derive from the <see cref="T:System.Web.UI.WebControls.BoundField" /> class can override this method to indicate whether the controls contained by the field support callbacks. To indicate that callbacks are supported, implement this method as an empty method that does not throw an exception; otherwise, throw an exception with a useful message describing why callbacks are not supported.</para>
        </block>
        <altmember cref="M:System.Web.UI.WebControls.DataControlField.ValidateSupportsCallback" />
      </Docs>
    </Member>
  </Members>
</Type>