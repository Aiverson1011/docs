<Type Name="LinkButton" FullName="System.Web.UI.WebControls.LinkButton">
  <TypeSignature Language="C#" Value="public class LinkButton : System.Web.UI.WebControls.WebControl, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinkButton extends System.Web.UI.WebControls.WebControl implements class System.Web.UI.IPostBackEventHandler, class System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinkButton" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IButtonControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinkButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.WebControls.LinkButtonControlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:LinkButton runat="server"&gt;LinkButton&lt;/{0}:LinkButton&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Web ページにハイパーリンク スタイルのボタン コントロールを表示します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このトピックの内容  
  
-   [はじめに](#introduction)  
  
-   [LinkButton コントロールと検証](#ButtonControlsAndValidation)  
  
-   [宣言構文](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## はじめに  
 使用して、 <xref:System.Web.UI.WebControls.LinkButton> コントロールを Web ページのハイパーリンクのスタイル\] ボタンを作成します。<xref:System.Web.UI.WebControls.LinkButton> コントロールと同じ外観にある、 <xref:System.Web.UI.WebControls.HyperLink> を制御するが、同じ機能を持ち、 <xref:System.Web.UI.WebControls.Button> コントロールです。 コントロールがクリックされたときに、別の Web ページにリンクする場合は、使用を検討して、 <xref:System.Web.UI.WebControls.HyperLink> コントロールです。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.LinkButton> コントロールは、クライアント ブラウザーに JavaScript を表示します。 クライアントのブラウザーには、このコントロールの有効な JavaScript で正常に機能する必要があります。 クライアント スクリプトの詳細については、次を参照してください。 [Client Script in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/13edb6b9-2dea-43c6-b8c1-a47207de19aa)します。  
  
 \[送信\] ボタンまたはコマンド ボタンのいずれかを作成することができます。 \[送信\] ボタンには、関連付けられているコマンド名がありません。 ボタンは、単に、サーバーに Web ページを送信します。 既定では、 <xref:System.Web.UI.WebControls.LinkButton> コントロールは、送信ボタンが表示されます。 イベント ハンドラーを渡した場合、 <xref:System.Web.UI.WebControls.LinkButton.Click> 送信\] ボタンがクリックされたときに、プログラムで操作を制御するイベントが実行されました。 これに対して、コマンド ボタンでは、コマンド名などのボタンに関連付けられている `Sort`します。 設定、 <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> コマンド名を指定するプロパティです。 これにより、複数作成する <xref:System.Web.UI.WebControls.LinkButton> の Web ページし、コントロール プログラムで判断するため <xref:System.Web.UI.WebControls.LinkButton> コントロールがクリックされました。 使用することも、 <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> 昇順を指定するなど、実行するコマンドに関する追加情報をコマンド ボタンを持つプロパティです。 イベント ハンドラーを提供することも、 <xref:System.Web.UI.WebControls.LinkButton.Command> コマンド ボタンがクリックされたときに、プログラムで操作を制御するイベントが実行されました。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 テキストは、HTML で表示されるまでのエンコードではありません、 <xref:System.Web.UI.WebControls.LinkButton> コントロールです。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 検証サーバー コントロールは、ユーザー入力を評価するも提供されます。 詳細については、次を参照してください。 [検証サーバー コントロール構文](http://msdn.microsoft.com/ja-jp/96d2c59e-693c-4079-9b53-b3ff0d9e9133)します。  
  
<a name="ButtonControlsAndValidation"></a>   
## LinkButton コントロールと検証  
 既定では、ページの検証が実行されるときに、 <xref:System.Web.UI.WebControls.LinkButton> コントロールがクリックされました。 ページの検証では、入力コントロールが検証コントロールで指定された検証規則に準拠のすべてのページ上の検証コントロールに関連付けられているかどうかを決定します。 ページの検証の発生を防ぐためには、設定、 <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> プロパティを `false`します。  
  
<a name="DeclarativeSyntax"></a>   
## 宣言構文  
  
```  
<asp:LinkButton  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CausesValidation="True|False"  
    CommandArgument="string"  
    CommandName="string"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnClick="Click event handler"  
    OnClientClick="string"  
    OnCommand="Command event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    PostBackUrl="uri"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    Text="string"  
    ToolTip="string"  
    ValidationGroup="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## 例  
 ソース コードの Visual Studio の Web サイト プロジェクトはこのトピック用に使用可能な: [Download](http://go.microsoft.com/fwlink/?LinkId=192872)します。  
  
 次の例では、作成、 <xref:System.Web.UI.WebControls.LinkButton> 内のテキストを表示するコントロール、 <xref:System.Web.UI.WebControls.Label> のリンクがクリックされたときを制御します。  
  
 [!code-csharp[Classic LinkButton Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic LinkButton Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.Button" />
    <altmember cref="T:System.Web.UI.WebControls.ImageButton" />
    <altmember cref="T:System.Web.UI.WebControls.HyperLink" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinkButton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.LinkButton" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを使用して作成しの新しいインスタンスを初期化、 <xref:System.Web.UI.WebControls.LinkButton> コントロールです。  
  
   
  
## 例  
 次の例では、作成しの新しいインスタンスを初期化する方法、 <xref:System.Web.UI.WebControls.LinkButton> コントロールです。  
  
 [!code-csharp[Classic LinkButton.LinkButton Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton.LinkButton Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic LinkButton.LinkButton Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton.LinkButton Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter" /> クライアントで表示する出力ストリームを格納しています。</param>
        <summary>属性を追加、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> クライアントに表示する出力ストリームを制御します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Web.UI.WebControls.LinkButton.AddAttributesToRender%2A> カスタム サーバー コントロールのメソッドように、 <xref:System.Web.UI.WebControls.LinkButton> 常にリスト項目のテキストが太字表示されます。  
  
 [!code-csharp[CustomLinkButtonAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonAddAttributesToRender/CS/custom_linkbutton_addattributestorendercs.aspx#1)]
 [!code-vb[CustomLinkButtonAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonAddAttributesToRender/VB/custom_linkbutton_addattributestorendervb.aspx#1)]  
[!code-csharp[CustomLinkButtonAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonAddAttributesToRender/CS/custom_linkbutton_addattributestorender.cs#2)]
[!code-vb[CustomLinkButtonAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonAddAttributesToRender/VB/custom_linkbutton_addattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParsedSubObject">
      <MemberSignature Language="C#" Value="protected override void AddParsedSubObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddParsedSubObject(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.AddParsedSubObject(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <see cref="T:System.Object" /> 解析された要素を表します。</param>
        <summary>、XML または HTML を解析すると、しそのコントロールの要素を追加、コントロールに通知 <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Web.UI.WebControls.LinkButton.AddParsedSubObject%2A> カスタム メソッド <xref:System.Web.UI.WebControls.LinkButton> サーバーでは制御解析済みのオブジェクトがある場合か、テキストのプロパティの解析済みのオブジェクトの text プロパティを設定するよう、 <xref:System.Web.UI.WebControls.Literal> オブジェクト、またはそれ以外の場合、空に文字列します。  
  
 [!code-csharp[CustomLinkButtonAddParsedSubObject#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonAddParsedSubObject/CS/custom_linkbutton_addparsedsubobjectcs.aspx#1)]
 [!code-vb[CustomLinkButtonAddParsedSubObject#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonAddParsedSubObject/VB/custom_linkbutton_addparsedsubobjectvb.aspx#1)]  
[!code-csharp[CustomLinkButtonAddParsedSubObject#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonAddParsedSubObject/CS/custom_linkbutton_addparsedsubobject.cs#2)]
[!code-vb[CustomLinkButtonAddParsedSubObject#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonAddParsedSubObject/VB/custom_linkbutton_addparsedsubobject.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.Literal" />
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public virtual bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.CausesValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または検証を実行するかどうかを示す値を設定するときに、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールがクリックされました。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールがクリックされたときに検証を実行する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、ページの検証が実行されるときに、 <xref:System.Web.UI.WebControls.LinkButton> コントロールがクリックされました。 ページの検証では、入力コントロールが検証コントロールで指定された検証規則に準拠のすべてのページ上の検証コントロールに関連付けられているかどうかを決定します。  
  
 指定する \(かを決定\)、クライアントとサーバーの両方で検証を実行するかどうかと、 <xref:System.Web.UI.WebControls.LinkButton> を使用してコントロールがクリックされた、 <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> プロパティです。 検証が実行されているを防ぐためには、設定、 <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> プロパティを `false`します。  
  
 通常、このプロパティに設定 `false` の検証が、ボタンがクリックされたときに実行されるようにするには、リセットまたはクリア\] ボタンをクリックします。  
  
 ときの値、 <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> にプロパティが設定されている `true`, 、使用することも、 <xref:System.Web.UI.WebControls.LinkButton.ValidationGroup%2A> の検証グループの名前を指定するプロパティ、 <xref:System.Web.UI.WebControls.LinkButton> コントロールが原因で検証します。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> ページ検証の発生を防ぐためにプロパティです。 通知方法、 <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> メソッドをアクティブにない各検証コントロール個別にします。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[LinkButtonCausesValidation\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LinkButtonCausesValidation/CS/linkbuttoncausesvalidationcs.aspx#1)]
 [!code-vb[LinkButtonCausesValidation\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LinkButtonCausesValidation/VB/linkbuttoncausesvalidationvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="P:System.Web.UI.WebControls.LinkButton.ValidationGroup" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinkButton.Click" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールをクリックします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinkButton.Click> イベントが発生したときに、 <xref:System.Web.UI.WebControls.LinkButton> コントロールがクリックされました。 このイベントは、コマンド名が関連付けられていない場合によく使用、 <xref:System.Web.UI.WebControls.LinkButton> 送信ボタンが表示する場合などを制御する。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 指定して、コードのハンドラーを次の例には、 <xref:System.Web.UI.WebControls.LinkButton.Click> イベント メッセージを表示するときに、 <xref:System.Web.UI.WebControls.LinkButton> コントロールをクリックします。  
  
 [!code-csharp[Classic LinkButton Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic LinkButton Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.LinkButton.OnClick(System.EventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.CommandEventHandler Command;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.CommandEventHandler Command" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinkButton.Command" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.CommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールをクリックします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinkButton.Command> イベントが発生したときに、 <xref:System.Web.UI.WebControls.LinkButton> コントロールがクリックされました。 このイベントは通常使用時に、コマンド名など、 `Sort`, に関連付けられている、 <xref:System.Web.UI.WebControls.LinkButton> コントロールです。 これにより、複数作成する <xref:System.Web.UI.WebControls.LinkButton> の Web ページし、コントロール プログラムで判断するため <xref:System.Web.UI.WebControls.LinkButton> コントロールがクリックされました。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.LinkButton.Command> のフォームでコントロールの階層をイベントは、 `BubbleEvent`です。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 指定して、コードのハンドラーを次の例には、 <xref:System.Web.UI.WebControls.LinkButton.Click> イベント メッセージを表示するときに、 <xref:System.Web.UI.WebControls.LinkButton> コントロールをクリックします。  
  
 [!code-csharp[Classic LinkButton.CommandName Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic LinkButton.CommandName Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.LinkButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="CommandArgument">
      <MemberSignature Language="C#" Value="public string CommandArgument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandArgument" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.CommandArgument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に渡される省略可能な引数、 <see cref="E:System.Web.UI.WebControls.LinkButton.Command" /> イベント ハンドラーと関連付けられた <see cref="P:System.Web.UI.WebControls.LinkButton.CommandName" /> プロパティです。</summary>
        <value>渡される省略可能な引数、 <see cref="E:System.Web.UI.WebControls.LinkButton.Command" /> イベント ハンドラーと関連付けられた <see cref="P:System.Web.UI.WebControls.LinkButton.CommandName" /> プロパティです。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> を補完する引数を指定するプロパティ、 <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> プロパティです。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> プロパティは、通常使用する場合にだけ、 <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> プロパティを設定します。  
  
 <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> プロパティを補完、 <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> プロパティを実行するコマンドに関する追加情報を提供することができます。 たとえば、設定、 <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> プロパティを `Sort` し、設定、 <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> プロパティを `Ascending` 昇順で並べ替えるにはコマンドを指定します。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> のコマンド名を補完する省略可能な引数を指定するプロパティ、 <xref:System.Web.UI.WebControls.LinkButton> コントロールです。  
  
 [!code-csharp[Classic LinkButton.CommandName Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic LinkButton.CommandName Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.LinkButton.Command" />
        <altmember cref="M:System.Web.UI.WebControls.LinkButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.LinkButton.CommandName" />
      </Docs>
    </Member>
    <Member MemberName="CommandName">
      <MemberSignature Language="C#" Value="public string CommandName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.CommandName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に関連付けられているコマンド名、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールです。 この値は、 <see cref="E:System.Web.UI.WebControls.LinkButton.Command" /> と共にイベント ハンドラー、 <see cref="P:System.Web.UI.WebControls.LinkButton.CommandArgument" /> プロパティです。</summary>
        <value>コマンド名、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールです。 既定値は <see cref="F:System.String.Empty" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数ある場合 <xref:System.Web.UI.WebControls.LinkButton> Web ページ上のコントロールを使用して、 <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> を指定するか、コマンド名を特定するプロパティに関連付けられている、 <xref:System.Web.UI.WebControls.LinkButton> コントロールをクリックします。 設定することができます、 <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> を実行するコマンドを識別する任意の文字列を持つプロパティです。 コマンド名をプログラムで判定できますし、 <xref:System.Web.UI.WebControls.LinkButton> を制御し、適切なアクションを実行します。  
  
 コマンドに関する追加情報など、 `Ascending` の並べ替え順序を使用して指定することができます、 <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> プロパティです。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> コマンド名を指定するプロパティ、 <xref:System.Web.UI.WebControls.LinkButton> コントロールです。  
  
 [!code-csharp[Classic LinkButton.CommandName Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic LinkButton.CommandName Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.LinkButton.Command" />
        <altmember cref="M:System.Web.UI.WebControls.LinkButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.LinkButton.CommandArgument" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackOptions">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.PostBackOptions GetPostBackOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.PostBackOptions GetPostBackOptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.GetPostBackOptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PostBackOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作成、 <see cref="T:System.Web.UI.PostBackOptions" /> を表すオブジェクト、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールのポストバック動作します。</summary>
        <returns>A <see cref="T:System.Web.UI.PostBackOptions" /> を表す、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールのポストバック動作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinkButton.GetPostBackOptions%2A> メソッドは、作成、 <xref:System.Web.UI.PostBackOptions> を表すオブジェクト、 <xref:System.Web.UI.WebControls.LinkButton> コントロールのポストバック動作します。<xref:System.Web.UI.PostBackOptions> オブジェクトが通常に渡されます、 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%29?displayProperty=fullName> 取得に使用されるクライアント側\-スクリプト関数への参照を呼び出されたときに、メソッドにより、サーバー ページにポストバックをします。  
  
 拡張する場合、このメソッドは、主にコントロールの開発者によって使用、 <xref:System.Web.UI.WebControls.LinkButton> クラスです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>You can override the <see cref="M:System.Web.UI.WebControls.LinkButton.GetPostBackOptions" /> method in your derived class to modify the postback options for the button control, or to call client-side script when the button is clicked. Be sure to call the base class's <see cref="M:System.Web.UI.WebControls.LinkButton.GetPostBackOptions" /> method so that the standard postback options are set.</para>
        </block>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">復元するコントロールの状態を表すオブジェクト。</param>
        <summary>
          <see cref="M:System.Web.UI.WebControls.WebControl.SaveViewState" /> メソッドによって保存された前回の要求からビューステート情報を復元します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.WebControls.WebControl.LoadViewState(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.OnClick(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>発生させる、 <see cref="E:System.Web.UI.WebControls.LinkButton.Click" /> のイベント、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinkButton.Click> イベントが発生したときに、 <xref:System.Web.UI.WebControls.LinkButton> コントロールがクリックされました。 このイベントは、コマンド名が関連付けられていない場合によく使用、 <xref:System.Web.UI.WebControls.LinkButton> 送信ボタンが表示する場合などを制御する。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Web.UI.WebControls.LinkButton.OnClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 指定して、コードのハンドラーを次の例には、 <xref:System.Web.UI.WebControls.LinkButton.Click> を表示するイベント <xref:System.Web.UI.WebControls.LinkButton> コントロールをクリックします。  
  
 [!code-csharp[Classic LinkButton Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic LinkButton Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.LinkButton.OnClick(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.LinkButton.OnClick(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.LinkButton.Click" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnClientClick">
      <MemberSignature Language="C#" Value="public virtual string OnClientClick { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnClientClick" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.OnClientClick" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定する際に実行するクライアント側スクリプト、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールの <see cref="E:System.Web.UI.WebControls.LinkButton.Click" /> イベントが発生しました。</summary>
        <value>ときに実行されるクライアント側スクリプト、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールの <see cref="E:System.Web.UI.WebControls.LinkButton.Click" /> イベントが発生します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.LinkButton.OnClientClick%2A> ときに実行されるその他のクライアント側スクリプトを指定するプロパティ、 <xref:System.Web.UI.WebControls.LinkButton> コントロールの <xref:System.Web.UI.WebControls.LinkButton.Click> イベントが発生します。 このプロパティが表示されるを指定するスクリプト、 <xref:System.Web.UI.WebControls.LinkButton> コントロールの `OnClick` だけでなく、コントロールの属性は、クライアント側スクリプトをあらかじめ定義されています。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.LinkButton.OnClientClick%2A> ときに実行されるその他のクライアント側スクリプトを指定するプロパティ、 <xref:System.Web.UI.WebControls.LinkButton> コントロールがクリックされました。  
  
 [!code-csharp[LinkButton.OnClientClick\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LinkButton.OnClientClick/CS/linkbutton.onclientclickcs.aspx#1)]
 [!code-vb[LinkButton.OnClientClick\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LinkButton.OnClientClick/VB/linkbutton.onclientclickvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.LinkButton.Click" />
      </Docs>
    </Member>
    <Member MemberName="OnCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCommand (System.Web.UI.WebControls.CommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCommand(class System.Web.UI.WebControls.CommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.CommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.CommandEventArgs" />。</param>
        <summary>発生させる、 <see cref="E:System.Web.UI.WebControls.LinkButton.Command" /> のイベント、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinkButton.Command> イベントが発生したときに、 <xref:System.Web.UI.WebControls.LinkButton> コントロールがクリックされました。 このイベントは通常使用時に、コマンド名など、 `Sort`, に関連付けられている、 <xref:System.Web.UI.WebControls.LinkButton> コントロールです。 これにより、複数作成する <xref:System.Web.UI.WebControls.LinkButton> の Web ページし、コントロール プログラムで判断するため <xref:System.Web.UI.WebControls.LinkButton> コントロールがクリックされました。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.LinkButton.Command> のフォームでコントロールの階層をイベントは、 `BubbleEvent`です。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Web.UI.WebControls.LinkButton.OnCommand%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 指定して、コードのハンドラーを次の例には、 <xref:System.Web.UI.WebControls.LinkButton.Command> を表示するイベント <xref:System.Web.UI.WebControls.LinkButton> コントロールをクリックします。  
  
 [!code-csharp[Classic LinkButton.CommandName Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic LinkButton.CommandName Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.LinkButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.LinkButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.WebControls.LinkButton.Command" />
        <altmember cref="T:System.Web.UI.WebControls.CommandEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.OnPreRender(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" /> オブジェクト。</param>
        <summary>
          <see cref="E:System.Web.UI.Control.PreRender" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinkButton.OnPreRender%2A> メソッドは、通知、 <xref:System.Web.UI.WebControls.LinkButton> コントロールでクライアントにビュー ステートや内容の表示を保存する前に、必要なプリレンダ リング手順を実行します。  
  
   
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Web.UI.WebControls.LinkButton.OnPreRender%2A> メソッド、カスタムの境界線を表示しないように <xref:System.Web.UI.WebControls.LinkButton> コントロールです。  
  
 [!code-csharp[CustomLinkButtonOnPreRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonOnPreRender/CS/custom_linkbutton_onprerendercs.aspx#1)]
 [!code-vb[CustomLinkButtonOnPreRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonOnPreRender/VB/custom_linkbutton_onprerendervb.aspx#1)]  
[!code-csharp[CustomLinkButtonOnPreRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonOnPreRender/CS/custom_linkbutton_onprerender.cs#2)]
[!code-vb[CustomLinkButtonOnPreRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonOnPreRender/VB/custom_linkbutton_onprerender.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
      </Docs>
    </Member>
    <Member MemberName="PostBackUrl">
      <MemberSignature Language="C#" Value="public virtual string PostBackUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PostBackUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.PostBackUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty("*.aspx")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を現在のページの場合にポストするページの URL、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールをクリックします。</summary>
        <value>現在のページの場合にポストする Web ページの URL、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールをクリックします。 既定値は空の文字列 \(""\)、それが原因で、ページをポスト バックするためです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> プロパティでは、post を使用してクロス ページを実行することができます、 <xref:System.Web.UI.WebControls.LinkButton> コントロールです。 設定、 <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> プロパティを投稿するときに、Web ページの URL を <xref:System.Web.UI.WebControls.LinkButton> コントロールをクリックします。 たとえば、あるページ Page2.aspx を指定すると、 <xref:System.Web.UI.WebControls.LinkButton> コントロールへの投稿を `Page2.aspx`します。 値が指定されていない場合、 <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> プロパティには、ページ自身にポストします。  
  
> [!IMPORTANT]
>  サーバー側の検証コントロールとクロスページ ポストバックを実行するときに、ことを確認する必要があります、ページの <xref:System.Web.UI.Page.IsValid%2A> プロパティは `true` ポストバックを処理する前にします。 クロスページ ポストバックの場合は、確認するためのページは、PreviousPage です。 次の Visual Basic コードでは、これを行う方法を示しています。  
  
```  
Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load  
        If Page.PreviousPage.IsValid Then  
            ' Handle the post back  
        Else  
            Response.Write("Invalid")  
        End If  
End Sub  
```  
  
 ページ間ポスティング方法の詳細については、次を参照してください。 [Cross\-Page Posting in an ASP.NET Web Page](http://msdn.microsoft.com/ja-jp/fedf234e-b7c4-4644-a9e8-c1c0870b043b)します。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> クロスページ post を実行するプロパティです。 ユーザーがクリックしたとき、 <xref:System.Web.UI.WebControls.LinkButton> コントロール、ページがポストで指定された対象のページにテキスト ボックスに入力された値、 <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> プロパティです。 このサンプルを実行するには、このコード例と同じディレクトリにターゲット ページのファイルを作成する必要があります。 移動先のページのコードは、次の例で示されています。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[LinkButton.PostBackUrlProperty\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LinkButton.PostBackUrlProperty/CS/linkbutton.postbackurlpropertycs.aspx#1)]
 [!code-vb[LinkButton.PostBackUrlProperty\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LinkButton.PostBackUrlProperty/VB/linkbutton.postbackurlpropertyvb.aspx#1)]  
  
 次のコード例では、使用して、 <xref:System.Web.UI.Page.PreviousPage%2A?displayProperty=fullName> から別のページを使用して送信された値にアクセスするプロパティ、 <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> プロパティです。 このページでは、ユーザーに表示されますが、前のページから投稿された文字列を取得します。 このコード例を直接実行しようとする場合はエラーが表示ための値、 `text` するフィールドは `null`です。 代わりに、対象ページを作成し、前の例のコードと同じディレクトリにファイルを配置するこのコードを使用します。 ファイルの名前が指定された値に対応する必要があります、 <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> 前の例ではプロパティです。 前の例のコードを実行するとこのページは自動的に実行クロスページ post が発生しました。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[LinkButton.PostBackUrlPage2\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LinkButton.PostBackUrlPage2/CS/linkbutton.postbackurlpage2cs.aspx#1)]
 [!code-vb[LinkButton.PostBackUrlPage2\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LinkButton.PostBackUrlPage2/VB/linkbutton.postbackurlpage2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.PreviousPage" />
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.RaisePostBackEvent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">イベントの引数。</param>
        <summary>サーバーへのポストバック時に、<see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールのイベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントは、内部で使用、 <xref:System.Web.UI.WebControls.LinkButton> を発生させる、クリックしてされたときのコントロール、 <xref:System.Web.UI.WebControls.LinkButton.Click> イベント、定義されている場合、 <xref:System.Web.UI.WebControls.LinkButton.Command> イベントです。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.LinkButton.Click" />
        <altmember cref="E:System.Web.UI.WebControls.LinkButton.Command" />
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">HTML コンテンツをクライアントに表示する出力ストリームを表す <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>指定されたライターにコントロールの内容を表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、主にコントロールの開発者によって使用されます。  
  
   
  
## 例  
 次のコード例では、オーバーライド、 <xref:System.Web.UI.WebControls.LinkButton.RenderContents%2A> カスタム サーバー内のメソッドを制御するいくつかのテキストが追加されるよう、 <xref:System.Web.UI.WebControls.LinkButton>です。  
  
 [!code-csharp[CustomLinkButtonRenderContents#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonRenderContents/CS/custom_linkbutton_rendercontentscs.aspx#1)]
 [!code-vb[CustomLinkButtonRenderContents#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonRenderContents/VB/custom_linkbutton_rendercontentsvb.aspx#1)]  
[!code-csharp[CustomLinkButtonRenderContents#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonRenderContents/CS/custom_linkbutton_rendercontents.cs#2)]
[!code-vb[CustomLinkButtonRenderContents#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonRenderContents/VB/custom_linkbutton_rendercontents.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SupportsDisabledAttribute">
      <MemberSignature Language="C#" Value="public override bool SupportsDisabledAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDisabledAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.SupportsDisabledAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの <see cref="P:System.Web.UI.WebControls.WebControl.IsEnabled" /> プロパティが <see langword="false" /> の場合、レンダリングされた HTML 要素の <see langword="disabled" /> 属性を "無効" に設定するかどうかを示す値を取得します。</summary>
        <value>
          <see cref="P:System.Web.UI.Control.RenderingCompatibility" /> プロパティが <c>4.0</c> より低い ASP.NET のバージョンを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、コントロールが無効になっているときに ASP.NET がそのコントロールの HTML をどのように描画するかを示します。 場合は、このプロパティは `true`, 、ASP.NET では、 `disabled` 属性のコントロールが無効にするとします。 場合は、このプロパティは `false`, 、ASP.NET では、 `class` 属性のコントロールが無効にするとします。 詳細については、「<xref:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute%2A?displayProperty=fullName>」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.RenderingCompatibility" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.DisabledCssClass" />
        <altmember cref="P:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">イベントの引数。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.LinkButton> のインスタンスが <xref:System.Web.UI.IPostBackEventHandler> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に表示されるテキスト キャプション、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールです。</summary>
        <value>表示されるテキスト キャプション、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> コントロールです。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.LinkButton.Text%2A> プロパティを指定または確認に表示するキャプション、 <xref:System.Web.UI.WebControls.LinkButton> コントロールです。  
  
> [!CAUTION]
>  このコントロールを使用して、悪意のあるクライアント スクリプトなどを含むユーザー入力を表示します。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションで表示する前に、クライアントから送信されるすべての情報を確認します。 ASP.NET には、入力要求の検証機能があり、ユーザー入力の中のブロックのスクリプトと HTML が用意されています。 検証サーバー コントロールは、ユーザー入力を評価するも提供されます。 詳細については、次を参照してください。 [検証サーバー コントロール構文](http://msdn.microsoft.com/ja-jp/96d2c59e-693c-4079-9b53-b3ff0d9e9133)します。  
  
 このプロパティの値を設定すると、デザイナーのツールを使用してリソース ファイルに自動的に保存できます。 詳細については、<xref:System.ComponentModel.LocalizableAttribute> および [ASP.NET Globalization and Localization](http://msdn.microsoft.com/ja-jp/8ef3838e-9d05-4236-9dd0-ceecff9df80d) を参照してください。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.LinkButton.Text%2A> に表示されるキャプションを指定するプロパティ、 <xref:System.Web.UI.WebControls.LinkButton> コントロールです。  
  
 [!code-csharp[Classic LinkButton.CommandName Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic LinkButton.CommandName Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロールのグループを設定する、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> 時に、サーバーへのポストバックします。</summary>
        <value>なるコントロールのグループ、 <see cref="T:System.Web.UI.WebControls.LinkButton" /> 時に、サーバーへのポストバックします。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 検証グループを使用すると、ページ上の検証コントロールを特定のカテゴリに割り当てることができます。 各検証グループは、ページ上の他の検証グループとは無関係に検証できます。 使用して、 <xref:System.Web.UI.WebControls.LinkButton.ValidationGroup%2A> の検証グループの名前を指定するプロパティ、 <xref:System.Web.UI.WebControls.LinkButton> 時に、サーバーへのポストバックします。  
  
 このプロパティは、有効される場合にのみの値、 <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> にプロパティが設定されている `true`します。 値を指定すると、 <xref:System.Web.UI.WebControls.LinkButton.ValidationGroup%2A> プロパティには、指定したグループの一部である検証コントロールだけは、検証、 <xref:System.Web.UI.WebControls.LinkButton> コントロールは、サーバーにポストバックします。 このプロパティの値を指定しないかどうか、 <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> にプロパティが設定されている `true`, 、検証グループに割り当てられていないページ上のすべての検証コントロールは、サーバーへのコントロールのポストバック時に検証されます。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、<xref:System.Web.UI.ThemeableAttribute> および [ASP.NET Themes Overview](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3) を参照してください。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.LinkButton.ValidationGroup%2A> されるコントロールを指定するプロパティ検証、 <xref:System.Web.UI.WebControls.LinkButton> コントロールは、サーバーにポストバックします。 ページには、ユーザーからのデータをキャプチャする 3 つのテキスト ボックス、3 つが含まれています。 <xref:System.Web.UI.WebControls.RequiredFieldValidator> こと、ユーザーは空白でないテキスト ボックスをように制御します。<xref:System.Web.UI.WebControls.RequiredFieldValidator> についてでは、最初の 2 つのテキスト ボックスの制御、 `PersonalInfoGroup` 検証グループおよび <xref:System.Web.UI.WebControls.RequiredFieldValidator> 、3 つ目のテキスト ボックスが制御、 `LocationInfoGroup` 検証グループです。`LinkButton1` がクリックすると、検証グループ内のコントロールのみ `PersonalInfoGroup` 検証されます。`LinkButton2` がクリックすると、検証グループ内のコントロールのみ `LocationInfoGroup` を検証します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[LinkButton.ValidationGroup\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LinkButton.ValidationGroup/CS/linkbutton.validationgroupcs.aspx#1)]
 [!code-vb[LinkButton.ValidationGroup\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LinkButton.ValidationGroup/VB/linkbutton.validationgroupvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.LinkButton.CausesValidation" />
      </Docs>
    </Member>
  </Members>
</Type>