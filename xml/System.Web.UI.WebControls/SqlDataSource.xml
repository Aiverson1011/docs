<Type Name="SqlDataSource" FullName="System.Web.UI.WebControls.SqlDataSource">
  <TypeSignature Language="C#" Value="public class SqlDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SqlDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("SelectQuery")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.SqlDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データ バインド コントロールに対して SQL データベースを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このトピックの内容  
  
-   [Introduction](#introduction)  
  
-   [&#91;データ接続&#93;](#data_connections)  
  
-   [データ操作の実行](#performing_data_operations)  
  
-   [データ プロバイダー](#data_provider)  
  
-   [キャッシュ](#caching)  
  
-   [追加の機能](#additional_features)  
  
-   [データ ソース ビュー](#data_source_view)  
  
-   [宣言構文](#declarative_syntax)  
  
<a name="introduction"></a>   
## Introduction  
 <xref:System.Web.UI.WebControls.SqlDataSource> データ ソース コントロールは、データ バインド コントロールに対する SQL リレーショナル データベース内のデータを表します。  <xref:System.Web.UI.WebControls.SqlDataSource> コントロールをデータ バインド コントロールと組み合わせて使用すると、リレーショナル データベースからデータを取得して、コードをほとんど、またはまったく必要とせずに、Web ページでデータの表示、編集、並べ替えを行うことができます。  
  
<a name="data_connections"></a>   
## \[データ接続\]  
 データベースに接続するには、<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティを有効な接続文字列に設定する必要があります。  <xref:System.Web.UI.WebControls.SqlDataSource> は、`SqlClient`、`OleDb`、`Odbc`、`OracleClient` プロバイダーなどの ADO.NET プロバイダーを使用して接続できる任意の SQL リレーショナル データベースをサポートできます。  接続文字列のセキュリティを設定する方法については、「[How To: Secure Connection Strings when Using Data Source Controls](http://msdn.microsoft.com/ja-jp/942f6dcb-d278-4bec-8403-60eede9bcd62)」を参照してください。  
  
 基になるデータベースからデータを取得するには、SQL クエリを使用して <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティを設定します。  <xref:System.Web.UI.WebControls.SqlDataSource> が関連付けられているデータベースがストアド プロシージャをサポートしている場合は、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティをストアド プロシージャの名前に設定できます。  指定する SQL クエリは、パラメーター化されたクエリでもかまいません。  パラメーター化されたクエリに関連付けられた <xref:System.Web.UI.WebControls.Parameter> オブジェクトを、<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> コレクションに追加できます。  パラメーター化された SQL クエリと構文の詳細については、「[Using Parameters with Data Source Controls for Filtering](http://msdn.microsoft.com/ja-jp/88622d04-2989-484e-93fe-594cd98dcf5f)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドが呼び出されるたびにデータを取得します。  このメソッドを使用すると、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティで指定されたメソッドにプログラムによってアクセスできます。  <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドは、<xref:System.Web.UI.WebControls.SqlDataSource> にバインドされたコントロールの <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> メソッドが呼び出されたときに、そのコントロールによって自動的に呼び出されます。  データ バインド コントロールの <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A> プロパティを設定すると、コントロールは必要に応じてデータ ソースのデータに自動的にバインドされます。  <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールをデータ バインド コントロールにバインドする場合は、`DataSourceID` プロパティを設定することをお勧めします。  `DataSource` プロパティを使用することもできますが、その場合はデータ バインド コントロールの <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> メソッドを明示的に呼び出す必要があります。  <xref:System.Web.UI.WebControls.SqlDataSource> を使用できるデータ バインド コントロールの例には、<xref:System.Web.UI.WebControls.DataGrid>、<xref:System.Web.UI.WebControls.DetailsView>、<xref:System.Web.UI.WebControls.DataList>、および <xref:System.Web.UI.WebControls.DropDownList> があります。  基になるデータベースからデータを取得するために、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドをプログラムによっていつでも呼び出すことができます。  
  
 宣言およびプログラムによる ASP.NET のシナリオでは、<xref:System.Web.UI.WebControls.SqlDataSource> のコントロールの ID にデータ バインド コントロールの <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> のプロパティを設定できます。  <xref:System.Web.UI.WebControls.SqlDataSource> クラスのインスタンスをデータ バインド コントロールの <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A> プロパティに割り当てることもできます。  データ バインド コントロールをデータ ソース コントロールにバインドする方法の詳細については、「[ASP.NET Data Access Options](http://msdn.microsoft.com/ja-jp/a5ff235e-397f-4bbe-9bfe-2720b6e7ab9d)」を参照してください。  
  
<a name="performing_data_operations"></a>   
## データ操作の実行  
 基になるデータベース製品の機能と <xref:System.Web.UI.WebControls.SqlDataSource> クラスのインスタンスの構成に応じて、更新、挿入、および削除などのデータ操作を実行できます。  これらのデータ操作を実行するには、実行する操作に対して適切なコマンド テキストと関連付けられたパラメーターを設定します。  たとえば、更新操作の場合は、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティを SQL 文字列またはストアド プロシージャの名前に設定して、必要なパラメーターを <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクションに追加します。  <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドがコードから明示的に呼び出されるか、データ バインド コントロールから自動的に呼び出されると、更新が実行されます。  <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 操作および <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> 操作の場合も、同じ一般的なパターンに従います。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>、および <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> の各プロパティで使用する SQL クエリおよびコマンドをパラメーター化できます。  つまり、クエリまたはコマンドで、リテラル値の代わりにプレースホルダーを使用して、そのプレースホルダーをアプリケーションまたはユーザー定義変数にバインドできます。  SQL クエリ内のパラメーターは、セッション変数、Web フォーム ページのクエリ文字列に渡される値、その他のサーバー コントロールのプロパティ値などにバインドできます。  SQL クエリ内のパラメーターを <xref:System.Web.UI.WebControls.SqlDataSource> と共に使用する方法の詳細については、「[Using Parameters with Data Source Controls for Filtering](http://msdn.microsoft.com/ja-jp/88622d04-2989-484e-93fe-594cd98dcf5f)」および「[Using Parameters with the SqlDataSource Control](http://msdn.microsoft.com/ja-jp/403ff44a-dd0b-484d-968e-dcd1dcd4c295)」を参照してください。  
  
> [!NOTE]
>  既定では、`Select` コマンドの実行時にいずれかのパラメーターが `null` であると、データは返されず、例外もスローされません。  この動作は、<xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A> プロパティを `false` に設定することで変更できます。  
  
<a name="data_provider"></a>   
## データ プロバイダー  
 既定では、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールは .NET Framework SQL Server 用データ プロバイダーで使用しますが、<xref:System.Web.UI.WebControls.SqlDataSource> は Microsoft SQL Server 固有ではありません。  <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、マネージ ADO.NET プロバイダーが用意されている任意のデータベース製品に関連付けることができます。  <xref:System.Data.OleDb?displayProperty=fullName> プロバイダーで使用する場合、<xref:System.Web.UI.WebControls.SqlDataSource> は OLE DB に準拠した任意のデータベースで使用できます。  <xref:System.Data.Odbc?displayProperty=fullName> プロバイダーで使用する場合、<xref:System.Web.UI.WebControls.SqlDataSource> は、IBM DB2、MySQL、PostgreSQL などの ODBC ドライバーおよびデータベースで使用できます。  <xref:System.Data.OracleClient?displayProperty=fullName> プロバイダーで使用する場合、<xref:System.Web.UI.WebControls.SqlDataSource> は Oracle 8.1.7 以降のデータベースで使用できます。  使用できるプロバイダーの一覧は、Machine.config または Web.config 構成ファイルの `DbProviderFactories` セクションに登録します。  詳細については、「[Selecting Data Using the SqlDataSource Control](http://msdn.microsoft.com/ja-jp/44623286-ff5a-4148-8a3c-85c56ed545eb)」を参照してください。  
  
<a name="caching"></a>   
## キャッシュ  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールを使用してページにデータを表示する場合、データ ソース コントロールのデータ キャッシュ機能を使用して、ページのパフォーマンスを向上できます。  キャッシュを利用すると、Web サーバー上のメモリ使用量は多くなりますが、データベース サーバーに対する処理負荷を削減できます。ほとんどの場合、これは適切なトレードオフといえます。  <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> プロパティを `true` に設定し、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> プロパティをキャッシュ エントリが破棄されるまでの秒数、つまり、キャッシュにデータが格納される秒数に設定すると、<xref:System.Web.UI.WebControls.SqlDataSource> はデータを自動的にキャッシュします。  また、<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> やオプションの <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> 値を指定することもできます。  
  
<a name="additional_features"></a>   
## 追加の機能  
 **font tag is not supported!!!!**  
  
|機能|要件|  
|--------|--------|  
|キャッシュ|**font tag is not supported!!!!**|  
|Deleting|<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> プロパティを、データの削除に使用する SQL ステートメントに設定します。  通常、このステートメントはパラメーター化されます。|  
|フィルター処理|<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 値に設定します。  <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドの呼び出し時にデータをフィルター処理するために使用するフィルター式に設定します。|  
|挿入|<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> プロパティを、データの挿入に使用する SQL ステートメントに設定します。  通常、このステートメントはパラメーター化されます。|  
|ページング|**font tag is not supported!!!!**|  
|選択|**font tag is not supported!!!!**|  
|並べ替え|**font tag is not supported!!!!**|  
|Updating|<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティを、データの更新に使用する SQL ステートメントに設定します。  通常、このステートメントはパラメーター化されます。|  
  
<a name="data_source_view"></a>   
## データ ソース ビュー  
 すべてのデータ ソース コントロールと同様に、<xref:System.Web.UI.WebControls.SqlDataSource> コントロールはデータ ソース ビュー クラスに関連付けられています。  <xref:System.Web.UI.WebControls.SqlDataSource> コントロールには、<xref:System.Web.UI.WebControls.SqlDataSourceView> が 1 つだけ関連付けられており、常に `Table` という名前になります。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは視覚的に表示されません。このコントロールは、宣言によって作成できるようにコントロールとして実装されます。また、オプションで状態管理に関与させることもできます。  したがって、<xref:System.Web.UI.WebControls.SqlDataSource> は、<xref:System.Web.UI.DataSourceControl.EnableTheming%2A> プロパティや <xref:System.Web.UI.DataSourceControl.SkinID%2A> プロパティに用意されているような表示機能をサポートしていません。  
  
<a name="declarative_syntax"></a>   
## 宣言構文  
  
```  
<asp:SqlDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    CancelSelectOnNullParameter="True|False"  
    ConflictDetection="OverwriteChanges|CompareAllValues"  
    ConnectionString="string"  
    DataSourceMode="DataReader|DataSet"  
    DeleteCommand="string"  
    DeleteCommandType="Text|StoredProcedure"  
    EnableCaching="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    FilterExpression="string"  
    ID="string"  
    InsertCommand="string"  
    InsertCommandType="Text|StoredProcedure"  
    OldValuesParameterFormatString="string"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnFiltering="Filtering event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    ProviderName="string|System.Data.Odbc|System.Data.OleDb|  
        System.Data.OracleClient|System.Data.SqlClient|  
        Microsoft.SqlServerCe.Client"  
    runat="server"  
    SelectCommand="string"  
    SelectCommandType="Text|StoredProcedure"  
    SkinID="string"  
    SortParameterName="string"  
    SqlCacheDependency="string"  
    UpdateCommand="string"  
    UpdateCommandType="Text|StoredProcedure"  
    Visible="True|False"  
>  
        <DeleteParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </DeleteParameters>  
        <FilterParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </FilterParameters>  
        <InsertParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </InsertParameters>  
        <SelectParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </SelectParameters>  
        <UpdateParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </UpdateParameters>  
</asp:SqlDataSource>  
```  
  
   
  
## 例  
 **font tag is not supported!!!!**  
  
 このセクションには、4 つのコード例が含まれています。  
  
-   **font tag is not supported!!!!**  
  
-   **font tag is not supported!!!!**  
  
-   **font tag is not supported!!!!**  
  
-   **font tag is not supported!!!!**  
  
    > [!NOTE]
    >  これらの例は、データ アクセス用の宣言構文を使用する方法を示しています。  マークアップの代わりにコードを使用してデータにアクセスする方法については、「[Accessing Data in Visual Studio](http://msdn.microsoft.com/ja-jp/9812a6d5-23d2-4427-8b98-70a2abfec3bc)」を参照してください。  
  
 **font tag is not supported!!!!**  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_3sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/CS/sql3cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_3sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/VB/sql3vb.aspx#1)]  
  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールを宣言によって使用して、ODBC に準拠したデータベースからデータを取得して <xref:System.Web.UI.WebControls.GridView> コントロールに表示する方法を次のコード例に示します。  <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティは、.NET Framework ODBC 用データ プロバイダーの名前 \(<xref:System.Data.Odbc?displayProperty=fullName>\) です。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_3odbc\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3odbc/CS/odbc3cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_3odbc\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3odbc/VB/odbc3vb.aspx#1)]  
  
 <xref:System.Web.UI.WebControls.GridView> コントロールを使用した一般的な表示と更新のシナリオを、次のコード例に示します。  前の例と同じように、Northwind データベースのデータは <xref:System.Web.UI.WebControls.GridView> コントロールに表示されます。  また、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティが指定され、<xref:System.Web.UI.WebControls.GridView.AutoGenerateEditButton%2A> プロパティが `true` に設定されているため、コードを追加せずにレコードの編集と更新を行うことができます。  <xref:System.Web.UI.WebControls.GridView> コントロールは、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクションへのパラメーターの追加を自動的に処理し、<xref:System.Web.UI.WebControls.GridView> コントロールの **\[更新\]** ボタンがクリックされたときに <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドを呼び出します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_5sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_5sql/CS/sql5cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_5sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_5sql/VB/sql5vb.aspx#1)]  
  
 <xref:System.Web.UI.WebControls.DropDownList> コントロールおよび <xref:System.Web.UI.WebControls.TextBox> コントロールを使用した表示および更新の一般的なシナリオを次のコード例に示します。  <xref:System.Web.UI.WebControls.DropDownList> コントロールでは、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクションへの更新パラメーターの自動的な追加、および <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドの呼び出しは行われないため、ユーザーが実行する必要があります。  更新パラメーターは宣言によって指定され、イベントが発生したときに <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 操作を実行するイベント ハンドラーを追加できます。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。  既定では、ASP.NET Web ページは、ユーザー入力にスクリプトまたは HTML 要素が含まれていないことを検証します。  詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_8sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_8sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
    <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
        <altmember cref="T:System.Web.UI.DataSourceControl" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">基になるデータベースに接続するために使用する接続文字列。</param>
        <param name="selectCommand">SQL クエリは、基になるデータベースからデータを取得するために使用します。 SQL クエリがパラメーター化された SQL 文字列の場合はを追加する必要があります <see cref="T:System.Web.UI.WebControls.Parameter" /> オブジェクトを <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> コレクションです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> クラスを指定した接続文字列と Select コマンドを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 別のデータベース製品に使用するため、SQL の構文の `selectCommand` は、現在使用されている ADO.NET プロバイダーによって異なります、 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティです。 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーは、 <xref:System.Data.SqlClient?displayProperty=fullName>, の既定のプロバイダーは、 <xref:System.Web.UI.WebControls.SqlDataSource> クラス、パラメーターのプレース ホルダーは `'@parameterName'`です。 ただし、プロバイダーに設定されている場合、 <xref:System.Data.Odbc?displayProperty=fullName> または <xref:System.Data.OleDb?displayProperty=fullName>, 、パラメーターのプレース ホルダーは `'?'`です。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [Using Parameters with the SqlDataSource Control](http://msdn.microsoft.com/ja-jp/403ff44a-dd0b-484d-968e-dcd1dcd4c295)します。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 値からデータ ソースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Web.UI.WebControls.SqlDataSource> 制御を使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.%23ctor%2A> コンス トラクターです。 この例では通常のことで、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールが使用される中間層オブジェクトの実装では、Web フォーム ページではなくビジネス オブジェクトの簡単な方法として、データベースとやり取りします。 例では、Web.config ファイルに格納されている接続文字列を使用します。  
  
 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.ObjectDataSource> クラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_1\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_1\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlDataSource (string providerName, string connectionString, string selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string providerName, string connectionString, string selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerName" Type="System.String" />
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="selectCommand" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="providerName">データ プロバイダーの名前を <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> を使用します。 プロバイダーが設定されていない場合、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> Microsoft SQL Server の既定では、ADO.NET プロバイダーを使用します。</param>
        <param name="connectionString">基になるデータベースに接続するために使用する接続文字列。</param>
        <param name="selectCommand">SQL クエリは、基になるデータベースからデータを取得するために使用します。 SQL クエリがパラメーター化された SQL 文字列の場合はを追加する必要があります <see cref="T:System.Web.UI.WebControls.Parameter" /> オブジェクトを <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> コレクションです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> クラスを指定した接続文字列と Select コマンドを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 別のデータベース製品に使用するため、SQL の構文の `selectCommand` は、現在使用されている ADO.NET プロバイダーによって異なります、 `providerName` パラメーター。 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーは <xref:System.Data.SqlClient?displayProperty=fullName>, の既定のプロバイダーは、 <xref:System.Web.UI.WebControls.SqlDataSource> クラス、パラメーターのプレース ホルダーは `'@parameterName'`です。 ただし、プロバイダーに設定されている場合、 <xref:System.Data.Odbc?displayProperty=fullName> または <xref:System.Data.OleDb?displayProperty=fullName>, 、パラメーターのプレース ホルダーは `'?'`です。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [Using Parameters with the SqlDataSource Control](http://msdn.microsoft.com/ja-jp/403ff44a-dd0b-484d-968e-dcd1dcd4c295)します。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティからデータ ソースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または時間の長さを秒単位で、データ ソース コントロールがデータをキャッシュすることによって取得される設定、 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> メソッドです。</summary>
        <value>秒、数、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> の結果をキャッシュ、 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> 操作します。 既定値は 0 です。 値を負の値にすることはできません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールはデータのキャッシュをサポートします。 データがキャッシュ、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドを基になるデータベースではなく、キャッシュからデータを取得します。 キャッシュの有効期限、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドは、基になるデータベースからデータを取得し、もう一度、データをキャッシュします。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールがデータを自動的にキャッシュと、 <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> にプロパティが設定されている `true` と <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> プロパティが、キャッシュはキャッシュ エントリが破棄される前にデータを保存する秒数を示す 0 より大きい値に設定します。 値 0 は、無限の深さのキャッシュを示します。  
  
 キャッシュの動作は、時間の組み合わせによって決まりますが、 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティです。 場合、 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティに設定されて、 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> 値、 <xref:System.Web.UI.WebControls.SqlDataSource> 最初のデータ取得操作にデータをキャッシュで指定された時間数では、最大でのメモリ内に保持 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> プロパティです。 データは、メモリが必要な場合は、継続時間の前にリリースされる可能性があります。 キャッシュは、次の操作時に更新します。 場合、 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティに設定されて、 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> 値、データ ソース コントロールは最初のデータ取得操作上のデータをキャッシュしますが、後続の各操作のキャッシュが保持している時間枠をリセットします。 等しいときにアクティビティがない場合、キャッシュの有効期限、 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> 前回値 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作します。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource> 内にある場合にのみ、コントロールがデータをキャッシュできます <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> モードです。 A <xref:System.NotSupportedException> によって例外がスローされた、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッド場合、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールに設定されて、 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 値およびキャッシュが有効にもします。  
  
> [!IMPORTANT]
>  Microsoft Windows 認証では、クライアントの偽装を使用しているときに、最初のユーザー データにアクセスするときに、データがキャッシュされます。 別のユーザーは、同じデータを要求している場合は、データがキャッシュから取得されます。 データは、データベースに別の呼び出しは、データへのユーザーのアクセスを確認することでは取得されません。 いて、データにアクセスする 1 つ以上のユーザーが想定する場合は、データベースのセキュリティ構成によって検証されるデータが取得されるたび、キャッシュを使用しません。  
  
   
  
## 例  
 次のコード例は、Microsoft SQL Server の Northwind データベースからデータを取得および表示する方法を示します、 <xref:System.Web.UI.WebControls.GridView> コントロールの場合と、データ キャッシュを有効にします。<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> 20 秒に設定されているので、 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティに設定されて、 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> 既定では、このページのユーザーの値は 20 秒ごとに新しいデータに表示します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_18sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/CS/sql18cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_18sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/VB/sql18vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定キャッシュ有効期限の動作、期間と組み合わせた場合に、データ ソース コントロールを使用するキャッシュの動作について説明します。</summary>
        <value>
          <see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 値のいずれか。 既定値は、 <see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールはデータのキャッシュをサポートします。 データがキャッシュ、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドを基になるデータベースではなく、キャッシュからデータを取得します。 キャッシュの有効期限、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドは、基になるデータベースからデータを取得し、もう一度、データをキャッシュします。  
  
 キャッシュの動作は、の組み合わせによって決まりますが、 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> と <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> 設定します。 場合、 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティに設定されて、 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> 値、 <xref:System.Web.UI.WebControls.SqlDataSource> 最初のデータ取得操作にデータをキャッシュで指定された時間にわたってメモリに保持、 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> プロパティには、し、時間の経過後に破棄します。 キャッシュは、次の操作時に更新します。 場合、 <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティに設定されて、 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> 値、データ ソース コントロールは最初のデータ取得操作上のデータをキャッシュしますが、後続の各操作のキャッシュが保持している時間枠をリセットします。 等しいときにアクティビティがない場合、キャッシュの有効期限、 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> 前回値 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作します。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールがデータをキャッシュできる時にのみ、 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> モードです。 A <xref:System.NotSupportedException> によって例外がスローされた、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッド場合、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールに設定されて、 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 値およびキャッシュが有効にもします。  
  
> [!IMPORTANT]
>  Microsoft Windows 認証では、クライアントの偽装を使用しているときに、最初のユーザー データにアクセスするときに、データがキャッシュされます。 別のユーザーは、同じデータを要求している場合は、データがキャッシュから取得されます。 データは、データベースに別の呼び出しは、データへのユーザーのアクセスを確認することでは取得されません。 いて、データにアクセスする 1 つ以上のユーザーが想定する場合は、データベースのセキュリティ構成によって検証されるデータが取得されるたび、キャッシュを使用しません。  
  
   
  
## 例  
 次のコード例は、Microsoft SQL Server の Northwind データベースからデータを取得および表示する方法を示します、 <xref:System.Web.UI.WebControls.GridView> コントロールの場合と、データ キャッシュを有効にします。<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティに設定されて、 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> 値、ユーザーが新しいデータをも表示されません、 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> 値は 20 秒です。 キャッシュされたデータは、アクティビティがない\] ページで、最後のページ読み込みから 20 秒以上の場合にのみ更新されます。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_19sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_19sql/CS/sql19cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_19sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_19sql/VB/sql19vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ ソース コントロールによって作成されたキャッシュ オブジェクトのすべてのデータにリンクされているユーザー定義のキー依存関係を設定します。 キーが経過したときに、すべてのキャッシュ オブジェクトが明示的に終了しました。</summary>
        <value>によって作成されたすべてのキャッシュ オブジェクトを識別するキーを <see cref="T:System.Web.UI.WebControls.SqlDataSource" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールはデータのキャッシュをサポートします。 データがキャッシュ、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドを基になるデータベースではなく、キャッシュからデータを取得します。 キャッシュの有効期限、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドは、基になるデータベースからデータを取得し、もう一度、データをキャッシュします。  
  
 設定することができます、 <xref:System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency%2A> によって作成されたすべてのキャッシュ エントリ間の依存関係を作成するプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールとキー。 いつでもすべてのキャッシュ エントリを期限切れプログラムを使用して、キーの期限切れでにことができます。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールがデータをキャッシュできる時にのみ、 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> モードです。 A <xref:System.NotSupportedException> によって例外がスローされた、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッド場合、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールに設定されて、 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 値およびキャッシュが有効にもします。  
  
 組み合わせごとに一意のキャッシュ エントリが作成された、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>, 、<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>, 、および <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> プロパティです。 複数 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールを使用して、同じキャッシュ エントリのシナリオで同じ基になるデータベースからのコントロールが同じデータをロードします。  
  
> [!IMPORTANT]
>  Microsoft Windows 認証では、クライアントの偽装を使用しているときに、最初のユーザー データにアクセスするときに、データがキャッシュされます。 別のユーザーは、同じデータを要求している場合は、データがキャッシュから取得されます。 データは、データベースに別の呼び出しは、データへのユーザーのアクセスを確認することでは取得されません。 いて、データにアクセスする 1 つ以上のユーザーが想定する場合は、データベースのセキュリティ構成によって検証されるデータが取得されるたび、キャッシュを使用しません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
      </Docs>
    </Member>
    <Member MemberName="CancelSelectOnNullParameter">
      <MemberSignature Language="C#" Value="public virtual bool CancelSelectOnNullParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelSelectOnNullParameter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定される任意のパラメーターに、データ取得操作を取り消すかどうかを示す値に含まれている、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> にコレクションが評価 <see langword="null" />します。</summary>
        <value>
          <see langword="true" /> パラメーターが含まれているときに、データ取得操作が取り消された場合、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> にコレクションが評価され <see langword="null" />。 そうしないと、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A> プロパティはビュー ステートに格納します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値が、どのように <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールは、更新プログラムを実行して、基になる行のデータのデータベースの操作の期間中に変更するときに削除します。</summary>
        <value>
          <see cref="T:System.Web.UI.ConflictOptions" /> 値のいずれか。 既定値は、 <see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティに新旧の値のパラメーターを適用するかどうかを決定する、 `Update` メソッドです。 たとえば、次のコマンドはで指定された、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティを返します。、 <xref:System.Data.DataTable> 、列を持つオブジェクト `Name` と `Number` と <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティに設定されて、 <xref:System.Web.UI.ConflictOptions.OverwriteChanges> 値のパラメーターが作成 `Name` と `Number` の、 `Update` メソッドです。 場合、 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティに設定されて、 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値のパラメーターが作成 `Name`, 、`Number`, 、`original_Name`, 、および `original_Number`です。 \(元の値に対するパラメーターの正確な名前によって異なる、 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> プロパティです\)。<xref:System.Web.UI.WebControls.SqlDataSource> コントロール、かどうかを `Update` メソッドで指定されている、 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティと一致するパラメーターです。  
  
 同時実行制御は、データ ストアをコントロール データが読み取られ、複数のクライアントがアクセスして、同じデータを操作するときに、ストアに変更する方法を使用する手法です。 など 1 つのクライアントはデータを読み取るし、別のクライアントが同じデータを読み取り、別のユーザーに提示中に、ユーザーに提示します。 両方のユーザーは、データを更新し、データ ストレージに送信する、予期しない結果が生じるため、両方のクライアントは、同じデータに別の値を更新することです。 これは、競合と見なされます。 設定して、 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティを <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値、 `Update` メソッドを元のデータ ソースの競合を検出し、必要に応じて、処理するように、新旧の値を比較できます。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public virtual string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.SqlDataSourceConnectionStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または ADO.NET プロバイダー固有の接続文字列を設定、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールを基になるデータベースへの接続に使用します。</summary>
        <value>.NET Framework データ プロバイダー固有の文字列を <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> それが表す SQL データベースへの接続に使用します。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource> のさまざまな ADO.NET プロバイダーでコントロールを使用でき、基になるデータ ソースへの接続に使用される接続文字列の構文はプロバイダーに固有です。  
  
 構成すると、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールを設定する、 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティをデータベースの型 \(既定値は <xref:System.Data.SqlClient?displayProperty=fullName>\)、設定して、 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティをデータベースに接続するために必要な情報を含む接続文字列にします。 接続文字列の内容は、データベース、データ ソース コントロールのアクセスの種類によって異なります。 たとえば、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、サーバー名、データベース \(カタログ\) 名、および SQL Server に接続するときにユーザーを認証する方法に関する情報が必要です。 接続文字列の内容については、次を参照してください。、 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> プロパティを、 <xref:System.Data.SqlClient.SqlConnection> クラス、 <xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A> プロパティを、 <xref:System.Data.OracleClient.OracleConnection> クラス、 <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A> プロパティを、 <xref:System.Data.OleDb.OleDbConnection> クラス、または <xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A> プロパティを、 <xref:System.Data.Odbc.OdbcConnection> クラスです。  
  
 変更した場合、 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティには、 <xref:System.Web.UI.IDataSource.DataSourceChanged> イベントが発生原因で、コントロールにバインドされている、 <xref:System.Web.UI.WebControls.SqlDataSource> を再バインドするコントロール。  
  
> [!IMPORTANT]
>  接続文字列を格納する方法については、次を参照してください。 [How To: Secure Connection Strings when Using Data Source Controls](http://msdn.microsoft.com/ja-jp/942f6dcb-d278-4bec-8403-60eede9bcd62)します。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を設定する方法を示しています、 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> Microsoft SQL Server データベースに接続し、結果を表示するプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティに、 <xref:System.Web.UI.WebControls.GridView> コントロールです。 2 つ目のコード例は、さらに複雑なシナリオを示している、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールを使用してパスワードで保護された Access データベースのデータを更新します。 いずれの場合、 `connectionStrings` Web.config ファイルの要素が最初に表示され、ASP.NET ページが含まれていますが、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
 次のコード例では、設定、 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> SQL Server データベースに接続し、結果を表示するプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティに、 <xref:System.Web.UI.WebControls.GridView> コントロールです。  
  
  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_3sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/CS/sql3cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_3sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_3sql/VB/sql3vb.aspx#1)]  
  
 次のコード例は、前のコード例より複雑なシナリオを示します場所、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールを使用して、パスワードで保護された Access データベースのデータを更新します。<xref:System.Web.UI.WebControls.SqlDataSource> アクセスでは、使用、 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティに設定されて、 <xref:System.Data.OleDb> プロバイダー、および <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> UNC 共有アクセス データベースの適切な接続文字列プロパティを設定します。 A <xref:System.Web.UI.WebControls.GridView> コントロールは、出荷日の注文を表示します。 注文を更新するには適切なチェック ボックスをクリックして、 **更新** \] ボタンをクリックします。  
  
> [!IMPORTANT]
>  この例には、説明のみをプレーン テキストでパスワードが含まれます。 運用アプリケーションでは、パスワードを含む接続文字列を暗号化する必要があります。 詳細については、「[Protecting Connection Information \(ADO.NET\)](http://msdn.microsoft.com/ja-jp/1471f580-bcd4-4046-bdaf-d2541ecda2f4)」を参照してください。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_22sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_22sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#1)]  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_22sql\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/CS/sql22cs.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_22sql\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_22sql/VB/sql22vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
      </Docs>
    </Member>
    <Member MemberName="CreateDataSourceView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">データ ソース ビューの名前。</param>
        <summary>データ ソース コントロールに関連付けられているデータ ソース ビュー オブジェクトを作成します。</summary>
        <returns>A <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> と関連付けられている、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生するクラス、 <xref:System.Web.UI.WebControls.SqlDataSource> クラスでオーバーライド、 <xref:System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView%2A> 強くを返すメソッドがデータ ソース ビュー オブジェクトを入力します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.DataSourceView" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ取得のモードを設定、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールを使用してデータをフェッチします。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" /> 値のいずれか。 既定値は、  <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataSet" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データ取得のモードを識別する方法、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、基になるデータベースからデータを取得します。  
  
 ときに、 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティに設定されて、 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 値にデータを読み込む、 <xref:System.Data.DataSet> オブジェクトと、サーバー上に格納されているメモリです。 これにより、ユーザー インターフェイスなどのコントロール シナリオ <xref:System.Web.UI.WebControls.GridView>, 、並べ替え、フィルター処理、およびページング機能を提供します。  
  
 ときに、 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティに設定されて、 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 値、データを取得して、 <xref:System.Data.IDataReader> 順方向専用、読み取り専用カーソルであるオブジェクト。 特定の種類の <xref:System.Data.IDataReader> NET データ プロバイダーに依存するオブジェクトを <xref:System.Web.UI.WebControls.SqlDataSource> 用途では、により識別される、 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティです。 既定では、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、プロバイダーを使用して、Microsoft SQL Server 用、 <xref:System.Data.SqlClient?displayProperty=fullName>, 、し、データ リーダーが、 <xref:System.Data.SqlClient.SqlDataReader> オブジェクトです。  
  
 変更した場合、 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティには、 <xref:System.Web.UI.IDataSource.DataSourceChanged> イベントが発生原因で、コントロールにバインドされている、 <xref:System.Web.UI.WebControls.SqlDataSource> を再バインドします。  
  
 値、 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティはビュー ステートに格納します。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSource> に制御を <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> のシナリオでは、値、 <xref:System.Web.UI.WebControls.ListBox> 制御を必要としない並べ替え、ページング、およびフィルター処理します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_1sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/CS/sql1cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_1sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/VB/sql1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" /> プロパティで定義されている値のいずれかではない、 <see cref="T:System.Web.UI.WebControls.SqlDataSourceMode" />です。</exception>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用して削除操作を実行、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> 内にある SQL 文字列とパラメーター、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" /> コレクションです。</summary>
        <returns>基になるデータベースから削除された行の数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 削除操作が実行される前に、 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> イベントです。 パラメーターの値を確認し、削除操作の前に処理を実行する、このイベントを処理することができます。  
  
 操作の完了後、 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.SqlDataSource.Deleted> イベントです。 戻り値とエラー コードを分析し、後続の処理を実行する、このイベントを処理することができます。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> にプログラムでアクセス メソッドが提供される、 `Delete` メソッドです。 場合、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、データ バインド コントロールに関連付けをデータ バインド コントロールが自動的には、 **削除** メソッドです。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドからデリゲートを <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> のメソッド、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。 操作を実行する、 <xref:System.Web.UI.WebControls.SqlDataSourceView> ビルド、 <xref:System.Data.Common.DbCommand> オブジェクトを使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> テキストと、関連付けられたすべて <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> 値、し、実行、 <xref:System.Data.Common.DbCommand> 基になるデータベースに対して。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Northwind データベースから注文を削除するテキスト。 データが最初に、Orders テーブルから取得しに表示されます、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。 明示的に宣言する必要があります、 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> プロパティと呼び出し、 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドなど、データ バインド コントロールを使用する場合、 <xref:System.Web.UI.WebControls.DropDownList> \(他のコントロールとは異なりなど <xref:System.Web.UI.WebControls.GridView> と <xref:System.Web.UI.WebControls.DetailsView>, 、パラメーターと呼び出しを自動的に入力する、 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> データ ソース コントロールのメソッド\)。 この例では、 <xref:System.Web.UI.WebControls.Button.OnClick%2A> イベントがプライベートに委任 `OnDelete` を明示的に呼び出すイベント ハンドラー、 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> のメソッド、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_11sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_11sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 基になるデータ ソースとの接続を確立することはできません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public string DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または SQL 文字列の設定、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールを使用して基になるデータベースからデータを削除します。</summary>
        <value>SQL の文字列を <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> を使用してデータを削除します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> SQL クエリまたはストアド プロシージャの名前を表しで使用される、 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドです。  
  
 データベース製品ごとに使用する SQL が異なるため、SQL 文字列の構文は、現在使用している ADO.NET プロバイダーによって決まります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティから識別できます。 SQL 文字列がパラメーター化クエリまたはコマンドの場合は、パラメーターの構文が使用されている ADO.NET プロバイダーにも依存します。 たとえば、プロバイダーは、 <xref:System.Data.SqlClient?displayProperty=fullName>, の既定のプロバイダーは、 <xref:System.Web.UI.WebControls.SqlDataSource> クラス、パラメーターの構文は `'@parameterName'`です。 ただし、プロバイダーに設定されている場合、 <xref:System.Data.Odbc?displayProperty=fullName> または <xref:System.Data.OleDb?displayProperty=fullName>, 、パラメーターのプレース ホルダーは `'?'`です。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [Using Parameters with the SqlDataSource Control](http://msdn.microsoft.com/ja-jp/403ff44a-dd0b-484d-968e-dcd1dcd4c295)します。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> プロパティから、データベースにストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> プロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
> [!IMPORTANT]
>  セキュリティのため、 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> プロパティはビュー ステートに格納されません。 クライアント上のビュー ステートの内容をデコードできるため、データベース構造に関する機密情報を格納すると、ビューに状態結果、情報漏えいの脆弱性します。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> 注文を Northwind データベースの Orders テーブルから削除するテキスト。 データは Orders テーブルから取得されに表示される、 <xref:System.Web.UI.WebControls.GridView> コントロールです。<xref:System.Web.UI.WebControls.GridView> レンダリング、 **削除** ボタンを自動的にときに、 <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> にプロパティが設定されている `true`します。 さらに、 **削除** \] ボタンをクリックすると、 <xref:System.Web.UI.WebControls.GridView> コントロールを自動的に入力、 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> コレクションと呼び出し、 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドです。 最後に、このコード例にデータが削除されるため、イベント ハンドラーが追加する前にディスクにデータベースをバックアップしようとする、 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 操作を実行します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_10sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_10sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうかのテキスト、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> プロパティは、SQL ステートメントまたはストアド プロシージャの名前。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値のいずれか。 既定値は、 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommandType%2A> プロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Deleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>削除操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.SqlDataSource.Deleted> 削除操作が完了した後の値を確認するイベントを出力パラメーターです。 出力パラメーターは、 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用されるパラメーターを含むパラメーターのコレクションを取得、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> プロパティから、 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> オブジェクトに関連付けられている、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> によって使用されるパラメーターを格納している、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> プロパティには、パラメーター化された SQL クエリが含まれています。、 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> コレクションには、いずれかが含まれています <xref:System.Web.UI.WebControls.Parameter> SQL 文字列のパラメーターのプレース ホルダーに対応するオブジェクト。  
  
> [!NOTE]
>  確認していない <xref:System.Web.UI.WebControls.BoundField> にバインドするデータ バインド コントロール内のコントロール、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロール内のすべてのパラメーター名に一致する名前がある、 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> コレクションです。 パラメーターをバインドされたフィールドは、SQL コマンドを「パラメーターが指定されませんでした」エラーから除外するように、同じ名前を持つ可能性があります。  
  
 場合、 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティに設定されて、 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値、パラメーターは、データの新旧の値で作成されます。 よると、古い値のパラメーターの名前は、 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> プロパティです。  
  
 ADO.NET プロバイダーでは、パラメーターの順序によって、 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> コレクションが重要であります。<xref:System.Data.OleDb?displayProperty=fullName> と <xref:System.Data.Odbc?displayProperty=fullName> プロバイダーは、パラメーターがパラメーター化された SQL クエリに表示される順序に従ってコレクションのパラメーターを関連付けます。<xref:System.Data.SqlClient?displayProperty=fullName> は既定の ADO.NET プロバイダーであり、プロバイダーの <xref:System.Web.UI.WebControls.SqlDataSource> の管理、SQL クエリ内のプレース ホルダーを持つパラメーターの名前を照合することによって、コレクションのパラメーターを関連付けます。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [Using the SqlDataSource and AccessDataSource Controls with Parameters](http://msdn.microsoft.com/ja-jp/403ff44a-dd0b-484d-968e-dcd1dcd4c295)します。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> プロパティの取得、 <xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> プロパティに格納されている、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
> [!IMPORTANT]
>  値は、潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに挿入されます。 使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
   
  
## 例  
 次のコード例では、設定、 <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> Northwind データベースから注文を削除するテキスト。 データが最初に、Orders テーブルから取得しに表示されます、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。 明示的に宣言する必要があります <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> プロパティと呼び出し、 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> メソッドなど、データ バインド コントロールの使用時に <xref:System.Web.UI.WebControls.DropDownList> \(その他のコントロールとは異なりなど <xref:System.Web.UI.WebControls.GridView> と <xref:System.Web.UI.WebControls.DetailsView>, 、パラメーターと呼び出しを自動的に入力する <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> データ ソース コントロールに\)。 この例では、 <xref:System.Web.UI.WebControls.Button.OnClick%2A> イベントがプライベートに委任 `OnDelete` を明示的に呼び出すイベント ハンドラー、 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> のメソッド、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_11sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/CS/sql11cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_11sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_11sql/VB/sql11vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Deleting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>削除操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> 、パラメーターの値を検証するか、前にパラメーター値を変更する、アプリケーションに固有である追加の初期化処理を実行するイベント、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、削除操作を実行します。  
  
 基になるデータ ソースへの接続がまだ開いていないイベント ハンドラーのデリゲートが呼び出されるとします。 そのため、呼び出すことによって直接操作を取り消すことはできません、 <xref:System.Data.Common.DbCommand.Cancel%2A> メソッドを <xref:System.Data.Common.DbCommand> オブジェクトによって公開される、 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> オブジェクトです。 ただし、設定してデータベース操作を取り消すことができます、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> オブジェクトを `true`します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、処理、 <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> する前に発生するイベントを <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 操作が発生します。 この例は、Northwind データベースからデータを削除するため、 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> 前にディスクにデータベースをバックアップしようとするハンドラーを追加、 <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> 操作を実行します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_10sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/CS/sql10cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_10sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_10sql/VB/sql10vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールがデータ キャッシュを有効にします。</summary>
        <value>
          <see langword="true" /> データ ソース コントロールのデータ キャッシュが有効になっている場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールはデータのキャッシュをサポートします。 データがキャッシュ、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドを基になるデータベースではなく、キャッシュからデータを取得します。 キャッシュの有効期限、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドは、基になるデータベースからデータを取得し、もう一度、データをキャッシュします。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールがデータを自動的にキャッシュと、 <xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> にプロパティが設定されている `true` と <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> プロパティが、キャッシュが新しいものを取得する前にデータを格納する秒数を示す 0 より大きい値に設定します。  
  
> [!IMPORTANT]
>  Microsoft Windows 認証では、クライアントの偽装を使用しているときに、最初のユーザー データにアクセスするときに、データがキャッシュされます。 別のユーザーは、同じデータを要求している場合は、データがキャッシュから取得されます。 データは、データベースに別の呼び出しは、データへのユーザーのアクセスを確認することでは取得されません。 いて、データにアクセスする 1 つ以上のユーザーが想定する場合は、データベースのセキュリティ構成によって検証されるデータが取得されるたび、キャッシュを使用しません。  
  
   
  
## 例  
 次のコード例は、Microsoft SQL Server の Northwind データベースからデータを取得および表示する方法を示します、 <xref:System.Web.UI.WebControls.GridView> コントロールの場合と、データ キャッシュを有効にします。<xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A> にプロパティが設定されている `true` と <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> は 20 秒に設定します。<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティに設定されて、 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> フィールドが既定では、このページのユーザーは 20 秒ごとに新しいデータに表示します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_18sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/CS/sql18cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_18sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_18sql/VB/sql18vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSource.EnableCaching" /> にプロパティが設定されている <see langword="true" /> とキャッシュがサポートされていませんが、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" />です。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> メソッドが呼び出されるときに適用されるフィルター式を取得または設定します。</summary>
        <value>
          <see cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" /> メソッドを使用してデータを取得するときに適用されるフィルター式を表す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property value is a format string expression \(a string that is processed by the <xref:System.String.Format%2A?displayProperty=fullName> method\) that uses the values in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> collection for any substitution parameters included in the string. The filter expression syntax is the same syntax that is accepted by the <xref:System.Data.DataView.RowFilter%2A> property, because the filter expression is applied to the <xref:System.Data.DataView.RowFilter%2A> property of the <xref:System.Data.DataView> object that is returned from executing the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method. For more information, see <xref:System.Data.DataColumn.Expression%2A>.  
  
 If you add parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection, you can also include format string placeholders \(for example, `"{0}")` in the expression to substitute for parameter values. The placeholders are replaced according to the index of the parameter in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. If an object in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection is **languageKeyword tag is not supported!!!!**  
, the object will be replaced by an empty string.  
  
 You can include parameters in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property. If the parameter is a string or character type, enclose the parameter in single quotation marks. Quotation marks are not required, if the parameter is a numeric type. The <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection contains the parameters that are evaluated for the placeholders that are found in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property.  
  
 The <xref:System.Web.UI.WebControls.SqlDataSource> control supports filtering data only when in the <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> mode.  
  
 The <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property delegates to the <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSourceView> object that is associated with the <xref:System.Web.UI.WebControls.SqlDataSource> control.  
  
   
  
## 例  
 The following code example demonstrates how to retrieve data from the Northwind database and filter it using a <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> string and the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. The <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property is applied any time the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is executed to retrieve data. In this example, the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> contains a placeholder for a filter parameter, which is contained in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. In addition, the filter parameter is a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> property of the <xref:System.Web.UI.WebControls.DropDownList> control. Because the <xref:System.Web.UI.WebControls.DropDownList> control has its <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> property set to **languageKeyword tag is not supported!!!!**  
, any change in the selection for the <xref:System.Web.UI.WebControls.DropDownList> control causes the page to post information back to the server and the <xref:System.Web.UI.WebControls.GridView> control to rebind to the data source control with the new filter.  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_17sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_17sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" /> プロパティが設定され、<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> が <see cref="F:System.Web.UI.WebControls.SqlDataSourceMode.DataReader" /> モードです。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Filtering" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フィルター操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> フィルター パラメーターの値の検証操作を実行するイベント、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、フィルター操作を実行します。 取り消すことができます、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> を設定することによって、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs> オブジェクトを `true`します。 場合にのみこのイベントは、 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティを設定します。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering?displayProperty=fullName> にイベントのデリゲート、 <xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=fullName> のイベント、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パラメーターのプレース ホルダー内にあるに関連付けられているパラメーターのコレクションを取得、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" /> 文字列。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> については、パラメーター プレース ホルダーに関連付けられているパラメーターのセットを含んでいる、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内のパラメーター、 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> コレクションで指定されているすべてのパラメーターに割り当てられた、 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティです。 指定されているパラメーターのプレース ホルダー、 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティに一致するパラメーター オブジェクトを <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> コレクションと、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドが呼び出されます。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> プロパティの取得、 <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> プロパティに格納されている、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
> [!IMPORTANT]
>  値は、潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに挿入されます。 使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
   
  
## 例  
 次のコード例は、Northwind データベースからデータを取得しを使用してフィルターを適用する方法を示します、 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> と <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> プロパティです。<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSource> 制御がいつでも適用される、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> データを取得するメソッドを実行します。 この例では、 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティに含まれているフィルター パラメーターのプレース ホルダーが含まれています、 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> コレクションです。 さらに、フィルターのパラメーターは、 <xref:System.Web.UI.WebControls.ControlParameter> オブジェクトにバインドされている、 <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> のプロパティ、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。<xref:System.Web.UI.WebControls.DropDownList> コントロールがその <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> プロパティに設定 `true`, に何か変更、 <xref:System.Web.UI.WebControls.DropDownList> の選択は、サーバーに情報を投稿するページと <xref:System.Web.UI.WebControls.GridView> 新しいフィルターを使用してデータ ソース コントロールにバインドするコントロール。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_17sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/CS/sql17cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_17sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_17sql/VB/sql17vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.DataSourceMode" />
      </Docs>
    </Member>
    <Member MemberName="GetDbProviderFactory">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.DbProviderFactory GetDbProviderFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.DbProviderFactory GetDbProviderFactory() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Data.Common.DbProviderFactory" /> によって識別される ADO.NET プロバイダーに関連付けられているオブジェクト、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" /> プロパティです。</summary>
        <returns>A <see cref="T:System.Data.Common.DbProviderFactory" /> 識別された ADO.NET プロバイダーを表す、それ以外のインスタンスと、 <see cref="N:System.Data.SqlClient" />, プロバイダーが設定されていない場合は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Data.Common.DbProviderFactory> プロパティを使って、 <xref:System.Web.UI.WebControls.SqlDataSource> データベースとやり取りするときに正しい ADO.NET connection、command、およびパラメーター オブジェクトを作成するコントロール。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.Common.DbProviderFactory" />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">取得するビューの名前。<see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 1 つのビューをサポートしている <c>viewName</c> は無視されます。</param>
        <summary>データ ソース コントロールに関連付けられている名前付きのデータ ソース ビューを取得します。</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> に関連付けられている"Table"という名前の <see cref="T:System.Web.UI.WebControls.SqlDataSource" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、1 つだけのデータ ソース ビューをサポートしています。 すべてのデータ ソース ビュー オブジェクトと同様、 <xref:System.Web.UI.WebControls.SqlDataSourceView> 、データ ソース コントロールに関連付けられているオブジェクトがその機能を定義、基になるデータベースからデータを取得する必要はし、並べ替え、挿入、削除、および更新などの操作を実行するすべての作業を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="viewName" /> <see langword="null" /> またはもの以外の <c>Table</c>です。</exception>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.GetViewNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>関連付けられているビュー オブジェクトの一覧を表す名のコレクションを取得、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールです。</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" /> に関連付けられているビューの名前を格納している、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールという名前の基になるデータの 1 つのビューをサポートしている `"Table"`します。<xref:System.Web.UI.WebControls.SqlDataSource.GetViewNames%2A> メソッドは、この 1 つのビューの名前の単一要素のコレクションを返します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.GetView(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>挿入操作を使用して、実行、<see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />内にある SQL 文字列とパラメーター、<see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />コレクション。</summary>
        <returns>基になるデータベースに挿入される行の数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 挿入操作を実行すると、前に、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSource.Inserting>イベント。 パラメーターの値を確認する前に処理を実行して、このイベントを処理することができます、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>操作します。 挿入操作を実行する、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトのビルド、<xref:System.Data.Common.DbCommand>オブジェクトを使用して、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>テキストと、関連付けられたすべて<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>プロパティ、し、実行、<xref:System.Data.Common.DbCommand>基になるデータベースに対してオブジェクト。  
  
 操作の完了後、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>イベント。 任意の戻り値およびエラー コードを調べ、後処理を実行するこのイベントを処理することができます。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>メソッドは、プログラムへのアクセス提供、`Insert`メソッドです。 場合、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールがデータ バインド コントロールに関連付け、データ バインド コントロールを自動的に呼び出して、`Insert`メソッドです。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>メソッドからデリゲートを<xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>のメソッド、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール。  
  
> [!IMPORTANT]
>  値は、潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
   
  
## 例  
 次のコード例を使用してデータベースにデータを挿入する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールと、単純な Web フォーム ページ。 データ テーブルの現在のデータが表示されます、<xref:System.Web.UI.WebControls.DropDownList>コントロール。 内の値を入力して新しいレコードを追加することができます、<xref:System.Web.UI.WebControls.TextBox>コントロールをクリックして、**挿入**ボタンをクリックします。 ときに、**挿入**ボタンがクリックされると、指定した値が、データベースに挿入し、<xref:System.Web.UI.WebControls.DropDownList>は更新します。  
  
> [!IMPORTANT]
>  この例では、潜在的なセキュリティ上の脅威がユーザー入力を受け付けるテキスト ボックスとも潜在的なセキュリティの脅威の検証を伴わないパラメーターに値が挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Inserting>クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
> [!NOTE]
>  この例では、データ アクセスの宣言型の構文を使用する方法を示します。 マークアップではなくコードを使用してデータにアクセスする方法については、次を参照してください。[Accessing Data in Visual Studio](http://msdn.microsoft.com/ja-jp/9812a6d5-23d2-4427-8b98-70a2abfec3bc)です。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_24sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_24sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" />基になるデータ ソースとの接続を確立することはできません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public string InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、SQL 文字列、<see cref="T:System.Web.UI.WebControls.SqlDataSource" />基になるデータベースにデータを挿入するコントロールを使用します。</summary>
        <value>SQL の文字列を<see cref="T:System.Web.UI.WebControls.SqlDataSource" />を使用してデータを挿入します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>によって使用され、SQL クエリまたはストアド プロシージャの名前を表す、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>メソッドです。  
  
 データベース製品ごとに使用する SQL が異なるため、SQL 文字列の構文は、現在使用している ADO.NET プロバイダーによって決まります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティから識別できます。 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーは、<xref:System.Data.SqlClient?displayProperty=fullName>の既定のプロバイダーは、<xref:System.Web.UI.WebControls.SqlDataSource>クラス、パラメーターのプレース ホルダーは`'@parameterName'`します。 ただし、プロバイダーに設定されている場合、<xref:System.Data.Odbc?displayProperty=fullName>または<xref:System.Data.OleDb?displayProperty=fullName>、パラメーターのプレース ホルダーは`'?'`します。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。[Using Parameters with the SqlDataSource Control](http://msdn.microsoft.com/ja-jp/403ff44a-dd0b-484d-968e-dcd1dcd4c295)です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>データ ソースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます。  
  
 このプロパティを委任する場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール。  
  
> [!IMPORTANT]
>  セキュリティのため、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>プロパティは格納されませんビュー ステートがします。 クライアント上のビュー ステートの内容をデコードできるため、データベース構造に関する機密情報を格納すると、ビューに状態可能性があります、情報漏えいの脆弱性。  
  
> [!IMPORTANT]
>  値は、潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
   
  
## 例  
 このセクションには、2 つのコード例が含まれています。 最初のコード例を使用してデータベースにデータを挿入する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールと、単純な Web フォーム ページ。 2 番目のコード例は、Microsoft SQL Server からデータを取得および表示する方法を示します、<xref:System.Web.UI.WebControls.GridView>コントロールと使用方法、<xref:System.Web.UI.WebControls.DetailsView>に選択した行の詳細を表示するコントロール、<xref:System.Web.UI.WebControls.GridView>コントロールと新しいレコードを挿入するためのフォームです。  
  
> [!NOTE]
>  これらの例では、宣言構文を使用してデータにアクセスする方法を示します。 マークアップではなくコードを使用してデータにアクセスする方法については、次を参照してください。[Accessing Data in Visual Studio](http://msdn.microsoft.com/ja-jp/9812a6d5-23d2-4427-8b98-70a2abfec3bc)です。  
  
 次のコード例を使用してデータベースにデータを挿入する方法を示します、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールと、単純な Web フォーム ページ。 データ テーブルの現在のデータが表示されます、<xref:System.Web.UI.WebControls.DropDownList>コントロール。 値を入力して新しいレコードを追加することができます、<xref:System.Web.UI.WebControls.TextBox>コントロールをクリックして、**挿入**ボタンをクリックします。 ときに、**挿入**ボタンがクリックされると、指定した値が、データベースに挿入され、<xref:System.Web.UI.WebControls.DropDownList>コントロールが更新されます。  
  
> [!IMPORTANT]
>  この例には、潜在的なセキュリティの脅威には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 し、値が、これは、潜在的なセキュリティの脅威も検証を伴わないパラメーターに挿入します。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Inserting>クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_24sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_24sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 次のコード例は、SQL Server からデータを取得し、表示する方法を示します、<xref:System.Web.UI.WebControls.GridView>コントロールと使用方法、<xref:System.Web.UI.WebControls.DetailsView>コントロールで選択した行の詳細を表示する、<xref:System.Web.UI.WebControls.GridView>コントロールと新しいレコードを挿入するためのフォームです。  
  
 最初に、データが内に表示されます、<xref:System.Web.UI.WebControls.GridView>制御、および選択した行の<xref:System.Web.UI.WebControls.GridView>にも表示されます、<xref:System.Web.UI.WebControls.DetailsView>コントロール。<xref:System.Web.UI.WebControls.GridView>と<xref:System.Web.UI.WebControls.DetailsView>コントロールが別のデータを使用してソース コントロール; に関連付けられている 1 つ、<xref:System.Web.UI.WebControls.DetailsView>が、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>と<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>プロパティで、確実に選択した行の<xref:System.Web.UI.WebControls.GridView>が表示されます。  
  
 自動的に生成された をクリックすると**挿入**のボタン、<xref:System.Web.UI.WebControls.DetailsView>コントロール、<xref:System.Web.UI.WebControls.DetailsView>新しいレコードを挿入するために使用する別のユーザー インターフェイスを示しています。 この例では、レコードを挿入するストアド プロシージャを使用し、挿入された行の主キーを返します。 レコードを挿入する場合、<xref:System.Web.UI.WebControls.DetailsView>自動的に入力、<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>呼び出し、バインドされた列から値を使用して、コレクション、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>メソッドです。<xref:System.Web.UI.WebControls.DetailsView>から適切なパラメーターを推論できる<xref:System.Web.UI.WebControls.BoundField>オブジェクトとパラメーターを<xref:System.Web.UI.WebControls.TemplateField>ASP.NET 双方向データ バインディングの構文を使用する場合のオブジェクトします。 この例では、追加のパラメーターが追加された、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>ストアド プロシージャによって返される主キーを処理するイベント ハンドラー。  
  
 最後に、データがデータベースに挿入した後、<xref:System.Web.UI.WebControls.DetailsView>コントロール、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>処理するイベント ハンドラーが呼び出されます、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>イベント、挿入された行の主キーの値が表示されます、<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>のメソッド、<xref:System.Web.UI.WebControls.GridView>コントロールがデータの更新を明示的に呼び出されます。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_15sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_15sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="InsertCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうかのテキスト、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> プロパティは、SQL ステートメントまたはストアド プロシージャの名前。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値のいずれか。 既定値は、 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A> プロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
   
  
## 例  
 次のコード例は、Microsoft SQL Server データベースからデータを取得し、表示する方法を示します、 <xref:System.Web.UI.WebControls.GridView> コントロールです。 使用する方法も示します、 <xref:System.Web.UI.WebControls.DetailsView> で選択した行の詳細を表示するコントロール、 <xref:System.Web.UI.WebControls.GridView> と新しいレコードを挿入するためのフォームです。  
  
 <xref:System.Web.UI.WebControls.GridView> コントロールは、データのセットを表示し、 <xref:System.Web.UI.WebControls.DetailsView> 特定の行に関する詳細が表示されます。 自動的に生成された\] をクリックすると **挿入** のボタン、 <xref:System.Web.UI.WebControls.DetailsView> コントロール、 <xref:System.Web.UI.WebControls.DetailsView> 新しいレコードを挿入するために使用する別のユーザー インターフェイスを示しています。 この例では、レコードを挿入するストアド プロシージャを使用し、挿入された行の主キーを返します。 ストアド プロシージャ名を設定、 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> プロパティを設定して、ストアド プロシージャとして識別されると、 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> 値。  
  
 データベースにデータを挿入した後、 <xref:System.Web.UI.WebControls.DetailsView> コントロール、 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> を処理するイベント ハンドラーが呼び出されます、 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> イベント、挿入された行の主キーの値が表示されたら、および <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> のメソッド、 <xref:System.Web.UI.WebControls.GridView> データを更新するコントロールを明示的に呼び出されます。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_15sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_15sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Inserted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>挿入操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> 挿入操作が完了した後の値を確認するイベントを出力パラメーターです。 出力パラメーターは、 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例は、Microsoft SQL Server からデータを取得および表示する方法を示します、 <xref:System.Web.UI.WebControls.GridView> コントロールと使用方法、 <xref:System.Web.UI.WebControls.DetailsView> で選択した行の詳細を表示するコントロール、 <xref:System.Web.UI.WebControls.GridView> と新しいレコードを挿入するためのフォームです。  
  
> [!NOTE]
>  この例では、データ アクセスのための宣言構文を使用する方法を示します。 マークアップではなくコードを使用してデータにアクセスする方法については、次を参照してください。 [Accessing Data in Visual Studio](http://msdn.microsoft.com/ja-jp/9812a6d5-23d2-4427-8b98-70a2abfec3bc)します。  
  
 データを表示する、最初に、 <xref:System.Web.UI.WebControls.GridView> コントロール、および選択した行の <xref:System.Web.UI.WebControls.GridView> にも表示されます、 <xref:System.Web.UI.WebControls.DetailsView> コントロールです。<xref:System.Web.UI.WebControls.GridView> と <xref:System.Web.UI.WebControls.DetailsView> コントロールが別のデータを使用してソース コントロール; に関連付けられている 1 つ、 <xref:System.Web.UI.WebControls.DetailsView> が、 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> と <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> プロパティで、確実に選択した行の <xref:System.Web.UI.WebControls.GridView> が表示されます。  
  
 自動的に生成された\] をクリックすると **挿入** のボタン、 <xref:System.Web.UI.WebControls.DetailsView> コントロール、 <xref:System.Web.UI.WebControls.DetailsView> 新しいレコードを挿入するために使用する別のユーザー インターフェイスを示しています。 この例では、レコードを挿入するストアド プロシージャを使用し、挿入された行の主キーを返します。 レコードを挿入する場合、 <xref:System.Web.UI.WebControls.DetailsView> を自動的に入力、 <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 呼び出し、バインドされた列から値を使用して、コレクション、 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> メソッドです。<xref:System.Web.UI.WebControls.DetailsView> 推論できるため、いずれかから適切なパラメーター <xref:System.Web.UI.WebControls.BoundField> オブジェクトとのパラメーターを <xref:System.Web.UI.WebControls.TemplateField> ASP.NET 双方向データ バインドの構文を使用する場合のオブジェクトします。 この例では、内に、追加のパラメーターを追加、 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> ストアド プロシージャによって返されるプライマリ キーを処理するイベント ハンドラーです。  
  
 最後に、によってデータベースにデータを挿入した後、 <xref:System.Web.UI.WebControls.DetailsView> コントロール、 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> を処理するイベント ハンドラーが呼び出されます、 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> イベント、挿入された行の主キーの値が表示されたら、および <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> のメソッド、 <xref:System.Web.UI.WebControls.GridView> データを更新するコントロールを明示的に呼び出されます。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_15sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_15sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Inserting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>挿入操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> 、パラメーターの値を検証するか、前にパラメーター値を変更する、アプリケーションに固有である追加の初期化処理を実行するイベント、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、挿入操作を実行します。 基になるデータ ソースへの接続がまだ開いていないイベント ハンドラーのデリゲートが呼び出されるとします。 そのため、直接を呼び出して、操作を取り消すことはできません、 <xref:System.Data.Common.DbCommand.Cancel%2A> メソッドを <xref:System.Data.Common.DbCommand> オブジェクトによって公開される、 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> プロパティです。 ただし、設定してデータベース操作を取り消すことができます、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> オブジェクトを `true`します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例は、Microsoft SQL Server からデータを取得し、表示方法を示します、 <xref:System.Web.UI.WebControls.GridView> コントロールと使用方法、 <xref:System.Web.UI.WebControls.DetailsView> で選択した行の詳細を表示するコントロール、 <xref:System.Web.UI.WebControls.GridView> と新しいレコードを挿入するためのフォームです。  
  
> [!NOTE]
>  この例では、データ アクセスのための宣言構文を使用する方法を示します。 マークアップではなくコードを使用してデータにアクセスする方法については、次を参照してください。 [Accessing Data in Visual Studio](http://msdn.microsoft.com/ja-jp/9812a6d5-23d2-4427-8b98-70a2abfec3bc)します。  
  
 データを表示する、最初に、 <xref:System.Web.UI.WebControls.GridView> コントロール、および選択した行の <xref:System.Web.UI.WebControls.GridView> にも表示されます、 <xref:System.Web.UI.WebControls.DetailsView> コントロールです。<xref:System.Web.UI.WebControls.GridView> と <xref:System.Web.UI.WebControls.DetailsView> コントロールが別のデータを使用してソース コントロール; に関連付けられている 1 つ、 <xref:System.Web.UI.WebControls.DetailsView> が、 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> と <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> プロパティで、確実に選択した行の <xref:System.Web.UI.WebControls.GridView> が表示されます。  
  
 自動的に生成された\] をクリックすると **挿入** のボタン、 <xref:System.Web.UI.WebControls.DetailsView> コントロール、 <xref:System.Web.UI.WebControls.DetailsView> 新しいレコードを挿入するために使用する別のユーザー インターフェイスを示しています。 この例では、レコードを挿入するストアド プロシージャを使用し、挿入された行の主キーを返します。 レコードを挿入する場合、 <xref:System.Web.UI.WebControls.DetailsView> を自動的に入力、 <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> 呼び出し、バインドされた列から値を使用して、コレクション、 <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> メソッドです。<xref:System.Web.UI.WebControls.DetailsView> 推論できるため、いずれかから適切なパラメーター <xref:System.Web.UI.WebControls.BoundField> オブジェクトとのパラメーターを <xref:System.Web.UI.WebControls.TemplateField> ASP.NET 双方向データ バインドの構文を使用する場合。 この例では、内に、追加のパラメーターを追加、 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> ストアド プロシージャによって返されるプライマリ キーを処理するイベント ハンドラーです。  
  
 最後に、によってデータベースにデータを挿入した後、 <xref:System.Web.UI.WebControls.DetailsView> コントロール、 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> を処理するイベント ハンドラーが呼び出されます、 <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> イベント、挿入された行の主キーの値が表示されたら、および `DataBind` のメソッド、 <xref:System.Web.UI.WebControls.GridView> データを更新するコントロールを明示的に呼び出されます。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_15sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/CS/sql15cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_15sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_15sql/VB/sql15vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用されるパラメーターを含むパラメーターのコレクションを取得、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> プロパティから、 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> オブジェクトに関連付けられている、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> によって使用されるパラメーターを格納している、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> プロパティの取得、 <xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> プロパティに格納されている、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
 場合、 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> プロパティには、パラメーター化された SQL クエリが含まれています。、 <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> コレクションには、いずれかが含まれています <xref:System.Web.UI.WebControls.Parameter> SQL 文字列のパラメーターのプレース ホルダーに対応するオブジェクト。  
  
 ADO.NET プロバイダーでは、パラメーターの順序によって、 <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> コレクションが重要であります。<xref:System.Data.OleDb?displayProperty=fullName> と <xref:System.Data.Odbc?displayProperty=fullName> プロバイダーがパラメーター化された SQL クエリで使用されるパラメーターの順序に従ってコレクションのパラメーターを関連付けます。<xref:System.Data.SqlClient?displayProperty=fullName> は既定の ADO.NET プロバイダーであり、プロバイダーの <xref:System.Web.UI.WebControls.SqlDataSource> コントロールに、SQL クエリ内のプレース ホルダーのエイリアスを持つパラメーターの名前を照合することによって、コレクションのパラメーターを関連付けます。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [Using Parameters with the SqlDataSource Control](http://msdn.microsoft.com/ja-jp/403ff44a-dd0b-484d-968e-dcd1dcd4c295)します。  
  
> [!IMPORTANT]
>  値は、潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに挿入されます。 使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
   
  
## 例  
 次のコード例を使用してデータベースにデータを挿入する方法を示しています、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールと、単純な Web フォーム ページです。 データ テーブルの現在のデータが表示される、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。 値を入力して新しいレコードを追加することができます、 <xref:System.Web.UI.WebControls.TextBox> コントロールをクリックして、 **挿入** \] ボタンをクリックします。 ときに、 **挿入** ボタンがクリックされると、指定した値が、データベースに挿入され、 <xref:System.Web.UI.WebControls.DropDownList> コントロールが更新されます。  
  
> [!IMPORTANT]
>  この例では、潜在的なセキュリティの脅威には、ユーザー入力を受け付けるテキスト ボックスと、値が潜在的なセキュリティ脅威もある検証を伴わないパラメーターに挿入します。 使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
> [!NOTE]
>  この例では、データ アクセスのための宣言構文を使用する方法を示します。 マークアップではなくコードを使用してデータにアクセスする方法については、次を参照してください。 [Accessing Data in Visual Studio](http://msdn.microsoft.com/ja-jp/9812a6d5-23d2-4427-8b98-70a2abfec3bc)します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_24sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_24sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.InsertCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">オブジェクトの状態を表す、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" />です。</param>
        <summary>永続化する必要がある <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールのプロパティの状態を読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.LoadViewState%2A> メソッドの以前に保存されたビューステートの読み込みを使用して、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に渡されるパラメーターの名前に適用する書式指定文字列、 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" /> または <see cref="M:System.Web.UI.WebControls.SqlDataSource.Update" /> メソッドです。</summary>
        <value>いずれかの名前に適用される書式指定文字列を表す文字列 <paramref name="oldValues" /> に渡されるパラメーター、 <see cref="M:System.Web.UI.WebControls.SqlDataSource.Delete" /> または <see cref="M:System.Web.UI.WebControls.SqlDataSource.Update" /> メソッドです。 既定値が必要な場合は、"0"} を使用しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> 書式指定文字列は主キー、によって識別されるようにのみ適用、 `DataKeyNames` または削除で、関連付けられているデータ バインド コントロールのプロパティ更新シナリオと場所、 <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> プロパティに設定されて、 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値と一連の `oldValues` は対応するデータのメソッドに渡されます。 各パラメーターの名前に、書式指定文字列を適用する場合は、 `oldValues` コレクションです。  
  
 2 つの一般的なシナリオが変わることがあります、 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> プロパティは次のようにします。  
  
-   更新時に新旧の値を区別します。 ときに、 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティに設定されて、 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値の場合は、元と新しい値の両方に追加するためのパラメーター、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> コレクションです。 書式指定文字列の各データ フィールドに同じ名前の 2 つのパラメーターが作成されます。 元の値パラメーターの名前を変更すると、競合を検出して、キーの値を比較する元のデータ ソースにデータを比較できます。  
  
-   一部のビジュアル デザイナーでは、元の値とキーの特定の名前付けスキームを実装します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>追加、 <see cref="E:System.Web.UI.Page.LoadComplete" /> イベント ハンドラーを <see cref="T:System.Web.UI.Page" /> コントロールが含まれていますが、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって追加されたイベント ハンドラー、 <xref:System.Web.UI.WebControls.SqlDataSource> オブジェクトの更新プログラム、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> と <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> 値。 値が更新された場合、 <xref:System.Web.UI.IDataSource.DataSourceChanged> イベントが発生原因で、コントロールにバインドされている、 <xref:System.Web.UI.WebControls.SqlDataSource> を再バインドするコントロール。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderName">
      <MemberSignature Language="C#" Value="public virtual string ProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.ProviderName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Web.UI.Design.WebControls.DataProviderNameConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または .NET Framework データ プロバイダーの名前を設定、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールでは、使用して、基になるデータ ソースに接続します。</summary>
        <value>データ プロバイダーの名前を <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> ; を使用してそれ以外の場合、プロバイダーが設定されていない場合、Microsoft SQL Server 用 ADO.NET プロバイダーです。 既定値は、Microsoft SQL Server の ADO.NET プロバイダーです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 .NET Framework には、次のデータ プロバイダーが含まれています。  
  
-   <xref:System.Data.SqlClient?displayProperty=fullName> プロバイダーは、.NET Framework Data Provider for SQL Server の既定値です。  
  
-   <xref:System.Data.OleDb?displayProperty=fullName> プロバイダーは、.NET Framework Data Provider for OLE DB です。  
  
-   <xref:System.Data.Odbc?displayProperty=fullName> プロバイダーは、.NET Framework Data Provider for ODBC です。  
  
-   <xref:System.Data.OracleClient?displayProperty=fullName> プロバイダーは、.NET Framework Data Provider for Oracle です。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティがなど、アンマネージの ADO.NET プロバイダーの名前に設定しない `MSDAORA`します。 詳細については、「[Selecting Data using the SqlDataSource Control](http://msdn.microsoft.com/ja-jp/44623286-ff5a-4148-8a3c-85c56ed545eb)」を参照してください。  
  
 変更した場合、 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティには、 <xref:System.Web.UI.IDataSource.DataSourceChanged> イベントが発生原因で、コントロールにバインドされている、 <xref:System.Web.UI.WebControls.SqlDataSource> を再バインドします。  
  
 使用可能なプロバイダーの一覧を指定する、 `DbProviderFactories` のサブセクション、 `system.data` Machine.config ファイルのセクションです。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初の例では、既定値を使用して SQL Server データベースに .NET Framework データ プロバイダー用の SQL Server に接続する方法、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロール、 <xref:System.Data.SqlClient?displayProperty=fullName>です。 2 番目のコード例に示します for ODBC、.NET Framework データ プロバイダーを使用して、ODBC データベースに接続する方法、 <xref:System.Data.Odbc?displayProperty=fullName>です。  
  
 次のコード例の既定のデータ プロバイダーを使用して SQL Server データベースに接続する方法を示しています、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロール、 <xref:System.Data.SqlClient?displayProperty=fullName>です。 ときに、 <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティが明示的に設定されていないと、既定のプロバイダーが使用されます。<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティは、プロバイダーに固有です。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_1sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/CS/sql1cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_1sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1sql/VB/sql1vb.aspx#1)]  
  
 前のコード例と同じは機能的には、次のコード例に示します for ODBC、.NET Framework データ プロバイダーを使用して、ODBC データベースに接続する方法、 <xref:System.Data.Odbc?displayProperty=fullName>です。<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティが ODBC データベースへの接続に使用する ODBC データ ソース名 \(DSN\) の名前に設定します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_1odbc\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1odbc/CS/odbc1cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_1odbc\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_1odbc/VB/odbc1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConnectionString" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.SaveViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のビューステートの保存、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールです。</summary>
        <returns>保存された状態を格納しているオブジェクト、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" />です。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select(class System.Web.UI.DataSourceSelectArguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="System.Web.UI.DataSourceSelectArguments" />
      </Parameters>
      <Docs>
        <param name="arguments">A <see cref="T:System.Web.UI.DataSourceSelectArguments" /> 基本的なデータの取得を超えたデータ操作を要求するために使用します。</param>
        <summary>使用して、基になるデータベースからデータを取得、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> 内にある SQL 文字列とパラメーター、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" /> コレクションです。</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerable" /> データ行のリスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドが中に自動的に呼び出されます、 <xref:System.Web.UI.Control.PreRender> ページ ライフ サイクルの段階です。 アタッチされているデータ バインド コントロールによって呼び出される、 <xref:System.Web.UI.WebControls.SqlDataSource> を通じて制御、 <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> プロパティです。  
  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> メソッドが返される、 <xref:System.Data.DataView> オブジェクトの場合、 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティに設定されて、 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet> 値。<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> メソッドが返される、 <xref:System.Data.IDataReader> オブジェクトの場合、 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> プロパティに設定されて、 <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataReader> 値。 閉じる、 <xref:System.Data.IDataReader> オブジェクトのデータの読み取りが終了するとします。  
  
 前に、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作を実行する、 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> イベントです。 パラメーターの値を確認し、前に処理を実行する、このイベントを処理して、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作します。  
  
 後に、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作が完了すると、 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.SqlDataSource.Selected> イベントです。 戻り値とエラー コードを分析し、後続の処理を実行する、このイベントを処理することができます。  
  
 場合、 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> にプロパティが設定されている <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet?displayProperty=fullName> キャッシュが有効になっていると、 <xref:System.Web.UI.WebControls.SqlDataSource> オブジェクトからデータを取得し、間にキャッシュにデータを保存、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作します。 キャッシュは作成と破棄、または更新の組み合わせで指定されているキャッシュの動作に基づいて、 <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> と <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> プロパティです。  
  
> [!IMPORTANT]
>  Microsoft Windows 認証では、クライアントの偽装を使用しているときに、最初のユーザー データにアクセスするときに、データがキャッシュされます。 別のユーザーは、同じデータを要求している場合は、データがキャッシュから取得されます。 データは、データベースに別の呼び出しは、データへのユーザーのアクセスを確認することでは取得されません。 予定の場合、データにアクセスするには、複数のユーザー、データベースのセキュリティ構成によって検証されるデータの取得されるたび、キャッシュを使用しません。  
  
 場合、 <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> にプロパティが設定されている <xref:System.Web.UI.WebControls.SqlDataSourceMode.DataSet?displayProperty=fullName> と <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> プロパティが指定されている、指定されたいずれかと、フィルター式が評価される <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> プロパティとその結果のフィルターの適用中にデータの一覧に、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> 操作します。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドからデリゲートを <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> のメソッド、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。 データ取得操作を実行する、 <xref:System.Web.UI.WebControls.SqlDataSourceView> ビルド、 <xref:System.Data.Common.DbCommand> オブジェクトを使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> テキストと、関連付けられたすべて <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> 値、し、実行、 <xref:System.Data.Common.DbCommand> 基になるデータベースに対して。  
  
> [!IMPORTANT]
>  値は、潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに挿入されます。 使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
   
  
## 例  
 次の例は、プログラムで呼び出す方法を示して、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドのクエリの結果に基づいて値を設定します。 次の例では、Web コントロールの宣言型コードを示します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource.Select\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/CS/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/VB/Default.aspx#1)]  
  
 次の例では、プログラムで呼び出す方法、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッドです。<xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、整数を返します。 テキストを設定する整数の値が使用される、 <xref:System.Web.UI.WebControls.Label> コントロールを表示するかどうかを判断する、 <xref:System.Web.UI.WebControls.HyperLink> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource.Select\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource.Select/VB/Default.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> オブジェクトは、基になるデータ ソースとの接続を確立できません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public string SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または SQL 文字列の設定、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールを使用して基になるデータベースからデータを取得します。</summary>
        <value>SQL 文字列またはストアド プロシージャの名前を <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> を使用してデータを取得します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティは、SQL クエリまたはストアド プロシージャの名前を表しで使用される、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> SQL Server データベースからデータを取得します。 Select コマンドのアスタリスク \(\*\) を使用して、すべての列を選択して、更新プログラムを実行するか、削除の各操作に自動コード生成を使用する場合、以下のことを確認列にはスペースが含まれていない、名前にします。  
  
 データベース製品ごとに使用する SQL が異なるため、SQL 文字列の構文は、現在使用している ADO.NET プロバイダーによって決まります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティから識別できます。 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーは、 <xref:System.Data.SqlClient?displayProperty=fullName>, の既定のプロバイダーは、 <xref:System.Web.UI.WebControls.SqlDataSource> クラス、パラメーターのプレース ホルダーは `'@parameterName'`です。 ただし、プロバイダーに設定されている場合、 <xref:System.Data.Odbc?displayProperty=fullName> または <xref:System.Data.OleDb?displayProperty=fullName>, 、パラメーターのプレース ホルダーは `'?'`です。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [Using Parameters with the SqlDataSource Control](http://msdn.microsoft.com/ja-jp/403ff44a-dd0b-484d-968e-dcd1dcd4c295)します。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティからデータ ソースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
> [!IMPORTANT]
>  セキュリティのために、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティは格納されませんがビュー ステート。 クライアント上のビュー ステートの内容をデコードできるため、データベース構造に関する機密情報を格納すると、ビューに状態結果、情報漏えいの脆弱性します。  
  
> [!IMPORTANT]
>  値は、潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに挿入されます。 使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を設定する方法を示しています、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> を ODBC 準拠のデータベースからデータを取得し、\[表示の基本的な SQL クエリ テキスト、 <xref:System.Web.UI.WebControls.GridView> コントロールです。 2 番目のコード例を設定する方法を示しています、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> ストアド プロシージャの名前にテキストと <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> を Microsoft SQL Server データベースからデータを取得し、\[表示値、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。  
  
 どちらの例では、明示的に呼び出す必要はありません、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッド、データ ソースに関連付けられているデータ バインド コントロールを制御できるため、 <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> プロパティが自動的に呼び出さ、 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> メソッド中に、 <xref:System.Web.UI.Control.PreRender> フェーズ。  
  
 次のコード例では、設定、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> 基本的な SQL クエリを ODBC 準拠のデータベースからデータを取得し、\[表示するテキスト、 <xref:System.Web.UI.WebControls.GridView> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_4odbc\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_4odbc/CS/odbc4cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_4odbc\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_4odbc/VB/odbc4vb.aspx#1)]  
  
 次のコード例を設定する方法を示しています、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> ストアド プロシージャの名前にテキストと <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> を SQL Server データベースからデータを取得し、\[表示値、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティからデータ ソースには、ストアド プロシージャがサポートされている場合、SQL クエリまたはストアド プロシージャの名前を指定できます。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_14sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_14sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      </Docs>
    </Member>
    <Member MemberName="SelectCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうかのテキスト、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> プロパティは、SQL クエリまたはストアド プロシージャの名前。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値のいずれか。 既定値は、 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> プロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
   
  
## 例  
 次のコード例を設定する方法を示しています、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> ストアド プロシージャの名前をテキストと <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> プロパティを <xref:System.Web.UI.WebControls.SqlDataSourceCommandType.StoredProcedure> 値は、Microsoft SQL Server データベースからデータを取得して表示するために、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_14sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/CS/sql14cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_14sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_14sql/VB/sql14vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Selected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ取得操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.SqlDataSource.Selected> データ取得操作が完了した後の値を確認するイベントを出力パラメーターです。 出力パラメーターは、 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Selecting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データの取得操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> 、パラメーターの値を検証するか、前にパラメーター値を変更する、アプリケーションに固有である追加の初期化処理を実行するイベント、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、select の操作を実行します。 Select の引数は、 <xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs> イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用されるパラメーターを含むパラメーターのコレクションを取得、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> プロパティから、 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> オブジェクトに関連付けられている、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> によって使用されるパラメーターを格納している、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティには、パラメーター化された SQL クエリが含まれています。、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> コレクションには、いずれかが含まれています <xref:System.Web.UI.WebControls.Parameter> SQL 文字列のパラメーターのプレース ホルダーに対応するオブジェクト。  
  
 ADO.NET プロバイダーでは、パラメーターの順序によって、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> コレクションが重要であります。<xref:System.Data.OleDb?displayProperty=fullName> と <xref:System.Data.Odbc?displayProperty=fullName> プロバイダーがパラメーター化された SQL クエリで使用されるパラメーターの順序に従ってコレクションのパラメーターを関連付けます。<xref:System.Data.SqlClient?displayProperty=fullName> は既定の ADO.NET プロバイダーであり、プロバイダーの <xref:System.Web.UI.WebControls.SqlDataSource> コントロールに、SQL クエリ内のプレース ホルダーのエイリアスを持つパラメーターの名前を照合することによって、コレクションのパラメーターを関連付けます。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [Using Parameters with the SqlDataSource Control](http://msdn.microsoft.com/ja-jp/403ff44a-dd0b-484d-968e-dcd1dcd4c295)します。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> プロパティの取得、 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> プロパティに格納されている、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
> [!IMPORTANT]
>  値は、潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに挿入されます。 使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.Selecting> クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
   
  
## 例  
 次のコード例を設定して、Microsoft SQL Server の Northwind データベースからデータを取得する方法を示しています、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> SQL クエリのプロパティです。 SQL クエリがパラメーター化でプレース ホルダーを入れて、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> プロパティに一致すると、 <xref:System.Web.UI.WebControls.ControlParameter> オブジェクトに追加されている、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> コレクションです。<xref:System.Web.UI.WebControls.DropDownList> コントロール、 <xref:System.Web.UI.WebControls.ControlParameter> にバインド、動作にどのようなフィルターが表示されるよう、 <xref:System.Web.UI.WebControls.ListBox> コントロールです。  
  
 使用できるパラメーターの他の種類については、次を参照してください。、 <xref:System.Web.UI.WebControls.Parameter> クラスの概要です。  
  
> [!NOTE]
>  使用、WHERE 句ではパラメーターが使用されるため、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> コード例では、使用に相当する機能、 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> と <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> プロパティです。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_2sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/CS/sql2cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_2sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_2sql/VB/sql2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.SelectCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストアド プロシージャを使用してデータの取得が実行されるときに取得したデータの並べ替えに使用されるストアド プロシージャのパラメーターの名前を設定します。</summary>
        <value>ストアド プロシージャを使用してデータの取得が実行されるときに取得したデータの並べ替えに使用するストアド プロシージャ パラメーターの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> プロパティの評価に含まれる SQL コマンドがあるだけで、 <xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> プロパティは、ストアド プロシージャの名前。 この場合は場合、 <xref:System.Web.UI.WebControls.SqlDataSource.SortParameterName%2A> プロパティが設定されて、ストアド プロシージャの結果の並べ替えに使用されるパラメーターの名前が含まれています。  
  
 場合、 <xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A> プロパティが設定されており、前に付加、 <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)" />
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定をデータベースと Microsoft SQL Server のキャッシュの依存関係に使用するテーブルを示すセミコロンで区切られた文字列。</summary>
        <value>SQL Server のキャッシュの依存関係を使用するテーブルのどのデータベースを示す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールに基づくオプションの有効期限ポリシーをサポートしている、 <xref:System.Web.Caching.SqlCacheDependency> \(データベース サーバーのサービスを構成する必要があります\)、データ キャッシュのオブジェクト。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> データベースと同じ形式で使用されるに従ってテーブルを識別する文字列、 `@ Page` ディレクティブ、ここで、文字列の最初の部分は、Microsoft SQL Server データベースへの接続文字列とそれに続くコロン区切り記号、および最後に、データベース テーブルの名前 \(たとえば、 `"connectionstring1:table1"`\)。 場合、 <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> プロパティが 1 つ以上のテーブルに依存、接続文字列とテーブル名のペアをセミコロンで区切られます \(たとえば、 `"connectionstring1:table1";connectionstring2:table2"`\)。  
  
> [!IMPORTANT]
>  Microsoft Windows 認証では、クライアントの偽装を使用しているときに、最初のユーザー データにアクセスするときに、データがキャッシュされます。 別のユーザーは、同じデータを要求している場合は、データがキャッシュから取得されます。 データは、データベースに別の呼び出しは、データへのユーザーのアクセスを確認することでは取得されません。 いて、データにアクセスする 1 つ以上のユーザーが想定する場合は、データベースのセキュリティ構成によって検証されるデータが取得されるたび、キャッシュを使用しません。  
  
   
  
## 例  
 次のコード例は、SQL Server のキャッシュ依存関係を作成し、設定する方法を示します、 <xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。 この例では、データベースは 120 秒ごとにポーリングされます。 Northwind traders 社の従業員のデータ テーブルの中に変更する場合に、によってキャッシュされているすべてのデータ、 <xref:System.Web.UI.WebControls.SqlDataSource> して表示して、制御、 <xref:System.Web.UI.WebControls.GridView> によってコントロールが更新される、 <xref:System.Web.UI.WebControls.SqlDataSource> 次回データベースがポーリングを制御します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_23sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_23sql/CS/sql23cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_23sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_23sql/VB/sql23vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.TrackViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>トラックを表示する状態の変更、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 制御に変更を保存できるように、 <see cref="T:System.Web.UI.StateBag" /> コントロールのオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.TrackViewState%2A> メソッドをオーバーライドするコントロールのビュー ステートの一部としてコントロールに対する変更の追跡と保存を開始する開始点をマークします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使って更新操作を実行、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> 内にある SQL 文字列とパラメーター、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" /> コレクションです。</summary>
        <returns>基になるデータベースで更新された行の数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドを呼び出すときに自動的に、 <xref:System.Web.UI.WebControls.GridView>, 、<xref:System.Web.UI.WebControls.DetailsView>, 、および <xref:System.Web.UI.WebControls.FormView> ポストバック時のデータが変更されている場合を制御します。 他のコントロールで変更されたデータを <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 中にポストバック時に、メソッドを明示的に呼び出すことができる、 <xref:System.Windows.Forms.Form.Load> イベントです。  
  
 前に、 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 操作を実行する、 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.SqlDataSource.Updating> イベントです。 パラメーターの値を確認し、前に処理を実行する、このイベントを処理して、 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 操作します。  
  
 後に、 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> 操作が完了すると、 <xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.SqlDataSource.Updated> イベントです。 戻り値とエラー コードを分析し、後続の処理を実行する、このイベントを処理することができます。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドからデリゲートを <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> のメソッド、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。 更新操作を実行する、 <xref:System.Web.UI.WebControls.SqlDataSourceView> ビルド、 <xref:System.Data.Common.DbCommand> オブジェクトを使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> テキストと、関連付けられたすべて <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> プロパティし、実行、 <xref:System.Data.Common.DbCommand> 基になるデータベースに対してオブジェクトです。  
  
> [!IMPORTANT]
>  値は、潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに挿入されます。 使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.Updating> クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.SqlDataSource> 内のデータを表示するコントロール、 <xref:System.Web.UI.WebControls.DropDownList> 制御および更新のデータと、 **送信** \] ボタンをクリックします。 2 番目のコード例では、Microsoft SQL Server データベースから取得されるデータを表示する方法を示します、 <xref:System.Web.UI.WebControls.DropDownList> を制御しを使用してレコードを更新、 <xref:System.Web.UI.WebControls.TextBox> コントロールです。  
  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.SqlDataSource> 内のデータを表示するコントロール、 <xref:System.Web.UI.WebControls.DropDownList> 制御および更新のデータと、 **送信** \] ボタンをクリックします。<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティはパラメーター化された SQL ステートメントと 2 つ <xref:System.Web.UI.WebControls.ControlParameter> へパラメーターの追加、 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクションです。 ときに、 **送信** \] ボタンをクリックすると、 <xref:System.Web.UI.WebControls.Button.OnClick%2A> を呼び出すイベントが処理される、 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドに明示的にします。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_8sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_8sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 次のコード例では、内の SQL Server データベースから取得したデータを表示、 <xref:System.Web.UI.WebControls.DropDownList> を制御しを使用してレコードを更新、 <xref:System.Web.UI.WebControls.TextBox> コントロールです。 使用する方法の例を示しています、 <xref:System.Data.Common.DbTransaction> を使用する場合は、トランザクション コンテキストを追加するオブジェクト、 <xref:System.Web.UI.WebControls.SqlDataSource> にデータを更新します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_9sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_9sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> 基になるデータ ソースとの接続を確立することはできません。</exception>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public string UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または SQL 文字列の設定、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールを使用して基になるデータベース内のデータを更新します。</summary>
        <value>SQL の文字列を <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> を使用してデータを更新します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> SQL クエリまたはストアド プロシージャの名前を表しで使用される、 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドです。  
  
 データベース製品ごとに使用する SQL が異なるため、SQL 文字列の構文は、現在使用している ADO.NET プロバイダーによって決まります。これは、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> プロパティから識別できます。 SQL 文字列がパラメーター化されたクエリまたはコメントである場合は、パラメーターのプレースホルダーも現在使用している ADO.NET プロバイダーによって決まります。 たとえば、プロバイダーは、 <xref:System.Data.SqlClient?displayProperty=fullName>, の既定のプロバイダーは、 <xref:System.Web.UI.WebControls.SqlDataSource> クラス、パラメーターのプレース ホルダーは `'@parameterName'`です。 ただし、プロバイダーに設定されている場合、 <xref:System.Data.Odbc?displayProperty=fullName> または <xref:System.Data.OleDb?displayProperty=fullName>, 、パラメーターのプレース ホルダーは `'?'`です。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [Using Parameters with the SqlDataSource Control](http://msdn.microsoft.com/ja-jp/403ff44a-dd0b-484d-968e-dcd1dcd4c295)します。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティからデータ ソースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
> [!IMPORTANT]
>  セキュリティのために、 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティは格納されませんがビュー ステート。 クライアント上のビュー ステートの内容をデコードできるため、データベース構造に関する機密情報を格納すると、ビューに状態結果、情報漏えいの脆弱性します。  
  
> [!IMPORTANT]
>  値は、潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに挿入されます。 使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を設定する方法を示しています、 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSource> を使用して Microsoft SQL Server データベースのデータの管理と更新、 <xref:System.Web.UI.WebControls.GridView> コントロールです。 2 番目のコード例を使用して ODBC データベースのデータを更新する方法を示しています、 <xref:System.Web.UI.WebControls.GridView> コントロールです。  
  
 次のコード例では、設定、 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSource> を使用して SQL Server データベースのデータの管理と更新、 <xref:System.Web.UI.WebControls.GridView> コントロールです。<xref:System.Web.UI.WebControls.GridView> を自動的に入力、 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> からパラメーターを推論するとき、コレクション、 <xref:System.Web.UI.WebControls.BoundField> オブジェクト、および呼び出し、 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドと、 **更新** の編集可能なリンク <xref:System.Web.UI.WebControls.GridView> が選択されています。 この例には、いくつかの後処理も含まれています: レコードが更新されると、通知の電子メールが送信されます。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_7sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/CS/sql7cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_7sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7sql/VB/sql7vb.aspx#1)]  
  
 コードと同じように上記のコード例は、次のコード例を使用して ODBC データベースのデータを更新する方法を示しています、 <xref:System.Web.UI.WebControls.GridView> コントロールです。<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> For ODBC、ADO.NET プロバイダーに設定されている、 <xref:System.Data.Odbc?displayProperty=fullName>, 、および <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> プロパティが ODBC データ ソース名 \(DSN\) の名前に設定します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_7odbc\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_7odbc\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうかのテキスト、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> プロパティは、SQL ステートメントまたはストアド プロシージャの名前。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" /> 値のいずれか。 既定値は、 <see cref="F:System.Web.UI.WebControls.SqlDataSourceCommandType.Text" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommandType%2A> プロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceCommandType" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Updated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.SqlDataSource.Updated> 更新操作が完了した後の値を確認するイベントを出力パラメーターです。 出力パラメーターは、 <xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs> イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例を表示および ODBC のデータベースから取得されるデータを更新する方法を示しています、 <xref:System.Web.UI.WebControls.GridView> コントロールです。 レコードが正常に更新されると、 <xref:System.Web.UI.WebControls.SqlDataSource.Updated> する処理後の手順を実行するには、電子メールによる通知が送信されるイベント ハンドラーでイベントが処理します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_7odbc\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/CS/odbc7cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_7odbc\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_7odbc/VB/odbc7vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用されるパラメーターを含むパラメーターのコレクションを取得、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> プロパティから、 <see cref="T:System.Web.UI.WebControls.SqlDataSourceView" /> コントロールに関連付けられている、 <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> コントロールです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> によって使用されるパラメーターを格納している、 <see cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> プロパティには、パラメーター化された SQL クエリが含まれています。、 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクションには、いずれかが含まれています <xref:System.Web.UI.WebControls.Parameter> SQL 文字列のパラメーターのプレース ホルダーに対応するオブジェクト。  
  
 パラメーター名の影響を受ける、 <xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> 具体的には、名前を使用して指定のキーなどの主キーを識別する場合は、プロパティ、 `DataKeyNames` プロパティ、または削除、データ バインド コントロールのシナリオを更新し、 <xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> プロパティに設定されて、 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値と一連の `oldValues` は対応するデータのメソッドに渡されます。 各パラメーターの名前に、書式指定文字列を適用する場合は、 `oldValues` コレクションです。  
  
 \[パラメーターの順序、 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> ADO.NET プロバイダーによって、重要なコレクションもあります。<xref:System.Data.OleDb?displayProperty=fullName> と <xref:System.Data.Odbc?displayProperty=fullName> プロバイダーがパラメーター化された SQL クエリで使用されるパラメーターの順序に従ってコレクションのパラメーターを関連付けます。<xref:System.Data.SqlClient?displayProperty=fullName> は既定の ADO.NET プロバイダーであり、プロバイダーの <xref:System.Web.UI.WebControls.SqlDataSource> コントロールに、SQL クエリ内のプレース ホルダーのエイリアスを持つパラメーターの名前を照合することによって、コレクションのパラメーターを関連付けます。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [Using the SqlDataSource and AccessDataSource Controls with Parameters](http://msdn.microsoft.com/ja-jp/403ff44a-dd0b-484d-968e-dcd1dcd4c295)します。  
  
 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> プロパティの取得、 <xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> プロパティに格納されている、 <xref:System.Web.UI.WebControls.SqlDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールです。  
  
> [!IMPORTANT]
>  値は、潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに挿入されます。 使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.Filtering> クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.SqlDataSource> 内のデータを表示するコントロール、 <xref:System.Web.UI.WebControls.DropDownList> 制御および更新のデータと、 **送信** \] ボタンをクリックします。<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> パラメーター化 SQL ステートメントで、2 つのセットが <xref:System.Web.UI.WebControls.ControlParameter> へパラメーターの追加、 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> コレクションです。 ときに、 **送信** \] ボタンをクリックすると、 <xref:System.Web.UI.WebControls.Button.OnClick%2A> を呼び出すイベントが処理される、 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> メソッドに明示的にします。  
  
> [!IMPORTANT]
>  この例では、潜在的なセキュリティの脅威には、ユーザー入力を受け付けるテキスト ボックスと、値が潜在的なセキュリティ脅威もある検証を伴わないパラメーターに挿入します。 使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_8sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/CS/sql8cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_8sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_8sql/VB/sql8vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateCommand" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.SqlDataSource.Updating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.SqlDataSourceCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.SqlDataSource.Updating> 、パラメーターの値を検証するか、前にパラメーター値を変更する、アプリケーションに固有である追加の初期化処理を実行するイベント、 <xref:System.Web.UI.WebControls.SqlDataSource> コントロールは、更新操作を実行します。 基になるデータ ソースへの接続がまだ開いていないイベント ハンドラーのデリゲートが呼び出されるとします。 そのため、直接はキャンセルできません、 <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> データベース操作を呼び出すことによって、 <xref:System.Data.Common.DbCommand.Cancel%2A> メソッドを <xref:System.Data.Common.DbCommand> オブジェクトによって公開される、 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> オブジェクトです。 ただし、設定してデータベース操作を取り消すことができます、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> に `true`します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
> [!IMPORTANT]
>  値は、潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに挿入されます。 使用して、 <xref:System.Web.UI.WebControls.SqlDataSource.Updating> クエリを実行する前にパラメーター値を検証するイベントです。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
   
  
## 例  
 次のコード例では、Microsoft SQL Server データベースから取得されるデータを表示する方法を示します、 <xref:System.Web.UI.WebControls.DropDownList> を制御しを使用してレコードを更新、 <xref:System.Web.UI.WebControls.TextBox> コントロールです。 使用する方法の例を示しています、 <xref:System.Data.Common.DbTransaction> を使用する場合は、トランザクション コンテキストを追加するオブジェクト、 <xref:System.Web.UI.WebControls.SqlDataSource> にデータを更新します。  
  
 [!code-csharp[System.Web.UI.WebControls.SqlDataSource\_9sql\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/CS/sql9cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SqlDataSource\_9sql\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_9sql/VB/sql9vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.SqlDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.SqlDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <altmember cref="T:System.Web.UI.WebControls.SqlDataSourceView" />
        <altmember cref="T:System.Web.UI.WebControls.AccessDataSource" />
        <altmember cref="T:System.Web.UI.DataSourceControl" />
      </Docs>
    </MemberGroup>
  </Members>
</Type>