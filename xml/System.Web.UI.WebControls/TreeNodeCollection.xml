<Type Name="TreeNodeCollection" FullName="System.Web.UI.WebControls.TreeNodeCollection">
  <TypeSignature Language="C#" Value="public sealed class TreeNodeCollection : System.Collections.ICollection, System.Web.UI.IStateManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TreeNodeCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Web.UI.IStateManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.TreeNodeCollection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IStateManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <see cref="T:System.Web.UI.WebControls.TreeView" /> コントロールに含まれる <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクトのコレクションを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.TreeNodeCollection> クラスは、格納し、管理のコレクションに使用 <xref:System.Web.UI.WebControls.TreeNode> 内のオブジェクト、 <xref:System.Web.UI.WebControls.TreeView> コントロールです。<xref:System.Web.UI.WebControls.TreeView> コントロール、 <xref:System.Web.UI.WebControls.TreeNodeCollection> をそのプロパティの 2 つのクラスです。 そのルート ノードで格納、 <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> プロパティと、選択したノードで、 <xref:System.Web.UI.WebControls.TreeView.CheckedNodes%2A> プロパティです。<xref:System.Web.UI.WebControls.TreeNodeCollection> のコレクションを使用しても、 <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> \(存在する場合\)、子ノードを格納するプロパティです。  
  
 <xref:System.Web.UI.WebControls.TreeNodeCollection> クラスには、コレクション内の項目にアクセスするためにいくつかの方法がサポートしています。  
  
-   使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Item%2A> を取得するためのインデクサー、 <xref:System.Web.UI.WebControls.TreeNode> 特定の 0 から始まるインデックスで直接オブジェクトです。  
  
-   使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> コレクションを反復処理するために使用できる列挙子を作成します。  
  
-   使用 `foreach` \(c\#\) または `For Each` コレクションを反復処理する \(Visual Basic\) します。  
  
-   使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> にコレクションの内容をコピーする方法、 <xref:System.Array> オブジェクトです。  
  
 プログラムで管理できる、 <xref:System.Web.UI.WebControls.TreeNodeCollection> を追加および削除を行う <xref:System.Web.UI.WebControls.TreeNode> オブジェクトです。 コレクションにノードを追加するには、使用、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> または <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> メソッドです。 コレクションからノードを削除するには、使用、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A>, 、<xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A>, 、または <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> メソッドです。  
  
> [!NOTE]
>  ときに、 <xref:System.Web.UI.WebControls.TreeView> コントロールがデータ ソースにバインドされている、 <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> と <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> コレクションがバインドが発生するたびに自動的に設定されます。 バインドの間でのコレクションへの変更は失われます。 これらの変更を保持するには、データ ソースを更新するか、バインドするたびにコレクションを手動で再構築します。  
  
 <xref:System.Web.UI.WebControls.TreeNodeCollection> プロパティと、コレクション自体に関する情報を取得するためのメソッドが含まれています。 コレクション内のアイテム数がこの確認を使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> プロパティです。 特定のコレクションに含まれるかどうかを決定する場合は、 <xref:System.Web.UI.WebControls.TreeNode> オブジェクトを使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> メソッドです。 インデックスを取得、 <xref:System.Web.UI.WebControls.TreeNode> を使用して、コレクション内のオブジェクト、 <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> メソッドです。  
  
   
  
## 例  
 次の例では、プログラムを使用してノードを追加しからそれらを削除する方法、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。 注意して、 <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> と <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> プロパティの戻り値、 <xref:System.Web.UI.WebControls.TreeNodeCollection> オブジェクトです。  
  
 [!code-csharp[TreeNodeCollectionAdd\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-vb[TreeNodeCollectionAdd\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.TreeView" />
    <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
    <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
    <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Count" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNodeCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> クラスの既定値を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しいインスタンスを初期化するためにこのコンス トラクターを使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection> クラスの既定値を使用します。 このコンス トラクターは、場合によく使用ルート ノードのコレクションを作成する親ノード \(または所有者\) が必要です。  
  
> [!NOTE]
>  受け取るオーバー ロードされたコンス トラクターを使用する必要があります非ルート ノードのコレクションを作成するときに、 `owner` を親ノードを指定するこのコンス トラクターではなく、パラメーター。  
  
 このコンス トラクターは、主にコントロールの開発者が使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TreeNodeCollection (System.Web.UI.WebControls.TreeNode owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.TreeNode owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.#ctor(System.Web.UI.WebControls.TreeNode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="owner">
          <see cref="T:System.Web.UI.WebControls.TreeNode" /> をコレクションの親ノードを表すオブジェクト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> クラスの指定した親ノード \(または所有者\) を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しいインスタンスを初期化するためにこのコンス トラクターを使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection> クラスの指定した親ノード \(または所有者\) を使用します。 このコンス トラクターは万人非ルート ノードのコレクションを作成するときに親ノードを指定する必要があります。  
  
> [!NOTE]
>  ルート ノードのコレクションを作成する場合は、ルート ノードに親ノードがあるないために、既定のコンス トラクターを使用して検討してください。  
  
 このコンス トラクターは、主にコントロールの開発者が使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Web.UI.WebControls.TreeNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Web.UI.WebControls.TreeNode child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="child">
          <see cref="T:System.Web.UI.WebControls.TreeNode" /> 追加するオブジェクト。</param>
        <summary>指定した追加 <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクトの末尾に、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> メソッドを指定した追加 <xref:System.Web.UI.WebControls.TreeNode> オブジェクトの末尾に、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.TreeNodeCollection> により重複するだけでなく null 参照 \(Visual Basic の場合\) の場合は Nothing を追加する <xref:System.Web.UI.WebControls.TreeNode> オブジェクトです。  
  
 代わりに、挿入することができます、 <xref:System.Web.UI.WebControls.TreeNode> 内のオブジェクト、 <xref:System.Web.UI.WebControls.TreeNodeCollection> 特定のインデックスを使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> メソッドです。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> プログラムでノードを追加する方法、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。 注意して、 <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> と <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> 各プロパティを返す、 <xref:System.Web.UI.WebControls.TreeNodeCollection> オブジェクトです。  
  
 [!code-csharp[TreeNodeCollectionAdd\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-vb[TreeNodeCollectionAdd\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Collections.ArrayList.Add(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AddAt">
      <MemberSignature Language="C#" Value="public void AddAt (int index, System.Web.UI.WebControls.TreeNode child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAt(int32 index, class System.Web.UI.WebControls.TreeNode child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="child" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="index">挿入する位置を示す 0 から始まるインデックス位置、 <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクトです。</param>
        <param name="child">追加する <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクト。</param>
        <summary>指定した挿入 <see cref="T:System.Web.UI.WebControls.TreeNode" /> 内のオブジェクト、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> 指定したインデックス位置にあるオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> メソッドを指定された挿入 <xref:System.Web.UI.WebControls.TreeNode> 内のオブジェクト、 <xref:System.Web.UI.WebControls.TreeNodeCollection> 指定した 0 から始まるインデックス位置。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.TreeNodeCollection> により重複するだけでなく null 参照 \(Visual Basic の場合\) の場合は Nothing を挿入する <xref:System.Web.UI.WebControls.TreeNode> オブジェクトです。  
  
 代わりに、追加することができます、 <xref:System.Web.UI.WebControls.TreeNode> オブジェクトの末尾に、 <xref:System.Web.UI.WebControls.TreeNodeCollection> を使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Add%2A> メソッドです。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.AddAt%2A> プログラムでノードを追加する方法、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。 注意して、 <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> と <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> 各プロパティを返す、 <xref:System.Web.UI.WebControls.TreeNodeCollection> オブジェクトです。  
  
 [!code-csharp[TreeNodeCollectionAdd\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-vb[TreeNodeCollectionAdd\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="child" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>空にして、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> を削除する各 <xref:System.Web.UI.WebControls.TreeNode> オブジェクトから、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。  
  
> [!NOTE]
>  コレクションから個々 のノードを削除するには、使用、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> または <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> メソッドです。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> をプログラムで空のメソッド、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。 注意して、 <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> と <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> プロパティの戻り値、 <xref:System.Web.UI.WebControls.TreeNodeCollection> オブジェクトです。  
  
 [!code-csharp[TreeNodeCollectionAdd\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-vb[TreeNodeCollectionAdd\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Web.UI.WebControls.TreeNode c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Web.UI.WebControls.TreeNode c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="c">検索する <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクト。</param>
        <summary>決定するかどうか、指定した <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクトがコレクション内にします。</summary>
        <returns>
          <see langword="true" /> 場合は、指定した <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクト コレクションに含まれていない場合は、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> メソッドを呼び出せば確認するかどうか、 <xref:System.Web.UI.WebControls.TreeNode> にオブジェクトが含まれている、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。 このメソッドは通常の存在をテストする使用、 <xref:System.Web.UI.WebControls.TreeNode> 追加またはコレクションから、ノードを削除するなどのタスクを実行する前にオブジェクトです。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Contains%2A> 、選択したノードがかどうかを決定する方法、 <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> コレクションです。 注意して、 <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> プロパティを返します。、 <xref:System.Web.UI.WebControls.TreeNodeCollection> オブジェクトです。  
  
 [!code-csharp[TreeNodeCollectionIndexOf\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/CS/treenodecollectionindexofcs.aspx#1)]
 [!code-vb[TreeNodeCollectionIndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/VB/treenodecollectionindexofvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Web.UI.WebControls.TreeNode[] nodeArray, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Web.UI.WebControls.TreeNode[] nodeArray, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeArray" Type="System.Web.UI.WebControls.TreeNode[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="nodeArray">0 から始まる配列 <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクトからコピーされた項目を受信する、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />です。</param>
        <param name="index">コピーされた内容の受信を開始する位置を示す対象となる配列内の位置。</param>
        <summary>すべての項目をコピー、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> オブジェクトの場合は、互換性のある 1 次元配列を <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクトを対象となる配列の指定したインデックスから始まります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 [CopyTo メソッド \(TreeNode\<xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> の内容をコピーする方法、 [CopyTo メソッド \(TreeNode\<xref:System.Web.UI.WebControls.TreeNodeCollection> に指定した 0 から始まる [CopyTo メソッド \(TreeNode\<xref:System.Array?displayProperty=fullName> オブジェクトです。 項目をコピーするには、対象となる配列の指定したインデックス位置から開始されます。[CopyTo メソッド \(TreeNode\<xref:System.Array?displayProperty=fullName> オブジェクトの項目にアクセスする配列の構文を使用し、 [CopyTo メソッド \(TreeNode\<xref:System.Web.UI.WebControls.TreeNodeCollection>です。  
  
 代わりに、使用することも、 [CopyTo メソッド \(TreeNode\<xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> コレクション内の項目にアクセスするために使用できる列挙子を作成します。  
  
   
  
## 例  
 次の例では、使用して、 [CopyTo メソッド \(TreeNode\<xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> の値をコピーする方法、 [CopyTo メソッド \(TreeNode\<xref:System.Web.UI.WebControls.TreeNodeCollection> 配列。 注意して、 [CopyTo メソッド \(TreeNode\<xref:System.Web.UI.WebControls.TreeView.Nodes%2A> プロパティを返します。、 [CopyTo メソッド \(TreeNode\<xref:System.Web.UI.WebControls.TreeNodeCollection> オブジェクトです。  
  
 [!code-csharp[TreeNodeCollectionCopyTo\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/CS/treenodecollectioncopytocs.aspx#1)]
 [!code-vb[TreeNodeCollectionCopyTo\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/VB/treenodecollectioncopytovb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.CopyTo(System.Array)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内の項目の数を取得、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> オブジェクトです。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> 内の項目数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> 内の項目の数を決定するプロパティ、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。 コレクションの上限を確認するのには、このプロパティは、コレクションを反復処理するときに使用して一般的です。<xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> プロパティは、コレクションが空かどうかを確認します。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Count%2A> 内の項目の数を決定するプロパティ、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。 これは、後をたどってを実行、 <xref:System.Web.UI.WebControls.TreeView> 各ノードのテキストを表示するコントロール。  
  
 [!code-csharp[TreeNodeCollectionCount\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCount/CS/treenodecollectioncountcs.aspx#1)]
 [!code-vb[TreeNodeCollectionCount\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCount/VB/treenodecollectioncountvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="P:System.Collections.ArrayList.Count" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.Nodes" />
        <altmember cref="P:System.Web.UI.WebControls.TreeView.CheckedNodes" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNode.ChildNodes" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>反復処理するために使用できる列挙子を返します、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> オブジェクトです。</summary>
        <returns>反復処理するために使用できる列挙子、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> を簡単に反復処理できる経由各項目を取得する列挙子を作成する方法、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。 列挙子に示す現在の項目を取得する、 <xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName> プロパティです。 使用して、 <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName> メソッドを次の項目に移動します。 列挙子をコレクションの先頭に移動する必要がある場合、 <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName> メソッドです。  
  
> [!NOTE]
>  列挙子を作成するか、使用して、 <xref:System.Collections.IEnumerator.Reset%2A?displayProperty=fullName> メソッドを呼び出す必要があります、 <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName> メソッドです。 によって表される項目のそれ以外の場合、 <xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName> プロパティが定義されています。  
  
 代わりに、使用することも、 <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> を作成する方法、 <xref:System.Array?displayProperty=fullName> コレクション内の項目にアクセスするために使用できるオブジェクト。 別の方法としては、使用する、 `foreach` または `For Each` コレクションを反復処理する構造体。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> のルート ノードを格納する列挙子を作成する方法、 <xref:System.Web.UI.WebControls.TreeView> コントロールです。  
  
 [!code-csharp[TreeNodeCollectionGetEnumerator\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionGetEnumerator/CS/treenodecollectiongetenumeratorcs.aspx#1)]
 [!code-vb[TreeNodeCollectionGetEnumerator\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionGetEnumerator/VB/treenodecollectiongetenumeratorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.GetEnumerator" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Web.UI.WebControls.TreeNode value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Web.UI.WebControls.TreeNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.IndexOf(System.Web.UI.WebControls.TreeNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Web.UI.WebControls.TreeNode" /> 検索するオブジェクト。</param>
        <summary>指定したインデックスを決定 <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクトです。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス <paramref name="value" /> 内で、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />, が見つからない場合は、それ以外の場合、\-1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> メソッドの指定した 0 から始まるインデックスを確認する <xref:System.Web.UI.WebControls.TreeNode> 内のオブジェクト、 <xref:System.Web.UI.WebControls.TreeNodeCollection> オブジェクトです。 コレクション内のノードは、このメソッドは\-1 を返します。  
  
> [!NOTE]
>  指定したノードには、コレクションに複数回が表示されたら、最初に見つかった位置のインデックスが返されます。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.IndexOf%2A> ルート ノードのインデックスを決定する方法です。 注意して、 <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> プロパティを返します。、 <xref:System.Web.UI.WebControls.TreeNodeCollection> オブジェクトです。  
  
 [!code-csharp[TreeNodeCollectionIndexOf\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/CS/treenodecollectionindexofcs.aspx#1)]
 [!code-vb[TreeNodeCollectionIndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionIndexOf/VB/treenodecollectionindexofvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Collections.ArrayList.IndexOf(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> へのアクセスが同期されている \(スレッド セーフである\) かどうかを示す値を取得します。</summary>
        <value>
          <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> プロパティを示すために使用されるへのアクセスをするかどうか、 <xref:System.Web.UI.WebControls.TreeNodeCollection> が同期されている \(スレッド セーフ\)。 このプロパティから派生した、 <xref:System.Collections.ICollection?displayProperty=fullName> クラスし、常にオーバーライド `false`します。  
  
 詳細については、 <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> プロパティを参照してください、 <xref:System.Collections.ICollection.IsSynchronized%2A?displayProperty=fullName> のプロパティ、 <xref:System.Collections.ICollection?displayProperty=fullName> インターフェイスです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TreeNode this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TreeNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">取得する <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクトの 0 から始まるインデックス番号。</param>
        <summary>取得、 <see cref="T:System.Web.UI.WebControls.TreeNode" /> で指定したインデックス位置にオブジェクト、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> オブジェクトです。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.TreeNode" /> で指定したインデックス位置にオブジェクト、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このインデクサーへのアクセスを使用して、 <xref:System.Web.UI.WebControls.TreeNode> オブジェクトから、 <xref:System.Web.UI.WebControls.TreeNodeCollection> 配列表記を使用して指定したインデックス位置。 インデクサーを使用すると、変更または置き換える、 <xref:System.Web.UI.WebControls.TreeNode> 直接コレクション内のオブジェクト。 コレクションは、0 から始まる。  
  
   
  
## 例  
 次の例では、内の要素にアクセスするインデクサーを使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。 注意して、 <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> と <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> プロパティの戻り値、 <xref:System.Web.UI.WebControls.TreeNodeCollection> オブジェクトです。  
  
 [!code-csharp[TreeNodeCollectionAdd\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-vb[TreeNodeCollectionAdd\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.CopyTo(System.Web.UI.WebControls.TreeNode[],System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Web.UI.WebControls.TreeNode value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Web.UI.WebControls.TreeNode value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.WebControls.TreeNode" />
      </Parameters>
      <Docs>
        <param name="value">削除する <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクト。</param>
        <summary>指定された削除 <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクトから、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> コレクションから指定したノードを削除する方法です。 そのノードに続くすべての項目上に移動、空いた位置を埋めるためにします。 移動した項目のインデックスも更新します。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.TreeNodeCollection> ことができます \(Visual Basic では Nothing\) を null 参照を含めるだけでなく複製 <xref:System.Web.UI.WebControls.TreeNode> オブジェクトです。  
  
 使用して特定のインデックス位置にあるノードを削除する別の方法として、 <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> メソッドです。 使用して、コレクション内のすべてのノードを削除することも、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> メソッドです。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> プログラムからノードを削除する方法、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。 注意して、 <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> と <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> 各プロパティを返す、 <xref:System.Web.UI.WebControls.TreeNodeCollection> オブジェクトです。  
  
 [!code-csharp[TreeNodeCollectionAdd\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-vb[TreeNodeCollectionAdd\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Collections.ArrayList.Remove(System.Object)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">削除するノードの 0 から始まるインデックス位置。</param>
        <summary>削除、 <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクトから指定したインデックス位置にある、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> を削除するメソッド、 <xref:System.Web.UI.WebControls.TreeNode> オブジェクトから指定の 0 から始まるインデックス位置にある、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。 そのノードに続くすべての項目上に移動、空いた位置を埋めるためにします。 移動した項目のインデックスも更新します。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.TreeNodeCollection> ことができます \(Visual Basic では Nothing\) を null 参照を含めるだけでなく複製 <xref:System.Web.UI.WebControls.TreeNode> オブジェクトです。  
  
 特定を削除する代わりに、 <xref:System.Web.UI.WebControls.TreeNode> オブジェクトを使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Remove%2A> メソッドです。 使用して、コレクション内のすべてのノードを削除することも、 <xref:System.Web.UI.WebControls.TreeNodeCollection.Clear%2A> メソッドです。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.RemoveAt%2A> プログラムからノードを削除する方法、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。 注意して、 <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> と <xref:System.Web.UI.WebControls.TreeNode.ChildNodes%2A> 各プロパティを返す、 <xref:System.Web.UI.WebControls.TreeNodeCollection> オブジェクトです。  
  
 [!code-csharp[TreeNodeCollectionAdd\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionAdd/CS/treenodecollectionaddcs.aspx#1)]
 [!code-vb[TreeNodeCollectionAdd\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionAdd/VB/treenodecollectionaddvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Add(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.AddAt(System.Int32,System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Clear" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Contains(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.Remove(System.Web.UI.WebControls.TreeNode)" />
        <altmember cref="M:System.Collections.ArrayList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> オブジェクトへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
        <value>A <see cref="T:System.Object" /> へのアクセスを同期に使用できる、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot%2A> プロパティの同期されたバージョンを提供する、 <xref:System.Web.UI.WebControls.TreeNodeCollection> を同期 \(スレッド\) のコードで使用できます。  
  
> [!CAUTION]
>  <xref:System.Web.UI.WebControls.TreeNodeCollection.IsSynchronized%2A> このプロパティはクラスを返します。 では常に `false`, 、ことを示します、 <xref:System.Web.UI.WebControls.TreeNodeCollection> クラスでは \(いないスレッド セーフな\) は同期されません。  
  
 操作を実行するコードを同期する、 <xref:System.Web.UI.WebControls.TreeNodeCollection.SyncRoot%2A> のオブジェクト、 <xref:System.Web.UI.WebControls.TreeNodeCollection>, 、上で直接、 <xref:System.Web.UI.WebControls.TreeNodeCollection> 自体です。 これにより、他のオブジェクトから派生したコレクションを適切に操作できるようになります。 具体的には、同時に変更する可能性があるその他のスレッドと、正常な同期を維持、 <xref:System.Web.UI.WebControls.TreeNodeCollection> オブジェクトです。  
  
> [!NOTE]
>  この実装で返されるオブジェクトは、 <xref:System.Collections.ArrayList?displayProperty=fullName> オブジェクトの格納に使用される、 <xref:System.Web.UI.WebControls.TreeNode> コレクション内のオブジェクト。  
  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。 コレクションが同期されている場合でも、他のスレッドでしたコレクションを変更する、これにより、列挙子が例外をスローします。 列挙処理を確実にスレッド セーフに行うには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。  
  
 詳細については、 <xref:System.Web.UI.WebControls.DataGridColumnCollection.SyncRoot%2A> プロパティを参照してください、 <xref:System.Collections.ICollection.SyncRoot%2A?displayProperty=fullName> のプロパティ、 <xref:System.Collections.ICollection?displayProperty=fullName> インターフェイスです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="P:System.Collections.ArrayList.SyncRoot" />
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">0 から始まる <see cref="T:System.Array" /> オブジェクトからコピーされた項目を受信する、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" />です。</param>
        <param name="index">コピーされた内容の受信を開始する位置を示す対象となる配列内の位置。</param>
        <summary>すべての項目をコピー、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> を互換性のある 1 次元のオブジェクト <see cref="T:System.Array" />, 、対象となる配列の指定したインデックスから始まります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> の内容をコピーする方法、 <xref:System.Web.UI.WebControls.TreeNodeCollection> に指定した 0 から始まる <xref:System.Array?displayProperty=fullName> オブジェクトです。 項目をコピーするには、対象となる配列の指定したインデックス位置から開始されます。<xref:System.Array?displayProperty=fullName> オブジェクトの項目にアクセスする配列の構文を使用し、 <xref:System.Web.UI.WebControls.TreeNodeCollection>です。  
  
 代わりに、使用することも、 <xref:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator%2A> コレクション内の項目にアクセスするために使用できる列挙子を作成します。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.TreeNodeCollection.CopyTo%2A> の値をコピーする方法、 <xref:System.Web.UI.WebControls.TreeNodeCollection> 配列。 注意して、 <xref:System.Web.UI.WebControls.TreeView.Nodes%2A> プロパティを返します。、 <xref:System.Web.UI.WebControls.TreeNodeCollection> オブジェクトです。  
  
 [!code-csharp[TreeNodeCollectionCopyTo\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/CS/treenodecollectioncopytocs.aspx#1)]
 [!code-vb[TreeNodeCollectionCopyTo\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TreeNodeCollectionCopyTo/VB/treenodecollectioncopytovb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> 配列ではありません <see cref="T:System.Web.UI.WebControls.TreeNode" /> オブジェクトです。</exception>
        <altmember cref="T:System.Web.UI.WebControls.TreeView" />
        <altmember cref="T:System.Web.UI.WebControls.TreeNode" />
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Web.UI.WebControls.TreeNodeCollection.Item(System.Int32)" />
        <altmember cref="M:System.Collections.ArrayList.CopyTo(System.Array)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeNodeCollection.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.IsTrackingViewState">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IStateManager.IsTrackingViewState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IStateManager.IsTrackingViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#IsTrackingViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> オブジェクトがビュー ステートへ変更を保存します。</summary>
        <value>
          <see langword="true" /> コントロールがその状態を保存するマークされている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Control.ViewState" />
        <altmember cref="M:System.Web.UI.Control.LoadViewState(System.Object)" />
        <altmember cref="M:System.Web.UI.Control.SaveViewState" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.LoadViewState">
      <MemberSignature Language="C#" Value="void IStateManager.LoadViewState (object state);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.LoadViewState(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Object" /> 保存されているビュー ステートの値を格納しています。</param>
        <summary>読み込み、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> オブジェクトのビューステートを保存された以前です。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.SaveViewState">
      <MemberSignature Language="C#" Value="object IStateManager.SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Web.UI.IStateManager.SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#SaveViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ビューステートへの変更を保存、 <see cref="T:System.Object" />です。</summary>
        <returns>ビュー ステートの変化を格納している <see cref="T:System.Object" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IStateManager.TrackViewState">
      <MemberSignature Language="C#" Value="void IStateManager.TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IStateManager.TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TreeNodeCollection.System#Web#UI#IStateManager#TrackViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>指示、 <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> ビュー ステートへの変更を追跡します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サーバー コントロールでこのメソッドが呼び出された後、 <xref:System.Web.UI.Control.IsTrackingViewState%2A> が返される `true`です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.StateBag" />
        <altmember cref="T:System.Web.UI.StateItem" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.TreeNodeCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>