<Type Name="SendMailErrorEventArgs" FullName="System.Web.UI.WebControls.SendMailErrorEventArgs">
  <TypeSignature Language="C#" Value="public class SendMailErrorEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SendMailErrorEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SendMailErrorEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>データを提供、 <see langword="SendMailError" /> などのコントロールのイベント、 <see cref="T:System.Web.UI.WebControls.ChangePassword" /> コントロール、 <see cref="T:System.Web.UI.WebControls.CreateUserWizard" /> コントロール、および <see cref="T:System.Web.UI.WebControls.PasswordRecovery" /> コントロールです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> オブジェクトには電子メール メッセージを送信できない場合は、SMTP メール プロバイダーから発生するエラー メッセージが含まれています、 <xref:System.Web.UI.WebControls.ChangePassword> コントロール、または <xref:System.Web.UI.WebControls.CreateUserWizard> コントロールです。 このような場合も、 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> オブジェクトに送信される、 <xref:System.Web.UI.WebControls.SendMailErrorEventHandler>です。  
  
 作成、 <xref:System.Web.UI.WebControls.SendMailErrorEventHandler> イベントを処理するデリゲート。 例外が発生した場合でも実行を継続する Web アプリケーションをイベントを処理できます。 これは、機能は、電子メール メッセージを送信する重要ではない場合に便利です。 たとえば、ユーザーが複数のステップのウィザードを使用しているときに、例外が発生した場合、エラーをログ記録、情報メッセージをユーザーに表示され、ウィザードを完了するユーザーに有効な場合もができます。  
  
 確認、 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> プロパティを例外の実際の原因を特定します。 例外の最も一般的な理由で構成エラーが、 [smtp Element \(Network Settings\)](http://msdn.microsoft.com/ja-jp/220b0329-e384-4e0c-86b4-0945ad17efd9) のマシン構成ファイル。 ようなエラーが、通常は開発中に発見し、アプリケーションのデバッグ、メール サーバーが失敗するが予期せず、運用環境で、アプリケーション全体のような状況で失敗にするかどうかを決定する必要があります。 それ以外の場合は、イベントの処理によりアプリケーションを進みます。  
  
 設定する必要があります、 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> プロパティを `true` を通知する、例外が処理以外の場合、例外が再スローされ、元のコール スタックとエラー メッセージが含まれます。  
  
 イベント ハンドラーを作成しない場合、 <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> イベント、または元のまま残りますイベント ハンドラーを作成する場合、 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> プロパティに設定 `false`, Web アプリケーションは、電子メール メッセージを送信するときにエラーが発生した場合の実行を停止、および ASP.NET エラー メッセージが表示されます。  
  
 <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A> メソッドでは、派生クラスによって実行されていたこのではなく、イベントを処理することもできます、 <xref:System.Web.UI.WebControls.SendMailErrorEventHandler>です。 これから派生したクラスでイベントを処理するための手法をお勧め <xref:System.Web.UI.WebControls.ChangePassword> または <xref:System.Web.UI.WebControls.CreateUserWizard>です。  
  
 イベント処理の詳細については、「[Server Event Handling in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/765bfc89-33ee-4d0d-bbe6-3b172c06def9)」を参照してください。  
  
   
  
## 例  
 次のコード例を使用する ASP.NET ページを示しています、 <xref:System.Web.UI.WebControls.ChangePassword> Web コントロール、およびイベント ハンドラーが含まれています、 <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> SendMailError という名前のイベントです。 このコード例では、ASP.NET メンバーシップとフォーム認証、および、名とパスワードがわかっているユーザーが作成されたを使用する ASP.NET Web サイトが構成済みであると仮定します。 詳細については、「[How to: Implement Simple Forms Authentication](http://msdn.microsoft.com/ja-jp/9522bc8d-1a41-480a-aa11-c389a4ac2d2e)」を参照してください。  
  
 パスワードの変更が成功すると、コードで、 `SendingMail` イベント ハンドラーは、変更の確認をユーザーに電子メール メッセージを送信しようとしています。 SMTP は、このコード例を実行するために、サーバーで既に構成する必要があります。 SMTP サーバーを構成する方法については、次を参照してください。 [NIB: 方法: インストールと構成の SMTP 仮想サーバーの IIS 6.0 で](http://msdn.microsoft.com/ja-jp/ed204b58-24af-47d0-9687-60e5df5f17f8)します。 この例の目的で、必要はありません。 SMTP サーバーを構成するには電子メール メッセージを送信するエラーをテストする例が構築されます。  
  
 メール サーバーが正しく構成されていないまたはその他のエラーが発生して電子メール メッセージを送信できない場合、 `SendMailError` 関数が呼び出されます。 メッセージがユーザーに表示されます。 さらに、イベントはイベント ソース名は既に MySamplesSite が存在することを想定して Windows アプリケーション イベント ログに記録されます。 指定したイベント ソースを作成するのには、次のコード例を参照してください。 イベント ソースの作成の詳細については、次を参照してください。 [Server Event Handling in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/765bfc89-33ee-4d0d-bbe6-3b172c06def9)します。<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> にオブジェクトが設定されている `true` をエラーが処理されたことを示します。  
  
 [!code-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 アプリケーション ログに MySamplesSite をという名前のイベント ソースをプログラムで追加する必要がある場合は、次のコード例を使用します。 このイベント ソースは、最初のコード サンプルが正常に動作するために存在する必要があります。 次のコード例では、管理者特権が必要です。  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>When overriding <see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" /> in a derived class, be sure to call the <see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" /> method of the base class to enable registered delegates to receive the event.</para>
    </block>
    <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
    <altmember cref="T:System.Net.Mail.MailMessage" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SendMailErrorEventArgs (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SendMailErrorEventArgs.#ctor(System.Exception)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Exception" /> 例外を含むオブジェクト。</param>
        <summary>
          <see cref="T:System.Web.UI.WebControls.SendMailErrorEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>電子メール メッセージを送信できない場合は、SMTP メール サービスによってスローされる例外を返します。</summary>
        <value>
          <see cref="T:System.Exception" /> 例外を格納するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> プロパティによって電子メール メッセージを送信できない場合は、SMTP メール プロバイダーによってスローされる例外を格納する、 <xref:System.Web.UI.WebControls.ChangePassword> コントロールまたは <xref:System.Web.UI.WebControls.CreateUserWizard>です。 この例外の最も一般的な理由で構成エラーが、 [smtp Element \(Network Settings\)](http://msdn.microsoft.com/ja-jp/220b0329-e384-4e0c-86b4-0945ad17efd9) のマシンの構成ファイル、次の例外メッセージが生成されます。 `The transport failed to connect to the server.`  
  
 エラーを使用してファイルを埋め込むときに電子メール メッセージが存在する場合、例外がスローされません <xref:System.Web.UI.WebControls.MailDefinition.EmbeddedObjects%2A>します。 代わりに、メール メッセージを表示したときに、埋め込まれたファイルを破損が表示されます。  
  
 設定する必要があります、 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> として渡されたオブジェクト、 `e` のパラメーター <xref:System.Web.UI.WebControls.SendMailErrorEventArgs>, 、 `true` を通知する、例外が処理以外の場合、例外が再スローされ、元のコール スタックとエラー メッセージが含まれています。  
  
   
  
## 例  
 次のコード例を使用する ASP.NET ページを示しています、 <xref:System.Web.UI.WebControls.ChangePassword> Web コントロール、およびイベント ハンドラーが含まれています、 <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> という名前のイベント `SendMailError`です。 このコード例では、ASP.NET メンバーシップとフォーム認証、および、名とパスワードがわかっているユーザーが作成されたを使用する ASP.NET Web サイトが構成済みであると仮定します。 詳細については、「[How to: Implement Simple Forms Authentication](http://msdn.microsoft.com/ja-jp/9522bc8d-1a41-480a-aa11-c389a4ac2d2e)」を参照してください。  
  
 パスワードの変更が成功すると、コードで、 `SendingMail` イベント ハンドラーは、変更の確認をユーザーに電子メール メッセージを送信しようとしています。 SMTP は、このコード例を実行するために、サーバーで既に構成する必要があります。 SMTP サーバーを構成する方法については、次を参照してください。 [NIB: 方法: インストールと構成の SMTP 仮想サーバーの IIS 6.0 で](http://msdn.microsoft.com/ja-jp/ed204b58-24af-47d0-9687-60e5df5f17f8)します。 この例の目的で、必要はありません。 SMTP サーバーを構成するには電子メール メッセージを送信するエラーをテストする例が構築されます。  
  
 メール サーバーが正しく構成されていないまたはその他のエラーが発生して電子メール メッセージを送信できない場合、 `SendMailError` 関数が呼び出されます。 メッセージがユーザーに表示されます。 さらに、イベントはイベント ソース名は既に MySamplesSite が存在することを想定して Windows アプリケーション イベント ログに記録されます。 指定したイベント ソースを作成するのには、次のコード例を参照してください。 イベント ソースの作成の詳細については、次を参照してください。 [Server Event Handling in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/765bfc89-33ee-4d0d-bbe6-3b172c06def9)します。<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> にオブジェクトが設定されている `true` をエラーが処理されたことを示します。  
  
 [!code-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 アプリケーション ログに MySamplesSite をという名前のイベント ソースをプログラムで追加する必要がある場合は、次のコード例を使用します。 このイベント ソースは、最初のコード サンプルが正常に動作するために存在する必要があります。 次のコード例では、管理者特権が必要です。  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>かどうかを SMTP 例外に含まれている、 <see cref="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" /> プロパティを処理します。</summary>
        <value>場合 <see langword="true" />, 、例外が使用され、によって処理される、 <see cref="T:System.Web.UI.WebControls.SendMailErrorEventHandler" /> を委任します。 場合 <see langword="false" />, 、元のコール スタックとエラー メッセージを含む、例外が再スローします。  
  
 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> プロパティ示す場合は、 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> が処理されました。 電子メール メッセージを送信できない場合に、SMTP メール プロバイダーによって、例外が発生した、 <xref:System.Web.UI.WebControls.ChangePassword> コントロールまたは <xref:System.Web.UI.WebControls.CreateUserWizard>です。 例外の最も一般的な理由で構成エラーが、 [smtp Element \(Network Settings\)](http://msdn.microsoft.com/ja-jp/220b0329-e384-4e0c-86b4-0945ad17efd9) のマシン構成ファイル。 ようなエラーが、通常は開発中に発見し、アプリケーションのデバッグ、メール サーバーが失敗するが予期せず、運用環境で、アプリケーション全体のような状況で失敗にするかどうかを決定する必要があります。 それ以外の場合は、イベントの処理によりアプリケーションを進みます。  
  
 イベント ハンドラーを作成しない場合、 <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> イベント、または元のまま残りますイベント ハンドラーを作成する場合、 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> プロパティに設定 `false`, Web アプリケーションは、電子メール メッセージを送信するときにエラーが発生した場合の実行を停止、および ASP.NET エラー メッセージが表示されます。 例外が発生した場合でも実行を継続する Web アプリケーションをイベントを処理できます。 これは、機能は、電子メール メッセージを送信する重要ではない場合に便利です。 たとえば、ユーザーが複数のステップのウィザードを使用しているときに、例外が発生した場合、エラーをログ記録、情報メッセージをユーザーに表示され、ウィザードを完了するユーザーに有効な場合もができます。  
  
   
  
## 例  
 次のコード例を使用する ASP.NET ページを示しています、 <xref:System.Web.UI.WebControls.ChangePassword> Web コントロール、およびイベント ハンドラーが含まれています、 <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> という名前のイベント `SendMailError`です。 このコード例では、ASP.NET メンバーシップとフォーム認証、および、名とパスワードがわかっているユーザーが作成されたを使用する ASP.NET Web サイトが構成済みであると仮定します。 詳細については、「[How to: Implement Simple Forms Authentication](http://msdn.microsoft.com/ja-jp/9522bc8d-1a41-480a-aa11-c389a4ac2d2e)」を参照してください。  
  
 パスワードの変更が成功すると、コードで、 `SendingMail` イベント ハンドラーは、変更の確認をユーザーに電子メール メッセージを送信しようとしています。 SMTP は、このコード例を実行するために、サーバーで既に構成する必要があります。 SMTP サーバーを構成する方法については、次を参照してください。 [NIB: 方法: インストールと構成の SMTP 仮想サーバーの IIS 6.0 で](http://msdn.microsoft.com/ja-jp/ed204b58-24af-47d0-9687-60e5df5f17f8)します。 この例の目的で、必要はありません。 SMTP サーバーを構成するには電子メール メッセージを送信するエラーをテストする例が構築されます。  
  
 メール サーバーが正しく構成されていないまたはその他のエラーが発生して電子メール メッセージを送信できない場合、 `SendMailError` 関数が呼び出されます。 メッセージがユーザーに表示されます。 さらに、イベントはイベント ソース名は既に MySamplesSite が存在することを想定して Windows アプリケーション イベント ログに記録されます。 指定したイベント ソースを作成するのには、次のコード例を参照してください。 イベント ソースの作成の詳細については、次を参照してください。 [Server Event Handling in ASP.NET Web Pages](http://msdn.microsoft.com/ja-jp/765bfc89-33ee-4d0d-bbe6-3b172c06def9)します。<xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> のプロパティ、 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> にオブジェクトが設定されている `true` をエラーが処理されたことを示します。  
  
 [!code-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 アプリケーション ログに MySamplesSite をという名前のイベント ソースをプログラムで追加する必要がある場合は、次のコード例を使用します。 このイベント ソースは、最初のコード サンプルが正常に動作するために存在する必要があります。 次のコード例では、管理者特権が必要です。  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
      </Docs>
    </Member>
  </Members>
</Type>