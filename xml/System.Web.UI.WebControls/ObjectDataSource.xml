<Type Name="ObjectDataSource" FullName="System.Web.UI.WebControls.ObjectDataSource">
  <TypeSignature Language="C#" Value="public class ObjectDataSource : System.Web.UI.DataSourceControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectDataSource extends System.Web.UI.DataSourceControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.ObjectDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("TypeName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>多階層 Web アプリケーションのアーキテクチャでのデータ バインド コントロールにデータを提供するビジネス オブジェクトを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このトピックの内容  
  
-   [はじめに](#introduction)  
  
-   [目的](#purpose)  
  
-   [データの取得](#retrieving_data)  
  
-   [データ操作を実行します。](#performing_data_operations)  
  
-   [データのフィルター処理](#filtering_data)  
  
-   [キャッシュ](#caching)  
  
-   [フィーチャー](#features)  
  
-   [データ ビュー](#data_view)  
  
-   [LINQ to SQL を使用します。](#using_linq_to_sql)  
  
-   [宣言型の構文](#declarative_syntax)  
  
<a name="introduction"></a>   
## はじめに  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールを作成するクラスと連携します。 取得し、データを更新するメソッドを作成して、これらのメソッドの名前を指定する、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールをマークアップします。 レンダリングまたはポストバックの処理中に、<xref:System.Web.UI.WebControls.ObjectDataSource>指定したメソッドを呼び出します。  
  
 ビジュアル表示はありません、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 その結果、<xref:System.Web.UI.WebControls.ObjectDataSource>など visual 機能をサポートしない、<xref:System.Web.UI.DataSourceControl.EnableTheming%2A>または<xref:System.Web.UI.DataSourceControl.SkinID%2A>プロパティです。  
  
<a name="purpose"></a>   
## 目的  
 非常に一般的なアプリケーションのデザイン方法は、ビジネス ロジックからプレゼンテーション層を分離して、ビジネス オブジェクトにビジネス ロジックをカプセル化するにです。 これらのビジネス オブジェクトは、プレゼンテーション層と 3 層アプリケーションのアーキテクチャでは、その結果、データ層の間で区別する層を形成します。<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール開発者は、3 層アプリケーションのアーキテクチャを維持しながら ASP.NET データ ソース コントロールを使用します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールでは、リフレクションを使用して、ビジネス オブジェクトのインスタンスを作成し、取得するでメソッドを呼び出す更新、挿入、およびデータを削除します。<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティは、クラスの名前を識別する、<xref:System.Web.UI.WebControls.ObjectDataSource>で動作します。<xref:System.Web.UI.WebControls.ObjectDataSource>保持しないオブジェクト メモリ内の Web 要求の有効期間にわたって; コントロールを作成し、各メソッド呼び出しのクラスのインスタンスを破棄します。 これは重大な考慮事項を使用するビジネス オブジェクトの多くのリソースが必要ですか作成し、破棄にはコストがそれ以外の場合です。 高価なオブジェクトを使用できない可能性があります、最適な設計の選択肢が、使用して、オブジェクトのライフ サイクルを制御することができます、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント。  
  
> [!NOTE]
>  によって識別されるメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>プロパティは、インスタンス メソッドを指定できますまたは`static`\(`Shared` Visual Basic で\) メソッドです。 メソッドは、場合`static`\(`Shared` Visual Basic で\)、ビジネス オブジェクトのインスタンスは作成されません、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>、および<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベントは発生しません。  
  
<a name="retrieving_data"></a>   
## データの取得  
 ビジネス オブジェクトからデータを取得するには設定、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ データを取得するメソッドの名前にします。 メソッドが返されない場合、<xref:System.Collections.IEnumerable>または<xref:System.Data.DataSet>オブジェクト、オブジェクトがランタイムによってラップされた、<xref:System.Collections.IEnumerable>コレクション。 メソッド署名しているかどうかのパラメーターを追加できます<xref:System.Web.UI.WebControls.Parameter>オブジェクトを<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>、コレクションで指定されているメソッドに渡す値に関連付けると、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 順序で、<xref:System.Web.UI.WebControls.ObjectDataSource>パラメーターを使用するコントロールを名前とメソッドのシグネチャのパラメーターの型パラメーターに一致する必要があります。 詳細については、「[Using Parameters with the ObjectDataSource Control](http://msdn.microsoft.com/ja-jp/45fb67ee-9be7-49b7-9421-e242203dafa4)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロール データを取得するたびに、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドが呼び出されます。 このメソッドで指定されたメソッドへのプログラムによるアクセスを提供する<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 指定されているメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>にバインドされているコントロールでプロパティが自動的に呼び出されます、<xref:System.Web.UI.WebControls.ObjectDataSource>ときにその`DataBind`メソッドが呼び出されます。 設定した場合、`DataSourceID`データ バインド コントロールのプロパティ、コントロールに自動的にデータにバインド データ ソースから、必要に応じて。 設定、`DataSourceID`プロパティは推奨されるメソッドのバインディング、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールをデータ バインド コントロールです。 また、設定することができます、`DataSource`プロパティ、それをする必要があります明示的に呼び出す、`DataBind`データ バインド コントロールのメソッドです。 呼び出すことができます、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>プログラムでいつでもデータを取得するメソッド。  
  
 データ ソース コントロールにデータ バインド コントロールのバインドの詳細については、次を参照してください。[データ ソース コントロールを使用してデータをバインド](http://msdn.microsoft.com/ja-jp/e41adfff-8fb8-449e-9cd1-9bd49788c5f7)です。  
  
<a name="performing_data_operations"></a>   
## データ操作を実行します。  
 オブジェクトをビジネスの機能によって、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールが連動、更新、挿入、および削除などのデータ操作を実行することができます。 これらのデータ操作を実行するには、適切なメソッド名とを実行する操作に関連するパラメーターを設定します。 たとえば、更新操作では、次のように設定します。、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>必須パラメーターのプロパティを追加および更新プログラムを実行するビジネス オブジェクト メソッドの名前を、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクション。 場合、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、データ バインド コントロールに関連付けられて、データ バインドされたコントロールによって、パラメーターが追加されます。 この場合、メソッドのパラメーター名が、データ バインド コントロール内のフィールド名を一致することを確認する必要があります。 更新プログラムが実行されるときに、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>メソッドが、コードによって明示的にまたは自動的にデータ バインドされたコントロールによって呼び出されます。 同じ一般的なパターンに従うは<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作します。 ビジネス オブジェクトをバッチ処理代わりに、時に、これらの種類のデータ操作の 1 つのレコードを実行すると想定されます。  
  
<a name="filtering_data"></a>   
## データのフィルター処理  
 <xref:System.Web.UI.WebControls.ObjectDataSource>コントロールには、によって取得されるデータをフィルター処理、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>としてデータが返される場合は、プロパティ、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>オブジェクト。 設定することができます、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティ形式を使用してフィルター式を文字列構文とパラメーターで指定されている式で値を連結、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>コレクション。  
  
<a name="caching"></a>   
## キャッシュ  
 <xref:System.Web.UI.WebControls.ObjectDataSource>インスタンスが保持されないで識別されるメソッドの呼び出しの結果、複数の要求でビジネス オブジェクトのキャッシュできる、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 データはキャッシュされたそれ以降の呼び出し中に、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドには、ビジネス オブジェクトを作成して、呼び出しではなく、キャッシュされたデータが返されますその<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>リフレクションを使用します。 オブジェクトを作成して、Web サーバーでメモリを犠牲にして、データ メソッドを呼び出すことを回避できますをキャッシュします。<xref:System.Web.UI.WebControls.ObjectDataSource>は自動的にデータをキャッシュときに、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティに設定されている`true`、および<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>プロパティが、キャッシュが破棄される前に、キャッシュがデータを格納する秒数に設定します。 指定することも、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティと省略可能な<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>プロパティです。<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールでは、すべての種類のデータをキャッシュすることができますが、リソースまたは複数の要求をサービスには共有できない状態を保持するオブジェクトをキャッシュする必要があります \(たとえば、開いている<xref:System.Data.SqlClient.SqlDataReader>オブジェクト\) オブジェクトの同じインスタンスが複数の要求をサービスに使用されるため、します。  
  
<a name="features"></a>   
## 機能  
 次の表の機能、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。  
  
|機能|要件|  
|--------|--------|  
|選択|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>ビジネスの名前にプロパティがオブジェクトのメソッドがデータを選択してで必要なパラメーターを含める、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>コレクション プログラム、またはデータ バインド コントロールを使用します。|  
|並べ替え|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>プロパティ内のパラメーターの名前を<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>並べ替えの条件を実行するメソッド。|  
|フィルター処理|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>プロパティ フィルター式に、必要に応じて、パラメーターを追加する、<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>データにフィルターをコレクションと、<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>メソッドが呼び出されます。 によって指定されたメソッド、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティを返す必要があります、<xref:System.Data.DataSet>または<xref:System.Data.DataTable>です。|  
|ページング|データ ソースのページングがサポートされる場合、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>メソッドにパラメーター取得するレコードの最大数と、取得する最初のレコードのインデックスにはが含まれています。 これらのパラメーターの名前を設定する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>プロパティ、それぞれします。 データ バインド コントロールはそれ自体には、ページングを実行できる可能性がある場合でも、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールでは、ページングによって指定されたメソッドで直接サポートされない、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティです。 これを行うことができるデータ バインド コントロールの要件は、メソッドがで指定されている、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティを実装するオブジェクトを返す、<xref:System.Collections.ICollection>インターフェイスです。|  
|Updating|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>プロパティをビジネスの名前にはオブジェクトのデータを更新するメソッドとで必要なパラメーターを含める、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクション。|  
|Deleting|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>ビジネスの名前にプロパティがオブジェクトのメソッドまたは関数、データを削除してで必要なパラメーターを含める、<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>コレクション。|  
|挿入|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>ビジネスの名前にプロパティがオブジェクトのメソッドまたは関数、データを挿入してで必要なパラメーターを含める、<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>コレクション。|  
|キャッシュ|設定、<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>プロパティを`true`、および<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>と<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>プロパティに従って、キャッシュされたデータのキャッシュ動作をします。|  
  
> [!NOTE]
>  使用すると、<xref:System.Web.UI.WebControls.ObjectDataSource>更新またはデータをクライアントで入力した文字列を挿入するクラスは自動的に変換されませんクライアントのカルチャの形式から、サーバーのカルチャの形式にします。 たとえば、クライアントのカルチャが日付形式として DD、構造体、YYYY MM を指定してサーバーで、日付の書式で年\/月\/日可能性があります。 その場合は、2009 年 10 月 5 日に入力されます、 <xref:System.Web.UI.WebControls.TextBox> 2009 年 5 月 10 日として制御しますが、2009 年 5 月 10 日として解釈できます。 2009 年 10 月 15 日では、2009 年 15 月 10 日ように入力し、無効な日付として拒否されるようにします。  
  
<a name="data_view"></a>   
## データ ビュー  
 すべてのデータ ソース コントロールと同様、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールがデータ ソース ビュー クラスを使用すると、関連付けられています。 中に、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールがページの開発者が、データを操作に使用するインターフェイス、<xref:System.Web.UI.WebControls.ObjectDataSourceView>クラスは、データ バインド コントロールを使用するインターフェイスです。 さらに、<xref:System.Web.UI.WebControls.ObjectDataSourceView>クラスは、データ ソース コントロールの機能について説明し、実際の作業を実行します。<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールに関連付けられている 1 つだけ<xref:System.Web.UI.WebControls.ObjectDataSourceView>、という名前が常と`DefaultView`です。 中に、<xref:System.Web.UI.WebControls.ObjectDataSourceView>によってオブジェクトが公開されている、<xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A>メソッド、プロパティとメソッドの多くがラップされ、によって直接公開される、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。 バック グラウンドで、<xref:System.Web.UI.WebControls.ObjectDataSourceView>オブジェクトは取得、挿入、更新、削除すると、フィルター処理、およびデータの並べ替えを含む、すべてのデータ操作を実行します。 詳細については、「<xref:System.Web.UI.WebControls.ObjectDataSourceView>」を参照してください。  
  
<a name="using_linq_to_sql"></a>   
## LINQ to SQL を使用します。  
 使用することができます、 <xref:System.Web.UI.WebControls.ObjectDataSource> LINQ to SQL クラスを持つコントロール。 設定するためには、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>プロパティをデータ コンテキスト クラスの名前にします。 設定することも、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>、および<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>データ コンテキスト クラス内の対応する操作を実行するメソッドをメソッドです。 イベント ハンドラーを作成する必要があります、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>データ コンテキスト クラスの破棄をキャンセルするためにイベント。 この手順が必要な LINQ to SQL は、遅延実行をサポートしているため、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールは、Select 操作の後にデータ コンテキストを破棄しようとしています。 LINQ to SQL クラスを作成する方法の詳細については、次を参照してください。[する方法: LINQ to Web プロジェクトでの SQL クラスを作成](http://msdn.microsoft.com/ja-jp/20bf925f-2a6d-410d-8f65-7b5b8f555081)です。 データ コンテキスト クラスの破棄をキャンセルする方法の例は、次を参照してください。、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>イベント。  
  
## Entity Framework を使用  
 使用することも、 <xref:System.Web.UI.WebControls.ObjectDataSource> Entity Framework でのコントロールです。 詳細については、次を参照してください。 [Using the Entity Framework and the ObjectDataSource Control](http://go.microsoft.com/fwlink/?LinkId=209117)です。  
  
<a name="declarative_syntax"></a>   
## 宣言型の構文  
  
```  
<asp:ObjectDataSource  
    CacheDuration="string|Infinite"  
    CacheExpirationPolicy="Absolute|Sliding"  
    CacheKeyDependency="string"  
    ConflictDetection="OverwriteChanges|CompareAllValues"  
    ConvertNullToDBNull="True|False"  
    DataObjectTypeName="string"  
    DeleteMethod="string"  
    EnableCaching="True|False"  
    EnablePaging="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    FilterExpression="string"  
    ID="string"  
    InsertMethod="string"  
    MaximumRowsParameterName="string"  
    OldValuesParameterFormatString="string"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnFiltering="Filtering event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnObjectCreated="ObjectCreated event handler"  
    OnObjectCreating="ObjectCreating event handler"  
    OnObjectDisposing="ObjectDisposing event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    runat="server"  
    SelectCountMethod="string"  
    SelectMethod="string"  
    SkinID="string"  
    SortParameterName="string"  
    SqlCacheDependency="string"  
    StartRowIndexParameterName="string"  
    TypeName="string"  
    UpdateMethod="string"  
    Visible="True|False"  
>  
        <DeleteParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </DeleteParameters>  
        <FilterParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </FilterParameters>  
        <InsertParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </InsertParameters>  
        <SelectParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </SelectParameters>  
        <UpdateParameters>  
                <asp:ControlParameter  
                    ControlID="string"  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:CookieParameter  
                    ConvertEmptyStringToNull="True|False"  
                    CookieName="string"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:FormParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    FormField="string"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:Parameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:ProfileParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    PropertyName="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:QueryStringParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    QueryStringField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
                <asp:SessionParameter  
                    ConvertEmptyStringToNull="True|False"  
                    DefaultValue="string"  
                    Direction="Input|Output|InputOutput|ReturnValue"  
                    Name="string"  
                    SessionField="string"  
                    Size="integer"  
                    Type="Empty|Object|DBNull|Boolean|Char|SByte|  
                        Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|  
                        Single|Double|Decimal|DateTime|String"  
                />  
        </UpdateParameters>  
</asp:ObjectDataSource>  
```  
  
   
  
## 例  
 Visual Studio の Web サイト プロジェクトとソース コードは、このトピックで使用可能な: [Download](http://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838)です。  
  
 このセクションの内容を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> .aspx 内のマークアップでページとその表示と連携するビジネス オブジェクト。 この例は、.aspx ページです。 含まれている、<xref:System.Web.UI.WebControls.GridView>コントロールにバインドされている、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロール。<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールのマークアップは、ビジネス オブジェクトの名前とデータを取得するために呼び出すビジネス オブジェクト メソッドの名前を指定します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_1\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_1\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 次の例は、ビジネス オブジェクトを<xref:System.Web.UI.WebControls.ObjectDataSource>.aspx ページにコントロールを使用します。 \(他の多くの<xref:System.Web.UI.WebControls.ObjectDataSource>のコード例もこのビジネス オブジェクトを使用します\)。 この例は、次の 2 つの基本クラスで構成されます。  
  
-   `EmployeeLogic`クラスは、ビジネス ロジックで、クラスを<xref:System.Web.UI.WebControls.ObjectDataSource>使用します。  
  
-   `NorthwindEmployee`クラスによって返されるデータ オブジェクトを定義、`GetAllEmployees`のメソッド、`EmployeeLogic`クラスです。  
  
 追加の`NorthwindDataException`便宜クラスを提供します。  
  
 この例のクラスのセットは、Microsoft SQL Server と Microsoft Access で使用可能である Northwind Traders データベースで動作します。 稼働させるためには、コンパイルして、提供されている .aspx ページの例でこれらのクラスを使用する必要があります。 Northwind traders というデータベースをインストールする方法については、次を参照してください。[How to: Install Sample Databases](http://msdn.microsoft.com/ja-jp/ed1291f6-604c-4972-ae22-0345c6dea12e)です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_1\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_1\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IDataSource" />
    <altmember cref="T:System.Web.UI.DataSourceControl" />
    <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectDataSource (string typeName, string selectMethod);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string typeName, string selectMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="selectMethod" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">クラスの名前を <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> が連携します。</param>
        <param name="selectMethod">メソッドの名前か、または機能を <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> データを取得します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> クラスが指定された型名とデータ取得メソッド名を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 `typeName` パラメーターは、Bin ディレクトリまたは App\_Code ディレクトリに配置されているコードの部分修飾型またはグローバル アセンブリ キャッシュに登録されているコードの完全修飾型名を指定できます。 グローバル アセンブリ キャッシュを使用する場合は、適切な参照を追加する必要があります、 `assemblies` Machine.config または Web.config 構成ファイルのセクションです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="CacheDuration">
      <MemberSignature Language="C#" Value="public virtual int CacheDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CacheDuration" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.DataSourceCacheDurationConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または時間の長さを秒単位で、データ ソース コントロールがデータをキャッシュすることによって取得される設定、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> プロパティです。</summary>
        <value>秒、数、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> の結果をキャッシュ、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> プロパティの呼び出しです。 既定値は 0 です。 値を負の値にすることはできません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールはデータのキャッシュをサポートします。 データをキャッシュするために呼び出す、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッド、ビジネスではなく、キャッシュから、データを取得するオブジェクトを <xref:System.Web.UI.WebControls.ObjectDataSource> が連携します。 キャッシュの有効期限、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドは、ビジネス オブジェクトからデータを取得し、もう一度、データをキャッシュします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールがデータを自動的にキャッシュと、 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> にプロパティが設定されている `true` と <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> プロパティが、キャッシュはキャッシュ エントリが破棄される前にデータを保存する秒数を示す 0 より大きい値に設定します。 値 0 は、無限の深さのキャッシュを示します。  
  
 キャッシュは、時間の組み合わせによって調整され、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 設定します。 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> プロパティに設定されて、 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> 値、 <xref:System.Web.UI.WebControls.ObjectDataSource> 初めて呼び出したときにデータをキャッシュ、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドで指定された時間数では、最大でのメモリ内に保持し、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> プロパティです。 データは、メモリが必要な場合、継続時間の前にリリースされる可能性があります。 次の呼び出し中に、キャッシュが更新し、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> にプロパティが設定されている <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> 値、データ ソース コントロールが初めて呼び出したときにデータをキャッシュ、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドが、その後の呼び出しでキャッシュを保持する時間枠をリセット、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。 等しいときにアクティビティがない場合、キャッシュの有効期限、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> プロパティに最後に呼び出した後、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を示す方法、 <xref:System.Web.UI.WebControls.ObjectDataSource> オブジェクトはキャッシュをサポートします。 2 番目のコード例を返すラッパー メソッドを実装する方法を示します、 <xref:System.Data.DataSet> でキャッシュを有効にするオブジェクト、 <xref:System.Web.UI.WebControls.ObjectDataSource> オブジェクトです。  
  
 次のコード例を示す方法、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールはキャッシュをサポートします。 キャッシュを有効にするには、により識別されるデータを取得するメソッドを実装する必要があります、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> としてデータを返すためのプロパティ、 <xref:System.Data.DataSet> オブジェクトです。 この例では、 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> にプロパティが設定されている `true`, 、および <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> と <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> プロパティを設定します。<xref:System.Web.UI.WebControls.ObjectDataSource> によって返されるデータをキャッシュ、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティが 30 秒間続きます。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_6\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_6\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 次のコード例を返すラッパー メソッドを実装する方法を示します、 <xref:System.Data.DataSet> でキャッシュを有効にするオブジェクト、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 基本クラスの実装で、 `EmployeeLogic` 、クラス、 `GetAllEmployees` メソッドが返される、 <xref:System.Collections.ArrayList> オブジェクトです。 使用するには、完全にオブジェクトをリファクタリングではなく、 <xref:System.Web.UI.WebControls.ObjectDataSource> ラッパー メソッドという名前で、Web フォーム ページ `GetAllEmployeesAsDataSet` のセットを返す追加 `NorthwindEmployee` データとして、 <xref:System.Data.DataSet>です。  
  
 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.ObjectDataSource> クラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_5\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_5\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheExpirationPolicy">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceCacheExpiry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定キャッシュ有効期限の動作、期間と組み合わせた場合に、データ ソース コントロールを使用するキャッシュの動作について説明します。</summary>
        <value>
          <see cref="T:System.Web.UI.DataSourceCacheExpiry" /> 値のいずれか。 既定値は、<see cref="F:System.Web.UI.DataSourceCacheExpiry.Absolute" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールはデータのキャッシュをサポートします。 データをキャッシュするために呼び出す、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッド、ビジネスではなく、キャッシュから、データを取得するオブジェクトを <xref:System.Web.UI.WebControls.ObjectDataSource> が連携します。 キャッシュの有効期限、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドは、ビジネス オブジェクトからデータを取得し、もう一度、データをキャッシュします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールがデータを自動的にキャッシュと、 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> にプロパティが設定されている `true` と <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> プロパティが、キャッシュはキャッシュ エントリが破棄される前にデータを保存する秒数を示す 0 より大きい値に設定します。 値 0 は、無限の深さのキャッシュ期間を示します。  
  
 キャッシュは、時間の組み合わせによって調整され、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 設定します。 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> プロパティに設定されて、 <xref:System.Web.UI.DataSourceCacheExpiry.Absolute> 値、 <xref:System.Web.UI.WebControls.ObjectDataSource> 初めて呼び出したときにデータをキャッシュ、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドで指定された時間数では、最大でのメモリ内に保持し、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> プロパティです。 データは、メモリが必要な場合、継続時間の前にリリースされる可能性があります。 次の呼び出し中に、キャッシュが更新し、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> プロパティに設定されて、 <xref:System.Web.UI.DataSourceCacheExpiry.Sliding> 値、データ ソース コントロールが初めて呼び出したときにデータをキャッシュ、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドが、後続の呼び出しごとにキャッシュを保持する時間枠をリセット、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。 等しいときにアクティビティがない場合、キャッシュの有効期限、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> プロパティに最後に呼び出した後、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を示す方法、 <xref:System.Web.UI.WebControls.ObjectDataSource> オブジェクトは、フィルター処理とキャッシュをサポートします。 2 番目のコード例を返すラッパー メソッドを実装する方法を示します、 <xref:System.Data.DataSet> キャッシュとフィルタ リングを有効にするオブジェクト、 <xref:System.Web.UI.WebControls.ObjectDataSource> オブジェクトです。  
  
 次のコード例を示す方法、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールは、フィルター処理とキャッシュをサポートします。 フィルター処理とキャッシュを有効にするには、により識別されるデータを取得するメソッドを実装する必要があります、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> としてデータを返すためのプロパティ、 <xref:System.Data.DataSet> オブジェクトです。 この例では、キャッシュは有効になっているため、 `EmployeeLogic` オブジェクトとしてデータが返されます、 <xref:System.Data.DataSet>, 、 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> にプロパティが設定されている `true`, 、および <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> と <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> プロパティを設定します。<xref:System.Web.UI.WebControls.ObjectDataSource> によって返されるデータをキャッシュ、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティが 30 秒間続きます。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_6\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/CS/objds6cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_6\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_6/VB/objds6vb.aspx#1)]  
  
 次のコード例を返すラッパー メソッドを実装する方法を示します、 <xref:System.Data.DataSet> キャッシュとフィルタ リングを有効にするオブジェクト、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 基本クラスの実装で、 `EmployeeLogic` 、クラス、 `GetAllEmployees` メソッドが返される、 <xref:System.Collections.ArrayList>です。 使用するには、完全にオブジェクトをリファクタリングではなく、 <xref:System.Web.UI.WebControls.ObjectDataSource> ラッパー メソッドという名前で、Web フォーム ページ `GetAllEmployeesAsDataSet` のセットを返す追加 `NorthwindEmployee` データとして、 <xref:System.Data.DataSet>です。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.ObjectDataSource> クラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_5\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_5\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      </Docs>
    </Member>
    <Member MemberName="CacheKeyDependency">
      <MemberSignature Language="C#" Value="public virtual string CacheKeyDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CacheKeyDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ ソース コントロールによって作成されたキャッシュ オブジェクトのすべてのデータにリンクされているユーザー定義のキー依存関係を設定します。</summary>
        <value>によって作成されたすべてのキャッシュ オブジェクトを識別するキーを <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> プロパティは、任意の文字列値に設定できます。  
  
 キーが経過したときに、すべてのキャッシュ オブジェクトが明示的に終了しました。 これにより、によって作成されたキャッシュ エントリを無効にするため、 <xref:System.Web.UI.WebControls.ObjectDataSource> プログラムを使用して独自のページからコードです。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールはデータのキャッシュをサポートします。 データをキャッシュするために呼び出す、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッド、ビジネスではなく、キャッシュから、データを取得するオブジェクトを <xref:System.Web.UI.WebControls.ObjectDataSource> が連携します。 キャッシュの有効期限、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドは、ビジネス オブジェクトからデータを取得し、もう一度、データをキャッシュします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールがデータを自動的にキャッシュと、 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> にプロパティが設定されている `true` と <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> プロパティが、キャッシュはキャッシュ エントリが破棄される前にデータを保存する秒数を示す 0 より大きい値に設定します。 値 0 は、無限の深さのキャッシュを示します。  
  
 設定することができます、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> によって作成されたすべてのキャッシュ エントリ間の依存関係を作成するプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールとキー。 できます期限切れにするすべてのキャッシュ エントリ プログラムを使用していつでも、キーの期限切れでします。 使用してキーの有効期限、 <xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName> 、現在のメソッド <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> のパラメーター値。  
  
 組み合わせごとに一意のキャッシュ エントリが作成された、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>, 、<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>, 、<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>, 、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>, 、および <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> プロパティです。 複数 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールを使用して、同じキャッシュ エントリのシナリオで同じ型、メソッド、およびパラメーターを使用してデータを読み込まれる。  
  
   
  
## 例  
 次の 3 つの例では、Web ページ、分離コード ページのクラス、および Northwind データベースの Employees テーブルからレコードを取得するデータ アクセス クラスを表示します。  
  
 最初の例では 2 つの Web ページ <xref:System.Web.UI.WebControls.ObjectDataSource> 、コントロール、 <xref:System.Web.UI.WebControls.DropDownList> コントロール、および <xref:System.Web.UI.WebControls.DetailsView> コントロールです。 最初の <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールと <xref:System.Web.UI.WebControls.DropDownList> を取得して、データベースから従業員の名前を表示するコントロールを使用します。 2 番目 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールと <xref:System.Web.UI.WebControls.DetailsView> を取得し、ユーザーが選択されている従業員レコードを表示するコントロールを使用します。  
  
 キャッシュが有効になって、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 そのため、各レコードには、データベースから 1 回のみが取得されます。<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> プロパティが"EmployeeDetails"に設定されているが、任意の文字列値がキーとして動作できます。 Web ページでは、 <xref:System.Web.UI.WebControls.Button> コントロールをユーザーがキャッシュされたデータを期限切れにクリックします。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 2 番目の例では、ハンドラーを <xref:System.Web.UI.Control.Load> イベントとハンドラーを <xref:System.Web.UI.WebControls.Button.Click> のイベント、 <xref:System.Web.UI.WebControls.Button> コントロールです。<xref:System.Web.UI.Control.Load> イベント ハンドラーでは、キャッシュ項目を作成設定キーを使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 値。<xref:System.Web.UI.WebControls.Button.Click> イベント ハンドラーと同じキーを持つキャッシュ アイテムの削除、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 値。 キャッシュ項目が削除されると、キーに依存しているすべてのキャッシュされたデータが有効期限が切れています。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 3 番目の例では、Northwind データベースと対話するデータ アクセス クラスを示します。 クラスでは、LINQ を使用して、従業員テーブルを照会します。 例では、LINQ to SQL クラスを Northwind データベースと Employees テーブルを表す必要があります。 詳細については、次を参照してください。 [方法: LINQ to Web プロジェクトで SQL クラスに作成](http://msdn.microsoft.com/ja-jp/20bf925f-2a6d-410d-8f65-7b5b8f555081)します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="ConflictDetection">
      <MemberSignature Language="C#" Value="public System.Web.UI.ConflictOptions ConflictDetection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ConflictOptions ConflictDetection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に新しい値だけが渡されるかどうかを決定する値、 <see langword="Update" /> にメソッドまたは新旧両方の値が渡される、 <see langword="Update" /> メソッドです。</summary>
        <value>
          <see cref="T:System.Web.UI.ConflictOptions" /> 値のいずれか。 既定値は、<see cref="F:System.Web.UI.ConflictOptions.OverwriteChanges" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、新旧の値のパラメーターがによって指定されたメソッドに適用されるかどうかを決定、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> プロパティです。 たとえば、このメソッドはで指定された、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティを返します、 <xref:System.Data.DataTable> 列を持つコントロール `Name` と `Number`, 、および <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> プロパティに設定されて、 <xref:System.Web.UI.ConflictOptions.OverwriteChanges> フィールド、パラメーターで作成されます `Name` と `Number` の `Update` メソッドです。 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> プロパティに設定されて、 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値のパラメーターが作成 `Name`, 、`Number`, 、`original_Name`, 、および `original_Number`です。 \(元の値に対するパラメーターの正確な名前によって異なる、 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> プロパティです\)。<xref:System.Web.UI.WebControls.ObjectDataSource> を判断するかどうか、メソッドをで指定された、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> プロパティと一致するパラメーターです。  
  
 同時実行制御は、データ ストアをコントロール データが読み取られ、複数のクライアントがアクセスして、同じデータを操作するときに、ストアに変更する方法を使用する手法です。 など 1 つのクライアントはデータを読み取るし、別のクライアントが同じデータを読み取り、別のユーザーに提示中に、ユーザーに提示します。 両方のユーザーは、データを更新し、データ ストレージに送信する、予期しない結果が生じるため、両方のクライアントは、同じデータの異なる値を指定することがあります。 これは、競合と見なされます。 設定して、 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> プロパティを <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値、 `Update` メソッドは、古い値と新しい値を元のデータ ソースの競合を検出し、必要に応じて、処理するように、比較します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> プロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ConflictOptions" />
      </Docs>
    </Member>
    <Member MemberName="ConvertNullToDBNull">
      <MemberSignature Language="C#" Value="public bool ConvertNullToDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertNullToDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、 <see cref="T:System.Web.UI.WebControls.Parameter" /> update、insert、または削除操作に渡される値は自動的にから変換 <see langword="null" /> に、 <see cref="F:System.DBNull.Value" /> 値を <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールです。</summary>
        <value>
          <see langword="true" />, 、存在する場合 <see langword="null" /> 値 <see cref="T:System.Web.UI.WebControls.Parameter" /> に渡されたオブジェクト、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> にコントロールを自動的に変換 <see cref="F:System.DBNull.Value" /> 値はそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変換せず `null` に、 <xref:System.DBNull.Value> 値、エラーが発生時に実行します。 使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull%2A> かを示すプロパティかどうか <xref:System.Web.UI.WebControls.Parameter> update、insert、または削除操作に渡される値は自動的にから変換 `null` に、 <xref:System.DBNull.Value> 値を <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DBNull.Value" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="DataObjectTypeName">
      <MemberSignature Language="C#" Value="public string DataObjectTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataObjectTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはクラスの名前を設定、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 更新プログラムのパラメーターのコントロールを使用して、挿入、またはデータ バインド コントロールから個々 の値を渡す代わりに、データの操作を削除します。</summary>
        <value>オブジェクトの種類を識別する部分的または完全修飾クラス名を <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> のパラメーターとして使用できる、 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />, 、<see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />, 、または <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 操作します。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 渡されるいくつかのパラメーターを指定する代わりに、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, 、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, 、および <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> メソッド、いくつかのデータ フィールドの値を集約する 1 つのオブジェクトを作成することができます。 このオブジェクトは、いくつかのパラメーターではなく、メソッドに渡されます。  
  
 既定の動作、 <xref:System.Web.UI.WebControls.ObjectDataSource> 、データ バインド コントロールにバインドされているコントロールは、データ バインド コントロールが作成される、 <xref:System.Web.UI.WebControls.Parameter> 、データ ソース内の各パラメーターのオブジェクト。 ビジネス オブジェクトは、多くのフィールドを持っている場合、その結果、メソッドは多数のフィールドもあります。<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティでは、各データ フィールドのプロパティを持つ型を指定することができます。 次に、メソッドにいくつかのパラメーターを渡す代わりに、ランタイムは 1 つのオブジェクトを作成し、そのすべてのプロパティを設定します。 このオブジェクトは、メソッド呼び出しのパラメーター コレクションに追加されます。  
  
 指定された型、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティは、パラメーターを持たない既定のコンス トラクターを持つ必要がありますので、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールは、型のインスタンスを作成できます。 種類は、設定可能なプロパティにも必要、 <xref:System.Web.UI.WebControls.ObjectDataSource> データ バインド コントロールから渡される値を持つオブジェクトを設定するとします。 プロパティの名前に、 <xref:System.Web.UI.WebControls.ObjectDataSource> データ バインド コントロールによって渡される値のパラメーターの名前と正確に一致する予定を管理します。  
  
 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティが設定され、 <xref:System.Web.UI.WebControls.ObjectDataSource> 制御は、データ連結コントロールで指定されているメソッドに関連付けられて、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> と <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> それぞれのプロパティがで指定されている型の 1 つのパラメーターを持つ必要があります、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティ。 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> プロパティに設定されて、 <xref:System.Web.UI.ConflictOptions.OverwriteChanges> 値で指定されたメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> プロパティで指定されている型の 1 つのパラメーターには、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティです。 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> プロパティに設定されて、 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値で指定されたメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> プロパティで指定されている型の 2 つのパラメーターには、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティです。 最初のパラメーターには、元の値が含まれています。2 番目のパラメーターには、新しい値が含まれています。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> と関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
   
  
## 例  
 セクションには、2 つのコード例が含まれています。 最初のコード例は、すべてのパラメーター値を 1 つのオブジェクトに結合する型を実装する方法を示しますを使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティです。 2 つ目のコード例では、最初のコード例で使用されている 2 つのクラスを使用した Web ページを示します。  
  
 次のコード例は、すべてのパラメーター値を 1 つのオブジェクトに結合する型を実装する方法を示しますを使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティです。 Select メソッド、 `AggregateData` クラスを返します。、 <xref:System.Data.DataTable> という 2 つの列を持つオブジェクト `Name` と `Number`です。 同様に、 `NewData` クラスは、2 つの読み取り\/書き込みプロパティを定義 `Name` と `Number`です。`Insert` のメソッド、 `AggregateData` クラス型の 1 つのパラメーターには、 `NewData`です。`TypeName` のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> に設定されている `AggregateData` と <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> にプロパティが設定されている `NewData`します。  
  
 [!code-csharp[ObjectDataSourceDataObjectTypeName\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateData.cs#2)]
 [!code-vb[ObjectDataSourceDataObjectTypeName\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateData.vb#2)]  
  
 次のコード例では、前のコード例で使用されている 2 つのクラスを使用した Web ページを示します。  
  
 [!code-csharp[ObjectDataSourceDataObjectTypeName\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/CS/AggregateDataPageCS.aspx#1)]
 [!code-vb[ObjectDataSourceDataObjectTypeName\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceDataObjectTypeName/VB/AggregateDataPageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>によって識別されるメソッドを呼び出して、削除操作を実行、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> プロパティに含まれるすべてのパラメーターで、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" /> コレクションです。</summary>
        <returns>場合に、基になるデータ ストレージから削除された行の数を表す値、 <see cref="P:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows" /> のプロパティ、 <see cref="T:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs" /> 設定されている、 <see cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" /> イベントです。 それ以外の場合、\-1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 前に、 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 操作を実行する、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> イベントです。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> イベント パラメーターの値を確認し、前に処理を実行する、 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 操作します。 削除操作を実行して、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトでは、リフレクションを使用して、によって識別されるオブジェクトのインスタンスを作成、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> プロパティです。 によって識別されるメソッドを呼び出して、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> を使用して、関連付けられたすべてのプロパティ <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> プロパティです。 」の手順に従って、パラメーターの名前が作成された削除パラメーターは、関連するデータ バインド コントロールから送られてきた場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> プロパティです。 後に、 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 操作が完了すると、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> イベントです。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> イベントを戻り値、出力パラメーターと、例外を分析し、後続の処理を実行します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> メソッドからデリゲートを <xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A> のメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
## データ バインド コントロール  
 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSource> など、データ バインド コントロールにコントロールが関連付けられている、 <xref:System.Web.UI.WebControls.GridView> コントロール必要はありませんを呼び出して、 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> ページ コードからメソッドです。<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> メソッドが代わりに、データ バインド コントロールが直接呼び出されます。  
  
 パラメーターのマージ、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 操作が完了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 戻り値または出力パラメーターの値を確認する場合、または後に例外がスローされたかどうかを判断するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 操作が完了します。 戻り値、出力パラメーター、および例外処理のプロパティから提供されて、 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> イベントに関連付けられているオブジェクト。  
  
 使用することができます、 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> から削除された行の数を取得するオブジェクト、 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> メソッドです。 これを行うには、設定、 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> プロパティです。 指定されたメソッドから削除された行の数を返す場合は、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> プロパティ値から入手できる、 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> オブジェクトです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つオブジェクトと <xref:System.Web.UI.WebControls.GridView> データを削除するコントロール。 2 つ目のコード例で示す、 `EmployeeLogic` 最初のコード例で使用されるクラスです。  
  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つコントロールと <xref:System.Web.UI.WebControls.GridView> データを削除するコントロール。 最初に、 <xref:System.Web.UI.WebControls.GridView> で指定されたメソッドを使用して、すべての従業員のコントロールを表示、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> からデータを取得するプロパティを `EmployeeLogic` オブジェクトです。<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> にプロパティが設定されている `true`, 、 <xref:System.Web.UI.WebControls.GridView> コントロールが自動的に表示、 **削除** \] ボタンをクリックします。  
  
 クリックすると、 **削除** で指定されたメソッドを使用して、ボタン、削除操作が実行される、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> プロパティおよびパラメーターで指定されている、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> コレクションです。 このコード例ではいくつか前処理および後処理手順も実行されます。`NorthwindEmployeeDeleting` を処理するデリゲートが呼び出され、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> イベントは、操作を実行する前におよび `NorthwindEmployeeDeleted` を処理するデリゲートが呼び出され、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 例外処理を実行する操作の完了後にイベントです。 このコード例では場合、 `NorthwindDataException` がスローされると、によって処理される、 `NorthwindEmployeeDeleted` メソッドです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_10\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_10\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 次のコード例は、 `EmployeeLogic` 前のコード例で使用されるクラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_10\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_10\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはメソッドまたは関数の名前を設定、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> データを削除するコントロールを呼び出します。</summary>
        <value>メソッドの名前を表す、または関数を文字列、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> を使用してデータを削除します。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ビジネス オブジェクトは、バッチではなく、一度に 1 レコードずつデータを削除すると見なされます。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> プロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 パラメーター名が用に構成されていることを確認、 <xref:System.Web.UI.WebControls.ObjectDataSource> の制御、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> コレクション選択メソッドによって返される列名に一致します。  
  
## オブジェクトの有効期間  
 によって識別されるメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> プロパティは、インスタンス メソッドであることができます、または `static` \(`Shared` Visual Basic で\) メソッドです。 ビジネス オブジェクトが作成され、破棄するたびにインスタンス メソッドである場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> プロパティが呼び出されます。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> と <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> する前に、ビジネス オブジェクトを使用するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> プロパティが呼び出されます。 処理するには、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 後に発生するイベントを <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> プロパティが呼び出されます。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable> 、インターフェイス、 <xref:System.IDisposable.Dispose%2A> オブジェクトが破棄される前に、メソッドが呼び出されます。 メソッドの場合、 `static` \(`Shared` Visual Basic で\)、メソッドがビジネス オブジェクトは作成されず、処理できない、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, 、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, 、および <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> イベントです。  
  
## パラメーターのマージ  
 パラメーターに追加されます、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 3 つのソースからのコレクション。  
  
-   実行時にデータ バインド コントロールです。  
  
-   `DeleteParameters` 要素を宣言します。  
  
-   `Deleting` メソッドを宣言します。  
  
 データ バインド コントロールから生成されるパラメーターを最初に、追加、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> コレクションです。 たとえば場合、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールにバインドする、 <xref:System.Web.UI.WebControls.GridView> 列を含むコントロール `Name` と `Number`, 、パラメーターを `Name` と `Number` コレクションに追加します。 パラメーターの正確な名前によって異なる、 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> プロパティです。 これらのパラメーターのデータ型は `string`です。 次で示されているパラメーター、 `DeleteParameters` 要素を追加します。 内のパラメーターの場合、 `DeleteParameters` になっているパラメーターと同じ名前を持つ要素が存在、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> で指定されているパラメーターと一致するコレクション、既存のパラメーターが変更された、 `DeleteParameters` 要素。 通常、パラメーターのデータの種類の変更に使用されます。 最後に、プログラムで追加および削除できます内のパラメーター、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> する前に発生するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> メソッドを実行します。 メソッドは、パラメーターは、マージ後に解決されます。 メソッドの解決については、次のセクションで説明します。  
  
## メソッドの解決  
 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> メソッドを呼び出して、データ フィールドで、宣言によって作成されたパラメーターのデータ バインド コントロールを `DeleteParameters` 要素、およびパラメーターで追加された、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> イベント ハンドラーがすべてマージします。 \(詳細については、前のセクションを参照してください\)。<xref:System.Web.UI.WebControls.ObjectDataSource> オブジェクトが呼び出すメソッドの検索を試みます。 指定されている名前を持つ 1 つまたは複数のメソッドの最初に、検索、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> プロパティです。 一致が見つからない場合、 <xref:System.InvalidOperationException> 例外がスローされます。 一致が見つかった場合は、一致するパラメーター名に検索されます。 たとえばで指定された型、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> プロパティという 2 つのメソッドには `DeleteARecord`です。 1 つ `DeleteARecord` 1 つのパラメーターを持つ `ID`, 、および、その他の `DeleteARecord` 2 つのパラメーターを持つ `Name` と `Number`です。 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> コレクションという名前の 1 つだけのパラメーターには `ID`, 、 `DeleteARecord` を持つメソッドだけ `ID` パラメーターが呼び出されます。 パラメーターの型は、メソッドを解決するのにはチェックされません。 パラメーターの順序は関係ありません。  
  
 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティを設定すると、メソッドが別の方法で解決します。<xref:System.Web.UI.WebControls.ObjectDataSource> で指定されている名前のメソッドを検索、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> で型の 1 つのパラメーターを受け取るプロパティが指定された、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティです。 この場合、パラメーターの名前は関係ありません。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つオブジェクトと <xref:System.Web.UI.WebControls.GridView> データを削除するコントロール。 2 つ目のコード例で示す、 `EmployeeLogic` 最初のコード例で使用されるクラスです。  
  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つコントロールと <xref:System.Web.UI.WebControls.GridView> データを削除するコントロール。 最初に、 <xref:System.Web.UI.WebControls.GridView> で指定されたメソッドを使用して、すべての従業員のコントロールを表示、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> からデータを取得するプロパティを `EmployeeLogic` オブジェクトです。<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> にプロパティが設定されている `true`, 、 <xref:System.Web.UI.WebControls.GridView> コントロールが自動的に表示、 **削除** \] ボタンをクリックします。  
  
 クリックすると、 **削除** で指定されたメソッドを使用して、ボタン、削除操作が実行される、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> プロパティおよびパラメーターで指定されている、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> コレクションです。 このコード例ではいくつか前処理および後処理手順も実行されます。`NorthwindEmployeeDeleting` を処理するデリゲートが呼び出され、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> イベント、操作を実行する前に、 `NorthwindEmployeeDeleted` を処理するデリゲートが呼び出され、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> 例外処理を実行する操作の完了後にイベントです。 この例では場合、 `NorthwindDataException` がスローされると、によって処理される、 `NorthwindDataException` を委任します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_10\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_10\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 次のコード例は、 `EmployeeLogic` 前のコード例で使用されるクラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_10\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_10\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用されるパラメーターを含むパラメーターのコレクションを取得、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> メソッドです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> によって使用されるパラメーターを格納している、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" /> メソッドです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 名前と型のパラメーターに含まれている、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> の名前と型のパラメーターのコレクションに一致する必要があります、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> メソッド シグネチャ。 パラメーター名が影響を受けました、 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> プロパティとは大文字小文字を区別します。 コレクション内のパラメーターは、データ バインド コントロール、宣言によって、指定されたパラメーターおよびプログラムによって追加されたパラメーターに含まれるデータによって異なります。 詳細についてを参照してください「パラメーターをマージ」 <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> と [Using Parameters with the ObjectDataSource Control](http://msdn.microsoft.com/ja-jp/45fb67ee-9be7-49b7-9421-e242203dafa4)です。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> プロパティの取得、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A> プロパティに格納されている、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 パラメーターのマージ、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>します。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つオブジェクトと <xref:System.Web.UI.WebControls.GridView> データを削除するコントロール。 2 つ目のコード例で示す、 `EmployeeLogic` 最初のコード例で使用されるクラスです。  
  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つコントロールと <xref:System.Web.UI.WebControls.GridView> データを削除するコントロール。 最初に、 <xref:System.Web.UI.WebControls.GridView> で指定されたメソッドを使用して、すべての従業員のコントロールを表示、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> からデータを取得するプロパティを `EmployeeLogic` オブジェクトです。<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> にプロパティが設定されている `true`, 、 <xref:System.Web.UI.WebControls.GridView> コントロールが自動的に表示、 **削除** \] ボタンをクリックします。  
  
 クリックすると、 **削除** \] ボタン、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> イベントは、2 つのパラメーターと共に呼び出されました。 1 つのパラメーター `EmpID`, から、 <xref:System.Web.UI.WebControls.DataGrid> 制御、およびに基づく、 <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> プロパティです。 その他のパラメーターは、宣言型 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> プロパティです。`EmployeeLogic` クラスのオーバー ロード、 `DeleteEmployee` メソッドです。 1 つのオーバー ロードは、 `NorthwindEmployee` パラメーター、およびその他の受け取り、 <xref:System.Int32> という名前のパラメーター `anID`します。<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> イベントは、エントリ、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> という 1 つだけのパラメーターを指定するプロパティが調整され `anID` から値を持つ `original_EmpID`です。 イベント ハンドラー存在する場合に、一致する `DeleteEmployee` メソッドが呼び出されます。  
  
 次のコード例を表示する Web ページを示しています、 <xref:System.Web.UI.WebControls.DataGrid> コントロールとハンドル、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> イベントです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_11\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/objds11cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_11\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/objds11vb.aspx#1)]  
  
 次のコード例は、 `EmployeeLogic` 前のコード例で使用されるクラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_11\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/CS/northwindemployee11.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_11\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_11/VB/northwindemployee11.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Deleting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生する前に、 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> 操作します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 、パラメーターの値を検証するか、前にパラメーター値を変更する、アプリケーションに固有である追加の初期化を実行するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールは、削除操作を実行します。 パラメーターとして利用可能な <xref:System.Collections.IDictionary> によってアクセスされるコレクション、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> によって公開されるプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> オブジェクトです。  
  
 設定して、削除操作を取り消すことができます、 <xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> に `true`します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つオブジェクトと <xref:System.Web.UI.WebControls.GridView> データを削除するコントロール。 2 つ目のコード例で示す、 `EmployeeLogic` 最初のコード例で使用されるクラスです。  
  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つコントロールと <xref:System.Web.UI.WebControls.GridView> データを削除するコントロール。 最初に、 <xref:System.Web.UI.WebControls.GridView> で指定されたメソッドを使用して、すべての従業員のコントロールを表示、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> からデータを取得するプロパティを `EmployeeLogic` オブジェクトです。<xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> にプロパティが設定されている `true`, 、 <xref:System.Web.UI.WebControls.GridView> コントロールが自動的に表示、 **削除** \] ボタンをクリックします。  
  
 クリックすると、 **削除** で指定されたメソッドを使用して、ボタン、削除操作が実行される、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> プロパティおよびパラメーターで指定されている、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> コレクションです。 このコード例ではいくつか前処理および後処理手順も実行されます。`NorthwindEmployeeDeleting` を処理するデリゲートが呼び出され、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> イベント、操作を実行する前におよび `NorthwindEmployeeDeleted` を処理するデリゲートが呼び出され、 <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> を例外処理を実行する操作の完了後にイベントです。 このコード例では場合、 `NorthwindDataException` がスローされると、によって処理される、 `NorthwindEmployeeDeleted` メソッドです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_10\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/objds10cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_10\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/objds10vb.aspx#1)]  
  
 次のコード例は、 `EmployeeLogic` 前のコード例で使用されるクラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_10\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/CS/northwindemployee10.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_10\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_10/VB/northwindemployee10.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Deleted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters" />
      </Docs>
    </Member>
    <Member MemberName="EnableCaching">
      <MemberSignature Language="C#" Value="public virtual bool EnableCaching { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCaching" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールがデータ キャッシュを有効にします。</summary>
        <value>
          <see langword="true" /> データ ソース コントロールのデータ キャッシュが有効になっている場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールはデータのキャッシュをサポートします。 データをキャッシュするために呼び出す、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドは、キャッシュからデータを取得ではなく、 <xref:System.Web.UI.WebControls.ObjectDataSource> 、ビジネス オブジェクトのインスタンスを作成し、データ メソッドを呼び出すことです。 キャッシュの有効期限、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドは、ビジネス オブジェクトからデータを取得し、もう一度、データをキャッシュします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールがデータを自動的にキャッシュと、 <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> にプロパティが設定されている `true` と <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> プロパティが、キャッシュはキャッシュ エントリが破棄される前にデータを保存する秒数を示す 0 より大きい値に設定します。 値 0 は、無限の深さのキャッシュを示します。  
  
   
  
## 例  
 次の 3 つの例では、Web ページ、分離コード ページのクラス、および Northwind データベースの Employees テーブルからレコードを取得するデータ アクセス クラスを表示します。  
  
 最初の例では 2 つの Web ページ <xref:System.Web.UI.WebControls.ObjectDataSource> 、コントロール、 <xref:System.Web.UI.WebControls.DropDownList> コントロール、および <xref:System.Web.UI.WebControls.DetailsView> コントロールです。 最初の <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールと <xref:System.Web.UI.WebControls.DropDownList> を取得して、データベースから従業員の名前を表示するコントロールを使用します。 2 番目 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールと <xref:System.Web.UI.WebControls.DetailsView> を取得し、ユーザーが選択されている従業員レコードを表示するコントロールを使用します。  
  
 キャッシュが有効になって、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 そのため、各レコードには、データベースから 1 回のみが取得されます。<xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> プロパティが"EmployeeDetails"に設定されているが、任意の文字列値がキーとして動作できます。 Web ページでは、 <xref:System.Web.UI.WebControls.Button> コントロールをユーザーがキャッシュされたデータを期限切れにクリックします。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx#3)]  
  
 2 番目の例では、ハンドラーを <xref:System.Web.UI.Control.Load> イベントとハンドラーを <xref:System.Web.UI.WebControls.Button.Click> のイベント、 <xref:System.Web.UI.WebControls.Button> コントロールです。<xref:System.Web.UI.Control.Load> イベント ハンドラーでは、キャッシュ項目を作成設定キーを使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 値。<xref:System.Web.UI.WebControls.Button.Click> イベント ハンドラーと同じキーを持つキャッシュ アイテムの削除、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> 値。 キャッシュ項目が削除されると、キーに依存しているすべてのキャッシュされたデータが有効期限が切れています。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default2.aspx.cs#4)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default2.aspx.vb#4)]  
  
 3 番目の例では、Northwind データベースと対話するデータ アクセス クラスを示します。 クラスでは、LINQ を使用して、従業員テーブルを照会します。 例では、LINQ to SQL クラスを Northwind データベースと Employees テーブルを表す必要があります。 詳細については、次を参照してください。 [方法: LINQ to Web プロジェクトで SQL クラスに作成](http://msdn.microsoft.com/ja-jp/20bf925f-2a6d-410d-8f65-7b5b8f555081)します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.EnableCaching" /> にプロパティが設定されている <see langword="true" /> によって、メソッドが指定されている場合、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> プロパティを返します。、 <see cref="T:System.Data.Common.DbDataReader" />です。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheDuration" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy" />
      </Docs>
    </Member>
    <Member MemberName="EnablePaging">
      <MemberSignature Language="C#" Value="public bool EnablePaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePaging" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ ソース コントロールが取得したデータのセットのページングをサポートするかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> データ ソース コントロールには、データのページングがサポートされている場合を取得します。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によってページング、 <xref:System.Web.UI.WebControls.ObjectDataSource> 設定によってコントロールが処理される、 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>, 、<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>, 、<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>, 、および <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> と適切なパラメーターを使用して、ビジネス オブジェクトの選択メソッドを定義します。 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> にプロパティが設定されている `true`, 、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> が要求される最初の行および要求された行の数の 2 つのパラメーターがコレクションに含まれています。 定義されているこれら 2 つのパラメーターの名前は、 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> と <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> プロパティです。`Select` メソッドは、要求された数の行を指定したインデックスを開始位置を返す必要があります。 ページ サイズでは、データが均等に分割されない可能性があります、ため最後のページより少ない行が含まれます。 したがって、要求された行の数が返される行の最大数では実際には  
  
 関連付けられたデータ バインド コントロールでページングが有効な場合、データ バインド コントロールは、 `Select` 開始インデックスと必要とされる行の数を持つメソッドです。 また場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> プロパティが設定されており、データ バインド コントロールは、ページャー コントロールを表示する前に、メソッドを呼び出します。 たとえば場合、 <xref:System.Web.UI.WebControls.GridView> コントロールがページ サイズは 5、およびによって指定されている方法で有効になっているページング、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> プロパティは、20 を返す、ポケットベルに 4 つのページが表示されます。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> プロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトです。  
  
   
  
## 例  
 次の 3 つの例では、Web ページ、分離コード ページのクラス、およびユーザーがレコードの数は、ページに表示を選択できるようにするデータ アクセス クラスを表示します。  
  
 Web ページには、 <xref:System.Web.UI.WebControls.ObjectDataSource> いるコントロール <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> にプロパティが設定されている `true`します。<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> プロパティがクエリでレコードの合計数を返すメソッドの名前に設定します。<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> プロパティおよび <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> プロパティは、Select メソッドで使用されているパラメーターの名前に設定されます。 ページにも含まれています、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_17\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_17\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 2 番目の例では、ハンドラーを <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> のイベント、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。 ハンドラーのセット内のコード、 <xref:System.Web.UI.WebControls.GridView.PageSize%2A> プロパティをユーザーの選択します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_17\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_17\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 3 番目の例では、Customers テーブルからデータを取得するデータ アクセス クラスを示します。 という名前のメソッドが含まれています `GetSubsetOfEmployees`, が割り当てられている、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 この例は、という名前のメソッドも含まれています。 `GetEmployeeCount`, 、が割り当てられている、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 クラスでは、LINQ を使用して、Customers テーブルを照会します。 例では、LINQ to SQL クラスを Northwind データベースと Customers テーブルを表す必要があります。 詳細については、次を参照してください。 [方法: LINQ to Web プロジェクトで SQL クラスに作成](http://msdn.microsoft.com/ja-jp/20bf925f-2a6d-410d-8f65-7b5b8f555081)します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_17\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_17\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
      </Docs>
    </Member>
    <Member MemberName="FilterExpression">
      <MemberSignature Language="C#" Value="public string FilterExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定されている方法ときに適用されるフィルター式で指定された、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> プロパティが呼び出されます。</summary>
        <value>メソッドまたはで識別される関数を使用してデータを取得するときに適用されるフィルター式を表す文字列、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールはデータのフィルター処理がサポートされる場合にのみ、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドが返される、 <xref:System.Data.DataSet> または <xref:System.Data.DataTable> オブジェクトです。  
  
 使用される構文、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> プロパティは、書式指定文字列スタイル式です。 フィルター式の構文は同じ構文で受け入れを <xref:System.Data.DataColumn.Expression%2A> プロパティです。 パラメーターを追加する場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> コレクション、書式文字列のプレース ホルダーを含めることもできます。 たとえば、 `"{0}"` パラメーター値の代わりに式にします。 内のパラメーターのインデックスに従ってプレースは、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> コレクションです。  
  
 内のパラメーターを含めることができます、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> プロパティです。 パラメーターの型が文字列型または char 型の場合は、パラメーターを単一引用符で囲みます。 パラメーターが数値型である場合、引用符は必要ありません。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> コレクションが含まれているプレース ホルダーに評価されるパラメーターを含む、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> プロパティです。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> プロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
> [!NOTE]
>  クライアントから受信したすべてのフィルター パラメーターの値を検証する必要があります。 ランタイムは、単にフィルター式にパラメーター値を代入しにそれを適用、 <xref:System.Data.DataSet> または <xref:System.Data.DataTable> によって返されるオブジェクト、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。 使用している場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 、フィルターを使用する前に、パラメーター値を検証する必要があります、返される項目数を制限するセキュリティ対策としてのプロパティです。  
  
   
  
## 例  
 次のコード例を使用してフィルター選択されたデータを表示する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> 中間層ビジネス オブジェクトからデータを取得するコントロールと <xref:System.Web.UI.WebControls.GridView> 結果を表示するコントロール。<xref:System.Web.UI.WebControls.ObjectDataSource> コントロールがデータを取得するメソッドとしてを取得する場合にのみにデータをフィルター処理、 <xref:System.Data.DataSet> または <xref:System.Data.DataTable> オブジェクトです。 このため、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティとしてデータを取得するビジネス オブジェクトのメソッドを識別する、 <xref:System.Data.DataSet>です。  
  
 コード例は、 <xref:System.Web.UI.WebControls.TextBox> コントロール、 <xref:System.Web.UI.WebControls.GridView> コントロール、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロール、および **送信** \] ボタンをクリックします。 既定では、 <xref:System.Web.UI.WebControls.TextBox> Northwind traders 社の従業員のいずれかの名前が表示されます。<xref:System.Web.UI.WebControls.GridView> で名前によって識別される従業員に関する情報を表示、 <xref:System.Web.UI.WebControls.TextBox>です。 別の従業員のデータを取得するには、内の従業員の完全名を入力、 <xref:System.Web.UI.WebControls.TextBox>, 、クリックして、 **送信** \] ボタンをクリックします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> プロパティで指定されているメソッドによって取得されるデータをフィルター処理に使用される式を指定する、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティです。 含まれるパラメーターに評価されるパラメーターのプレース ホルダーを使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> コレクションです。 この例では、パラメーターの型がスペースを含む可能性がある文字列型であるために、パラメーターのプレース ホルダーは単一引用符で制限されます。 パラメーターの型が数値または日付型の場合は、引用符は必要ありません。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_9\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_9\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 次のコード例では、上記のコード例では、中間層ビジネス オブジェクトの例を示します。 このコード例は、2 つの基本クラスで構成されます。  
  
-   `EmployeeLogic` ビジネス ロジックをカプセル化するクラスであるクラスです。  
  
-   `NorthwindEmployee` はモデル クラスを読み込んで、データ層からデータを永続化するために必要な基本的な機能のみを含むクラスです。  
  
 簡略化のため、 `EmployeeLogic` クラスは、静的なデータ層からデータを取得するのではなく、データ セットを作成します。 サンプルは、Northwind Traders の従業員をフィルター処理を示すための完全名を指定することに依存するためにもこの例では便利です。 稼働させるためには、コンパイルして、Web フォームのコード サンプルに用意されているこれらのクラスを使用する必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_9\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_9\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> プロパティが設定された、 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> メソッドは返しません、 <see cref="T:System.Data.DataSet" /> または <see cref="T:System.Data.DataTable" />です。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="Filtering">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フィルター操作の前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering> フィルター パラメーターの値の検証操作を実行するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールは、フィルター操作を実行します。 設定して、選択した操作を取り消すことができます、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs> に `true`します。 場合にのみこのイベントは、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> プロパティを設定します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Filtering?displayProperty=fullName> にイベントのデリゲート、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName> のイベント、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> と関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
> [!IMPORTANT]
>  クライアントから受信したすべてのフィルター パラメーターの値を検証する必要があります。 ランタイムは、単にフィルター式にパラメーター値を代入しにそれを適用、 <xref:System.Data.DataSet> または <xref:System.Data.DataTable> によって返されるオブジェクト、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。 使用している場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 、フィルターを使用する前に、パラメーター値を検証する必要があります、返される項目数を制限するセキュリティ対策としてのプロパティです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      </Docs>
    </Member>
    <Member MemberName="FilterParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection FilterParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.FilterParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>任意のパラメーターのプレース ホルダーに関連付けられているパラメーターのコレクションを取得、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> 文字列。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> については、パラメーター プレース ホルダーに関連付けられているパラメーターのセットを含んでいる、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールはデータのフィルター処理がサポートされる場合にのみ、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドが返される、 <xref:System.Data.DataSet> または <xref:System.Data.DataTable> オブジェクトです。  
  
 使用される構文、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 形式の文字列形式の式です。 フィルター式の構文は同じ構文で受け入れを <xref:System.Data.DataColumn.Expression%2A> プロパティです。 パラメーターを追加する場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> コレクション、書式文字列のプレース ホルダーを含めることもできます。 たとえば、 `"{0}"` パラメーター値の代わりに式にします。 内のパラメーターのインデックスに従ってプレースは、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> コレクションです。  
  
 内のパラメーターを含めることができます、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> プロパティです。 パラメーターが文字列型または char 型の場合は、パラメーターを単一引用符で囲みます。 パラメーターが数値型である場合、引用符は必要ありません。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> プロパティの取得、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A> プロパティに格納されている、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を使用してフィルター選択されたデータを表示する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> 中間層ビジネス オブジェクトからデータを取得するオブジェクトと <xref:System.Web.UI.WebControls.GridView> 結果を表示するコントロール。 2 番目のコード例では、最初のコード例で使用される中間層ビジネス オブジェクトの例を示します。  
  
 次のコード例を使用してフィルター選択されたデータを表示する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> 中間層ビジネス オブジェクトからデータを取得するコントロールと <xref:System.Web.UI.WebControls.GridView> 結果を表示するコントロール。<xref:System.Web.UI.WebControls.ObjectDataSource> コントロールがデータを取得するメソッドとしてを取得する場合にのみにデータをフィルター処理、 <xref:System.Data.DataSet> または <xref:System.Data.DataTable> オブジェクトです。 このため、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティとしてデータを取得するビジネス オブジェクトのメソッドを識別する、 <xref:System.Data.DataSet>です。  
  
 コード例は、 <xref:System.Web.UI.WebControls.TextBox> コントロール、 <xref:System.Web.UI.WebControls.GridView> コントロール、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロール、および **送信** \] ボタンをクリックします。 既定では、 <xref:System.Web.UI.WebControls.TextBox> Northwind traders 社の従業員のいずれかの名前が表示されます。<xref:System.Web.UI.WebControls.GridView> で名前によって識別される従業員に関する情報を表示、 <xref:System.Web.UI.WebControls.TextBox>です。 他の従業員のデータを取得する、 <xref:System.Web.UI.WebControls.TextBox>, 、従業員の完全な名前を入力し、クリックして、 **送信** \] ボタンをクリックします。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> プロパティで取得されるデータをフィルター処理に使用される式を指定する、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティです。 含まれるパラメーターに評価されるパラメーターのプレース ホルダーを使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> コレクションです。 この例では、パラメーターの型がスペースを含む可能性がある文字列型であるために、パラメーターのプレース ホルダーは単一引用符で制限されます。 パラメーターの型が数値または日付型の場合は、引用符は必要ありません。<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> コレクションには、1 つのパラメーターが含まれています。、 <xref:System.Web.UI.WebControls.FormParameter> オブジェクトにバインドされている、 <xref:System.Web.UI.WebControls.TextBox> コントロールです。  
  
> [!IMPORTANT]
>  クライアントから受信したすべてのフィルター パラメーターの値を検証する必要があります。 ランタイムは、単にフィルター式にパラメーター値を代入しにそれを適用、 <xref:System.Data.DataView> によって返されるオブジェクト、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。 使用している場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 、フィルターを使用する前に、パラメーター値を検証する必要があります、返される項目数を制限するセキュリティ対策としてのプロパティです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_9\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_9\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 次のコード例では、上記のコード例では、中間層ビジネス オブジェクトの例を示します。 このコード例は、2 つの基本クラスで構成されます。  
  
-   `EmployeeLogic` ビジネス ロジックをカプセル化するクラスであるクラスです。  
  
-   `NorthwindEmployee` はモデル クラスを読み込んで、データ層からデータを永続化するために必要な基本的な機能のみを含むクラスです。  
  
 簡略化のため、 `EmployeeLogic` クラスは、静的なデータ層からデータを取得するのではなく、データ セットを作成します。 サンプルは、Northwind Traders の従業員をフィルター処理を示すための完全名を指定することに依存するためにもこの例では便利です。 稼働させるためには、コンパイルして、Web フォームのコード サンプルに用意されているこれらのクラスを使用する必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_9\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_9\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">設定する、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" /> プロパティおよび <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> メソッドは返しません、 <see cref="T:System.Data.DataSet" /> または <see cref="T:System.Data.DataTable" />です。</exception>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.FilterExpression" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Filtering" />
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewName">取得するビューの名前。<see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 1 つのビューをサポートしている <c>viewName</c> は無視されます。</param>
        <summary>データ ソース コントロールに関連付けられている名前付きのデータ ソース ビューを取得します。</summary>
        <returns>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSourceView" /> という <see langword="DefaultView" /> と関連付けられている、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールは、1 つだけのデータ ソース ビューをサポートしています。 すべてのデータ ソース ビュー オブジェクトと同様、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> 関連付けられているデータをソース管理の機能を定義を実行し、すべての作業を基になるデータ ストレージからデータを取得する必要はし、並べ替え、挿入、削除、および更新などの操作を実行します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> ページ コードではなく、データ バインド コントロールによって呼び出されるメソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定した <paramref name="viewName" /> は <see langword="null" /> またはもの以外の <see langword="DefaultView" />です。</exception>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSourceView" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.GetViewNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>関連付けられているビュー オブジェクトのリストを表す名前のコレクションを取得、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトです。</summary>
        <returns>
          <see cref="T:System.Collections.ICollection" /> に関連付けられているビューの名前を格納している、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールという名前の 1 つのビューをサポートしている `DefaultView`, 、その基になるデータ。<xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A> メソッドは、この 1 つのビューの名前の単一要素のコレクションを返します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.GetViewNames%2A> ページ コードではなく、データ バインド コントロールによって呼び出されるメソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>によって識別されるメソッドを呼び出して、挿入操作を実行、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> プロパティと任意のパラメーターで、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" /> コレクションです。</summary>
        <returns>基になるデータ ストレージに挿入される行の数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 前に、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作を実行する、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> イベントです。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> イベント パラメーターの値を確認し、前に処理を実行する、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作します。 挿入操作を実行する、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトでは、リフレクションを使用して、によって識別されるオブジェクトのインスタンスを作成、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> プロパティです。 によって識別されるメソッドを呼び出して、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> を使用して、関連付けられたすべてのプロパティ <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> プロパティです。 後に、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作が完了すると、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> イベントです。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> イベントを戻り値、出力パラメーターと、例外を分析し、後続の処理を実行します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> メソッドからデリゲートを <xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A> のメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> と関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 パラメーターのマージ、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>します。  
  
## データ バインド コントロール  
 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSource> など、データ バインド コントロールに関連付けられたオブジェクト、 <xref:System.Web.UI.WebControls.GridView> コントロール必要はありませんを呼び出して、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> ページ コードからメソッドです。<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> メソッドが代わりに、データ バインド コントロールが直接呼び出されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" /> 操作が完了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> 戻り値または出力パラメーターの値を確認する場合、または後に例外がスローされたかどうかを判断するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作が完了します。 戻り値、出力パラメーター、および例外処理のプロパティから提供されて、 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Inserting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生する前に、 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" /> 操作します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 、パラメーターの値を検証するか、前にパラメーター値を変更する、アプリケーションに固有である追加の初期化を実行するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールは、挿入操作を実行します。 パラメーターとして利用可能な <xref:System.Collections.IDictionary> によってアクセスされるコレクション、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> によって公開されるプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> オブジェクトです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つオブジェクトと <xref:System.Web.UI.WebControls.DetailsView> データを挿入するコントロール。 2 番目のコード例では、最初のコード例で使用される中間層ビジネス オブジェクトの例を示します。  
  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つコントロールと <xref:System.Web.UI.WebControls.DetailsView> データを挿入するコントロール。 最初に、 <xref:System.Web.UI.WebControls.DetailsView> 新しい表示 `NorthwindEmployee` レコードを自動的に生成されたと共に **挿入** \] ボタンをクリックします。 フィールドにデータを入力したら、 <xref:System.Web.UI.WebControls.DetailsView> をクリックして、制御、 **挿入** \] ボタンをクリックします。<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティを識別するメソッドは、挿入操作を実行します。  
  
 この例では、 `UpdateEmployeeInfo` メソッドが、挿入を実行に使用されます。 ただし、必要な、 `NorthwindEmployee` データを挿入するパラメーターです。 コレクションではこのため、文字列を <xref:System.Web.UI.WebControls.DetailsView> コントロール パスに自動的には不十分です。`NorthwindEmployeeInserting` デリゲートは、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> を処理するオブジェクト、 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> イベントの前に、入力パラメーターを操作して、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作は次に進みます。`UpdateEmployeeInfo` メソッドが必要です、 `NorthwindEmployee` をパラメーターとしてオブジェクトのいずれかの文字列のコレクションを使用して作成されに追加、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> パラメーター名を使用して、コレクション \(`ne`\) に、メソッドの入力が必要です。 利用するために設計されていないいるメソッドや型のデータ ソースとして既存の中間層オブジェクトを使用する場合は、上記のような手順を実行することがあります、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作を実行すると、によって識別されるメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティが呼び出されます。 場合、 `Insert` オブジェクトのメソッドが、パラメーターを含むメソッド シグネチャを持つ、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> コレクションのメソッド シグネチャのパラメーターに一致する名前を持つパラメーターを含める必要があります、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> メソッドを正常に完了します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_4\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_4\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 次のコード例では、上記のコード例では、中間層ビジネス オブジェクトの例を示します。 このコード例は、2 つの基本クラスで構成されます。  
  
-   `EmployeeLogic` ビジネス ロジックをカプセル化するステートレスなクラスであるクラスです。  
  
-   `NorthwindEmployee` はモデル クラスを読み込んで、データ層からデータを永続化するために必要な基本的な機能のみを含むクラスです。  
  
 追加 `NorthwindDataException` クラスは、便宜上指定します。 稼働させるためには、コンパイルして、これらのクラスを使用する必要があります。`UpdateEmployeeInfo` メソッドは完全に実装されていませんはないデータを挿入する Northwind Traders データベースにこの例を試すときようにします。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_4\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_4\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Inserted" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      </Docs>
    </Member>
    <Member MemberName="InsertMethod">
      <MemberSignature Language="C#" Value="public string InsertMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはメソッドまたは関数の名前を設定、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールがデータを挿入するために呼び出します。</summary>
        <value>メソッドの名前を表す、または関数を文字列、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> を使用してデータを挿入します。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ビジネス オブジェクトは、バッチではなく、一度に 1 レコードずつデータを挿入すると見なされます。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> オブジェクトです。  
  
## オブジェクトの有効期間  
 によって識別されるメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティは、インスタンス メソッドであることができます、または `static` \(`Shared` Visual Basic で\) メソッドです。 ビジネス オブジェクトが作成され、毎回によって指定されたメソッドが破棄インスタンス メソッドである場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティが呼び出されます。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> と <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> する前に、ビジネス オブジェクトを使用するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティが呼び出されます。 処理するには、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> で指定されたメソッドの後に発生するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> プロパティが呼び出されます。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable> 、インターフェイス、 <xref:System.IDisposable.Dispose%2A> オブジェクトが破棄される前に、メソッドが呼び出されます。 メソッドの場合 `static` \(`Shared` Visual Basic で\)、ビジネス オブジェクトは作成されず、処理できない、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, 、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, 、および <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> イベントです。  
  
## パラメーターのマージ  
 パラメーターに追加されます、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 3 つのソースからのコレクション。  
  
-   実行時にデータ バインド コントロールです。  
  
-   `InsertParameters` 要素を宣言します。  
  
-   `Inserting` メソッドでは、プログラムを使用しています。  
  
 データ バインド コントロールから生成されるパラメーターを最初に、追加、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> コレクションです。 などの場合、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールにバインドする、 <xref:System.Web.UI.WebControls.GridView> 列を含むコントロール `Name` と `Number`, 、パラメーターを `Name` と `Number` コレクションに追加します。 これらのパラメーターのデータ型は `string`です。 次で示されているパラメーター、 `InsertParameters` 要素を追加します。 内のパラメーターの場合、 `InsertParameters` になっているパラメーターと同じ名前を持つ要素が存在、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> で指定されているパラメーターと一致するコレクション、既存のパラメーターが変更された、 `InsertParameters` 要素。 通常、パラメーターのデータの種類の変更に使用されます。 最後に、プログラムで追加および削除できます内のパラメーター、 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> する前に発生するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> メソッドを実行します。 メソッドは、パラメーターは、マージ後に解決されます。 メソッドの解決については、次のセクションで説明します。  
  
> [!IMPORTANT]
>  クライアントから受信したすべてのパラメーター値を検証する必要があります。 ランタイムは、パラメーター値に、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティです。  
  
## メソッドの解決  
 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> メソッドを呼び出して、データ フィールドで、宣言によって作成されたパラメーターのデータ バインド コントロールを `InsertParameters` 要素、およびパラメーターで追加された、 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> イベント ハンドラーがすべてマージします。 \(詳細については、前のセクションを参照してください\)。<xref:System.Web.UI.WebControls.ObjectDataSource> オブジェクトが呼び出すメソッドの検索を試みます。 指定されている名前を持つ 1 つまたは複数のメソッドの最初に、検索、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティです。 一致が見つからない場合、 <xref:System.InvalidOperationException> 例外がスローされます。 一致が見つかった場合は、一致するパラメーター名に検索されます。 たとえばで指定された型、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> プロパティという 2 つのメソッドには `InsertARecord`です。 1 つ `InsertARecord` 1 つのパラメーターを持つ `ID`, 、および、その他の `InsertARecord` 2 つのパラメーターを持つ `Name` と `Number`です。 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> コレクションという名前の 1 つだけのパラメーターには `ID`, 、 `InsertARecord` を持つメソッドだけ `ID` パラメーターが呼び出されます。 パラメーターの型は、メソッドを解決するのにはチェックされません。 パラメーターの順序は関係ありません。  
  
 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティを設定すると、メソッドが別の方法で解決します。<xref:System.Web.UI.WebControls.ObjectDataSource> で指定されている名前のメソッドを検索、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> で型の 1 つのパラメーターを受け取るプロパティが指定された、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティです。 この場合、パラメーターの名前は関係ありません。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つオブジェクトと <xref:System.Web.UI.WebControls.DetailsView> データを挿入するコントロール。 2 番目のコード例では、最初のコード例で使用される中間層ビジネス オブジェクトの例を示します。  
  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つコントロールと <xref:System.Web.UI.WebControls.DetailsView> データを挿入するコントロール。 最初に、 <xref:System.Web.UI.WebControls.DetailsView> 新しい表示 `NorthwindEmployee` レコードを自動的に生成されたと共に **挿入** \] ボタンをクリックします。 フィールドにデータを入力したら、 <xref:System.Web.UI.WebControls.DetailsView> をクリックして、制御、 **挿入** \] ボタンをクリックします。<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティを識別するメソッドは、挿入操作を実行します。  
  
 この例では、 `UpdateEmployeeInfo` メソッドが、挿入を実行に使用されます。 ただし、必要な、 `NorthwindEmployee` データを挿入するパラメーターです。 コレクションではこのため、文字列を <xref:System.Web.UI.WebControls.DetailsView> コントロール パスに自動的には不十分です。`NorthwindEmployeeInserting` デリゲートは、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> を処理するオブジェクト、 <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> イベントの前に、入力パラメーターを操作して、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作は次に進みます。`UpdateEmployeeInfo` メソッドが必要です、 `NorthwindEmployee` をパラメーターとしてオブジェクトのいずれかの文字列のコレクションを使用して作成されに追加、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> パラメーター名を使用して、コレクション \(`ne`\) に、メソッドの入力が必要です。 利用するために設計されていないいるメソッドや型のデータ ソースとして既存の中間層オブジェクトを使用する場合は、上記のような手順を実行することがあります、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作を実行すると、によって識別されるメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティが呼び出されます。 場合、 `Insert` オブジェクトのメソッドが、パラメーターを含むメソッド シグネチャを持つ、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> コレクションのメソッド シグネチャのパラメーターに一致する名前を持つパラメーターを含める必要があります、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> メソッドを正常に完了します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_4\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/objds4cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_4\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/objds4vb.aspx#1)]  
  
 次のコード例では、上記のコード例では、中間層ビジネス オブジェクトの例を示します。 このコード例は、2 つの基本クラスで構成されます。  
  
-   `EmployeeLogic` ビジネス ロジックをカプセル化するステートレスなクラスであるクラスです。  
  
-   `NorthwindEmployee` はモデル クラスを読み込んで、データ層からデータを永続化するために必要な基本的な機能のみを含むクラスです。  
  
 追加 `NorthwindDataException` クラスは、便宜上指定します。 稼働させるためには、コンパイルして、これらのクラスを使用する必要があります。`UpdateEmployeeInfo` メソッドは完全に実装されていませんはないデータを挿入する Northwind Traders データベースにこの例を試すときようにします。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_4\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/CS/northwindemployee4.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_4\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_4/VB/northwindemployee4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用されるパラメーターを含むパラメーターのコレクションを取得、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> プロパティです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> で識別されるメソッドによって使用されるパラメーターを格納している、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 名前と型のパラメーターに含まれている、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> コレクションは、名前とされているパラメーターの型を一致する必要があります、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティ シグネチャ。 パラメーター名は大文字小文字を区別します。 などのパラメーターの指定のデータ バインド コントロールを使用する場合、 <xref:System.Web.UI.WebControls.GridView> と <xref:System.Web.UI.WebControls.DetailsView> 、コントロール、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールは、データ バインド コントロールによって提供されるパラメーターを使用して、コレクションに明示的に指定されているパラメーターを自動的にマージします。 これは、データ バインド コントロールは、パラメーターとして常に提供しているため重要 <xref:System.String> 型、およびメソッドのシグネチャに数値または日付型の場合は、必要な明示的が含まれる内のパラメーター、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 、適切な型のコレクション。 それ以外の場合、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールはコレクション内のパラメーターで定義されている型に従ったパラメーターをキャストしようとしています。 詳細については、「[Using Parameters with the ObjectDataSource Control](http://msdn.microsoft.com/ja-jp/45fb67ee-9be7-49b7-9421-e242203dafa4)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> プロパティの取得、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A> プロパティに格納されている、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> と関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 パラメーターのマージ、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>します。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つオブジェクトと <xref:System.Web.UI.WebControls.DetailsView> データを挿入するコントロール。 2 番目のコード例の実装例を提供する、 `Insert` 最初のコード例で使用されるメソッドです。  
  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つコントロールと <xref:System.Web.UI.WebControls.DetailsView> データを挿入するコントロール。 最初に、 <xref:System.Web.UI.WebControls.DetailsView> が新しいデータを入力できるテキスト ボックスを表示 `NorthwindEmployee` レコードを自動的に生成されたと共に **挿入** \] ボタンをクリックします。 フィールドにデータを入力したら、 <xref:System.Web.UI.WebControls.DetailsView> をクリックして、制御、 **挿入** \] ボタンをクリックします。<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティを識別するメソッドは、挿入操作を実行します。  
  
 クリックすると、 **挿入** で指定されたメソッドを使用して、ボタン、操作が実行される、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティおよびパラメーターで指定されている、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> コレクションです。 このコード例では、1 つのパラメーターがで指定された、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 管理者の ID に対応するコレクション ID を表示する場合でも、これは、 <xref:System.Web.UI.WebControls.GridView.Rows%2A> のコレクション、 <xref:System.Web.UI.WebControls.DetailsView> として制御、 <xref:System.Web.UI.WebControls.BoundField> オブジェクトを文字列として渡される、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 明示的に追加することで、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 使用して、コレクション、 <xref:System.Web.UI.WebControls.Parameter.Type%2A> プロパティに設定、 <xref:System.TypeCode.Int32> 値、それが渡されますによって適切、 <xref:System.Web.UI.WebControls.ObjectDataSource> としてメソッドに、 <xref:System.Int32>, としてではなく文字列です。  
  
 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 操作を実行すると、によって識別されるメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティが呼び出されます。 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> オブジェクトのメソッドが、パラメーターを含むメソッド シグネチャを持つ、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> コレクションのメソッド シグネチャのパラメーターに一致する名前を持つパラメーターを含める必要があります、 <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> メソッドを正常に完了します。  
  
> [!IMPORTANT]
>  クライアントから受信したすべてのパラメーター値を検証する必要があります。 ランタイムは、パラメーター値に、 <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> プロパティです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_8\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/objds8cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_8\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/objds8vb.aspx#1)]  
  
 次のコード例の実装例を提供する、 `Insert` 前のコード例を使用するメソッドです。`InsertNewEmployeeWrapper` メソッドが追加、 `EmployeeLogic` で提供されている中間層オブジェクト、 <xref:System.Web.UI.WebControls.ObjectDataSource> をより簡単に操作するオブジェクトを有効にするクラスの概要、 <xref:System.Web.UI.WebControls.ObjectDataSource> 実際のビジネス ロジックに大幅な書き直しなしの Web シナリオで制御します。  
  
 この例を実行するが必要、 `NorthwindEmployee` クラスで提供されている、 <xref:System.Web.UI.WebControls.ObjectDataSource> クラスの概要。 この例で接続する方法のみ、 <xref:System.Web.UI.WebControls.ObjectDataSource> パラメーターを使用して新しいデータベース レコードのデータを取得するビジネス オブジェクト メソッドにします。 例が、データベースにレコードを追加できません、 `Save` のメソッド、 `NorthwindEmployee` クラスでは、データベースを更新するためのコードは含まれません。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_8\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/CS/northwindemployee8.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_8\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_8/VB/northwindemployee8.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.InsertMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Insert" />
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">コントロールの保存されているビュー ステートの値を格納するオブジェクト。</param>
        <summary>以前に保存した <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールのビュー ステートを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、主に、.NET Framework インフラストラクチャによって使用され、コードから直接使用するものではありません。 ただし、コントロールの開発者は、カスタム サーバー コントロールがそのビューステートを復元する方法を指定するには、このメソッドをオーバーライドすることができます。 詳細については、「[ASP.NET State Management Overview](http://msdn.microsoft.com/ja-jp/0218d965-5d30-445b-b6a6-8870e70e63ce)」を参照してください。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.LoadViewState%2A> メソッドの以前に保存されたビューステートの読み込みを使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>The <see cref="M:System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)" /> method is used primarily by control developers when extending the <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> control.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MaximumRowsParameterName">
      <MemberSignature Language="C#" Value="public string MaximumRowsParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MaximumRowsParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("maximumRows")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはビジネス オブジェクト データ取得メソッドのパラメーターのデータ ソースのページング サポートを取得するレコードの数を示すために使用される名前を設定します。</summary>
        <value>名前、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> パラメーターを取得するレコードの数を示すために使用されます。 既定値は、<c>"maximumRows"</c> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> プロパティは、データ ソースのページングをサポートするために使用します。 ページングをサポートする方法について、 <xref:System.Web.UI.WebControls.ObjectDataSource> 制御を参照してください <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> プロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
   
  
## 例  
 次の 3 つの例では、Web ページ、分離コード ページのクラス、およびユーザーがレコードの数は、ページに表示を選択できるようにするデータ アクセス クラスを表示します。  
  
 Web ページには、 <xref:System.Web.UI.WebControls.ObjectDataSource> いるコントロール <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> にプロパティが設定されている `true`します。<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> プロパティがクエリでレコードの合計数を返すメソッドの名前に設定します。<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> プロパティおよび <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> プロパティは、Select メソッドで使用されているパラメーターの名前に設定されます。 ページにも含まれています、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_17\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_17\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 2 番目の例では、ハンドラーを <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> のイベント、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。 ハンドラーのセット内のコード、 <xref:System.Web.UI.WebControls.GridView.PageSize%2A> プロパティをユーザーの選択します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_17\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_17\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 3 番目の例では、Customers テーブルからデータを取得するデータ アクセス クラスを示します。 という名前のメソッドが含まれています `GetSubsetOfEmployees`, が割り当てられている、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 この例は、という名前のメソッドも含まれています。 `GetEmployeeCount`, 、が割り当てられている、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 クラスでは、LINQ を使用して、Customers テーブルを照会します。 例では、LINQ to SQL クラスを Northwind データベースと Customers テーブルを表す必要があります。 詳細については、次を参照してください。 [方法: LINQ to Web プロジェクトで SQL クラスに作成](http://msdn.microsoft.com/ja-jp/20bf925f-2a6d-410d-8f65-7b5b8f555081)します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_17\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_17\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="ObjectCreated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>によって識別されるオブジェクトの後に発生する、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> プロパティを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> ビジネス オブジェクトで他のメソッドを呼び出すイベントのプロパティを設定または前に、ビジネス オブジェクトに固有の他の初期化を実行、 <xref:System.Web.UI.WebControls.ObjectDataSource> オブジェクトは、データ操作を実行するには、ビジネス オブジェクト データ メソッドを呼び出します。 オブジェクトへの参照がによってアクセスされる、 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> によって公開されるプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> オブジェクトです。  
  
 識別するデータの操作を実行する方法があるかどうかは `static` \(`Shared` Visual Basic で\)、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> と <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> イベントが発生することはありません。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
      </Docs>
    </Member>
    <Member MemberName="ObjectCreating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>によって識別されるオブジェクトの前に発生する、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> プロパティを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 識別するデータの操作を実行する方法があるかどうかは `static` \(`Shared` Visual Basic で\)、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> と <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> イベントが発生することはありません。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールが自動的にリフレクションを使用してそのインスタンスを作成するビジネス オブジェクトの既定のコンス トラクターを呼び出します。 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> イベントを明示的に別のコンス トラクターを呼び出すし、結果をオブジェクトのインスタンスを設定、 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> 、関連するプロパティ <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> オブジェクトです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つオブジェクトと <xref:System.Web.UI.WebControls.GridView> 情報を表示するコントロール。 2 番目のコード例では、最初のコード例で使用される中間層ビジネス オブジェクトを提供します。  
  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つコントロールと <xref:System.Web.UI.WebControls.GridView> 情報を表示するコントロール。 Web ページが実行される各データ操作の時間やリソース\) といったを作成する非常に高価であるビジネス オブジェクトを操作する場合があります。 負荷の高いオブジェクトを使用する方法の 1 つは、1 回、そのインスタンスを作成し、し、それを作成して各データ操作に破棄するのではなく、後続の操作をキャッシュすることです。  
  
> [!NOTE]
>  運用アプリケーションで複数の要求が同時に同じインスタンスを使用するしまうとする可能性があります。 そのため、オブジェクトはスレッド セーフ方式で実装する必要があります。  
  
 このコード例では、このパターンを示します。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> イベントを最初に、オブジェクトのキャッシュを確認し、いずれかが既にキャッシュされていない場合にのみ、オブジェクトのインスタンスを作成します。 次に、処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> イベントを破棄するのではなく、将来使用するため、ビジネス オブジェクトをキャッシュします。 このコード例では、 <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> にオブジェクトが設定されている `true` を特定する、 <xref:System.Web.UI.WebControls.ObjectDataSource> を呼び出していない <xref:System.IDisposable.Dispose%2A> オブジェクトのメソッドです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_16\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_16\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 次のコード例では、上記のコード例では中間層ビジネス オブジェクトの例を提供します。 コード例で定義された、基本的なビジネス オブジェクトから成る、 `EmployeeLogic` ビジネス ロジックをカプセル化するステートフルなクラスであるクラスです。 稼働させるためには、このコードをライブラリとしてコンパイルを ASP.NET ページ \(.aspx ファイル\) からこれらのクラスを使用する必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_16\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_16\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnObjectCreating(System.Web.UI.WebControls.ObjectDataSourceEventArgs)" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      </Docs>
    </Member>
    <Member MemberName="ObjectDisposing">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>によって識別されるオブジェクトの前に発生する、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" /> プロパティは破棄されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> イベントは、ビジネス オブジェクトのインスタンスが破棄される前に常に発生します。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable> 、インターフェイス、 <xref:System.IDisposable.Dispose%2A> このイベントが発生した後、メソッドが呼び出されます。  
  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 、オブジェクトで他のメソッドを呼び出すイベントのプロパティを設定またはクリーンアップを実行は、オブジェクトが破棄される前に、オブジェクトに固有です。 オブジェクトへの参照がによってアクセスされる、 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A> によって公開されるプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> オブジェクトです。  
  
 使用すると、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールと LINQ to SQL クラスには、イベントのハンドラーで、データ コンテキスト クラスの破棄を取り消す必要があります、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> イベントです。 この手順が必要な LINQ to SQL は、遅延実行をサポートしているため、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールは Select 操作の完了後、データ コンテキストを破棄しようとしています。  
  
 イベントを処理する方法の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つオブジェクトと <xref:System.Web.UI.WebControls.GridView> 情報を表示するコントロール。 2 番目のコード例では、最初のコード例で使用される中間層ビジネス オブジェクトを提供します。  
  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource> ビジネス オブジェクトを持つコントロールと <xref:System.Web.UI.WebControls.GridView> 情報を表示するコントロール。 Web ページが実行される各データ操作の時間やリソース\) といったを作成する非常に高価であるビジネス オブジェクトを操作する場合があります。 負荷の高いオブジェクトを使用する方法の 1 つは、1 回、そのインスタンスを作成し、し、それを作成して各データ操作に破棄するのではなく、後続の操作をキャッシュすることです。 この例では、このパターンを示します。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> イベントを最初に、オブジェクトのキャッシュを確認し、いずれかが既にキャッシュされていない場合にのみ、インスタンスを作成します。 次に、処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> イベントを破棄するのではなく、将来使用するため、ビジネス オブジェクトをキャッシュします。 このコード例では、 <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> にオブジェクトが設定されている `true` を特定する、 <xref:System.Web.UI.WebControls.ObjectDataSource> を呼び出していない、 <xref:System.IDisposable.Dispose%2A> オブジェクトのメソッドです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_16\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/objds16cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_16\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/objds16vb.aspx#1)]  
  
 次のコード例では、上記のコード例では中間層ビジネス オブジェクトの例を提供します。 コード例で定義された、基本的なビジネス オブジェクトから成る、 `EmployeeLogic` ビジネス ロジックをカプセル化するステートフルなクラスであるクラスです。 稼働させるためには、このコードをライブラリとしてコンパイルを ASP.NET ページ \(.aspx ファイル\) からこれらのクラスを使用する必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_16\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/CS/northwindemployee16.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_16\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_16/VB/northwindemployee16.vb#2)]  
  
 次の例では、処理する方法、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> イベントを使用する場合、 <xref:System.Web.UI.WebControls.ObjectDataSource> linq TO SQL クラスを使用した制御します。  
  
```vb  
Public Sub ExampleObjectDisposing(ByVal sender As Object, _   
        ByVal e As ObjectDataSourceDisposingEventArgs)  
    e.Cancel = True  
End Sub  
```  
  
```csharp  
public void ExampleObjectDisposing(object sender,   
        ObjectDataSourceDisposingEventArgs e)  
{  
    e.Cancel = true;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated" />
      </Docs>
    </Member>
    <Member MemberName="OldValuesParameterFormatString">
      <MemberSignature Language="C#" Value="public string OldValuesParameterFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OldValuesParameterFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("{0}")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または元の値に渡されるパラメーターの名前に適用する書式指定文字列の設定、 <see langword="Delete" /> または <see langword="Update" /> メソッドです。</summary>
        <value>いずれかの名前に適用される書式指定文字列を表す文字列 <paramref name="oldValues" /> またはに重要なパラメーターが渡された、 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Delete" /> または <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> メソッドです。 既定値は <c>"{0}"</c>, 、フィールド名は、パラメーター名を意味します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> で識別されるようプロパティが主キーのみに適用、 `DataKeyNames` プロパティ、または削除、データ連結コントロールのシナリオを更新し、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> プロパティに設定されて、 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値、および元の値のセットが対応するデータのメソッドに渡されます。  
  
 次に、2 つの一般的なシナリオが変わることがあります、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> プロパティ。  
  
-   更新時に新旧の値を区別するためにプロパティを変更することがあります。 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> プロパティに設定されて、 <xref:System.Web.UI.ConflictOptions.CompareAllValues> 値の場合は、元と新しい値の両方に追加するためのパラメーター、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> コレクションです。 書式指定文字列の各データ フィールドに同じ名前の 2 つのパラメーターが作成されます。 元の値パラメーターの名前を変更すると、競合を検出して、キーの値を比較する元のデータ ソースにデータを比較できます。  
  
-   一部のビジュアル デザイナーでは、元の値とキーの特定の名前付けスキームを実装します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> プロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>追加、 <see cref="E:System.Web.UI.Page.LoadComplete" /> イベント ハンドラーを含むページに、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.OnInit%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)" /> method in a derived class, be sure to call the <see cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" /> method for the base class so that registered delegates receive the event.</para>
        </block>
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ParsingCulture">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ParsingCulture ParsingCulture" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.ParsingCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParsingCulture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、によって示された型のオブジェクトを作成するために、文字列の値を実際のプロパティの型に変換するときにどのようなカルチャ情報が使用されるかを示す値を設定または <see cref="P:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName" />です。</summary>
        <value>カルチャ情報。 既定値は <see cref="F:System.Web.UI.WebControls.ParsingCulture.Invariant" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.SaveViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールの状態を保存します。</summary>
        <returns>サーバー コントロールの現在のビューステート; を返しますそれ以外の場合、返す <see langword="null" />, 、コントロールに関連付けられたビューステートがない場合は、です。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.IStateManager.SaveViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>によって識別されるメソッドを呼び出すことによって、基になるデータ ストレージからデータを取得、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> でパラメーターを持つプロパティ、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" /> コレクションです。</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerable" /> データ行のリスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されたメソッドはメソッド シグネチャを持つ可能性がありますが、返す必要がありますか、または次の表に示された種類のいずれかから派生する、 <xref:System.Web.UI.WebControls.ObjectDataSource> を制御します。  
  
|戻り値の型|アクション|  
|-----------|-----------|  
|<xref:System.Collections.IEnumerable>|<xref:System.Collections.IEnumerable> によって返される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。|  
|<xref:System.Data.DataTable>|A <xref:System.Data.DataView> を使用して作成された、 <xref:System.Data.DataTable> によって返されると、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。|  
|<xref:System.Data.DataView>|<xref:System.Data.DataView> によって返される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。|  
|<xref:System.Data.DataSet>|最初の <xref:System.Data.DataTable> の <xref:System.Data.DataSet> の抽出元と <xref:System.Data.DataView> が作成され、によって返される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。|  
|<xref:System.Object>|オブジェクトが 1 つの要素でラップ <xref:System.Collections.IEnumerable> コレクションによって返されると、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。|  
  
 によって識別されるメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティは、インスタンス メソッドであることができます、または `static` \(`Shared` Visual Basic で\) メソッドです。 ビジネス オブジェクトが作成され、毎回で指定されたメソッドが破棄インスタンス メソッドである場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティが呼び出されますが、同じインスタンスがで指定されたメソッドの呼び出しに使用される、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティおよびメソッドで指定されている、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> プロパティです。<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドが返される、 <xref:System.Collections.IEnumerable> インターフェイスです。 ただし、キャッシュとシナリオをフィルター処理できるように、戻り値があります、 <xref:System.Data.DataSet> オブジェクトです。 中に、 <xref:System.Data.DataSet> クラスが実装されていない、 <xref:System.Collections.IEnumerable> インターフェイス、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールが自動的に既定値を抽出 <xref:System.Data.DataView> コントロールを実装する、 <xref:System.Collections.IEnumerable>です。  
  
 前に、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 操作を実行する、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> イベントです。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> イベント パラメーターの値を確認し、前に処理を実行する、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 操作します。 データ取得操作を実行する、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトでは、リフレクションを使用して、によって識別されるオブジェクトのインスタンスを作成、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> プロパティです。 によって識別されるメソッドを呼び出して、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> を使用して、関連付けられたすべてのプロパティ <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> プロパティです。 後に、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 操作が完了すると、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> イベントです。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> イベントを戻り値、出力パラメーターと、例外を分析し、後続の処理を実行します。  
  
 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティを返します。、 <xref:System.Data.DataSet>, 、<xref:System.Data.DataTable>, 、または <xref:System.Data.DataView> オブジェクトとキャッシュ機能が有効になっている、 <xref:System.Web.UI.WebControls.ObjectDataSource> からデータを取得し、中にキャッシュにデータを保存、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 操作します。 キャッシュは作成と破棄、または更新の組み合わせで指定されているキャッシュの動作に基づいて、 <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> と <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> プロパティです。  
  
 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティを返します。、 <xref:System.Data.DataSet> または <xref:System.Data.DataTable> オブジェクト、および <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> プロパティが指定されている、指定されたいずれかと評価されます <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> プロパティとその結果のフィルターの適用中にデータの一覧に、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 操作します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドからデリゲートを <xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A> のメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> と関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 パラメーターのマージ、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>します。  
  
## データ バインド コントロール  
 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSource> など、データ バインド コントロールにコントロールが関連付けられている、 <xref:System.Web.UI.WebControls.GridView> コントロール必要はありませんを呼び出して、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> ページ コードからメソッドです。<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドが代わりに、データ バインド コントロールが直接呼び出されます。  
  
   
  
## 例  
 コード例については、「<xref:System.Web.UI.WebControls.ObjectDataSource>」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectCountMethod">
      <MemberSignature Language="C#" Value="public string SelectCountMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectCountMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはメソッドまたは関数の名前を設定、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> を行の数を取得します。</summary>
        <value>メソッドの名前を表す、または関数を文字列、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> を使用して行の数を取得します。 このメソッドは、整数を返す必要があります \(<see cref="T:System.Int32" />\)。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> プロパティは、データ ソースのページングをサポートするために、行の合計数を取得するために使用するビジネス オブジェクトのメソッドを識別します。<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 場合にのみ、プロパティが評価される、 <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> にプロパティが設定されている `true`します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> プロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 ページングをサポートする方法について、 <xref:System.Web.UI.WebControls.ObjectDataSource> 制御を参照してください <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>します。  
  
   
  
## 例  
 次の 3 つの例では、Web ページ、分離コード ページのクラス、およびユーザーがレコードの数は、ページに表示を選択できるようにするデータ アクセス クラスを表示します。  
  
 Web ページには、 <xref:System.Web.UI.WebControls.ObjectDataSource> いるコントロール <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> にプロパティが設定されている `true`します。<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> プロパティがクエリでレコードの合計数を返すメソッドの名前に設定します。<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> プロパティおよび <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> プロパティは、Select メソッドで使用されているパラメーターの名前に設定されます。 ページにも含まれています、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_17\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_17\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 2 番目の例では、ハンドラーを <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> のイベント、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。 ハンドラーのセット内のコード、 <xref:System.Web.UI.WebControls.GridView.PageSize%2A> プロパティをユーザーの選択します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_17\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_17\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 3 番目の例では、Customers テーブルからデータを取得するデータ アクセス クラスを示します。 という名前のメソッドが含まれています `GetSubsetOfEmployees`, が割り当てられている、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 この例は、という名前のメソッドも含まれています。 `GetEmployeeCount`, 、が割り当てられている、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 クラスでは、LINQ を使用して、Customers テーブルを照会します。 例では、LINQ to SQL クラスを Northwind データベースと Customers テーブルを表す必要があります。 詳細については、次を参照してください。 [方法: LINQ to Web プロジェクトで SQL クラスに作成](http://msdn.microsoft.com/ja-jp/20bf925f-2a6d-410d-8f65-7b5b8f555081)します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_17\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_17\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanRetrieveTotalRowCount" />
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 操作が完了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> 戻り値または出力パラメーターの値を確認する場合、または後に例外がスローされたかどうかを判断するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 操作が完了します。 戻り値、出力パラメーター、および例外処理のプロパティから提供されて、 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次の 3 つの例では、Web ページ、分離コード ページのクラス、および、ユーザーを取得し、Northwind データベースの Employees テーブルのレコードを更新できるようにするデータ アクセス クラスを表示します。  
  
 最初の例では 2 つの Web ページ <xref:System.Web.UI.WebControls.ObjectDataSource> 、コントロール、 <xref:System.Web.UI.WebControls.DropDownList> コントロール、および <xref:System.Web.UI.WebControls.DetailsView> コントロールです。 最初の <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールと <xref:System.Web.UI.WebControls.DropDownList> を取得して、データベースから従業員の名前を表示するコントロールを使用します。 2 番目 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールと <xref:System.Web.UI.WebControls.DetailsView> 取得、表示、およびユーザーが選択されている従業員レコードからデータを変更するコントロールを使用します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 2 番目の例では、ハンドラーを <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> と <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> イベントです。<xref:System.Web.UI.WebControls.ObjectDataSource.Selected> イベント ハンドラーは、Employee テーブルから取得したデータを含むオブジェクトをシリアル化します。 シリアル化されたオブジェクトは、ビュー ステートに格納されます。<xref:System.Web.UI.WebControls.ObjectDataSource.Updating> イベント ハンドラーが更新されるデータのレコードの元のデータが含まれるビュー ステートでオブジェクトを逆シリアル化します。 元のデータを格納しているオブジェクトは、Update メソッドにパラメーターとして渡されます。 別のプロセスによってデータが変更されたかどうかを確認するために使用できるように、データベースに、元のデータを渡す必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 3 番目の例では、Northwind データベースと対話するデータ アクセス クラスを示します。 クラスでは、LINQ を使用してクエリを実行し、従業員テーブルを更新します。 例では、LINQ to SQL クラスを Northwind データベースと Employees テーブルを表す必要があります。 詳細については、次を参照してください。 [方法: LINQ to Web プロジェクトで SQL クラスに作成](http://msdn.microsoft.com/ja-jp/20bf925f-2a6d-410d-8f65-7b5b8f555081)します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Selecting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生する前に、 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" /> 操作します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 、パラメーターの値を検証するか、前にパラメーター値を変更する、アプリケーションに固有である追加の初期化を実行するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールはデータ取得操作を実行します。 パラメーターとして利用可能な <xref:System.Collections.IDictionary> によってアクセスされるコレクション、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> によって公開されるプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> オブジェクトです。  
  
 このイベントは 1 回の呼び出しに対して 2 回発行されることができます、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッド場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> プロパティを設定します。<xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs> オブジェクトを使用してデータを取得または数を取得する選択が呼び出されたかどうかを判別します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Selected" />
        <altmember cref="M:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      </Docs>
    </Member>
    <Member MemberName="SelectMethod">
      <MemberSignature Language="C#" Value="public string SelectMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはメソッドまたは関数の名前を設定、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールがデータを取得するために呼び出します。</summary>
        <value>メソッドの名前を表す、または関数を文字列、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> を使用してデータを取得します。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されたメソッドは使用できますが、メソッド シグネチャについて次の表に示すように型のいずれかを返す必要が、 <xref:System.Web.UI.WebControls.ObjectDataSource> を制御します。  
  
|戻り値の型|アクション|  
|-----------|-----------|  
|<xref:System.Collections.IEnumerable>|<xref:System.Collections.IEnumerable> によって返される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。|  
|<xref:System.Data.DataTable>|A <xref:System.Data.DataView> を使用して作成されて、 <xref:System.Data.DataTable> によって返されると、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。|  
|<xref:System.Data.DataView>|A <xref:System.Data.DataView> によって返される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。|  
|<xref:System.Data.DataSet>|最初の <xref:System.Data.DataTable> の <xref:System.Data.DataSet> の抽出元と <xref:System.Data.DataView> が作成され、によって返される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。|  
|<xref:System.Object>|オブジェクトが 1 つの要素でラップ <xref:System.Collections.IEnumerable> コレクションによって返されると、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドです。|  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 使用すると、 <xref:System.Web.UI.WebControls.ObjectDataSource> クラスを削除するか、データを更新、パラメーター名が用に構成されていることを確認、 <xref:System.Web.UI.WebControls.ObjectDataSource> の制御、 <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> コレクションまたは <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> コレクション選択メソッドによって返される列名に一致します。  
  
## オブジェクトの有効期間  
 によって識別されるメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティは、インスタンス メソッドであることができます、または `static` \(`Shared` Visual Basic で\) メソッドです。 ビジネス オブジェクトが作成され、毎回で指定されたメソッドが破棄インスタンス メソッドである場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティが呼び出されます。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> と <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> で指定されたメソッドの前に、ビジネス オブジェクトを使用するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティが呼び出されます。 処理するには、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> で指定されたメソッドの後に発生するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティが呼び出されます。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable> 、インターフェイス、 <xref:System.IDisposable.Dispose%2A> オブジェクトが破棄される前に、メソッドが呼び出されます。 メソッドの場合 `static` \(`Shared` Visual Basic で\)、ビジネス オブジェクトは作成されず、処理できない、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, 、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, 、および <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> イベントです。  
  
## パラメーターのマージ  
 パラメーターに追加されます、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> これらのソースからのコレクション。  
  
-   宣言してから、 `SelectParameters` 要素。  
  
-   プログラムを使用してから、 `Selecting` メソッドです。  
  
 パラメーターは最初に、リスト、 `SelectParameters` 要素を追加します。 次に、パラメーターがプログラムで追加または削除で、 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> する前に発生するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドを実行します。 メソッドは、パラメーターは、マージ後に解決されます。 メソッドの解決については、次のセクションで説明します。  
  
> [!IMPORTANT]
>  クライアントから受信したすべてのパラメーター値を検証する必要があります。 ランタイムは、パラメーター値に、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティです。  
  
## メソッドの解決  
 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドを呼び出して、データ フィールドで、宣言によって作成されたパラメーターのデータ バインド コントロールを `SelectParameters` 要素、およびパラメーターで追加された、 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> イベント ハンドラーがすべてマージします。 \(詳細については、前のセクションを参照してください\)。<xref:System.Web.UI.WebControls.ObjectDataSource> に呼び出すメソッドを検索しようを制御します。 指定されている名前を持つ 1 つまたは複数のメソッドの最初に、検索、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティです。 一致が見つからない場合、 <xref:System.InvalidOperationException> 例外がスローされます。 一致が見つかった場合は、一致するパラメーター名に検索されます。 たとえばで指定された型、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> プロパティという 2 つのメソッドには `SelectARecord`です。 1 つ `SelectARecord` 1 つのパラメーターを持つ `ID`, 、および、その他の `SelectARecord` 2 つのパラメーターを持つ `Name` と `Number`です。 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> コレクションという名前の 1 つだけのパラメーターには `ID`, 、 `SelectARecord` を持つメソッドだけ `ID` パラメーターが呼び出されます。 パラメーターの型は、メソッドを解決するのにはチェックされません。 パラメーターの順序は関係ありません。  
  
 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティを設定すると、メソッドが別の方法で解決します。<xref:System.Web.UI.WebControls.ObjectDataSource> で指定されている名前のメソッドを検索、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> で型の 1 つのパラメーターを受け取るプロパティが指定された、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティです。 この場合、パラメーターの名前は関係ありません。  
  
   
  
## 例  
 次のコード例を示す方法、 <xref:System.Web.UI.WebControls.GridView> を使用してデータ コントロールで表示できる、 <xref:System.Web.UI.WebControls.ObjectDataSource> Web フォーム ページ上のコントロールです。<xref:System.Web.UI.WebControls.ObjectDataSource> に部分的または完全修飾クラス名を識別する、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> プロパティとデータを取得するために呼び出されるメソッドの <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティです。 実行時に、オブジェクトが作成され、リフレクションを使用して、メソッドが呼び出されます。<xref:System.Web.UI.WebControls.GridView> コントロールを列挙、 <xref:System.Collections.IEnumerable> で指定されているメソッドによって返されるコレクション、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティ、およびデータが表示されます。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_1\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_1\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>によって指定されたメソッドで使用されるパラメーターのコレクションを取得、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> プロパティです。</summary>
        <value>によって指定されたメソッドで使用されるパラメーターのコレクション、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> プロパティを取得、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 パラメーターを追加する、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> コレクションを使用して宣言によって、 `SelectParameters` 要素またはイベントのハンドラーのプログラムを使用して、 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> イベントです。 パラメータの一覧、実行時に、 `SelectParameters` 要素が最初に、コレクションに追加します。 コレクション内のパラメーターで追加または削除のハンドラー、 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> イベントです。<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> イベントが発生する前に、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドを実行します。  
  
 前に、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドが実行の名前と型に含まれているパラメーターの <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> コレクションで指定されたメソッドのシグネチャが一致する必要があります、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティです。 たとえば、名前付きの select メソッド `GetEmployeesByStateAndAge` は、 `string` およびパラメーターとして整数、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> コレクションは、2 つのパラメーターを含める必要があります。 最初のパラメーターが文字列に解決する必要があり、2 番目のパラメーターが整数値に解決する必要があります。 内のマークアップで両方のパラメーターを指定することができます、 `SelectParameters` 要素。 また、できるで追加することも、 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> マークアップでは、イベント ハンドラーまたは 1 つのパラメーターを追加することができ、もう 1 つをプログラムで追加できます。  
  
 詳細については、[Using Parameters with the ObjectDataSource Control](http://msdn.microsoft.com/ja-jp/45fb67ee-9be7-49b7-9421-e242203dafa4) および <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod> プロパティのトピックを参照してください。  
  
> [!IMPORTANT]
>  コードで、 <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> イベント ハンドラーが指定されている方法で、または、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティには、クライアントから受信したすべてのパラメーター値を検証することを確認します。  
  
   
  
## 例  
 次のコード例を使用して、1 つのデータ レコードを取得する方法を示しています、 <xref:System.Web.UI.WebControls.ObjectDataSource> を制御し、表示、 <xref:System.Web.UI.WebControls.DetailsView> コントロールです。<xref:System.Web.UI.WebControls.ObjectDataSource> コントロールを呼び出すことによって、特定の従業員のレコードを取得、 `GetEmployee` のメソッド、 `EmployeeLogic` クラスです。`GetEmployee` メソッドには、従業員 ID パラメーターが必要です。<xref:System.Web.UI.WebControls.ObjectDataSource> コントロール、 `QueryStringParameter` を作成するためのマークアップ内の要素、 <xref:System.Web.UI.WebControls.QueryStringParameter> に渡すし、URL から指定したクエリ文字列パラメーターの値を取得、オブジェクト、 `GetEmployee` メソッドです。  
  
 その他のパラメーター クラスを使用して、コントロールのプロパティ、フォーム フィールド、cookie、ASP.NET プロファイル データ、セッション状態など、他のソースから値を取得します。 Select メソッドをハード コーディングされた値を渡すために、マークアップで定義されているパラメーター オブジェクトを使用することもできます。 詳細については、使用可能なパラメーター クラスは、次を参照してください。 [Using Parameters with Data Source Controls](http://msdn.microsoft.com/ja-jp/88622d04-2989-484e-93fe-594cd98dcf5f)します。  
  
 この例を実行するには、次のとおり、  
  
-   名前付き接続文字列を含む Web サイト `NorthwindConnection` Northwind Traders データベースに接続します。 詳細については、次を参照してください。、 <xref:System.Web.UI.WebControls.ObjectDataSource> クラスの概要です。  
  
-   `EmployeeLogic` クラスのコード例の 1 つとして表示される、 <xref:System.Web.UI.WebControls.ObjectDataSource> クラスの概要です。 クラス ファイルを App\_Code フォルダー内になければなりません。  
  
-   サンプル コードは、.aspx ページとして実行できます。 クエリ文字列パラメーターがない場合、ページを要求すると、エラー メッセージが表示されます。 クエリ文字列を使用してページを要求する場合は、 `?empid=1` .aspx ファイルの名前後、は、要求された従業員の詳細が表示されます。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_3\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/CS/objds3cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_3\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_3/VB/objds3vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="SortParameterName">
      <MemberSignature Language="C#" Value="public string SortParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SortParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはビジネス オブジェクトの名前を設定、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.SelectMethod" /> パラメーターのデータ ソースの並べ替えのサポートは、並べ替え式を指定するために使用します。</summary>
        <value>データの並べ替えに使用されるパラメーターを示すために使用するメソッドのパラメーターの名前。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> プロパティは、データ ソースの並べ替えをサポートするために使用します。 ときに、 <xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> プロパティが設定されて、 <xref:System.Web.UI.DataSourceSelectArguments> オブジェクトおよびに渡される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> 値のパラメーター名を識別する、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> ビジネス オブジェクトのメソッドが付けられるデータが並べ替えられます。  
  
 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource> をコンマで区切られたフィールド値の形式が続いてこのパラメーターが渡される値のデータ バインド コントロールに関連付けられた `"ASC"` または `"DESC"`です。 昇順の並べ替えの値など `Name` は `"Name ASC"`です。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> プロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例では、並べ替えをサポートする型を実装する方法を示します。 2 番目のコード例では、並べ替え式を実装する方法を示します。  
  
 次のコード例では、並べ替えをサポートする型を実装する方法を示します。`SelectMethod` の `SortingData` クラスは、パラメーターを受け取る `sortExpression`します。 渡される文字列 `SelectMethod` の使用、 <xref:System.Data.DataView.Sort%2A> のプロパティ、 <xref:System.Data.DataView> によって返されるオブジェクト `SelectMethod`します。  
  
 [!code-csharp[ObjectDataSourceSorting\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingData.cs#1)]
 [!code-vb[ObjectDataSourceSorting\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingData.vb#1)]  
  
 次のコード例では、並べ替え式を実装する方法を示します。 Web ページ内のコードは、のインスタンスを作成、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> にプロパティが設定されている `SortingData` と <xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> にプロパティが設定されている `sortExpression`します。<xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> のプロパティ、 <xref:System.Web.UI.WebControls.GridView> に設定されているコントロール `true`します。 ユーザーがクリックしたとき、 **並べ替え** ボタン、フィールド名 `Name` または `Number`, に渡される `SelectMethod` 並べ替えパラメーターにします。  
  
 [!code-csharp[ObjectDataSourceSorting\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/ObjectDataSourceSorting/CS/SortingDataExample.aspx#2)]
 [!code-vb[ObjectDataSourceSorting\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ObjectDataSourceSorting/VB/SortingDataExampleVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanSort" />
      </Docs>
    </Member>
    <Member MemberName="SqlCacheDependency">
      <MemberSignature Language="C#" Value="public virtual string SqlCacheDependency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SqlCacheDependency" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定をデータベースと Microsoft SQL Server のキャッシュの依存関係に使用するテーブルを示すセミコロンで区切られた文字列。</summary>
        <value>SQL Server のキャッシュの依存関係を使用するテーブルのどのデータベースを示す文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールに基づいているオプションの有効期限ポリシーをサポートしている、 <xref:System.Web.Caching.SqlCacheDependency> \(データベース サーバーのサービスを構成する必要があります\)、データ キャッシュのオブジェクト。  
  
 SQL Server は、キャッシュの無効化の 2 つのメカニズムをサポートしています: ポーリングと通知します。 各メカニズムには、別の構文、 <xref:System.Web.Caching.SqlCacheDependency> オブジェクトです。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource> 唯一のポーリングをサポートしています。<xref:System.Web.Caching.SqlCacheDependency> 文字列は、作成に使用される、 <xref:System.Data.SqlClient.SqlDependency> に渡されるオブジェクト、 <xref:System.Data.Common.DbCommand> コンス トラクターの前に、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> メソッドを実行します。<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> データベースと同じ形式で使用されるに従ってテーブルを識別する文字列、 `@ Page` ディレクティブ、文字列の最初の部分に、SQL Server データベースへの接続文字列があるとそれに続くコロン区切り記号、および最後にデータベース テーブルの名前 \(たとえば、 `"connectionstring1:table1"`\)。 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> プロパティが 1 つ以上のテーブルに依存、接続文字列とテーブル名のペアをセミコロンで区切られます \(たとえば、 `"connectionstring1:table1";connectionstring2:table2"`\)。  
  
 通知をサポートするための実装では、キャッシュ ロジックを記述する必要があります、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティの作成を処理し、 <xref:System.Web.Caching.SqlCacheDependency> 、コード内のオブジェクト。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例は、SQL Server のキャッシュ依存関係を作成し、設定する方法を示します、 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> オブジェクトです。 2 番目のコード例を返すラッパー メソッドを実装する方法を示します、 <xref:System.Data.DataSet> キャッシュとフィルタ リングを有効にするオブジェクト、 <xref:System.Web.UI.WebControls.ObjectDataSource> オブジェクトです。  
  
 次のコード例は、SQL Server のキャッシュ依存関係を作成し、設定する方法を示します、 <xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 この例では、データベースは 120 秒ごとにポーリングされます。 Northwind traders 社の従業員のデータ テーブルの中に変更する場合に、によってキャッシュされているすべてのデータ、 <xref:System.Web.UI.WebControls.ObjectDataSource> して表示して、制御、 <xref:System.Web.UI.WebControls.GridView> コントロールが期限切れになり、ページの次の要求を一連のデータを取得します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_7\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/CS/objds7cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_7\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_7/VB/objds7vb.aspx#1)]  
  
 次のコード例を返すラッパー メソッドを実装する方法を示します、 <xref:System.Data.DataSet> キャッシュとフィルタ リングを有効にするオブジェクト、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 基本クラスの実装で、 `EmployeeLogic` 、クラス、 `GetAllEmployees` メソッドが返される、 <xref:System.Collections.ArrayList> オブジェクトです。 使用するには、完全にオブジェクトをリファクタリングではなく、 <xref:System.Web.UI.WebControls.ObjectDataSource> ラッパー メソッドという名前で、Web フォーム ページ `GetAllEmployeesAsDataSet` のセットを返す追加 `NorthwindEmployee` データとして、 <xref:System.Data.DataSet>です。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_5\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/CS/northwindemployee5.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_5\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_5/VB/northwindemployee5.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.SqlCacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="StartRowIndexParameterName">
      <MemberSignature Language="C#" Value="public string StartRowIndexParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StartRowIndexParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("startRowIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ ソースのページング サポートを取得する最初のレコードの識別子の値を示すために使用されるデータの取得メソッドのパラメーターの名前を設定します。</summary>
        <value>取得する最初のレコードを示すために使用するビジネス オブジェクト メソッドのパラメーターの名前。 パラメーターには、整数値を返す必要があります。 既定値は、<c>"startRowIndex"</c> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> プロパティは、データ ソースのページングをサポートするために使用します。 ページングをサポートする方法について、 <xref:System.Web.UI.WebControls.ObjectDataSource> 制御を参照してください <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> プロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
   
  
## 例  
 次の 3 つの例では、Web ページ、分離コード ページのクラス、およびユーザーがレコードの数は、ページに表示を選択できるようにするデータ アクセス クラスを表示します。  
  
 Web ページには、 <xref:System.Web.UI.WebControls.ObjectDataSource> いるコントロール <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> にプロパティが設定されている `true`します。<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> プロパティがクエリでレコードの合計数を返すメソッドの名前に設定します。<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> プロパティおよび <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> プロパティは、Select メソッドで使用されているパラメーターの名前に設定されます。 ページにも含まれています、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_17\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_17\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx#1)]  
  
 2 番目の例では、ハンドラーを <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> のイベント、 <xref:System.Web.UI.WebControls.DropDownList> コントロールです。 ハンドラーのセット内のコード、 <xref:System.Web.UI.WebControls.GridView.PageSize%2A> プロパティをユーザーの選択します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_17\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/Default3.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_17\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/Default3.aspx.vb#2)]  
  
 3 番目の例では、Customers テーブルからデータを取得するデータ アクセス クラスを示します。 という名前のメソッドが含まれています `GetSubsetOfEmployees`, が割り当てられている、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 この例は、という名前のメソッドも含まれています。 `GetEmployeeCount`, 、が割り当てられている、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。 クラスでは、LINQ を使用して、Customers テーブルを照会します。 例では、LINQ to SQL クラスを Northwind データベースと Customers テーブルを表す必要があります。 詳細については、次を参照してください。 [方法: LINQ to Web プロジェクトで SQL クラスに作成](http://msdn.microsoft.com/ja-jp/20bf925f-2a6d-410d-8f65-7b5b8f555081)します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_17\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/CS/App_Code/CustomerLogic.cs#3)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_17\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_17/VB/App_Code/CustomerLogic.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.EnablePaging" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.CanPage" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Select" />
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.TrackViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ビュー ステートの変更を追跡、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 制御に格納できるように、 <see cref="T:System.Web.UI.StateBag" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource.TrackViewState%2A> メソッドをオーバーライドする、オブジェクトのビュー ステートの一部としてコントロールに対する変更の追跡と保存を開始する開始点をマークします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IStateManager.TrackViewState" />
        <altmember cref="T:System.Web.UI.WebControls.ObjectDataSource" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはクラスの名前を設定、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトが表す。</summary>
        <value>オブジェクトの種類を識別する部分的または完全修飾クラス名を <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> を表します。 既定値は、空の文字列 \(""\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オブジェクトのインスタンスを作成、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールのバインド先、コントロールでは、リフレクションを使用して、実行時に型の名前で識別される型をロードします。 そのための値、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> プロパティは、Bin ディレクトリまたは App\_Code ディレクトリに配置されているコードの部分修飾型またはグローバル アセンブリ キャッシュに登録されているコードの完全修飾型名を指定できます。 グローバル アセンブリ キャッシュを使用する場合は、適切な参照を追加する必要があります、 `assemblies` Machine.config または Web.config ファイルのセクションです。  
  
 種類は、処理する場合を除き、既定のコンス トラクターにいる必要があります、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 、そのインスタンスを作成するイベントです。 呼び出しごとに、型のインスタンスが作成された、 <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>, 、<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>, 、<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>, 、および <xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> メソッド、型のメソッドがメソッドのメンバーである場合。 メソッドは、インスタンスは作成されません `static` \(`Shared` Visual Basic で\)。 型を実装する場合、 <xref:System.IDisposable> 、インターフェイス、 <xref:System.IDisposable.Dispose%2A> オブジェクトが破棄される前に、メソッドが呼び出されます。  
  
   
  
## 例  
 次のコード例を示す方法、 <xref:System.Web.UI.WebControls.GridView> コントロールを使用してデータを表示することができます、 <xref:System.Web.UI.WebControls.ObjectDataSource> Web フォーム ページ上のコントロールです。<xref:System.Web.UI.WebControls.ObjectDataSource> に部分的または完全修飾クラス名を識別する、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> プロパティとデータを取得するために呼び出されるメソッドの <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティです。 実行時に、オブジェクトが作成され、リフレクションを使用して、メソッドが呼び出されます。<xref:System.Web.UI.WebControls.GridView> コントロールを列挙、 <xref:System.Collections.IEnumerable> によって返されるコレクション、 <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> プロパティ、およびデータが表示されます。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_1\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/objds1cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_1\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/objds1vb.aspx#1)]  
  
 次の例は、クラス、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> プロパティの値を表します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_1\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/CS/northwindemployee1.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_1\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_1/VB/northwindemployee1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>によって識別されるメソッドを呼び出して、更新操作を実行、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> プロパティおよびパラメーター内にある、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" /> コレクションです。</summary>
        <returns>基になるデータ記憶域に更新された行の数を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ビジネス オブジェクトは、バッチではなく、一度に 1 レコードずつデータを更新すると見なされます。  
  
 前に、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 操作を実行する、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> イベントです。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> イベント パラメーターの値を確認し、前に処理を実行する、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 操作します。 更新操作を実行する、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトでは、リフレクションを使用して、によって識別されるオブジェクトのインスタンスを作成、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> プロパティです。 によって識別されるメソッドを呼び出して、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> を使用して、関連付けられたすべてのプロパティ <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> プロパティです。 後に、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 操作が完了すると、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A> させるメソッドが呼び出される、 <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> イベントです。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> イベントを戻り値、出力パラメーターと、例外を分析し、後続の処理を実行します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> メソッドからデリゲートを <xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A> のメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> と関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 パラメーターのマージ、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>します。  
  
> [!IMPORTANT]
>  クライアントから受信したすべてのパラメーター値を検証する必要があります。 ランタイムは、パラメーター値に、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> プロパティです。  
  
## データ バインド コントロール  
 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSource> など、データ バインド コントロールにコントロールが関連付けられている、 <xref:System.Web.UI.WebControls.GridView> コントロール必要はありませんを呼び出して、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> ページ コードからメソッドです。<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> メソッドが代わりに、データ バインド コントロールが直接呼び出されます。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.DropDownList> コントロール、 <xref:System.Web.UI.WebControls.TextBox> コントロール、およびいくつか <xref:System.Web.UI.WebControls.ObjectDataSource> データを更新するオブジェクト。 2 つ目のコード例で示す、 `EmployeeLogic` 最初のコード例で使用されるクラスです。  
  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DropDownList> コントロール、 <xref:System.Web.UI.WebControls.TextBox> コントロール、およびいくつか <xref:System.Web.UI.WebControls.ObjectDataSource> データを更新するコントロール。<xref:System.Web.UI.WebControls.DropDownList> Northwind の従業員の名前を表示中に、 <xref:System.Web.UI.WebControls.TextBox> コントロールを使用して入力し、アドレス情報を更新します。<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> コレクションに含まれる、 <xref:System.Web.UI.WebControls.ControlParameter> オブジェクトの選択した値にバインドされている、 <xref:System.Web.UI.WebControls.DropDownList>, 、発生するボタン、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 操作を有効にすると、従業員が選択した後にのみです。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_12\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_12\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 次のコード例は、 `EmployeeLogic` 前のコード例で使用されるクラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_12\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_12\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 操作が完了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.Updated> 戻り値または出力パラメーターの値を確認する場合、または後に例外がスローされたかどうかを判断するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 操作が完了します。 戻り値、出力パラメーター、および例外処理のプロパティから提供されて、 <xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> イベントに関連付けられているオブジェクト。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated(System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはメソッドまたは関数の名前を設定、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> コントロールがデータを更新するためです。</summary>
        <value>メソッドの名前を表す、または関数を文字列、 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> を使用してデータを更新します。 既定値は空の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールがあると見なさによって識別されるメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> バッチではなく、一度にプロパティが 1 つの更新プログラムを実行します。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> プロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A> のプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 パラメーター名が用に構成されていることを確認、 <xref:System.Web.UI.WebControls.ObjectDataSource> の制御、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> コレクション選択メソッドによって返される列名に一致します。  
  
## オブジェクトの有効期間  
 によって識別されるメソッド、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> プロパティは、インスタンス メソッドであることができます、または `static` \(`Shared` Visual Basic で\) メソッドです。 ビジネス オブジェクトが作成され、毎回で指定されたメソッドが破棄インスタンス メソッドである場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> プロパティが呼び出されます。 処理できる、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> と <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> で指定されたメソッドの前に、ビジネス オブジェクトを使用するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> プロパティが呼び出されます。 処理するには、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> で指定されたメソッドの後に発生するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> プロパティが呼び出されます。 ビジネス オブジェクトを実装する場合、 <xref:System.IDisposable> 、インターフェイス、 <xref:System.IDisposable.Dispose%2A> オブジェクトが破棄される前に、メソッドが呼び出されます。 メソッドの場合 `static` \(`Shared` Visual Basic で\)、ビジネス オブジェクトは作成されず、処理できない、 <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>, 、<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>, 、および <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> イベントです。  
  
## パラメーターのマージ  
 パラメーターに追加されます、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 3 つのソースからのコレクション。  
  
-   実行時にデータ バインド コントロールです。  
  
-   `UpdateParameters` 要素を宣言します。  
  
-   <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> イベント ハンドラーでは、プログラムを使用しています。  
  
 データ バインド コントロールから生成されるパラメーターを最初に、追加、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> コレクションです。 などの場合、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールにバインドする、 <xref:System.Web.UI.WebControls.GridView> 列を含むコントロール `Name` と `Number`, 、パラメーターを `Name` と `Number` コレクションに追加します。 パラメーターの正確な名前によって異なる、 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> プロパティです。 これらのパラメーターのデータ型は `string`です。 次で示されているパラメーター、 `UpdateParameters` 要素を追加します。 内のパラメーターの場合、 `UpdateParameters` になっているパラメーターと同じ名前を持つ要素が存在、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> で指定されているパラメーターと一致するコレクション、既存のパラメーターが変更された、 `UpdateParameters` 要素。 通常、パラメーターのデータの種類の変更に使用されます。 最後に、プログラムで追加および削除できます内のパラメーター、 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> する前に発生するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> メソッドを実行します。 メソッドは、パラメーターは、マージ後に解決されます。 メソッドの解決については、次のセクションで説明します。  
  
> [!IMPORTANT]
>  クライアントから受信したすべてのパラメーター値を検証する必要があります。 ランタイムは、パラメーター値に、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> プロパティです。  
  
## メソッドの解決  
 ときに、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> メソッドを呼び出して、データ フィールドで、宣言によって作成されたパラメーターのデータ バインド コントロールを `UpdateParameters` 要素、およびパラメーターで追加された、 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> イベント ハンドラーがすべてマージします。 \(詳細については、前のセクションを参照してください\)。<xref:System.Web.UI.WebControls.ObjectDataSource> に呼び出すメソッドを検索しようを制御します。 指定されている名前を持つ 1 つまたは複数のメソッドの最初に、検索、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> プロパティです。 一致が見つからない場合、 <xref:System.InvalidOperationException> 例外がスローされます。 一致が見つかった場合は、一致するパラメーター名に検索されます。 たとえばで指定された型、 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> プロパティという 2 つのメソッドには `UpdateARecord`です。 1 つ `UpdateARecord` 1 つのパラメーターを持つ `ID`, 、および、その他の `UpdateARecord` 2 つのパラメーターを持つ `Name` と `Number`です。 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> コレクションという名前の 1 つだけのパラメーターには `ID`, 、 `UpdateARecord` を持つメソッドだけ `ID` パラメーターが呼び出されます。 パラメーターの型は、メソッドを解決するのにはチェックされません。 パラメーターの順序は関係ありません。  
  
 場合、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティを設定すると、メソッドが別の方法で解決します。<xref:System.Web.UI.WebControls.ObjectDataSource> で指定されている名前のメソッドを検索、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> で型の 1 つのパラメーターを受け取るプロパティが指定された、 <xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> プロパティです。 この場合、パラメーターの名前は関係ありません。  
  
   
  
## 例  
 次の 3 つの例では、Web ページ、分離コード ページのクラス、および、ユーザーを取得し、Northwind データベースの Employees テーブルのレコードを更新できるようにするデータ アクセス クラスを表示します。  
  
 最初の例では 2 つの Web ページ <xref:System.Web.UI.WebControls.ObjectDataSource> 、コントロール、 <xref:System.Web.UI.WebControls.DropDownList> コントロール、および <xref:System.Web.UI.WebControls.DetailsView> コントロールです。 最初の <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールと <xref:System.Web.UI.WebControls.DropDownList> を取得して、データベースから従業員の名前を表示するコントロールを使用します。 2 番目 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールと <xref:System.Web.UI.WebControls.DetailsView> 取得、表示、およびユーザーが選択されている従業員レコードからデータを変更するコントロールを使用します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 2 番目の例では、ハンドラーを <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> と <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> イベントです。<xref:System.Web.UI.WebControls.ObjectDataSource.Selected> イベント ハンドラーは、Employee テーブルから取得したデータを含むオブジェクトをシリアル化します。 シリアル化されたオブジェクトは、ビュー ステートに格納されます。<xref:System.Web.UI.WebControls.ObjectDataSource.Updating> イベント ハンドラーが更新されるデータのレコードの元のデータが含まれるビュー ステートでオブジェクトを逆シリアル化します。 元のデータを格納しているオブジェクトは、Update メソッドにパラメーターとして渡されます。 別のプロセスによってデータが変更されたかどうかを確認するために使用できるように、データベースに、元のデータを渡す必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 3 番目の例では、Northwind データベースと対話するデータ アクセス クラスを示します。 クラスでは、LINQ を使用してクエリを実行し、従業員テーブルを更新します。 例では、LINQ to SQL クラスを Northwind データベースと Employees テーブルを表す必要があります。 詳細については、次を参照してください。 [方法: LINQ to Web プロジェクトで SQL クラスに作成](http://msdn.microsoft.com/ja-jp/20bf925f-2a6d-410d-8f65-7b5b8f555081)します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.ParameterCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定されている方法で使用されるパラメーターを含むパラメーターのコレクションを取得、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> プロパティです。</summary>
        <value>A <see cref="T:System.Web.UI.WebControls.ParameterCollection" /> で指定されているメソッドによって使用されるパラメーターを格納している、 <see cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 名前と型のパラメーターに含まれている、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> の名前と型のパラメーターのコレクションに一致する必要があります、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> メソッド シグネチャ。 パラメーター名が影響を受けました、 <xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> プロパティとは大文字小文字を区別します。 コレクション内のパラメーターは、データ バインド コントロール、宣言によって、指定されたパラメーターおよびプログラムによって追加されたパラメーターのデータによって異なります。 詳細については、「パラメーターの結合」のセクションを参照して <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> と [Using Parameters with the ObjectDataSource Control](http://msdn.microsoft.com/ja-jp/45fb67ee-9be7-49b7-9421-e242203dafa4)です。  
  
 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> プロパティの取得、 <xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A> プロパティに格納されている、 <xref:System.Web.UI.WebControls.ObjectDataSourceView> オブジェクトに関連付けられている、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールです。  
  
 パラメーターのマージ、オブジェクトの有効期間、およびメソッドの解決に関する詳細については、次を参照してください。 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>します。  
  
> [!IMPORTANT]
>  クライアントから受信したすべてのパラメーター値を検証する必要があります。 ランタイムは、パラメーター値に、 <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> プロパティです。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初のコード例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.DropDownList> コントロール、 <xref:System.Web.UI.WebControls.TextBox> コントロール、およびいくつか <xref:System.Web.UI.WebControls.ObjectDataSource> データを更新するオブジェクト。 2 つ目のコード例で示す、 `EmployeeLogic` 最初のコード例で使用されるクラスです。  
  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.DropDownList> コントロール、 <xref:System.Web.UI.WebControls.TextBox> コントロール、およびいくつか <xref:System.Web.UI.WebControls.ObjectDataSource> データを更新するコントロール。<xref:System.Web.UI.WebControls.DropDownList> Northwind の従業員の名前を表示中に、 <xref:System.Web.UI.WebControls.TextBox> コントロールを使用して入力し、アドレス情報を更新します。<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> コレクションに含まれる、 <xref:System.Web.UI.WebControls.ControlParameter> の選択した値にバインドされた、 <xref:System.Web.UI.WebControls.DropDownList>, 、発生するボタン、 <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 操作を有効にすると、従業員が選択した後にのみです。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_12\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/objds12cs.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_12\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/objds12vb.aspx#1)]  
  
 次のコード例は、 `EmployeeLogic` 前のコード例で使用されるクラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_12\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/CS/northwindemployee12.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_12\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_12/VB/northwindemployee12.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.ObjectDataSource.Updating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生する前に、 <see cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" /> 操作します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理、 <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 、パラメーターの値を検証するか、前にパラメーター値を変更する、アプリケーションに固有である追加の初期化を実行するイベント、 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールは、更新操作を実行します。 パラメーターとして利用可能な <xref:System.Collections.IDictionary> によってアクセスされるコレクション、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> によって公開されるプロパティ、 <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> オブジェクトです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次の 3 つの例では、Web ページ、分離コード ページのクラス、および、ユーザーを取得し、Northwind データベースの Employees テーブルのレコードを更新できるようにするデータ アクセス クラスを表示します。  
  
 最初の例では 2 つの Web ページ <xref:System.Web.UI.WebControls.ObjectDataSource> 、コントロール、 <xref:System.Web.UI.WebControls.DropDownList> コントロール、および <xref:System.Web.UI.WebControls.DetailsView> コントロールです。 最初の <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールと <xref:System.Web.UI.WebControls.DropDownList> を取得して、データベースから従業員の名前を表示するコントロールを使用します。 2 番目 <xref:System.Web.UI.WebControls.ObjectDataSource> コントロールと <xref:System.Web.UI.WebControls.DetailsView> 取得、表示、およびユーザーが選択されている従業員レコードからデータを変更するコントロールを使用します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx#1)]  
  
 2 番目の例では、ハンドラーを <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> と <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> イベントです。<xref:System.Web.UI.WebControls.ObjectDataSource.Selected> イベント ハンドラーは、Employee テーブルから取得したデータを含むオブジェクトをシリアル化します。 シリアル化されたオブジェクトは、ビュー ステートに格納されます。<xref:System.Web.UI.WebControls.ObjectDataSource.Updating> イベント ハンドラーが更新されるデータのレコードの元のデータが含まれるビュー ステートでオブジェクトを逆シリアル化します。 元のデータを格納しているオブジェクトは、Update メソッドにパラメーターとして渡されます。 別のプロセスによってデータが変更されたかどうかを確認するために使用できるように、データベースに、元のデータを渡す必要があります。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/Default.aspx.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/Default.aspx.vb#2)]  
  
 3 番目の例では、Northwind データベースと対話するデータ アクセス クラスを示します。 クラスでは、LINQ を使用してクエリを実行し、従業員テーブルを更新します。 例では、LINQ to SQL クラスを Northwind データベースと Employees テーブルを表す必要があります。 詳細については、次を参照してください。 [方法: LINQ to Web プロジェクトで SQL クラスに作成](http://msdn.microsoft.com/ja-jp/20bf925f-2a6d-410d-8f65-7b5b8f555081)します。  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource\_18\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/CS/App_Code/EmployeeLogic.cs#5)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource\_18\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_18/VB/App_Code/EmployeeLogic.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.ObjectDataSource.Updated" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating(System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs)" />
        <altmember cref="M:System.Web.UI.WebControls.ObjectDataSource.Update" />
        <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>