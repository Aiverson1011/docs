<Type Name="BaseValidator" FullName="System.Web.UI.WebControls.BaseValidator">
  <TypeSignature Language="C#" Value="public abstract class BaseValidator : System.Web.UI.WebControls.Label, System.Web.UI.IValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BaseValidator extends System.Web.UI.WebControls.Label implements class System.Web.UI.IValidator" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.BaseValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Label</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IValidator</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ErrorMessage")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.BaseValidatorDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>検証コントロールのための抽象基底クラスとして使用します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BaseValidator> クラスには、すべての検証コントロールの中核となる実装が用意されています。 検証コントロールは、関連付けられた入力コントロールでユーザー入力を検証に使用されます。 検証に失敗した値を入力すると、検証コントロールには、エラー メッセージが表示されます。 検証コントロールは、入力コントロールから分離されて、ため入力コントロールに対する相対的なページで、エラー メッセージを任意の場所に配置できます。 ASP.NET には、特定の種類の検証を実行するいくつかの検証コントロールが用意されています。 次の表では、これらのコントロールについて説明します。  
  
|検証コントロール|説明|  
|--------------|--------|  
|<xref:System.Web.UI.WebControls.CompareValidator>|別の入力コントロールに入力された値に対して、定数値、または適切なデータ型に対して値を設定して検証、 <xref:System.Web.UI.WebControls.CompareValidator.Operator%2A?displayProperty=fullName> プロパティを <xref:System.Web.UI.WebControls.ValidationCompareOperator.DataTypeCheck?displayProperty=fullName>します。|  
|<xref:System.Web.UI.WebControls.CustomValidator>|ユーザー指定のカスタム検証ルーチンを使用して値を検証します。|  
|<xref:System.Web.UI.WebControls.RangeValidator>|値が値の範囲内にあるかどうかを検証します。|  
|<xref:System.Web.UI.WebControls.RegularExpressionValidator>|正規表現を使用して値を検証します。|  
|<xref:System.Web.UI.WebControls.RequiredFieldValidator>|必須フィールドに値を入力したことを検証します。|  
  
 検証コントロールは、常にサーバーに関連付けられた入力コントロールを検証します。 検証コントロールでは、\(Microsoft Internet Explorer バージョン 4.0 以降\) などのスクリプト対応のブラウザーをクライアントに対して検証を実行できるようにする完全なクライアント側の実装もあります。 クライアント側の検証では、サーバーに送信される前に、ユーザー入力をチェックして、検証プロセスが強化されます。 これにより、フォームを送信すると、サーバー側の検証に必要な情報のラウンド トリップを回避する前に、クライアントで検出されたエラーです。  
  
 複数の検証コントロールは、さまざまな条件を検証する個々 の入力コントロールで使用できます。 複数の検証コントロールを適用するなど、 <xref:System.Web.UI.WebControls.TextBox> コントロールです。 使用することができます、 <xref:System.Web.UI.WebControls.RangeValidator> コントロールに入力された値を <xref:System.Web.UI.WebControls.TextBox> セットの範囲内のコントロールは、 <xref:System.Web.UI.WebControls.RequiredFieldValidator> コントロールをユーザーが値を入力することを確認します。  
  
 ASP.NET には、多くのコントロールをサーバーにポストバックする機能が用意されています。 これらのコントロールのいずれかがの場合、その `CausesValidation` プロパティに設定 `true`, 、サーバーへのコントロールのポストバック時に検証が実行します。 次のコントロールでは、サーバーにポストバックする機能があります。  
  
-   <xref:System.Web.UI.WebControls.BulletedList?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.Button?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.CheckBox?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.CheckBoxList?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlButton?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputButton?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputImage?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.ImageButton?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.LinkButton?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=fullName>  
  
> [!NOTE]
>  これらのコントロールの後のサーバーにポストバックされる場合にのみ、 `AutoPostBack` にプロパティが設定されている `true`します。  
  
 これらの各コントロールが、 `ValidationGroup` プロパティを設定すると、コントロールが、サーバーへのポストバックがトリガーされたときに、指定したグループ内で、検証コントロールのみを検証します。 検証コントロールをグループで、設定を <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> に同じ値には、各検証コントロールのプロパティです。  
  
 検証コントロールに入力コントロールを関連付けるには、 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> プロパティです。 検証が失敗したときに、検証コントロールに表示されるテキストを指定するには、使用、 <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> プロパティです。 使用して、ページの検証が失敗したすべてのコントロールの概要を表示することも、 <xref:System.Web.UI.WebControls.ValidationSummary> コントロールです。 表示するテキストを指定する、 <xref:System.Web.UI.WebControls.ValidationSummary> コントロールを使用して、 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> プロパティです。  
  
> [!NOTE]
>  設定した場合、 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> プロパティが設定されていない、 <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> プロパティ、値の <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> プロパティは、検証コントロールも表示されます。  
  
 検証コントロールを使用する場合は、どのような処理を実行する前にサーバー側の検証の結果を必ず確認する必要があります。 ポストバックが後にイベント メソッドが呼び出される前にページ検証コントロールを呼び出し、収集しには、その結果、 <xref:System.Web.UI.Page.IsValid%2A?displayProperty=fullName> プロパティです。 \(検証コントロールを使用して明示的を呼び出すことも、 `Validate` メソッドです\)。 独自のコードで、ことを確認する必要があります、 <xref:System.Web.UI.Page.IsValid%2A?displayProperty=fullName> プロパティを返します。 `true` 入力を処理する前にします。 スクリプト対応のブラウザーも、常に確認する必要があります、検証チェックが失敗した場合、クライアント上に伝送されないのポストバックを妨げる場合でも <xref:System.Web.UI.Page.IsValid%2A?displayProperty=fullName> 検証済みのデータを処理する前に、サーバー コードにします。  
  
 また、手動で検証を実行できます。 ページ上のすべての検証コントロールを検証するを使用して、 <xref:System.Web.UI.Page.Validate%2A?displayProperty=fullName> メソッドです。 個別の検証コントロールを使用して検証できる、 <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> コントロールのメソッドです。  
  
> [!NOTE]
>  使用する場合、 <xref:System.Web.UI.Page.IsValid%2A?displayProperty=fullName> プロパティに、 `Page_Load` メソッドでは、最初に明示的に呼び出す必要があります、 <xref:System.Web.UI.Page.Validate%2A?displayProperty=fullName> メソッドです。 後の検証が発生するため、 <xref:System.Web.UI.Control.Load?displayProperty=fullName> イベントのイベント ハンドラーの前にですが、ページの `Click` または `Command` 、イベント、 <xref:System.Web.UI.Page.IsValid%2A?displayProperty=fullName> までプロパティは更新されません、 <xref:System.Web.UI.Page.Validate%2A?displayProperty=fullName> メソッドが呼び出されます。 イベント ハンドラーにコードを配置する別の方法として、 `Click` または `Command` イベントの代わりに、 `Page_Load` メソッドです。  
  
 すべての Web サーバー コントロールは、検証コントロールをサポートします。 検証コントロールで検証可能な標準のコントロールは次のとおりです。  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.FileUpload?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputFile?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputPassword?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputText?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlSelect?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlTextArea?displayProperty=fullName>  
  
> [!NOTE]
>  検証する入力コントロールに、 <xref:System.Web.UI.ValidationPropertyAttribute?displayProperty=fullName> コントロールに属性を適用する必要があります。  
  
> [!NOTE]
>  派生した検証コントロールを使用すると <xref:System.Web.UI.WebControls.BaseValidator> 内、 <xref:System.Web.UI.UpdatePanel> コントロール、検証コントロールとに関連付けられたコントロールが同じパネル存在するかどうかを確認します。 使用の詳細については、 <xref:System.Web.UI.UpdatePanel> 部分ページ更新用に制御を参照してください [Partial\-Page Rendering Overview](http://msdn.microsoft.com/ja-jp/5c12736d-d9e9-464a-9388-3fe0f9f49e49)します。  
  
 検証に失敗したときにすることができますにフォーカスを設定、関連付けられた入力コントロールを設定して、 <xref:System.Web.UI.WebControls.BaseValidator.SetFocusOnError%2A> プロパティを `true`します。  
  
 インスタンスの初期プロパティ値の一覧については <xref:System.Web.UI.WebControls.BaseValidator>, を参照してください、 <xref:System.Web.UI.WebControls.BaseValidator.%23ctor%2A> コンス トラクターです。  
  
## ユーザー補助  
 ユーザー補助の標準に準拠するマークアップを生成するように、このコントロールを構成する方法については、次を参照してください。 [Accessibility in Visual Studio 2010 and ASP.NET 4](http://msdn.microsoft.com/ja-jp/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13) と [ASP.NET Controls and Accessibility](http://msdn.microsoft.com/ja-jp/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0)です。  
  
   
  
## 例  
 次のコード例を複数の検証コントロールを使用して、ユーザーが有効な値にすることを確認する方法を示しています、 <xref:System.Web.UI.WebControls.TextBox> コントロールです。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[Classic BaseValidator Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic BaseValidator Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>When you inherit from the <see cref="T:System.Web.UI.WebControls.BaseValidator" /> class, you must override the following member: <see cref="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />.</para>
    </block>
    <altmember cref="T:System.Web.UI.WebControls.CompareValidator" />
    <altmember cref="T:System.Web.UI.WebControls.CustomValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RangeValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RegularExpressionValidator" />
    <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
    <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
    <altmember cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.Text" />
    <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BaseValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.BaseValidator" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、直接呼び出されません。 このクラスから継承した検証コントロールは、基本プロパティを初期化するために独自のコンス トラクターから、このコンス トラクターを呼び出すことができます。  
  
 次の表は、のインスタンスの初期プロパティ値を示しています。 <xref:System.Web.UI.WebControls.BaseValidator>します。  
  
|プロパティ|初期値|  
|-----------|---------|  
|<xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A>|`true`|  
|<xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A>|<xref:System.Drawing.Color.Red%2A?displayProperty=fullName>|  
|<xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A>|`true`|  
|<xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A>|`false`|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.CompareValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.CustomValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RangeValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RegularExpressionValidator.#ctor" />
        <altmember cref="M:System.Web.UI.WebControls.RequiredFieldValidator.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">クライアントに HTML コンテンツを表示する出力ストリームを表す <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>HTML 属性およびスタイルを指定したコントロールの描画に使用する必要がある追加 <see cref="T:System.Web.UI.HtmlTextWriter" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender%2A> メソッドは、コントロールの HTML タグ内のコントロールの属性の表示に使用します。 このメソッドは通常、適切な属性を挿入する派生クラスで、コントロールの開発者によってオーバーライドされておりにスタイルが設定、 <xref:System.Web.UI.HtmlTextWriter> コントロールの出力ストリーム。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding the <see cref="M:System.Web.UI.WebControls.BaseValidator.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" /> method, be sure to call the corresponding method in the base class. Otherwise, the attributes contained in the base class will not be rendered.</para>
        </block>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="AssociatedControlID">
      <MemberSignature Language="C#" Value="public override string AssociatedControlID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssociatedControlID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.AssociatedControlID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このプロパティはサポートされていません。</summary>
        <value>このプロパティはサポートされていないため、常に <see cref="T:System.NotSupportedException" /> をスローします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティはサポートされていません。 このプロパティは、ベースでのみサポート <xref:System.Web.UI.WebControls.Label> クラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このプロパティを設定しようとしました。</exception>
        <altmember cref="P:System.Web.UI.WebControls.Label.AssociatedControlID" />
      </Docs>
    </Member>
    <Member MemberName="CheckControlValidationProperty">
      <MemberSignature Language="C#" Value="protected void CheckControlValidationProperty (string name, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckControlValidationProperty(string name, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">検証するコントロール。</param>
        <param name="propertyName">このメソッドを使用して、例外がスローされた場合、例外の原因を説明する追加のテキスト。</param>
        <summary>指定したコントロールがページに、検証プロパティを含むかどうかを検証します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty%2A> メソッドは、主にで使用されるヘルパー メソッド、 <xref:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid%2A> 指定したコントロールがページに表示され、検証プロパティが含まれて かどうかを確認するメソッドです。 このメソッドは、結果を報告する値を返しません。 代わりに、検証に失敗したときに、例外がスローされます。  
  
> [!NOTE]
>  このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">指定したコントロールが見つかりませんでした。  
  
 または  
  
 指定したコントロールがない、 <see cref="T:System.Web.UI.ValidationPropertyAttribute" /> 属性が関連付けられている; 検証コントロールにそのため、検証することはできません。</exception>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ControlPropertiesValid">
      <MemberSignature Language="C#" Value="protected virtual bool ControlPropertiesValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ControlPropertiesValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールがで指定されたかどうかを判断、 <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> プロパティが有効なコントロールです。</summary>
        <returns>
          <see langword="true" /> コントロールが指定された場合 <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> 有効なコントロールは、しない場合は、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid%2A> メソッドは、主にで使用されるヘルパー メソッド、 <xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A> プロパティを決定するかどうか、 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> プロパティには、有効な入力コントロールが含まれています。 入力コントロールを有効にする、 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> プロパティは、いくつかの値に設定する必要があり、その値は検証をサポートするページ上のコントロールである必要があります。  
  
> [!NOTE]
>  このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">値が指定されていない、 <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> プロパティです。  
  
 または  
  
 指定された入力コントロール、 <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> \] ページでプロパティが見つかりません。  
  
 または  
  
 指定された入力コントロール、 <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> プロパティがない、 <see cref="T:System.Web.UI.ValidationPropertyAttribute" /> 属性が関連付けられている; 検証コントロールにそのため、検証することはできません。</exception>
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      </Docs>
    </Member>
    <Member MemberName="ControlToValidate">
      <MemberSignature Language="C#" Value="public string ControlToValidate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ControlToValidate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.ValidatedControlConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.IDReferenceProperty</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または検証する入力コントロールを設定します。</summary>
        <value>検証する入力コントロールです。 既定値は <see cref="F:System.String.Empty" />, 、このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> プロパティを検証する入力コントロールを指定します。 このプロパティは、入力コントロールを除くすべての検証コントロールの ID に設定する必要があります、 <xref:System.Web.UI.WebControls.CustomValidator> コントロールで、空白にすることができます。 有効な入力コントロールを指定しない場合は、ページがレンダリングされるときに、例外がスローされます。 ID は、検証コントロールと同じコンテナー内のコントロールを参照する必要があります。 同じページまたはユーザー コントロールである必要がありますか、template 宣言されたコントロールの同じテンプレートである必要があります。  
  
 検証可能な標準のコントロールは次のとおりです。  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.FileUpload?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputFile?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputPassword?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputText?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlSelect?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlTextArea?displayProperty=fullName>  
  
> [!NOTE]
>  検証する入力コントロールに、 <xref:System.Web.UI.ValidationPropertyAttribute?displayProperty=fullName> コントロールに属性を適用する必要があります。  
  
 すべての検証コントロールを除く、 <xref:System.Web.UI.WebControls.RequiredFieldValidator> によって入力コントロールが指定された場合に、検証に合格、制御、 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> プロパティにテキストが含まれていません。 使用している場合、 <xref:System.Web.UI.WebControls.CustomValidator> いずれかのコントロール、クライアント側およびサーバー側の検証関数は呼び出されません。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、次を参照してください。 <xref:System.Web.UI.ThemeableAttribute> と [ASP.NET のテーマとスキン](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> プロパティを検証する入力コントロールを指定します。  
  
 [!code-csharp[Classic BaseValidator Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic BaseValidator Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.String.Empty" />
        <altmember cref="T:System.Web.UI.ValidationPropertyAttribute" />
        <altmember cref="T:System.Web.UI.WebControls.RequiredFieldValidator" />
        <altmember cref="T:System.Web.UI.WebControls.CustomValidator" />
      </Docs>
    </Member>
    <Member MemberName="DetermineRenderUplevel">
      <MemberSignature Language="C#" Value="protected virtual bool DetermineRenderUplevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DetermineRenderUplevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>検証コントロールがクライアント側の検証を実行できるかどうかを決定します。</summary>
        <returns>
          <see langword="true" /> 検証コントロールは、クライアント側の検証を実行できる場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel%2A> メソッドは、ヘルパー関数によって、主に使用される、 <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A> プロパティをクライアントのブラウザーがスクリプトのクライアントをサポートしているかどうかを判断します。 このプロパティを返す `true`, 、次の条件を true にする必要があります。  
  
-   ブラウザーが、クライアント スクリプトを有効にします。  
  
-   <xref:System.Web.HttpBrowserCapabilitiesBase.W3CDomVersion%2A> のプロパティ、 <xref:System.Web.HttpBrowserCapabilitiesBase> オブジェクトに格納されている、 <xref:System.Web.HttpRequest.Browser%2A?displayProperty=fullName> プロパティは 1 またはそれ以降。  
  
-   <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A> のプロパティ、 <xref:System.Web.HttpBrowserCapabilitiesBase> オブジェクトに格納されている、 <xref:System.Web.HttpRequest.Browser%2A?displayProperty=fullName> プロパティは、1.2 またはそれ以降。  
  
    > [!NOTE]
    >  このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ValidatorDisplay Display { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.ValidatorDisplay Display" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Display" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ValidatorDisplay</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはエラー メッセージの表示動作を検証コントロールに設定します。</summary>
        <value>
          <see cref="T:System.Web.UI.WebControls.ValidatorDisplay" /> 値のいずれか。 既定値は <see langword="Static" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.Display%2A> 検証コントロールのエラー メッセージの表示動作を指定するプロパティです。 次の表は、使用できるさまざまな値を一覧表示します。  
  
|表示動作|説明|  
|----------|--------|  
|`None`|検証メッセージが表示されているインラインではありません。|  
|`Static`|ページ レイアウトで、検証メッセージ用の領域が割り当てられます。|  
|`Dynamic`|検証が失敗した場合、ページに、検証メッセージ用の領域が動的に追加します。|  
  
> [!NOTE]
>  表示動作は、クライアント側の検証を実行するかどうかによって異なります。 クライアント側の検証がアクティブでない場合 \(ブラウザーでサポートされていないため、またはを使用して設定されているため、 <xref:System.Web.UI.Page.ClientTarget%2A?displayProperty=fullName> page ディレクティブまたは <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> プロパティ\)、 `ValidatorDisplay.Static` と `ValidatorDisplay.Dynamic` 同様に動作: エラー メッセージが表示されている場合にだけ領域を占有します。 動的に表示されていないときにメッセージの領域を割り当てることができる \(`ValidatorDisplay.Dynamic`\) はクライアント側の検証でのみ機能します。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、次を参照してください。 <xref:System.Web.UI.ThemeableAttribute> と [ASP.NET のテーマとスキン](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BaseValidator.Display%2A> プロパティ検証メッセージが追加される Web ページに動的に検証が失敗したときにその領域を指定します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、次を参照してください。 [スクリプトによる攻略概要](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)します。  
  
 [!code-csharp[Classic BaseValidator Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic BaseValidator Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定した値がのない、 <see cref="T:System.Web.UI.WebControls.ValidatorDisplay" /> 値。</exception>
        <altmember cref="T:System.Web.UI.WebControls.ValidatorDisplay" />
      </Docs>
    </Member>
    <Member MemberName="EnableClientScript">
      <MemberSignature Language="C#" Value="public bool EnableClientScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableClientScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.EnableClientScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはクライアント側の検証が有効になっているかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> クライアント側の検証が有効の場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> プロパティをクライアント側の検証が有効にするかどうかを指定します。  
  
 検証コントロールは、サーバーで常に検証を実行します。 DHTML でサポートされているブラウザー \(Internet Explorer 4.0 などとそれ以降\) をクライアントに対して検証を実行できるようにする完全なクライアント側の実装もあります。 クライアント側の検証では、サーバーに送信される前に、ユーザー入力をチェックして、検証プロセスが強化されます。 これにより、フォームを送信すると、サーバー側の検証に必要な情報のラウンド トリップを回避する前に、クライアントで検出されたエラーです。  
  
 既定では、この値に設定 `true`, 、ブラウザーがサポートされている場合、クライアント側の検証ができます。 コントロールごとにクライアント側の検証を無効にすることができます。 これは、クライアントに対する動的な更新により、ページのレイアウトに問題が発生する場合、または検証が実行する前に、いくつかのサーバー コードを実行する場合に便利です。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、次を参照してください。 <xref:System.Web.UI.ThemeableAttribute> と [ASP.NET のテーマとスキン](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BaseValidator.EnableClientScript%2A> プロパティをクライアント側の検証を無効にして、ランダムな数は、サーバーで生成できるようにします。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、次を参照してください。 [スクリプトによる攻略概要](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)します。  
  
 [!code-csharp[Classic BaseValidator Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic BaseValidator Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public override bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または検証コントロールが有効になっているかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 検証コントロールが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> プロパティ検証コントロールが有効にするかどうかを指定します。 このプロパティを設定して、検証コントロールを無効にできます `false`します。  
  
 いずれかを設定、 <xref:System.Web.UI.Control.Visible%2A?displayProperty=fullName> または <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> プロパティを `false` により検証は実行されています。 これにより、 <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> を常に評価するプロパティ `true`します。  
  
 <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> プロパティは若干異なり、 <xref:System.Web.UI.Control.Visible%2A?displayProperty=fullName> プロパティです。 場合、 <xref:System.Web.UI.Control.Visible%2A?displayProperty=fullName> に検証コントロールのプロパティが設定されている `true`, が、 <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> にプロパティが設定されている `false`, 、検証コントロールは、クライアント側の検証が無効な状態でレンダリングします。 できますし、再度有効にするクライアントの検証コントロール DHTML スクリプトを使用しています。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> プロパティを有効にする、またはサーバー側のコードを使用して Web ページ上の検証コントロールを無効にします。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、次を参照してください。 [スクリプトによる攻略概要](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)します。  
  
 [!code-csharp[Classic BaseValidator.Enabled Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator.Enabled Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic BaseValidator.Enabled Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator.Enabled Example/VB/sourcevb.aspx#1)]  
  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BaseValidator.Enabled%2A> プロパティを有効にする、またはクライアント側コードを使用して Web ページ上の検証コントロールを無効にします。  
  
<!-- TODO: review snippet reference  [!CODE [Classic BaseValidator.Enabled Example2\#1](Classic BaseValidator.Enabled Example2#1)]  -->  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorMessage">
      <MemberSignature Language="C#" Value="public string ErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のテキストでエラー メッセージが表示される、 <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> 検証が失敗したときを制御します。</summary>
        <value>表示されるエラー メッセージ、 <see cref="T:System.Web.UI.WebControls.ValidationSummary" /> 検証が失敗したときを制御します。 既定値は空の文字列 \(""\) です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する場合、 <xref:System.Web.UI.WebControls.ValidationSummary> コントロールを使用して、 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> に表示するテキストを指定するプロパティ、 <xref:System.Web.UI.WebControls.ValidationSummary> 検証に失敗すると、現在の検証コントロールを制御します。 検証コントロール自体に表示するテキストを指定するには、使用、 <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> プロパティです。  
  
> [!NOTE]
>  設定した場合、 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> プロパティが設定されていない、 <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> プロパティ、値の <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> プロパティは、検証コントロールも表示されます。  
  
 このプロパティの値を設定すると、デザイナーのツールを使用してリソース ファイルに自動的に保存できます。 詳細については、次を参照してください。 <xref:System.ComponentModel.LocalizableAttribute> と [ASP.NET のグローバリゼーションおよびローカリゼーション](http://msdn.microsoft.com/ja-jp/8ef3838e-9d05-4236-9dd0-ceecff9df80d)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> の別のメッセージを指定するプロパティ、 <xref:System.Web.UI.WebControls.ValidationSummary> コントロールと <xref:System.Web.UI.WebControls.RequiredFieldValidator> と <xref:System.Web.UI.WebControls.CompareValidator> コントロールです。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、次を参照してください。 [スクリプトによる攻略概要](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)します。  
  
 [!code-csharp[Classic BaseValidator Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic BaseValidator Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.Text" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateIsValid">
      <MemberSignature Language="C#" Value="protected abstract bool EvaluateIsValid ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool EvaluateIsValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラス内でオーバーライドされた場合、このメソッドには、入力コントロールの値が有効かどうかを判断するコードが含まれます。</summary>
        <returns>入力コントロールの値が有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Use the <xref:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid%2A> method to determine whether the value in the input control specified by the <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> property is valid.  
  
> [!NOTE]
>  This method is used primarily by control developers.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>You must implement this method in a derived class to return whether the value in the input control is valid.</para>
        </block>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.Validate" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Red")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または検証に失敗したときに表示されるメッセージの色を設定します。</summary>
        <value>A <see cref="T:System.Drawing.Color" /> 検証が失敗したときに表示されるメッセージの色を表します。 既定値は、<see cref="P:System.Drawing.Color.Red" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A> プロパティの検証が失敗したときに、検証コントロールに表示されるメッセージのカスタム テキストの色を指定します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BaseValidator.ForeColor%2A> 青色で、検証メッセージを表示するプロパティです。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、次を参照してください。 [スクリプトによる攻略概要](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)します。  
  
 [!code-csharp[Classic BaseValidator.ForeColor Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic BaseValidator.ForeColor Example/CS/sourcecs.aspx#1)]
 [!code-vb[Classic BaseValidator.ForeColor Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic BaseValidator.ForeColor Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="GetControlRenderID">
      <MemberSignature Language="C#" Value="protected string GetControlRenderID (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetControlRenderID(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetControlRenderID(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">クライアント ID を取得するコントロールの名前。</param>
        <summary>指定したコントロールのクライアント ID を取得します。</summary>
        <returns>指定したコントロールのクライアント ID。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.GetControlRenderID%2A> 指定されたコントロールのクライアント ID を取得します。 詳細については、「<xref:System.Web.UI.Control.ClientID%2A>」を参照してください。  
  
> [!NOTE]
>  このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.ClientID" />
      </Docs>
    </Member>
    <Member MemberName="GetControlValidationValue">
      <MemberSignature Language="C#" Value="protected string GetControlValidationValue (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance string GetControlValidationValue(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetControlValidationValue(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">値を取得する入力コントロールの名前。</param>
        <summary>指定した入力コントロールに関連付けられている値を取得します。</summary>
        <returns>指定した入力コントロールに関連付けられている値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.GetControlValidationValue%2A> コントロールの種類に関係なく、指定した入力コントロールに関連付けられている値を取得します。 このメソッドを使用して、値を取得するなど、 <xref:System.Web.UI.WebControls.TextBox> から選択した項目の値と同様に、コントロール、 <xref:System.Web.UI.WebControls.ListBox> コントロールです。 指定したコントロールが見つからない場合 `null` が返されます。  
  
> [!NOTE]
>  このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetValidationProperty">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.PropertyDescriptor GetValidationProperty (object component);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.PropertyDescriptor GetValidationProperty(object component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.GetValidationProperty(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="component">A <see cref="T:System.Object" /> の検証プロパティを取得するコントロールを表します。</param>
        <summary>\(存在する場合は、コントロールの検証プロパティを決定します。</summary>
        <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> コントロールの検証プロパティを格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BaseValidator.GetValidationProperty%2A> メソッドは、指定された入力コントロールの検証プロパティを取得するヘルパー関数です。  
  
> [!NOTE]
>  このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.PropertyDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="IsUnobtrusive">
      <MemberSignature Language="C#" Value="protected bool IsUnobtrusive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnobtrusive" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.IsUnobtrusive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが控え目な JavaScript を生成するかどうかを示す値を取得します。</summary>
        <value>コントロールが控え目な JavaScript を生成する場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを返します `false` 場合、 <xref:System.Web.UI.Page.UnobtrusiveValidationMode%2A> プロパティの値が <xref:System.Web.UI.UnobtrusiveValidationMode.None>。 それ以外の場合このプロパティを返します `true` します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または関連付けられた入力コントロールが検証に合格するかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 関連付けられた入力コントロールが検証を渡す場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> プロパティに関連付けられた入力コントロールが検証に合格するかどうかを決定します。  
  
> [!CAUTION]
>  このプロパティの既定値があるため `true`, が返されます `true` 検証が実行される前に、このプロパティをクエリする場合。 たとえばなどが該当でこのプロパティを使用すると、 <xref:System.Web.UI.Control.Load?displayProperty=fullName> ページのイベントです。  
  
 <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> プロパティが評価される場合にのみ、 <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> メソッドが呼び出されます。 呼び出すことができます、 <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> の各検証メソッドがページ上で個別に制御またはを使用して、一度にすべての呼び出し、 <xref:System.Web.UI.Page.Validate%2A?displayProperty=fullName> メソッドです。 ボタンがコントロールとその `CausesValidation` プロパティに設定 `true` も呼び出されます、 <xref:System.Web.UI.Page.Validate%2A?displayProperty=fullName> メソッドです。  
  
> [!NOTE]
>  検証が行われた後に、このプロパティの値を手動で変更を行うことができます。 これにより、検証結果をオーバーライドするために必要な場合です。  
  
 <xref:System.Web.UI.Page.IsValid%2A?displayProperty=fullName> にページのプロパティが設定されている `true` 場合にのみ、 <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> 、ページ上の各検証コントロールのプロパティに設定されても `true`です。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、次を参照してください。 <xref:System.Web.UI.ThemeableAttribute> と [ASP.NET のテーマとスキン](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> プロパティに関連付けられた入力コントロールが検証に合格するかどうかを決定します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、次を参照してください。 [スクリプトによる攻略概要](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)します。  
  
 [!code-csharp[BaseValidatorIsValid\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseValidatorIsValid/CS/basevalidatorisvalidcs.aspx#1)]
 [!code-vb[BaseValidatorIsValid\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseValidatorIsValid/VB/basevalidatorisvalidvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
        <altmember cref="E:System.Web.UI.Control.Load" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.Validate" />
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="P:System.Web.UI.Page.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.Control.Init" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出してから基本コントロールの <xref:System.Web.UI.Control.OnInit%2A> 設定、メソッド、 <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> プロパティを <xref:System.Drawing.Color.Red%2A> 、次の条件に該当する場合。  
  
-   <xref:System.Web.UI.WebControls.WebControl.ForeColor%2A> プロパティが設定されていません。  
  
-   <xref:System.Web.UI.Control.RenderingCompatibility%2A> プロパティは、ASP.NET のバージョンを示すよりも前 `4.0`します。 既定では、ASP.NET 4 およびそれ以降のバージョンの検証コントロールはエラーを赤色で表示する実行されません。 検証コントロールの外観を制御する方法については、次を参照してください。 [ASP.NET Web ページでユーザー入力の検証](http://msdn.microsoft.com/ja-jp/4ad3dacb-89e0-4cee-89ac-40a3f2a85461)します。  
  
 このメソッドは、また、ページの検証コントロールを登録します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.BaseValidator.OnInit(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.Control.Init" />
        <altmember cref="M:System.Web.UI.Control.OnInit(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.Control.PreRender" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クライアントのブラウザーを確認し、表示する前に互換性のため、検証コントロールを構成するには、このメソッドをオーバーライドされています。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Web.UI.WebControls.BaseValidator.OnPreRender%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.BaseValidator.OnPreRender(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
        <altmember cref="M:System.Web.UI.Control.OnPreRender(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Web.UI.Control.Unload" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ページの検証コントロールの登録を解除するには、このメソッドをオーバーライドされています。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.Web.UI.WebControls.BaseValidator.OnUnload%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Web.UI.WebControls.BaseValidator.OnUnload(System.EventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.Web.UI.Control.Unload" />
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="PropertiesValid">
      <MemberSignature Language="C#" Value="protected bool PropertiesValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PropertiesValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.PropertiesValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールが指定されているかどうかを示す値を取得、 <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> プロパティが有効なコントロールです。</summary>
        <value>
          <see langword="true" /> コントロールが指定された場合 <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> 有効なコントロールは、しない場合は、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.PropertiesValid%2A> を確認するにするかどうか、 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> プロパティには、有効な入力コントロールが含まれています。 入力コントロールを有効にする、 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> プロパティは、ページ上のコントロールに設定する必要があります。  
  
> [!NOTE]
>  このプロパティは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">値が指定されていない、 <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> プロパティです。  
  
 または  
  
 指定された入力コントロール、 <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> \] ページでプロパティが見つかりません。</exception>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.ControlPropertiesValid" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.CheckControlValidationProperty(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterValidatorCommonScript">
      <MemberSignature Language="C#" Value="protected void RegisterValidatorCommonScript ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RegisterValidatorCommonScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クライアント側の検証については、ページ上のコードを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.RegisterValidatorCommonScript%2A> クライアント側の検証を実行するページ上のコードを登録します。  
  
> [!NOTE]
>  このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Call this method in the <see cref="E:System.Web.UI.Control.PreRender" /> event handler of the derived class to register the code that performs client-side validation.</para>
        </block>
        <altmember cref="E:System.Web.UI.Control.PreRender" />
      </Docs>
    </Member>
    <Member MemberName="RegisterValidatorDeclaration">
      <MemberSignature Language="C#" Value="protected virtual void RegisterValidatorDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RegisterValidatorDeclaration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>配列名を使用するように ECMAScript 配列宣言を登録 <see langword="Page_Validators" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.RegisterValidatorDeclaration%2A> 配列名を使用するように ECMAScript 配列宣言を追加するためメソッド `Page_Validators`します。  
  
> [!NOTE]
>  このメソッドは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterArrayDeclaration(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">クライアントに表示する出力ストリームを格納する <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>クライアント上のコントロールが表示されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.BaseValidator.Render%2A> 検証コントロールの HTML マークアップを生成するメソッドを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderUplevel">
      <MemberSignature Language="C#" Value="protected bool RenderUplevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderUplevel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.RenderUplevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントのブラウザーが「上位」の表示をサポートするかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> ブラウザーは、「レベル」の表示をサポートしている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.RenderUplevel%2A> プロパティをクライアントのブラウザーが「上位」の表示をサポートするかどうかを確認します。 「上位」の表示をサポートするために、ブラウザーでは、Microsoft Internet Explorer ドキュメント オブジェクト モデル \(DOM\) バージョン 4 以降と ECMAScript バージョン 1.2 またはそれ以降をサポートしてする必要があります。  
  
> [!NOTE]
>  このプロパティは、主にコントロールの開発者によって使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.DetermineRenderUplevel" />
      </Docs>
    </Member>
    <Member MemberName="SetFocusOnError">
      <MemberSignature Language="C#" Value="public bool SetFocusOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SetFocusOnError" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.SetFocusOnError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定で指定されたコントロールにフォーカスを設定するかどうかを示す値、 <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> プロパティの検証が失敗したとき。</summary>
        <value>
          <see langword="true" /> 指定されたコントロールにフォーカスを設定する <see cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" /> 検証が失敗したときにそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.SetFocusOnError%2A> プロパティで指定されたコントロールにフォーカスが自動的に設定するかどうかを指定する、 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> プロパティ検証コントロールが失敗したとき。 これにより、ユーザーが適切なコントロールを簡単に更新できます。  
  
 複数の検証コントロールが失敗するし、このプロパティに設定 `true`, で指定したコントロール、 <xref:System.Web.UI.WebControls.BaseValidator.ControlToValidate%2A> プロパティの最初の検証コントロールがフォーカスを受け取る。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、次を参照してください。 <xref:System.Web.UI.ThemeableAttribute> と [ASP.NET のテーマとスキン](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ControlToValidate" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または検証に失敗したときに、検証コントロールに表示されるテキストを設定します。</summary>
        <value>検証が失敗したときに、検証コントロールに表示されるテキストです。 既定値は空の文字列 \(""\) です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> プロパティ検証が失敗したときに、検証コントロールに表示されるテキストを指定します。 使用して、ページの検証が失敗したすべてのコントロールの概要を表示することも、 <xref:System.Web.UI.WebControls.ValidationSummary> コントロールです。 表示するテキストを指定する、 <xref:System.Web.UI.WebControls.ValidationSummary> コントロールを使用して、 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> プロパティです。  
  
> [!NOTE]
>  設定した場合、 <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> プロパティが設定されていない、 <xref:System.Web.UI.WebControls.BaseValidator.Text%2A> プロパティ、値の <xref:System.Web.UI.WebControls.BaseValidator.ErrorMessage%2A> プロパティは、検証コントロールも表示されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ValidationSummary" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.BaseValidator.Validate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>関連付けられた入力コントロールと更新プログラムで検証を実行、 <see cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" /> プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> メソッドが関連付けられている入力コントロールに対して検証を実行します。 このメソッドでは、プログラムを使用して入力コントロールに対して検証を実行することができます。<xref:System.Web.UI.WebControls.BaseValidator.IsValid%2A> に検証結果をプロパティが自動的に更新します。  
  
   
  
## 例  
 例については、 <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> 派生クラスで使用する方法を参照してください、 <xref:System.Web.UI.WebControls.CompareValidator> クラスの概要です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.IsValid" />
        <altmember cref="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
        <altmember cref="M:System.Web.UI.WebControls.BaseValidator.EvaluateIsValid" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.BaseValidator.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または、この検証コントロールが属する検証グループの名前を設定します。</summary>
        <value>この検証コントロールが属する検証グループの名前。 既定値は空の文字列 \(""\) です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET には、多くのコントロールをサーバーにポストバックする機能が用意されています。 これらのコントロールのいずれかがの場合、その `CausesValidation` プロパティに設定 `true`, 、サーバーへのコントロールのポストバック時に検証が実行します。 次のコントロールでは、サーバーにポストバックする機能があります。  
  
-   <xref:System.Web.UI.WebControls.BulletedList?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.Button?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.CheckBox?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.CheckBoxList?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.DropDownList?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlButton?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputButton?displayProperty=fullName>  
  
-   <xref:System.Web.UI.HtmlControls.HtmlInputImage?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.ImageButton?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.LinkButton?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.ListBox?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.RadioButtonList?displayProperty=fullName>  
  
-   <xref:System.Web.UI.WebControls.TextBox?displayProperty=fullName>  
  
> [!NOTE]
>  これらのコントロールの後のサーバーにポストバックされる場合にのみ、 `AutoPostBack` にプロパティが設定されている `true`します。  
  
 これらの各コントロールが、 `ValidationGroup` プロパティを設定すると、コントロールが、サーバーへのポストバックがトリガーされたときに、指定したグループ内で、検証コントロールのみを検証します。 使用して、 <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> 検証コントロールを検証グループに割り当てるためのプロパティです。<xref:System.Web.UI.Page> クラスが公開も、 <xref:System.Web.UI.Page.GetValidators%2A> メソッドと <xref:System.Web.UI.Page.Validate%2A> を受け入れるメソッド、 <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> 入力パラメーターです。  
  
 テーマまたはスタイル シートのテーマでは、このプロパティを設定できません。 詳細については、次を参照してください。 <xref:System.Web.UI.ThemeableAttribute> と [ASP.NET のテーマとスキン](http://msdn.microsoft.com/ja-jp/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)します。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Web.UI.WebControls.BaseValidator.ValidationGroup%2A> 検証コントロールをグループに割り当てるためのプロパティです。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、次を参照してください。 [スクリプトによる攻略概要](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)します。  
  
 [!code-csharp[BaseValidatorValidationGroup\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/BaseValidatorValidationGroup/CS/BaseValidatorValidationGroupcs.aspx#1)]
 [!code-vb[BaseValidatorValidationGroup\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/BaseValidatorValidationGroup/VB/BaseValidatorValidationGroupvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" />
        <altmember cref="P:System.Web.UI.WebControls.IButtonControl.ValidationGroup" />
        <altmember cref="M:System.Web.UI.Page.Validate" />
        <altmember cref="M:System.Web.UI.Page.GetValidators(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>