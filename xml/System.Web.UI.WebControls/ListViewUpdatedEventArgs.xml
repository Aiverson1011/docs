<Type Name="ListViewUpdatedEventArgs" FullName="System.Web.UI.WebControls.ListViewUpdatedEventArgs">
  <TypeSignature Language="C#" Value="public class ListViewUpdatedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListViewUpdatedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.ListViewUpdatedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="E:System.Web.UI.WebControls.ListView.ItemUpdated" /> イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.ListView> 昇給を制御、 <xref:System.Web.UI.WebControls.ListView.ItemUpdated> イベントと、 <xref:System.Web.UI.WebControls.ListView.UpdateItem%2A> メソッドが呼び出されるか、コントロールの更新\] ボタンがクリックされたとき、後は、 <xref:System.Web.UI.WebControls.ListView> コントロールが項目を更新します。 \(更新ボタンは、ボタンが `CommandName` プロパティが「更新」に設定します\)。 これにより、更新操作の結果を確認するなど、このイベントが発生するたびに、カスタム ルーチンを実行するイベント処理メソッドを提供できます。  
  
 A <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> オブジェクトがイベント処理メソッドに渡されます。 このオブジェクトでは、更新項目の数を特定し、発生した例外を取得できます。 更新操作の影響を受けたアイテム数を確認するのには、使用、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows%2A> プロパティです。 すべての例外が発生したかどうかを確認するのには、使用、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception%2A> プロパティです。 設定して、イベント処理メソッドで例外が処理されたかどうかを示すことができます、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A> プロパティです。 使用して元のフィールド値にアクセスすることができます、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.OldValues%2A> プロパティです。 更新されたフィールドの値を使用してアクセスすることができます、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.NewValues%2A> プロパティです。  
  
 既定では、 <xref:System.Web.UI.WebControls.ListView> 項目が更新操作の後読み取り専用のモードに戻ります。 更新操作中に発生した例外を処理する場合は、維持、 <xref:System.Web.UI.WebControls.ListView> を設定して編集モードの項目、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode%2A> プロパティを `true`します。  
  
 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> クラスのインスタンスの初期プロパティ値一覧については、<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.%23ctor%2A> コンストラクターに関するトピックを参照してください。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> オブジェクトを更新操作中に例外が発生したかどうかを決定します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.UI.WebControls.ListView.ItemUpdated\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/CS/ListViewItemUpdatedCS.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/VB/ListViewItemUpdatedVB.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.ListView" />
    <altmember cref="E:System.Web.UI.WebControls.ListView.ItemUpdated" />
    <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows" />
    <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception" />
    <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled" />
    <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListViewUpdatedEventArgs (int affectedRows, Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 affectedRows, class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.ListViewUpdatedEventArgs.#ctor(System.Int32,System.Exception)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="affectedRows" Type="System.Int32" />
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="affectedRows">更新操作によって影響を受けた行の数。</param>
        <param name="exception">更新操作が実行されたときに発生した例外。 例外が発生しなかった場合に使用して <see langword="null" />します。</param>
        <summary>
          <see cref="T:System.Web.UI.WebControls.ListViewUpdatedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しいインスタンスを初期化するためにこのコンス トラクターを使用して、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> クラスです。  
  
> [!NOTE]
>  このコンス トラクターは、イベントを発生させる場合に、主にコントロールの開発者によって使用されます。  
  
 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> クラスのインスタンスのプロパティの初期値を次の表に示します。  
  
|プロパティ|初期値|  
|-----------|---------|  
|<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows%2A>|`affectedRows` パラメーターの値。|  
|<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception%2A>|<xref:System.Exception?displayProperty=fullName> オブジェクトに含まれている、 `e` パラメーター。|  
|<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A>|`false`。|  
|<xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode%2A>|`false`。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
        <altmember cref="E:System.Web.UI.WebControls.ListView.ItemUpdated" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode" />
      </Docs>
    </Member>
    <Member MemberName="AffectedRows">
      <MemberSignature Language="C#" Value="public int AffectedRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AffectedRows" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新操作の影響を受けた行の数を取得します。</summary>
        <value>更新操作によって影響を受けた行の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows%2A> プロパティをデータ ソースによって返される更新操作の影響を受けた行の数を決定します。 通常 1 つの項目が更新されるため、このプロパティには通常 0 または 1 の値が含まれます。  
  
 更新操作の実行中にエラーが発生する例外を発生させないことができます。 その場合は、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows%2A> 項目が更新されたことを確認するプロパティを使用できます。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows%2A> プロパティ項目が更新されたことを確認します。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> クラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ListView.ItemUpdated\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/CS/ListViewItemUpdatedCS.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/VB/ListViewItemUpdatedVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>存在する場合、その更新操作中に発生した例外を取得します。</summary>
        <value>存在する場合は、更新操作中に発生した例外例外が発生しなかった場合 <see langword="null" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception%2A> プロパティ \(存在する場合\)、例外を更新操作中に発生しました。 このプロパティの取得のかどうかは例外が発生しなかった、 `null`です。  
  
> [!NOTE]
>  例外が発生した例外を処理するイベント ハンドラーで設定されている場合、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A> プロパティを `true`します。 それ以外の場合、 <xref:System.Web.UI.WebControls.ListView> コントロールでは、例外が再度スローします。  
  
   
  
## 例  
 次の例では、使用する方法、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception%2A> プロパティを更新操作中に例外が発生したかどうかを確認します。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> クラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ListView.ItemUpdated\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/CS/ListViewItemUpdatedCS.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/VB/ListViewItemUpdatedVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled" />
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandled">
      <MemberSignature Language="C#" Value="public bool ExceptionHandled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionHandled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または更新操作中に発生した例外をイベント中に処理されたかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 例外が処理された場合、イベント ハンドラーです。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 更新操作中に例外が発生する場合に使用して、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A> イベント中に例外を処理するかどうかを示すプロパティです。 このプロパティ設定されている場合 `true`, 、例外が処理されでが再スローされないと見なされます、 <xref:System.Web.UI.WebControls.ListView> コントロールです。 このプロパティ設定されている場合 `false`, 、 <xref:System.Web.UI.WebControls.ListView> コントロールでは、例外が再度スローします。 どの例外が発生したかを確認するを使用して、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception%2A> プロパティです。  
  
   
  
## 例  
 次の例を使用する方法を示しています、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.ExceptionHandled%2A> プロパティを例外が、イベント ハンドラーで処理されたことを示します。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> クラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ListView.ItemUpdated\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/CS/ListViewItemUpdatedCS.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/VB/ListViewItemUpdatedVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.AffectedRows" />
        <altmember cref="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.Exception" />
      </Docs>
    </Member>
    <Member MemberName="KeepInEditMode">
      <MemberSignature Language="C#" Value="public bool KeepInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="T:System.Web.UI.WebControls.ListView" /> コントロールを更新操作の後の編集モードのままです。</summary>
        <value>
          <see langword="true" /> 更新操作の後の編集モードの場合は、コントロールそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、 <xref:System.Web.UI.WebControls.ListView> 更新操作の後読み取り専用モードに制御が戻ります。 設定、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode%2A> プロパティを `true` ことを指定する、 <xref:System.Web.UI.WebControls.ListView> コントロールが編集モードで維持する必要があります。 これには、ユーザーが入力した値も保持されます。  
  
   
  
## 例  
 使用する例を次に示します、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.KeepInEditMode%2A> を保持するプロパティ、 <xref:System.Web.UI.WebControls.ListView> 、例外が発生すると、編集モードで制御します。 このコード例が示されている例の一部は、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs> クラスです。  
  
 [!code-csharp[System.Web.UI.WebControls.ListView.ItemUpdated\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/CS/ListViewItemUpdatedCS.aspx#2)]
 [!code-vb[System.Web.UI.WebControls.ListView.ItemUpdated\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ListView.ItemUpdated/VB/ListViewItemUpdatedVB.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
      </Docs>
    </Member>
    <Member MemberName="NewValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary NewValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary NewValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.NewValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新済みの項目の新しい値を格納しているディクショナリを取得します。</summary>
        <value>更新済みの項目の新しい値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.NewValues%2A> プロパティを更新済みの項目の新しいフィールド値にアクセスします。 たとえば、更新された項目のログを保持するのにこれらの値を使用できます。  
  
 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.NewValues%2A> プロパティを実装するオブジェクトを返す、 <xref:System.Collections.Specialized.IOrderedDictionary> インターフェイスです。 オブジェクトに含まれる <xref:System.Collections.DictionaryEntry> 更新済みの項目のフィールドを表すオブジェクト。  
  
> [!NOTE]
>  インデクサーを使用する簡単な方法として、 <xref:System.Collections.Specialized.IOrderedDictionary> 値を直接フィールドにアクセスするオブジェクト。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="E:System.Web.UI.WebControls.ListView.ItemUpdated" />
      </Docs>
    </Member>
    <Member MemberName="OldValues">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.IOrderedDictionary OldValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.IOrderedDictionary OldValues" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.ListViewUpdatedEventArgs.OldValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.IOrderedDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新済みの項目の元の値を格納しているディクショナリを取得します。</summary>
        <value>更新済みの項目の元の値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.OldValues%2A> プロパティを更新したアイテムの元のフィールド値にアクセスします。 たとえば、更新された項目のログを保持するのにこれらの値を使用できます。  
  
 <xref:System.Web.UI.WebControls.ListViewUpdatedEventArgs.OldValues%2A> プロパティを実装するオブジェクトを返す、 <xref:System.Collections.Specialized.IOrderedDictionary> インターフェイスです。 オブジェクトに含まれる <xref:System.Collections.DictionaryEntry> 更新済みの項目のフィールドを表すオブジェクト。  
  
> [!NOTE]
>  インデクサーを使用する簡単な方法として、 <xref:System.Collections.Specialized.IOrderedDictionary> 値を直接フィールドにアクセスするオブジェクト。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.WebControls.ListView" />
        <altmember cref="T:System.Collections.Specialized.IOrderedDictionary" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="E:System.Web.UI.WebControls.ListView.ItemUpdated" />
      </Docs>
    </Member>
  </Members>
</Type>