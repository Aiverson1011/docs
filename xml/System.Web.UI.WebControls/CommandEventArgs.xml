<Type Name="CommandEventArgs" FullName="System.Web.UI.WebControls.CommandEventArgs">
  <TypeSignature Language="C#" Value="public class CommandEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.CommandEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see langword="Command" /> イベントのデータを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **languageKeyword tag is not supported!!!!**  
 event is raised when a <xref:System.Web.UI.WebControls.Button> or <xref:System.Web.UI.WebControls.ImageButton> control is clicked.  
  
 The <xref:System.Web.UI.WebControls.CommandEventArgs> object contains data about the **languageKeyword tag is not supported!!!!**  
 event that can be accessed in the event handler. Using the properties available in the <xref:System.Web.UI.WebControls.CommandEventArgs> class, you can determine the name of the command to perform, such as **languageKeyword tag is not supported!!!!**  
, in addition to an optional argument that supplements the command, such as **languageKeyword tag is not supported!!!!**  
.  
  
 For a list of initial property values for an instance of <xref:System.Web.UI.WebControls.CommandEventArgs>, see the <xref:System.Web.UI.WebControls.CommandEventArgs.%23ctor%2A> constructor.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## 例  
 The following example demonstrates how to access the properties in <xref:System.Web.UI.WebControls.CommandEventArgs> to determine the command to perform. This example specifies the event handler declaratively, using the <xref:System.Web.UI.WebControls.Button.OnClick%2A> property of the <xref:System.Web.UI.WebControls.Button> control.  
  
 [!code-csharp[ButtonCommandNameArgument\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-vb[ButtonCommandNameArgument\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 The following code example demonstrates how to specify the event handler and programmatically add it to the event in the `Page_Load` method.  
  
 [!code-csharp[ButtonCommand\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommand/CS/buttoncommandcs.aspx#1)]
 [!code-vb[ButtonCommand\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommand/VB/buttoncommandvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.CommandEventHandler" />
    <altmember cref="E:System.Web.UI.WebControls.Button.Command" />
    <altmember cref="E:System.Web.UI.WebControls.ImageButton.Command" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandEventArgs (System.Web.UI.WebControls.CommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.CommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CommandEventArgs.#ctor(System.Web.UI.WebControls.CommandEventArgs)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.CommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.CommandEventArgs" />。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> と他のクラス <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを使用して作成しの新しいインスタンスを初期化、 <xref:System.Web.UI.WebControls.CommandEventArgs> クラスの指定して <xref:System.Web.UI.WebControls.CommandEventArgs> オブジェクトです。  
  
 インスタンス <xref:System.Web.UI.WebControls.CommandEventArgs> が作成されるこのコンス トラクターの呼び出しで、次のプロパティが指定された値に初期化されます。  
  
|プロパティ|初期値|  
|-----------|---------|  
|CommandName|`e.CommandName` パラメーター。|  
|CommandArgument|`e.CommandArgument` パラメーター。|  
  
   
  
## 例  
 次の例では、作成しの新しいインスタンスを初期化する方法、 <xref:System.Web.UI.WebControls.CommandEventArgs> クラスの指定して <xref:System.Web.UI.WebControls.CommandEventArgs> オブジェクトです。  
  
 [!code-csharp[Classic CommandEventArgs.CommandEventArgs Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CommandEventArgs.CommandEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic CommandEventArgs.CommandEventArgs Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CommandEventArgs.CommandEventArgs Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandEventArgs (string commandName, object argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandName, object argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.CommandEventArgs.#ctor(System.String,System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandName" Type="System.String" />
        <Parameter Name="argument" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="commandName">コマンドの名前。</param>
        <param name="argument">A <see cref="T:System.Object" /> コマンドの引数を格納しています。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> 指定されたコマンドの名前と引数を持つクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを使用して作成しの新しいインスタンスを初期化、 <xref:System.Web.UI.WebControls.CommandEventArgs> クラスの指定したコマンドの名前と引数を使用します。  
  
 インスタンス <xref:System.Web.UI.WebControls.CommandEventArgs> が作成されるこのコンス トラクターの呼び出しで、次のプロパティが指定された値に初期化されます。  
  
|プロパティ|初期値|  
|-----------|---------|  
|CommandName|`commandName` パラメーターの値。|  
|CommandArgument|`argument` パラメーターの値。|  
  
   
  
## 例  
 次の例では、作成しの新しいインスタンスを初期化する方法、 <xref:System.Web.UI.WebControls.CommandEventArgs> クラスの指定したコマンドの名前と引数を使用します。  
  
 [!code-csharp[Classic CommandEventArgs.CommandEventArgs1 Example\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CommandEventArgs.CommandEventArgs1 Example/CS/source.cs#1)]
 [!code-vb[Classic CommandEventArgs.CommandEventArgs1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CommandEventArgs.CommandEventArgs1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandArgument">
      <MemberSignature Language="C#" Value="public object CommandArgument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandArgument" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CommandEventArgs.CommandArgument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コマンドの引数を取得します。</summary>
        <value>A <see cref="T:System.Object" /> コマンドの引数を格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A> プログラマによって設定する任意の文字列を含めることができます。<xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A> プロパティを補完、 <xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A> プロパティによるコマンドの追加情報を提供することができます。 たとえば、設定、 <xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A> プロパティを `Sort` し、設定、 <xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A> プロパティを `Ascending` 昇順で並べ替えるにはコマンドを指定します。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A> を実行するコマンドの補足情報を決定するプロパティです。  
  
 [!code-csharp[ButtonCommandNameArgument\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-vb[ButtonCommandNameArgument\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandArgument" />
        <altmember cref="P:System.Web.UI.WebControls.ImageButton.CommandArgument" />
      </Docs>
    </Member>
    <Member MemberName="CommandName">
      <MemberSignature Language="C#" Value="public string CommandName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.CommandEventArgs.CommandName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コマンド名を取得します。</summary>
        <value>実行するコマンドの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A> プロパティのコマンドを実行します。<xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A> プロパティは、任意の文字列がプログラマによって設定を含めることができます。 プログラマはコードでコマンド名を特定し、適切なタスクを実行します。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A> プロパティをプログラムで実行するコマンドを確認します。  
  
 [!code-csharp[ButtonCommandNameArgument\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ButtonCommandNameArgument/CS/buttoncommandnamecs.aspx#1)]
 [!code-vb[ButtonCommandNameArgument\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ButtonCommandNameArgument/VB/buttoncommandnamevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Button.CommandName" />
        <altmember cref="P:System.Web.UI.WebControls.ImageButton.CommandName" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.CommandEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>