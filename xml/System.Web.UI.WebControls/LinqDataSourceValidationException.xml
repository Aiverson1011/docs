<Type Name="LinqDataSourceValidationException" FullName="System.Web.UI.WebControls.LinqDataSourceValidationException">
  <TypeSignature Language="C#" Value="public class LinqDataSourceValidationException : Exception, System.Web.DynamicData.IDynamicValidatorException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit LinqDataSourceValidationException extends System.Exception implements class System.Runtime.Serialization.ISerializable, class System.Web.DynamicData.IDynamicValidatorException" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSourceValidationException" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicValidatorException</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>新規の検証中に発生したか、値が挿入、更新、または削除する前に、値を変更する例外を説明する <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> コントロールです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> クラスには、型変換とプロパティ set アクセス操作子の例外が含まれています。 含まれるすべての検証中にスローされた例外、 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> コレクションです。 反復処理するそれぞれの検証例外を取得することができます、 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> コレクションです。  
  
 通常の例外を処理する、 <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, 、および <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> イベントです。 検証例外がスローされた場合、 `Exception` のプロパティ、 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>, 、<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>, 、または <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> オブジェクトを含む、 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> オブジェクトです。 例外がスローされない場合、 `Exception` プロパティを含む `null`します。  
  
 検証の例外を処理するためのハンドラーを作成、 <xref:System.Web.UI.WebControls.LinqDataSource.Updating>, 、<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, 、または <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> イベントです。 イベント ハンドラーでチェックするかどうか、 `Exception` 以外の場合、イベント引数クラスのプロパティに値が含まれています `null`します。 場合、 `Exception` プロパティが null でない、1 つまたは複数の検証例外がスローされなかったおよびでは、各検証例外を取得する、 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> プロパティです。  
  
 検証例外は、値がプロパティの型と一致しない場合に発生することができます。 たとえば、数字以外の文字を使用して、整数型のプロパティを更新しようとして検証例外が発生します。 LINQ to SQL クラスでは、プロパティに目的の範囲またはパターン内にある値が含まれているかどうかを確認するカスタマイズされた検証条件を含めることもできます。  
  
   
  
## 例  
 次の例では、イベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベントです。 使用して検証例外メッセージが表示されて、 <xref:System.Web.UI.WebControls.Label> コントロールです。  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
 \[C\#\]  
  
```  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 エラーを説明するシステム提供のメッセージでは、現在のシステム カルチャが考慮されます。  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> クラスのインスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|-----------|-------|  
|<xref:System.Exception.InnerException%2A>|`null`。|  
|<xref:System.Exception.Message%2A>|システム提供のローカライズされた説明。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">エラーを説明するメッセージ。</param>
        <summary>エラーを説明する指定したメッセージを使用して、<see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> クラスのインスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|-----------|-------|  
|<xref:System.Exception.InnerException%2A>|`null`。|  
|<xref:System.Exception.Message%2A>|`message` に指定されたエラー メッセージ文字列。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LinqDataSourceValidationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
        <param name="context">ソースまたは転送先に関するコンテキスト情報。</param>
        <summary>シリアル化したデータを使用して、<see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、ストリームで送信された例外オブジェクトを再構成する逆シリアル化中に呼び出されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException (string message, System.Collections.Generic.IDictionary&lt;string,Exception&gt; innerExceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Collections.Generic.IDictionary`2&lt;string, class System.Exception&gt; innerExceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Exception})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerExceptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Exception&gt;" />
      </Parameters>
      <Docs>
        <param name="message">エラーを説明するメッセージ。</param>
        <param name="innerExceptions">検証の例外のコレクションです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 、エラー メッセージと内部例外への参照のコレクションを示すメッセージが指定されたクラスです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSourceValidationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.#ctor(System.String,System.Exception)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">エラーを説明するメッセージ。</param>
        <param name="innerException">現在の例外の原因となった例外。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> 指定したエラー メッセージと内部例外への参照を使用してクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常は、使用しないこのコンス トラクターに検証例外が格納されるため、 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> プロパティには、いない、 <xref:System.Exception.InnerException%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">スローされる例外のシリアル化されたオブジェクト データを保持するオブジェクト。</param>
        <param name="context">ソースまたは転送先に関するコンテキスト情報。</param>
        <summary>例外に関する情報を取得し、追加して、 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.GetObjectData%2A> メソッドに例外に関する情報を追加、 <xref:System.Runtime.Serialization.SerializationInfo> シリアル化の対象となるオブジェクト。 逆シリアル化中に例外を再構成、 <xref:System.Runtime.Serialization.SerializationInfo> 、ストリームで送信されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerExceptions">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,Exception&gt; InnerExceptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class System.Exception&gt; InnerExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Exception&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>新しいまたは変更されたデータの検証時に発生した 1 つまたは複数の例外を取得します。</summary>
        <value>例外を含むコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> コレクションには、更新の前にデータの検証中にスローされたすべての検証例外が含まれています、挿入、または操作を削除します。 検証例外は、値がプロパティの型と一致しない場合に発生することができます。 たとえば、数字以外の文字を使用して、整数型のプロパティを更新しようとすると、検証例外がスローされます。 LINQ to SQL クラスでは、プロパティに目的の範囲またはパターン内にある値が含まれているかどうかを確認するカスタマイズされた検証条件を含めることもできます。  
  
   
  
## 例  
 次の例では、イベント ハンドラーを <xref:System.Web.UI.WebControls.LinqDataSource.Updating> イベントです。 使用して検証例外メッセージが表示されて、 <xref:System.Web.UI.WebControls.Label> コントロールです。  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
                In e.Exception.InnerExceptions  
          Label1.Text &= innerException.Key & ": " & _   
                  innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
 \[C\#\]  
  
```  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)   
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
            e.Exception.InnerExceptions)  
        {  
            Label1.Text += innerException.Key + ": " +   
                innerException.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.WebControls.LinqDataSourceValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>