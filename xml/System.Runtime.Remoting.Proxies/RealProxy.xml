<Type Name="RealProxy" FullName="System.Runtime.Remoting.Proxies.RealProxy">
  <TypeSignature Language="C#" Value="public abstract class RealProxy" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit RealProxy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Proxies.RealProxy" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>プロキシの基本機能を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Remoting.Proxies.RealProxy> クラスは、 `abstract` 基本クラスのプロキシが派生する必要があります。  
  
 あらゆる種類のリモート処理境界を越えてオブジェクトを使用するクライアントは、透過的なプロキシを使用して、オブジェクトは、実際にします。 透過的なプロキシは、クライアントの領域に、実際のオブジェクトが格納されているフィルターの種類を提供します。 これで、リモート処理インフラストラクチャを使用して実際のオブジェクトへの呼び出しを転送することによって、これを実現します。  
  
 透過的なプロキシ型のマネージ ランタイム クラスのインスタンスによって自体は <xref:System.Runtime.Remoting.Proxies.RealProxy>です。<xref:System.Runtime.Remoting.Proxies.RealProxy> 透過プロキシから、操作を転送するために必要な機能の一部を実装します。 プロキシ オブジェクトがガベージ コレクション、フィールドおよびメソッドのサポートなどの管理オブジェクトに関連付けられたセマンティクスを継承し、新しいクラスを形成する拡張できることに注意してください。 プロキシは、デュアルという性質を持って: リモート オブジェクト \(透過プロキシ\) と同じクラスのオブジェクトとして機能して、マネージ オブジェクト自体であります。  
  
 プロキシ オブジェクトには小文字に関係なく使用できます、 <xref:System.AppDomain>です。  
  
> [!NOTE]
>  このクラスは、リンク確認要求し、クラス レベルで継承確認要求を使用します。 A <xref:System.Security.SecurityException> 直前の呼び出し元または派生クラスのいずれかにインフラストラクチャ アクセス許可があるない場合にスローされます。 セキュリティ要求の詳細については、「 [&#91;\<topic:\/\/cpconLinkDemands\>&#93;](http://msdn.microsoft.com/ja-jp/a33fd5f9-2de9-4653-a4f0-d9df25082c4d) と [継承確認要求](http://msdn.microsoft.com/ja-jp/28b9adbb-8f08-4f10-b856-dbf59eb932d9)します。  
  
   
  
## 例  
 [!code-cpp[ChannelServices\_SyncDispatchMessage\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ChannelServices_SyncDispatchMessage/CPP/channelservices_syncdispatchmessage_client.cpp#1)]
 [!code-csharp[ChannelServices\_SyncDispatchMessage\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ChannelServices_SyncDispatchMessage/CS/channelservices_syncdispatchmessage_client.cs#1)]
 [!code-vb[ChannelServices\_SyncDispatchMessage\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ChannelServices_SyncDispatchMessage/VB/channelservices_syncdispatchmessage_client.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">For operating with infrastructure code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />; Permission Value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /></permission>
    <block subset="none" type="overrides">
      <para>When you inherit from <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" />, you must override the <see cref="M:System.Runtime.Remoting.Proxies.RealProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)" /> method.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RealProxy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[CustomProxy\_Attribute\_RealProxy\#12](~/samples/snippets/cpp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CPP/customproxy_sample.cpp#12)]
 [!code-csharp[CustomProxy\_Attribute\_RealProxy\#12](~/samples/snippets/csharp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CS/customproxy_sample.cs#12)]
 [!code-vb[CustomProxy\_Attribute\_RealProxy\#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/VB/customproxy_sample.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RealProxy (Type classToProxy);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type classToProxy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.#ctor(System.Type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="classToProxy" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="classToProxy">
          <see cref="T:System.Type" /> プロキシを作成する対象となるリモート オブジェクトのです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> クラスの指定したリモート オブジェクトを表す <see cref="T:System.Type" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のメソッドを作成、透過的なプロキシは、経由でアクセスできる、 <xref:System.Runtime.Remoting.Proxies.RealProxy.GetTransparentProxy%2A> メソッドです。  
  
 あらゆる種類のリモート処理境界を越えてオブジェクトを使用するクライアントは、透過的なプロキシを使用して、オブジェクトは、実際にします。 透過的なプロキシは、クライアントの領域に、実際のオブジェクトが格納されているという印象を説明します。 これで、リモート処理インフラストラクチャを使用して実際のオブジェクトへの呼び出しを転送することによって、これを実現します。  
  
 透過的なプロキシがマネージ ランタイム クラスのインスタンスが格納されている <xref:System.Runtime.Remoting.Proxies.RealProxy>します。<xref:System.Runtime.Remoting.Proxies.RealProxy> 透過プロキシから、操作を転送するために必要な機能の一部を実装します。 プロキシ オブジェクトがガベージ コレクションのフィールドおよびメソッドのサポートなどのマネージ オブジェクトに関連付けられたセマンティクスを継承し、新しいクラスを形成する拡張できることに注意してください。 プロキシは、デュアルという性質を持って: リモート オブジェクト \(透過プロキシ\) と同じクラスのオブジェクトとして機能し、マネージ オブジェクト自体は、です。  
  
   
  
## 例  
 [!code-cpp[CustomProxy\_Attribute\_RealProxy\#10](~/samples/snippets/cpp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CPP/customproxy_sample.cpp#10)]
 [!code-csharp[CustomProxy\_Attribute\_RealProxy\#10](~/samples/snippets/csharp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CS/customproxy_sample.cs#10)]
 [!code-vb[CustomProxy\_Attribute\_RealProxy\#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/VB/customproxy_sample.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="classToProxy" /> 、インターフェイスではないと、から派生していない <see cref="T:System.MarshalByRefObject" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RealProxy (Type classToProxy, IntPtr stub, object stubData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type classToProxy, native int stub, object stubData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.#ctor(System.Type,System.IntPtr,System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="classToProxy" Type="System.Type" />
        <Parameter Name="stub" Type="System.IntPtr" />
        <Parameter Name="stubData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="classToProxy">
          <see cref="T:System.Type" /> プロキシを作成する対象となるリモート オブジェクトのです。</param>
        <param name="stub">新しいプロキシ インスタンスに関連付けるスタブ。</param>
        <param name="stubData">指定したスタブと新しいプロキシ インスタンスに設定するスタブ データ。</param>
        <summary>
          <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スタブ データは、メソッドの着信通話の処理方法を決定するカスタム プロキシのユーザーが使用されます。 たとえば、スタブ データには、サーバーのコンテキストを使用してローカルでの呼び出しを実行するかどうかを判断や、リモート処理インフラストラクチャを介して送信できるに関する情報があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="classToProxy" /> 、インターフェイスではないと、から派生していない <see cref="T:System.MarshalByRefObject" />します。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">For calling unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AttachServer">
      <MemberSignature Language="C#" Value="protected void AttachServer (MarshalByRefObject s);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AttachServer(class System.MarshalByRefObject s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.AttachServer(System.MarshalByRefObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.MarshalByRefObject" />
      </Parameters>
      <Docs>
        <param name="s">
          <see cref="T:System.MarshalByRefObject" /> を現在のプロキシ インスタンスを表します。</param>
        <summary>指定したリモートに現在のプロキシ インスタンスをアタッチ <see cref="T:System.MarshalByRefObject" />します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">直前の呼び出し元には、UnmanagedCode アクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">For the ability to call unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateObjRef">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjRef CreateObjRef (Type requestedType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjRef CreateObjRef(class System.Type requestedType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.CreateObjRef(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjRef</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestedType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="requestedType">オブジェクトの種類を <see cref="T:System.Runtime.Remoting.ObjRef" /> 用に作成します。</param>
        <summary>作成、 <see cref="T:System.Runtime.Remoting.ObjRef" /> 指定したオブジェクトの種類され、クライアント側でアクティブ オブジェクトとして、リモート処理インフラストラクチャに登録します。</summary>
        <returns>新しいインスタンス <see cref="T:System.Runtime.Remoting.ObjRef" /> 、指定した型用に作成されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[CustomProxy\_Attribute\_RealProxy\#6](~/samples/snippets/cpp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CPP/customproxy_sample.cpp#6)]
 [!code-csharp[CustomProxy\_Attribute\_RealProxy\#6](~/samples/snippets/csharp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CS/customproxy_sample.cs#6)]
 [!code-vb[CustomProxy\_Attribute\_RealProxy\#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/VB/customproxy_sample.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Remoting.RemotingConfiguration" />
      </Docs>
    </Member>
    <Member MemberName="DetachServer">
      <MemberSignature Language="C#" Value="protected MarshalByRefObject DetachServer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.MarshalByRefObject DetachServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.DetachServer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.MarshalByRefObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>それが表すリモート サーバー オブジェクトから現在のプロキシ インスタンスをデタッチします。</summary>
        <returns>分離されたサーバー オブジェクトです。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">直前の呼び出し元には、UnmanagedCode アクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">For the ability to call unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetCOMIUnknown">
      <MemberSignature Language="C#" Value="public virtual IntPtr GetCOMIUnknown (bool fIsMarshalled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetCOMIUnknown(bool fIsMarshalled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.GetCOMIUnknown(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fIsMarshalled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fIsMarshalled">リモートの場所へのマーシャリングに対してオブジェクト参照が要求された場合は、<see langword="true" /> です。現在のプロセスにおけるアンマネージ オブジェクトとの、COM 経由の通信に対してオブジェクト参照が要求された場合は、<see langword="false" /> です。</param>
        <summary>現在のプロキシ インスタンスが表すオブジェクトへのアンマネージ参照を要求します。</summary>
        <returns>現在のプロセスにおけるアンマネージ オブジェクトとの、COM 経由の通信に対してオブジェクト参照が要求された場合は、[COM Callable Wrapper](http://msdn.microsoft.com/ja-jp/d04be3b5-27b9-4f5b-8469-a44149fabf78) へのポインターです。リモートの場所へのマーシャリングに対してオブジェクト参照が要求された場合は、キャッシュされたまたは新しく生成された <see langword="IUnknown" /> COM インターフェイスへのポインターです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the proxy is requested for marshaling, then an **languageKeyword tag is not supported!!!!**  
 interface for the object represented by the current proxy instance is returned. If an **languageKeyword tag is not supported!!!!**  
 was previously cached by the <xref:System.Runtime.Remoting.Proxies.RealProxy.SetCOMIUnknown%2A> method, then that instance is returned; otherwise, a new instance is returned.  
  
 If the proxy is requested not for marshaling but for communication with unmanaged objects in the current process, then a [COM Callable Wrapper](http://msdn.microsoft.com/ja-jp/d04be3b5-27b9-4f5b-8469-a44149fabf78) \(CCW\), which can be used in the current process for communication through COM, is returned.  
  
   
  
## 例  
 [!code-cpp[RealProxy\_Sample\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RealProxy_Sample/CPP/realproxy_sample.cpp#2)]
 [!code-csharp[RealProxy\_Sample\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RealProxy_Sample/CS/realproxy_sample.cs#2)]
 [!code-vb[RealProxy\_Sample\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RealProxy_Sample/VB/realproxy_sample.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に透過的なプロキシがシリアル化します。</param>
        <param name="context">ソースとシリアル化先。</param>
        <summary>現在のインスタンスによって表されるオブジェクトの透過的なプロキシ追加 <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> を指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[CustomProxy\_Attribute\_RealProxy\#7](~/samples/snippets/cpp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CPP/customproxy_sample.cpp#7)]
 [!code-csharp[CustomProxy\_Attribute\_RealProxy\#7](~/samples/snippets/csharp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CS/customproxy_sample.cs#7)]
 [!code-vb[CustomProxy\_Attribute\_RealProxy\#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/VB/customproxy_sample.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> パラメーターまたは <paramref name="context" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">直前の呼び出し元にするアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">For providing serialization services. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetProxiedType">
      <MemberSignature Language="C#" Value="public Type GetProxiedType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetProxiedType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.GetProxiedType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します。、 <see cref="T:System.Type" /> オブジェクトのを、現在のインスタンスの <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> を表します。</summary>
        <returns>
          <see cref="T:System.Type" /> オブジェクトを現在のインスタンスの <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[CustomProxy\_Attribute\_RealProxy\#10](~/samples/snippets/cpp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CPP/customproxy_sample.cpp#10)]
 [!code-csharp[CustomProxy\_Attribute\_RealProxy\#10](~/samples/snippets/csharp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CS/customproxy_sample.cs#10)]
 [!code-vb[CustomProxy\_Attribute\_RealProxy\#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/VB/customproxy_sample.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStubData">
      <MemberSignature Language="C#" Value="public static object GetStubData (System.Runtime.Remoting.Proxies.RealProxy rp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetStubData(class System.Runtime.Remoting.Proxies.RealProxy rp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.GetStubData(System.Runtime.Remoting.Proxies.RealProxy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rp" Type="System.Runtime.Remoting.Proxies.RealProxy" />
      </Parameters>
      <Docs>
        <param name="rp">データを要求するスタブのプロキシです。</param>
        <summary>指定したプロキシに格納されているスタブ データを取得します。</summary>
        <returns>データは、指定したプロキシのスタブに対応します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スタブ データは、メソッドの着信通話の処理方法を決定するカスタム プロキシのユーザーが使用されます。 たとえば、スタブ データには、サーバーのコンテキストを使用してローカルでの呼び出しを実行するかどうかを判断や、リモート処理インフラストラクチャを介して送信できるに関する情報があります。  
  
   
  
## 例  
 [!code-cpp[CustomProxy\_Attribute\_RealProxy\#9](~/samples/snippets/cpp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CPP/customproxy_sample.cpp#9)]
 [!code-csharp[CustomProxy\_Attribute\_RealProxy\#9](~/samples/snippets/csharp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CS/customproxy_sample.cs#9)]
 [!code-vb[CustomProxy\_Attribute\_RealProxy\#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/VB/customproxy_sample.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">直前の呼び出し元には、UnmanagedCode アクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">For the ability to call unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetTransparentProxy">
      <MemberSignature Language="C#" Value="public virtual object GetTransparentProxy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetTransparentProxy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.GetTransparentProxy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>透過的なプロキシの現在のインスタンスを返します <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" />します。</summary>
        <returns>現在のプロキシ インスタンスの透過的なプロキシです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[CustomProxy\_Attribute\_RealProxy\#8](~/samples/snippets/cpp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CPP/customproxy_sample.cpp#8)]
 [!code-csharp[CustomProxy\_Attribute\_RealProxy\#8](~/samples/snippets/csharp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CS/customproxy_sample.cs#8)]
 [!code-vb[CustomProxy\_Attribute\_RealProxy\#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/VB/customproxy_sample.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnwrappedServer">
      <MemberSignature Language="C#" Value="protected MarshalByRefObject GetUnwrappedServer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.MarshalByRefObject GetUnwrappedServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.GetUnwrappedServer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.MarshalByRefObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のプロキシ インスタンスで表されるサーバー オブジェクトを返します。</summary>
        <returns>現在のプロキシ インスタンスで表される server オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Remoting.Proxies.RealProxy.GetUnwrappedServer%2A> メソッドは、外部に関連するシナリオで使用 <xref:System.Runtime.Remoting.Contexts.Context> 同じ <xref:System.AppDomain>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">直前の呼び出し元には、UnmanagedCode アクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">For the ability to call unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="InitializeServerObject">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Activation.IConstructionReturnMessage InitializeServerObject (System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.Activation.IConstructionReturnMessage InitializeServerObject(class System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.InitializeServerObject(System.Runtime.Remoting.Activation.IConstructionCallMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Activation.IConstructionReturnMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctorMsg" Type="System.Runtime.Remoting.Activation.IConstructionCallMessage" />
      </Parameters>
      <Docs>
        <param name="ctorMsg">現在で表されるリモート オブジェクトの新しいインスタンスのコンス トラクターのパラメーターを含む構築通話メッセージ <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" />します。<see langword="null" /> の可能性があります。</param>
        <summary>オブジェクトの新しいインスタンスを初期化 <see cref="T:System.Type" /> リモート オブジェクトの現在のインスタンス <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> を表し、指定した <see cref="T:System.Runtime.Remoting.Activation.IConstructionCallMessage" />します。</summary>
        <returns>構築要求の結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `ctorMsg` パラメーターは `null`, 、 <xref:System.Runtime.Remoting.Proxies.RealProxy.InitializeServerObject%2A> メソッドは、現在で表されるリモート オブジェクトの新しいインスタンスを既定のコンス トラクターを呼び出します <xref:System.Runtime.Remoting.Proxies.RealProxy>します。  
  
   
  
## 例  
 [!code-cpp[CustomProxy\_Attribute\_RealProxy\#5](~/samples/snippets/cpp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CPP/customproxy_sample.cpp#5)]
 [!code-csharp[CustomProxy\_Attribute\_RealProxy\#5](~/samples/snippets/csharp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CS/customproxy_sample.cs#5)]
 [!code-vb[CustomProxy\_Attribute\_RealProxy\#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/VB/customproxy_sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">直前の呼び出し元には、UnmanagedCode アクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">For the ability to call unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public abstract System.Runtime.Remoting.Messaging.IMessage Invoke (System.Runtime.Remoting.Messaging.IMessage msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessage Invoke(class System.Runtime.Remoting.Messaging.IMessage msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
      </Parameters>
      <Docs>
        <param name="msg">A <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> を含む、 <see cref="T:System.Collections.IDictionary" /> メソッドの呼び出しに関する情報。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定されているメソッドを呼び出しで提供されている <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 現在のインスタンスによって表されるリモート オブジェクトにします。</summary>
        <returns>戻り値とを含む、呼び出されたメソッドで返されるメッセージ <see langword="out" /> または <see langword="ref" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、透過的なプロキシがサポートしている、 <xref:System.Runtime.Remoting.Proxies.RealProxy> はへの呼び出しを代行させるために呼び出されると、 <xref:System.Runtime.Remoting.Proxies.RealProxy.Invoke%2A> メソッドです。<xref:System.Runtime.Remoting.Proxies.RealProxy.Invoke%2A> メソッド内のメッセージを変換する、 `msg` パラメーターに、 <xref:System.Runtime.Remoting.Messaging.IMethodCallMessage>, 、し、リモート オブジェクトの現在のインスタンスで表される送信 <xref:System.Runtime.Remoting.Proxies.RealProxy>します。  
  
 <xref:System.Runtime.Remoting.Messaging.IMessage> パラメーターを通じてディクショナリを提供する、 <xref:System.Runtime.Remoting.Messaging.IMessage.Properties%2A?displayProperty=fullName> プロパティです。 ディクショナリには、呼び出されたメソッドの名前とそのパラメーターなどのメソッドの呼び出しに関する情報の名前\/値ペアが含まれています。  
  
   
  
## 例  
 [!code-cpp[CustomProxy\_Attribute\_RealProxy\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CPP/customproxy_sample.cpp#4)]
 [!code-csharp[CustomProxy\_Attribute\_RealProxy\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CS/customproxy_sample.cs#4)]
 [!code-vb[CustomProxy\_Attribute\_RealProxy\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/VB/customproxy_sample.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCOMIUnknown">
      <MemberSignature Language="C#" Value="public virtual void SetCOMIUnknown (IntPtr i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCOMIUnknown(native int i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.SetCOMIUnknown(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="i">ポインター、 <see langword="IUnknown" /> プロキシの現在のインスタンスによって表されるオブジェクトのインターフェイスです。</param>
        <summary>現在のインスタンスによって表されるオブジェクトのアンマネージ プロキシが格納されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アンマネージ プロキシは、COM を通じて共通言語ランタイムとの通信を試みると、ランタイムはアンマネージ プロキシで表されるリモート オブジェクトを解決します。 リモート オブジェクトは、管理、共通言語環境でも存在する場合と分散 COM 経由の通信ではなくで、現在のプロセスに、オブジェクトが送信されます。  
  
 リモート オブジェクトがから派生していない場合 <xref:System.MarshalByRefObject>, 、それをシリアル化はあり、現在の場所にコピーします。 派生されている場合 <xref:System.MarshalByRefObject>, 透過プロキシが返されます、およびリモート処理インフラストラクチャ、管理されていないプロキシのキャッシュ \(、 `IUnknown` インターフェイス\) で将来使用するための透過的なプロキシです。  
  
   
  
## 例  
 [!code-cpp[RealProxy\_Sample\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/RealProxy_Sample/CPP/realproxy_sample.cpp#3)]
 [!code-csharp[RealProxy\_Sample\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/RealProxy_Sample/CS/realproxy_sample.cs#3)]
 [!code-vb[RealProxy\_Sample\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RealProxy_Sample/VB/realproxy_sample.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStubData">
      <MemberSignature Language="C#" Value="public static void SetStubData (System.Runtime.Remoting.Proxies.RealProxy rp, object stubData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetStubData(class System.Runtime.Remoting.Proxies.RealProxy rp, object stubData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.SetStubData(System.Runtime.Remoting.Proxies.RealProxy,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rp" Type="System.Runtime.Remoting.Proxies.RealProxy" />
        <Parameter Name="stubData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="rp">スタブ データを設定するためのプロキシ。</param>
        <param name="stubData">新しいスタブ データ。</param>
        <summary>指定したプロキシのスタブ データを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スタブ データは、メソッドの着信通話の処理方法を決定するカスタム プロキシのユーザーが使用されます。 たとえば、スタブ データには、サーバーのコンテキストを使用してローカルでの呼び出しを実行するかどうかを判断や、リモート処理インフラストラクチャを介して送信できるに関する情報があります。  
  
   
  
## 例  
 [!code-cpp[CustomProxy\_Attribute\_RealProxy\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CPP/customproxy_sample.cpp#3)]
 [!code-csharp[CustomProxy\_Attribute\_RealProxy\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/CS/customproxy_sample.cs#3)]
 [!code-vb[CustomProxy\_Attribute\_RealProxy\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy/VB/customproxy_sample.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">直前の呼び出し元には、UnmanagedCode アクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">For the ability to call unmanaged code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SupportsInterface">
      <MemberSignature Language="C#" Value="public virtual IntPtr SupportsInterface (ref Guid iid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int SupportsInterface(valuetype System.Guid iid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Proxies.RealProxy.SupportsInterface(System.Guid@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iid" Type="System.Guid&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="iid">要求されたインターフェイスへの参照。</param>
        <summary>指定した ID を持つ COM インターフェイスを要求します。</summary>
        <returns>要求されたインターフェイスへのポインター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Remoting.Proxies.RealProxy.SupportsInterface%2A> メソッドを使用して現在プロキシ インスタンスを現在のインスタンスが表すサーバー オブジェクトのための他の COM インターフェイスを実装します。 現在のメソッドは、要求されたインターフェイスを生成し、ポインターを返します。 このメソッドによって生成される COM インターフェイスの種類は、さらに現在のプロキシのインスタンスが表すサーバー オブジェクトの種類に依存するプロキシの種類によって異なります。  
  
 詳細については、「<xref:System.Runtime.Remoting.Proxies.ProxyAttribute>」を参照してください。  
  
   
  
## 例  
 [!code-cpp[RealProxy\_Sample\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RealProxy_Sample/CPP/realproxy_sample.cpp#1)]
 [!code-csharp[RealProxy\_Sample\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RealProxy_Sample/CS/realproxy_sample.cs#1)]
 [!code-vb[RealProxy\_Sample\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RealProxy_Sample/VB/realproxy_sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>