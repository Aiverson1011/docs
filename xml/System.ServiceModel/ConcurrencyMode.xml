<Type Name="ConcurrencyMode" FullName="System.ServiceModel.ConcurrencyMode">
  <TypeSignature Language="C#" Value="public enum ConcurrencyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConcurrencyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ConcurrencyMode" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>サービス クラスがシングルスレッド モードまたはマルチスレッド モードの操作をサポートするかどうかを指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single\-threaded or multi\-threaded modes of operation. A single\-threaded operation can be either reentrant or non\-reentrant.  
  
 The following table shows when [!INCLUDE[indigo1](~/includes/indigo1-md.md)] permits an operation to be invoked while another one is in progress, depending upon the <xref:System.ServiceModel.ConcurrencyMode>.  
  
|ConcurrencyMode Value|Can a new operation be invoked?|  
|---------------------------|-------------------------------------|  
|<xref:System.ServiceModel.ConcurrencyMode.Single>|Never.|  
|<xref:System.ServiceModel.ConcurrencyMode.Reentrant>|Only while invoking another service or a callback.|  
|<xref:System.ServiceModel.ConcurrencyMode.Multiple>|Always.|  
  
   
  
## 例  
 The following code example demonstrates the different between using <xref:System.ServiceModel.ConcurrencyMode.Single>, <xref:System.ServiceModel.ConcurrencyMode.Reentrant>, and <xref:System.ServiceModel.ConcurrencyMode.Multiple>. This sample does not compile without a real implementation behind it, but does demonstrate the kind of threading guarantees that [!INCLUDE[indigo2](~/includes/indigo2-md.md)] makes and what that means for your operation code.  
  
 [!code-csharp[C\_BestPractices\-Concurrency\#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_bestpractices-concurrency/cs/reentrantandmultiple.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Multiple">
      <MemberSignature Language="C#" Value="Multiple" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Multiple = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービス インスタンスはマルチスレッドです。 同期保証は行われません。 サービス オブジェクトは他のスレッドによっていつでも変更される可能性があるため、開発者が同期と状態の整合性を常に処理する必要があります。</summary>
      </Docs>
    </Member>
    <Member MemberName="Reentrant">
      <MemberSignature Language="C#" Value="Reentrant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Reentrant = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービス インスタンスはシングル スレッドであり、再入呼び出しを受け入れます。 再入可能サービスは別のサービスを呼び出したときの呼び出しを受け入れます。したがって、開発者は、オブジェクトの状態をコール アウト前の状態と必ず一致させ、操作のローカル データがコール アウト後も有効であることを確認する必要があります。 サービス インスタンスは、WCF チャネルを介して別のサービスを呼び出すことによってのみロックを解除されます。 この場合、呼び出されたサービスはコールバック経由で最初のサービスに再入できます。 最初のサービスが再入可能でない場合、以降の呼び出しはデッドロック状態になります。 詳細については、「<see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />」を参照してください。</summary>
      </Docs>
    </Member>
    <Member MemberName="Single">
      <MemberSignature Language="C#" Value="Single" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Single = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Single" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サービス インスタンスはシングルスレッドであり、再入呼び出しを受け入れません。<see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> プロパティが <see cref="F:System.ServiceModel.InstanceContextMode.Single" /> のときに、インスタンスが呼び出しを処理している間に別のメッセージが到着した場合は、到着したメッセージは、サービスが使用可能になるか、メッセージがタイムアウトするまで待機する必要があります。</summary>
      </Docs>
    </Member>
  </Members>
</Type>