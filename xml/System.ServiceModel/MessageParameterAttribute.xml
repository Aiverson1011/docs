<Type Name="MessageParameterAttribute" FullName="System.ServiceModel.MessageParameterAttribute">
  <TypeSignature Language="C#" Value="public sealed class MessageParameterAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MessageParameterAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.MessageParameterAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>要求の名前と応答パラメーターの名前を制御します。<see cref="T:System.ServiceModel.Channels.Message" /> またはメッセージ コントラクトと共に使用することはできません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ServiceModel.MessageParameterAttribute> を使用して、パラメーターの名前または戻り値を制御します。 この属性は、パラメーターが <xref:System.ServiceModel.MessageContractAttribute> 属性でマークされている場合は効果がありません。  
  
> [!NOTE]
>  操作シグネチャのパラメーター名の値はコントラクトに含まれ、大文字と小文字が区別されます。 ローカル パラメーター名と、クライアント アプリケーションの操作を記述するメタデータを区別する必要がある場合は、この属性を使用します。  
  
 既定の SOAP エンベロープ自体を変更せずに、SOAP 本体のコンテンツのシリアル化を制御すること[!INCLUDE[crabout](~/includes/crabout-md.md)]、「<xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=fullName>」、「[Specifying Data Transfer in Service Contracts](http://msdn.microsoft.com/ja-jp/7c5a26c8-89c9-4bcb-a4bc-7131e6d01f0c)」、および「[Data Contracts Overview](http://msdn.microsoft.com/ja-jp/a3ae7b21-c15c-4c05-abd8-f483bcbf31af)」を参照してください。  
  
 メッセージ コントラクトを作成すること[!INCLUDE[crabout](~/includes/crabout-md.md)]、「[Using Message Contracts](http://msdn.microsoft.com/ja-jp/1e19c64a-ae84-4c2f-9155-91c54a77c249)」を参照してください。  
  
   
  
## 例  
 次のコード例では、<xref:System.ServiceModel.MessageParameterAttribute> を使用して、メタデータ内のパラメーターの名前と戻り値を設定しています。  
  
 [!code-csharp[MessageParameterAttribute\#1](~/samples/snippets/csharp/VS_Snippets_CFX/messageparameterattribute/cs/services.cs#1)]
 [!code-vb[MessageParameterAttribute\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageparameterattribute/vb/services.vb#1)]  
  
 次の例は、先のサービスのために生成されたサービス コントラクトを示しています。 パラメーターの名前が `Input` になったことに注意してください。  
  
 [!code-csharp[MessageParameterAttribute\#2](~/samples/snippets/csharp/VS_Snippets_CFX/messageparameterattribute/cs/proxycode.cs#2)]
 [!code-vb[MessageParameterAttribute\#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageparameterattribute/vb/proxycode.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageParameterAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.MessageParameterAttribute.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ServiceModel.MessageParameterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例では、<xref:System.ServiceModel.MessageParameterAttribute> を使用して、メタデータ内のパラメーターの名前と戻り値を設定しています。  
  
 [!code-csharp[MessageParameterAttribute\#1](~/samples/snippets/csharp/VS_Snippets_CFX/messageparameterattribute/cs/services.cs#1)]
 [!code-vb[MessageParameterAttribute\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageparameterattribute/vb/services.vb#1)]  
  
 次の例は、先のサービスのために生成されたサービス コントラクトを示しています。 パラメーターの名前が `Input` になったことに注意してください。  
  
 [!code-csharp[MessageParameterAttribute\#2](~/samples/snippets/csharp/VS_Snippets_CFX/messageparameterattribute/cs/proxycode.cs#2)]
 [!code-vb[MessageParameterAttribute\#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageparameterattribute/vb/proxycode.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageParameterAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML スキーマ \(XSD\) 内のパラメーターの名前属性を取得または設定します。</summary>
        <value>XSD 内のパラメーターの名前属性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例では、<xref:System.ServiceModel.MessageParameterAttribute> を使用して、メタデータ内のパラメーターの名前と戻り値を設定しています。  
  
 [!code-csharp[MessageParameterAttribute\#1](~/samples/snippets/csharp/VS_Snippets_CFX/messageparameterattribute/cs/services.cs#1)]
 [!code-vb[MessageParameterAttribute\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageparameterattribute/vb/services.vb#1)]  
  
 次の例は、先のサービスのために生成されたサービス コントラクトを示しています。 パラメーターの名前が `Input` になったことに注意してください。  
  
 [!code-csharp[MessageParameterAttribute\#2](~/samples/snippets/csharp/VS_Snippets_CFX/messageparameterattribute/cs/proxycode.cs#2)]
 [!code-vb[MessageParameterAttribute\#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageparameterattribute/vb/proxycode.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>