<Type Name="Membership" FullName="System.Web.Security.Membership">
  <TypeSignature Language="C#" Value="public static class Membership" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Membership extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Membership" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ユーザーの資格情報を検証し、ユーザー設定を管理します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership> クラスは、ASP.NET アプリケーションでユーザーの資格情報を検証し、パスワードなどのユーザー設定の管理し、電子メール アドレスを使用します。<xref:System.Web.Security.Membership> と共にまたは単独では、クラスを使用することができます、 <xref:System.Web.Security.FormsAuthentication> Web アプリケーションまたはサイトのユーザーを認証するための完全なシステムを作成します。<xref:System.Web.UI.WebControls.Login> コントロールをカプセル化、 <xref:System.Web.Security.Membership> ユーザーを検証するための便利な機構を提供するクラス。  
  
> [!NOTE]
>  ASP.NET のメンバーシップ機能に慣れていない場合は、次を参照してください。 [Introduction to Membership](http://msdn.microsoft.com/ja-jp/79184d17-f4c7-4c9f-a073-cec4f5543980) 続行する前にします。 メンバーシップに関連するその他のトピックの一覧は、次を参照してください。 [Managing Users By Using Membership](http://msdn.microsoft.com/ja-jp/824c3a24-f0af-427c-a652-0d2d1e9397cd)します。  
  
 <xref:System.Web.Security.Membership> クラスにするための機能が用意されています。  
  
-   新しいユーザーを作成します。  
  
-   Microsoft SQL Server や代替データ ストアには、メンバーシップ情報 \(ユーザー名、パスワード、電子メール アドレス、およびサポートしているデータ\) を保存します。  
  
-   サイトを訪問するユーザーを認証します。 プログラムを使用して、ユーザーを認証するか、使用して、 <xref:System.Web.UI.WebControls.Login> ほとんどまたはまったくないコードを必要とする完全な認証システムを作成するコントロール。  
  
-   パスワードを管理するには、これを作成、変更、取得、および、それらをリセットするをインクルードし、具合です。 パスワードの質問とそのパスワードを忘れてしまったユーザーのパスワードのリセットまたは取得要求の認証に応答を要求するように ASP.NET メンバーシップを構成することができます。  
  
 ASP.NET メンバーシップには、ASP.NET で認証の独立した機能が、サイトの承認サービスを提供する ASP.NET のロール管理と統合できます。 メンバーシップは、ASP.NET のユーザーと統合することもできます。 <xref:System.Web.Profile> を個々 のユーザーにカスタマイズが可能なアプリケーション固有のカスタマイズを提供します。 詳細については、「[Understanding ASP.NET Role Management](http://msdn.microsoft.com/ja-jp/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6)」および「[Understanding ASP.NET Profile Properties](http://msdn.microsoft.com/ja-jp/89439440-92ea-48c3-a4bd-dea40307899d)」を参照してください。  
  
 <xref:System.Web.Security.Membership> クラスは、データ ソースとの通信にメンバーシップ プロバイダーに依存します。 .NET Framework は、 <xref:System.Web.Security.SqlMembershipProvider>, 、Microsoft SQL Server データベースのユーザー情報を格納して <xref:System.Web.Security.ActiveDirectoryMembershipProvider>, 、Active Directory または Active Directory Application Mode \(ADAM\) サーバー上のユーザー情報を格納できます。 使用できる代替データ ソースとの通信にカスタム メンバーシップ プロバイダーを実装することも、 <xref:System.Web.Security.Membership> クラスです。 カスタム メンバーシップ プロバイダーが継承、 <xref:System.Web.Security.MembershipProvider> 抽象クラスです。 詳細については、「[Implementing a Membership Provider](http://msdn.microsoft.com/ja-jp/d8658b8e-c962-4f64-95e1-4acce35e4582)」を参照してください。  
  
 既定では、ASP.NET メンバーシップはすべての ASP.NET アプリケーションに対して有効です。 既定のメンバーシップ プロバイダーは、 <xref:System.Web.Security.SqlMembershipProvider> し、名前のコンピューター構成で指定された `AspNetSqlProvider`します。 既定のインスタンス、 <xref:System.Web.Security.SqlMembershipProvider> Microsoft SQL Server のローカル インスタンスに接続するように構成します。  
  
 指定する既定の設定を変更することができます、 <xref:System.Web.Security.SqlMembershipProvider> 以外の場合、 `AspNetSqlProvider` 既定のプロバイダーとしてインスタンス化するか、または Web.config ファイルを使用して ASP.NET アプリケーションの既定のプロバイダーとしてカスタム プロバイダーのインスタンスを指定します。 Web.config ファイルで構成セクションを使用して Web アプリケーションの ASP.NET メンバーシップの構成を指定できます。 使用することができます、 `providers` 以外は既定のプロバイダーのいずれかのメンバーシップ プロバイダーを指定するセクションのサブセクションします。 などの次のセクションでは、現在のアプリケーション構成から既定のメンバーシップ プロバイダーを削除しの名前を持つ新しいプロバイダーを追加 `SqlProvider` という名前の SQL Server インスタンスに接続する `AspSqlServer`です。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=AspSqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <remove name="AspNetSqlProvider" />  
        <add name="SqlProvider"  
          type="System.Web.Security.SqlMembershipProvider"  
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="true"  
          requiresQuestionAndAnswer="true"  
          passwordFormat="Hashed"  
          applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
   
  
## 例  
 次のコード例では、フォーム認証と ASP.NET メンバーシップを使用するように構成する ASP.NET アプリケーションのログイン ページを示します。 指定されたユーザーの資格情報が有効でない場合は、ユーザーにメッセージが表示されます。 それ以外の場合、ユーザーが最初に要求された URL にリダイレクトされますを使用して、 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドです。  
  
> [!NOTE]
>  ASP.NET ログイン コントロール \(<xref:System.Web.UI.WebControls.Login>, 、<xref:System.Web.UI.WebControls.LoginView>, 、<xref:System.Web.UI.WebControls.LoginStatus>, 、<xref:System.Web.UI.WebControls.LoginName>, 、および <xref:System.Web.UI.WebControls.PasswordRecovery>\) ほぼすべてのユーザーに資格情報を確認し、メンバーシップ システム内の資格情報の認証に必要なロジックをカプセル化し、プログラムによるチェックを使用しての代わりに使用できる、 <xref:System.Web.Security.Membership> クラスです。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションの名前を取得または設定します。</summary>
        <value>アプリケーションの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.ApplicationName%2A> アプリケーションに固有のユーザーを識別するために使用します。 同じユーザー名が異なるを指定する複数の ASP.NET アプリケーション用のデータベースに存在できます <xref:System.Web.Security.Membership.ApplicationName%2A>します。 これにより、複数のアプリケーションで重複するユーザー名の競合を発生させずにユーザー情報を格納する、同じデータベースを使用できます。 同じを指定して、複数の ASP.NET アプリケーションが同一のユーザー データベースを使用する代わりに、 <xref:System.Web.Security.Membership.ApplicationName%2A>です。<xref:System.Web.Security.Membership.ApplicationName%2A> Web アプリケーションの構成でプログラムを使用しても宣言的に設定できます。  
  
> [!CAUTION]
>  すべてで処理された要求の 1 つの既定のメンバーシップ プロバイダーのインスタンスが使用されるため、 <xref:System.Web.HttpApplication> オブジェクト、複数の要求が同時に実行し、設定しようとした、 <xref:System.Web.Security.Membership.ApplicationName%2A> プロパティの値。<xref:System.Web.Security.Membership.ApplicationName%2A> プロパティは複数の書き込みに対して安全、かつ変化のスレッドではありません、 <xref:System.Web.Security.Membership.ApplicationName%2A> プロパティの値は、アプリケーションの複数のユーザーに対して予期しない動作をされることができます。 設定できるコードを記述しないことをお勧め、 <xref:System.Web.Security.Membership.ApplicationName%2A> プロパティには、必要な場合です。 アプリケーションの例の設定場所、 <xref:System.Web.Security.Membership.ApplicationName%2A> プロパティが必要な可能性がありますが複数のアプリケーションにメンバーシップ データを管理する管理アプリケーションです。 このようなアプリケーションは、シングル ユーザー アプリケーションと Web アプリケーションではなくにする必要があります。  
  
   
  
## 例  
 次のコード例にある要素を示しています、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションが使用するように指定して、 <xref:System.Web.Security.SqlMembershipProvider> インスタンスとセット、 <xref:System.Web.Security.Membership.ApplicationName%2A> に `MyApplication`します。  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">新しいユーザーのユーザー名。</param>
        <param name="password">新しいユーザーのパスワード。</param>
        <summary>データ ストアに新しいユーザーを追加します。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> 新しく作成したユーザーのオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.CreateUser%2A> データ ストアに新しいユーザーを追加し、返します、 <xref:System.Web.Security.MembershipUser> 新しく作成したユーザーのオブジェクト。 ユーザーの作成に失敗した場合、 <xref:System.Web.Security.MembershipCreateUserException> がスローされます。 取得することができます、 <xref:System.Web.Security.MembershipCreateStatus> 値から、 <xref:System.Web.Security.MembershipCreateUserException.StatusCode%2A> のプロパティ、 <xref:System.Web.Security.MembershipCreateUserException> ユーザーの作成が失敗した理由を示します。  
  
 メンバーシップ ユーザーが作成されましたにへの参照をした後、 <xref:System.Web.Security.MembershipUser> オブジェクト、そのユーザーにそのユーザーの設定を変更することができますを <xref:System.Web.Security.MembershipUser> パブリック メソッドなど <xref:System.Web.Security.MembershipUser.ChangePasswordQuestionAndAnswer%2A> アプリケーションの場所 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> は `true`, のプロパティ値を設定したり、 <xref:System.Web.Security.MembershipUser> オブジェクトとを渡し、 <xref:System.Web.Security.Membership.UpdateUser%2A> メソッドです。  
  
 アプリケーションのデータ ソースにユーザーが既に存在する場合は取得できます、 <xref:System.Web.Security.MembershipUser> オブジェクトを持つ既存のユーザーに対して、 <xref:System.Web.Security.Membership.GetUser%2A> メソッドです。  
  
 <xref:System.Web.Security.SqlMembershipProvider> ユーザーごとに一意の電子メール アドレスを必要とするオプションを指定します。 場合、 <xref:System.Web.Security.SqlMembershipProvider.RequiresUniqueEmail%2A> プロパティは、 `true`, のいずれかを使用する必要があります、 <xref:System.Web.Security.Membership.CreateUser%2A> オーバー ロードを作成中のユーザーの電子メール アドレスを指定することができます。 それ以外の場合、 <xref:System.Web.Security.MembershipCreateUserException> がスローされます。  
  
 すべてのパラメーター値は、先頭と末尾のスペースが切り捨てられます。  
  
   
  
## 例  
 次のコード例では、フォーム認証と ASP.NET メンバーシップを使用するように構成、ASP.NET アプリケーションの新しいユーザーを作成します。 ユーザーが正常に作成されていない場合は、ユーザーにメッセージが表示されます。 それ以外の場合、ユーザーは、アプリケーションのログイン ページにリダイレクトされます。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.Membership\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/createuser2cs.aspx#2)]
 [!code-vb[System.Web.Security.Membership\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/createuser2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Security.MembershipCreateUserException">ユーザーは作成されませんでした。 チェック、 <see cref="P:System.Web.Security.MembershipCreateUserException.StatusCode" /> プロパティを <see cref="T:System.Web.Security.MembershipCreateStatus" /> 値。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">新しいユーザーのユーザー名。</param>
        <param name="password">新しいユーザーのパスワード。</param>
        <param name="email">新しいユーザーの電子メール アドレス。</param>
        <summary>データ ストアを指定した電子メール アドレスを持つ新しいユーザーを追加します。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> 新しく作成したユーザーのオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.CreateUser%2A> データ ストアに新しいユーザーを追加し、返します、 <xref:System.Web.Security.MembershipUser> 新しく作成したユーザーのオブジェクト。 ユーザーの作成に失敗した場合、 <xref:System.Web.Security.MembershipCreateUserException> がスローされます。 取得することができます、 <xref:System.Web.Security.MembershipCreateStatus> 値から、 <xref:System.Web.Security.MembershipCreateUserException.StatusCode%2A> のプロパティ、 <xref:System.Web.Security.MembershipCreateUserException> ユーザーの作成が失敗した理由を示します。  
  
 メンバーシップ ユーザーが作成されましたにへの参照をした後、 <xref:System.Web.Security.MembershipUser> オブジェクト、そのユーザーにそのユーザーの設定を変更することができますを <xref:System.Web.Security.MembershipUser> パブリック メソッドなど <xref:System.Web.Security.MembershipUser.ChangePasswordQuestionAndAnswer%2A> アプリケーションの場所 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> は `true`, のプロパティ値を設定したり、 <xref:System.Web.Security.MembershipUser> オブジェクトとを渡し、 <xref:System.Web.Security.Membership.UpdateUser%2A> メソッドです。  
  
 アプリケーションのデータ ソースにユーザーが既に存在する場合は取得できます、 <xref:System.Web.Security.MembershipUser> オブジェクトを持つ既存のユーザーに対して、 <xref:System.Web.Security.Membership.GetUser%2A> メソッドです。  
  
 すべてのパラメーター値は、先頭と末尾のスペースが切り捨てられます。  
  
   
  
## 例  
 次のコード例では、フォーム認証と ASP.NET メンバーシップを使用するように構成、ASP.NET アプリケーションの新しいユーザーを作成します。 ユーザーが正常に作成されていない場合は、ユーザーにメッセージが表示されます。 それ以外の場合、ユーザーは、アプリケーションのログイン ページにリダイレクトされます。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.Membership\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/createuser1cs.aspx#1)]
 [!code-vb[System.Web.Security.Membership\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/createuser1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Security.MembershipCreateUserException">ユーザーは作成されませんでした。 チェック、 <see cref="P:System.Web.Security.MembershipCreateUserException.StatusCode" /> プロパティを <see cref="T:System.Web.Security.MembershipCreateStatus" /> 値。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, out System.Web.Security.MembershipCreateStatus status);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, valuetype System.Web.Security.MembershipCreateStatus status) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Web.Security.MembershipCreateStatus@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
        <Parameter Name="passwordQuestion" Type="System.String" />
        <Parameter Name="passwordAnswer" Type="System.String" />
        <Parameter Name="isApproved" Type="System.Boolean" />
        <Parameter Name="status" Type="System.Web.Security.MembershipCreateStatus&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="username">新しいユーザーのユーザー名。</param>
        <param name="password">新しいユーザーのパスワード。</param>
        <param name="email">新しいユーザーの電子メール アドレス。</param>
        <param name="passwordQuestion">メンバーシップのユーザーのパスワードの質問の値です。</param>
        <param name="passwordAnswer">メンバーシップのユーザーのパスワードの解答の値。</param>
        <param name="isApproved">新しいユーザーがログオンを承認するかどうかを示すブール値。</param>
        <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus" /> 、ユーザーが正常に作成されたことを示すまたは作成が失敗した理由。</param>
        <summary>データ ストアに指定されたプロパティ値を持つ新しいユーザーを追加し、ユーザーが正常に作成されたこと、またはユーザーの作成失敗の理由を示す状態パラメーターを返します。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> 新しく作成したユーザーのオブジェクト。 このメソッドが戻るかどうかはユーザーが作成されなかった、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.CreateUser%2A> データ ストアに新しいユーザーを追加し、返します、 <xref:System.Web.Security.MembershipUser> 新しく作成したユーザーのオブジェクト。 ユーザーの作成が失敗した場合は、取得、 <xref:System.Web.Security.MembershipCreateStatus> 値から、 `status` ユーザーの作成が失敗した理由を示す出力パラメーターです。  
  
 <xref:System.Web.Security.Membership.CreateUser%2A> メソッドから返される `null` 場合 `password` 空の文字列または `null`, 、`username` 空の文字列または `null` コンマ \(,\) が含まれるか `passwordQuestion` は `null` 空の文字列で、または `passwordAnswer` は `null` 、空の文字列が含まれています。  
  
 メンバーシップ ユーザーが作成されましたにへの参照をした後、 <xref:System.Web.Security.MembershipUser> オブジェクト、そのユーザーにそのユーザーの設定を変更すると、 <xref:System.Web.Security.MembershipUser> パブリック メソッドのプロパティ値を設定したり、 <xref:System.Web.Security.MembershipUser> オブジェクトを渡すこと、 <xref:System.Web.Security.MembershipUser> オブジェクトを <xref:System.Web.Security.Membership.UpdateUser%2A> メソッドです。  
  
 アプリケーションのデータ ソースにユーザーが既に存在する場合は取得できます、 <xref:System.Web.Security.MembershipUser> オブジェクトを持つ既存のユーザーに対して、 <xref:System.Web.Security.Membership.GetUser%2A> メソッドです。  
  
 すべての文字列パラメーターの値からは、先頭と末尾のスペースが切り捨てられます。  
  
   
  
## 例  
 次のコード例では、フォーム認証と ASP.NET メンバーシップを使用するように構成、ASP.NET アプリケーションの新しいユーザーを作成します。 ユーザーが正常に作成されていない場合は、ユーザーにメッセージが表示されます。 それ以外の場合、ユーザーは、アプリケーションのログイン ページにリダイレクトされます。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/CreateUsercs.aspx#2)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/CreateUservb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser CreateUser (string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, out System.Web.Security.MembershipCreateStatus status);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, valuetype System.Web.Security.MembershipCreateStatus status) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
        <Parameter Name="passwordQuestion" Type="System.String" />
        <Parameter Name="passwordAnswer" Type="System.String" />
        <Parameter Name="isApproved" Type="System.Boolean" />
        <Parameter Name="providerUserKey" Type="System.Object" />
        <Parameter Name="status" Type="System.Web.Security.MembershipCreateStatus&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="username">新しいユーザーのユーザー名。</param>
        <param name="password">新しいユーザーのパスワード。</param>
        <param name="email">新しいユーザーの電子メール アドレス。</param>
        <param name="passwordQuestion">メンバーシップのユーザーのパスワードの質問の値です。</param>
        <param name="passwordAnswer">メンバーシップのユーザーのパスワードの解答の値。</param>
        <param name="isApproved">新しいユーザーがログオンを承認するかどうかを示すブール値。</param>
        <param name="providerUserKey">メンバーシップ データ ストアに保存するか、ユーザーのユーザーの識別子です。</param>
        <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus" /> を示す、ユーザーが正常に作成されたかの理由の作成に失敗しました。</param>
        <summary>指定したプロパティ値を持つ新しいユーザーと一意の識別子をデータ ストアに追加し、ユーザーが正常に作成されたこと、またはユーザーの作成失敗の理由を示す状態パラメーターを返します。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> 新しく作成したユーザーのオブジェクト。 このメソッドが戻るかどうかはユーザーが作成されなかった、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.CreateUser%2A> データ ストアに新しいユーザーを追加し、返します、 <xref:System.Web.Security.MembershipUser> 新しく作成したユーザーのオブジェクト。 ユーザーの作成が失敗した場合は、取得、 <xref:System.Web.Security.MembershipCreateStatus> 値から、 `status` ユーザーの作成が失敗した理由を示す出力パラメーターです。 使用して、データベースのプライマリ キー値などのユーザーの一意の識別子を指定する、 `providerUserKey` パラメーター。  
  
 <xref:System.Web.Security.Membership.CreateUser%2A> メソッドから返される `null` 場合 `password` 空の文字列または `null`, 、`username` 空の文字列または `null` コンマ \(,\) が含まれるか `passwordQuestion` は `null` 空の文字列が含まれていますまたは `passwordAnswer` は `null` 、空の文字列が含まれています。  
  
 メンバーシップ ユーザーが作成されましたにへの参照をした後、 <xref:System.Web.Security.MembershipUser> オブジェクト、そのユーザーにそのユーザーの設定を変更すると、 <xref:System.Web.Security.MembershipUser> パブリック メソッドのプロパティ値を設定したり、 <xref:System.Web.Security.MembershipUser> オブジェクトを渡すこと、 <xref:System.Web.Security.MembershipUser> オブジェクトを <xref:System.Web.Security.Membership.UpdateUser%2A> メソッドです。  
  
 アプリケーションのデータ ソースにユーザーが既に存在する場合は取得できます、 <xref:System.Web.Security.MembershipUser> オブジェクトを持つ既存のユーザーに対して、 <xref:System.Web.Security.Membership.GetUser%2A> メソッドです。  
  
 すべての文字列パラメーターの値からは、先頭と末尾のスペースが切り捨てられます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUser">
      <MemberSignature Language="C#" Value="public static bool DeleteUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.DeleteUser(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">削除するユーザーの名前。</param>
        <summary>ユーザーと関連するユーザー データをデータベースから削除します。</summary>
        <returns>
          <see langword="true" /> ユーザーが削除された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データベースに格納されているユーザー データ、 <xref:System.Web.Security.Roles>, 、<xref:System.Web.HttpContext.Profile%2A>, 、または <xref:System.Web.UI.WebControls.WebParts.WebPart> を使用しているときにも、個人用設定が削除、 <xref:System.Web.Security.SqlRoleProvider>, 、<xref:System.Web.Profile.SqlProfileProvider>, 、および <xref:System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider> データ ストレージ用のオブジェクト。  
  
   
  
## 例  
 次のコード例は、現在ログオンしているユーザーを削除し、すべての関連データ。  
  
 [!code-csharp[System.Web.Security.Membership\#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/DeleteUsercs.aspx#8)]
 [!code-vb[System.Web.Security.Membership\#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/DeleteUservb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> 空の文字列またはコンマ \(,\) が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> します。 <see langword="null." /></exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteUser">
      <MemberSignature Language="C#" Value="public static bool DeleteUser (string username, bool deleteAllRelatedData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteUser(string username, bool deleteAllRelatedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.DeleteUser(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="deleteAllRelatedData" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">削除するユーザーの名前。</param>
        <param name="deleteAllRelatedData">データベースからユーザーに関連するデータを削除するには <see langword="true" />。データベース内のユーザーに関連するデータをそのままにするには <see langword="false" />。</param>
        <summary>データベースからユーザーを削除します。</summary>
        <returns>
          <see langword="true" /> ユーザーが削除された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 データベースから削除するユーザーは削除のみから構成されている `applicationName`します。  
  
 場合 `deleteAllRelatedData` は `true`, 、用のデータベースに格納されているユーザー データ、 <xref:System.Web.Security.Roles>, 、<xref:System.Web.HttpContext.Profile%2A>, 、または <xref:System.Web.UI.WebControls.WebParts.WebPart> を使用しているときにも、個人用設定が削除、 <xref:System.Web.Security.SqlRoleProvider>, 、<xref:System.Web.Profile.SqlProfileProvider>, 、および <xref:System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider> データ ストレージ用のオブジェクト。  
  
   
  
## 例  
 次のコード例は、現在ログオンしているユーザーを削除し、すべての関連データ。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/DeleteUsercs.aspx#6)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/DeleteUservb.aspx#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> 空の文字列またはコンマ \(,\) が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="EnablePasswordReset">
      <MemberSignature Language="C#" Value="public static bool EnablePasswordReset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnablePasswordReset" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.EnablePasswordReset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のメンバーシップ プロバイダーがユーザーに自分のパスワードのリセットを許可するように構成されているかどうかを示す値を取得します。</summary>
        <value>メンバーシップ プロバイダーがパスワードのリセットをサポートしている場合は <see langword="true" />、そうでない場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パスワード リセットは、ユーザーが自分のパスワードを忘れたか、現在のパスワードが有効では不要になったときに、現在のパスワードを新しいユーザー名をランダムに生成されたパスワードを置き換えるには、ASP.NET メンバーシップ機能します。 これは、パスワードの形式を設定すると特に便利です <xref:System.Web.Security.MembershipPasswordFormat.Hashed>, 、ユーザーはパスワードのハッシュ値を取得できません。  
  
   
  
## 例  
 次のコード例にある要素を示しています、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションでのインスタンスを使用することを指定、 <xref:System.Web.Security.SqlMembershipProvider> でき、パスワードをリセットします。  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="false"  
      enablePasswordReset="true"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Hashed"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 次のコード例を最初に確認を <xref:System.Web.Security.Membership.EnablePasswordReset%2A> は `true`, ユーザーのパスワードをリセットし、自動的に生成された、新しいパスワードを返します。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ResetPasswordcs.aspx#8)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ResetPasswordvb.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePasswordRetrieval">
      <MemberSignature Language="C#" Value="public static bool EnablePasswordRetrieval { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnablePasswordRetrieval" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.EnablePasswordRetrieval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがパスワードを取得できるようにする、現在のメンバーシップ プロバイダーが構成されているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> メンバーシップ プロバイダーは、パスワードの取得をサポートしている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> は `false`, 、基になるメンバーシップ プロバイダーがスローする可能性が、 <xref:System.Web.HttpException>です。  
  
 .NET Framework に含まれているプロバイダーでは、パスワードのセキュリティ強化のために複数のパスワードの形式をサポートします。 パスワードの形式に設定されている場合は、 <xref:System.Web.Security.MembershipPasswordFormat.Hashed>, 、ユーザーは、データベースから、既存のパスワードを取得できません。<xref:System.Web.Security.MembershipPasswordFormat.Hashed> パスワードの形式は、パスワードの値の一方向のエンコーディングを提供します。 パスワードは「ハッシュ」され、認証用のデータベースに格納されている値と比較されます。 「ハッシュ」の値は、元のパスワード値を取得するにはエンコードされていないすることはできません。 詳細については、「<xref:System.Web.Security.MembershipPasswordFormat>」を参照してください。  
  
   
  
## 例  
 次のコード例にある要素を示しています、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションでのインスタンスを使用することを指定、 <xref:System.Web.Security.SqlMembershipProvider> し、パスワードの取得を可能にします。  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="false"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 次のコード例を最初に確認を <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> は `true`, パスワードを指定したユーザー名を取得し、指定されたユーザーの電子メール アドレスに送信します。  
  
> [!IMPORTANT]
>  高レベルのセキュリティを必要とするサイトには、電子メールを使用してクリア テキストでパスワードを返すことはしないでください。 高度なセキュリティ サイトの SSL などの暗号化を使用してパスワードを返すことをお勧めします。  
>   
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれます。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/RetrievePasswordcs.aspx#4)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/RetrievePasswordvb.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUsersByEmail">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByEmail (string emailToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByEmail(string emailToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByEmail(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">検索するメール アドレス。</param>
        <summary>指定したメール アドレスと一致するメール アドレスを持つメンバーシップ ユーザーのコレクションを取得します。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> に一致するすべてのユーザーを含む、 <paramref name="emailToMatch" /> パラメーター。  
  
 先頭および末尾のスペースは削除から、 <paramref name="emailToMatch" /> パラメーターの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> 電子メール アドレスが、指定された一致するユーザーのメンバーシップの一覧を返します `emailToMatch` に、構成された `applicationName`します。  
  
 <xref:System.Web.Security.SqlMembershipProvider> に対して LIKE 句を使用して、検索を実行、 `emailToMatch` パラメーター。 句で使用できるように SQL Server でサポートされているワイルドカード、 `emailToMatch` パラメーターの値。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> をメンバーシップ データベースからユーザーのメンバーシップ情報を取得するメソッドはユーザー入力に基づいており、データのページに結果を表示します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.Membership\#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/FindUsersByEmailcs.aspx#9)]
 [!code-vb[System.Web.Security.Membership\#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/FindUsersByEmailvb.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUsersByEmail">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByEmail (string emailToMatch, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByEmail(string emailToMatch, int32 pageIndex, int32 pageSize, int32 totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">検索するメール アドレス。</param>
        <param name="pageIndex">返される結果ページのインデックス。<c>pageIndex</c> は 0 から始まります。</param>
        <param name="pageSize">返される結果ページのサイズ。</param>
        <param name="totalRecords">一致したユーザーの合計数。</param>
        <summary>電子メール アドレスが一致するように指定した電子メール アドレスを含む、データのページ内のメンバーシップのユーザーのコレクションを取得します。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> のページを格納している <paramref name="pageSize" /><see cref="T:System.Web.Security.MembershipUser" /> オブジェクトで指定されたページから開始 <paramref name="pageIndex" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> 電子メール アドレスが、指定された一致するユーザーのメンバーシップの一覧を返します `emailToMatch` に、構成された `applicationName`します。  
  
 <xref:System.Web.Security.SqlMembershipProvider> に対して LIKE 句を使用して、検索を実行、 `emailToMatch` パラメーター。 句で使用できるように SQL Server でサポートされているワイルドカード、 `emailToMatch` パラメーターの値。  
  
 によって返される結果 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> による制限、 `pageIndex` と `pageSize` パラメーター。`pageSize` パラメーターの最大数を識別する <xref:System.Web.Security.MembershipUser> で返されるオブジェクト、 <xref:System.Web.Security.MembershipUserCollection>です。`pageIndex` パラメーターは、結果を返すには、0 が最初のページを識別する場合のどのページを識別します。`totalRecords` パラメーターは、 `out` パラメーターに一致するメンバーシップ ユーザーの合計数に設定されている、 `emailToMatch` 値。 13 ユーザーはどこで検出された場合など `emailToMatch` の一部または全体の電子メール アドレスに一致して `pageIndex` の値が 1 に、 `pageSize` 5 の <xref:System.Web.Security.MembershipUserCollection> 返される 6 番目を通じて返される 10 番目のユーザーにはが含まれます。`totalRecords` 13 に設定されます。  
  
 先頭および末尾のスペースは削除から、 `emailToMatch` パラメーターの値。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.Security.Membership.FindUsersByEmail%2A> をメンバーシップ データベースからユーザーのメンバーシップ情報を取得するメソッドはユーザー入力に基づいており、データのページに結果を表示します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#13](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/FindUsersByEmailcs.aspx#13)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/FindUsersByEmailvb.aspx#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pageIndex" /> が 0 未満です。  
  
 または  
  
 <paramref name="pageSize" /> 1 より小さいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="FindUsersByName">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByName (string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByName(string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernameToMatch">検索するユーザー名。</param>
        <summary>指定したユーザー名と一致するユーザー名を持つメンバーシップ ユーザーのコレクションを取得します。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> に一致するすべてのユーザーを含む、 <paramref name="usernameToMatch" /> パラメーター。  
  
 先頭および末尾のスペースは削除から、 <paramref name="usernameToMatch" /> パラメーターの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.SqlMembershipProvider.FindUsersByName%2A> メンバーシップ ユーザーの一覧を返しますユーザー名と一致する、指定された `usernameToMatch` に、構成された `applicationName`します。  
  
 <xref:System.Web.Security.SqlMembershipProvider> に対して LIKE 句を使用して、検索を実行、 `usernameToMatch` パラメーター。 句で使用できるように SQL Server でサポートされているワイルドカード、 `usernameToMatch` パラメーターの値。  
  
 すべてのパラメーター値は、先頭と末尾のスペースが切り捨てられます。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.Security.Membership.FindUsersByName%2A> をメンバーシップ データベースからユーザーのメンバーシップ情報を取得するメソッドはユーザー入力に基づいており、データのページに結果を表示します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.Membership\#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/FindUsersByNamecs.aspx#10)]
 [!code-vb[System.Web.Security.Membership\#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/FindUsersByNamevb.aspx#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="usernameToMatch" /> が空の文字列です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usernameToMatch" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FindUsersByName">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection FindUsersByName (string usernameToMatch, int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection FindUsersByName(string usernameToMatch, int32 pageIndex, int32 pageSize, int32 totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernameToMatch" Type="System.String" />
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="usernameToMatch">検索するユーザー名。</param>
        <param name="pageIndex">返される結果ページのインデックス。<c>pageIndex</c> は 0 から始まります。</param>
        <param name="pageSize">返される結果ページのサイズ。</param>
        <param name="totalRecords">一致したユーザーの合計数。</param>
        <summary>ユーザー名が指定された内容と一致するデータのページ内のメンバーシップのユーザーのコレクションを取得します。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> のページを格納している <paramref name="pageSize" /><see cref="T:System.Web.Security.MembershipUser" /> オブジェクトで指定されたページから開始 <paramref name="pageIndex" />します。  
  
 先頭および末尾のスペースは削除から、 <paramref name="usernameToMatch" /> パラメーターの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.SqlMembershipProvider.FindUsersByName%2A> メンバーシップ ユーザーの一覧を返しますユーザー名と一致する、指定された `usernameToMatch` に、構成された `applicationName`します。  
  
 <xref:System.Web.Security.SqlMembershipProvider> に対して LIKE 句を使用して、検索を実行、 `usernameToMatch` パラメーター。 句で使用できるように SQL Server でサポートされているワイルドカード、 `usernameToMatch` パラメーターの値。  
  
 によって返される結果 <xref:System.Web.Security.Membership.FindUsersByName%2A> による制限、 `pageIndex` と `pageSize` パラメーター。`pageSize` パラメーターの最大数を識別する <xref:System.Web.Security.MembershipUser> で返されるオブジェクト、 <xref:System.Web.Security.MembershipUserCollection>です。`pageIndex` パラメーターは、結果を返すには、0 が最初のページを識別する場合のどのページを識別します。`totalRecords` パラメーターは、 `out` パラメーターに一致するメンバーシップ ユーザーの合計数に設定されている、 `usernameToMatch` 値。 13 ユーザーはどこで検出された場合など `usernameToMatch` の一部または全体のユーザー名に一致して `pageIndex` の値が 1 に、 `pageSize` 5 の <xref:System.Web.Security.MembershipUserCollection> 返される 6 番目を通じて返される 10 番目のユーザーにはが含まれます。`totalRecords` 13 に設定されます。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.Security.Membership.FindUsersByName%2A> をメンバーシップ データベースからユーザーのメンバーシップ情報を取得するメソッドはユーザー入力に基づいており、データのページに結果を表示します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#12](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/FindUsersByNamecs.aspx#12)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/FindUsersByNamevb.aspx#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="usernameToMatch" /> が空の文字列です。  
  
 または  
  
 <paramref name="pageIndex" /> が 0 未満です。  
  
 または  
  
 <paramref name="pageSize" /> 1 より小さいです。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="usernameToMatch" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GeneratePassword">
      <MemberSignature Language="C#" Value="public static string GeneratePassword (int length, int numberOfNonAlphanumericCharacters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GeneratePassword(int32 length, int32 numberOfNonAlphanumericCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GeneratePassword(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="numberOfNonAlphanumericCharacters" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length">生成されたパスワードの文字数。 長さは、1 ~ 128 文字にする必要があります。</param>
        <param name="numberOfNonAlphanumericCharacters">英数字以外の文字の最小数 \(など、@、\#、\!、%、&amp; に\) で生成されたパスワードです。</param>
        <summary>指定した長さのランダムなパスワードを生成します。</summary>
        <returns>指定した長さのランダムなパスワード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.GeneratePassword%2A> メソッドは、ランダムなパスワードを生成するために使用し、最も広く使用されて、 <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> 、新しい一時パスワードをユーザーのパスワードをリセットするメンバーシップ プロバイダーによって実装されたメソッドです。  
  
 生成されたパスワードには文字の英数字や次の区切り記号をのみが含まれています: `!@#$%^&*()_-+=[{]};:<>|./?`です。 生成されたパスワードで非表示または印刷不可能な制御文字が含まれていません。  
  
> [!NOTE]
>  によって作成されたランダムなパスワード、 <xref:System.Web.Security.Membership.GeneratePassword%2A> で正規表現を渡すメソッドが保証はない、 <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> プロパティです。 ただし、ランダムなパスワードがによって確立された条件を満たして、 <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A> プロパティおよび `numberOfNonAlphanumericCharacters` パラメーター。  
  
   
  
## 例  
 次のコード例は、新しいメンバーシップ ユーザーを作成し、使用して、 <xref:System.Web.Security.Membership.GeneratePassword%2A> をユーザーに表示される、ランダムな値に新しいユーザーのパスワードを初期化します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.Membership\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/GeneratePasswordcs.aspx#5)]
 [!code-vb[System.Web.Security.Membership\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/GeneratePasswordvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="length" /> 1 より小さいか、128 文字より長く \- または \-  
  
 <paramref name="numberOfNonAlphanumericCharacters" /> が 0 未満であるか、または <paramref name="length" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllUsers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection GetAllUsers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection GetAllUsers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetAllUsers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データベース内のすべてのユーザーのコレクションを取得します。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> の <see cref="T:System.Web.Security.MembershipUser" /> のすべてのデータベースにユーザーを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.GetAllUsers%2A> コレクションとしてアプリケーションのメンバーシップ ユーザー向けの情報を返す <xref:System.Web.Security.MembershipUser> オブジェクトです。 使用する場合は注意が必要、 <xref:System.Web.Security.Membership.GetAllUsers%2A> 、その結果として、非常に大きなユーザー データベースを持つメソッド <xref:System.Web.Security.MembershipUserCollection> ページ、ASP.NET では、アプリケーションのパフォーマンスが低下する可能性があります。  
  
   
  
## 例  
 次のコード例は、ユーザーの数のカウントを持つユーザーの一覧を返します現在オンラインになっています。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllUsers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUserCollection GetAllUsers (int pageIndex, int pageSize, out int totalRecords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUserCollection GetAllUsers(int32 pageIndex, int32 pageSize, int32 totalRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetAllUsers(System.Int32,System.Int32,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUserCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageIndex" Type="System.Int32" />
        <Parameter Name="pageSize" Type="System.Int32" />
        <Parameter Name="totalRecords" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pageIndex">返される結果ページのインデックス。 0 を使用すると、最初のページを指定します。</param>
        <param name="pageSize">返される結果ページのサイズ。<c>pageIndex</c> は 0 から始まります。</param>
        <param name="totalRecords">ユーザーの合計数。</param>
        <summary>データのページに、データベース内のすべてのユーザーのコレクションを取得します。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUserCollection" /> の <see cref="T:System.Web.Security.MembershipUser" /> に、構成されたデータベース内のすべてのユーザーを表す <see langword="applicationName" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって返される結果 <xref:System.Web.Security.Membership.GetAllUsers%2A> による制限、 `pageIndex` と `pageSize` パラメーター。`pageSize` パラメーターの最大数を識別する <xref:System.Web.Security.MembershipUser> で返されるオブジェクト、 <xref:System.Web.Security.MembershipUserCollection>です。`pageIndex` パラメーターは、結果を返すには、0 が最初のページを識別する場合のどのページを識別します。`totalRecords` パラメーターは、 `out` に、構成されたメンバーシップ ユーザーの合計数に設定されているパラメーター `applicationName`します。 などに、構成された 13 のユーザーがある場合 `applicationName`, 、および `pageIndex` の値が 1 に、 `pageSize` 5 の <xref:System.Web.Security.MembershipUserCollection> 返される 6 番目を通じて返される 10 番目のユーザーにはが含まれます。`totalRecords` 13 に設定されます。  
  
   
  
## 例  
 次のコード例では、ユーザーの一覧を返すユーザー数のカウントと共にデータのページで現在オンラインになっています。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pageIndex" /> が 0 未満です。  
  
 または  
  
 <paramref name="pageSize" /> 1 より小さいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNumberOfUsersOnline">
      <MemberSignature Language="C#" Value="public static int GetNumberOfUsersOnline ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetNumberOfUsersOnline() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetNumberOfUsersOnline" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在、アプリケーションにアクセスするユーザーの数を取得します。</summary>
        <returns>現在、アプリケーションにアクセスするユーザーの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.SqlMembershipProvider.GetNumberOfUsersOnline%2A> 現在のユーザーの数を返す <xref:System.Web.Security.Membership.ApplicationName%2A> 最終アクティビティの日付が現在の日時が以前より大きい、 <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A>です。 最後の活動の日付\/時刻スタンプによるユーザーの資格情報を検証するときに現在の日付と時刻に更新される、 <xref:System.Web.Security.Membership.ValidateUser%2A> または <xref:System.Web.Security.Membership.UpdateUser%2A> メソッドへの呼び出し時に、または、 <xref:System.Web.Security.Membership.GetUser%2A> パラメーターを指定せず、または 1 つを使用するオーバー ロードを `userIsOnline` 日時スタンプを更新することを指定するパラメーターです。  
  
   
  
## 例  
 次のコード例は、ユーザーの数のカウントを持つユーザーの一覧を返します現在オンラインになっています。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/ShowUserscs.aspx#5)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/ShowUsersvb.aspx#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データ ソースから情報を取得し、最後のアクティビティを更新、現在のメンバーシップでは、ログオン ユーザーの日付\/時刻スタンプします。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> 現在ログオンしているユーザーを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.GetUser> データ ソースからユーザー情報を取得し、作成、 <xref:System.Web.Security.MembershipUser> オブジェクトが返されたデータが設定されます。 いずれかを使用する場合、 <xref:System.Web.Security.Membership.GetUser%2A> を受け取らないオーバー ロード、 `username` パラメーター、 <xref:System.Web.Security.Membership.GetUser%2A> 、現在のメンバーシップでは、ログオン ユーザーの情報を返します。 現在のメンバーシップでは、ログオン ユーザーがで識別される、 <xref:System.Security.Principal.IIdentity.Name%2A> の現在のユーザーの <xref:System.Web.HttpContext>です。  
  
 かどうかを指定することも <xref:System.Web.Security.Membership.GetUser%2A> 最終アクティビティを更新するユーザーの日付\/時刻スタンプを使用して取得されている、 `userIsOnline` パラメーター。<xref:System.Web.Security.Membership.GetUser%2A> を受け取らないオーバー ロード、 `userIsOnline` パラメーター、 `GetUser()` ユーザーの日付\/時刻スタンプを暗黙的に更新プログラムの最終利用します。`GetUser(System.String)``GetUser(System.Object)` しません。  
  
   
  
## 例  
 次のコード例更新最後の活動の日付\/時刻スタンプを現在のメンバーシップでは、ログオン ユーザーと、ASP.NET ページにそのユーザー名が表示されます。  
  
 [!code-csharp[System.Web.Security.Membership\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/default1cs.aspx#3)]
 [!code-vb[System.Web.Security.Membership\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/default1vb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">現在ログインしているユーザーのメンバーシップはありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userIsOnline">場合 <see langword="true" />, 、指定されたユーザーの更新プログラムの最終アクティビティ日付\/時刻スタンプします。</param>
        <summary>現在のメンバーシップでは、ログオン ユーザーのデータ ソースから情報を取得します。 指定されている場合は現在のメンバーシップでは、ログオン ユーザーの更新プログラムの最終アクティビティ日付\/時刻のタイムスタンプ。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> 現在ログオンしているユーザーを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.GetUser%2A> メソッドは、データ ソースからユーザー情報を取得し、作成、 <xref:System.Web.Security.MembershipUser> オブジェクトが返されたデータが設定されます。 いずれかを使用する場合、 <xref:System.Web.Security.Membership.GetUser%2A> を受け取らないオーバー ロード、 `username` パラメーター、 <xref:System.Web.Security.Membership.GetUser%2A> 、現在のメンバーシップでは、ログオン ユーザーの情報を返します。 現在のメンバーシップでは、ログオン ユーザーがで識別される、 <xref:System.Security.Principal.IIdentity.Name%2A> の現在のユーザーの <xref:System.Web.HttpContext>です。  
  
 かどうかを指定することも <xref:System.Web.Security.Membership.GetUser%2A> 最終アクティビティを更新するユーザーの日付\/時刻スタンプを使用して取得されている、 `userIsOnline` パラメーター。<xref:System.Web.Security.Membership.GetUser%2A> を受け取らないオーバー ロード、 `userIsOnline` パラメーター、 `GetUser()` ユーザーの日付\/時刻スタンプを暗黙的に更新プログラムの最終利用します。`GetUser(System.String)``GetUser(System.Object)` しません。  
  
   
  
## 例  
 ユーザー名を最終アクティビティを更新することがなく、ASP.NET ページ内の現在のメンバーシップでは、ログオン ユーザーの次のコード例の表示の日付\/時刻のユーザーのスタンプ  
  
 [!code-csharp[System.Web.Security.Membership\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/default2cs.aspx#4)]
 [!code-vb[System.Web.Security.Membership\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/default2vb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">現在ログインしているユーザーのメンバーシップはありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (object providerUserKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(object providerUserKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerUserKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="providerUserKey">ユーザーのメンバーシップのデータ ソースからの一意のユーザー識別子です。</param>
        <summary>指定の一意の識別子に関連付けられているメンバーシップ ユーザーのデータ ソースから情報を取得します。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> 指定の一意の識別子に関連付けられているユーザーを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.GetUser%2A> メソッドは、データ ソースからユーザー情報を取得し、作成、 <xref:System.Web.Security.MembershipUser> オブジェクトが返されたデータが設定されます。 使用して指定されたデータ ソースからの一意識別子を使用してユーザーを識別、 `providerUserKey` パラメーター。  
  
 かどうかを指定することも <xref:System.Web.Security.Membership.GetUser%2A> 最終アクティビティを更新する日付\/タイムスタンプを取得するユーザーに対して、 `userIsOnline` パラメーター。<xref:System.Web.Security.Membership.GetUser%2A> を受け取らないオーバー ロード、 `userIsOnline` パラメーター、 `GetUser()` ユーザーの日付\/時刻スタンプを暗黙的に更新プログラムの最終利用します。`GetUser(System.String)``GetUser(System.Object)` しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="providerUserKey" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">取得するユーザーの名前。</param>
        <summary>指定したメンバーシップ ユーザーのデータ ソースから情報を取得します。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> 指定したユーザーを表すオブジェクト。 場合、 <paramref name="username" /> パラメーターは、既存のユーザーに対応していない、このメソッドが戻る <see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.GetUser%2A> メソッドは、データ ソースからユーザー情報を取得し、作成、 <xref:System.Web.Security.MembershipUser> オブジェクトが返されたデータが設定されます。 いずれかを使用する場合、 <xref:System.Web.Security.Membership.GetUser%2A> を受け取らないオーバー ロード、 `username` パラメーター、 <xref:System.Web.Security.Membership.GetUser%2A> 、現在のメンバーシップでは、ログオン ユーザーの情報を返します。 現在のメンバーシップでは、ログオン ユーザーがで識別される、 <xref:System.Security.Principal.IIdentity.Name%2A> の現在のユーザーの <xref:System.Web.HttpContext>です。  
  
 かどうかを指定することも <xref:System.Web.Security.Membership.GetUser%2A> 最終アクティビティを更新する日付\/タイムスタンプを取得するユーザーに対して、 `userIsOnline` パラメーター。<xref:System.Web.Security.Membership.GetUser%2A> を受け取らないオーバー ロード、 `userIsOnline` パラメーター、 <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=fullName> ユーザーの日付\/時刻スタンプを暗黙的に更新プログラムの最終利用します。<xref:System.Web.Security.Membership.GetUser%2A?displayProperty=fullName><xref:System.Web.Security.Membership.GetUser%2A> しません。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.Security.Membership.GetUser%2A> を返すメソッドを <xref:System.Web.Security.MembershipUser> 現在ログオンしているユーザーおよびユーザーの電子メール アドレスの更新プログラムのオブジェクト。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/UpdateEmailcs.aspx#11)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/UpdateEmailvb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> コンマ \(,\) が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (object providerUserKey, bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(object providerUserKey, bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.Object,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerUserKey" Type="System.Object" />
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="providerUserKey">ユーザーのメンバーシップのデータ ソースからの一意のユーザー識別子です。</param>
        <param name="userIsOnline">場合 <see langword="true" />, 、指定されたユーザーの更新プログラムの最終アクティビティ日付\/時刻スタンプします。</param>
        <summary>指定の一意の識別子に関連付けられているメンバーシップ ユーザーのデータ ソースから情報を取得します。 指定されている場合は、ユーザーの更新プログラムの最終アクティビティ日付\/時刻のタイムスタンプ。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> 指定の一意の識別子に関連付けられているユーザーを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.GetUser%2A> メソッドは、データ ソースからユーザー情報を取得し、作成、 <xref:System.Web.Security.MembershipUser> オブジェクトが返されたデータが設定されます。 指定されたデータ ソースから一意の識別子を持つユーザーを識別、 `providerUserKey` パラメーター。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="providerUserKey" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipUser GetUser (string username, bool userIsOnline);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.MembershipUser GetUser(string username, bool userIsOnline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUser(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="userIsOnline" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="username">取得するユーザーの名前。</param>
        <param name="userIsOnline">場合 <see langword="true" />, 、指定されたユーザーの更新プログラムの最終アクティビティ日付\/時刻スタンプします。</param>
        <summary>指定したメンバーシップ ユーザーのデータ ソースから情報を取得します。 指定されている場合は、ユーザーの更新プログラムの最終アクティビティ日付\/時刻のタイムスタンプ。</summary>
        <returns>A <see cref="T:System.Web.Security.MembershipUser" /> 指定したユーザーを表すオブジェクト。 場合、 <paramref name="username" /> パラメーターは、既存のユーザーに対応していない、このメソッドが戻る <see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.GetUser%2A> メソッドは、データ ソースからユーザー情報を取得し、作成、 <xref:System.Web.Security.MembershipUser> オブジェクトが返されたデータが設定されます。  
  
 いずれかを使用する場合、 <xref:System.Web.Security.Membership.GetUser%2A> を受け取らないオーバー ロード、 `username` パラメーター、 <xref:System.Web.Security.Membership.GetUser%2A> 、現在のメンバーシップでは、ログオン ユーザーの情報を返します。 現在のメンバーシップでは、ログオン ユーザーがで識別される、 <xref:System.Security.Principal.IIdentity.Name%2A> の現在のユーザーの <xref:System.Web.HttpContext>です。  
  
 かどうかを指定することも <xref:System.Web.Security.Membership.GetUser%2A> 最終アクティビティを更新する日付\/タイムスタンプを取得するユーザーに対して、 `userIsOnline` パラメーター。<xref:System.Web.Security.Membership.GetUser%2A> を受け取らないオーバー ロード、 `userIsOnline` パラメーター、 <xref:System.Web.Security.Membership.GetUser%2A?displayProperty=fullName> ユーザーの日付\/時刻スタンプを暗黙的に更新プログラムの最終利用します。<xref:System.Web.Security.Membership.GetUser%2A?displayProperty=fullName><xref:System.Web.Security.Membership.GetUser%2A> しません。  
  
   
  
## 例  
 次のコード例では、指定したユーザー名のパスワードを取得し、指定されたユーザーの電子メール アドレスに送信します。 呼び出し <xref:System.Web.Security.Membership.GetUser%2A> いる最後の活動の日付\/時刻スタンプを指定のユーザーを更新できません。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/RetrievePasswordcs.aspx#4)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/RetrievePasswordvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> コンマ \(,\) が含まれています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUserNameByEmail">
      <MemberSignature Language="C#" Value="public static string GetUserNameByEmail (string emailToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetUserNameByEmail(string emailToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.GetUserNameByEmail(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="emailToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="emailToMatch">検索するメール アドレス。</param>
        <summary>ユーザーの電子メール アドレスが指定した電子メール アドレスと一致するユーザー名を取得します。</summary>
        <returns>ユーザーの電子メール アドレスが指定した電子メール アドレスと一致するユーザー名。 一致が見つからない場合 <see langword="null" /> が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.GetUserNameByEmail%2A> 場合は、ユーザーが、ユーザー名かわからないが、電子メール アドレスがわかればはメンバーシップ ユーザーのユーザー名を取得するために使用します。 データ ストア内の 1 つ以上のユーザーは、同じ電子メール アドレスを持っている場合は、最初のユーザー名が返されます。  
  
 すべてのパラメーター値は、先頭と末尾のスペースが切り捨てられます。  
  
   
  
## 例  
 次のコード例では、指定した電子メール アドレスのユーザー名を取得します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/GetUserByEmailcs.aspx#7)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/GetUserByEmailvb.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithmType">
      <MemberSignature Language="C#" Value="public static string HashAlgorithmType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string HashAlgorithmType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.HashAlgorithmType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パスワードをハッシュに使用されるアルゴリズムの識別子。</summary>
        <value>既定のハッシュ アルゴリズムを使用するパスワードをハッシュするまたは空白を使用するアルゴリズムの識別子です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.HashAlgorithmType%2A> プロパティで使用されるカスタムのハッシュ アルゴリズムを識別する、 <xref:System.Web.Security.Membership> クラスです。 設定する、 <xref:System.Web.Security.Membership.HashAlgorithmType%2A> プロパティを使用して、 `hashAlgorithmType` 要素の属性です。  
  
 .NET Framework では、要素の構成セクションを使用して独自の暗号化クラスを構成することができます。<xref:System.Web.Security.Membership.HashAlgorithmType%2A> プロパティに一致する必要があります、 `name` 要素内の要素の属性です。 詳細については、「[Mapping Algorithm Names to Cryptography Classes](http://msdn.microsoft.com/ja-jp/01327c69-c5e1-4ef6-b73f-0a58351f0492)」を参照してください。  
  
 場合、 <xref:System.Web.Security.Membership.HashAlgorithmType%2A> プロパティが設定されていない、 <xref:System.Web.Security.Membership> クラス設定されたハッシュ アルゴリズムを使用して、 `validation` 要素の属性です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxInvalidPasswordAttempts">
      <MemberSignature Language="C#" Value="public static int MaxInvalidPasswordAttempts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxInvalidPasswordAttempts" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MaxInvalidPasswordAttempts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メンバーシップ ユーザーがロック アウトされるまでの無効なパスワードまたはパスワード解答の試行回数を取得します。</summary>
        <value>メンバーシップ ユーザーがロック アウトされるまでの無効なパスワードまたはパスワード解答の試行回数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> プロパティの動作と組み合わせて、 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> プロパティを使用して、不要なソースからの保護にパスワードまたはメンバーシップ ユーザーのパスワードの解答の推測が繰り返されます。  
  
 メンバーシップのユーザーには、値以上の無効なパスワードまたはパスワードの解答の数が入力した場合、 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> プロパティで指定された時間を分単位内で、 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> プロパティには、そのユーザーがロックされている Web サイトから設定して、 <xref:System.Web.Security.MembershipUser.IsLockedOut%2A> プロパティを `true` への呼び出しによって、ユーザーのロックを解除するまで、 <xref:System.Web.Security.MembershipUser.UnlockUser%2A> メソッドです。  
  
 値の前に有効なパスワードまたはパスワードの解答を提供するかどうか、 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> プロパティに達すると、無効な試行回数を追跡するカウンターが 0 に設定します。  
  
 無効なパスワードおよびパスワードの解答が個別に追跡されます。 たとえば場合、 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> プロパティが 5 に設定されている、ユーザーが正しいパスワードを入力し、ロックアウトされることがなく正しいパスワードの解答の入力に 5 回、最大 5 つまでしよう。  
  
 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> プロパティ値がアプリケーションの構成を使用して、設定、 `maxInvalidPasswordAttempts` 構成要素の属性です。  
  
 場合、 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> プロパティは、 `false`, 、無効なパスワード解答は追跡されません。  
  
   
  
## 例  
 次のコード例にある要素を示しています、 `system.web` アプリケーションの Web.config ファイルのセクションです。 アプリケーションでのインスタンスを使用することを指定、 <xref:System.Web.Security.SqlMembershipProvider> メンバーシップ サービス、およびセットを提供するクラス、 `maxInvalidPasswordAttempts` 属性を 5 つの無効な試行回数と `passwordAttemptWindow` を 30 分にします。  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      maxInvalidPasswordAttempts="5"  
      passwordAttemptWindow="30"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinRequiredNonAlphanumericCharacters">
      <MemberSignature Language="C#" Value="public static int MinRequiredNonAlphanumericCharacters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MinRequiredNonAlphanumericCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有効なパスワードに存在する必要がある特殊文字の最小数を取得します。</summary>
        <value>有効なパスワードに存在する必要がある特殊文字の最小数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A> プロパティで指定したメンバーシップ プロバイダーの有効なパスワードを作成する入力する必要がある特別な英数字以外の文字の最小数を取得、 <xref:System.Web.Security.Membership.Provider%2A> プロパティです。  
  
 <xref:System.Web.Security.Membership.MinRequiredNonAlphanumericCharacters%2A> プロパティ値がアプリケーションの構成を使用して、設定、 `minRequiredNonAlphanumericCharacters` 構成要素の属性です。  
  
 英数字以外の文字は、対象の文字、 <xref:System.Char.IsLetterOrDigit%2A> メソッドが返す `false`します。  
  
   
  
## 例  
 次のコード例では、構成要素を示しています、 `system.web` アプリケーションの Web.config ファイルのセクションです。 アプリケーションでのインスタンスを使用することを指定、 <xref:System.Web.Security.SqlMembershipProvider> メンバーシップ サービス、およびセットを提供するクラス、 `minRequiredNonAlphanumericCharacters` 属性を 1 文字にします。  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      minRequiredNonAlphanumericCharacters="1"  
      />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinRequiredPasswordLength">
      <MemberSignature Language="C#" Value="public static int MinRequiredPasswordLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MinRequiredPasswordLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.MinRequiredPasswordLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パスワードに最低限必要な長さを取得します。</summary>
        <value>パスワードに最低限必要な長さ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A> プロパティで指定したメンバーシップ プロバイダーの有効なパスワードを作成する入力する必要がある文字の最小数を取得する、 <xref:System.Web.Security.Membership.Provider%2A> プロパティです。  
  
 <xref:System.Web.Security.Membership.MinRequiredPasswordLength%2A> プロパティ値がアプリケーションの構成を使用して、設定、 `minRequiredPasswordLength` 構成要素の属性です。  
  
   
  
## 例  
 次のコード例では、構成要素を示しています、 `system.web` アプリケーションの Web.config ファイルのセクションです。 アプリケーションでのインスタンスを使用することを指定、 <xref:System.Web.Security.SqlMembershipProvider> メンバーシップ サービス、およびセットを提供するクラス、 `minRequiredPasswordLength` 属性を 7 文字です。  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      minRequiredPasswordLength="7"  
      />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordAttemptWindow">
      <MemberSignature Language="C#" Value="public static int PasswordAttemptWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 PasswordAttemptWindow" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.PasswordAttemptWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有効なパスワードまたはパスワードの解答を提供する、連続して間の時間枠の失敗の取得が追跡されます。</summary>
        <value>時間枠連続して失敗の分単位で正しいパスワードを入力または試みますパスワードの解答が追跡されます。 既定値は、10 分です。 現在の失敗した試行と、障害が発生した前回の間隔がより大きい場合、 <see cref="P:System.Web.Security.Membership.PasswordAttemptWindow" /> プロパティを設定すると、各操作の失敗が最初の試行の失敗の場合と同様に扱われます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> プロパティの動作と組み合わせて、 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> パスワードまたはメンバーシップを通じてユーザーのパスワードの解答を推測する必要のないソースから保護するためのプロパティには、試行が繰り返されます。 ユーザーは、ログインに使用、変更、または自分のパスワードのリセットを試みると、連続した試行の特定の数だけが、指定した時間枠内に許可します。 この時間枠の長さが指定された、 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> プロパティは分単位の数を指定します。  
  
 ユーザーに連続する試行の失敗の数が彼をリセットするか、または自分のパスワードに格納されている値に等しい場合、 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> 試行が最後に無効なは分単位で指定された数よりも少ないので、プロパティおよび時間の経過時間、 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> プロパティには、そのメンバーシップ ユーザーがロックアウトされます。 設定して、ユーザーがロックアウト、 <xref:System.Web.Security.MembershipUser.IsLockedOut%2A> プロパティを `true` への呼び出しによって、ユーザーのロックを解除するまで、 <xref:System.Web.Security.MembershipUser.UnlockUser%2A> メソッドです。  
  
 現在の失敗した試行と、障害が発生した前回の間隔がより大きい場合、 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> プロパティを設定すると、現在の無効な試行回数は 1 つ目としてカウントされます。 許可されている無効な試行回数の最大数に達する前に、有効なパスワードの解答が入力する場合、無効なパスワードの解答の試行回数は 0 \(ゼロ\) に設定されます。 最大数が無効な許可される前に、有効なパスワードを指定した場合は、試行回数に達すると、無効なパスワードの試行回数と、無効なパスワードの解答の試行の回数が 0 \(ゼロ\) に設定します。  
  
 無効なパスワードとパスワードの解答の試行回数は、互いに独立して蓄積されます。 などの場合、 <xref:System.Web.Security.Membership.MaxInvalidPasswordAttempts%2A> 5 に設定されているとは、次の 3 つ無効なパスワードの試行後に無効なパスワードの解答の試みが 2、内では、2 つの無効なパスワード再試行 \(または複数の無効なパスワードの解答の試行を 3 つ\) を行う必要があります <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> メンバーシップ ユーザーがロックアウトされるのです。  
  
 <xref:System.Web.Security.Membership.PasswordAttemptWindow%2A> プロパティの値を使用して、アプリケーションの構成設定、 `passwordAttemptWindow` 構成要素セクションの属性です。  
  
 場合、 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> にプロパティが設定されている `false`, 、無効なパスワード解答は追跡されません。  
  
   
  
## 例  
 次のコード例にある要素を示しています、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションでのインスタンスを使用することを指定、 <xref:System.Web.Security.SqlMembershipProvider> し、設定、 `maxInvalidPasswordAttempts` 属性を 5 つの無効な試行回数と `passwordAttemptWindow` を 30 分にします。  
  
```  
<membership defaultProvider="SqlProvider"   
  userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      maxInvalidPasswordAttempts="5"  
      passwordAttemptWindow="30"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordStrengthRegularExpression">
      <MemberSignature Language="C#" Value="public static string PasswordStrengthRegularExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string PasswordStrengthRegularExpression" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.PasswordStrengthRegularExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パスワードの評価に使用される正規表現を取得します。</summary>
        <value>パスワードの評価に使用される正規表現。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> プロパティで指定されたプロバイダーからパスワードの複雑さを評価するために使用する正規表現を取得する、 <xref:System.Web.Security.Membership.Provider%2A> プロパティです。  
  
 <xref:System.Web.Security.Membership.PasswordStrengthRegularExpression%2A> プロパティを使用してアプリケーションの構成で設定、 `passwordStrengthRegularExpression` 構成要素の属性です。  
  
 正規表現の詳細については、次を参照してください。 [.NET Framework Regular Expressions](http://msdn.microsoft.com/ja-jp/521b3f6d-f869-42e1-93e5-158c54a6895d)します。  
  
   
  
## 例  
 次のコード例では、構成要素を示しています、 `system.web` アプリケーションの Web.config ファイルのセクションです。 アプリケーションでのインスタンスを使用することを指定、 <xref:System.Web.Security.SqlMembershipProvider> メンバーシップ サービス、およびセットを提供するクラス、 `passwordStrengthRegularExpression` 属性、パスワードを検証する正規表現を次の条件を満たしています。  
  
-   7 文字を超えています。  
  
-   少なくとも 1 つの数字が含まれています。  
  
-   少なくとも 1 つの特殊な \(英数字以外\) 文字が含まれています。  
  
 パスワードがこれらの条件を満たしていない場合、メンバーシップ プロバイダーによって、パスワードは受け入れられません。  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow = "20>  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      requiresQuestionAndAnswer="true"  
      passwordStrengthRegularExpression=" @\"(?=.{6,})(?=(.*\d){1,})(?=(.*\W){1,})"  
      />  
   </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.MembershipProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションの既定の membership プロバイダーへの参照を取得します。</summary>
        <value>既定のメンバーシップ プロバイダーを使って公開されたアプリケーションに対して、 <see cref="T:System.Web.Security.MembershipProvider" /> 抽象基本クラスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.Provider%2A> プロパティでは、アプリケーションの既定のメンバーシップ プロバイダーを直接参照することができます。 これはよくないメンバーシップ プロバイダーのカスタムのメンバーにアクセスする使用の一部では、 <xref:System.Web.Security.MembershipProvider> 抽象基本クラスです。  
  
   
  
## 例  
 次のコード例には、既定値にアクセスする <xref:System.Web.Security.SqlMembershipProvider> を使用してアプリケーションを有効になっている、 <xref:System.Web.Security.Membership.Provider%2A> カスタム値を確認するためにプロパティ <xref:System.Web.Security.SqlMembershipProvider.RequiresUniqueEmail%2A> プロパティです。  
  
 [!code-csharp[System.Web.Security.Membership\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/Providercs.aspx#6)]
 [!code-vb[System.Web.Security.Membership\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/Providervb.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.MembershipProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.MembershipProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET アプリケーションのメンバーシップ プロバイダーのコレクションを取得します。</summary>
        <value>A <see cref="T:System.Web.Security.MembershipProviderCollection" /> メンバーシップ プロバイダーを ASP.NET アプリケーション用に構成します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.Providers%2A> 、アプリケーションの Web.config ファイルとすべてのアプリケーションの Machine.config ファイルで追加のプロバイダーを含むプロパティは、すべてのアプリケーションに対して有効になっているメンバーシップ プロバイダーを参照する。 メンバーシップ プロバイダーを使用して、アプリケーションの使用を制御する、 `providers` アプリケーションの構成のセクションの要素。 たとえば、次の例セクションを削除するアプリケーションの Web.config ファイルで、 <xref:System.Web.Security.SqlMembershipProvider> インスタンス \(`AspNetSqlProvider`\) マシン構成ファイルで指定し、追加、 <xref:System.Web.Security.SqlMembershipProvider> という名前のインスタンス `SqlProvider` アプリケーションの既定のメンバーシップ プロバイダーとします。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <remove name="AspNetSqlProvider" />  
          <add name="SqlProvider"  
            type="System.Web.Security.SqlMembershipProvider"  
            connectionStringName="SqlServices"  
            enablePasswordRetrieval="false"  
            enablePasswordReset="true"  
            requiresQuestionAndAnswer="true"  
            passwordFormat="Hashed"  
            applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
 指定する場合、 [membership 要素 \(ASP.NET 設定スキーマ\)](http://msdn.microsoft.com/ja-jp/b9c1ee8f-33ca-4361-8666-b42a0fe86049) を指定する必要があります\] セクションで、 `defaultProvider` 属性です。 指定しない場合、 [membership 要素 \(ASP.NET 設定スキーマ\)](http://msdn.microsoft.com/ja-jp/b9c1ee8f-33ca-4361-8666-b42a0fe86049) 」セクションを Web.config では、コンピューター構成から値を使用し、 <xref:System.Web.Security.SqlMembershipProvider> という名前のインスタンス `AspNetSqlProvider` として確立された、 `defaultProvider`です。  
  
 プロバイダーへの参照を厳密に型を取得する、 <xref:System.Web.Security.Membership.Providers%2A> コレクション メンバーシップ プロバイダーを名前でインデックス作成し、目的の型としてキャストします。  
  
   
  
## 例  
 次のコード例では、アプリケーションとそれらの種類に対して有効なプロバイダーが一覧表示します。  
  
 [!code-csharp[System.Web.Security.Membership\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/Providerscs.aspx#7)]
 [!code-vb[System.Web.Security.Membership\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/Providersvb.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresQuestionAndAnswer">
      <MemberSignature Language="C#" Value="public static bool RequiresQuestionAndAnswer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool RequiresQuestionAndAnswer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.RequiresQuestionAndAnswer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既定のメンバーシップ プロバイダーが、ユーザーがパスワードのリセットおよび取得する際のパスワードの質問の回答を必要とするかどうかを示す値を取得します。</summary>
        <value>パスワードのリセットと取得においてパスワードの質問に対する回答が必要な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パスワードの質問と回答を必要とするを取得またはユーザーのパスワードをリセットするときのセキュリティの追加のレイヤーを提供します。 ユーザーを指定できます質問と回答が作成されると、ユーザー名を取得または忘れたパスワードをリセット後で使用できることです。  
  
 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> 場合にチェックが <xref:System.Web.Security.MembershipUser.ResetPassword%2A> または <xref:System.Web.Security.MembershipUser.GetPassword%2A> が呼び出されます。 .NET Framework で提供されるプロバイダーをスロー、 <xref:System.NotSupportedException> 場合 <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> は `true` し、指定したパスワードの回答は `null`です。  
  
 場合 <xref:System.Web.Security.Membership.EnablePasswordReset%2A> と <xref:System.Web.Security.Membership.EnablePasswordRetrieval%2A> が両方とも `false`, 、<xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> も新しいユーザーを作成したら、質問と回答の作成を強制に使用できます。 ただし、質問と回答は使用されません。 使用して、質問を取得することができます、 <xref:System.Web.Security.MembershipUser> クラスです。  
  
 詳細については、<xref:System.Web.Security.MembershipUser.ResetPassword%2A> および <xref:System.Web.Security.MembershipUser.GetPassword%2A> を参照してください。  
  
   
  
## 例  
 次のコード例にある要素を示しています、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションでのインスタンスを使用することを指定、 <xref:System.Web.Security.SqlMembershipProvider>, により、パスワードのリセット、およびリセットを実行するときに、パスワードの解答を必要とします。  
  
```  
<membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="false"  
      enablePasswordReset="true"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Hashed"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 次のコード サンプルの値をチェックする <xref:System.Web.Security.Membership.RequiresQuestionAndAnswer%2A> し、パスワードの質問とユーザーの作成時に提供する応答のために必要なコントロールを追加します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれます。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/CreateUsercs.aspx#2)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/CreateUservb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUser">
      <MemberSignature Language="C#" Value="public static void UpdateUser (System.Web.Security.MembershipUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UpdateUser(class System.Web.Security.MembershipUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.UpdateUser(System.Web.Security.MembershipUser)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="System.Web.Security.MembershipUser" />
      </Parameters>
      <Docs>
        <param name="user">A <see cref="T:System.Web.Security.MembershipUser" /> を更新するユーザーを表すオブジェクトと、ユーザーの情報を更新します。</param>
        <summary>指定したユーザーの情報でデータベースを更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.UpdateUser%2A> 入力として受け取り、 <xref:System.Web.Security.MembershipUser> オブジェクトは、メンバーシップのユーザーの現在の情報が設定されのプロパティ値を持つデータ ソースが更新、 <xref:System.Web.Security.MembershipUser> オブジェクトです。 新しいを作成する <xref:System.Web.Security.MembershipUser>, 、したり取得したり、 <xref:System.Web.Security.MembershipUser> オブジェクトを使用してデータ ソースでの現在の値が設定された、 <xref:System.Web.Security.Membership.GetUser%2A>, 、<xref:System.Web.Security.Membership.GetAllUsers%2A>, 、<xref:System.Web.Security.Membership.FindUsersByName%2A>, 、または <xref:System.Web.Security.Membership.FindUsersByEmail%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、現在ログオンしているユーザーの電子メール アドレスを更新します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/UpdateEmailcs.aspx#11)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/UpdateEmailvb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="user" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UserIsOnlineTimeWindow">
      <MemberSignature Language="C#" Value="public static int UserIsOnlineTimeWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 UserIsOnlineTimeWindow" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Membership.UserIsOnlineTimeWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最後の活動の日付\/時刻スタンプをユーザーがオンライン状態であるユーザーを後の分数を指定します。</summary>
        <value>最後のアクティビティの後に時間を分単位の日付\/時刻のスタンプをユーザーがオンライン状態であるユーザーを</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A> プロパティの値が呼び出し時にオンになって <xref:System.Web.Security.Membership.GetNumberOfUsersOnline%2A>します。 場合、 <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> のユーザーが現在の日付と時刻から差し引いたものより大きい、 <xref:System.Web.Security.Membership.UserIsOnlineTimeWindow%2A> 値の分単位で、ユーザーがオンラインと見なされます。 メンバーシップのユーザーと見なすかオンラインでを指定できます、 <xref:System.Web.Security.MembershipUser.IsOnline%2A> のプロパティ、 <xref:System.Web.Security.MembershipUser> クラスです。  
  
 <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> によってユーザーの資格情報を正常に検証するときに、ユーザーが更新されるため、 <xref:System.Web.Security.Membership.ValidateUser%2A> メソッドです。 更新することも、 <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> メンバーシップ ユーザーのいずれかを呼び出すときに、 <xref:System.Web.Security.Membership.GetUser%2A> オーバー ロードします。 呼び出した場合、 <xref:System.Web.Security.Membership.GetUser%2A> を受け取るオーバー ロード、 `userIsOnline` パラメーターの値を指定して `true` を更新する、 <xref:System.Web.Security.MembershipUser.LastActivityDate%2A> ユーザーのです。  
  
   
  
## 例  
 次のコード例にある要素を示しています、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションでのインスタンスを使用することを指定、 <xref:System.Web.Security.SqlMembershipProvider> し、設定、 `userIsOnlineTimeWindow` 属性を 20 分です。  
  
```  
<membership defaultProvider="SqlProvider"  
  userIsOnlineTimeWindow="20">  
  <providers>  
    <add name="SqlProvider"  
      type="System.Web.Security.SqlMembershipProvider"  
      connectionStringName="SqlServices"  
      enablePasswordRetrieval="true"  
      enablePasswordReset="false"  
      requiresQuestionAndAnswer="true"  
      passwordFormat="Encrypted"  
      applicationName="MyApplication" />  
  </providers>  
</membership>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateUser">
      <MemberSignature Language="C#" Value="public static bool ValidateUser (string username, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ValidateUser(string username, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Membership.ValidateUser(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">検証対象のユーザー名。</param>
        <param name="password">指定したユーザーのパスワード。</param>
        <summary>指定されたユーザー名とパスワードが有効かどうかを検証します。</summary>
        <returns>
          <see langword="true" /> 指定したユーザー名とパスワードが有効な場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Membership.ValidateUser%2A> ユーザー名とデータ ソースからのパスワードを確認する簡単な方法を提供します。 場合に、注意してください、 `username` パラメーターが空または `null`, 、 <xref:System.Web.HttpException> がスローされます。  
  
   
  
## 例  
 次のコード例は、フォーム認証を使用するように構成する ASP.NET アプリケーションのログイン ページを表示し、 <xref:System.Web.Security.Membership> クラスです。 指定されたユーザーの資格情報が有効でない場合は、ユーザーにメッセージが表示されます。 最初に要求された URL にユーザーをリダイレクトするそれ以外の場合、 <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> メソッドです。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.SqlMembershipProvider\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-vb[System.Web.Security.SqlMembershipProvider\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidatingPassword">
      <MemberSignature Language="C#" Value="public static event System.Web.Security.MembershipValidatePasswordEventHandler ValidatingPassword;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.Security.MembershipValidatePasswordEventHandler ValidatingPassword" />
      <MemberSignature Language="DocId" Value="E:System.Web.Security.Membership.ValidatingPassword" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.MembershipValidatePasswordEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが作成されるとき、パスワードが変更されるとき、またはリセットされるときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.MembershipProvider.ValidatingPassword> イベントが発生したときに、 <xref:System.Web.Security.MembershipProvider.CreateUser%2A> メソッドを <xref:System.Web.Security.MembershipProvider.ChangePassword%2A> メソッド、または <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> メンバーシップ プロバイダーのメソッドが呼び出されます。  
  
 使用することができます、 <xref:System.Web.Security.MembershipProvider.ValidatingPassword> パスワードの形式と値をユーザーのメンバーシップを検証するイベントです。  
  
 現在を取り消すことができます <xref:System.Web.Security.MembershipProvider.CreateUser%2A>, 、<xref:System.Web.Security.MembershipProvider.ChangePassword%2A>, 、または <xref:System.Web.Security.MembershipProvider.ResetPassword%2A> アクションを設定して、 <xref:System.Web.Security.ValidatePasswordEventArgs.Cancel%2A> 、指定されたプロパティ <xref:System.Web.Security.ValidatePasswordEventArgs> に `true` 中に、 <xref:System.Web.Security.MembershipProvider.ValidatingPassword> イベントです。  
  
 設定して、現在のアクションをキャンセルした場合、 <xref:System.Web.Security.ValidatePasswordEventArgs.Cancel%2A> プロパティを `true`, 、設定することができます、 <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> 、指定されたプロパティ <xref:System.Web.Security.ValidatePasswordEventArgs> パスワード検証の失敗の理由を説明する例外にします。 呼び出し元のメソッドは例外をスローする、 <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> プロパティに設定されています。 場合、 <xref:System.Web.Security.ValidatePasswordEventArgs.FailureInformation%2A> プロパティは、 `null`, 、呼び出し元は、一般的なパスワードの検証失敗に関する例外がスローされます。  
  
   
  
## 例  
 次のコード例は、 <xref:System.Web.Security.MembershipProvider.ValidatingPassword> イベントをユーザーのパスワードの形式を検証し、パスワードが必要な形式と一致しない場合は、操作を取り消します。  
  
 [!code-csharp[System.Web.Security.Membership\#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Membership/CS/CreateUser3cs.aspx#11)]
 [!code-vb[System.Web.Security.Membership\#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Membership/VB/CreateUser3vb.aspx#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindUsersByName">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したユーザー名と一致するユーザー名を持つメンバーシップ ユーザーのコレクションを取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データ ソースからのメンバーシップのユーザーの情報を取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DeleteUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データベースからユーザーを削除します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="FindUsersByEmail">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したメール アドレスと一致するメール アドレスを持つメンバーシップ ユーザーのコレクションを取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CreateUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データ ストアに新しいユーザーを追加します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetAllUsers">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データベース内のユーザーのコレクションを取得します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>