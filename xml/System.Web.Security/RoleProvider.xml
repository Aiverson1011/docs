<Type Name="RoleProvider" FullName="System.Web.Security.RoleProvider">
  <TypeSignature Language="C#" Value="public abstract class RoleProvider : System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit RoleProvider extends System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.RoleProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web.ApplicationServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Provider.ProviderBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>カスタム ロール プロバイダーを使用して管理サービスを提供するために、ASP.NET が実装するコントラクトを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET のロール管理は、ASP.NET アプリケーションのさまざまなロール プロバイダーを簡単に使用できるように設計されています。 .NET Framework に含まれている指定されたロール プロバイダーを使用することも、独自のプロバイダーを実装することができます。  
  
 カスタム ロール プロバイダーを実装する場合は、継承する必要が、 <xref:System.Web.Security.RoleProvider> 抽象クラスです。  
  
 カスタム ロール プロバイダーを作成する 2 つの主な理由があります。  
  
-   FoxPro データベース、Oracle データベース、または他のデータ ソースなどの .NET Framework に含まれているロール プロバイダーによってサポートされていないデータ ソースへの役割の情報を保存する必要があります。  
  
-   .NET Framework に付属するプロバイダーで使用されるデータベース スキーマとは異なるデータベース スキーマを使用してロール情報を管理する必要があります。 この一般的な例は、会社や Web サイトの SQL Server データベースに既に存在するロールのデータになります。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RoleProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.Security.RoleProvider" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 継承するクラスのコンス トラクターを実装する必要はありません、 <xref:System.Web.Security.RoleProvider> 抽象クラスです。 初期設定の値は、 <xref:System.Web.Security.RoleProvider> に実装が渡される、 <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> メソッドの実装です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public abstract void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.AddUsersToRoles(System.String[],System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">指定したロールに追加するユーザー名の文字列配列。</param>
        <param name="roleNames">指定したユーザー名の追加先となるロール名の文字列配列。</param>
        <summary>指定したユーザー名を、構成された <see langword="applicationName" /> の指定したロールに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [AddUsersToRoles メソッド \(String\<xref:System.Web.Security.RoleProvider.AddUsersToRoles%2A> によって呼び出される、 [AddUsersToRoles メソッド \(String\<xref:System.Web.Security.Roles> に指定されたユーザーをデータ ソースで指定されたロールに関連付けるクラスです。 ロールを追加する、構成されているに [AddUsersToRoles メソッド \(String\<xref:System.Web.Security.RoleProvider.ApplicationName%2A>します。  
  
 指定したロール名のいずれかが、構成されているが見つかりません。 どう `applicationName`, 、プロバイダーがスローすることをお勧め、 [AddUsersToRoles メソッド \(String\<xref:System.Configuration.Provider.ProviderException>です。  
  
 かどうかは指定されたユーザー名のいずれかに関連付けられていない、構成済みの指定したロール名のいずれかの `applicationName`, 、プロバイダーがスローすることをお勧め、 [AddUsersToRoles メソッド \(String\<xref:System.Configuration.Provider.ProviderException>です。  
  
 指定されたユーザー名のいずれかの場合 `null` または空の文字列は、プロバイダーが例外をスローすることをお勧めします。  
  
 指定されたロール名のいずれかの場合 `null` または空の文字列は、プロバイダーが例外をスローすることをお勧めします。  
  
 各を含めることをお勧めデータ ソースは、トランザクションをサポートする場合のトランザクションで操作を追加し、トランザクションをロールバックし、いずれかの追加操作が失敗する場合に例外をスローします。  
  
   
  
## 例  
 次のコード例のサンプル実装を示しています、 [AddUsersToRoles メソッド \(String\<xref:System.Web.Security.RoleProvider.AddUsersToRoles%2A> メソッドです。  
  
 [!code-csharp[System.Web.Security.IRoleProvider\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#2)]
 [!code-vb[System.Web.Security.IRoleProvider\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public abstract string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.RoleProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール情報を保管および取得するアプリケーションの名前を取得または設定します。</summary>
        <value>ロール情報を保管および取得するアプリケーションの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.RoleProvider.ApplicationName%2A> によって使用される、 <xref:System.Web.Security.Roles> に複数のアプリケーションのユーザーとロールを関連付けるにはクラスです。 これにより、複数のアプリケーションを複数のユーザー名やロール名の競合が発生することがなく、ユーザーとロール情報を保存する、同じデータベースを使用できます。 複数の ASP.NET アプリケーションは、同じデータベースを使用してに同じ値を指定することによって、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティです。<xref:System.Web.Security.Roles.ApplicationName%2A> プロパティをプログラムで、設定することができますか使用して Web アプリケーションの構成ファイルで宣言によって設定できます、 `applicationName` 属性です。  
  
 ない場合 <xref:System.Web.Security.RoleProvider.ApplicationName%2A> プロパティが指定されていることをお勧め、 <xref:System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath%2A> プロパティの値が使用されます。  
  
   
  
## 例  
 次のコード例のサンプル実装を示しています、 <xref:System.Web.Security.RoleProvider.ApplicationName%2A> プロパティです。  
  
 [!code-csharp[System.Web.Security.IRoleProvider\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#1)]
 [!code-vb[System.Web.Security.IRoleProvider\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public abstract void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.CreateRole(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">作成するロールの名前。</param>
        <summary>構成された <see langword="applicationName" /> のデータ ソースに新しいロールを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.RoleProvider.CreateRole%2A> is called by the <xref:System.Web.Security.Roles.CreateRole%2A> method of the <xref:System.Web.Security.Roles> class to add the specified role to the data source for the configured <xref:System.Web.Security.RoleProvider.ApplicationName%2A>.  
  
 If the specified role name already exists for the configured **languageKeyword tag is not supported!!!!**  
, is **languageKeyword tag is not supported!!!!**  
, or is an empty string, we recommend that your provider throw an exception.  
  
 If the specified role name contains a comma, we recommend that your provider throw an exception.  
  
 If your data source restricts the length of the role name, for example, through a fixed\-length column of a table in a database, we recommend that you throw an exception if the role name exceeds the maximum length allowed by the data source.  
  
   
  
## 例  
 The following code example shows a sample implementation of the <xref:System.Web.Security.RoleProvider.CreateRole%2A> method.  
  
 [!code-csharp[System.Web.Security.IRoleProvider\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#3)]
 [!code-vb[System.Web.Security.IRoleProvider\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public abstract bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.DeleteRole(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">削除するロールの名前。</param>
        <param name="throwOnPopulatedRole">
          <see langword="true" /> の場合は、<c>roleName</c> に 1 つ以上のメンバーがあり、かつ、<c>roleName</c> を削除しないと、例外がスローされます。</param>
        <summary>構成された <see langword="applicationName" /> のデータ ソースからロールを削除します。</summary>
        <returns>ロールが正常に削除された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.RoleProvider.DeleteRole%2A> is called by the <xref:System.Web.Security.Roles.DeleteRole%2A> and the <xref:System.Web.Security.Roles.DeleteRole%2A> methods of the <xref:System.Web.Security.Roles> class to delete the specified role from the data source for the configured <xref:System.Web.Security.RoleProvider.ApplicationName%2A>.  
  
 When you delete a role from the data source, ensure that you also delete any associations between a user name and the deleted role for the configured **languageKeyword tag is not supported!!!!**  
.  
  
 If **parameterReference tag is not supported!!!!**  
 is **languageKeyword tag is not supported!!!!**  
, and the role identified by the **parameterReference tag is not supported!!!!**  
 parameter has one or more members, throw a <xref:System.Configuration.Provider.ProviderException> and do not delete the role. If **parameterReference tag is not supported!!!!**  
 is **languageKeyword tag is not supported!!!!**  
, then delete the role whether it is empty or not.  
  
 If the specified role name does not exist, is **languageKeyword tag is not supported!!!!**  
, or is an empty string, we recommend that your provider throw an exception.  
  
   
  
## 例  
 The following code example shows a sample implementation of the <xref:System.Web.Security.RoleProvider.DeleteRole%2A> method.  
  
 [!code-csharp[System.Web.Security.IRoleProvider\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#4)]
 [!code-vb[System.Web.Security.IRoleProvider\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public abstract string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.FindUsersInRole(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">検索範囲とするロール。</param>
        <param name="usernameToMatch">検索するユーザー名。</param>
        <summary>指定したユーザー名と一致するユーザー名が含まれる、特定のロールのユーザー名の配列を取得します。</summary>
        <returns>ユーザー名が <paramref name="usernameToMatch" /> に一致し、ユーザーが指定されたロールのメンバーであるすべてのユーザーの名前を格納する文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.RoleProvider.FindUsersInRole%2A> メソッドは、 <xref:System.Web.Security.Roles> クラスし、ユーザー名が、指定された一致が含まれているロールのユーザーの一覧を返します `usernameToMatch` に、構成された `applicationName`します。 ワイルドカードのサポートは、データ ソースに基づいた含まれます。 ユーザーは、ユーザー名によってアルファベット順に返されます。  
  
 スローすることをお勧めする <xref:System.Configuration.Provider.ProviderException> 場合 `roleName` データ ソースに存在しません。  
  
   
  
## 例  
 次のコード例は、サンプルを示しています。 <xref:System.Web.Security.RoleProvider.FindUsersInRole%2A> 実装します。  
  
 [!code-csharp[System.Web.Security.IRoleProvider\#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#11)]
 [!code-vb[System.Web.Security.IRoleProvider\#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public abstract string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.GetAllRoles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>構成されている <see langword="applicationName" /> のすべてのロールのリストを取得します。</summary>
        <returns>構成されている <see langword="applicationName" /> のデータ ソースに格納されているすべてのロール名を格納している文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.RoleProvider.GetAllRoles%2A> によって呼び出される、 <xref:System.Web.Security.Roles.GetAllRoles%2A> のメソッド、 <xref:System.Web.Security.Roles> データ ソースからロール名の一覧を取得するクラス。 指定したロールのみ <xref:System.Web.Security.RoleProvider.ApplicationName%2A> が取得されます。  
  
 構成されたロールが存在しない場合 `applicationName`, 、プロバイダーが要素のない文字列配列を返すことをお勧めします。  
  
   
  
## 例  
 次のコード例のサンプル実装を示しています、 <xref:System.Web.Security.RoleProvider.GetAllRoles%2A> メソッドです。  
  
 [!code-csharp[System.Web.Security.IRoleProvider\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#5)]
 [!code-vb[System.Web.Security.IRoleProvider\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public abstract string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.GetRolesForUser(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">ロールの一覧を取得するユーザー。</param>
        <summary>構成済みの <see langword="applicationName" /> で指定されたユーザーに割り当てられたロールの一覧を取得します。</summary>
        <returns>構成済みの <see langword="applicationName" /> で指定されたユーザーに割り当てられているすべてのロールの名前を格納している文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A> によって呼び出される、 <xref:System.Web.Security.Roles.GetRolesForUser%2A> のメソッド、 <xref:System.Web.Security.Roles> データ ソースから指定されたユーザーが関連付けられているロール名を取得するクラス。 構成されたロールのみ <xref:System.Web.Security.RoleProvider.ApplicationName%2A> が取得されます。  
  
 構成された、指定したユーザーのロールが存在していないかどうかは `applicationName`, 、プロバイダーが要素のない文字列配列を返すことをお勧めします。  
  
 指定されたユーザー名がある場合 `null` または空の文字列は、プロバイダーが例外をスローすることをお勧めします。  
  
   
  
## 例  
 次のコード例のサンプル実装を示しています、 <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A> メソッドです。  
  
 [!code-csharp[System.Web.Security.IRoleProvider\#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#6)]
 [!code-vb[System.Web.Security.IRoleProvider\#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public abstract string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.GetUsersInRole(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">ユーザーの一覧を取得するロールの名前。</param>
        <summary>構成済み <see langword="applicationName" /> の指定されたロールに属するユーザーのリストを取得します。</summary>
        <returns>構成済み <see langword="applicationName" /> の指定されたロールのメンバーであるすべてのユーザーの名前を格納している文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> によって呼び出される、 <xref:System.Web.Security.Roles.GetUsersInRole%2A> のメソッド、 <xref:System.Web.Security.Roles> データ ソースからロールに関連付けられたユーザー名を取得するクラス。 構成されたロールのみ <xref:System.Web.Security.RoleProvider.ApplicationName%2A> が取得されます。  
  
 構成された、指定されたロール名が存在しないかどうか `applicationName` である場合、または `null` または空の文字列をお勧めは、プロバイダーが例外をスローします。  
  
 ユーザーが、構成済みの指定したロールに関連付けられていないかどうかは `applicationName`, 、プロバイダーが要素のない文字列配列を返すことをお勧めします。  
  
   
  
## 例  
 次のコード例のサンプル実装を示しています、 <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> メソッドです。  
  
 [!code-csharp[System.Web.Security.IRoleProvider\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#7)]
 [!code-vb[System.Web.Security.IRoleProvider\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public abstract bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.IsUserInRole(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">検索するユーザー名。</param>
        <param name="roleName">検索範囲とするロール。</param>
        <summary>指定したユーザーが、構成された <see langword="applicationName" /> の指定したロールに存在するかどうかを示す値を取得します。</summary>
        <returns>指定したユーザーが、構成された <see langword="applicationName" /> の指定したロールに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.RoleProvider.IsUserInRole%2A> メソッドは、 <xref:System.Web.Security.Roles.IsUserInRole%2A> のメソッド、 <xref:System.Web.Security.Roles> 現在ログオンしているユーザーは、構成済みのデータ ソースからロールに関連付けられているかどうかを決めるクラスを <xref:System.Web.Security.Roles.ApplicationName%2A>します。  
  
 指定されたユーザー名がある場合 `null` または空の文字列は、プロバイダーが例外をスローすることをお勧めします。  
  
 指定されたロール名の場合 `null` または空の文字列は、プロバイダーが例外をスローすることをお勧めします。  
  
   
  
## 例  
 次のコード例のサンプル実装を示しています、 <xref:System.Web.Security.RoleProvider.IsUserInRole%2A> メソッドです。  
  
 [!code-csharp[System.Web.Security.IRoleProvider\#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#8)]
 [!code-vb[System.Web.Security.IRoleProvider\#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public abstract void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">指定したロールから削除するユーザー名の文字列配列。</param>
        <param name="roleNames">指定したユーザー名を削除するロール名の文字列配列。</param>
        <summary>指定したユーザー名を、構成された <see langword="applicationName" /> の指定したロールから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [RemoveUsersFromRoles メソッド \(String\<xref:System.Web.Security.RoleProvider.RemoveUsersFromRoles%2A> によって呼び出される [RemoveUsersFromRoles メソッド \(String\<xref:System.Web.Security.Roles.RemoveUserFromRole%2A> , 、[RemoveUsersFromRoles メソッド \(String\<xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> , 、[RemoveUsersFromRoles メソッド \(String\<xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> , 、および [RemoveUsersFromRoles メソッド \(String\<xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> のメソッド、 [RemoveUsersFromRoles メソッド \(String\<xref:System.Web.Security.Roles> データ ソースで指定されたロールから、指定したユーザーを削除するクラス。 構成されたロールのみ [RemoveUsersFromRoles メソッド \(String\<xref:System.Web.Security.RoleProvider.ApplicationName%2A> 変更されます。  
  
 指定したロール名のいずれかが、構成されているが見つかりません。 どう `applicationName`, 、プロバイダーがスローすることをお勧め、 [RemoveUsersFromRoles メソッド \(String\<xref:System.Configuration.Provider.ProviderException>です。  
  
 かどうかは指定されたユーザー名のいずれかに関連付けられていない、構成済みの指定したロール名のいずれかの `applicationName`, 、プロバイダーがスローすることをお勧め、 [RemoveUsersFromRoles メソッド \(String\<xref:System.Configuration.Provider.ProviderException>です。  
  
 指定されたユーザー名のいずれかの場合 `null` または空の文字列は、プロバイダーが例外をスローすることをお勧めします。  
  
 指定されたロール名のいずれかの場合 `null` または空の文字列は、プロバイダーが例外をスローすることをお勧めします。  
  
 データ ソースは、トランザクションをサポートするトランザクションで各削除操作を含めることと、トランザクションをロールバックして、削除操作が失敗した場合に例外をスローすることをお勧めします。  
  
   
  
## 例  
 次のコード例のサンプル実装を示しています、 [RemoveUsersFromRoles メソッド \(String\<xref:System.Web.Security.RoleProvider.RemoveUsersFromRoles%2A> メソッドです。  
  
 [!code-csharp[System.Web.Security.IRoleProvider\#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#9)]
 [!code-vb[System.Web.Security.IRoleProvider\#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public abstract bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.RoleProvider.RoleExists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.ApplicationServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">データ ソースで検索するロールの名前。</param>
        <summary>構成された <see langword="applicationName" /> の指定されたロール名がロール データ ソースに既に存在するかどうかを示す値を取得します。</summary>
        <returns>構成された <see langword="applicationName" /> のロール名がデータ ソースに既に存在する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.RoleProvider.RoleExists%2A> によって呼び出される、 <xref:System.Web.Security.Roles.RoleExists%2A> のメソッド、 <xref:System.Web.Security.Roles> ロール名が、構成済みのデータ ソースに存在するかどうかを決めるクラスを <xref:System.Web.Security.Roles.ApplicationName%2A>します。  
  
 指定されたロール名の場合 `null` または空の文字列は、プロバイダーが例外をスローすることをお勧めします。  
  
   
  
## 例  
 次のコード例のサンプル実装を示しています、 <xref:System.Web.Security.RoleProvider.RoleExists%2A> メソッドです。  
  
 [!code-csharp[System.Web.Security.IRoleProvider\#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/CS/odbcroleprovidersnippets.cs#10)]
 [!code-vb[System.Web.Security.IRoleProvider\#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.IRoleProvider/VB/odbcroleprovidersnippets.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>