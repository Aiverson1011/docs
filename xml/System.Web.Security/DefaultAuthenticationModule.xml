<Type Name="DefaultAuthenticationModule" FullName="System.Web.Security.DefaultAuthenticationModule">
  <TypeSignature Language="C#" Value="public sealed class DefaultAuthenticationModule : System.Web.IHttpModule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DefaultAuthenticationModule extends System.Object implements class System.Web.IHttpModule" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.DefaultAuthenticationModule" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpModule</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>認証オブジェクトがコンテキストに存在するようにします。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.DefaultAuthenticationModule> 確実に、 <xref:System.Web.HttpContext.User%2A> 、現在のプロパティ <xref:System.Web.HttpContext> インスタンスに設定されて、 <xref:System.Security.Principal.IPrincipal> 要求ごとのオブジェクト。<xref:System.Web.Security.DefaultAuthenticationModule> を調べ、 <xref:System.Web.HttpContext.User%2A> 後プロパティ、 <xref:System.Web.HttpApplication.AuthenticateRequest> イベントとする前に、 <xref:System.Web.HttpApplication.AuthorizeRequest> イベントです。 場合、 <xref:System.Web.HttpContext.User%2A> プロパティは、 `null`, 、 <xref:System.Web.Security.DefaultAuthenticationModule> 設定、 <xref:System.Web.HttpContext.User%2A> プロパティを <xref:System.Security.Principal.GenericPrincipal> ユーザー情報を含まないオブジェクトです。  
  
 認証モジュールを設定する場合、 <xref:System.Web.HttpResponse.StatusCode%2A> 401 が発生するプロパティ、 <xref:System.Web.Security.DefaultAuthenticationModule> アクセス拒否のエラー ページがレンダリングされます。 場合の値、 <xref:System.Web.HttpResponse.StatusCode%2A> プロパティが 200 より大きい値に設定、 <xref:System.Web.Security.DefaultAuthenticationModule> オブジェクトは、要求を終了します。 その場合は、HTTP モジュールのみを定期受信する、 <xref:System.Web.HttpApplication.EndRequest> イベントが現在の要求を完了する前に呼び出されます。  
  
 <xref:System.Web.Security.DefaultAuthenticationModule> を公開、 <xref:System.Web.Security.DefaultAuthenticationModule.Authenticate> イベントです。 このイベントを使用するには、ユーザー設定を提供する <xref:System.Security.Principal.IPrincipal> のオブジェクト、 <xref:System.Web.HttpContext.User%2A> 、現在のプロパティ <xref:System.Web.HttpContext> インスタンス。<xref:System.Web.Security.WindowsAuthenticationModule.Authenticate> という名前のイベントを指定することによってアクセス イベント **DefaultAuthentication\_OnAuthenticate** アプリケーションの Global.asax ファイルにします。  
  
   
  
## 例  
 次の例では、 **DefaultAuthentication\_OnAuthenticate** イベントをテストするかどうか、 <xref:System.Web.HttpContext.User%2A> 、現在のプロパティ <xref:System.Web.HttpContext> インスタンスが `null`です。 場合、 <xref:System.Web.HttpContext.User%2A> プロパティは、 `null`, 、し、サンプル セット、 <xref:System.Web.HttpContext.User%2A> 、現在のプロパティ <xref:System.Web.HttpContext> インスタンスを <xref:System.Security.Principal.GenericPrincipal> オブジェクト場所、 <xref:System.Security.Principal.GenericPrincipal.Identity%2A> の <xref:System.Security.Principal.GenericPrincipal> オブジェクトが、 <xref:System.Security.Principal.GenericIdentity> で、 <xref:System.Security.Principal.GenericIdentity.Name%2A> "default"の値  
  
> [!NOTE]
>  **DefaultAuthentication\_OnAuthenticate** イベントが発生する前に、 <xref:System.Web.HttpApplication.AuthorizeRequest> イベントです。 その結果、設定した場合、 <xref:System.Web.HttpContext.User%2A> 、現在のプロパティ <xref:System.Web.HttpContext> インスタンスにカスタムのユーザーに、アプリケーションの動作は影響ことができます。 たとえばを使用している場合、 <xref:System.Web.Security.FormsAuthentication> を指定してクラス `<deny users="?" />` だけで認証されたユーザーがアクセス権をサイトがあるこのサンプルの原因になりますが無視される要素、ユーザーは、名前を必要として \[構成\] セクションでは"default" 代わりに、指定すると `<deny users="default" />` に認証されたユーザーのみがサイトにアクセスできることを確認します。  
  
 [!code-csharp[System.Web.Security.DefaultAuthenticationModule\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.DefaultAuthenticationModule/CS/global.asax#1)]
 [!code-vb[System.Web.Security.DefaultAuthenticationModule\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.DefaultAuthenticationModule/VB/global.asax#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultAuthenticationModule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.DefaultAuthenticationModule.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.Security.DefaultAuthenticationModule" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This constructor is not intended to be called from application code.  
  
 ASP.NET calls this constructor to create an instance of the <xref:System.Web.Security.DefaultAuthenticationModule> class. After calling the constructor, it calls the <xref:System.Web.Security.DefaultAuthenticationModule.Init%2A> method to initialize the new <xref:System.Web.Security.DefaultAuthenticationModule> object.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public event System.Web.Security.DefaultAuthenticationEventHandler Authenticate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.Security.DefaultAuthenticationEventHandler Authenticate" />
      <MemberSignature Language="DocId" Value="E:System.Web.Security.DefaultAuthenticationModule.Authenticate" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.DefaultAuthenticationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求が認証された後に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.DefaultAuthenticationModule.Authenticate> イベントが発生した後、 <xref:System.Web.HttpApplication.AuthenticateRequest> イベントです。 いることを確認するために使用されて、 <xref:System.Web.HttpContext.User%2A> 、現在のプロパティ <xref:System.Web.HttpContext> インスタンスには、 <xref:System.Security.Principal.IPrincipal> オブジェクトです。  
  
 アクセスできる、 <xref:System.Web.Security.DefaultAuthenticationModule.Authenticate> のイベント、 <xref:System.Web.Security.DefaultAuthenticationModule> という名前のサブルーチンを指定することでクラス **DefaultAuthentication\_OnAuthenticate** アプリケーションの Global.asax ファイルにします。  
  
 使用することができます、 <xref:System.Web.Security.DefaultAuthenticationEventArgs.Context%2A> のプロパティ、 <xref:System.Web.Security.DefaultAuthenticationEventArgs> 内のオブジェクト、 **DefaultAuthentication\_OnAuthenticate** 設定イベントが、 <xref:System.Web.HttpContext.User%2A> 、現在のプロパティ <xref:System.Web.HttpContext> カスタム インスタンス <xref:System.Security.Principal.IPrincipal> オブジェクトです。 値が指定されていない場合、 <xref:System.Web.HttpContext.User%2A> プロパティには、 <xref:System.Web.Security.DefaultAuthenticationModule> 設定、 <xref:System.Web.HttpContext.User%2A> のプロパティ、 <xref:System.Web.HttpContext> インスタンスを <xref:System.Security.Principal.GenericPrincipal> ユーザー情報を含まないオブジェクトです。  
  
 **DefaultAuthentication\_OnAuthenticate** イベントが発生した後、 <xref:System.Web.HttpApplication.AuthenticateRequest> イベントとする前に、 <xref:System.Web.HttpApplication.AuthorizeRequest> イベントです。 変更を拒否またはアプリケーションへのアクセスを許可するユーザー名に依存しているセクションがある場合、 <xref:System.Web.HttpContext.User%2A> 、現在のプロパティ <xref:System.Web.HttpContext> インスタンス、アプリケーションの動作に影響することができます。 あることを確認中に設定するユーザー名、 **DefaultAuthentication\_OnAuthenticate** イベントは、構成で、セクションを指定すると見なされます。  
  
> [!NOTE]
>  Web アプリケーションは、統合モードで IIS 7.0 で実行されている場合、 <xref:System.Web.Security.DefaultAuthenticationModule.Authenticate> のイベント、 <xref:System.Web.Security.DefaultAuthenticationModule> は発生しません。 場合、 `mode` 構成要素の属性が"None"に設定し、アプリケーションがサブスクライブする、 <xref:System.Web.Security.DefaultAuthenticationModule.Authenticate> 、イベント、 <xref:System.PlatformNotSupportedException> エラーが発生します。 このシナリオでに認証の通知を受信するサービスに登録、 <xref:System.Web.HttpApplication.AuthenticateRequest> のイベント、 <xref:System.Web.HttpApplication> インスタンス。 統合モードでの互換性の問題に関する詳細については、次を参照してください。 [Moving an ASP.NET Application from IIS 6.0 to IIS 7.0](http://msdn.microsoft.com/ja-jp/76f9cc78-f978-4837-b1c8-51d642ec4847)します。  
  
   
  
## 例  
 次のコード例では、 **DefaultAuthentication\_OnAuthenticate** イベントをテストするかどうか、 <xref:System.Web.HttpContext.User%2A> 、現在のプロパティ <xref:System.Web.HttpContext> インスタンスが `null`です。 場合、 <xref:System.Web.HttpContext.User%2A> プロパティは、 `null`, 、し、サンプル セット、 <xref:System.Web.HttpContext.User%2A> 、現在のプロパティ <xref:System.Web.HttpContext> インスタンスを <xref:System.Security.Principal.GenericPrincipal> オブジェクト場所、 <xref:System.Security.Principal.GenericPrincipal.Identity%2A> の <xref:System.Security.Principal.GenericPrincipal> オブジェクトが、 <xref:System.Security.Principal.GenericIdentity> で、 <xref:System.Security.Principal.GenericIdentity.Name%2A> "default"の値  
  
> [!NOTE]
>  **DefaultAuthentication\_OnAuthenticate** イベントが発生する前に、 <xref:System.Web.HttpApplication.AuthorizeRequest> イベントです。 その結果、設定した場合、 <xref:System.Web.HttpContext.User%2A> 、現在のプロパティ <xref:System.Web.HttpContext> インスタンスにカスタムのユーザーに、アプリケーションの動作は影響ことができます。 たとえばを使用している場合、 <xref:System.Web.Security.FormsAuthentication> を指定してクラス `<deny users="?" />` だけで認証されたユーザーがアクセス権をサイトがあるこのサンプルの原因になりますが無視される要素、ユーザーは、名前を必要として \[構成\] セクションでは"default" 代わりに、指定すると `<deny users="default" />` に認証されたユーザーのみがサイトにアクセスできることを確認します。  
  
 [!code-csharp[System.Web.Security.DefaultAuthenticationModule\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.DefaultAuthenticationModule/CS/global.asax#1)]
 [!code-vb[System.Web.Security.DefaultAuthenticationModule\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.DefaultAuthenticationModule/VB/global.asax#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.DefaultAuthenticationModule.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>によって使用されるメモリ以外のすべてのリソースを解放、 <see cref="T:System.Web.Security.DefaultAuthenticationModule" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アプリケーション コードから呼び出されるものはありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public void Init (System.Web.HttpApplication app);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Init(class System.Web.HttpApplication app) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.DefaultAuthenticationModule.Init(System.Web.HttpApplication)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="app" Type="System.Web.HttpApplication" />
      </Parameters>
      <Docs>
        <param name="app">現在の <see cref="T:System.Web.HttpApplication" /> インスタンス。</param>
        <summary>初期化、 <see cref="T:System.Web.Security.DefaultAuthenticationModule" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アプリケーション コードから呼び出されるものはありません。  
  
 <xref:System.Web.Security.DefaultAuthenticationModule.Init%2A> メソッドにより、 <xref:System.Web.Security.DefaultAuthenticationModule> イベントの処理に含まれています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>